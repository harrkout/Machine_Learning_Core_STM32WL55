
SHUBv3_MLC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e4e4  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f8  0800e628  0800e628  0001e628  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ed20  0800ed20  000200ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800ed20  0800ed20  0001ed20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ed28  0800ed28  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ed28  0800ed28  0001ed28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ed2c  0800ed2c  0001ed2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  0800ed30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000854  200000ec  0800ee1c  000200ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  20000940  0800ee1c  00020940  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038364  00000000  00000000  00020116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004bfd  00000000  00000000  0005847a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002c68  00000000  00000000  0005d078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002aa8  00000000  00000000  0005fce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022b04  00000000  00000000  00062788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029980  00000000  00000000  0008528c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2e0f  00000000  00000000  000aec0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00181a1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000cf08  00000000  00000000  00181a6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000ec 	.word	0x200000ec
 800015c:	00000000 	.word	0x00000000
 8000160:	0800e60c 	.word	0x0800e60c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000f0 	.word	0x200000f0
 800017c:	0800e60c 	.word	0x0800e60c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_frsub>:
 8000bf8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bfc:	e002      	b.n	8000c04 <__addsf3>
 8000bfe:	bf00      	nop

08000c00 <__aeabi_fsub>:
 8000c00:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c04 <__addsf3>:
 8000c04:	0042      	lsls	r2, r0, #1
 8000c06:	bf1f      	itttt	ne
 8000c08:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c0c:	ea92 0f03 	teqne	r2, r3
 8000c10:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c14:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c18:	d06a      	beq.n	8000cf0 <__addsf3+0xec>
 8000c1a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c1e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c22:	bfc1      	itttt	gt
 8000c24:	18d2      	addgt	r2, r2, r3
 8000c26:	4041      	eorgt	r1, r0
 8000c28:	4048      	eorgt	r0, r1
 8000c2a:	4041      	eorgt	r1, r0
 8000c2c:	bfb8      	it	lt
 8000c2e:	425b      	neglt	r3, r3
 8000c30:	2b19      	cmp	r3, #25
 8000c32:	bf88      	it	hi
 8000c34:	4770      	bxhi	lr
 8000c36:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c42:	bf18      	it	ne
 8000c44:	4240      	negne	r0, r0
 8000c46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c4a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c4e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c52:	bf18      	it	ne
 8000c54:	4249      	negne	r1, r1
 8000c56:	ea92 0f03 	teq	r2, r3
 8000c5a:	d03f      	beq.n	8000cdc <__addsf3+0xd8>
 8000c5c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c60:	fa41 fc03 	asr.w	ip, r1, r3
 8000c64:	eb10 000c 	adds.w	r0, r0, ip
 8000c68:	f1c3 0320 	rsb	r3, r3, #32
 8000c6c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c70:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__addsf3+0x78>
 8000c76:	4249      	negs	r1, r1
 8000c78:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c7c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c80:	d313      	bcc.n	8000caa <__addsf3+0xa6>
 8000c82:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c86:	d306      	bcc.n	8000c96 <__addsf3+0x92>
 8000c88:	0840      	lsrs	r0, r0, #1
 8000c8a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c8e:	f102 0201 	add.w	r2, r2, #1
 8000c92:	2afe      	cmp	r2, #254	; 0xfe
 8000c94:	d251      	bcs.n	8000d3a <__addsf3+0x136>
 8000c96:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c9e:	bf08      	it	eq
 8000ca0:	f020 0001 	biceq.w	r0, r0, #1
 8000ca4:	ea40 0003 	orr.w	r0, r0, r3
 8000ca8:	4770      	bx	lr
 8000caa:	0049      	lsls	r1, r1, #1
 8000cac:	eb40 0000 	adc.w	r0, r0, r0
 8000cb0:	3a01      	subs	r2, #1
 8000cb2:	bf28      	it	cs
 8000cb4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cb8:	d2ed      	bcs.n	8000c96 <__addsf3+0x92>
 8000cba:	fab0 fc80 	clz	ip, r0
 8000cbe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cc2:	ebb2 020c 	subs.w	r2, r2, ip
 8000cc6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cca:	bfaa      	itet	ge
 8000ccc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cd0:	4252      	neglt	r2, r2
 8000cd2:	4318      	orrge	r0, r3
 8000cd4:	bfbc      	itt	lt
 8000cd6:	40d0      	lsrlt	r0, r2
 8000cd8:	4318      	orrlt	r0, r3
 8000cda:	4770      	bx	lr
 8000cdc:	f092 0f00 	teq	r2, #0
 8000ce0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ce4:	bf06      	itte	eq
 8000ce6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cea:	3201      	addeq	r2, #1
 8000cec:	3b01      	subne	r3, #1
 8000cee:	e7b5      	b.n	8000c5c <__addsf3+0x58>
 8000cf0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cf4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf8:	bf18      	it	ne
 8000cfa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cfe:	d021      	beq.n	8000d44 <__addsf3+0x140>
 8000d00:	ea92 0f03 	teq	r2, r3
 8000d04:	d004      	beq.n	8000d10 <__addsf3+0x10c>
 8000d06:	f092 0f00 	teq	r2, #0
 8000d0a:	bf08      	it	eq
 8000d0c:	4608      	moveq	r0, r1
 8000d0e:	4770      	bx	lr
 8000d10:	ea90 0f01 	teq	r0, r1
 8000d14:	bf1c      	itt	ne
 8000d16:	2000      	movne	r0, #0
 8000d18:	4770      	bxne	lr
 8000d1a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d1e:	d104      	bne.n	8000d2a <__addsf3+0x126>
 8000d20:	0040      	lsls	r0, r0, #1
 8000d22:	bf28      	it	cs
 8000d24:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d28:	4770      	bx	lr
 8000d2a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d2e:	bf3c      	itt	cc
 8000d30:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d34:	4770      	bxcc	lr
 8000d36:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d3a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d42:	4770      	bx	lr
 8000d44:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d48:	bf16      	itet	ne
 8000d4a:	4608      	movne	r0, r1
 8000d4c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d50:	4601      	movne	r1, r0
 8000d52:	0242      	lsls	r2, r0, #9
 8000d54:	bf06      	itte	eq
 8000d56:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d5a:	ea90 0f01 	teqeq	r0, r1
 8000d5e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d62:	4770      	bx	lr

08000d64 <__aeabi_ui2f>:
 8000d64:	f04f 0300 	mov.w	r3, #0
 8000d68:	e004      	b.n	8000d74 <__aeabi_i2f+0x8>
 8000d6a:	bf00      	nop

08000d6c <__aeabi_i2f>:
 8000d6c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d70:	bf48      	it	mi
 8000d72:	4240      	negmi	r0, r0
 8000d74:	ea5f 0c00 	movs.w	ip, r0
 8000d78:	bf08      	it	eq
 8000d7a:	4770      	bxeq	lr
 8000d7c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d80:	4601      	mov	r1, r0
 8000d82:	f04f 0000 	mov.w	r0, #0
 8000d86:	e01c      	b.n	8000dc2 <__aeabi_l2f+0x2a>

08000d88 <__aeabi_ul2f>:
 8000d88:	ea50 0201 	orrs.w	r2, r0, r1
 8000d8c:	bf08      	it	eq
 8000d8e:	4770      	bxeq	lr
 8000d90:	f04f 0300 	mov.w	r3, #0
 8000d94:	e00a      	b.n	8000dac <__aeabi_l2f+0x14>
 8000d96:	bf00      	nop

08000d98 <__aeabi_l2f>:
 8000d98:	ea50 0201 	orrs.w	r2, r0, r1
 8000d9c:	bf08      	it	eq
 8000d9e:	4770      	bxeq	lr
 8000da0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000da4:	d502      	bpl.n	8000dac <__aeabi_l2f+0x14>
 8000da6:	4240      	negs	r0, r0
 8000da8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dac:	ea5f 0c01 	movs.w	ip, r1
 8000db0:	bf02      	ittt	eq
 8000db2:	4684      	moveq	ip, r0
 8000db4:	4601      	moveq	r1, r0
 8000db6:	2000      	moveq	r0, #0
 8000db8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dbc:	bf08      	it	eq
 8000dbe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dc2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dc6:	fabc f28c 	clz	r2, ip
 8000dca:	3a08      	subs	r2, #8
 8000dcc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dd0:	db10      	blt.n	8000df4 <__aeabi_l2f+0x5c>
 8000dd2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ddc:	f1c2 0220 	rsb	r2, r2, #32
 8000de0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000de4:	fa20 f202 	lsr.w	r2, r0, r2
 8000de8:	eb43 0002 	adc.w	r0, r3, r2
 8000dec:	bf08      	it	eq
 8000dee:	f020 0001 	biceq.w	r0, r0, #1
 8000df2:	4770      	bx	lr
 8000df4:	f102 0220 	add.w	r2, r2, #32
 8000df8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dfc:	f1c2 0220 	rsb	r2, r2, #32
 8000e00:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e04:	fa21 f202 	lsr.w	r2, r1, r2
 8000e08:	eb43 0002 	adc.w	r0, r3, r2
 8000e0c:	bf08      	it	eq
 8000e0e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e12:	4770      	bx	lr

08000e14 <__aeabi_fmul>:
 8000e14:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e18:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e1c:	bf1e      	ittt	ne
 8000e1e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e22:	ea92 0f0c 	teqne	r2, ip
 8000e26:	ea93 0f0c 	teqne	r3, ip
 8000e2a:	d06f      	beq.n	8000f0c <__aeabi_fmul+0xf8>
 8000e2c:	441a      	add	r2, r3
 8000e2e:	ea80 0c01 	eor.w	ip, r0, r1
 8000e32:	0240      	lsls	r0, r0, #9
 8000e34:	bf18      	it	ne
 8000e36:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e3a:	d01e      	beq.n	8000e7a <__aeabi_fmul+0x66>
 8000e3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e40:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e44:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e48:	fba0 3101 	umull	r3, r1, r0, r1
 8000e4c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e50:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e54:	bf3e      	ittt	cc
 8000e56:	0049      	lslcc	r1, r1, #1
 8000e58:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	ea40 0001 	orr.w	r0, r0, r1
 8000e62:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e66:	2afd      	cmp	r2, #253	; 0xfd
 8000e68:	d81d      	bhi.n	8000ea6 <__aeabi_fmul+0x92>
 8000e6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e72:	bf08      	it	eq
 8000e74:	f020 0001 	biceq.w	r0, r0, #1
 8000e78:	4770      	bx	lr
 8000e7a:	f090 0f00 	teq	r0, #0
 8000e7e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e82:	bf08      	it	eq
 8000e84:	0249      	lsleq	r1, r1, #9
 8000e86:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e8a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e8e:	3a7f      	subs	r2, #127	; 0x7f
 8000e90:	bfc2      	ittt	gt
 8000e92:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e96:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e9a:	4770      	bxgt	lr
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	f04f 0300 	mov.w	r3, #0
 8000ea4:	3a01      	subs	r2, #1
 8000ea6:	dc5d      	bgt.n	8000f64 <__aeabi_fmul+0x150>
 8000ea8:	f112 0f19 	cmn.w	r2, #25
 8000eac:	bfdc      	itt	le
 8000eae:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000eb2:	4770      	bxle	lr
 8000eb4:	f1c2 0200 	rsb	r2, r2, #0
 8000eb8:	0041      	lsls	r1, r0, #1
 8000eba:	fa21 f102 	lsr.w	r1, r1, r2
 8000ebe:	f1c2 0220 	rsb	r2, r2, #32
 8000ec2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ec6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000eca:	f140 0000 	adc.w	r0, r0, #0
 8000ece:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ed2:	bf08      	it	eq
 8000ed4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ed8:	4770      	bx	lr
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fmul+0xce>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fmul+0xe6>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e78f      	b.n	8000e2c <__aeabi_fmul+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	bf18      	it	ne
 8000f16:	ea93 0f0c 	teqne	r3, ip
 8000f1a:	d00a      	beq.n	8000f32 <__aeabi_fmul+0x11e>
 8000f1c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f20:	bf18      	it	ne
 8000f22:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	d1d8      	bne.n	8000eda <__aeabi_fmul+0xc6>
 8000f28:	ea80 0001 	eor.w	r0, r0, r1
 8000f2c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f30:	4770      	bx	lr
 8000f32:	f090 0f00 	teq	r0, #0
 8000f36:	bf17      	itett	ne
 8000f38:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f3c:	4608      	moveq	r0, r1
 8000f3e:	f091 0f00 	teqne	r1, #0
 8000f42:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f46:	d014      	beq.n	8000f72 <__aeabi_fmul+0x15e>
 8000f48:	ea92 0f0c 	teq	r2, ip
 8000f4c:	d101      	bne.n	8000f52 <__aeabi_fmul+0x13e>
 8000f4e:	0242      	lsls	r2, r0, #9
 8000f50:	d10f      	bne.n	8000f72 <__aeabi_fmul+0x15e>
 8000f52:	ea93 0f0c 	teq	r3, ip
 8000f56:	d103      	bne.n	8000f60 <__aeabi_fmul+0x14c>
 8000f58:	024b      	lsls	r3, r1, #9
 8000f5a:	bf18      	it	ne
 8000f5c:	4608      	movne	r0, r1
 8000f5e:	d108      	bne.n	8000f72 <__aeabi_fmul+0x15e>
 8000f60:	ea80 0001 	eor.w	r0, r0, r1
 8000f64:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f70:	4770      	bx	lr
 8000f72:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f76:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f7a:	4770      	bx	lr

08000f7c <__aeabi_fdiv>:
 8000f7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f84:	bf1e      	ittt	ne
 8000f86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f8a:	ea92 0f0c 	teqne	r2, ip
 8000f8e:	ea93 0f0c 	teqne	r3, ip
 8000f92:	d069      	beq.n	8001068 <__aeabi_fdiv+0xec>
 8000f94:	eba2 0203 	sub.w	r2, r2, r3
 8000f98:	ea80 0c01 	eor.w	ip, r0, r1
 8000f9c:	0249      	lsls	r1, r1, #9
 8000f9e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fa2:	d037      	beq.n	8001014 <__aeabi_fdiv+0x98>
 8000fa4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fa8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fac:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fb0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fb4:	428b      	cmp	r3, r1
 8000fb6:	bf38      	it	cc
 8000fb8:	005b      	lslcc	r3, r3, #1
 8000fba:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fbe:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fc2:	428b      	cmp	r3, r1
 8000fc4:	bf24      	itt	cs
 8000fc6:	1a5b      	subcs	r3, r3, r1
 8000fc8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fcc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fd0:	bf24      	itt	cs
 8000fd2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fd6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fda:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fde:	bf24      	itt	cs
 8000fe0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fe4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fe8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fec:	bf24      	itt	cs
 8000fee:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ff2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ff6:	011b      	lsls	r3, r3, #4
 8000ff8:	bf18      	it	ne
 8000ffa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ffe:	d1e0      	bne.n	8000fc2 <__aeabi_fdiv+0x46>
 8001000:	2afd      	cmp	r2, #253	; 0xfd
 8001002:	f63f af50 	bhi.w	8000ea6 <__aeabi_fmul+0x92>
 8001006:	428b      	cmp	r3, r1
 8001008:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800100c:	bf08      	it	eq
 800100e:	f020 0001 	biceq.w	r0, r0, #1
 8001012:	4770      	bx	lr
 8001014:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001018:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800101c:	327f      	adds	r2, #127	; 0x7f
 800101e:	bfc2      	ittt	gt
 8001020:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001024:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001028:	4770      	bxgt	lr
 800102a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800102e:	f04f 0300 	mov.w	r3, #0
 8001032:	3a01      	subs	r2, #1
 8001034:	e737      	b.n	8000ea6 <__aeabi_fmul+0x92>
 8001036:	f092 0f00 	teq	r2, #0
 800103a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800103e:	bf02      	ittt	eq
 8001040:	0040      	lsleq	r0, r0, #1
 8001042:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001046:	3a01      	subeq	r2, #1
 8001048:	d0f9      	beq.n	800103e <__aeabi_fdiv+0xc2>
 800104a:	ea40 000c 	orr.w	r0, r0, ip
 800104e:	f093 0f00 	teq	r3, #0
 8001052:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001056:	bf02      	ittt	eq
 8001058:	0049      	lsleq	r1, r1, #1
 800105a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800105e:	3b01      	subeq	r3, #1
 8001060:	d0f9      	beq.n	8001056 <__aeabi_fdiv+0xda>
 8001062:	ea41 010c 	orr.w	r1, r1, ip
 8001066:	e795      	b.n	8000f94 <__aeabi_fdiv+0x18>
 8001068:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800106c:	ea92 0f0c 	teq	r2, ip
 8001070:	d108      	bne.n	8001084 <__aeabi_fdiv+0x108>
 8001072:	0242      	lsls	r2, r0, #9
 8001074:	f47f af7d 	bne.w	8000f72 <__aeabi_fmul+0x15e>
 8001078:	ea93 0f0c 	teq	r3, ip
 800107c:	f47f af70 	bne.w	8000f60 <__aeabi_fmul+0x14c>
 8001080:	4608      	mov	r0, r1
 8001082:	e776      	b.n	8000f72 <__aeabi_fmul+0x15e>
 8001084:	ea93 0f0c 	teq	r3, ip
 8001088:	d104      	bne.n	8001094 <__aeabi_fdiv+0x118>
 800108a:	024b      	lsls	r3, r1, #9
 800108c:	f43f af4c 	beq.w	8000f28 <__aeabi_fmul+0x114>
 8001090:	4608      	mov	r0, r1
 8001092:	e76e      	b.n	8000f72 <__aeabi_fmul+0x15e>
 8001094:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001098:	bf18      	it	ne
 800109a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800109e:	d1ca      	bne.n	8001036 <__aeabi_fdiv+0xba>
 80010a0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010a4:	f47f af5c 	bne.w	8000f60 <__aeabi_fmul+0x14c>
 80010a8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010ac:	f47f af3c 	bne.w	8000f28 <__aeabi_fmul+0x114>
 80010b0:	e75f      	b.n	8000f72 <__aeabi_fmul+0x15e>
 80010b2:	bf00      	nop

080010b4 <__gesf2>:
 80010b4:	f04f 3cff 	mov.w	ip, #4294967295
 80010b8:	e006      	b.n	80010c8 <__cmpsf2+0x4>
 80010ba:	bf00      	nop

080010bc <__lesf2>:
 80010bc:	f04f 0c01 	mov.w	ip, #1
 80010c0:	e002      	b.n	80010c8 <__cmpsf2+0x4>
 80010c2:	bf00      	nop

080010c4 <__cmpsf2>:
 80010c4:	f04f 0c01 	mov.w	ip, #1
 80010c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010d8:	bf18      	it	ne
 80010da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010de:	d011      	beq.n	8001104 <__cmpsf2+0x40>
 80010e0:	b001      	add	sp, #4
 80010e2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010e6:	bf18      	it	ne
 80010e8:	ea90 0f01 	teqne	r0, r1
 80010ec:	bf58      	it	pl
 80010ee:	ebb2 0003 	subspl.w	r0, r2, r3
 80010f2:	bf88      	it	hi
 80010f4:	17c8      	asrhi	r0, r1, #31
 80010f6:	bf38      	it	cc
 80010f8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010fc:	bf18      	it	ne
 80010fe:	f040 0001 	orrne.w	r0, r0, #1
 8001102:	4770      	bx	lr
 8001104:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001108:	d102      	bne.n	8001110 <__cmpsf2+0x4c>
 800110a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800110e:	d105      	bne.n	800111c <__cmpsf2+0x58>
 8001110:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001114:	d1e4      	bne.n	80010e0 <__cmpsf2+0x1c>
 8001116:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800111a:	d0e1      	beq.n	80010e0 <__cmpsf2+0x1c>
 800111c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop

08001124 <__aeabi_cfrcmple>:
 8001124:	4684      	mov	ip, r0
 8001126:	4608      	mov	r0, r1
 8001128:	4661      	mov	r1, ip
 800112a:	e7ff      	b.n	800112c <__aeabi_cfcmpeq>

0800112c <__aeabi_cfcmpeq>:
 800112c:	b50f      	push	{r0, r1, r2, r3, lr}
 800112e:	f7ff ffc9 	bl	80010c4 <__cmpsf2>
 8001132:	2800      	cmp	r0, #0
 8001134:	bf48      	it	mi
 8001136:	f110 0f00 	cmnmi.w	r0, #0
 800113a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800113c <__aeabi_fcmpeq>:
 800113c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001140:	f7ff fff4 	bl	800112c <__aeabi_cfcmpeq>
 8001144:	bf0c      	ite	eq
 8001146:	2001      	moveq	r0, #1
 8001148:	2000      	movne	r0, #0
 800114a:	f85d fb08 	ldr.w	pc, [sp], #8
 800114e:	bf00      	nop

08001150 <__aeabi_fcmplt>:
 8001150:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001154:	f7ff ffea 	bl	800112c <__aeabi_cfcmpeq>
 8001158:	bf34      	ite	cc
 800115a:	2001      	movcc	r0, #1
 800115c:	2000      	movcs	r0, #0
 800115e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001162:	bf00      	nop

08001164 <__aeabi_fcmple>:
 8001164:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001168:	f7ff ffe0 	bl	800112c <__aeabi_cfcmpeq>
 800116c:	bf94      	ite	ls
 800116e:	2001      	movls	r0, #1
 8001170:	2000      	movhi	r0, #0
 8001172:	f85d fb08 	ldr.w	pc, [sp], #8
 8001176:	bf00      	nop

08001178 <__aeabi_fcmpge>:
 8001178:	f84d ed08 	str.w	lr, [sp, #-8]!
 800117c:	f7ff ffd2 	bl	8001124 <__aeabi_cfrcmple>
 8001180:	bf94      	ite	ls
 8001182:	2001      	movls	r0, #1
 8001184:	2000      	movhi	r0, #0
 8001186:	f85d fb08 	ldr.w	pc, [sp], #8
 800118a:	bf00      	nop

0800118c <__aeabi_fcmpgt>:
 800118c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001190:	f7ff ffc8 	bl	8001124 <__aeabi_cfrcmple>
 8001194:	bf34      	ite	cc
 8001196:	2001      	movcc	r0, #1
 8001198:	2000      	movcs	r0, #0
 800119a:	f85d fb08 	ldr.w	pc, [sp], #8
 800119e:	bf00      	nop

080011a0 <__aeabi_f2iz>:
 80011a0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011a4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011a8:	d30f      	bcc.n	80011ca <__aeabi_f2iz+0x2a>
 80011aa:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011ae:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011b2:	d90d      	bls.n	80011d0 <__aeabi_f2iz+0x30>
 80011b4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011bc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80011c0:	fa23 f002 	lsr.w	r0, r3, r2
 80011c4:	bf18      	it	ne
 80011c6:	4240      	negne	r0, r0
 80011c8:	4770      	bx	lr
 80011ca:	f04f 0000 	mov.w	r0, #0
 80011ce:	4770      	bx	lr
 80011d0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011d4:	d101      	bne.n	80011da <__aeabi_f2iz+0x3a>
 80011d6:	0242      	lsls	r2, r0, #9
 80011d8:	d105      	bne.n	80011e6 <__aeabi_f2iz+0x46>
 80011da:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80011de:	bf08      	it	eq
 80011e0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80011e4:	4770      	bx	lr
 80011e6:	f04f 0000 	mov.w	r0, #0
 80011ea:	4770      	bx	lr

080011ec <__aeabi_uldivmod>:
 80011ec:	b953      	cbnz	r3, 8001204 <__aeabi_uldivmod+0x18>
 80011ee:	b94a      	cbnz	r2, 8001204 <__aeabi_uldivmod+0x18>
 80011f0:	2900      	cmp	r1, #0
 80011f2:	bf08      	it	eq
 80011f4:	2800      	cmpeq	r0, #0
 80011f6:	bf1c      	itt	ne
 80011f8:	f04f 31ff 	movne.w	r1, #4294967295
 80011fc:	f04f 30ff 	movne.w	r0, #4294967295
 8001200:	f000 b974 	b.w	80014ec <__aeabi_idiv0>
 8001204:	f1ad 0c08 	sub.w	ip, sp, #8
 8001208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800120c:	f000 f806 	bl	800121c <__udivmoddi4>
 8001210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001218:	b004      	add	sp, #16
 800121a:	4770      	bx	lr

0800121c <__udivmoddi4>:
 800121c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001220:	9e08      	ldr	r6, [sp, #32]
 8001222:	460d      	mov	r5, r1
 8001224:	4604      	mov	r4, r0
 8001226:	4688      	mov	r8, r1
 8001228:	2b00      	cmp	r3, #0
 800122a:	d14d      	bne.n	80012c8 <__udivmoddi4+0xac>
 800122c:	428a      	cmp	r2, r1
 800122e:	4694      	mov	ip, r2
 8001230:	d968      	bls.n	8001304 <__udivmoddi4+0xe8>
 8001232:	fab2 f282 	clz	r2, r2
 8001236:	b152      	cbz	r2, 800124e <__udivmoddi4+0x32>
 8001238:	fa01 f302 	lsl.w	r3, r1, r2
 800123c:	f1c2 0120 	rsb	r1, r2, #32
 8001240:	fa20 f101 	lsr.w	r1, r0, r1
 8001244:	fa0c fc02 	lsl.w	ip, ip, r2
 8001248:	ea41 0803 	orr.w	r8, r1, r3
 800124c:	4094      	lsls	r4, r2
 800124e:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8001252:	0c21      	lsrs	r1, r4, #16
 8001254:	fbb8 fef5 	udiv	lr, r8, r5
 8001258:	fa1f f78c 	uxth.w	r7, ip
 800125c:	fb05 831e 	mls	r3, r5, lr, r8
 8001260:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001264:	fb0e f107 	mul.w	r1, lr, r7
 8001268:	4299      	cmp	r1, r3
 800126a:	d90b      	bls.n	8001284 <__udivmoddi4+0x68>
 800126c:	eb1c 0303 	adds.w	r3, ip, r3
 8001270:	f10e 30ff 	add.w	r0, lr, #4294967295
 8001274:	f080 811e 	bcs.w	80014b4 <__udivmoddi4+0x298>
 8001278:	4299      	cmp	r1, r3
 800127a:	f240 811b 	bls.w	80014b4 <__udivmoddi4+0x298>
 800127e:	f1ae 0e02 	sub.w	lr, lr, #2
 8001282:	4463      	add	r3, ip
 8001284:	1a5b      	subs	r3, r3, r1
 8001286:	b2a4      	uxth	r4, r4
 8001288:	fbb3 f0f5 	udiv	r0, r3, r5
 800128c:	fb05 3310 	mls	r3, r5, r0, r3
 8001290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001294:	fb00 f707 	mul.w	r7, r0, r7
 8001298:	42a7      	cmp	r7, r4
 800129a:	d90a      	bls.n	80012b2 <__udivmoddi4+0x96>
 800129c:	eb1c 0404 	adds.w	r4, ip, r4
 80012a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80012a4:	f080 8108 	bcs.w	80014b8 <__udivmoddi4+0x29c>
 80012a8:	42a7      	cmp	r7, r4
 80012aa:	f240 8105 	bls.w	80014b8 <__udivmoddi4+0x29c>
 80012ae:	4464      	add	r4, ip
 80012b0:	3802      	subs	r0, #2
 80012b2:	1be4      	subs	r4, r4, r7
 80012b4:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80012b8:	2100      	movs	r1, #0
 80012ba:	b11e      	cbz	r6, 80012c4 <__udivmoddi4+0xa8>
 80012bc:	40d4      	lsrs	r4, r2
 80012be:	2300      	movs	r3, #0
 80012c0:	e9c6 4300 	strd	r4, r3, [r6]
 80012c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012c8:	428b      	cmp	r3, r1
 80012ca:	d908      	bls.n	80012de <__udivmoddi4+0xc2>
 80012cc:	2e00      	cmp	r6, #0
 80012ce:	f000 80ee 	beq.w	80014ae <__udivmoddi4+0x292>
 80012d2:	2100      	movs	r1, #0
 80012d4:	e9c6 0500 	strd	r0, r5, [r6]
 80012d8:	4608      	mov	r0, r1
 80012da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012de:	fab3 f183 	clz	r1, r3
 80012e2:	2900      	cmp	r1, #0
 80012e4:	d14a      	bne.n	800137c <__udivmoddi4+0x160>
 80012e6:	42ab      	cmp	r3, r5
 80012e8:	d302      	bcc.n	80012f0 <__udivmoddi4+0xd4>
 80012ea:	4282      	cmp	r2, r0
 80012ec:	f200 80f9 	bhi.w	80014e2 <__udivmoddi4+0x2c6>
 80012f0:	1a84      	subs	r4, r0, r2
 80012f2:	eb65 0303 	sbc.w	r3, r5, r3
 80012f6:	2001      	movs	r0, #1
 80012f8:	4698      	mov	r8, r3
 80012fa:	2e00      	cmp	r6, #0
 80012fc:	d0e2      	beq.n	80012c4 <__udivmoddi4+0xa8>
 80012fe:	e9c6 4800 	strd	r4, r8, [r6]
 8001302:	e7df      	b.n	80012c4 <__udivmoddi4+0xa8>
 8001304:	b902      	cbnz	r2, 8001308 <__udivmoddi4+0xec>
 8001306:	deff      	udf	#255	; 0xff
 8001308:	fab2 f282 	clz	r2, r2
 800130c:	2a00      	cmp	r2, #0
 800130e:	f040 8091 	bne.w	8001434 <__udivmoddi4+0x218>
 8001312:	eba1 050c 	sub.w	r5, r1, ip
 8001316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800131a:	fa1f fe8c 	uxth.w	lr, ip
 800131e:	2101      	movs	r1, #1
 8001320:	fbb5 f3f7 	udiv	r3, r5, r7
 8001324:	fb07 5013 	mls	r0, r7, r3, r5
 8001328:	0c25      	lsrs	r5, r4, #16
 800132a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800132e:	fb0e f003 	mul.w	r0, lr, r3
 8001332:	42a8      	cmp	r0, r5
 8001334:	d908      	bls.n	8001348 <__udivmoddi4+0x12c>
 8001336:	eb1c 0505 	adds.w	r5, ip, r5
 800133a:	f103 38ff 	add.w	r8, r3, #4294967295
 800133e:	d202      	bcs.n	8001346 <__udivmoddi4+0x12a>
 8001340:	42a8      	cmp	r0, r5
 8001342:	f200 80cb 	bhi.w	80014dc <__udivmoddi4+0x2c0>
 8001346:	4643      	mov	r3, r8
 8001348:	1a2d      	subs	r5, r5, r0
 800134a:	b2a4      	uxth	r4, r4
 800134c:	fbb5 f0f7 	udiv	r0, r5, r7
 8001350:	fb07 5510 	mls	r5, r7, r0, r5
 8001354:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001358:	fb0e fe00 	mul.w	lr, lr, r0
 800135c:	45a6      	cmp	lr, r4
 800135e:	d908      	bls.n	8001372 <__udivmoddi4+0x156>
 8001360:	eb1c 0404 	adds.w	r4, ip, r4
 8001364:	f100 35ff 	add.w	r5, r0, #4294967295
 8001368:	d202      	bcs.n	8001370 <__udivmoddi4+0x154>
 800136a:	45a6      	cmp	lr, r4
 800136c:	f200 80bb 	bhi.w	80014e6 <__udivmoddi4+0x2ca>
 8001370:	4628      	mov	r0, r5
 8001372:	eba4 040e 	sub.w	r4, r4, lr
 8001376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800137a:	e79e      	b.n	80012ba <__udivmoddi4+0x9e>
 800137c:	f1c1 0720 	rsb	r7, r1, #32
 8001380:	408b      	lsls	r3, r1
 8001382:	fa22 fc07 	lsr.w	ip, r2, r7
 8001386:	ea4c 0c03 	orr.w	ip, ip, r3
 800138a:	fa20 f407 	lsr.w	r4, r0, r7
 800138e:	fa05 f301 	lsl.w	r3, r5, r1
 8001392:	431c      	orrs	r4, r3
 8001394:	40fd      	lsrs	r5, r7
 8001396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800139a:	fa00 f301 	lsl.w	r3, r0, r1
 800139e:	fbb5 f8f9 	udiv	r8, r5, r9
 80013a2:	0c20      	lsrs	r0, r4, #16
 80013a4:	fa1f fe8c 	uxth.w	lr, ip
 80013a8:	fb09 5518 	mls	r5, r9, r8, r5
 80013ac:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80013b0:	fb08 f00e 	mul.w	r0, r8, lr
 80013b4:	42a8      	cmp	r0, r5
 80013b6:	fa02 f201 	lsl.w	r2, r2, r1
 80013ba:	d90b      	bls.n	80013d4 <__udivmoddi4+0x1b8>
 80013bc:	eb1c 0505 	adds.w	r5, ip, r5
 80013c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80013c4:	f080 8088 	bcs.w	80014d8 <__udivmoddi4+0x2bc>
 80013c8:	42a8      	cmp	r0, r5
 80013ca:	f240 8085 	bls.w	80014d8 <__udivmoddi4+0x2bc>
 80013ce:	f1a8 0802 	sub.w	r8, r8, #2
 80013d2:	4465      	add	r5, ip
 80013d4:	1a2d      	subs	r5, r5, r0
 80013d6:	b2a4      	uxth	r4, r4
 80013d8:	fbb5 f0f9 	udiv	r0, r5, r9
 80013dc:	fb09 5510 	mls	r5, r9, r0, r5
 80013e0:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80013e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80013e8:	45ae      	cmp	lr, r5
 80013ea:	d908      	bls.n	80013fe <__udivmoddi4+0x1e2>
 80013ec:	eb1c 0505 	adds.w	r5, ip, r5
 80013f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80013f4:	d26c      	bcs.n	80014d0 <__udivmoddi4+0x2b4>
 80013f6:	45ae      	cmp	lr, r5
 80013f8:	d96a      	bls.n	80014d0 <__udivmoddi4+0x2b4>
 80013fa:	3802      	subs	r0, #2
 80013fc:	4465      	add	r5, ip
 80013fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001402:	fba0 9402 	umull	r9, r4, r0, r2
 8001406:	eba5 050e 	sub.w	r5, r5, lr
 800140a:	42a5      	cmp	r5, r4
 800140c:	46c8      	mov	r8, r9
 800140e:	46a6      	mov	lr, r4
 8001410:	d356      	bcc.n	80014c0 <__udivmoddi4+0x2a4>
 8001412:	d053      	beq.n	80014bc <__udivmoddi4+0x2a0>
 8001414:	b15e      	cbz	r6, 800142e <__udivmoddi4+0x212>
 8001416:	ebb3 0208 	subs.w	r2, r3, r8
 800141a:	eb65 050e 	sbc.w	r5, r5, lr
 800141e:	fa05 f707 	lsl.w	r7, r5, r7
 8001422:	fa22 f301 	lsr.w	r3, r2, r1
 8001426:	40cd      	lsrs	r5, r1
 8001428:	431f      	orrs	r7, r3
 800142a:	e9c6 7500 	strd	r7, r5, [r6]
 800142e:	2100      	movs	r1, #0
 8001430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001434:	f1c2 0320 	rsb	r3, r2, #32
 8001438:	fa20 f103 	lsr.w	r1, r0, r3
 800143c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001440:	fa25 f303 	lsr.w	r3, r5, r3
 8001444:	4095      	lsls	r5, r2
 8001446:	430d      	orrs	r5, r1
 8001448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800144c:	fa1f fe8c 	uxth.w	lr, ip
 8001450:	fbb3 f1f7 	udiv	r1, r3, r7
 8001454:	fb07 3011 	mls	r0, r7, r1, r3
 8001458:	0c2b      	lsrs	r3, r5, #16
 800145a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800145e:	fb01 f00e 	mul.w	r0, r1, lr
 8001462:	4298      	cmp	r0, r3
 8001464:	fa04 f402 	lsl.w	r4, r4, r2
 8001468:	d908      	bls.n	800147c <__udivmoddi4+0x260>
 800146a:	eb1c 0303 	adds.w	r3, ip, r3
 800146e:	f101 38ff 	add.w	r8, r1, #4294967295
 8001472:	d22f      	bcs.n	80014d4 <__udivmoddi4+0x2b8>
 8001474:	4298      	cmp	r0, r3
 8001476:	d92d      	bls.n	80014d4 <__udivmoddi4+0x2b8>
 8001478:	3902      	subs	r1, #2
 800147a:	4463      	add	r3, ip
 800147c:	1a1b      	subs	r3, r3, r0
 800147e:	b2ad      	uxth	r5, r5
 8001480:	fbb3 f0f7 	udiv	r0, r3, r7
 8001484:	fb07 3310 	mls	r3, r7, r0, r3
 8001488:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800148c:	fb00 f30e 	mul.w	r3, r0, lr
 8001490:	42ab      	cmp	r3, r5
 8001492:	d908      	bls.n	80014a6 <__udivmoddi4+0x28a>
 8001494:	eb1c 0505 	adds.w	r5, ip, r5
 8001498:	f100 38ff 	add.w	r8, r0, #4294967295
 800149c:	d216      	bcs.n	80014cc <__udivmoddi4+0x2b0>
 800149e:	42ab      	cmp	r3, r5
 80014a0:	d914      	bls.n	80014cc <__udivmoddi4+0x2b0>
 80014a2:	3802      	subs	r0, #2
 80014a4:	4465      	add	r5, ip
 80014a6:	1aed      	subs	r5, r5, r3
 80014a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80014ac:	e738      	b.n	8001320 <__udivmoddi4+0x104>
 80014ae:	4631      	mov	r1, r6
 80014b0:	4630      	mov	r0, r6
 80014b2:	e707      	b.n	80012c4 <__udivmoddi4+0xa8>
 80014b4:	4686      	mov	lr, r0
 80014b6:	e6e5      	b.n	8001284 <__udivmoddi4+0x68>
 80014b8:	4618      	mov	r0, r3
 80014ba:	e6fa      	b.n	80012b2 <__udivmoddi4+0x96>
 80014bc:	454b      	cmp	r3, r9
 80014be:	d2a9      	bcs.n	8001414 <__udivmoddi4+0x1f8>
 80014c0:	ebb9 0802 	subs.w	r8, r9, r2
 80014c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80014c8:	3801      	subs	r0, #1
 80014ca:	e7a3      	b.n	8001414 <__udivmoddi4+0x1f8>
 80014cc:	4640      	mov	r0, r8
 80014ce:	e7ea      	b.n	80014a6 <__udivmoddi4+0x28a>
 80014d0:	4620      	mov	r0, r4
 80014d2:	e794      	b.n	80013fe <__udivmoddi4+0x1e2>
 80014d4:	4641      	mov	r1, r8
 80014d6:	e7d1      	b.n	800147c <__udivmoddi4+0x260>
 80014d8:	46d0      	mov	r8, sl
 80014da:	e77b      	b.n	80013d4 <__udivmoddi4+0x1b8>
 80014dc:	3b02      	subs	r3, #2
 80014de:	4465      	add	r5, ip
 80014e0:	e732      	b.n	8001348 <__udivmoddi4+0x12c>
 80014e2:	4608      	mov	r0, r1
 80014e4:	e709      	b.n	80012fa <__udivmoddi4+0xde>
 80014e6:	4464      	add	r4, ip
 80014e8:	3802      	subs	r0, #2
 80014ea:	e742      	b.n	8001372 <__udivmoddi4+0x156>

080014ec <__aeabi_idiv0>:
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop

080014f0 <lsm6dsox_mlc>:
static void tx_com( uint8_t *tx_buffer, uint16_t len );
static void platform_init(void);

/* Main Example --------------------------------------------------------------*/
void lsm6dsox_mlc(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08c      	sub	sp, #48	; 0x30
 80014f4:	af00      	add	r7, sp, #0
  lsm6dsox_emb_sens_t emb_sens;
  stmdev_ctx_t dev_ctx;
  uint8_t mlc_out[8];
  uint32_t i;
  /* Initialize mems driver interface */
  dev_ctx.write_reg = platform_write;
 80014f6:	4b63      	ldr	r3, [pc, #396]	; (8001684 <lsm6dsox_mlc+0x194>)
 80014f8:	60bb      	str	r3, [r7, #8]
  dev_ctx.read_reg  = platform_read;
 80014fa:	4b63      	ldr	r3, [pc, #396]	; (8001688 <lsm6dsox_mlc+0x198>)
 80014fc:	60fb      	str	r3, [r7, #12]
  dev_ctx.handle    = &SENSOR_BUS;
 80014fe:	4b63      	ldr	r3, [pc, #396]	; (800168c <lsm6dsox_mlc+0x19c>)
 8001500:	613b      	str	r3, [r7, #16]
  /* Init test platform */
  platform_init();
 8001502:	f000 f927 	bl	8001754 <platform_init>
  /* Wait sensor boot time */
  platform_delay(BOOT_TIME);
 8001506:	200a      	movs	r0, #10
 8001508:	f000 f91a 	bl	8001740 <platform_delay>
  /* Check device ID */
  lsm6dsox_device_id_get(&dev_ctx, &whoamI);
 800150c:	f107 0308 	add.w	r3, r7, #8
 8001510:	495f      	ldr	r1, [pc, #380]	; (8001690 <lsm6dsox_mlc+0x1a0>)
 8001512:	4618      	mov	r0, r3
 8001514:	f003 f909 	bl	800472a <lsm6dsox_device_id_get>

  if (whoamI != LSM6DSOX_ID)
 8001518:	4b5d      	ldr	r3, [pc, #372]	; (8001690 <lsm6dsox_mlc+0x1a0>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b6c      	cmp	r3, #108	; 0x6c
 800151e:	d000      	beq.n	8001522 <lsm6dsox_mlc+0x32>
    while (1);
 8001520:	e7fe      	b.n	8001520 <lsm6dsox_mlc+0x30>
//  }



  /* Restore default configuration */
  lsm6dsox_reset_set(&dev_ctx, PROPERTY_ENABLE);
 8001522:	f107 0308 	add.w	r3, r7, #8
 8001526:	2101      	movs	r1, #1
 8001528:	4618      	mov	r0, r3
 800152a:	f003 f90f 	bl	800474c <lsm6dsox_reset_set>

  do {
    lsm6dsox_reset_get(&dev_ctx, &rst);
 800152e:	f107 0308 	add.w	r3, r7, #8
 8001532:	4958      	ldr	r1, [pc, #352]	; (8001694 <lsm6dsox_mlc+0x1a4>)
 8001534:	4618      	mov	r0, r3
 8001536:	f003 f92f 	bl	8004798 <lsm6dsox_reset_get>
  } while (rst);
 800153a:	4b56      	ldr	r3, [pc, #344]	; (8001694 <lsm6dsox_mlc+0x1a4>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1f5      	bne.n	800152e <lsm6dsox_mlc+0x3e>

  /* Start Machine Learning Core configuration */
  for ( i = 0; i < (sizeof(falling) /
 8001542:	2300      	movs	r3, #0
 8001544:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001546:	e010      	b.n	800156a <lsm6dsox_mlc+0x7a>
                    sizeof(ucf_line_t) ); i++ ) {
    lsm6dsox_write_reg(&dev_ctx, falling[i].address,
 8001548:	4a53      	ldr	r2, [pc, #332]	; (8001698 <lsm6dsox_mlc+0x1a8>)
 800154a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800154c:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
                       (uint8_t *)&falling[i].data, 1);
 8001550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	4a50      	ldr	r2, [pc, #320]	; (8001698 <lsm6dsox_mlc+0x1a8>)
 8001556:	4413      	add	r3, r2
 8001558:	1c5a      	adds	r2, r3, #1
    lsm6dsox_write_reg(&dev_ctx, falling[i].address,
 800155a:	f107 0008 	add.w	r0, r7, #8
 800155e:	2301      	movs	r3, #1
 8001560:	f002 fb3c 	bl	8003bdc <lsm6dsox_write_reg>
                    sizeof(ucf_line_t) ); i++ ) {
 8001564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001566:	3301      	adds	r3, #1
 8001568:	62fb      	str	r3, [r7, #44]	; 0x2c
  for ( i = 0; i < (sizeof(falling) /
 800156a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800156c:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8001570:	d9ea      	bls.n	8001548 <lsm6dsox_mlc+0x58>
   *
   * For more information about Machine Learning Core tool please refer
   * to AN5259 "LSM6DSOX: Machine Learning Core".
   */
  /* Turn off embedded features */
  lsm6dsox_embedded_sens_get(&dev_ctx, &emb_sens);
 8001572:	f107 0214 	add.w	r2, r7, #20
 8001576:	f107 0308 	add.w	r3, r7, #8
 800157a:	4611      	mov	r1, r2
 800157c:	4618      	mov	r0, r3
 800157e:	f004 ff1f 	bl	80063c0 <lsm6dsox_embedded_sens_get>
  lsm6dsox_embedded_sens_off(&dev_ctx);
 8001582:	f107 0308 	add.w	r3, r7, #8
 8001586:	4618      	mov	r0, r3
 8001588:	f004 ff7d 	bl	8006486 <lsm6dsox_embedded_sens_off>
  platform_delay(10);
 800158c:	200a      	movs	r0, #10
 800158e:	f000 f8d7 	bl	8001740 <platform_delay>
  /* Turn off Sensors */
  lsm6dsox_xl_data_rate_set(&dev_ctx, LSM6DSOX_XL_ODR_OFF);
 8001592:	f107 0308 	add.w	r3, r7, #8
 8001596:	2100      	movs	r1, #0
 8001598:	4618      	mov	r0, r3
 800159a:	f002 fba9 	bl	8003cf0 <lsm6dsox_xl_data_rate_set>
  lsm6dsox_gy_data_rate_set(&dev_ctx, LSM6DSOX_GY_ODR_OFF);
 800159e:	f107 0308 	add.w	r3, r7, #8
 80015a2:	2100      	movs	r1, #0
 80015a4:	4618      	mov	r0, r3
 80015a6:	f002 fde7 	bl	8004178 <lsm6dsox_gy_data_rate_set>
  /* Disable I3C interface */
  lsm6dsox_i3c_disable_set(&dev_ctx, LSM6DSOX_I3C_DISABLE);
 80015aa:	f107 0308 	add.w	r3, r7, #8
 80015ae:	2180      	movs	r1, #128	; 0x80
 80015b0:	4618      	mov	r0, r3
 80015b2:	f003 f930 	bl	8004816 <lsm6dsox_i3c_disable_set>
  /* Enable Block Data Update */
  lsm6dsox_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 80015b6:	f107 0308 	add.w	r3, r7, #8
 80015ba:	2101      	movs	r1, #1
 80015bc:	4618      	mov	r0, r3
 80015be:	f002 ffb1 	bl	8004524 <lsm6dsox_block_data_update_set>
  /* Set full scale */
  lsm6dsox_xl_full_scale_set(&dev_ctx, LSM6DSOX_4g);
 80015c2:	f107 0308 	add.w	r3, r7, #8
 80015c6:	2102      	movs	r1, #2
 80015c8:	4618      	mov	r0, r3
 80015ca:	f002 fb33 	bl	8003c34 <lsm6dsox_xl_full_scale_set>
  lsm6dsox_gy_full_scale_set(&dev_ctx, LSM6DSOX_2000dps);
 80015ce:	f107 0308 	add.w	r3, r7, #8
 80015d2:	2106      	movs	r1, #6
 80015d4:	4618      	mov	r0, r3
 80015d6:	f002 fd67 	bl	80040a8 <lsm6dsox_gy_full_scale_set>
  /* Route signals on interrupt pin 1 */
  lsm6dsox_pin_int1_route_get(&dev_ctx, &pin_int1_route);
 80015da:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80015de:	f107 0308 	add.w	r3, r7, #8
 80015e2:	4611      	mov	r1, r2
 80015e4:	4618      	mov	r0, r3
 80015e6:	f003 febb 	bl	8005360 <lsm6dsox_pin_int1_route_get>
  pin_int1_route.mlc1 = PROPERTY_ENABLE;
 80015ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80015ee:	f043 0320 	orr.w	r3, r3, #32
 80015f2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  lsm6dsox_pin_int1_route_set(&dev_ctx, pin_int1_route);
 80015f6:	f107 0008 	add.w	r0, r7, #8
 80015fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015fe:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001602:	f003 fa83 	bl	8004b0c <lsm6dsox_pin_int1_route_set>
  /* Configure interrupt pin mode notification */
  lsm6dsox_int_notification_set(&dev_ctx,
 8001606:	f107 0308 	add.w	r3, r7, #8
 800160a:	2102      	movs	r1, #2
 800160c:	4618      	mov	r0, r3
 800160e:	f003 f948 	bl	80048a2 <lsm6dsox_int_notification_set>
                                LSM6DSOX_BASE_PULSED_EMB_LATCHED);
  /* Enable embedded features */
  lsm6dsox_embedded_sens_set(&dev_ctx, &emb_sens);
 8001612:	f107 0214 	add.w	r2, r7, #20
 8001616:	f107 0308 	add.w	r3, r7, #8
 800161a:	4611      	mov	r1, r2
 800161c:	4618      	mov	r0, r3
 800161e:	f004 fe56 	bl	80062ce <lsm6dsox_embedded_sens_set>
  /* Set Output Data Rate.
   * Selected data rate have to be equal or greater with respect
   * with MLC data rate.
   */
  lsm6dsox_xl_data_rate_set(&dev_ctx, LSM6DSOX_XL_ODR_26Hz);
 8001622:	f107 0308 	add.w	r3, r7, #8
 8001626:	2102      	movs	r1, #2
 8001628:	4618      	mov	r0, r3
 800162a:	f002 fb61 	bl	8003cf0 <lsm6dsox_xl_data_rate_set>
  lsm6dsox_gy_data_rate_set(&dev_ctx, LSM6DSOX_GY_ODR_OFF);
 800162e:	f107 0308 	add.w	r3, r7, #8
 8001632:	2100      	movs	r1, #0
 8001634:	4618      	mov	r0, r3
 8001636:	f002 fd9f 	bl	8004178 <lsm6dsox_gy_data_rate_set>

  /* Main loop */
  while (1) {
    /* Read interrupt source registers in polling mode (no int) */
    lsm6dsox_all_sources_get(&dev_ctx, &status);
 800163a:	f107 0218 	add.w	r2, r7, #24
 800163e:	f107 0308 	add.w	r3, r7, #8
 8001642:	4611      	mov	r1, r2
 8001644:	4618      	mov	r0, r3
 8001646:	f004 fb07 	bl	8005c58 <lsm6dsox_all_sources_get>

    if (status.mlc1) {
 800164a:	7f7b      	ldrb	r3, [r7, #29]
 800164c:	f003 0320 	and.w	r3, r3, #32
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0f1      	beq.n	800163a <lsm6dsox_mlc+0x14a>
      lsm6dsox_mlc_out_get(&dev_ctx, mlc_out);
 8001656:	463a      	mov	r2, r7
 8001658:	f107 0308 	add.w	r3, r7, #8
 800165c:	4611      	mov	r1, r2
 800165e:	4618      	mov	r0, r3
 8001660:	f003 f81c 	bl	800469c <lsm6dsox_mlc_out_get>
      sprintf((char *)tx_buffer, "Detect MLC interrupt code: %02X\r\n",
              mlc_out[0]);
 8001664:	783b      	ldrb	r3, [r7, #0]
      sprintf((char *)tx_buffer, "Detect MLC interrupt code: %02X\r\n",
 8001666:	461a      	mov	r2, r3
 8001668:	490c      	ldr	r1, [pc, #48]	; (800169c <lsm6dsox_mlc+0x1ac>)
 800166a:	480d      	ldr	r0, [pc, #52]	; (80016a0 <lsm6dsox_mlc+0x1b0>)
 800166c:	f00a ff70 	bl	800c550 <siprintf>
      tx_com(tx_buffer, strlen((char const *)tx_buffer));
 8001670:	480b      	ldr	r0, [pc, #44]	; (80016a0 <lsm6dsox_mlc+0x1b0>)
 8001672:	f7fe fd85 	bl	8000180 <strlen>
 8001676:	4603      	mov	r3, r0
 8001678:	b29b      	uxth	r3, r3
 800167a:	4619      	mov	r1, r3
 800167c:	4808      	ldr	r0, [pc, #32]	; (80016a0 <lsm6dsox_mlc+0x1b0>)
 800167e:	f000 f84b 	bl	8001718 <tx_com>
    lsm6dsox_all_sources_get(&dev_ctx, &status);
 8001682:	e7da      	b.n	800163a <lsm6dsox_mlc+0x14a>
 8001684:	080016a5 	.word	0x080016a5
 8001688:	080016df 	.word	0x080016df
 800168c:	20000678 	.word	0x20000678
 8001690:	20000108 	.word	0x20000108
 8001694:	20000109 	.word	0x20000109
 8001698:	0800e964 	.word	0x0800e964
 800169c:	0800e628 	.word	0x0800e628
 80016a0:	2000010c 	.word	0x2000010c

080016a4 <platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b088      	sub	sp, #32
 80016a8:	af04      	add	r7, sp, #16
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	607a      	str	r2, [r7, #4]
 80016ae:	461a      	mov	r2, r3
 80016b0:	460b      	mov	r3, r1
 80016b2:	72fb      	strb	r3, [r7, #11]
 80016b4:	4613      	mov	r3, r2
 80016b6:	813b      	strh	r3, [r7, #8]
#elif defined(SPC584B_DIS)
  i2c_lld_write(handle,  LSM6DSOX_I2C_ADD_L & 0xFE, reg, (uint8_t*) bufp, len);
#endif
//  return 0;

  HAL_I2C_Mem_Write(handle, LSM6DSOX_I2C_ADD_L, reg,
 80016b8:	7afb      	ldrb	r3, [r7, #11]
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016c0:	9302      	str	r3, [sp, #8]
 80016c2:	893b      	ldrh	r3, [r7, #8]
 80016c4:	9301      	str	r3, [sp, #4]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	9300      	str	r3, [sp, #0]
 80016ca:	2301      	movs	r3, #1
 80016cc:	21d5      	movs	r1, #213	; 0xd5
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f006 f9b8 	bl	8007a44 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
}
 80016d4:	bf00      	nop
 80016d6:	4618      	mov	r0, r3
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b088      	sub	sp, #32
 80016e2:	af04      	add	r7, sp, #16
 80016e4:	60f8      	str	r0, [r7, #12]
 80016e6:	607a      	str	r2, [r7, #4]
 80016e8:	461a      	mov	r2, r3
 80016ea:	460b      	mov	r3, r1
 80016ec:	72fb      	strb	r3, [r7, #11]
 80016ee:	4613      	mov	r3, r2
 80016f0:	813b      	strh	r3, [r7, #8]
#elif defined(SPC584B_DIS)
  i2c_lld_read(handle, LSM6DSOX_I2C_ADD_L & 0xFE, reg, bufp, len);
#endif
//  return 0;

  HAL_I2C_Mem_Read(handle, LSM6DSOX_I2C_ADD_L, reg,
 80016f2:	7afb      	ldrb	r3, [r7, #11]
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016fa:	9302      	str	r3, [sp, #8]
 80016fc:	893b      	ldrh	r3, [r7, #8]
 80016fe:	9301      	str	r3, [sp, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	2301      	movs	r3, #1
 8001706:	21d5      	movs	r1, #213	; 0xd5
 8001708:	68f8      	ldr	r0, [r7, #12]
 800170a:	f006 faaf 	bl	8007c6c <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

}
 800170e:	bf00      	nop
 8001710:	4618      	mov	r0, r3
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <tx_com>:
 * @param  tx_buffer     buffer to transmit
 * @param  len           number of byte to send
 *
 */
static void tx_com(uint8_t *tx_buffer, uint16_t len)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	807b      	strh	r3, [r7, #2]
  CDC_Transmit_FS(tx_buffer, len);
#elif defined(SPC584B_DIS)
  sd_lld_write(&SD2, tx_buffer, len);
#endif

  HAL_UART_Transmit(&hlpuart1, tx_buffer, len, 1000);
 8001724:	887a      	ldrh	r2, [r7, #2]
 8001726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	4803      	ldr	r0, [pc, #12]	; (800173c <tx_com+0x24>)
 800172e:	f009 f907 	bl	800a940 <HAL_UART_Transmit>

}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	200006cc 	.word	0x200006cc

08001740 <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  osalThreadDelayMilliseconds(ms);
#endif

//  HAL_Delay(1000);

}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr
	...

08001754 <platform_init>:

/*
 * @brief  platform specific initialization (platform dependent)
 */
static void platform_init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
  HAL_Delay(1000);
#endif

  TIM1->CCR1 = PWM_3V3;
 8001758:	4b04      	ldr	r3, [pc, #16]	; (800176c <platform_init+0x18>)
 800175a:	f240 3293 	movw	r2, #915	; 0x393
 800175e:	635a      	str	r2, [r3, #52]	; 0x34
//  TIM1->CCR2 = PWM_3V3;
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
  HAL_Delay(1000);
 8001760:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001764:	f005 f9b2 	bl	8006acc <HAL_Delay>


}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40012c00 	.word	0x40012c00

08001770 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800177c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001780:	f023 0218 	bic.w	r2, r3, #24
 8001784:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4313      	orrs	r3, r2
 800178c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr

0800179a <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800179a:	b480      	push	{r7}
 800179c:	b085      	sub	sp, #20
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80017a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80017a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80017b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4013      	ands	r3, r2
 80017bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017be:	68fb      	ldr	r3, [r7, #12]
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr

080017ca <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b085      	sub	sp, #20
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80017d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4313      	orrs	r3, r2
 80017e0:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80017e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4013      	ands	r3, r2
 80017ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017ee:	68fb      	ldr	r3, [r7, #12]
}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc80      	pop	{r7}
 80017f8:	4770      	bx	lr

080017fa <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017fe:	f005 f8ef 	bl	80069e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001802:	f000 f81b 	bl	800183c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001806:	f000 f9fb 	bl	8001c00 <MX_GPIO_Init>
  MX_DMA_Init();
 800180a:	f000 f9e7 	bl	8001bdc <MX_DMA_Init>
  MX_CRC_Init();
 800180e:	f000 f871 	bl	80018f4 <MX_CRC_Init>
  MX_RTC_Init();
 8001812:	f000 f8dd 	bl	80019d0 <MX_RTC_Init>
  MX_TIM1_Init();
 8001816:	f000 f93f 	bl	8001a98 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800181a:	f000 f88d 	bl	8001938 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800181e:	f000 f98f 	bl	8001b40 <MX_TIM2_Init>
  MX_MEMS_Init();
 8001822:	f009 fe4b 	bl	800b4bc <MX_MEMS_Init>
  /* USER CODE BEGIN 2 */
  shub_init();
 8001826:	f000 facf 	bl	8001dc8 <shub_init>
  shub_power_i2c_on();
 800182a:	f000 faac 	bl	8001d86 <shub_power_i2c_on>
  shub_power_i2c_mlc_on();
 800182e:	f000 faba 	bl	8001da6 <shub_power_i2c_mlc_on>
  while (1)
  {
//	  lsm6dsox_mlc();
    /* USER CODE END WHILE */

  MX_MEMS_Process();
 8001832:	f009 fe49 	bl	800b4c8 <MX_MEMS_Process>
    /* USER CODE BEGIN 3 */
  lsm6dsox_mlc();
 8001836:	f7ff fe5b 	bl	80014f0 <lsm6dsox_mlc>
  {
 800183a:	e7fa      	b.n	8001832 <main+0x38>

0800183c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b09a      	sub	sp, #104	; 0x68
 8001840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001842:	f107 0320 	add.w	r3, r7, #32
 8001846:	2248      	movs	r2, #72	; 0x48
 8001848:	2100      	movs	r1, #0
 800184a:	4618      	mov	r0, r3
 800184c:	f00a fdb6 	bl	800c3bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	60da      	str	r2, [r3, #12]
 800185c:	611a      	str	r2, [r3, #16]
 800185e:	615a      	str	r2, [r3, #20]
 8001860:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001862:	f006 fe81 	bl	8008568 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001866:	2000      	movs	r0, #0
 8001868:	f7ff ff82 	bl	8001770 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800186c:	4b20      	ldr	r3, [pc, #128]	; (80018f0 <SystemClock_Config+0xb4>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001874:	4a1e      	ldr	r2, [pc, #120]	; (80018f0 <SystemClock_Config+0xb4>)
 8001876:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800187a:	6013      	str	r3, [r2, #0]
 800187c:	4b1c      	ldr	r3, [pc, #112]	; (80018f0 <SystemClock_Config+0xb4>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001884:	603b      	str	r3, [r7, #0]
 8001886:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8001888:	232c      	movs	r3, #44	; 0x2c
 800188a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800188c:	2381      	movs	r3, #129	; 0x81
 800188e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001890:	2301      	movs	r3, #1
 8001892:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001894:	2300      	movs	r3, #0
 8001896:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001898:	2360      	movs	r3, #96	; 0x60
 800189a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 800189c:	2300      	movs	r3, #0
 800189e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80018a0:	2301      	movs	r3, #1
 80018a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80018a4:	2300      	movs	r3, #0
 80018a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018a8:	f107 0320 	add.w	r3, r7, #32
 80018ac:	4618      	mov	r0, r3
 80018ae:	f007 f92d 	bl	8008b0c <HAL_RCC_OscConfig>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80018b8:	f000 fa1e 	bl	8001cf8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80018bc:	234f      	movs	r3, #79	; 0x4f
 80018be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018c8:	2300      	movs	r3, #0
 80018ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80018d0:	2300      	movs	r3, #0
 80018d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018d4:	1d3b      	adds	r3, r7, #4
 80018d6:	2100      	movs	r1, #0
 80018d8:	4618      	mov	r0, r3
 80018da:	f007 fcb3 	bl	8009244 <HAL_RCC_ClockConfig>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80018e4:	f000 fa08 	bl	8001cf8 <Error_Handler>
  }
}
 80018e8:	bf00      	nop
 80018ea:	3768      	adds	r7, #104	; 0x68
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	58000400 	.word	0x58000400

080018f4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80018f8:	4b0d      	ldr	r3, [pc, #52]	; (8001930 <MX_CRC_Init+0x3c>)
 80018fa:	4a0e      	ldr	r2, [pc, #56]	; (8001934 <MX_CRC_Init+0x40>)
 80018fc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80018fe:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <MX_CRC_Init+0x3c>)
 8001900:	2200      	movs	r2, #0
 8001902:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001904:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <MX_CRC_Init+0x3c>)
 8001906:	2200      	movs	r2, #0
 8001908:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800190a:	4b09      	ldr	r3, [pc, #36]	; (8001930 <MX_CRC_Init+0x3c>)
 800190c:	2200      	movs	r2, #0
 800190e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001910:	4b07      	ldr	r3, [pc, #28]	; (8001930 <MX_CRC_Init+0x3c>)
 8001912:	2200      	movs	r2, #0
 8001914:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001916:	4b06      	ldr	r3, [pc, #24]	; (8001930 <MX_CRC_Init+0x3c>)
 8001918:	2201      	movs	r2, #1
 800191a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800191c:	4804      	ldr	r0, [pc, #16]	; (8001930 <MX_CRC_Init+0x3c>)
 800191e:	f005 fa05 	bl	8006d2c <HAL_CRC_Init>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001928:	f000 f9e6 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}
 8001930:	200004f4 	.word	0x200004f4
 8001934:	40023000 	.word	0x40023000

08001938 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800193c:	4b22      	ldr	r3, [pc, #136]	; (80019c8 <MX_USART1_UART_Init+0x90>)
 800193e:	4a23      	ldr	r2, [pc, #140]	; (80019cc <MX_USART1_UART_Init+0x94>)
 8001940:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001942:	4b21      	ldr	r3, [pc, #132]	; (80019c8 <MX_USART1_UART_Init+0x90>)
 8001944:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001948:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800194a:	4b1f      	ldr	r3, [pc, #124]	; (80019c8 <MX_USART1_UART_Init+0x90>)
 800194c:	2200      	movs	r2, #0
 800194e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001950:	4b1d      	ldr	r3, [pc, #116]	; (80019c8 <MX_USART1_UART_Init+0x90>)
 8001952:	2200      	movs	r2, #0
 8001954:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001956:	4b1c      	ldr	r3, [pc, #112]	; (80019c8 <MX_USART1_UART_Init+0x90>)
 8001958:	2200      	movs	r2, #0
 800195a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800195c:	4b1a      	ldr	r3, [pc, #104]	; (80019c8 <MX_USART1_UART_Init+0x90>)
 800195e:	220c      	movs	r2, #12
 8001960:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001962:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <MX_USART1_UART_Init+0x90>)
 8001964:	2200      	movs	r2, #0
 8001966:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001968:	4b17      	ldr	r3, [pc, #92]	; (80019c8 <MX_USART1_UART_Init+0x90>)
 800196a:	2200      	movs	r2, #0
 800196c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800196e:	4b16      	ldr	r3, [pc, #88]	; (80019c8 <MX_USART1_UART_Init+0x90>)
 8001970:	2200      	movs	r2, #0
 8001972:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001974:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <MX_USART1_UART_Init+0x90>)
 8001976:	2200      	movs	r2, #0
 8001978:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800197a:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <MX_USART1_UART_Init+0x90>)
 800197c:	2200      	movs	r2, #0
 800197e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001980:	4811      	ldr	r0, [pc, #68]	; (80019c8 <MX_USART1_UART_Init+0x90>)
 8001982:	f008 ff8d 	bl	800a8a0 <HAL_UART_Init>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800198c:	f000 f9b4 	bl	8001cf8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001990:	2100      	movs	r1, #0
 8001992:	480d      	ldr	r0, [pc, #52]	; (80019c8 <MX_USART1_UART_Init+0x90>)
 8001994:	f009 fcca 	bl	800b32c <HAL_UARTEx_SetTxFifoThreshold>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800199e:	f000 f9ab 	bl	8001cf8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019a2:	2100      	movs	r1, #0
 80019a4:	4808      	ldr	r0, [pc, #32]	; (80019c8 <MX_USART1_UART_Init+0x90>)
 80019a6:	f009 fcff 	bl	800b3a8 <HAL_UARTEx_SetRxFifoThreshold>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80019b0:	f000 f9a2 	bl	8001cf8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80019b4:	4804      	ldr	r0, [pc, #16]	; (80019c8 <MX_USART1_UART_Init+0x90>)
 80019b6:	f009 fc81 	bl	800b2bc <HAL_UARTEx_DisableFifoMode>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80019c0:	f000 f99a 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019c4:	bf00      	nop
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000518 	.word	0x20000518
 80019cc:	40013800 	.word	0x40013800

080019d0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80019d6:	1d3b      	adds	r3, r7, #4
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80019e4:	2300      	movs	r3, #0
 80019e6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80019e8:	4b29      	ldr	r3, [pc, #164]	; (8001a90 <MX_RTC_Init+0xc0>)
 80019ea:	4a2a      	ldr	r2, [pc, #168]	; (8001a94 <MX_RTC_Init+0xc4>)
 80019ec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80019ee:	4b28      	ldr	r3, [pc, #160]	; (8001a90 <MX_RTC_Init+0xc0>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80019f4:	4b26      	ldr	r3, [pc, #152]	; (8001a90 <MX_RTC_Init+0xc0>)
 80019f6:	227f      	movs	r2, #127	; 0x7f
 80019f8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80019fa:	4b25      	ldr	r3, [pc, #148]	; (8001a90 <MX_RTC_Init+0xc0>)
 80019fc:	22ff      	movs	r2, #255	; 0xff
 80019fe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a00:	4b23      	ldr	r3, [pc, #140]	; (8001a90 <MX_RTC_Init+0xc0>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001a06:	4b22      	ldr	r3, [pc, #136]	; (8001a90 <MX_RTC_Init+0xc0>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a0c:	4b20      	ldr	r3, [pc, #128]	; (8001a90 <MX_RTC_Init+0xc0>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a12:	4b1f      	ldr	r3, [pc, #124]	; (8001a90 <MX_RTC_Init+0xc0>)
 8001a14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a18:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001a1a:	4b1d      	ldr	r3, [pc, #116]	; (8001a90 <MX_RTC_Init+0xc0>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001a20:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <MX_RTC_Init+0xc0>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a26:	481a      	ldr	r0, [pc, #104]	; (8001a90 <MX_RTC_Init+0xc0>)
 8001a28:	f008 f8e6 	bl	8009bf8 <HAL_RTC_Init>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001a32:	f000 f961 	bl	8001cf8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001a4a:	1d3b      	adds	r3, r7, #4
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	4619      	mov	r1, r3
 8001a50:	480f      	ldr	r0, [pc, #60]	; (8001a90 <MX_RTC_Init+0xc0>)
 8001a52:	f008 f94b 	bl	8009cec <HAL_RTC_SetTime>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_RTC_Init+0x90>
  {
    Error_Handler();
 8001a5c:	f000 f94c 	bl	8001cf8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001a60:	2301      	movs	r3, #1
 8001a62:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001a64:	2301      	movs	r3, #1
 8001a66:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001a70:	463b      	mov	r3, r7
 8001a72:	2201      	movs	r2, #1
 8001a74:	4619      	mov	r1, r3
 8001a76:	4806      	ldr	r0, [pc, #24]	; (8001a90 <MX_RTC_Init+0xc0>)
 8001a78:	f008 f9d4 	bl	8009e24 <HAL_RTC_SetDate>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_RTC_Init+0xb6>
  {
    Error_Handler();
 8001a82:	f000 f939 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a86:	bf00      	nop
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	200005a8 	.word	0x200005a8
 8001a94:	40002800 	.word	0x40002800

08001a98 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b088      	sub	sp, #32
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a9e:	f107 0310 	add.w	r3, r7, #16
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	605a      	str	r2, [r3, #4]
 8001aa8:	609a      	str	r2, [r3, #8]
 8001aaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aac:	1d3b      	adds	r3, r7, #4
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ab6:	4b20      	ldr	r3, [pc, #128]	; (8001b38 <MX_TIM1_Init+0xa0>)
 8001ab8:	4a20      	ldr	r2, [pc, #128]	; (8001b3c <MX_TIM1_Init+0xa4>)
 8001aba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001abc:	4b1e      	ldr	r3, [pc, #120]	; (8001b38 <MX_TIM1_Init+0xa0>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac2:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <MX_TIM1_Init+0xa0>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ac8:	4b1b      	ldr	r3, [pc, #108]	; (8001b38 <MX_TIM1_Init+0xa0>)
 8001aca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ace:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ad0:	4b19      	ldr	r3, [pc, #100]	; (8001b38 <MX_TIM1_Init+0xa0>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ad6:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <MX_TIM1_Init+0xa0>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001adc:	4b16      	ldr	r3, [pc, #88]	; (8001b38 <MX_TIM1_Init+0xa0>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ae2:	4815      	ldr	r0, [pc, #84]	; (8001b38 <MX_TIM1_Init+0xa0>)
 8001ae4:	f008 fadb 	bl	800a09e <HAL_TIM_Base_Init>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001aee:	f000 f903 	bl	8001cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001af2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001af6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001af8:	f107 0310 	add.w	r3, r7, #16
 8001afc:	4619      	mov	r1, r3
 8001afe:	480e      	ldr	r0, [pc, #56]	; (8001b38 <MX_TIM1_Init+0xa0>)
 8001b00:	f008 fc43 	bl	800a38a <HAL_TIM_ConfigClockSource>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001b0a:	f000 f8f5 	bl	8001cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b12:	2300      	movs	r3, #0
 8001b14:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b16:	2300      	movs	r3, #0
 8001b18:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b1a:	1d3b      	adds	r3, r7, #4
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4806      	ldr	r0, [pc, #24]	; (8001b38 <MX_TIM1_Init+0xa0>)
 8001b20:	f008 fe24 	bl	800a76c <HAL_TIMEx_MasterConfigSynchronization>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001b2a:	f000 f8e5 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b2e:	bf00      	nop
 8001b30:	3720      	adds	r7, #32
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	200005e0 	.word	0x200005e0
 8001b3c:	40012c00 	.word	0x40012c00

08001b40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b46:	f107 0310 	add.w	r3, r7, #16
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	605a      	str	r2, [r3, #4]
 8001b50:	609a      	str	r2, [r3, #8]
 8001b52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b54:	1d3b      	adds	r3, r7, #4
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b5e:	4b1e      	ldr	r3, [pc, #120]	; (8001bd8 <MX_TIM2_Init+0x98>)
 8001b60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b64:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b66:	4b1c      	ldr	r3, [pc, #112]	; (8001bd8 <MX_TIM2_Init+0x98>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b6c:	4b1a      	ldr	r3, [pc, #104]	; (8001bd8 <MX_TIM2_Init+0x98>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001b72:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <MX_TIM2_Init+0x98>)
 8001b74:	f04f 32ff 	mov.w	r2, #4294967295
 8001b78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b7a:	4b17      	ldr	r3, [pc, #92]	; (8001bd8 <MX_TIM2_Init+0x98>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b80:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <MX_TIM2_Init+0x98>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b86:	4814      	ldr	r0, [pc, #80]	; (8001bd8 <MX_TIM2_Init+0x98>)
 8001b88:	f008 fa89 	bl	800a09e <HAL_TIM_Base_Init>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001b92:	f000 f8b1 	bl	8001cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b9c:	f107 0310 	add.w	r3, r7, #16
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	480d      	ldr	r0, [pc, #52]	; (8001bd8 <MX_TIM2_Init+0x98>)
 8001ba4:	f008 fbf1 	bl	800a38a <HAL_TIM_ConfigClockSource>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001bae:	f000 f8a3 	bl	8001cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bba:	1d3b      	adds	r3, r7, #4
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4806      	ldr	r0, [pc, #24]	; (8001bd8 <MX_TIM2_Init+0x98>)
 8001bc0:	f008 fdd4 	bl	800a76c <HAL_TIMEx_MasterConfigSynchronization>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001bca:	f000 f895 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bce:	bf00      	nop
 8001bd0:	3720      	adds	r7, #32
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	2000062c 	.word	0x2000062c

08001bdc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001be0:	2004      	movs	r0, #4
 8001be2:	f7ff fdda 	bl	800179a <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001be6:	2001      	movs	r0, #1
 8001be8:	f7ff fdd7 	bl	800179a <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001bec:	2200      	movs	r2, #0
 8001bee:	2100      	movs	r1, #0
 8001bf0:	2010      	movs	r0, #16
 8001bf2:	f005 f866 	bl	8006cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001bf6:	2010      	movs	r0, #16
 8001bf8:	f005 f87d 	bl	8006cf6 <HAL_NVIC_EnableIRQ>

}
 8001bfc:	bf00      	nop
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c06:	1d3b      	adds	r3, r7, #4
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c14:	2001      	movs	r0, #1
 8001c16:	f7ff fdd8 	bl	80017ca <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1a:	2002      	movs	r0, #2
 8001c1c:	f7ff fdd5 	bl	80017ca <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c20:	2004      	movs	r0, #4
 8001c22:	f7ff fdd2 	bl	80017ca <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001c26:	2200      	movs	r2, #0
 8001c28:	f44f 4102 	mov.w	r1, #33280	; 0x8200
 8001c2c:	4830      	ldr	r0, [pc, #192]	; (8001cf0 <MX_GPIO_Init+0xf0>)
 8001c2e:	f005 fe12 	bl	8007856 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 8001c32:	2200      	movs	r2, #0
 8001c34:	2138      	movs	r1, #56	; 0x38
 8001c36:	482f      	ldr	r0, [pc, #188]	; (8001cf4 <MX_GPIO_Init+0xf4>)
 8001c38:	f005 fe0d 	bl	8007856 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8001c3c:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 8001c40:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c42:	2301      	movs	r3, #1
 8001c44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4e:	1d3b      	adds	r3, r7, #4
 8001c50:	4619      	mov	r1, r3
 8001c52:	4827      	ldr	r0, [pc, #156]	; (8001cf0 <MX_GPIO_Init+0xf0>)
 8001c54:	f005 fbba 	bl	80073cc <HAL_GPIO_Init>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 8001c58:	2338      	movs	r3, #56	; 0x38
 8001c5a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c64:	2303      	movs	r3, #3
 8001c66:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c68:	1d3b      	adds	r3, r7, #4
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4821      	ldr	r0, [pc, #132]	; (8001cf4 <MX_GPIO_Init+0xf4>)
 8001c6e:	f005 fbad 	bl	80073cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c72:	2302      	movs	r3, #2
 8001c74:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c76:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c80:	1d3b      	adds	r3, r7, #4
 8001c82:	4619      	mov	r1, r3
 8001c84:	481a      	ldr	r0, [pc, #104]	; (8001cf0 <MX_GPIO_Init+0xf0>)
 8001c86:	f005 fba1 	bl	80073cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4816      	ldr	r0, [pc, #88]	; (8001cf4 <MX_GPIO_Init+0xf4>)
 8001c9c:	f005 fb96 	bl	80073cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ca0:	2340      	movs	r3, #64	; 0x40
 8001ca2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ca4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ca8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cae:	1d3b      	adds	r3, r7, #4
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4810      	ldr	r0, [pc, #64]	; (8001cf4 <MX_GPIO_Init+0xf4>)
 8001cb4:	f005 fb8a 	bl	80073cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001cb8:	2200      	movs	r2, #0
 8001cba:	2100      	movs	r1, #0
 8001cbc:	2006      	movs	r0, #6
 8001cbe:	f005 f800 	bl	8006cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001cc2:	2006      	movs	r0, #6
 8001cc4:	f005 f817 	bl	8006cf6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2100      	movs	r1, #0
 8001ccc:	2007      	movs	r0, #7
 8001cce:	f004 fff8 	bl	8006cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001cd2:	2007      	movs	r0, #7
 8001cd4:	f005 f80f 	bl	8006cf6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	2100      	movs	r1, #0
 8001cdc:	2016      	movs	r0, #22
 8001cde:	f004 fff0 	bl	8006cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001ce2:	2016      	movs	r0, #22
 8001ce4:	f005 f807 	bl	8006cf6 <HAL_NVIC_EnableIRQ>

}
 8001ce8:	bf00      	nop
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	48000400 	.word	0x48000400
 8001cf4:	48000800 	.word	0x48000800

08001cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cfc:	b672      	cpsid	i
}
 8001cfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d00:	e7fe      	b.n	8001d00 <Error_Handler+0x8>

08001d02 <LL_AHB2_GRP1_EnableClock>:
{
 8001d02:	b480      	push	{r7}
 8001d04:	b085      	sub	sp, #20
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4013      	ands	r3, r2
 8001d24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d26:	68fb      	ldr	r3, [r7, #12]
}
 8001d28:	bf00      	nop
 8001d2a:	3714      	adds	r7, #20
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bc80      	pop	{r7}
 8001d30:	4770      	bx	lr

08001d32 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b085      	sub	sp, #20
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d3e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d4e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4013      	ands	r3, r2
 8001d54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d56:	68fb      	ldr	r3, [r7, #12]
}
 8001d58:	bf00      	nop
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr

08001d62 <LL_APB1_GRP1_DisableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d6e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	43db      	mvns	r3, r3
 8001d74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d78:	4013      	ands	r3, r2
 8001d7a:	658b      	str	r3, [r1, #88]	; 0x58
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc80      	pop	{r7}
 8001d84:	4770      	bx	lr

08001d86 <shub_power_i2c_on>:
/***** Global Variables  ******/


/***** Global Functions  ******/
void shub_power_i2c_on()
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8a:	2001      	movs	r0, #1
 8001d8c:	f7ff ffb9 	bl	8001d02 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_WritePin(I2C_POW_ENA_GPIO_Port, I2C_POW_ENA_Pin, GPIO_PIN_SET);
 8001d90:	2201      	movs	r2, #1
 8001d92:	2120      	movs	r1, #32
 8001d94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d98:	f005 fd5d 	bl	8007856 <HAL_GPIO_WritePin>
  /* Give some space for the switch to stabilize */
  HAL_Delay(5);
 8001d9c:	2005      	movs	r0, #5
 8001d9e:	f004 fe95 	bl	8006acc <HAL_Delay>
}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <shub_power_i2c_mlc_on>:
  __HAL_RCC_GPIOA_CLK_ENABLE();
  HAL_GPIO_WritePin(I2C_POW_ENA_GPIO_Port, I2C_POW_ENA_Pin, GPIO_PIN_RESET);
}

void shub_power_i2c_mlc_on()
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001daa:	2001      	movs	r0, #1
 8001dac:	f7ff ffa9 	bl	8001d02 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_WritePin(MLC_POW_ENA_GPIO_Port, MLC_POW_ENA_Pin, GPIO_PIN_SET);
 8001db0:	2201      	movs	r2, #1
 8001db2:	2180      	movs	r1, #128	; 0x80
 8001db4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001db8:	f005 fd4d 	bl	8007856 <HAL_GPIO_WritePin>
  /* Give some space for the switch to stabilize */
  HAL_Delay(5);
 8001dbc:	2005      	movs	r0, #5
 8001dbe:	f004 fe85 	bl	8006acc <HAL_Delay>
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <shub_init>:
  __HAL_RCC_GPIOA_CLK_ENABLE();
  HAL_GPIO_WritePin(MLC_POW_ENA_GPIO_Port, MLC_POW_ENA_Pin, GPIO_PIN_RESET);
}

void shub_init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
#if ( SHUB_INIT_I2C )
  GPIO_InitTypeDef GPIO_InitStruct_i2c = {0};
 8001dce:	1d3b      	adds	r3, r7, #4
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	611a      	str	r2, [r3, #16]

  if (hi2c2.Instance != I2C2) {
 8001ddc:	4b22      	ldr	r3, [pc, #136]	; (8001e68 <shub_init+0xa0>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a22      	ldr	r2, [pc, #136]	; (8001e6c <shub_init+0xa4>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d039      	beq.n	8001e5a <shub_init+0x92>
    hi2c2.Instance = I2C2;
 8001de6:	4b20      	ldr	r3, [pc, #128]	; (8001e68 <shub_init+0xa0>)
 8001de8:	4a20      	ldr	r2, [pc, #128]	; (8001e6c <shub_init+0xa4>)
 8001dea:	601a      	str	r2, [r3, #0]
    hi2c2.Init.Timing = 0x20000209;
 8001dec:	4b1e      	ldr	r3, [pc, #120]	; (8001e68 <shub_init+0xa0>)
 8001dee:	4a20      	ldr	r2, [pc, #128]	; (8001e70 <shub_init+0xa8>)
 8001df0:	605a      	str	r2, [r3, #4]
    hi2c2.Init.OwnAddress1 = 0;
 8001df2:	4b1d      	ldr	r3, [pc, #116]	; (8001e68 <shub_init+0xa0>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	609a      	str	r2, [r3, #8]
    hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001df8:	4b1b      	ldr	r3, [pc, #108]	; (8001e68 <shub_init+0xa0>)
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	60da      	str	r2, [r3, #12]
    hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dfe:	4b1a      	ldr	r3, [pc, #104]	; (8001e68 <shub_init+0xa0>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	611a      	str	r2, [r3, #16]
    hi2c2.Init.OwnAddress2 = 0;
 8001e04:	4b18      	ldr	r3, [pc, #96]	; (8001e68 <shub_init+0xa0>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	615a      	str	r2, [r3, #20]
    hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e0a:	4b17      	ldr	r3, [pc, #92]	; (8001e68 <shub_init+0xa0>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	619a      	str	r2, [r3, #24]
    hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e10:	4b15      	ldr	r3, [pc, #84]	; (8001e68 <shub_init+0xa0>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	61da      	str	r2, [r3, #28]
    hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8001e16:	4b14      	ldr	r3, [pc, #80]	; (8001e68 <shub_init+0xa0>)
 8001e18:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e1c:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8001e1e:	4812      	ldr	r0, [pc, #72]	; (8001e68 <shub_init+0xa0>)
 8001e20:	f005 fd52 	bl	80078c8 <HAL_I2C_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <shub_init+0x66>
      Error_Handler();
 8001e2a:	f7ff ff65 	bl	8001cf8 <Error_Handler>
    }
    /** Configure Analog filter */
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8001e2e:	2100      	movs	r1, #0
 8001e30:	480d      	ldr	r0, [pc, #52]	; (8001e68 <shub_init+0xa0>)
 8001e32:	f006 faf1 	bl	8008418 <HAL_I2CEx_ConfigAnalogFilter>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <shub_init+0x78>
      Error_Handler();
 8001e3c:	f7ff ff5c 	bl	8001cf8 <Error_Handler>
    }
    /** Configure Digital filter */
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8001e40:	2100      	movs	r1, #0
 8001e42:	4809      	ldr	r0, [pc, #36]	; (8001e68 <shub_init+0xa0>)
 8001e44:	f006 fb32 	bl	80084ac <HAL_I2CEx_ConfigDigitalFilter>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <shub_init+0x8a>
      Error_Handler();
 8001e4e:	f7ff ff53 	bl	8001cf8 <Error_Handler>
    }
    /** I2C Fast mode Plus enable */
    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C2);
 8001e52:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001e56:	f006 fb75 	bl	8008544 <HAL_I2CEx_EnableFastModePlus>
  }
#endif // ( SHUB_INIT_I2C )

  // initialize GPIOs (switches 'n' detection pins)
  io_init();
 8001e5a:	f000 f80b 	bl	8001e74 <io_init>
}
 8001e5e:	bf00      	nop
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000678 	.word	0x20000678
 8001e6c:	40005800 	.word	0x40005800
 8001e70:	20000209 	.word	0x20000209

08001e74 <io_init>:

/***** Priv Func  ******/
static void io_init( void )
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7a:	1d3b      	adds	r3, r7, #4
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	60da      	str	r2, [r3, #12]
 8001e86:	611a      	str	r2, [r3, #16]

  //Initialize GPIO ports
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e88:	2001      	movs	r0, #1
 8001e8a:	f7ff ff3a 	bl	8001d02 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e8e:	2002      	movs	r0, #2
 8001e90:	f7ff ff37 	bl	8001d02 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e94:	2004      	movs	r0, #4
 8001e96:	f7ff ff34 	bl	8001d02 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SW2_3_IN1_Pin|SW2_3_IN2_Pin, GPIO_PIN_RESET);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2106      	movs	r1, #6
 8001e9e:	481d      	ldr	r0, [pc, #116]	; (8001f14 <io_init+0xa0>)
 8001ea0:	f005 fcd9 	bl	8007856 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LD0_4V_EN_Pin|SW1_IN2_Pin|I2C_POW_ENA_Pin|MLC_POW_ENA_Pin, GPIO_PIN_RESET);
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	21e1      	movs	r1, #225	; 0xe1
 8001ea8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eac:	f005 fcd3 	bl	8007856 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, SW1_IN1_Pin, GPIO_PIN_RESET);
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	2110      	movs	r1, #16
 8001eb4:	4818      	ldr	r0, [pc, #96]	; (8001f18 <io_init+0xa4>)
 8001eb6:	f005 fcce 	bl	8007856 <HAL_GPIO_WritePin>

  /*Configure GPIO B pins */
  GPIO_InitStruct.Pin = SW2_3_IN1_Pin|SW2_3_IN2_Pin;
 8001eba:	2306      	movs	r3, #6
 8001ebc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eca:	1d3b      	adds	r3, r7, #4
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4811      	ldr	r0, [pc, #68]	; (8001f14 <io_init+0xa0>)
 8001ed0:	f005 fa7c 	bl	80073cc <HAL_GPIO_Init>
  /* Insertion Detection PINS initialization moved to check port function
   * to overcome conflicts with USART2 TX (PA2)
   */

  /*Configure GPIO A pins */
  GPIO_InitStruct.Pin = LD0_4V_EN_Pin|SW1_IN2_Pin|I2C_POW_ENA_Pin|MLC_POW_ENA_Pin;
 8001ed4:	23e1      	movs	r3, #225	; 0xe1
 8001ed6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee4:	1d3b      	adds	r3, r7, #4
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eec:	f005 fa6e 	bl	80073cc <HAL_GPIO_Init>

  /*Configure GPIO C pins */
  GPIO_InitStruct.Pin = SW1_IN1_Pin;
 8001ef0:	2310      	movs	r3, #16
 8001ef2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001efc:	2302      	movs	r3, #2
 8001efe:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SW1_IN1_GPIO_Port, &GPIO_InitStruct);
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	4619      	mov	r1, r3
 8001f04:	4804      	ldr	r0, [pc, #16]	; (8001f18 <io_init+0xa4>)
 8001f06:	f005 fa61 	bl	80073cc <HAL_GPIO_Init>
}
 8001f0a:	bf00      	nop
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	48000400 	.word	0x48000400
 8001f18:	48000800 	.word	0x48000800

08001f1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b088      	sub	sp, #32
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f24:	f107 030c 	add.w	r3, r7, #12
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]

	if (hi2c->Instance == I2C2) {
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a0f      	ldr	r2, [pc, #60]	; (8001f78 <HAL_I2C_MspInit+0x5c>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d118      	bne.n	8001f70 <HAL_I2C_MspInit+0x54>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3e:	2001      	movs	r0, #1
 8001f40:	f7ff fedf 	bl	8001d02 <LL_AHB2_GRP1_EnableClock>
	    /**I2C2 GPIO Configuration
	    PA11     ------> I2C2_SDA
	    PA12     ------> I2C2_SCL
	    */
	    GPIO_InitStruct.Pin = SHUB_I2C_SDA|SHUB_I2C_SCL;
 8001f44:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f48:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f4a:	2312      	movs	r3, #18
 8001f4c:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f52:	2303      	movs	r3, #3
 8001f54:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f56:	2304      	movs	r3, #4
 8001f58:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(SHUB_I2C_SDA_Port, &GPIO_InitStruct);
 8001f5a:	f107 030c 	add.w	r3, r7, #12
 8001f5e:	4619      	mov	r1, r3
 8001f60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f64:	f005 fa32 	bl	80073cc <HAL_GPIO_Init>

		/* Peripheral clock enable */
		__HAL_RCC_I2C2_CLK_ENABLE();
 8001f68:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001f6c:	f7ff fee1 	bl	8001d32 <LL_APB1_GRP1_EnableClock>
	}
}
 8001f70:	bf00      	nop
 8001f72:	3720      	adds	r7, #32
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40005800 	.word	0x40005800

08001f7c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a0c      	ldr	r2, [pc, #48]	; (8001fbc <HAL_I2C_MspDeInit+0x40>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d112      	bne.n	8001fb4 <HAL_I2C_MspDeInit+0x38>
  {
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001f8e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001f92:	f7ff fee6 	bl	8001d62 <LL_APB1_GRP1_DisableClock>

    /**I2C2 GPIO Configuration
    PA11     ------> I2C2_SDA
    PA12     ------> I2C2_SCL
    */
    HAL_GPIO_DeInit(SHUB_I2C_SDA_Port, SHUB_I2C_SDA);
 8001f96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f9e:	f005 fb75 	bl	800768c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(SHUB_I2C_SCL_Port, SHUB_I2C_SCL);
 8001fa2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001faa:	f005 fb6f 	bl	800768c <HAL_GPIO_DeInit>

    hi2c->Instance = NULL;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
  }

}
 8001fb4:	bf00      	nop
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40005800 	.word	0x40005800

08001fc0 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr

08001fe0 <LL_AHB1_GRP1_EnableClock>:
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001fee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001ff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ffc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4013      	ands	r3, r2
 8002002:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002004:	68fb      	ldr	r3, [r7, #12]
}
 8002006:	bf00      	nop
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr

08002010 <LL_AHB2_GRP1_EnableClock>:
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800201c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800201e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4313      	orrs	r3, r2
 8002026:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002028:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800202c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4013      	ands	r3, r2
 8002032:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002034:	68fb      	ldr	r3, [r7, #12]
}
 8002036:	bf00      	nop
 8002038:	3714      	adds	r7, #20
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr

08002040 <LL_APB1_GRP1_EnableClock>:
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800204c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800204e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4313      	orrs	r3, r2
 8002056:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800205c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4013      	ands	r3, r2
 8002062:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002064:	68fb      	ldr	r3, [r7, #12]
}
 8002066:	bf00      	nop
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr

08002070 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800207c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800207e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4313      	orrs	r3, r2
 8002086:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800208c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4013      	ands	r3, r2
 8002092:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002094:	68fb      	ldr	r3, [r7, #12]
}
 8002096:	bf00      	nop
 8002098:	3714      	adds	r7, #20
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr

080020a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr

080020ac <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a05      	ldr	r2, [pc, #20]	; (80020d0 <HAL_CRC_MspInit+0x24>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d103      	bne.n	80020c6 <HAL_CRC_MspInit+0x1a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80020be:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80020c2:	f7ff ff8d 	bl	8001fe0 <LL_AHB1_GRP1_EnableClock>
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40023000 	.word	0x40023000

080020d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b096      	sub	sp, #88	; 0x58
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	60da      	str	r2, [r3, #12]
 80020ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020ec:	f107 030c 	add.w	r3, r7, #12
 80020f0:	2238      	movs	r2, #56	; 0x38
 80020f2:	2100      	movs	r1, #0
 80020f4:	4618      	mov	r0, r3
 80020f6:	f00a f961 	bl	800c3bc <memset>
  if(huart->Instance==USART1)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a17      	ldr	r2, [pc, #92]	; (800215c <HAL_UART_MspInit+0x88>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d127      	bne.n	8002154 <HAL_UART_MspInit+0x80>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002104:	2301      	movs	r3, #1
 8002106:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002108:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800210c:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800210e:	f107 030c 	add.w	r3, r7, #12
 8002112:	4618      	mov	r0, r3
 8002114:	f007 fc56 	bl	80099c4 <HAL_RCCEx_PeriphCLKConfig>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800211e:	f7ff fdeb 	bl	8001cf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002122:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002126:	f7ff ffa3 	bl	8002070 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800212a:	2001      	movs	r0, #1
 800212c:	f7ff ff70 	bl	8002010 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8002130:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002134:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002136:	2302      	movs	r3, #2
 8002138:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213e:	2300      	movs	r3, #0
 8002140:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002142:	2307      	movs	r3, #7
 8002144:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002146:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800214a:	4619      	mov	r1, r3
 800214c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002150:	f005 f93c 	bl	80073cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002154:	bf00      	nop
 8002156:	3758      	adds	r7, #88	; 0x58
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40013800 	.word	0x40013800

08002160 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b090      	sub	sp, #64	; 0x40
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002168:	f107 0308 	add.w	r3, r7, #8
 800216c:	2238      	movs	r2, #56	; 0x38
 800216e:	2100      	movs	r1, #0
 8002170:	4618      	mov	r0, r3
 8002172:	f00a f923 	bl	800c3bc <memset>
  if(hrtc->Instance==RTC)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a0e      	ldr	r2, [pc, #56]	; (80021b4 <HAL_RTC_MspInit+0x54>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d115      	bne.n	80021ac <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002180:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002184:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002186:	f44f 7300 	mov.w	r3, #512	; 0x200
 800218a:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800218c:	f107 0308 	add.w	r3, r7, #8
 8002190:	4618      	mov	r0, r3
 8002192:	f007 fc17 	bl	80099c4 <HAL_RCCEx_PeriphCLKConfig>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800219c:	f7ff fdac 	bl	8001cf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021a0:	f7ff ff0e 	bl	8001fc0 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80021a4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80021a8:	f7ff ff4a 	bl	8002040 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80021ac:	bf00      	nop
 80021ae:	3740      	adds	r7, #64	; 0x40
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40002800 	.word	0x40002800

080021b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b088      	sub	sp, #32
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c0:	f107 030c 	add.w	r3, r7, #12
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a17      	ldr	r2, [pc, #92]	; (8002234 <HAL_TIM_Base_MspInit+0x7c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d104      	bne.n	80021e4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021da:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80021de:	f7ff ff47 	bl	8002070 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80021e2:	e023      	b.n	800222c <HAL_TIM_Base_MspInit+0x74>
  else if(htim_base->Instance==TIM2)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ec:	d11e      	bne.n	800222c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021ee:	2001      	movs	r0, #1
 80021f0:	f7ff ff26 	bl	8002040 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f4:	2001      	movs	r0, #1
 80021f6:	f7ff ff0b 	bl	8002010 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80021fa:	2320      	movs	r3, #32
 80021fc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fe:	2302      	movs	r3, #2
 8002200:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002206:	2300      	movs	r3, #0
 8002208:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800220a:	2301      	movs	r3, #1
 800220c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220e:	f107 030c 	add.w	r3, r7, #12
 8002212:	4619      	mov	r1, r3
 8002214:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002218:	f005 f8d8 	bl	80073cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800221c:	2200      	movs	r2, #0
 800221e:	2100      	movs	r1, #0
 8002220:	201b      	movs	r0, #27
 8002222:	f004 fd4e 	bl	8006cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002226:	201b      	movs	r0, #27
 8002228:	f004 fd65 	bl	8006cf6 <HAL_NVIC_EnableIRQ>
}
 800222c:	bf00      	nop
 800222e:	3720      	adds	r7, #32
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40012c00 	.word	0x40012c00

08002238 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800223c:	e7fe      	b.n	800223c <NMI_Handler+0x4>
	...

08002240 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  printf("\n\nHARD FAULT\n\n");
 8002244:	4801      	ldr	r0, [pc, #4]	; (800224c <HardFault_Handler+0xc>)
 8002246:	f00a f947 	bl	800c4d8 <puts>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800224a:	e7fe      	b.n	800224a <HardFault_Handler+0xa>
 800224c:	0800e64c 	.word	0x0800e64c

08002250 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002254:	e7fe      	b.n	8002254 <MemManage_Handler+0x4>

08002256 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002256:	b480      	push	{r7}
 8002258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800225a:	e7fe      	b.n	800225a <BusFault_Handler+0x4>

0800225c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002260:	e7fe      	b.n	8002260 <UsageFault_Handler+0x4>

08002262 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002262:	b480      	push	{r7}
 8002264:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	46bd      	mov	sp, r7
 800226a:	bc80      	pop	{r7}
 800226c:	4770      	bx	lr

0800226e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800226e:	b480      	push	{r7}
 8002270:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	46bd      	mov	sp, r7
 8002276:	bc80      	pop	{r7}
 8002278:	4770      	bx	lr

0800227a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800227a:	b480      	push	{r7}
 800227c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800227e:	bf00      	nop
 8002280:	46bd      	mov	sp, r7
 8002282:	bc80      	pop	{r7}
 8002284:	4770      	bx	lr

08002286 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800228a:	f004 fc03 	bl	8006a94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
	...

08002294 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8002298:	4802      	ldr	r0, [pc, #8]	; (80022a4 <EXTI0_IRQHandler+0x10>)
 800229a:	f005 f867 	bl	800736c <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20000060 	.word	0x20000060

080022a8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80022ac:	2002      	movs	r0, #2
 80022ae:	f005 fae9 	bl	8007884 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 6 Interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80022bc:	4802      	ldr	r0, [pc, #8]	; (80022c8 <DMA1_Channel6_IRQHandler+0x10>)
 80022be:	f004 fec7 	bl	8007050 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20000760 	.word	0x20000760

080022cc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80022d0:	2040      	movs	r0, #64	; 0x40
 80022d2:	f005 fad7 	bl	8007884 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
	...

080022dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 Global Interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022e0:	4802      	ldr	r0, [pc, #8]	; (80022ec <TIM2_IRQHandler+0x10>)
 80022e2:	f007 ff33 	bl	800a14c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	2000062c 	.word	0x2000062c

080022f0 <LL_AHB2_GRP1_EnableClock>:
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80022f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4313      	orrs	r3, r2
 8002306:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800230c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4013      	ands	r3, r2
 8002312:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002314:	68fb      	ldr	r3, [r7, #12]
}
 8002316:	bf00      	nop
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr

08002320 <LL_APB1_GRP1_EnableClock>:
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800232c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800232e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4313      	orrs	r3, r2
 8002336:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800233c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4013      	ands	r3, r2
 8002342:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002344:	68fb      	ldr	r3, [r7, #12]
}
 8002346:	bf00      	nop
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr

08002350 <LL_APB1_GRP1_DisableClock>:
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800235c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	43db      	mvns	r3, r3
 8002362:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002366:	4013      	ands	r3, r2
 8002368:	658b      	str	r3, [r1, #88]	; 0x58
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr

08002374 <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800237a:	2300      	movs	r3, #0
 800237c:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 800237e:	4b19      	ldr	r3, [pc, #100]	; (80023e4 <BSP_I2C2_Init+0x70>)
 8002380:	4a19      	ldr	r2, [pc, #100]	; (80023e8 <BSP_I2C2_Init+0x74>)
 8002382:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 8002384:	4b19      	ldr	r3, [pc, #100]	; (80023ec <BSP_I2C2_Init+0x78>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	1c5a      	adds	r2, r3, #1
 800238a:	4918      	ldr	r1, [pc, #96]	; (80023ec <BSP_I2C2_Init+0x78>)
 800238c:	600a      	str	r2, [r1, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d122      	bne.n	80023d8 <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 8002392:	4814      	ldr	r0, [pc, #80]	; (80023e4 <BSP_I2C2_Init+0x70>)
 8002394:	f005 fd84 	bl	8007ea0 <HAL_I2C_GetState>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d11c      	bne.n	80023d8 <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 800239e:	4811      	ldr	r0, [pc, #68]	; (80023e4 <BSP_I2C2_Init+0x70>)
 80023a0:	f000 f8fe 	bl	80025a0 <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d116      	bne.n	80023d8 <BSP_I2C2_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 80023aa:	480e      	ldr	r0, [pc, #56]	; (80023e4 <BSP_I2C2_Init+0x70>)
 80023ac:	f000 f8b4 	bl	8002518 <MX_I2C2_Init>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <BSP_I2C2_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80023b6:	f06f 0307 	mvn.w	r3, #7
 80023ba:	607b      	str	r3, [r7, #4]
 80023bc:	e00c      	b.n	80023d8 <BSP_I2C2_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80023be:	2100      	movs	r1, #0
 80023c0:	4808      	ldr	r0, [pc, #32]	; (80023e4 <BSP_I2C2_Init+0x70>)
 80023c2:	f006 f829 	bl	8008418 <HAL_I2CEx_ConfigAnalogFilter>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <BSP_I2C2_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80023cc:	f06f 0307 	mvn.w	r3, #7
 80023d0:	607b      	str	r3, [r7, #4]
 80023d2:	e001      	b.n	80023d8 <BSP_I2C2_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80023d4:	2300      	movs	r3, #0
 80023d6:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80023d8:	687b      	ldr	r3, [r7, #4]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20000678 	.word	0x20000678
 80023e8:	40005800 	.word	0x40005800
 80023ec:	200006c4 	.word	0x200006c4

080023f0 <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80023f6:	2300      	movs	r3, #0
 80023f8:	607b      	str	r3, [r7, #4]

  if (I2C2InitCounter > 0)
 80023fa:	4b0f      	ldr	r3, [pc, #60]	; (8002438 <BSP_I2C2_DeInit+0x48>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d014      	beq.n	800242c <BSP_I2C2_DeInit+0x3c>
  {
    if (--I2C2InitCounter == 0)
 8002402:	4b0d      	ldr	r3, [pc, #52]	; (8002438 <BSP_I2C2_DeInit+0x48>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	3b01      	subs	r3, #1
 8002408:	4a0b      	ldr	r2, [pc, #44]	; (8002438 <BSP_I2C2_DeInit+0x48>)
 800240a:	6013      	str	r3, [r2, #0]
 800240c:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <BSP_I2C2_DeInit+0x48>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10b      	bne.n	800242c <BSP_I2C2_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C2_MspDeInit(&hi2c2);
 8002414:	4809      	ldr	r0, [pc, #36]	; (800243c <BSP_I2C2_DeInit+0x4c>)
 8002416:	f000 f907 	bl	8002628 <I2C2_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c2) != HAL_OK)
 800241a:	4808      	ldr	r0, [pc, #32]	; (800243c <BSP_I2C2_DeInit+0x4c>)
 800241c:	f005 fae3 	bl	80079e6 <HAL_I2C_DeInit>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d002      	beq.n	800242c <BSP_I2C2_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8002426:	f06f 0307 	mvn.w	r3, #7
 800242a:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 800242c:	687b      	ldr	r3, [r7, #4]
}
 800242e:	4618      	mov	r0, r3
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	200006c4 	.word	0x200006c4
 800243c:	20000678 	.word	0x20000678

08002440 <BSP_I2C2_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b08a      	sub	sp, #40	; 0x28
 8002444:	af04      	add	r7, sp, #16
 8002446:	60ba      	str	r2, [r7, #8]
 8002448:	461a      	mov	r2, r3
 800244a:	4603      	mov	r3, r0
 800244c:	81fb      	strh	r3, [r7, #14]
 800244e:	460b      	mov	r3, r1
 8002450:	81bb      	strh	r3, [r7, #12]
 8002452:	4613      	mov	r3, r2
 8002454:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c2, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 800245a:	89ba      	ldrh	r2, [r7, #12]
 800245c:	89f9      	ldrh	r1, [r7, #14]
 800245e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002462:	9302      	str	r3, [sp, #8]
 8002464:	88fb      	ldrh	r3, [r7, #6]
 8002466:	9301      	str	r3, [sp, #4]
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	2301      	movs	r3, #1
 800246e:	480c      	ldr	r0, [pc, #48]	; (80024a0 <BSP_I2C2_WriteReg+0x60>)
 8002470:	f005 fae8 	bl	8007a44 <HAL_I2C_Mem_Write>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00c      	beq.n	8002494 <BSP_I2C2_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 800247a:	4809      	ldr	r0, [pc, #36]	; (80024a0 <BSP_I2C2_WriteReg+0x60>)
 800247c:	f005 fd1d 	bl	8007eba <HAL_I2C_GetError>
 8002480:	4603      	mov	r3, r0
 8002482:	2b04      	cmp	r3, #4
 8002484:	d103      	bne.n	800248e <BSP_I2C2_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002486:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800248a:	617b      	str	r3, [r7, #20]
 800248c:	e002      	b.n	8002494 <BSP_I2C2_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800248e:	f06f 0303 	mvn.w	r3, #3
 8002492:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002494:	697b      	ldr	r3, [r7, #20]
}
 8002496:	4618      	mov	r0, r3
 8002498:	3718      	adds	r7, #24
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20000678 	.word	0x20000678

080024a4 <BSP_I2C2_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08a      	sub	sp, #40	; 0x28
 80024a8:	af04      	add	r7, sp, #16
 80024aa:	60ba      	str	r2, [r7, #8]
 80024ac:	461a      	mov	r2, r3
 80024ae:	4603      	mov	r3, r0
 80024b0:	81fb      	strh	r3, [r7, #14]
 80024b2:	460b      	mov	r3, r1
 80024b4:	81bb      	strh	r3, [r7, #12]
 80024b6:	4613      	mov	r3, r2
 80024b8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80024ba:	2300      	movs	r3, #0
 80024bc:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c2, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 80024be:	89ba      	ldrh	r2, [r7, #12]
 80024c0:	89f9      	ldrh	r1, [r7, #14]
 80024c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024c6:	9302      	str	r3, [sp, #8]
 80024c8:	88fb      	ldrh	r3, [r7, #6]
 80024ca:	9301      	str	r3, [sp, #4]
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	2301      	movs	r3, #1
 80024d2:	480c      	ldr	r0, [pc, #48]	; (8002504 <BSP_I2C2_ReadReg+0x60>)
 80024d4:	f005 fbca 	bl	8007c6c <HAL_I2C_Mem_Read>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00c      	beq.n	80024f8 <BSP_I2C2_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 80024de:	4809      	ldr	r0, [pc, #36]	; (8002504 <BSP_I2C2_ReadReg+0x60>)
 80024e0:	f005 fceb 	bl	8007eba <HAL_I2C_GetError>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	d103      	bne.n	80024f2 <BSP_I2C2_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80024ea:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80024ee:	617b      	str	r3, [r7, #20]
 80024f0:	e002      	b.n	80024f8 <BSP_I2C2_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80024f2:	f06f 0303 	mvn.w	r3, #3
 80024f6:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80024f8:	697b      	ldr	r3, [r7, #20]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	20000678 	.word	0x20000678

08002508 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800250c:	f004 fad4 	bl	8006ab8 <HAL_GetTick>
 8002510:	4603      	mov	r3, r0
}
 8002512:	4618      	mov	r0, r3
 8002514:	bd80      	pop	{r7, pc}
	...

08002518 <MX_I2C2_Init>:

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002520:	2300      	movs	r3, #0
 8002522:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C2;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a1d      	ldr	r2, [pc, #116]	; (800259c <MX_I2C2_Init+0x84>)
 8002528:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00000E14;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f640 6214 	movw	r2, #3604	; 0xe14
 8002530:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f005 f9b3 	bl	80078c8 <HAL_I2C_Init>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <MX_I2C2_Init+0x54>
  {
    ret = HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800256c:	2100      	movs	r1, #0
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f005 ff52 	bl	8008418 <HAL_I2CEx_ConfigAnalogFilter>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <MX_I2C2_Init+0x66>
  {
    ret = HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 800257e:	2100      	movs	r1, #0
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f005 ff93 	bl	80084ac <HAL_I2CEx_ConfigDigitalFilter>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <MX_I2C2_Init+0x78>
  {
    ret = HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002590:	7bfb      	ldrb	r3, [r7, #15]
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40005800 	.word	0x40005800

080025a0 <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b096      	sub	sp, #88	; 0x58
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025a8:	f107 030c 	add.w	r3, r7, #12
 80025ac:	2238      	movs	r2, #56	; 0x38
 80025ae:	2100      	movs	r1, #0
 80025b0:	4618      	mov	r0, r3
 80025b2:	f009 ff03 	bl	800c3bc <memset>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80025b6:	2380      	movs	r3, #128	; 0x80
 80025b8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80025ba:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80025be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80025c0:	f107 030c 	add.w	r3, r7, #12
 80025c4:	4618      	mov	r0, r3
 80025c6:	f007 f9fd 	bl	80099c4 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ca:	2001      	movs	r0, #1
 80025cc:	f7ff fe90 	bl	80022f0 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA12     ------> I2C2_SCL
    PA11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 80025d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025d4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025d6:	2312      	movs	r3, #18
 80025d8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025da:	2300      	movs	r3, #0
 80025dc:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025de:	2303      	movs	r3, #3
 80025e0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 80025e2:	2304      	movs	r3, #4
 80025e4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 80025e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80025ea:	4619      	mov	r1, r3
 80025ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025f0:	f004 feec 	bl	80073cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 80025f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025f8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025fa:	2312      	movs	r3, #18
 80025fc:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002602:	2303      	movs	r3, #3
 8002604:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 8002606:	2304      	movs	r3, #4
 8002608:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 800260a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800260e:	4619      	mov	r1, r3
 8002610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002614:	f004 feda 	bl	80073cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002618:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800261c:	f7ff fe80 	bl	8002320 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 8002620:	bf00      	nop
 8002622:	3758      	adds	r7, #88	; 0x58
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <I2C2_MspDeInit>:

static void I2C2_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002630:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002634:	f7ff fe8c 	bl	8002350 <LL_APB1_GRP1_DisableClock>

    /**I2C2 GPIO Configuration
    PA12     ------> I2C2_SCL
    PA11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_GPIO_PIN);
 8002638:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800263c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002640:	f005 f824 	bl	800768c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, BUS_I2C2_SDA_GPIO_PIN);
 8002644:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002648:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800264c:	f005 f81e 	bl	800768c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
}
 8002650:	bf00      	nop
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002664:	2300      	movs	r3, #0
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	e00a      	b.n	8002680 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800266a:	f3af 8000 	nop.w
 800266e:	4601      	mov	r1, r0
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	1c5a      	adds	r2, r3, #1
 8002674:	60ba      	str	r2, [r7, #8]
 8002676:	b2ca      	uxtb	r2, r1
 8002678:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	3301      	adds	r3, #1
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	429a      	cmp	r2, r3
 8002686:	dbf0      	blt.n	800266a <_read+0x12>
	}

return len;
 8002688:	687b      	ldr	r3, [r7, #4]
}
 800268a:	4618      	mov	r0, r3
 800268c:	3718      	adds	r7, #24
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b086      	sub	sp, #24
 8002696:	af00      	add	r7, sp, #0
 8002698:	60f8      	str	r0, [r7, #12]
 800269a:	60b9      	str	r1, [r7, #8]
 800269c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800269e:	2300      	movs	r3, #0
 80026a0:	617b      	str	r3, [r7, #20]
 80026a2:	e009      	b.n	80026b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	1c5a      	adds	r2, r3, #1
 80026a8:	60ba      	str	r2, [r7, #8]
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f004 f8e7 	bl	8006880 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	3301      	adds	r3, #1
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	429a      	cmp	r2, r3
 80026be:	dbf1      	blt.n	80026a4 <_write+0x12>
	}
	return len;
 80026c0:	687b      	ldr	r3, [r7, #4]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3718      	adds	r7, #24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <_close>:

int _close(int file)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
	return -1;
 80026d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr

080026e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026f0:	605a      	str	r2, [r3, #4]
	return 0;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bc80      	pop	{r7}
 80026fc:	4770      	bx	lr

080026fe <_isatty>:

int _isatty(int file)
{
 80026fe:	b480      	push	{r7}
 8002700:	b083      	sub	sp, #12
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
	return 1;
 8002706:	2301      	movs	r3, #1
}
 8002708:	4618      	mov	r0, r3
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	bc80      	pop	{r7}
 8002710:	4770      	bx	lr

08002712 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002712:	b480      	push	{r7}
 8002714:	b085      	sub	sp, #20
 8002716:	af00      	add	r7, sp, #0
 8002718:	60f8      	str	r0, [r7, #12]
 800271a:	60b9      	str	r1, [r7, #8]
 800271c:	607a      	str	r2, [r7, #4]
	return 0;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	bc80      	pop	{r7}
 8002728:	4770      	bx	lr
	...

0800272c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002734:	4a14      	ldr	r2, [pc, #80]	; (8002788 <_sbrk+0x5c>)
 8002736:	4b15      	ldr	r3, [pc, #84]	; (800278c <_sbrk+0x60>)
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002740:	4b13      	ldr	r3, [pc, #76]	; (8002790 <_sbrk+0x64>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d102      	bne.n	800274e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002748:	4b11      	ldr	r3, [pc, #68]	; (8002790 <_sbrk+0x64>)
 800274a:	4a12      	ldr	r2, [pc, #72]	; (8002794 <_sbrk+0x68>)
 800274c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800274e:	4b10      	ldr	r3, [pc, #64]	; (8002790 <_sbrk+0x64>)
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4413      	add	r3, r2
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	429a      	cmp	r2, r3
 800275a:	d207      	bcs.n	800276c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800275c:	f009 fe04 	bl	800c368 <__errno>
 8002760:	4603      	mov	r3, r0
 8002762:	220c      	movs	r2, #12
 8002764:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002766:	f04f 33ff 	mov.w	r3, #4294967295
 800276a:	e009      	b.n	8002780 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800276c:	4b08      	ldr	r3, [pc, #32]	; (8002790 <_sbrk+0x64>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002772:	4b07      	ldr	r3, [pc, #28]	; (8002790 <_sbrk+0x64>)
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4413      	add	r3, r2
 800277a:	4a05      	ldr	r2, [pc, #20]	; (8002790 <_sbrk+0x64>)
 800277c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800277e:	68fb      	ldr	r3, [r7, #12]
}
 8002780:	4618      	mov	r0, r3
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	20010000 	.word	0x20010000
 800278c:	00000800 	.word	0x00000800
 8002790:	200006c8 	.word	0x200006c8
 8002794:	20000940 	.word	0x20000940

08002798 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800279c:	bf00      	nop
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027a4:	480d      	ldr	r0, [pc, #52]	; (80027dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027a6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80027a8:	f7ff fff6 	bl	8002798 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027ac:	480c      	ldr	r0, [pc, #48]	; (80027e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80027ae:	490d      	ldr	r1, [pc, #52]	; (80027e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80027b0:	4a0d      	ldr	r2, [pc, #52]	; (80027e8 <LoopForever+0xe>)
  movs r3, #0
 80027b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027b4:	e002      	b.n	80027bc <LoopCopyDataInit>

080027b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ba:	3304      	adds	r3, #4

080027bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027c0:	d3f9      	bcc.n	80027b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027c2:	4a0a      	ldr	r2, [pc, #40]	; (80027ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80027c4:	4c0a      	ldr	r4, [pc, #40]	; (80027f0 <LoopForever+0x16>)
  movs r3, #0
 80027c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027c8:	e001      	b.n	80027ce <LoopFillZerobss>

080027ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027cc:	3204      	adds	r2, #4

080027ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027d0:	d3fb      	bcc.n	80027ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80027d2:	f009 fdcf 	bl	800c374 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027d6:	f7ff f810 	bl	80017fa <main>

080027da <LoopForever>:

LoopForever:
    b LoopForever
 80027da:	e7fe      	b.n	80027da <LoopForever>
  ldr   r0, =_estack
 80027dc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80027e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027e4:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 80027e8:	0800ed30 	.word	0x0800ed30
  ldr r2, =_sbss
 80027ec:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 80027f0:	20000940 	.word	0x20000940

080027f4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027f4:	e7fe      	b.n	80027f4 <ADC_IRQHandler>
	...

080027f8 <LSM6DSOX_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_RegisterBusIO(LSM6DSOX_Object_t *pObj, LSM6DSOX_IO_t *pIO)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSOX_OK;
 8002802:	2300      	movs	r3, #0
 8002804:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d103      	bne.n	8002814 <LSM6DSOX_RegisterBusIO+0x1c>
  {
    ret = LSM6DSOX_ERROR;
 800280c:	f04f 33ff 	mov.w	r3, #4294967295
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	e04d      	b.n	80028b0 <LSM6DSOX_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	7b1a      	ldrb	r2, [r3, #12]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	691a      	ldr	r2, [r3, #16]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	695a      	ldr	r2, [r3, #20]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	699a      	ldr	r2, [r3, #24]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a1b      	ldr	r2, [pc, #108]	; (80028bc <LSM6DSOX_RegisterBusIO+0xc4>)
 8002850:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a1a      	ldr	r2, [pc, #104]	; (80028c0 <LSM6DSOX_RegisterBusIO+0xc8>)
 8002856:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d103      	bne.n	800286e <LSM6DSOX_RegisterBusIO+0x76>
    {
      ret = LSM6DSOX_ERROR;
 8002866:	f04f 33ff 	mov.w	r3, #4294967295
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	e020      	b.n	80028b0 <LSM6DSOX_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSOX_OK)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4798      	blx	r3
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <LSM6DSOX_RegisterBusIO+0x8a>
    {
      ret = LSM6DSOX_ERROR;
 800287a:	f04f 33ff 	mov.w	r3, #4294967295
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	e016      	b.n	80028b0 <LSM6DSOX_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSOX_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	2b02      	cmp	r3, #2
 8002888:	d112      	bne.n	80028b0 <LSM6DSOX_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10d      	bne.n	80028b0 <LSM6DSOX_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8002894:	230c      	movs	r3, #12
 8002896:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSOX_Write_Reg(pObj, LSM6DSOX_CTRL3_C, data) != LSM6DSOX_OK)
 8002898:	7afb      	ldrb	r3, [r7, #11]
 800289a:	461a      	mov	r2, r3
 800289c:	2112      	movs	r1, #18
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 ff41 	bl	8003726 <LSM6DSOX_Write_Reg>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d002      	beq.n	80028b0 <LSM6DSOX_RegisterBusIO+0xb8>
          {
            ret = LSM6DSOX_ERROR;
 80028aa:	f04f 33ff 	mov.w	r3, #4294967295
 80028ae:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80028b0:	68fb      	ldr	r3, [r7, #12]
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	08003b41 	.word	0x08003b41
 80028c0:	08003b77 	.word	0x08003b77

080028c4 <LSM6DSOX_Init>:
  * @brief  Initialize the LSM6DSOX sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_Init(LSM6DSOX_Object_t *pObj)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dsox_i3c_disable_set(&(pObj->Ctx), LSM6DSOX_I3C_DISABLE) != LSM6DSOX_OK)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	331c      	adds	r3, #28
 80028d0:	2180      	movs	r1, #128	; 0x80
 80028d2:	4618      	mov	r0, r3
 80028d4:	f001 ff9f 	bl	8004816 <lsm6dsox_i3c_disable_set>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d002      	beq.n	80028e4 <LSM6DSOX_Init+0x20>
  {
    return LSM6DSOX_ERROR;
 80028de:	f04f 33ff 	mov.w	r3, #4294967295
 80028e2:	e060      	b.n	80029a6 <LSM6DSOX_Init+0xe2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsox_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSOX_OK)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	331c      	adds	r3, #28
 80028e8:	2101      	movs	r1, #1
 80028ea:	4618      	mov	r0, r3
 80028ec:	f001 ff6d 	bl	80047ca <lsm6dsox_auto_increment_set>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d002      	beq.n	80028fc <LSM6DSOX_Init+0x38>
  {
    return LSM6DSOX_ERROR;
 80028f6:	f04f 33ff 	mov.w	r3, #4294967295
 80028fa:	e054      	b.n	80029a6 <LSM6DSOX_Init+0xe2>
  }

  /* Enable BDU */
  if (lsm6dsox_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSOX_OK)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	331c      	adds	r3, #28
 8002900:	2101      	movs	r1, #1
 8002902:	4618      	mov	r0, r3
 8002904:	f001 fe0e 	bl	8004524 <lsm6dsox_block_data_update_set>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d002      	beq.n	8002914 <LSM6DSOX_Init+0x50>
  {
    return LSM6DSOX_ERROR;
 800290e:	f04f 33ff 	mov.w	r3, #4294967295
 8002912:	e048      	b.n	80029a6 <LSM6DSOX_Init+0xe2>
  }

  /* FIFO mode selection */
  if (lsm6dsox_fifo_mode_set(&(pObj->Ctx), LSM6DSOX_BYPASS_MODE) != LSM6DSOX_OK)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	331c      	adds	r3, #28
 8002918:	2100      	movs	r1, #0
 800291a:	4618      	mov	r0, r3
 800291c:	f002 f81e 	bl	800495c <lsm6dsox_fifo_mode_set>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d002      	beq.n	800292c <LSM6DSOX_Init+0x68>
  {
    return LSM6DSOX_ERROR;
 8002926:	f04f 33ff 	mov.w	r3, #4294967295
 800292a:	e03c      	b.n	80029a6 <LSM6DSOX_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSOX_XL_ODR_104Hz;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2204      	movs	r2, #4
 8002930:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsox_xl_data_rate_set(&(pObj->Ctx), LSM6DSOX_XL_ODR_OFF) != LSM6DSOX_OK)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	331c      	adds	r3, #28
 8002938:	2100      	movs	r1, #0
 800293a:	4618      	mov	r0, r3
 800293c:	f001 f9d8 	bl	8003cf0 <lsm6dsox_xl_data_rate_set>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d002      	beq.n	800294c <LSM6DSOX_Init+0x88>
  {
    return LSM6DSOX_ERROR;
 8002946:	f04f 33ff 	mov.w	r3, #4294967295
 800294a:	e02c      	b.n	80029a6 <LSM6DSOX_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dsox_xl_full_scale_set(&(pObj->Ctx), LSM6DSOX_2g) != LSM6DSOX_OK)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	331c      	adds	r3, #28
 8002950:	2100      	movs	r1, #0
 8002952:	4618      	mov	r0, r3
 8002954:	f001 f96e 	bl	8003c34 <lsm6dsox_xl_full_scale_set>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d002      	beq.n	8002964 <LSM6DSOX_Init+0xa0>
  {
    return LSM6DSOX_ERROR;
 800295e:	f04f 33ff 	mov.w	r3, #4294967295
 8002962:	e020      	b.n	80029a6 <LSM6DSOX_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSOX_GY_ODR_104Hz;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2204      	movs	r2, #4
 8002968:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsox_gy_data_rate_set(&(pObj->Ctx), LSM6DSOX_GY_ODR_OFF) != LSM6DSOX_OK)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	331c      	adds	r3, #28
 8002970:	2100      	movs	r1, #0
 8002972:	4618      	mov	r0, r3
 8002974:	f001 fc00 	bl	8004178 <lsm6dsox_gy_data_rate_set>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d002      	beq.n	8002984 <LSM6DSOX_Init+0xc0>
  {
    return LSM6DSOX_ERROR;
 800297e:	f04f 33ff 	mov.w	r3, #4294967295
 8002982:	e010      	b.n	80029a6 <LSM6DSOX_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dsox_gy_full_scale_set(&(pObj->Ctx), LSM6DSOX_2000dps) != LSM6DSOX_OK)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	331c      	adds	r3, #28
 8002988:	2106      	movs	r1, #6
 800298a:	4618      	mov	r0, r3
 800298c:	f001 fb8c 	bl	80040a8 <lsm6dsox_gy_full_scale_set>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d002      	beq.n	800299c <LSM6DSOX_Init+0xd8>
  {
    return LSM6DSOX_ERROR;
 8002996:	f04f 33ff 	mov.w	r3, #4294967295
 800299a:	e004      	b.n	80029a6 <LSM6DSOX_Init+0xe2>
  }

  pObj->is_initialized = 1;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSOX_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <LSM6DSOX_DeInit>:
  * @brief  Deinitialize the LSM6DSOX sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_DeInit(LSM6DSOX_Object_t *pObj)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b082      	sub	sp, #8
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSOX_ACC_Disable(pObj) != LSM6DSOX_OK)
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 f888 	bl	8002acc <LSM6DSOX_ACC_Disable>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d002      	beq.n	80029c8 <LSM6DSOX_DeInit+0x1a>
  {
    return LSM6DSOX_ERROR;
 80029c2:	f04f 33ff 	mov.w	r3, #4294967295
 80029c6:	e015      	b.n	80029f4 <LSM6DSOX_DeInit+0x46>
  }

  if (LSM6DSOX_GYRO_Disable(pObj) != LSM6DSOX_OK)
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 fc22 	bl	8003212 <LSM6DSOX_GYRO_Disable>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d002      	beq.n	80029da <LSM6DSOX_DeInit+0x2c>
  {
    return LSM6DSOX_ERROR;
 80029d4:	f04f 33ff 	mov.w	r3, #4294967295
 80029d8:	e00c      	b.n	80029f4 <LSM6DSOX_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSOX_XL_ODR_OFF;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSOX_GY_ODR_OFF;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSOX_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <LSM6DSOX_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_ReadID(LSM6DSOX_Object_t *pObj, uint8_t *Id)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  if (lsm6dsox_device_id_get(&(pObj->Ctx), Id) != LSM6DSOX_OK)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	331c      	adds	r3, #28
 8002a0a:	6839      	ldr	r1, [r7, #0]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f001 fe8c 	bl	800472a <lsm6dsox_device_id_get>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d002      	beq.n	8002a1e <LSM6DSOX_ReadID+0x22>
  {
    return LSM6DSOX_ERROR;
 8002a18:	f04f 33ff 	mov.w	r3, #4294967295
 8002a1c:	e000      	b.n	8002a20 <LSM6DSOX_ReadID+0x24>
  }

  return LSM6DSOX_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <LSM6DSOX_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSOX sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_GetCapabilities(LSM6DSOX_Object_t *pObj, LSM6DSOX_Capabilities_t *Capabilities)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	2201      	movs	r2, #1
 8002a36:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	2200      	movs	r2, #0
 8002a42:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	2200      	movs	r2, #0
 8002a48:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002a50:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	2210      	movs	r2, #16
 8002a56:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	4a07      	ldr	r2, [pc, #28]	; (8002a80 <LSM6DSOX_GetCapabilities+0x58>)
 8002a62:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	4a06      	ldr	r2, [pc, #24]	; (8002a80 <LSM6DSOX_GetCapabilities+0x58>)
 8002a68:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	f04f 0200 	mov.w	r2, #0
 8002a70:	619a      	str	r2, [r3, #24]
  return LSM6DSOX_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bc80      	pop	{r7}
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	45d02000 	.word	0x45d02000

08002a84 <LSM6DSOX_ACC_Enable>:
  * @brief  Enable the LSM6DSOX accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_ACC_Enable(LSM6DSOX_Object_t *pObj)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d101      	bne.n	8002a9a <LSM6DSOX_ACC_Enable+0x16>
  {
    return LSM6DSOX_OK;
 8002a96:	2300      	movs	r3, #0
 8002a98:	e014      	b.n	8002ac4 <LSM6DSOX_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsox_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSOX_OK)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f103 021c 	add.w	r2, r3, #28
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4610      	mov	r0, r2
 8002aaa:	f001 f921 	bl	8003cf0 <lsm6dsox_xl_data_rate_set>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d002      	beq.n	8002aba <LSM6DSOX_ACC_Enable+0x36>
  {
    return LSM6DSOX_ERROR;
 8002ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab8:	e004      	b.n	8002ac4 <LSM6DSOX_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSOX_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <LSM6DSOX_ACC_Disable>:
  * @brief  Disable the LSM6DSOX accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_ACC_Disable(LSM6DSOX_Object_t *pObj)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <LSM6DSOX_ACC_Disable+0x16>
  {
    return LSM6DSOX_OK;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	e01f      	b.n	8002b22 <LSM6DSOX_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsox_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSOX_OK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f103 021c 	add.w	r2, r3, #28
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	332b      	adds	r3, #43	; 0x2b
 8002aec:	4619      	mov	r1, r3
 8002aee:	4610      	mov	r0, r2
 8002af0:	f001 fa72 	bl	8003fd8 <lsm6dsox_xl_data_rate_get>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d002      	beq.n	8002b00 <LSM6DSOX_ACC_Disable+0x34>
  {
    return LSM6DSOX_ERROR;
 8002afa:	f04f 33ff 	mov.w	r3, #4294967295
 8002afe:	e010      	b.n	8002b22 <LSM6DSOX_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsox_xl_data_rate_set(&(pObj->Ctx), LSM6DSOX_XL_ODR_OFF) != LSM6DSOX_OK)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	331c      	adds	r3, #28
 8002b04:	2100      	movs	r1, #0
 8002b06:	4618      	mov	r0, r3
 8002b08:	f001 f8f2 	bl	8003cf0 <lsm6dsox_xl_data_rate_set>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d002      	beq.n	8002b18 <LSM6DSOX_ACC_Disable+0x4c>
  {
    return LSM6DSOX_ERROR;
 8002b12:	f04f 33ff 	mov.w	r3, #4294967295
 8002b16:	e004      	b.n	8002b22 <LSM6DSOX_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSOX_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
	...

08002b2c <LSM6DSOX_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_ACC_GetSensitivity(LSM6DSOX_Object_t *pObj, float *Sensitivity)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSOX_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	60fb      	str	r3, [r7, #12]
  lsm6dsox_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsox_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSOX_OK)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	331c      	adds	r3, #28
 8002b3e:	f107 020b 	add.w	r2, r7, #11
 8002b42:	4611      	mov	r1, r2
 8002b44:	4618      	mov	r0, r3
 8002b46:	f001 f89b 	bl	8003c80 <lsm6dsox_xl_full_scale_get>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d002      	beq.n	8002b56 <LSM6DSOX_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSOX_ERROR;
 8002b50:	f04f 33ff 	mov.w	r3, #4294967295
 8002b54:	e023      	b.n	8002b9e <LSM6DSOX_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8002b56:	7afb      	ldrb	r3, [r7, #11]
 8002b58:	2b03      	cmp	r3, #3
 8002b5a:	d81b      	bhi.n	8002b94 <LSM6DSOX_ACC_GetSensitivity+0x68>
 8002b5c:	a201      	add	r2, pc, #4	; (adr r2, 8002b64 <LSM6DSOX_ACC_GetSensitivity+0x38>)
 8002b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b62:	bf00      	nop
 8002b64:	08002b75 	.word	0x08002b75
 8002b68:	08002b8d 	.word	0x08002b8d
 8002b6c:	08002b7d 	.word	0x08002b7d
 8002b70:	08002b85 	.word	0x08002b85
  {
    case LSM6DSOX_2g:
      *Sensitivity = LSM6DSOX_ACC_SENSITIVITY_FS_2G;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	4a0c      	ldr	r2, [pc, #48]	; (8002ba8 <LSM6DSOX_ACC_GetSensitivity+0x7c>)
 8002b78:	601a      	str	r2, [r3, #0]
      break;
 8002b7a:	e00f      	b.n	8002b9c <LSM6DSOX_ACC_GetSensitivity+0x70>

    case LSM6DSOX_4g:
      *Sensitivity = LSM6DSOX_ACC_SENSITIVITY_FS_4G;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	4a0b      	ldr	r2, [pc, #44]	; (8002bac <LSM6DSOX_ACC_GetSensitivity+0x80>)
 8002b80:	601a      	str	r2, [r3, #0]
      break;
 8002b82:	e00b      	b.n	8002b9c <LSM6DSOX_ACC_GetSensitivity+0x70>

    case LSM6DSOX_8g:
      *Sensitivity = LSM6DSOX_ACC_SENSITIVITY_FS_8G;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	4a0a      	ldr	r2, [pc, #40]	; (8002bb0 <LSM6DSOX_ACC_GetSensitivity+0x84>)
 8002b88:	601a      	str	r2, [r3, #0]
      break;
 8002b8a:	e007      	b.n	8002b9c <LSM6DSOX_ACC_GetSensitivity+0x70>

    case LSM6DSOX_16g:
      *Sensitivity = LSM6DSOX_ACC_SENSITIVITY_FS_16G;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	4a09      	ldr	r2, [pc, #36]	; (8002bb4 <LSM6DSOX_ACC_GetSensitivity+0x88>)
 8002b90:	601a      	str	r2, [r3, #0]
      break;
 8002b92:	e003      	b.n	8002b9c <LSM6DSOX_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSOX_ERROR;
 8002b94:	f04f 33ff 	mov.w	r3, #4294967295
 8002b98:	60fb      	str	r3, [r7, #12]
      break;
 8002b9a:	bf00      	nop
  }

  return ret;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	3d79db23 	.word	0x3d79db23
 8002bac:	3df9db23 	.word	0x3df9db23
 8002bb0:	3e79db23 	.word	0x3e79db23
 8002bb4:	3ef9db23 	.word	0x3ef9db23

08002bb8 <LSM6DSOX_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_ACC_GetOutputDataRate(LSM6DSOX_Object_t *pObj, float *Odr)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSOX_OK;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]
  lsm6dsox_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsox_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSOX_OK)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	331c      	adds	r3, #28
 8002bca:	f107 020b 	add.w	r2, r7, #11
 8002bce:	4611      	mov	r1, r2
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f001 fa01 	bl	8003fd8 <lsm6dsox_xl_data_rate_get>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d002      	beq.n	8002be2 <LSM6DSOX_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSOX_ERROR;
 8002bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8002be0:	e054      	b.n	8002c8c <LSM6DSOX_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8002be2:	7afb      	ldrb	r3, [r7, #11]
 8002be4:	2b0b      	cmp	r3, #11
 8002be6:	d84c      	bhi.n	8002c82 <LSM6DSOX_ACC_GetOutputDataRate+0xca>
 8002be8:	a201      	add	r2, pc, #4	; (adr r2, 8002bf0 <LSM6DSOX_ACC_GetOutputDataRate+0x38>)
 8002bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bee:	bf00      	nop
 8002bf0:	08002c21 	.word	0x08002c21
 8002bf4:	08002c33 	.word	0x08002c33
 8002bf8:	08002c3b 	.word	0x08002c3b
 8002bfc:	08002c43 	.word	0x08002c43
 8002c00:	08002c4b 	.word	0x08002c4b
 8002c04:	08002c53 	.word	0x08002c53
 8002c08:	08002c5b 	.word	0x08002c5b
 8002c0c:	08002c63 	.word	0x08002c63
 8002c10:	08002c6b 	.word	0x08002c6b
 8002c14:	08002c73 	.word	0x08002c73
 8002c18:	08002c7b 	.word	0x08002c7b
 8002c1c:	08002c2b 	.word	0x08002c2b
  {
    case LSM6DSOX_XL_ODR_OFF:
      *Odr = 0.0f;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
      break;
 8002c28:	e02f      	b.n	8002c8a <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    case LSM6DSOX_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	4a19      	ldr	r2, [pc, #100]	; (8002c94 <LSM6DSOX_ACC_GetOutputDataRate+0xdc>)
 8002c2e:	601a      	str	r2, [r3, #0]
      break;
 8002c30:	e02b      	b.n	8002c8a <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    case LSM6DSOX_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	4a18      	ldr	r2, [pc, #96]	; (8002c98 <LSM6DSOX_ACC_GetOutputDataRate+0xe0>)
 8002c36:	601a      	str	r2, [r3, #0]
      break;
 8002c38:	e027      	b.n	8002c8a <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    case LSM6DSOX_XL_ODR_26Hz:
      *Odr = 26.0f;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	4a17      	ldr	r2, [pc, #92]	; (8002c9c <LSM6DSOX_ACC_GetOutputDataRate+0xe4>)
 8002c3e:	601a      	str	r2, [r3, #0]
      break;
 8002c40:	e023      	b.n	8002c8a <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    case LSM6DSOX_XL_ODR_52Hz:
      *Odr = 52.0f;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	4a16      	ldr	r2, [pc, #88]	; (8002ca0 <LSM6DSOX_ACC_GetOutputDataRate+0xe8>)
 8002c46:	601a      	str	r2, [r3, #0]
      break;
 8002c48:	e01f      	b.n	8002c8a <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    case LSM6DSOX_XL_ODR_104Hz:
      *Odr = 104.0f;
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	4a15      	ldr	r2, [pc, #84]	; (8002ca4 <LSM6DSOX_ACC_GetOutputDataRate+0xec>)
 8002c4e:	601a      	str	r2, [r3, #0]
      break;
 8002c50:	e01b      	b.n	8002c8a <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    case LSM6DSOX_XL_ODR_208Hz:
      *Odr = 208.0f;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	4a14      	ldr	r2, [pc, #80]	; (8002ca8 <LSM6DSOX_ACC_GetOutputDataRate+0xf0>)
 8002c56:	601a      	str	r2, [r3, #0]
      break;
 8002c58:	e017      	b.n	8002c8a <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    case LSM6DSOX_XL_ODR_417Hz:
      *Odr = 417.0f;
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	4a13      	ldr	r2, [pc, #76]	; (8002cac <LSM6DSOX_ACC_GetOutputDataRate+0xf4>)
 8002c5e:	601a      	str	r2, [r3, #0]
      break;
 8002c60:	e013      	b.n	8002c8a <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    case LSM6DSOX_XL_ODR_833Hz:
      *Odr = 833.0f;
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	4a12      	ldr	r2, [pc, #72]	; (8002cb0 <LSM6DSOX_ACC_GetOutputDataRate+0xf8>)
 8002c66:	601a      	str	r2, [r3, #0]
      break;
 8002c68:	e00f      	b.n	8002c8a <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    case LSM6DSOX_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	4a11      	ldr	r2, [pc, #68]	; (8002cb4 <LSM6DSOX_ACC_GetOutputDataRate+0xfc>)
 8002c6e:	601a      	str	r2, [r3, #0]
      break;
 8002c70:	e00b      	b.n	8002c8a <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    case LSM6DSOX_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	4a10      	ldr	r2, [pc, #64]	; (8002cb8 <LSM6DSOX_ACC_GetOutputDataRate+0x100>)
 8002c76:	601a      	str	r2, [r3, #0]
      break;
 8002c78:	e007      	b.n	8002c8a <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    case LSM6DSOX_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	4a0f      	ldr	r2, [pc, #60]	; (8002cbc <LSM6DSOX_ACC_GetOutputDataRate+0x104>)
 8002c7e:	601a      	str	r2, [r3, #0]
      break;
 8002c80:	e003      	b.n	8002c8a <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSOX_ERROR;
 8002c82:	f04f 33ff 	mov.w	r3, #4294967295
 8002c86:	60fb      	str	r3, [r7, #12]
      break;
 8002c88:	bf00      	nop
  }

  return ret;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	3fcccccd 	.word	0x3fcccccd
 8002c98:	41480000 	.word	0x41480000
 8002c9c:	41d00000 	.word	0x41d00000
 8002ca0:	42500000 	.word	0x42500000
 8002ca4:	42d00000 	.word	0x42d00000
 8002ca8:	43500000 	.word	0x43500000
 8002cac:	43d08000 	.word	0x43d08000
 8002cb0:	44504000 	.word	0x44504000
 8002cb4:	44d06000 	.word	0x44d06000
 8002cb8:	45505000 	.word	0x45505000
 8002cbc:	45d05800 	.word	0x45d05800

08002cc0 <LSM6DSOX_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_ACC_SetOutputDataRate(LSM6DSOX_Object_t *pObj, float Odr)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  return LSM6DSOX_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSOX_ACC_HIGH_PERFORMANCE_MODE);
 8002cca:	2200      	movs	r2, #0
 8002ccc:	6839      	ldr	r1, [r7, #0]
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f806 	bl	8002ce0 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode>
 8002cd4:	4603      	mov	r3, r0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
	...

08002ce0 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_ACC_SetOutputDataRate_With_Mode(LSM6DSOX_Object_t *pObj, float Odr, LSM6DSOX_ACC_Operating_Mode_t Mode)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b08c      	sub	sp, #48	; 0x30
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	4613      	mov	r3, r2
 8002cec:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSOX_OK;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	62fb      	str	r3, [r7, #44]	; 0x2c

  switch (Mode)
 8002cf2:	79fb      	ldrb	r3, [r7, #7]
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	f000 80e9 	beq.w	8002ecc <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x1ec>
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	f300 8160 	bgt.w	8002fc0 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2e0>
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d002      	beq.n	8002d0a <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2a>
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d072      	beq.n	8002dee <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x10e>
 8002d08:	e15a      	b.n	8002fc0 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2e0>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dsox_ctrl5_c_t val1;
      lsm6dsox_ctrl6_c_t val2;

      if (lsm6dsox_read_reg(&(pObj->Ctx), LSM6DSOX_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f103 001c 	add.w	r0, r3, #28
 8002d10:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d14:	2301      	movs	r3, #1
 8002d16:	2114      	movs	r1, #20
 8002d18:	f000 ff48 	bl	8003bac <lsm6dsox_read_reg>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d002      	beq.n	8002d28 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x48>
      {
        return LSM6DSOX_ERROR;
 8002d22:	f04f 33ff 	mov.w	r3, #4294967295
 8002d26:	e160      	b.n	8002fea <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x30a>
      }

      if (val1.xl_ulp_en)
 8002d28:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002d2c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d025      	beq.n	8002d82 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0xa2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d10b      	bne.n	8002d58 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x78>
        {
          if (lsm6dsox_xl_data_rate_set(&(pObj->Ctx), LSM6DSOX_XL_ODR_OFF) != LSM6DSOX_OK)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	331c      	adds	r3, #28
 8002d44:	2100      	movs	r1, #0
 8002d46:	4618      	mov	r0, r3
 8002d48:	f000 ffd2 	bl	8003cf0 <lsm6dsox_xl_data_rate_set>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d002      	beq.n	8002d58 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x78>
          {
            return LSM6DSOX_ERROR;
 8002d52:	f04f 33ff 	mov.w	r3, #4294967295
 8002d56:	e148      	b.n	8002fea <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x30a>
          }
        }

        val1.xl_ulp_en = 0;
 8002d58:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002d5c:	f36f 13c7 	bfc	r3, #7, #1
 8002d60:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        if (lsm6dsox_write_reg(&(pObj->Ctx), LSM6DSOX_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f103 001c 	add.w	r0, r3, #28
 8002d6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d6e:	2301      	movs	r3, #1
 8002d70:	2114      	movs	r1, #20
 8002d72:	f000 ff33 	bl	8003bdc <lsm6dsox_write_reg>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d002      	beq.n	8002d82 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0xa2>
        {
          return LSM6DSOX_ERROR;
 8002d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d80:	e133      	b.n	8002fea <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x30a>
        }
      }

      if (lsm6dsox_read_reg(&(pObj->Ctx), LSM6DSOX_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSOX_OK)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f103 001c 	add.w	r0, r3, #28
 8002d88:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	2115      	movs	r1, #21
 8002d90:	f000 ff0c 	bl	8003bac <lsm6dsox_read_reg>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d002      	beq.n	8002da0 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0xc0>
      {
        return LSM6DSOX_ERROR;
 8002d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d9e:	e124      	b.n	8002fea <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x30a>
      }

      if (val2.xl_hm_mode)
 8002da0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002da4:	f003 0310 	and.w	r3, r3, #16
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d014      	beq.n	8002dd8 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0xf8>
      {
        val2.xl_hm_mode = 0;
 8002dae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002db2:	f36f 1304 	bfc	r3, #4, #1
 8002db6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dsox_write_reg(&(pObj->Ctx), LSM6DSOX_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSOX_OK)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f103 001c 	add.w	r0, r3, #28
 8002dc0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	2115      	movs	r1, #21
 8002dc8:	f000 ff08 	bl	8003bdc <lsm6dsox_write_reg>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d002      	beq.n	8002dd8 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0xf8>
        {
          return LSM6DSOX_ERROR;
 8002dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd6:	e108      	b.n	8002fea <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x30a>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (Odr < 12.5f)
 8002dd8:	4986      	ldr	r1, [pc, #536]	; (8002ff4 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x314>)
 8002dda:	68b8      	ldr	r0, [r7, #8]
 8002ddc:	f7fe f9b8 	bl	8001150 <__aeabi_fcmplt>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d100      	bne.n	8002de8 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x108>
      {
        Odr = 12.5f;
      }
      break;
 8002de6:	e0ef      	b.n	8002fc8 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2e8>
        Odr = 12.5f;
 8002de8:	4b82      	ldr	r3, [pc, #520]	; (8002ff4 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x314>)
 8002dea:	60bb      	str	r3, [r7, #8]
 8002dec:	e0ec      	b.n	8002fc8 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2e8>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dsox_ctrl5_c_t val1;
      lsm6dsox_ctrl6_c_t val2;

      if (lsm6dsox_read_reg(&(pObj->Ctx), LSM6DSOX_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f103 001c 	add.w	r0, r3, #28
 8002df4:	f107 0220 	add.w	r2, r7, #32
 8002df8:	2301      	movs	r3, #1
 8002dfa:	2114      	movs	r1, #20
 8002dfc:	f000 fed6 	bl	8003bac <lsm6dsox_read_reg>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d002      	beq.n	8002e0c <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x12c>
      {
        return LSM6DSOX_ERROR;
 8002e06:	f04f 33ff 	mov.w	r3, #4294967295
 8002e0a:	e0ee      	b.n	8002fea <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x30a>
      }

      if (val1.xl_ulp_en)
 8002e0c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002e10:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d025      	beq.n	8002e66 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x186>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d10b      	bne.n	8002e3c <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x15c>
        {
          if (lsm6dsox_xl_data_rate_set(&(pObj->Ctx), LSM6DSOX_XL_ODR_OFF) != LSM6DSOX_OK)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	331c      	adds	r3, #28
 8002e28:	2100      	movs	r1, #0
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 ff60 	bl	8003cf0 <lsm6dsox_xl_data_rate_set>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d002      	beq.n	8002e3c <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x15c>
          {
            return LSM6DSOX_ERROR;
 8002e36:	f04f 33ff 	mov.w	r3, #4294967295
 8002e3a:	e0d6      	b.n	8002fea <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x30a>
          }
        }

        val1.xl_ulp_en = 0;
 8002e3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002e40:	f36f 13c7 	bfc	r3, #7, #1
 8002e44:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dsox_write_reg(&(pObj->Ctx), LSM6DSOX_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f103 001c 	add.w	r0, r3, #28
 8002e4e:	f107 0220 	add.w	r2, r7, #32
 8002e52:	2301      	movs	r3, #1
 8002e54:	2114      	movs	r1, #20
 8002e56:	f000 fec1 	bl	8003bdc <lsm6dsox_write_reg>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d002      	beq.n	8002e66 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x186>
        {
          return LSM6DSOX_ERROR;
 8002e60:	f04f 33ff 	mov.w	r3, #4294967295
 8002e64:	e0c1      	b.n	8002fea <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x30a>
        }
      }

      if (lsm6dsox_read_reg(&(pObj->Ctx), LSM6DSOX_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSOX_OK)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f103 001c 	add.w	r0, r3, #28
 8002e6c:	f107 021c 	add.w	r2, r7, #28
 8002e70:	2301      	movs	r3, #1
 8002e72:	2115      	movs	r1, #21
 8002e74:	f000 fe9a 	bl	8003bac <lsm6dsox_read_reg>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d002      	beq.n	8002e84 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x1a4>
      {
        return LSM6DSOX_ERROR;
 8002e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e82:	e0b2      	b.n	8002fea <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x30a>
      }

      if (!val2.xl_hm_mode)
 8002e84:	7f3b      	ldrb	r3, [r7, #28]
 8002e86:	f003 0310 	and.w	r3, r3, #16
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d112      	bne.n	8002eb6 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x1d6>
      {
        val2.xl_hm_mode = 1U;
 8002e90:	7f3b      	ldrb	r3, [r7, #28]
 8002e92:	f043 0310 	orr.w	r3, r3, #16
 8002e96:	773b      	strb	r3, [r7, #28]
        if (lsm6dsox_write_reg(&(pObj->Ctx), LSM6DSOX_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSOX_OK)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f103 001c 	add.w	r0, r3, #28
 8002e9e:	f107 021c 	add.w	r2, r7, #28
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	2115      	movs	r1, #21
 8002ea6:	f000 fe99 	bl	8003bdc <lsm6dsox_write_reg>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d002      	beq.n	8002eb6 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x1d6>
        {
          return LSM6DSOX_ERROR;
 8002eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8002eb4:	e099      	b.n	8002fea <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x30a>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (Odr > 208.0f)
 8002eb6:	4950      	ldr	r1, [pc, #320]	; (8002ff8 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x318>)
 8002eb8:	68b8      	ldr	r0, [r7, #8]
 8002eba:	f7fe f967 	bl	800118c <__aeabi_fcmpgt>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d100      	bne.n	8002ec6 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x1e6>
      {
        Odr = 208.0f;
      }
      break;
 8002ec4:	e080      	b.n	8002fc8 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2e8>
        Odr = 208.0f;
 8002ec6:	4b4c      	ldr	r3, [pc, #304]	; (8002ff8 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x318>)
 8002ec8:	60bb      	str	r3, [r7, #8]
 8002eca:	e07d      	b.n	8002fc8 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2e8>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dsox_ctrl5_c_t val1;
      lsm6dsox_ctrl6_c_t val2;

      if (lsm6dsox_read_reg(&(pObj->Ctx), LSM6DSOX_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSOX_OK)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f103 001c 	add.w	r0, r3, #28
 8002ed2:	f107 0214 	add.w	r2, r7, #20
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	2115      	movs	r1, #21
 8002eda:	f000 fe67 	bl	8003bac <lsm6dsox_read_reg>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d002      	beq.n	8002eea <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x20a>
      {
        return LSM6DSOX_ERROR;
 8002ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ee8:	e07f      	b.n	8002fea <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x30a>
      }

      if (val2.xl_hm_mode)
 8002eea:	7d3b      	ldrb	r3, [r7, #20]
 8002eec:	f003 0310 	and.w	r3, r3, #16
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d012      	beq.n	8002f1c <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x23c>
      {
        val2.xl_hm_mode = 0;
 8002ef6:	7d3b      	ldrb	r3, [r7, #20]
 8002ef8:	f36f 1304 	bfc	r3, #4, #1
 8002efc:	753b      	strb	r3, [r7, #20]
        if (lsm6dsox_write_reg(&(pObj->Ctx), LSM6DSOX_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSOX_OK)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f103 001c 	add.w	r0, r3, #28
 8002f04:	f107 0214 	add.w	r2, r7, #20
 8002f08:	2301      	movs	r3, #1
 8002f0a:	2115      	movs	r1, #21
 8002f0c:	f000 fe66 	bl	8003bdc <lsm6dsox_write_reg>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d002      	beq.n	8002f1c <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x23c>
        {
          return LSM6DSOX_ERROR;
 8002f16:	f04f 33ff 	mov.w	r3, #4294967295
 8002f1a:	e066      	b.n	8002fea <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x30a>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d108      	bne.n	8002f38 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x258>
      {
        if (LSM6DSOX_GYRO_Disable(pObj) != LSM6DSOX_OK)
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 f973 	bl	8003212 <LSM6DSOX_GYRO_Disable>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d002      	beq.n	8002f38 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x258>
        {
          return LSM6DSOX_ERROR;
 8002f32:	f04f 33ff 	mov.w	r3, #4294967295
 8002f36:	e058      	b.n	8002fea <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x30a>
        }
      }

      if (lsm6dsox_read_reg(&(pObj->Ctx), LSM6DSOX_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f103 001c 	add.w	r0, r3, #28
 8002f3e:	f107 0218 	add.w	r2, r7, #24
 8002f42:	2301      	movs	r3, #1
 8002f44:	2114      	movs	r1, #20
 8002f46:	f000 fe31 	bl	8003bac <lsm6dsox_read_reg>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d002      	beq.n	8002f56 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x276>
      {
        return LSM6DSOX_ERROR;
 8002f50:	f04f 33ff 	mov.w	r3, #4294967295
 8002f54:	e049      	b.n	8002fea <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x30a>
      }

      if (!val1.xl_ulp_en)
 8002f56:	7e3b      	ldrb	r3, [r7, #24]
 8002f58:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d123      	bne.n	8002faa <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2ca>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d10b      	bne.n	8002f84 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2a4>
        {
          if (lsm6dsox_xl_data_rate_set(&(pObj->Ctx), LSM6DSOX_XL_ODR_OFF) != LSM6DSOX_OK)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	331c      	adds	r3, #28
 8002f70:	2100      	movs	r1, #0
 8002f72:	4618      	mov	r0, r3
 8002f74:	f000 febc 	bl	8003cf0 <lsm6dsox_xl_data_rate_set>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d002      	beq.n	8002f84 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2a4>
          {
            return LSM6DSOX_ERROR;
 8002f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f82:	e032      	b.n	8002fea <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x30a>
          }
        }

        val1.xl_ulp_en = 1U;
 8002f84:	7e3b      	ldrb	r3, [r7, #24]
 8002f86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f8a:	763b      	strb	r3, [r7, #24]
        if (lsm6dsox_write_reg(&(pObj->Ctx), LSM6DSOX_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f103 001c 	add.w	r0, r3, #28
 8002f92:	f107 0218 	add.w	r2, r7, #24
 8002f96:	2301      	movs	r3, #1
 8002f98:	2114      	movs	r1, #20
 8002f9a:	f000 fe1f 	bl	8003bdc <lsm6dsox_write_reg>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d002      	beq.n	8002faa <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2ca>
        {
          return LSM6DSOX_ERROR;
 8002fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa8:	e01f      	b.n	8002fea <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x30a>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (Odr > 208.0f)
 8002faa:	4913      	ldr	r1, [pc, #76]	; (8002ff8 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x318>)
 8002fac:	68b8      	ldr	r0, [r7, #8]
 8002fae:	f7fe f8ed 	bl	800118c <__aeabi_fcmpgt>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d100      	bne.n	8002fba <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2da>
      {
        Odr = 208.0f;
      }
      break;
 8002fb8:	e006      	b.n	8002fc8 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2e8>
        Odr = 208.0f;
 8002fba:	4b0f      	ldr	r3, [pc, #60]	; (8002ff8 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x318>)
 8002fbc:	60bb      	str	r3, [r7, #8]
 8002fbe:	e003      	b.n	8002fc8 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2e8>
    }
    default:
      ret = LSM6DSOX_ERROR;
 8002fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8002fc6:	bf00      	nop
  }

  if (pObj->acc_is_enabled == 1U)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d105      	bne.n	8002fde <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2fe>
  {
    ret = LSM6DSOX_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8002fd2:	68b9      	ldr	r1, [r7, #8]
 8002fd4:	68f8      	ldr	r0, [r7, #12]
 8002fd6:	f000 fbc1 	bl	800375c <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled>
 8002fda:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002fdc:	e004      	b.n	8002fe8 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x308>
  }
  else
  {
    ret = LSM6DSOX_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002fde:	68b9      	ldr	r1, [r7, #8]
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 fc43 	bl	800386c <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled>
 8002fe6:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 8002fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3730      	adds	r7, #48	; 0x30
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	41480000 	.word	0x41480000
 8002ff8:	43500000 	.word	0x43500000

08002ffc <LSM6DSOX_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_ACC_GetFullScale(LSM6DSOX_Object_t *pObj, int32_t *FullScale)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSOX_OK;
 8003006:	2300      	movs	r3, #0
 8003008:	60fb      	str	r3, [r7, #12]
  lsm6dsox_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsox_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSOX_OK)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	331c      	adds	r3, #28
 800300e:	f107 020b 	add.w	r2, r7, #11
 8003012:	4611      	mov	r1, r2
 8003014:	4618      	mov	r0, r3
 8003016:	f000 fe33 	bl	8003c80 <lsm6dsox_xl_full_scale_get>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d002      	beq.n	8003026 <LSM6DSOX_ACC_GetFullScale+0x2a>
  {
    return LSM6DSOX_ERROR;
 8003020:	f04f 33ff 	mov.w	r3, #4294967295
 8003024:	e023      	b.n	800306e <LSM6DSOX_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8003026:	7afb      	ldrb	r3, [r7, #11]
 8003028:	2b03      	cmp	r3, #3
 800302a:	d81b      	bhi.n	8003064 <LSM6DSOX_ACC_GetFullScale+0x68>
 800302c:	a201      	add	r2, pc, #4	; (adr r2, 8003034 <LSM6DSOX_ACC_GetFullScale+0x38>)
 800302e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003032:	bf00      	nop
 8003034:	08003045 	.word	0x08003045
 8003038:	0800305d 	.word	0x0800305d
 800303c:	0800304d 	.word	0x0800304d
 8003040:	08003055 	.word	0x08003055
  {
    case LSM6DSOX_2g:
      *FullScale =  2;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	2202      	movs	r2, #2
 8003048:	601a      	str	r2, [r3, #0]
      break;
 800304a:	e00f      	b.n	800306c <LSM6DSOX_ACC_GetFullScale+0x70>

    case LSM6DSOX_4g:
      *FullScale =  4;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	2204      	movs	r2, #4
 8003050:	601a      	str	r2, [r3, #0]
      break;
 8003052:	e00b      	b.n	800306c <LSM6DSOX_ACC_GetFullScale+0x70>

    case LSM6DSOX_8g:
      *FullScale =  8;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	2208      	movs	r2, #8
 8003058:	601a      	str	r2, [r3, #0]
      break;
 800305a:	e007      	b.n	800306c <LSM6DSOX_ACC_GetFullScale+0x70>

    case LSM6DSOX_16g:
      *FullScale = 16;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	2210      	movs	r2, #16
 8003060:	601a      	str	r2, [r3, #0]
      break;
 8003062:	e003      	b.n	800306c <LSM6DSOX_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSOX_ERROR;
 8003064:	f04f 33ff 	mov.w	r3, #4294967295
 8003068:	60fb      	str	r3, [r7, #12]
      break;
 800306a:	bf00      	nop
  }

  return ret;
 800306c:	68fb      	ldr	r3, [r7, #12]
}
 800306e:	4618      	mov	r0, r3
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop

08003078 <LSM6DSOX_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_ACC_SetFullScale(LSM6DSOX_Object_t *pObj, int32_t FullScale)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  lsm6dsox_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSOX_2g
           : (FullScale <= 4) ? LSM6DSOX_4g
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	2b02      	cmp	r3, #2
 8003086:	dd0b      	ble.n	80030a0 <LSM6DSOX_ACC_SetFullScale+0x28>
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	2b04      	cmp	r3, #4
 800308c:	dd06      	ble.n	800309c <LSM6DSOX_ACC_SetFullScale+0x24>
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	2b08      	cmp	r3, #8
 8003092:	dc01      	bgt.n	8003098 <LSM6DSOX_ACC_SetFullScale+0x20>
 8003094:	2303      	movs	r3, #3
 8003096:	e004      	b.n	80030a2 <LSM6DSOX_ACC_SetFullScale+0x2a>
 8003098:	2301      	movs	r3, #1
 800309a:	e002      	b.n	80030a2 <LSM6DSOX_ACC_SetFullScale+0x2a>
 800309c:	2302      	movs	r3, #2
 800309e:	e000      	b.n	80030a2 <LSM6DSOX_ACC_SetFullScale+0x2a>
 80030a0:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSOX_2g
 80030a2:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSOX_8g
           :                    LSM6DSOX_16g;

  if (lsm6dsox_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSOX_OK)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	331c      	adds	r3, #28
 80030a8:	7bfa      	ldrb	r2, [r7, #15]
 80030aa:	4611      	mov	r1, r2
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 fdc1 	bl	8003c34 <lsm6dsox_xl_full_scale_set>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <LSM6DSOX_ACC_SetFullScale+0x46>
  {
    return LSM6DSOX_ERROR;
 80030b8:	f04f 33ff 	mov.w	r3, #4294967295
 80030bc:	e000      	b.n	80030c0 <LSM6DSOX_ACC_SetFullScale+0x48>
  }

  return LSM6DSOX_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <LSM6DSOX_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_ACC_GetAxesRaw(LSM6DSOX_Object_t *pObj, LSM6DSOX_AxesRaw_t *Value)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  lsm6dsox_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsox_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSOX_OK)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	331c      	adds	r3, #28
 80030d6:	f107 0208 	add.w	r2, r7, #8
 80030da:	4611      	mov	r1, r2
 80030dc:	4618      	mov	r0, r3
 80030de:	f001 fa92 	bl	8004606 <lsm6dsox_acceleration_raw_get>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d002      	beq.n	80030ee <LSM6DSOX_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSOX_ERROR;
 80030e8:	f04f 33ff 	mov.w	r3, #4294967295
 80030ec:	e00c      	b.n	8003108 <LSM6DSOX_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80030ee:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80030f6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80030fe:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	809a      	strh	r2, [r3, #4]

  return LSM6DSOX_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <LSM6DSOX_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_ACC_GetAxes(LSM6DSOX_Object_t *pObj, LSM6DSOX_Axes_t *Acceleration)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  lsm6dsox_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 800311a:	f04f 0300 	mov.w	r3, #0
 800311e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsox_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSOX_OK)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	331c      	adds	r3, #28
 8003124:	f107 0210 	add.w	r2, r7, #16
 8003128:	4611      	mov	r1, r2
 800312a:	4618      	mov	r0, r3
 800312c:	f001 fa6b 	bl	8004606 <lsm6dsox_acceleration_raw_get>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d002      	beq.n	800313c <LSM6DSOX_ACC_GetAxes+0x2c>
  {
    return LSM6DSOX_ERROR;
 8003136:	f04f 33ff 	mov.w	r3, #4294967295
 800313a:	e042      	b.n	80031c2 <LSM6DSOX_ACC_GetAxes+0xb2>
  }

  /* Get LSM6DSOX actual sensitivity. */
  if (LSM6DSOX_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSOX_OK)
 800313c:	f107 030c 	add.w	r3, r7, #12
 8003140:	4619      	mov	r1, r3
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7ff fcf2 	bl	8002b2c <LSM6DSOX_ACC_GetSensitivity>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d002      	beq.n	8003154 <LSM6DSOX_ACC_GetAxes+0x44>
  {
    return LSM6DSOX_ERROR;
 800314e:	f04f 33ff 	mov.w	r3, #4294967295
 8003152:	e036      	b.n	80031c2 <LSM6DSOX_ACC_GetAxes+0xb2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003154:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003158:	4618      	mov	r0, r3
 800315a:	f7fd fe07 	bl	8000d6c <__aeabi_i2f>
 800315e:	4602      	mov	r2, r0
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	4619      	mov	r1, r3
 8003164:	4610      	mov	r0, r2
 8003166:	f7fd fe55 	bl	8000e14 <__aeabi_fmul>
 800316a:	4603      	mov	r3, r0
 800316c:	4618      	mov	r0, r3
 800316e:	f7fe f817 	bl	80011a0 <__aeabi_f2iz>
 8003172:	4602      	mov	r2, r0
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003178:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800317c:	4618      	mov	r0, r3
 800317e:	f7fd fdf5 	bl	8000d6c <__aeabi_i2f>
 8003182:	4602      	mov	r2, r0
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4619      	mov	r1, r3
 8003188:	4610      	mov	r0, r2
 800318a:	f7fd fe43 	bl	8000e14 <__aeabi_fmul>
 800318e:	4603      	mov	r3, r0
 8003190:	4618      	mov	r0, r3
 8003192:	f7fe f805 	bl	80011a0 <__aeabi_f2iz>
 8003196:	4602      	mov	r2, r0
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800319c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7fd fde3 	bl	8000d6c <__aeabi_i2f>
 80031a6:	4602      	mov	r2, r0
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	4619      	mov	r1, r3
 80031ac:	4610      	mov	r0, r2
 80031ae:	f7fd fe31 	bl	8000e14 <__aeabi_fmul>
 80031b2:	4603      	mov	r3, r0
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7fd fff3 	bl	80011a0 <__aeabi_f2iz>
 80031ba:	4602      	mov	r2, r0
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	609a      	str	r2, [r3, #8]

  return LSM6DSOX_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3718      	adds	r7, #24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <LSM6DSOX_GYRO_Enable>:
  * @brief  Enable the LSM6DSOX gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_GYRO_Enable(LSM6DSOX_Object_t *pObj)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b082      	sub	sp, #8
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d101      	bne.n	80031e0 <LSM6DSOX_GYRO_Enable+0x16>
  {
    return LSM6DSOX_OK;
 80031dc:	2300      	movs	r3, #0
 80031de:	e014      	b.n	800320a <LSM6DSOX_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsox_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSOX_OK)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f103 021c 	add.w	r2, r3, #28
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80031ec:	4619      	mov	r1, r3
 80031ee:	4610      	mov	r0, r2
 80031f0:	f000 ffc2 	bl	8004178 <lsm6dsox_gy_data_rate_set>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d002      	beq.n	8003200 <LSM6DSOX_GYRO_Enable+0x36>
  {
    return LSM6DSOX_ERROR;
 80031fa:	f04f 33ff 	mov.w	r3, #4294967295
 80031fe:	e004      	b.n	800320a <LSM6DSOX_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSOX_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <LSM6DSOX_GYRO_Disable>:
  * @brief  Disable the LSM6DSOX gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_GYRO_Disable(LSM6DSOX_Object_t *pObj)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b082      	sub	sp, #8
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <LSM6DSOX_GYRO_Disable+0x16>
  {
    return LSM6DSOX_OK;
 8003224:	2300      	movs	r3, #0
 8003226:	e01f      	b.n	8003268 <LSM6DSOX_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsox_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSOX_OK)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f103 021c 	add.w	r2, r3, #28
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	332c      	adds	r3, #44	; 0x2c
 8003232:	4619      	mov	r1, r3
 8003234:	4610      	mov	r0, r2
 8003236:	f001 f913 	bl	8004460 <lsm6dsox_gy_data_rate_get>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d002      	beq.n	8003246 <LSM6DSOX_GYRO_Disable+0x34>
  {
    return LSM6DSOX_ERROR;
 8003240:	f04f 33ff 	mov.w	r3, #4294967295
 8003244:	e010      	b.n	8003268 <LSM6DSOX_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsox_gy_data_rate_set(&(pObj->Ctx), LSM6DSOX_GY_ODR_OFF) != LSM6DSOX_OK)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	331c      	adds	r3, #28
 800324a:	2100      	movs	r1, #0
 800324c:	4618      	mov	r0, r3
 800324e:	f000 ff93 	bl	8004178 <lsm6dsox_gy_data_rate_set>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d002      	beq.n	800325e <LSM6DSOX_GYRO_Disable+0x4c>
  {
    return LSM6DSOX_ERROR;
 8003258:	f04f 33ff 	mov.w	r3, #4294967295
 800325c:	e004      	b.n	8003268 <LSM6DSOX_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSOX_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <LSM6DSOX_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_GYRO_GetSensitivity(LSM6DSOX_Object_t *pObj, float *Sensitivity)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSOX_OK;
 800327a:	2300      	movs	r3, #0
 800327c:	60fb      	str	r3, [r7, #12]
  lsm6dsox_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsox_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSOX_OK)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	331c      	adds	r3, #28
 8003282:	f107 020b 	add.w	r2, r7, #11
 8003286:	4611      	mov	r1, r2
 8003288:	4618      	mov	r0, r3
 800328a:	f000 ff33 	bl	80040f4 <lsm6dsox_gy_full_scale_get>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d002      	beq.n	800329a <LSM6DSOX_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSOX_ERROR;
 8003294:	f04f 33ff 	mov.w	r3, #4294967295
 8003298:	e02d      	b.n	80032f6 <LSM6DSOX_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 800329a:	7afb      	ldrb	r3, [r7, #11]
 800329c:	2b06      	cmp	r3, #6
 800329e:	d825      	bhi.n	80032ec <LSM6DSOX_GYRO_GetSensitivity+0x7c>
 80032a0:	a201      	add	r2, pc, #4	; (adr r2, 80032a8 <LSM6DSOX_GYRO_GetSensitivity+0x38>)
 80032a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a6:	bf00      	nop
 80032a8:	080032cd 	.word	0x080032cd
 80032ac:	080032c5 	.word	0x080032c5
 80032b0:	080032d5 	.word	0x080032d5
 80032b4:	080032ed 	.word	0x080032ed
 80032b8:	080032dd 	.word	0x080032dd
 80032bc:	080032ed 	.word	0x080032ed
 80032c0:	080032e5 	.word	0x080032e5
  {
    case LSM6DSOX_125dps:
      *Sensitivity = LSM6DSOX_GYRO_SENSITIVITY_FS_125DPS;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	4a0e      	ldr	r2, [pc, #56]	; (8003300 <LSM6DSOX_GYRO_GetSensitivity+0x90>)
 80032c8:	601a      	str	r2, [r3, #0]
      break;
 80032ca:	e013      	b.n	80032f4 <LSM6DSOX_GYRO_GetSensitivity+0x84>

    case LSM6DSOX_250dps:
      *Sensitivity = LSM6DSOX_GYRO_SENSITIVITY_FS_250DPS;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	4a0d      	ldr	r2, [pc, #52]	; (8003304 <LSM6DSOX_GYRO_GetSensitivity+0x94>)
 80032d0:	601a      	str	r2, [r3, #0]
      break;
 80032d2:	e00f      	b.n	80032f4 <LSM6DSOX_GYRO_GetSensitivity+0x84>

    case LSM6DSOX_500dps:
      *Sensitivity = LSM6DSOX_GYRO_SENSITIVITY_FS_500DPS;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	4a0c      	ldr	r2, [pc, #48]	; (8003308 <LSM6DSOX_GYRO_GetSensitivity+0x98>)
 80032d8:	601a      	str	r2, [r3, #0]
      break;
 80032da:	e00b      	b.n	80032f4 <LSM6DSOX_GYRO_GetSensitivity+0x84>

    case LSM6DSOX_1000dps:
      *Sensitivity = LSM6DSOX_GYRO_SENSITIVITY_FS_1000DPS;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	4a0b      	ldr	r2, [pc, #44]	; (800330c <LSM6DSOX_GYRO_GetSensitivity+0x9c>)
 80032e0:	601a      	str	r2, [r3, #0]
      break;
 80032e2:	e007      	b.n	80032f4 <LSM6DSOX_GYRO_GetSensitivity+0x84>

    case LSM6DSOX_2000dps:
      *Sensitivity = LSM6DSOX_GYRO_SENSITIVITY_FS_2000DPS;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	4a0a      	ldr	r2, [pc, #40]	; (8003310 <LSM6DSOX_GYRO_GetSensitivity+0xa0>)
 80032e8:	601a      	str	r2, [r3, #0]
      break;
 80032ea:	e003      	b.n	80032f4 <LSM6DSOX_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSOX_ERROR;
 80032ec:	f04f 33ff 	mov.w	r3, #4294967295
 80032f0:	60fb      	str	r3, [r7, #12]
      break;
 80032f2:	bf00      	nop
  }

  return ret;
 80032f4:	68fb      	ldr	r3, [r7, #12]
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	408c0000 	.word	0x408c0000
 8003304:	410c0000 	.word	0x410c0000
 8003308:	418c0000 	.word	0x418c0000
 800330c:	420c0000 	.word	0x420c0000
 8003310:	428c0000 	.word	0x428c0000

08003314 <LSM6DSOX_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_GYRO_GetOutputDataRate(LSM6DSOX_Object_t *pObj, float *Odr)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSOX_OK;
 800331e:	2300      	movs	r3, #0
 8003320:	60fb      	str	r3, [r7, #12]
  lsm6dsox_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsox_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSOX_OK)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	331c      	adds	r3, #28
 8003326:	f107 020b 	add.w	r2, r7, #11
 800332a:	4611      	mov	r1, r2
 800332c:	4618      	mov	r0, r3
 800332e:	f001 f897 	bl	8004460 <lsm6dsox_gy_data_rate_get>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d002      	beq.n	800333e <LSM6DSOX_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSOX_ERROR;
 8003338:	f04f 33ff 	mov.w	r3, #4294967295
 800333c:	e04e      	b.n	80033dc <LSM6DSOX_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 800333e:	7afb      	ldrb	r3, [r7, #11]
 8003340:	2b0a      	cmp	r3, #10
 8003342:	d846      	bhi.n	80033d2 <LSM6DSOX_GYRO_GetOutputDataRate+0xbe>
 8003344:	a201      	add	r2, pc, #4	; (adr r2, 800334c <LSM6DSOX_GYRO_GetOutputDataRate+0x38>)
 8003346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334a:	bf00      	nop
 800334c:	08003379 	.word	0x08003379
 8003350:	08003383 	.word	0x08003383
 8003354:	0800338b 	.word	0x0800338b
 8003358:	08003393 	.word	0x08003393
 800335c:	0800339b 	.word	0x0800339b
 8003360:	080033a3 	.word	0x080033a3
 8003364:	080033ab 	.word	0x080033ab
 8003368:	080033b3 	.word	0x080033b3
 800336c:	080033bb 	.word	0x080033bb
 8003370:	080033c3 	.word	0x080033c3
 8003374:	080033cb 	.word	0x080033cb
  {
    case LSM6DSOX_GY_ODR_OFF:
      *Odr = 0.0f;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	f04f 0200 	mov.w	r2, #0
 800337e:	601a      	str	r2, [r3, #0]
      break;
 8003380:	e02b      	b.n	80033da <LSM6DSOX_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSOX_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	4a17      	ldr	r2, [pc, #92]	; (80033e4 <LSM6DSOX_GYRO_GetOutputDataRate+0xd0>)
 8003386:	601a      	str	r2, [r3, #0]
      break;
 8003388:	e027      	b.n	80033da <LSM6DSOX_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSOX_GY_ODR_26Hz:
      *Odr = 26.0f;
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	4a16      	ldr	r2, [pc, #88]	; (80033e8 <LSM6DSOX_GYRO_GetOutputDataRate+0xd4>)
 800338e:	601a      	str	r2, [r3, #0]
      break;
 8003390:	e023      	b.n	80033da <LSM6DSOX_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSOX_GY_ODR_52Hz:
      *Odr = 52.0f;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	4a15      	ldr	r2, [pc, #84]	; (80033ec <LSM6DSOX_GYRO_GetOutputDataRate+0xd8>)
 8003396:	601a      	str	r2, [r3, #0]
      break;
 8003398:	e01f      	b.n	80033da <LSM6DSOX_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSOX_GY_ODR_104Hz:
      *Odr = 104.0f;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	4a14      	ldr	r2, [pc, #80]	; (80033f0 <LSM6DSOX_GYRO_GetOutputDataRate+0xdc>)
 800339e:	601a      	str	r2, [r3, #0]
      break;
 80033a0:	e01b      	b.n	80033da <LSM6DSOX_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSOX_GY_ODR_208Hz:
      *Odr = 208.0f;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	4a13      	ldr	r2, [pc, #76]	; (80033f4 <LSM6DSOX_GYRO_GetOutputDataRate+0xe0>)
 80033a6:	601a      	str	r2, [r3, #0]
      break;
 80033a8:	e017      	b.n	80033da <LSM6DSOX_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSOX_GY_ODR_417Hz:
      *Odr = 417.0f;
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	4a12      	ldr	r2, [pc, #72]	; (80033f8 <LSM6DSOX_GYRO_GetOutputDataRate+0xe4>)
 80033ae:	601a      	str	r2, [r3, #0]
      break;
 80033b0:	e013      	b.n	80033da <LSM6DSOX_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSOX_GY_ODR_833Hz:
      *Odr = 833.0f;
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	4a11      	ldr	r2, [pc, #68]	; (80033fc <LSM6DSOX_GYRO_GetOutputDataRate+0xe8>)
 80033b6:	601a      	str	r2, [r3, #0]
      break;
 80033b8:	e00f      	b.n	80033da <LSM6DSOX_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSOX_GY_ODR_1667Hz:
      *Odr =  1667.0f;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	4a10      	ldr	r2, [pc, #64]	; (8003400 <LSM6DSOX_GYRO_GetOutputDataRate+0xec>)
 80033be:	601a      	str	r2, [r3, #0]
      break;
 80033c0:	e00b      	b.n	80033da <LSM6DSOX_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSOX_GY_ODR_3333Hz:
      *Odr =  3333.0f;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	4a0f      	ldr	r2, [pc, #60]	; (8003404 <LSM6DSOX_GYRO_GetOutputDataRate+0xf0>)
 80033c6:	601a      	str	r2, [r3, #0]
      break;
 80033c8:	e007      	b.n	80033da <LSM6DSOX_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSOX_GY_ODR_6667Hz:
      *Odr =  6667.0f;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	4a0e      	ldr	r2, [pc, #56]	; (8003408 <LSM6DSOX_GYRO_GetOutputDataRate+0xf4>)
 80033ce:	601a      	str	r2, [r3, #0]
      break;
 80033d0:	e003      	b.n	80033da <LSM6DSOX_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSOX_ERROR;
 80033d2:	f04f 33ff 	mov.w	r3, #4294967295
 80033d6:	60fb      	str	r3, [r7, #12]
      break;
 80033d8:	bf00      	nop
  }

  return ret;
 80033da:	68fb      	ldr	r3, [r7, #12]
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	41480000 	.word	0x41480000
 80033e8:	41d00000 	.word	0x41d00000
 80033ec:	42500000 	.word	0x42500000
 80033f0:	42d00000 	.word	0x42d00000
 80033f4:	43500000 	.word	0x43500000
 80033f8:	43d08000 	.word	0x43d08000
 80033fc:	44504000 	.word	0x44504000
 8003400:	44d06000 	.word	0x44d06000
 8003404:	45505000 	.word	0x45505000
 8003408:	45d05800 	.word	0x45d05800

0800340c <LSM6DSOX_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_GYRO_SetOutputDataRate(LSM6DSOX_Object_t *pObj, float Odr)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  return LSM6DSOX_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSOX_GYRO_HIGH_PERFORMANCE_MODE);
 8003416:	2200      	movs	r2, #0
 8003418:	6839      	ldr	r1, [r7, #0]
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f806 	bl	800342c <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode>
 8003420:	4603      	mov	r3, r0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
	...

0800342c <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_GYRO_SetOutputDataRate_With_Mode(LSM6DSOX_Object_t *pObj, float Odr,
                                                  LSM6DSOX_GYRO_Operating_Mode_t Mode)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b088      	sub	sp, #32
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	4613      	mov	r3, r2
 8003438:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSOX_OK;
 800343a:	2300      	movs	r3, #0
 800343c:	61fb      	str	r3, [r7, #28]

  switch (Mode)
 800343e:	79fb      	ldrb	r3, [r7, #7]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d002      	beq.n	800344a <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x1e>
 8003444:	2b01      	cmp	r3, #1
 8003446:	d028      	beq.n	800349a <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x6e>
 8003448:	e05a      	b.n	8003500 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0xd4>
    case LSM6DSOX_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dsox_ctrl7_g_t val1;

      if (lsm6dsox_read_reg(&(pObj->Ctx), LSM6DSOX_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f103 001c 	add.w	r0, r3, #28
 8003450:	f107 0218 	add.w	r2, r7, #24
 8003454:	2301      	movs	r3, #1
 8003456:	2116      	movs	r1, #22
 8003458:	f000 fba8 	bl	8003bac <lsm6dsox_read_reg>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d002      	beq.n	8003468 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x3c>
      {
        return LSM6DSOX_ERROR;
 8003462:	f04f 33ff 	mov.w	r3, #4294967295
 8003466:	e061      	b.n	800352c <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x100>
      }

      if (val1.g_hm_mode)
 8003468:	7e3b      	ldrb	r3, [r7, #24]
 800346a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	d049      	beq.n	8003508 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0xdc>
      {
        val1.g_hm_mode = 0;
 8003474:	7e3b      	ldrb	r3, [r7, #24]
 8003476:	f36f 13c7 	bfc	r3, #7, #1
 800347a:	763b      	strb	r3, [r7, #24]
        if (lsm6dsox_write_reg(&(pObj->Ctx), LSM6DSOX_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f103 001c 	add.w	r0, r3, #28
 8003482:	f107 0218 	add.w	r2, r7, #24
 8003486:	2301      	movs	r3, #1
 8003488:	2116      	movs	r1, #22
 800348a:	f000 fba7 	bl	8003bdc <lsm6dsox_write_reg>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d039      	beq.n	8003508 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0xdc>
        {
          return LSM6DSOX_ERROR;
 8003494:	f04f 33ff 	mov.w	r3, #4294967295
 8003498:	e048      	b.n	800352c <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x100>
    case LSM6DSOX_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dsox_ctrl7_g_t val1;

      if (lsm6dsox_read_reg(&(pObj->Ctx), LSM6DSOX_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f103 001c 	add.w	r0, r3, #28
 80034a0:	f107 0214 	add.w	r2, r7, #20
 80034a4:	2301      	movs	r3, #1
 80034a6:	2116      	movs	r1, #22
 80034a8:	f000 fb80 	bl	8003bac <lsm6dsox_read_reg>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d002      	beq.n	80034b8 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x8c>
      {
        return LSM6DSOX_ERROR;
 80034b2:	f04f 33ff 	mov.w	r3, #4294967295
 80034b6:	e039      	b.n	800352c <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x100>
      }

      if (!val1.g_hm_mode)
 80034b8:	7d3b      	ldrb	r3, [r7, #20]
 80034ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d112      	bne.n	80034ea <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0xbe>
      {
        val1.g_hm_mode = 1U;
 80034c4:	7d3b      	ldrb	r3, [r7, #20]
 80034c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034ca:	753b      	strb	r3, [r7, #20]
        if (lsm6dsox_write_reg(&(pObj->Ctx), LSM6DSOX_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f103 001c 	add.w	r0, r3, #28
 80034d2:	f107 0214 	add.w	r2, r7, #20
 80034d6:	2301      	movs	r3, #1
 80034d8:	2116      	movs	r1, #22
 80034da:	f000 fb7f 	bl	8003bdc <lsm6dsox_write_reg>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d002      	beq.n	80034ea <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0xbe>
        {
          return LSM6DSOX_ERROR;
 80034e4:	f04f 33ff 	mov.w	r3, #4294967295
 80034e8:	e020      	b.n	800352c <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x100>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (Odr > 208.0f)
 80034ea:	4912      	ldr	r1, [pc, #72]	; (8003534 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x108>)
 80034ec:	68b8      	ldr	r0, [r7, #8]
 80034ee:	f7fd fe4d 	bl	800118c <__aeabi_fcmpgt>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d100      	bne.n	80034fa <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0xce>
      {
        Odr = 208.0f;
      }
      break;
 80034f8:	e007      	b.n	800350a <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0xde>
        Odr = 208.0f;
 80034fa:	4b0e      	ldr	r3, [pc, #56]	; (8003534 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x108>)
 80034fc:	60bb      	str	r3, [r7, #8]
 80034fe:	e004      	b.n	800350a <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0xde>
    }
    default:
      ret = LSM6DSOX_ERROR;
 8003500:	f04f 33ff 	mov.w	r3, #4294967295
 8003504:	61fb      	str	r3, [r7, #28]
      break;
 8003506:	e000      	b.n	800350a <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0xde>
      break;
 8003508:	bf00      	nop
  }

  if (pObj->gyro_is_enabled == 1U)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003510:	2b01      	cmp	r3, #1
 8003512:	d105      	bne.n	8003520 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0xf4>
  {
    ret = LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8003514:	68b9      	ldr	r1, [r7, #8]
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f000 fa24 	bl	8003964 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled>
 800351c:	61f8      	str	r0, [r7, #28]
 800351e:	e004      	b.n	800352a <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0xfe>
  }
  else
  {
    ret = LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003520:	68b9      	ldr	r1, [r7, #8]
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 fa9a 	bl	8003a5c <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled>
 8003528:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 800352a:	69fb      	ldr	r3, [r7, #28]
}
 800352c:	4618      	mov	r0, r3
 800352e:	3720      	adds	r7, #32
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	43500000 	.word	0x43500000

08003538 <LSM6DSOX_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_GYRO_GetFullScale(LSM6DSOX_Object_t *pObj, int32_t  *FullScale)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSOX_OK;
 8003542:	2300      	movs	r3, #0
 8003544:	60fb      	str	r3, [r7, #12]
  lsm6dsox_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsox_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSOX_OK)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	331c      	adds	r3, #28
 800354a:	f107 020b 	add.w	r2, r7, #11
 800354e:	4611      	mov	r1, r2
 8003550:	4618      	mov	r0, r3
 8003552:	f000 fdcf 	bl	80040f4 <lsm6dsox_gy_full_scale_get>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d002      	beq.n	8003562 <LSM6DSOX_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSOX_ERROR;
 800355c:	f04f 33ff 	mov.w	r3, #4294967295
 8003560:	e030      	b.n	80035c4 <LSM6DSOX_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8003562:	7afb      	ldrb	r3, [r7, #11]
 8003564:	2b06      	cmp	r3, #6
 8003566:	d828      	bhi.n	80035ba <LSM6DSOX_GYRO_GetFullScale+0x82>
 8003568:	a201      	add	r2, pc, #4	; (adr r2, 8003570 <LSM6DSOX_GYRO_GetFullScale+0x38>)
 800356a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800356e:	bf00      	nop
 8003570:	08003595 	.word	0x08003595
 8003574:	0800358d 	.word	0x0800358d
 8003578:	0800359d 	.word	0x0800359d
 800357c:	080035bb 	.word	0x080035bb
 8003580:	080035a7 	.word	0x080035a7
 8003584:	080035bb 	.word	0x080035bb
 8003588:	080035b1 	.word	0x080035b1
  {
    case LSM6DSOX_125dps:
      *FullScale =  125;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	227d      	movs	r2, #125	; 0x7d
 8003590:	601a      	str	r2, [r3, #0]
      break;
 8003592:	e016      	b.n	80035c2 <LSM6DSOX_GYRO_GetFullScale+0x8a>

    case LSM6DSOX_250dps:
      *FullScale =  250;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	22fa      	movs	r2, #250	; 0xfa
 8003598:	601a      	str	r2, [r3, #0]
      break;
 800359a:	e012      	b.n	80035c2 <LSM6DSOX_GYRO_GetFullScale+0x8a>

    case LSM6DSOX_500dps:
      *FullScale =  500;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80035a2:	601a      	str	r2, [r3, #0]
      break;
 80035a4:	e00d      	b.n	80035c2 <LSM6DSOX_GYRO_GetFullScale+0x8a>

    case LSM6DSOX_1000dps:
      *FullScale = 1000;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80035ac:	601a      	str	r2, [r3, #0]
      break;
 80035ae:	e008      	b.n	80035c2 <LSM6DSOX_GYRO_GetFullScale+0x8a>

    case LSM6DSOX_2000dps:
      *FullScale = 2000;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80035b6:	601a      	str	r2, [r3, #0]
      break;
 80035b8:	e003      	b.n	80035c2 <LSM6DSOX_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSOX_ERROR;
 80035ba:	f04f 33ff 	mov.w	r3, #4294967295
 80035be:	60fb      	str	r3, [r7, #12]
      break;
 80035c0:	bf00      	nop
  }

  return ret;
 80035c2:	68fb      	ldr	r3, [r7, #12]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <LSM6DSOX_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_GYRO_SetFullScale(LSM6DSOX_Object_t *pObj, int32_t FullScale)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  lsm6dsox_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSOX_125dps
           : (FullScale <= 250)  ? LSM6DSOX_250dps
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	2b7d      	cmp	r3, #125	; 0x7d
 80035da:	dd12      	ble.n	8003602 <LSM6DSOX_GYRO_SetFullScale+0x36>
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	2bfa      	cmp	r3, #250	; 0xfa
 80035e0:	dd0d      	ble.n	80035fe <LSM6DSOX_GYRO_SetFullScale+0x32>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80035e8:	dd07      	ble.n	80035fa <LSM6DSOX_GYRO_SetFullScale+0x2e>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035f0:	dc01      	bgt.n	80035f6 <LSM6DSOX_GYRO_SetFullScale+0x2a>
 80035f2:	2304      	movs	r3, #4
 80035f4:	e006      	b.n	8003604 <LSM6DSOX_GYRO_SetFullScale+0x38>
 80035f6:	2306      	movs	r3, #6
 80035f8:	e004      	b.n	8003604 <LSM6DSOX_GYRO_SetFullScale+0x38>
 80035fa:	2302      	movs	r3, #2
 80035fc:	e002      	b.n	8003604 <LSM6DSOX_GYRO_SetFullScale+0x38>
 80035fe:	2300      	movs	r3, #0
 8003600:	e000      	b.n	8003604 <LSM6DSOX_GYRO_SetFullScale+0x38>
 8003602:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSOX_125dps
 8003604:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSOX_500dps
           : (FullScale <= 1000) ? LSM6DSOX_1000dps
           :                       LSM6DSOX_2000dps;

  if (lsm6dsox_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSOX_OK)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	331c      	adds	r3, #28
 800360a:	7bfa      	ldrb	r2, [r7, #15]
 800360c:	4611      	mov	r1, r2
 800360e:	4618      	mov	r0, r3
 8003610:	f000 fd4a 	bl	80040a8 <lsm6dsox_gy_full_scale_set>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d002      	beq.n	8003620 <LSM6DSOX_GYRO_SetFullScale+0x54>
  {
    return LSM6DSOX_ERROR;
 800361a:	f04f 33ff 	mov.w	r3, #4294967295
 800361e:	e000      	b.n	8003622 <LSM6DSOX_GYRO_SetFullScale+0x56>
  }

  return LSM6DSOX_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <LSM6DSOX_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_GYRO_GetAxesRaw(LSM6DSOX_Object_t *pObj, LSM6DSOX_AxesRaw_t *Value)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b084      	sub	sp, #16
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
 8003632:	6039      	str	r1, [r7, #0]
  lsm6dsox_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsox_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSOX_OK)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	331c      	adds	r3, #28
 8003638:	f107 0208 	add.w	r2, r7, #8
 800363c:	4611      	mov	r1, r2
 800363e:	4618      	mov	r0, r3
 8003640:	f000 ff96 	bl	8004570 <lsm6dsox_angular_rate_raw_get>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d002      	beq.n	8003650 <LSM6DSOX_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSOX_ERROR;
 800364a:	f04f 33ff 	mov.w	r3, #4294967295
 800364e:	e00c      	b.n	800366a <LSM6DSOX_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003650:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003658:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003660:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	809a      	strh	r2, [r3, #4]

  return LSM6DSOX_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <LSM6DSOX_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_GYRO_GetAxes(LSM6DSOX_Object_t *pObj, LSM6DSOX_Axes_t *AngularRate)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b086      	sub	sp, #24
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
 800367a:	6039      	str	r1, [r7, #0]
  lsm6dsox_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsox_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSOX_OK)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	331c      	adds	r3, #28
 8003680:	f107 0210 	add.w	r2, r7, #16
 8003684:	4611      	mov	r1, r2
 8003686:	4618      	mov	r0, r3
 8003688:	f000 ff72 	bl	8004570 <lsm6dsox_angular_rate_raw_get>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d002      	beq.n	8003698 <LSM6DSOX_GYRO_GetAxes+0x26>
  {
    return LSM6DSOX_ERROR;
 8003692:	f04f 33ff 	mov.w	r3, #4294967295
 8003696:	e042      	b.n	800371e <LSM6DSOX_GYRO_GetAxes+0xac>
  }

  /* Get LSM6DSOX actual sensitivity. */
  if (LSM6DSOX_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSOX_OK)
 8003698:	f107 030c 	add.w	r3, r7, #12
 800369c:	4619      	mov	r1, r3
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f7ff fde6 	bl	8003270 <LSM6DSOX_GYRO_GetSensitivity>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d002      	beq.n	80036b0 <LSM6DSOX_GYRO_GetAxes+0x3e>
  {
    return LSM6DSOX_ERROR;
 80036aa:	f04f 33ff 	mov.w	r3, #4294967295
 80036ae:	e036      	b.n	800371e <LSM6DSOX_GYRO_GetAxes+0xac>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80036b0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7fd fb59 	bl	8000d6c <__aeabi_i2f>
 80036ba:	4602      	mov	r2, r0
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4619      	mov	r1, r3
 80036c0:	4610      	mov	r0, r2
 80036c2:	f7fd fba7 	bl	8000e14 <__aeabi_fmul>
 80036c6:	4603      	mov	r3, r0
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7fd fd69 	bl	80011a0 <__aeabi_f2iz>
 80036ce:	4602      	mov	r2, r0
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80036d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80036d8:	4618      	mov	r0, r3
 80036da:	f7fd fb47 	bl	8000d6c <__aeabi_i2f>
 80036de:	4602      	mov	r2, r0
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4619      	mov	r1, r3
 80036e4:	4610      	mov	r0, r2
 80036e6:	f7fd fb95 	bl	8000e14 <__aeabi_fmul>
 80036ea:	4603      	mov	r3, r0
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7fd fd57 	bl	80011a0 <__aeabi_f2iz>
 80036f2:	4602      	mov	r2, r0
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80036f8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7fd fb35 	bl	8000d6c <__aeabi_i2f>
 8003702:	4602      	mov	r2, r0
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	4619      	mov	r1, r3
 8003708:	4610      	mov	r0, r2
 800370a:	f7fd fb83 	bl	8000e14 <__aeabi_fmul>
 800370e:	4603      	mov	r3, r0
 8003710:	4618      	mov	r0, r3
 8003712:	f7fd fd45 	bl	80011a0 <__aeabi_f2iz>
 8003716:	4602      	mov	r2, r0
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	609a      	str	r2, [r3, #8]

  return LSM6DSOX_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3718      	adds	r7, #24
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <LSM6DSOX_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_Write_Reg(LSM6DSOX_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b082      	sub	sp, #8
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
 800372e:	460b      	mov	r3, r1
 8003730:	70fb      	strb	r3, [r7, #3]
 8003732:	4613      	mov	r3, r2
 8003734:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsox_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSOX_OK)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f103 001c 	add.w	r0, r3, #28
 800373c:	1cba      	adds	r2, r7, #2
 800373e:	78f9      	ldrb	r1, [r7, #3]
 8003740:	2301      	movs	r3, #1
 8003742:	f000 fa4b 	bl	8003bdc <lsm6dsox_write_reg>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d002      	beq.n	8003752 <LSM6DSOX_Write_Reg+0x2c>
  {
    return LSM6DSOX_ERROR;
 800374c:	f04f 33ff 	mov.w	r3, #4294967295
 8003750:	e000      	b.n	8003754 <LSM6DSOX_Write_Reg+0x2e>
  }

  return LSM6DSOX_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_ACC_SetOutputDataRate_When_Enabled(LSM6DSOX_Object_t *pObj, float Odr)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  lsm6dsox_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSOX_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSOX_XL_ODR_12Hz5
 8003766:	4937      	ldr	r1, [pc, #220]	; (8003844 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xe8>)
 8003768:	6838      	ldr	r0, [r7, #0]
 800376a:	f7fd fcfb 	bl	8001164 <__aeabi_fcmple>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x1c>
 8003774:	230b      	movs	r3, #11
 8003776:	e051      	b.n	800381c <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8003778:	4933      	ldr	r1, [pc, #204]	; (8003848 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xec>)
 800377a:	6838      	ldr	r0, [r7, #0]
 800377c:	f7fd fcf2 	bl	8001164 <__aeabi_fcmple>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x2e>
 8003786:	2301      	movs	r3, #1
 8003788:	e048      	b.n	800381c <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xc0>
 800378a:	4930      	ldr	r1, [pc, #192]	; (800384c <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xf0>)
 800378c:	6838      	ldr	r0, [r7, #0]
 800378e:	f7fd fce9 	bl	8001164 <__aeabi_fcmple>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x40>
 8003798:	2302      	movs	r3, #2
 800379a:	e03f      	b.n	800381c <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xc0>
 800379c:	492c      	ldr	r1, [pc, #176]	; (8003850 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xf4>)
 800379e:	6838      	ldr	r0, [r7, #0]
 80037a0:	f7fd fce0 	bl	8001164 <__aeabi_fcmple>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x52>
 80037aa:	2303      	movs	r3, #3
 80037ac:	e036      	b.n	800381c <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xc0>
 80037ae:	4929      	ldr	r1, [pc, #164]	; (8003854 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xf8>)
 80037b0:	6838      	ldr	r0, [r7, #0]
 80037b2:	f7fd fcd7 	bl	8001164 <__aeabi_fcmple>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x64>
 80037bc:	2304      	movs	r3, #4
 80037be:	e02d      	b.n	800381c <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xc0>
 80037c0:	4925      	ldr	r1, [pc, #148]	; (8003858 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xfc>)
 80037c2:	6838      	ldr	r0, [r7, #0]
 80037c4:	f7fd fcce 	bl	8001164 <__aeabi_fcmple>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x76>
 80037ce:	2305      	movs	r3, #5
 80037d0:	e024      	b.n	800381c <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xc0>
 80037d2:	4922      	ldr	r1, [pc, #136]	; (800385c <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x100>)
 80037d4:	6838      	ldr	r0, [r7, #0]
 80037d6:	f7fd fcc5 	bl	8001164 <__aeabi_fcmple>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x88>
 80037e0:	2306      	movs	r3, #6
 80037e2:	e01b      	b.n	800381c <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xc0>
 80037e4:	491e      	ldr	r1, [pc, #120]	; (8003860 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x104>)
 80037e6:	6838      	ldr	r0, [r7, #0]
 80037e8:	f7fd fcbc 	bl	8001164 <__aeabi_fcmple>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x9a>
 80037f2:	2307      	movs	r3, #7
 80037f4:	e012      	b.n	800381c <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xc0>
 80037f6:	491b      	ldr	r1, [pc, #108]	; (8003864 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x108>)
 80037f8:	6838      	ldr	r0, [r7, #0]
 80037fa:	f7fd fcb3 	bl	8001164 <__aeabi_fcmple>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d001      	beq.n	8003808 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xac>
 8003804:	2308      	movs	r3, #8
 8003806:	e009      	b.n	800381c <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8003808:	4917      	ldr	r1, [pc, #92]	; (8003868 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x10c>)
 800380a:	6838      	ldr	r0, [r7, #0]
 800380c:	f7fd fcaa 	bl	8001164 <__aeabi_fcmple>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xbe>
 8003816:	2309      	movs	r3, #9
 8003818:	e000      	b.n	800381c <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xc0>
 800381a:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSOX_XL_ODR_1Hz6
 800381c:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSOX_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSOX_XL_ODR_3333Hz
            :                    LSM6DSOX_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dsox_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSOX_OK)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	331c      	adds	r3, #28
 8003822:	7bfa      	ldrb	r2, [r7, #15]
 8003824:	4611      	mov	r1, r2
 8003826:	4618      	mov	r0, r3
 8003828:	f000 fa62 	bl	8003cf0 <lsm6dsox_xl_data_rate_set>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d002      	beq.n	8003838 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xdc>
  {
    return LSM6DSOX_ERROR;
 8003832:	f04f 33ff 	mov.w	r3, #4294967295
 8003836:	e000      	b.n	800383a <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xde>
  }

  return LSM6DSOX_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	3fcccccd 	.word	0x3fcccccd
 8003848:	41480000 	.word	0x41480000
 800384c:	41d00000 	.word	0x41d00000
 8003850:	42500000 	.word	0x42500000
 8003854:	42d00000 	.word	0x42d00000
 8003858:	43500000 	.word	0x43500000
 800385c:	43d08000 	.word	0x43d08000
 8003860:	44504000 	.word	0x44504000
 8003864:	44d06000 	.word	0x44d06000
 8003868:	45505000 	.word	0x45505000

0800386c <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_ACC_SetOutputDataRate_When_Disabled(LSM6DSOX_Object_t *pObj, float Odr)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSOX_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSOX_XL_ODR_12Hz5
 8003876:	4931      	ldr	r1, [pc, #196]	; (800393c <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xd0>)
 8003878:	6838      	ldr	r0, [r7, #0]
 800387a:	f7fd fc73 	bl	8001164 <__aeabi_fcmple>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x1c>
 8003884:	230b      	movs	r3, #11
 8003886:	e051      	b.n	800392c <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8003888:	492d      	ldr	r1, [pc, #180]	; (8003940 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xd4>)
 800388a:	6838      	ldr	r0, [r7, #0]
 800388c:	f7fd fc6a 	bl	8001164 <__aeabi_fcmple>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x2e>
 8003896:	2301      	movs	r3, #1
 8003898:	e048      	b.n	800392c <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xc0>
 800389a:	492a      	ldr	r1, [pc, #168]	; (8003944 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xd8>)
 800389c:	6838      	ldr	r0, [r7, #0]
 800389e:	f7fd fc61 	bl	8001164 <__aeabi_fcmple>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x40>
 80038a8:	2302      	movs	r3, #2
 80038aa:	e03f      	b.n	800392c <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xc0>
 80038ac:	4926      	ldr	r1, [pc, #152]	; (8003948 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xdc>)
 80038ae:	6838      	ldr	r0, [r7, #0]
 80038b0:	f7fd fc58 	bl	8001164 <__aeabi_fcmple>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x52>
 80038ba:	2303      	movs	r3, #3
 80038bc:	e036      	b.n	800392c <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xc0>
 80038be:	4923      	ldr	r1, [pc, #140]	; (800394c <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xe0>)
 80038c0:	6838      	ldr	r0, [r7, #0]
 80038c2:	f7fd fc4f 	bl	8001164 <__aeabi_fcmple>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x64>
 80038cc:	2304      	movs	r3, #4
 80038ce:	e02d      	b.n	800392c <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xc0>
 80038d0:	491f      	ldr	r1, [pc, #124]	; (8003950 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xe4>)
 80038d2:	6838      	ldr	r0, [r7, #0]
 80038d4:	f7fd fc46 	bl	8001164 <__aeabi_fcmple>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x76>
 80038de:	2305      	movs	r3, #5
 80038e0:	e024      	b.n	800392c <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xc0>
 80038e2:	491c      	ldr	r1, [pc, #112]	; (8003954 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xe8>)
 80038e4:	6838      	ldr	r0, [r7, #0]
 80038e6:	f7fd fc3d 	bl	8001164 <__aeabi_fcmple>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x88>
 80038f0:	2306      	movs	r3, #6
 80038f2:	e01b      	b.n	800392c <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xc0>
 80038f4:	4918      	ldr	r1, [pc, #96]	; (8003958 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xec>)
 80038f6:	6838      	ldr	r0, [r7, #0]
 80038f8:	f7fd fc34 	bl	8001164 <__aeabi_fcmple>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x9a>
 8003902:	2307      	movs	r3, #7
 8003904:	e012      	b.n	800392c <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8003906:	4915      	ldr	r1, [pc, #84]	; (800395c <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 8003908:	6838      	ldr	r0, [r7, #0]
 800390a:	f7fd fc2b 	bl	8001164 <__aeabi_fcmple>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xac>
 8003914:	2308      	movs	r3, #8
 8003916:	e009      	b.n	800392c <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8003918:	4911      	ldr	r1, [pc, #68]	; (8003960 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 800391a:	6838      	ldr	r0, [r7, #0]
 800391c:	f7fd fc22 	bl	8001164 <__aeabi_fcmple>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xbe>
 8003926:	2309      	movs	r3, #9
 8003928:	e000      	b.n	800392c <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xc0>
 800392a:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSOX_XL_ODR_1Hz6
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                  : (Odr <=  833.0f) ? LSM6DSOX_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSOX_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSOX_XL_ODR_3333Hz
                  :                    LSM6DSOX_XL_ODR_6667Hz;

  return LSM6DSOX_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	3fcccccd 	.word	0x3fcccccd
 8003940:	41480000 	.word	0x41480000
 8003944:	41d00000 	.word	0x41d00000
 8003948:	42500000 	.word	0x42500000
 800394c:	42d00000 	.word	0x42d00000
 8003950:	43500000 	.word	0x43500000
 8003954:	43d08000 	.word	0x43d08000
 8003958:	44504000 	.word	0x44504000
 800395c:	44d06000 	.word	0x44d06000
 8003960:	45505000 	.word	0x45505000

08003964 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled(LSM6DSOX_Object_t *pObj, float Odr)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  lsm6dsox_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSOX_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSOX_GY_ODR_26Hz
 800396e:	4932      	ldr	r1, [pc, #200]	; (8003a38 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xd4>)
 8003970:	6838      	ldr	r0, [r7, #0]
 8003972:	f7fd fbf7 	bl	8001164 <__aeabi_fcmple>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0x1c>
 800397c:	2301      	movs	r3, #1
 800397e:	e048      	b.n	8003a12 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8003980:	492e      	ldr	r1, [pc, #184]	; (8003a3c <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xd8>)
 8003982:	6838      	ldr	r0, [r7, #0]
 8003984:	f7fd fbee 	bl	8001164 <__aeabi_fcmple>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0x2e>
 800398e:	2302      	movs	r3, #2
 8003990:	e03f      	b.n	8003a12 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8003992:	492b      	ldr	r1, [pc, #172]	; (8003a40 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xdc>)
 8003994:	6838      	ldr	r0, [r7, #0]
 8003996:	f7fd fbe5 	bl	8001164 <__aeabi_fcmple>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0x40>
 80039a0:	2303      	movs	r3, #3
 80039a2:	e036      	b.n	8003a12 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xae>
 80039a4:	4927      	ldr	r1, [pc, #156]	; (8003a44 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xe0>)
 80039a6:	6838      	ldr	r0, [r7, #0]
 80039a8:	f7fd fbdc 	bl	8001164 <__aeabi_fcmple>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0x52>
 80039b2:	2304      	movs	r3, #4
 80039b4:	e02d      	b.n	8003a12 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xae>
 80039b6:	4924      	ldr	r1, [pc, #144]	; (8003a48 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xe4>)
 80039b8:	6838      	ldr	r0, [r7, #0]
 80039ba:	f7fd fbd3 	bl	8001164 <__aeabi_fcmple>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0x64>
 80039c4:	2305      	movs	r3, #5
 80039c6:	e024      	b.n	8003a12 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xae>
 80039c8:	4920      	ldr	r1, [pc, #128]	; (8003a4c <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xe8>)
 80039ca:	6838      	ldr	r0, [r7, #0]
 80039cc:	f7fd fbca 	bl	8001164 <__aeabi_fcmple>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0x76>
 80039d6:	2306      	movs	r3, #6
 80039d8:	e01b      	b.n	8003a12 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xae>
 80039da:	491d      	ldr	r1, [pc, #116]	; (8003a50 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xec>)
 80039dc:	6838      	ldr	r0, [r7, #0]
 80039de:	f7fd fbc1 	bl	8001164 <__aeabi_fcmple>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0x88>
 80039e8:	2307      	movs	r3, #7
 80039ea:	e012      	b.n	8003a12 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xae>
 80039ec:	4919      	ldr	r1, [pc, #100]	; (8003a54 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xf0>)
 80039ee:	6838      	ldr	r0, [r7, #0]
 80039f0:	f7fd fbb8 	bl	8001164 <__aeabi_fcmple>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0x9a>
 80039fa:	2308      	movs	r3, #8
 80039fc:	e009      	b.n	8003a12 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xae>
 80039fe:	4916      	ldr	r1, [pc, #88]	; (8003a58 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xf4>)
 8003a00:	6838      	ldr	r0, [r7, #0]
 8003a02:	f7fd fbaf 	bl	8001164 <__aeabi_fcmple>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xac>
 8003a0c:	2309      	movs	r3, #9
 8003a0e:	e000      	b.n	8003a12 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8003a10:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSOX_GY_ODR_12Hz5
 8003a12:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSOX_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSOX_GY_ODR_3333Hz
            :                    LSM6DSOX_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dsox_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSOX_OK)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	331c      	adds	r3, #28
 8003a18:	7bfa      	ldrb	r2, [r7, #15]
 8003a1a:	4611      	mov	r1, r2
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f000 fbab 	bl	8004178 <lsm6dsox_gy_data_rate_set>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d002      	beq.n	8003a2e <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xca>
  {
    return LSM6DSOX_ERROR;
 8003a28:	f04f 33ff 	mov.w	r3, #4294967295
 8003a2c:	e000      	b.n	8003a30 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xcc>
  }

  return LSM6DSOX_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	41480000 	.word	0x41480000
 8003a3c:	41d00000 	.word	0x41d00000
 8003a40:	42500000 	.word	0x42500000
 8003a44:	42d00000 	.word	0x42d00000
 8003a48:	43500000 	.word	0x43500000
 8003a4c:	43d08000 	.word	0x43d08000
 8003a50:	44504000 	.word	0x44504000
 8003a54:	44d06000 	.word	0x44d06000
 8003a58:	45505000 	.word	0x45505000

08003a5c <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled(LSM6DSOX_Object_t *pObj, float Odr)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSOX_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSOX_GY_ODR_26Hz
 8003a66:	492d      	ldr	r1, [pc, #180]	; (8003b1c <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xc0>)
 8003a68:	6838      	ldr	r0, [r7, #0]
 8003a6a:	f7fd fb7b 	bl	8001164 <__aeabi_fcmple>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0x1c>
 8003a74:	2301      	movs	r3, #1
 8003a76:	e048      	b.n	8003b0a <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8003a78:	4929      	ldr	r1, [pc, #164]	; (8003b20 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xc4>)
 8003a7a:	6838      	ldr	r0, [r7, #0]
 8003a7c:	f7fd fb72 	bl	8001164 <__aeabi_fcmple>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0x2e>
 8003a86:	2302      	movs	r3, #2
 8003a88:	e03f      	b.n	8003b0a <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8003a8a:	4926      	ldr	r1, [pc, #152]	; (8003b24 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xc8>)
 8003a8c:	6838      	ldr	r0, [r7, #0]
 8003a8e:	f7fd fb69 	bl	8001164 <__aeabi_fcmple>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0x40>
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e036      	b.n	8003b0a <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8003a9c:	4922      	ldr	r1, [pc, #136]	; (8003b28 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xcc>)
 8003a9e:	6838      	ldr	r0, [r7, #0]
 8003aa0:	f7fd fb60 	bl	8001164 <__aeabi_fcmple>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0x52>
 8003aaa:	2304      	movs	r3, #4
 8003aac:	e02d      	b.n	8003b0a <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8003aae:	491f      	ldr	r1, [pc, #124]	; (8003b2c <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xd0>)
 8003ab0:	6838      	ldr	r0, [r7, #0]
 8003ab2:	f7fd fb57 	bl	8001164 <__aeabi_fcmple>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8003abc:	2305      	movs	r3, #5
 8003abe:	e024      	b.n	8003b0a <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8003ac0:	491b      	ldr	r1, [pc, #108]	; (8003b30 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xd4>)
 8003ac2:	6838      	ldr	r0, [r7, #0]
 8003ac4:	f7fd fb4e 	bl	8001164 <__aeabi_fcmple>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0x76>
 8003ace:	2306      	movs	r3, #6
 8003ad0:	e01b      	b.n	8003b0a <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8003ad2:	4918      	ldr	r1, [pc, #96]	; (8003b34 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xd8>)
 8003ad4:	6838      	ldr	r0, [r7, #0]
 8003ad6:	f7fd fb45 	bl	8001164 <__aeabi_fcmple>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0x88>
 8003ae0:	2307      	movs	r3, #7
 8003ae2:	e012      	b.n	8003b0a <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8003ae4:	4914      	ldr	r1, [pc, #80]	; (8003b38 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xdc>)
 8003ae6:	6838      	ldr	r0, [r7, #0]
 8003ae8:	f7fd fb3c 	bl	8001164 <__aeabi_fcmple>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0x9a>
 8003af2:	2308      	movs	r3, #8
 8003af4:	e009      	b.n	8003b0a <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8003af6:	4911      	ldr	r1, [pc, #68]	; (8003b3c <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xe0>)
 8003af8:	6838      	ldr	r0, [r7, #0]
 8003afa:	f7fd fb33 	bl	8001164 <__aeabi_fcmple>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xac>
 8003b04:	2309      	movs	r3, #9
 8003b06:	e000      	b.n	8003b0a <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8003b08:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSOX_GY_ODR_12Hz5
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                   : (Odr <=  833.0f) ? LSM6DSOX_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSOX_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSOX_GY_ODR_3333Hz
                   :                    LSM6DSOX_GY_ODR_6667Hz;

  return LSM6DSOX_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	41480000 	.word	0x41480000
 8003b20:	41d00000 	.word	0x41d00000
 8003b24:	42500000 	.word	0x42500000
 8003b28:	42d00000 	.word	0x42d00000
 8003b2c:	43500000 	.word	0x43500000
 8003b30:	43d08000 	.word	0x43d08000
 8003b34:	44504000 	.word	0x44504000
 8003b38:	44d06000 	.word	0x44d06000
 8003b3c:	45505000 	.word	0x45505000

08003b40 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003b40:	b590      	push	{r4, r7, lr}
 8003b42:	b087      	sub	sp, #28
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	607a      	str	r2, [r7, #4]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	72fb      	strb	r3, [r7, #11]
 8003b50:	4613      	mov	r3, r2
 8003b52:	813b      	strh	r3, [r7, #8]
  LSM6DSOX_Object_t *pObj = (LSM6DSOX_Object_t *)Handle;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	695c      	ldr	r4, [r3, #20]
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	7b1b      	ldrb	r3, [r3, #12]
 8003b60:	b298      	uxth	r0, r3
 8003b62:	7afb      	ldrb	r3, [r7, #11]
 8003b64:	b299      	uxth	r1, r3
 8003b66:	893b      	ldrh	r3, [r7, #8]
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	47a0      	blx	r4
 8003b6c:	4603      	mov	r3, r0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	371c      	adds	r7, #28
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd90      	pop	{r4, r7, pc}

08003b76 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003b76:	b590      	push	{r4, r7, lr}
 8003b78:	b087      	sub	sp, #28
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	60f8      	str	r0, [r7, #12]
 8003b7e:	607a      	str	r2, [r7, #4]
 8003b80:	461a      	mov	r2, r3
 8003b82:	460b      	mov	r3, r1
 8003b84:	72fb      	strb	r3, [r7, #11]
 8003b86:	4613      	mov	r3, r2
 8003b88:	813b      	strh	r3, [r7, #8]
  LSM6DSOX_Object_t *pObj = (LSM6DSOX_Object_t *)Handle;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	691c      	ldr	r4, [r3, #16]
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	7b1b      	ldrb	r3, [r3, #12]
 8003b96:	b298      	uxth	r0, r3
 8003b98:	7afb      	ldrb	r3, [r7, #11]
 8003b9a:	b299      	uxth	r1, r3
 8003b9c:	893b      	ldrh	r3, [r7, #8]
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	47a0      	blx	r4
 8003ba2:	4603      	mov	r3, r0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	371c      	adds	r7, #28
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd90      	pop	{r4, r7, pc}

08003bac <lsm6dsox_read_reg>:
  *
  */
int32_t lsm6dsox_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8003bac:	b590      	push	{r4, r7, lr}
 8003bae:	b087      	sub	sp, #28
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	607a      	str	r2, [r7, #4]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	460b      	mov	r3, r1
 8003bba:	72fb      	strb	r3, [r7, #11]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	685c      	ldr	r4, [r3, #4]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6898      	ldr	r0, [r3, #8]
 8003bc8:	893b      	ldrh	r3, [r7, #8]
 8003bca:	7af9      	ldrb	r1, [r7, #11]
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	47a0      	blx	r4
 8003bd0:	6178      	str	r0, [r7, #20]

  return ret;
 8003bd2:	697b      	ldr	r3, [r7, #20]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	371c      	adds	r7, #28
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd90      	pop	{r4, r7, pc}

08003bdc <lsm6dsox_write_reg>:
  *
  */
int32_t lsm6dsox_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8003bdc:	b590      	push	{r4, r7, lr}
 8003bde:	b087      	sub	sp, #28
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	607a      	str	r2, [r7, #4]
 8003be6:	461a      	mov	r2, r3
 8003be8:	460b      	mov	r3, r1
 8003bea:	72fb      	strb	r3, [r7, #11]
 8003bec:	4613      	mov	r3, r2
 8003bee:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681c      	ldr	r4, [r3, #0]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6898      	ldr	r0, [r3, #8]
 8003bf8:	893b      	ldrh	r3, [r7, #8]
 8003bfa:	7af9      	ldrb	r1, [r7, #11]
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	47a0      	blx	r4
 8003c00:	6178      	str	r0, [r7, #20]

  return ret;
 8003c02:	697b      	ldr	r3, [r7, #20]
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	371c      	adds	r7, #28
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd90      	pop	{r4, r7, pc}

08003c0c <bytecpy>:
  * @{
  *
  */

static void bytecpy(uint8_t *target, uint8_t *source)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  if ((target != NULL) && (source != NULL))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d006      	beq.n	8003c2a <bytecpy+0x1e>
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d003      	beq.n	8003c2a <bytecpy+0x1e>
  {
    *target = *source;
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	781a      	ldrb	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	701a      	strb	r2, [r3, #0]
  }
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bc80      	pop	{r7}
 8003c32:	4770      	bx	lr

08003c34 <lsm6dsox_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_xl_full_scale_set(stmdev_ctx_t *ctx,
                                   lsm6dsox_fs_xl_t val)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 8003c40:	f107 0208 	add.w	r2, r7, #8
 8003c44:	2301      	movs	r3, #1
 8003c46:	2110      	movs	r1, #16
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f7ff ffaf 	bl	8003bac <lsm6dsox_read_reg>
 8003c4e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10f      	bne.n	8003c76 <lsm6dsox_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8003c56:	78fb      	ldrb	r3, [r7, #3]
 8003c58:	f003 0303 	and.w	r3, r3, #3
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	7a3b      	ldrb	r3, [r7, #8]
 8003c60:	f362 0383 	bfi	r3, r2, #2, #2
 8003c64:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 8003c66:	f107 0208 	add.w	r2, r7, #8
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	2110      	movs	r1, #16
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7ff ffb4 	bl	8003bdc <lsm6dsox_write_reg>
 8003c74:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003c76:	68fb      	ldr	r3, [r7, #12]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3710      	adds	r7, #16
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <lsm6dsox_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_xl_full_scale_get(stmdev_ctx_t *ctx,
                                   lsm6dsox_fs_xl_t *val)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  lsm6dsox_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 8003c8a:	f107 0208 	add.w	r2, r7, #8
 8003c8e:	2301      	movs	r3, #1
 8003c90:	2110      	movs	r1, #16
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7ff ff8a 	bl	8003bac <lsm6dsox_read_reg>
 8003c98:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 8003c9a:	7a3b      	ldrb	r3, [r7, #8]
 8003c9c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b03      	cmp	r3, #3
 8003ca4:	d81a      	bhi.n	8003cdc <lsm6dsox_xl_full_scale_get+0x5c>
 8003ca6:	a201      	add	r2, pc, #4	; (adr r2, 8003cac <lsm6dsox_xl_full_scale_get+0x2c>)
 8003ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cac:	08003cbd 	.word	0x08003cbd
 8003cb0:	08003cc5 	.word	0x08003cc5
 8003cb4:	08003ccd 	.word	0x08003ccd
 8003cb8:	08003cd5 	.word	0x08003cd5
  {
    case LSM6DSOX_2g:
      *val = LSM6DSOX_2g;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	701a      	strb	r2, [r3, #0]
      break;
 8003cc2:	e00f      	b.n	8003ce4 <lsm6dsox_xl_full_scale_get+0x64>

    case LSM6DSOX_16g:
      *val = LSM6DSOX_16g;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	701a      	strb	r2, [r3, #0]
      break;
 8003cca:	e00b      	b.n	8003ce4 <lsm6dsox_xl_full_scale_get+0x64>

    case LSM6DSOX_4g:
      *val = LSM6DSOX_4g;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	2202      	movs	r2, #2
 8003cd0:	701a      	strb	r2, [r3, #0]
      break;
 8003cd2:	e007      	b.n	8003ce4 <lsm6dsox_xl_full_scale_get+0x64>

    case LSM6DSOX_8g:
      *val = LSM6DSOX_8g;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	2203      	movs	r2, #3
 8003cd8:	701a      	strb	r2, [r3, #0]
      break;
 8003cda:	e003      	b.n	8003ce4 <lsm6dsox_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSOX_2g;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	701a      	strb	r2, [r3, #0]
      break;
 8003ce2:	bf00      	nop
  }

  return ret;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop

08003cf0 <lsm6dsox_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_xl_data_rate_set(stmdev_ctx_t *ctx,
                                  lsm6dsox_odr_xl_t val)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b088      	sub	sp, #32
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_odr_xl_t odr_xl =  val;
 8003cfc:	78fb      	ldrb	r3, [r7, #3]
 8003cfe:	77fb      	strb	r3, [r7, #31]
  lsm6dsox_mlc_odr_t mlc_odr;
  lsm6dsox_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsox_fsm_enable_get(ctx, &fsm_enable);
 8003d00:	f107 0314 	add.w	r3, r7, #20
 8003d04:	4619      	mov	r1, r3
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 fe4e 	bl	80049a8 <lsm6dsox_fsm_enable_get>
 8003d0c:	61b8      	str	r0, [r7, #24]

  if (ret == 0)
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f040 80c4 	bne.w	8003e9e <lsm6dsox_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8003d16:	7d3b      	ldrb	r3, [r7, #20]
 8003d18:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003d1c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8003d1e:	7d3b      	ldrb	r3, [r7, #20]
 8003d20:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003d24:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8003d26:	4313      	orrs	r3, r2
 8003d28:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8003d2a:	7d3b      	ldrb	r3, [r7, #20]
 8003d2c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003d30:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8003d32:	4313      	orrs	r3, r2
 8003d34:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8003d36:	7d3b      	ldrb	r3, [r7, #20]
 8003d38:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003d3c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8003d42:	7d3b      	ldrb	r3, [r7, #20]
 8003d44:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003d48:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8003d4e:	7d3b      	ldrb	r3, [r7, #20]
 8003d50:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003d54:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8003d56:	4313      	orrs	r3, r2
 8003d58:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8003d5a:	7d3b      	ldrb	r3, [r7, #20]
 8003d5c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003d60:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8003d62:	4313      	orrs	r3, r2
 8003d64:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8003d66:	7d3b      	ldrb	r3, [r7, #20]
 8003d68:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003d6c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8003d72:	7d7b      	ldrb	r3, [r7, #21]
 8003d74:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003d78:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8003d7e:	7d7b      	ldrb	r3, [r7, #21]
 8003d80:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003d84:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8003d86:	4313      	orrs	r3, r2
 8003d88:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8003d8a:	7d7b      	ldrb	r3, [r7, #21]
 8003d8c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003d90:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8003d92:	4313      	orrs	r3, r2
 8003d94:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8003d96:	7d7b      	ldrb	r3, [r7, #21]
 8003d98:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003d9c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8003da2:	7d7b      	ldrb	r3, [r7, #21]
 8003da4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003da8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8003daa:	4313      	orrs	r3, r2
 8003dac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8003dae:	7d7b      	ldrb	r3, [r7, #21]
 8003db0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003db4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8003db6:	4313      	orrs	r3, r2
 8003db8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8003dba:	7d7b      	ldrb	r3, [r7, #21]
 8003dbc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003dc0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8003dc6:	7d7b      	ldrb	r3, [r7, #21]
 8003dc8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003dcc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d163      	bne.n	8003e9e <lsm6dsox_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsox_fsm_data_rate_get(ctx, &fsm_odr);
 8003dd6:	f107 0313 	add.w	r3, r7, #19
 8003dda:	4619      	mov	r1, r3
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 fe05 	bl	80049ec <lsm6dsox_fsm_data_rate_get>
 8003de2:	61b8      	str	r0, [r7, #24]

      if (ret == 0)
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d159      	bne.n	8003e9e <lsm6dsox_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8003dea:	7cfb      	ldrb	r3, [r7, #19]
 8003dec:	2b03      	cmp	r3, #3
 8003dee:	d853      	bhi.n	8003e98 <lsm6dsox_xl_data_rate_set+0x1a8>
 8003df0:	a201      	add	r2, pc, #4	; (adr r2, 8003df8 <lsm6dsox_xl_data_rate_set+0x108>)
 8003df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df6:	bf00      	nop
 8003df8:	08003e09 	.word	0x08003e09
 8003dfc:	08003e1b 	.word	0x08003e1b
 8003e00:	08003e39 	.word	0x08003e39
 8003e04:	08003e63 	.word	0x08003e63
        {
          case LSM6DSOX_ODR_FSM_12Hz5:
            if (val == LSM6DSOX_XL_ODR_OFF)
 8003e08:	78fb      	ldrb	r3, [r7, #3]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d102      	bne.n	8003e14 <lsm6dsox_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSOX_XL_ODR_12Hz5;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 8003e12:	e045      	b.n	8003ea0 <lsm6dsox_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8003e14:	78fb      	ldrb	r3, [r7, #3]
 8003e16:	77fb      	strb	r3, [r7, #31]
            break;
 8003e18:	e042      	b.n	8003ea0 <lsm6dsox_xl_data_rate_set+0x1b0>

          case LSM6DSOX_ODR_FSM_26Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 8003e1a:	78fb      	ldrb	r3, [r7, #3]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d102      	bne.n	8003e26 <lsm6dsox_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSOX_XL_ODR_26Hz;
 8003e20:	2302      	movs	r3, #2
 8003e22:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 8003e24:	e03c      	b.n	8003ea0 <lsm6dsox_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 8003e26:	78fb      	ldrb	r3, [r7, #3]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d102      	bne.n	8003e32 <lsm6dsox_xl_data_rate_set+0x142>
              odr_xl = LSM6DSOX_XL_ODR_26Hz;
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	77fb      	strb	r3, [r7, #31]
            break;
 8003e30:	e036      	b.n	8003ea0 <lsm6dsox_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8003e32:	78fb      	ldrb	r3, [r7, #3]
 8003e34:	77fb      	strb	r3, [r7, #31]
            break;
 8003e36:	e033      	b.n	8003ea0 <lsm6dsox_xl_data_rate_set+0x1b0>

          case LSM6DSOX_ODR_FSM_52Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 8003e38:	78fb      	ldrb	r3, [r7, #3]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d102      	bne.n	8003e44 <lsm6dsox_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 8003e42:	e02d      	b.n	8003ea0 <lsm6dsox_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 8003e44:	78fb      	ldrb	r3, [r7, #3]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d102      	bne.n	8003e50 <lsm6dsox_xl_data_rate_set+0x160>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	77fb      	strb	r3, [r7, #31]
            break;
 8003e4e:	e027      	b.n	8003ea0 <lsm6dsox_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_XL_ODR_26Hz)
 8003e50:	78fb      	ldrb	r3, [r7, #3]
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d102      	bne.n	8003e5c <lsm6dsox_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 8003e56:	2303      	movs	r3, #3
 8003e58:	77fb      	strb	r3, [r7, #31]
            break;
 8003e5a:	e021      	b.n	8003ea0 <lsm6dsox_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8003e5c:	78fb      	ldrb	r3, [r7, #3]
 8003e5e:	77fb      	strb	r3, [r7, #31]
            break;
 8003e60:	e01e      	b.n	8003ea0 <lsm6dsox_xl_data_rate_set+0x1b0>

          case LSM6DSOX_ODR_FSM_104Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 8003e62:	78fb      	ldrb	r3, [r7, #3]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d102      	bne.n	8003e6e <lsm6dsox_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8003e68:	2304      	movs	r3, #4
 8003e6a:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 8003e6c:	e018      	b.n	8003ea0 <lsm6dsox_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 8003e6e:	78fb      	ldrb	r3, [r7, #3]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d102      	bne.n	8003e7a <lsm6dsox_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8003e74:	2304      	movs	r3, #4
 8003e76:	77fb      	strb	r3, [r7, #31]
            break;
 8003e78:	e012      	b.n	8003ea0 <lsm6dsox_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_XL_ODR_26Hz)
 8003e7a:	78fb      	ldrb	r3, [r7, #3]
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d102      	bne.n	8003e86 <lsm6dsox_xl_data_rate_set+0x196>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8003e80:	2304      	movs	r3, #4
 8003e82:	77fb      	strb	r3, [r7, #31]
            break;
 8003e84:	e00c      	b.n	8003ea0 <lsm6dsox_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_XL_ODR_52Hz)
 8003e86:	78fb      	ldrb	r3, [r7, #3]
 8003e88:	2b03      	cmp	r3, #3
 8003e8a:	d102      	bne.n	8003e92 <lsm6dsox_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8003e8c:	2304      	movs	r3, #4
 8003e8e:	77fb      	strb	r3, [r7, #31]
            break;
 8003e90:	e006      	b.n	8003ea0 <lsm6dsox_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8003e92:	78fb      	ldrb	r3, [r7, #3]
 8003e94:	77fb      	strb	r3, [r7, #31]
            break;
 8003e96:	e003      	b.n	8003ea0 <lsm6dsox_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8003e98:	78fb      	ldrb	r3, [r7, #3]
 8003e9a:	77fb      	strb	r3, [r7, #31]
            break;
 8003e9c:	e000      	b.n	8003ea0 <lsm6dsox_xl_data_rate_set+0x1b0>
        }
      }
 8003e9e:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  emb_sens.mlc = PROPERTY_DISABLE;
 8003ea0:	7c3b      	ldrb	r3, [r7, #16]
 8003ea2:	f36f 03c3 	bfc	r3, #3, #1
 8003ea6:	743b      	strb	r3, [r7, #16]

  if (ret == 0)
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d16f      	bne.n	8003f8e <lsm6dsox_xl_data_rate_set+0x29e>
  {
    lsm6dsox_embedded_sens_get(ctx, &emb_sens);
 8003eae:	f107 0310 	add.w	r3, r7, #16
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f002 fa83 	bl	80063c0 <lsm6dsox_embedded_sens_get>

    if (emb_sens.mlc == PROPERTY_ENABLE)
 8003eba:	7c3b      	ldrb	r3, [r7, #16]
 8003ebc:	f003 0308 	and.w	r3, r3, #8
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d063      	beq.n	8003f8e <lsm6dsox_xl_data_rate_set+0x29e>
    {
      ret =  lsm6dsox_mlc_data_rate_get(ctx, &mlc_odr);
 8003ec6:	f107 030f 	add.w	r3, r7, #15
 8003eca:	4619      	mov	r1, r3
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 fdd5 	bl	8004a7c <lsm6dsox_mlc_data_rate_get>
 8003ed2:	61b8      	str	r0, [r7, #24]

      if (ret == 0)
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d159      	bne.n	8003f8e <lsm6dsox_xl_data_rate_set+0x29e>
      {
        switch (mlc_odr)
 8003eda:	7bfb      	ldrb	r3, [r7, #15]
 8003edc:	2b03      	cmp	r3, #3
 8003ede:	d853      	bhi.n	8003f88 <lsm6dsox_xl_data_rate_set+0x298>
 8003ee0:	a201      	add	r2, pc, #4	; (adr r2, 8003ee8 <lsm6dsox_xl_data_rate_set+0x1f8>)
 8003ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee6:	bf00      	nop
 8003ee8:	08003ef9 	.word	0x08003ef9
 8003eec:	08003f0b 	.word	0x08003f0b
 8003ef0:	08003f29 	.word	0x08003f29
 8003ef4:	08003f53 	.word	0x08003f53
        {
          case LSM6DSOX_ODR_PRGS_12Hz5:
            if (val == LSM6DSOX_XL_ODR_OFF)
 8003ef8:	78fb      	ldrb	r3, [r7, #3]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d102      	bne.n	8003f04 <lsm6dsox_xl_data_rate_set+0x214>
            {
              odr_xl = LSM6DSOX_XL_ODR_12Hz5;
 8003efe:	2301      	movs	r3, #1
 8003f00:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 8003f02:	e045      	b.n	8003f90 <lsm6dsox_xl_data_rate_set+0x2a0>
              odr_xl = val;
 8003f04:	78fb      	ldrb	r3, [r7, #3]
 8003f06:	77fb      	strb	r3, [r7, #31]
            break;
 8003f08:	e042      	b.n	8003f90 <lsm6dsox_xl_data_rate_set+0x2a0>

          case LSM6DSOX_ODR_PRGS_26Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 8003f0a:	78fb      	ldrb	r3, [r7, #3]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d102      	bne.n	8003f16 <lsm6dsox_xl_data_rate_set+0x226>
            {
              odr_xl = LSM6DSOX_XL_ODR_26Hz;
 8003f10:	2302      	movs	r3, #2
 8003f12:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 8003f14:	e03c      	b.n	8003f90 <lsm6dsox_xl_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 8003f16:	78fb      	ldrb	r3, [r7, #3]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d102      	bne.n	8003f22 <lsm6dsox_xl_data_rate_set+0x232>
              odr_xl = LSM6DSOX_XL_ODR_26Hz;
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	77fb      	strb	r3, [r7, #31]
            break;
 8003f20:	e036      	b.n	8003f90 <lsm6dsox_xl_data_rate_set+0x2a0>
              odr_xl = val;
 8003f22:	78fb      	ldrb	r3, [r7, #3]
 8003f24:	77fb      	strb	r3, [r7, #31]
            break;
 8003f26:	e033      	b.n	8003f90 <lsm6dsox_xl_data_rate_set+0x2a0>

          case LSM6DSOX_ODR_PRGS_52Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 8003f28:	78fb      	ldrb	r3, [r7, #3]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d102      	bne.n	8003f34 <lsm6dsox_xl_data_rate_set+0x244>
            {
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 8003f32:	e02d      	b.n	8003f90 <lsm6dsox_xl_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 8003f34:	78fb      	ldrb	r3, [r7, #3]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d102      	bne.n	8003f40 <lsm6dsox_xl_data_rate_set+0x250>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	77fb      	strb	r3, [r7, #31]
            break;
 8003f3e:	e027      	b.n	8003f90 <lsm6dsox_xl_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_XL_ODR_26Hz)
 8003f40:	78fb      	ldrb	r3, [r7, #3]
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d102      	bne.n	8003f4c <lsm6dsox_xl_data_rate_set+0x25c>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 8003f46:	2303      	movs	r3, #3
 8003f48:	77fb      	strb	r3, [r7, #31]
            break;
 8003f4a:	e021      	b.n	8003f90 <lsm6dsox_xl_data_rate_set+0x2a0>
              odr_xl = val;
 8003f4c:	78fb      	ldrb	r3, [r7, #3]
 8003f4e:	77fb      	strb	r3, [r7, #31]
            break;
 8003f50:	e01e      	b.n	8003f90 <lsm6dsox_xl_data_rate_set+0x2a0>

          case LSM6DSOX_ODR_PRGS_104Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 8003f52:	78fb      	ldrb	r3, [r7, #3]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d102      	bne.n	8003f5e <lsm6dsox_xl_data_rate_set+0x26e>
            {
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8003f58:	2304      	movs	r3, #4
 8003f5a:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 8003f5c:	e018      	b.n	8003f90 <lsm6dsox_xl_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 8003f5e:	78fb      	ldrb	r3, [r7, #3]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d102      	bne.n	8003f6a <lsm6dsox_xl_data_rate_set+0x27a>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8003f64:	2304      	movs	r3, #4
 8003f66:	77fb      	strb	r3, [r7, #31]
            break;
 8003f68:	e012      	b.n	8003f90 <lsm6dsox_xl_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_XL_ODR_26Hz)
 8003f6a:	78fb      	ldrb	r3, [r7, #3]
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d102      	bne.n	8003f76 <lsm6dsox_xl_data_rate_set+0x286>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8003f70:	2304      	movs	r3, #4
 8003f72:	77fb      	strb	r3, [r7, #31]
            break;
 8003f74:	e00c      	b.n	8003f90 <lsm6dsox_xl_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_XL_ODR_52Hz)
 8003f76:	78fb      	ldrb	r3, [r7, #3]
 8003f78:	2b03      	cmp	r3, #3
 8003f7a:	d102      	bne.n	8003f82 <lsm6dsox_xl_data_rate_set+0x292>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8003f7c:	2304      	movs	r3, #4
 8003f7e:	77fb      	strb	r3, [r7, #31]
            break;
 8003f80:	e006      	b.n	8003f90 <lsm6dsox_xl_data_rate_set+0x2a0>
              odr_xl = val;
 8003f82:	78fb      	ldrb	r3, [r7, #3]
 8003f84:	77fb      	strb	r3, [r7, #31]
            break;
 8003f86:	e003      	b.n	8003f90 <lsm6dsox_xl_data_rate_set+0x2a0>

          default:
            odr_xl = val;
 8003f88:	78fb      	ldrb	r3, [r7, #3]
 8003f8a:	77fb      	strb	r3, [r7, #31]
            break;
 8003f8c:	e000      	b.n	8003f90 <lsm6dsox_xl_data_rate_set+0x2a0>
        }
      }
 8003f8e:	bf00      	nop
    }
  }

  if (ret == 0)
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d107      	bne.n	8003fa6 <lsm6dsox_xl_data_rate_set+0x2b6>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 8003f96:	f107 020c 	add.w	r2, r7, #12
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	2110      	movs	r1, #16
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f7ff fe04 	bl	8003bac <lsm6dsox_read_reg>
 8003fa4:	61b8      	str	r0, [r7, #24]
  }

  if (ret == 0)
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10f      	bne.n	8003fcc <lsm6dsox_xl_data_rate_set+0x2dc>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 8003fac:	7ffb      	ldrb	r3, [r7, #31]
 8003fae:	f003 030f 	and.w	r3, r3, #15
 8003fb2:	b2da      	uxtb	r2, r3
 8003fb4:	7b3b      	ldrb	r3, [r7, #12]
 8003fb6:	f362 1307 	bfi	r3, r2, #4, #4
 8003fba:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 8003fbc:	f107 020c 	add.w	r2, r7, #12
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	2110      	movs	r1, #16
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f7ff fe09 	bl	8003bdc <lsm6dsox_write_reg>
 8003fca:	61b8      	str	r0, [r7, #24]
  }

  return ret;
 8003fcc:	69bb      	ldr	r3, [r7, #24]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3720      	adds	r7, #32
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop

08003fd8 <lsm6dsox_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_xl_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsox_odr_xl_t *val)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  lsm6dsox_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 8003fe2:	f107 0208 	add.w	r2, r7, #8
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	2110      	movs	r1, #16
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7ff fdde 	bl	8003bac <lsm6dsox_read_reg>
 8003ff0:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 8003ff2:	7a3b      	ldrb	r3, [r7, #8]
 8003ff4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b0b      	cmp	r3, #11
 8003ffc:	d84a      	bhi.n	8004094 <lsm6dsox_xl_data_rate_get+0xbc>
 8003ffe:	a201      	add	r2, pc, #4	; (adr r2, 8004004 <lsm6dsox_xl_data_rate_get+0x2c>)
 8004000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004004:	08004035 	.word	0x08004035
 8004008:	0800403d 	.word	0x0800403d
 800400c:	08004045 	.word	0x08004045
 8004010:	0800404d 	.word	0x0800404d
 8004014:	08004055 	.word	0x08004055
 8004018:	0800405d 	.word	0x0800405d
 800401c:	08004065 	.word	0x08004065
 8004020:	0800406d 	.word	0x0800406d
 8004024:	08004075 	.word	0x08004075
 8004028:	0800407d 	.word	0x0800407d
 800402c:	08004085 	.word	0x08004085
 8004030:	0800408d 	.word	0x0800408d
  {
    case LSM6DSOX_XL_ODR_OFF:
      *val = LSM6DSOX_XL_ODR_OFF;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	2200      	movs	r2, #0
 8004038:	701a      	strb	r2, [r3, #0]
      break;
 800403a:	e02f      	b.n	800409c <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_12Hz5:
      *val = LSM6DSOX_XL_ODR_12Hz5;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	2201      	movs	r2, #1
 8004040:	701a      	strb	r2, [r3, #0]
      break;
 8004042:	e02b      	b.n	800409c <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_26Hz:
      *val = LSM6DSOX_XL_ODR_26Hz;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	2202      	movs	r2, #2
 8004048:	701a      	strb	r2, [r3, #0]
      break;
 800404a:	e027      	b.n	800409c <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_52Hz:
      *val = LSM6DSOX_XL_ODR_52Hz;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	2203      	movs	r2, #3
 8004050:	701a      	strb	r2, [r3, #0]
      break;
 8004052:	e023      	b.n	800409c <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_104Hz:
      *val = LSM6DSOX_XL_ODR_104Hz;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	2204      	movs	r2, #4
 8004058:	701a      	strb	r2, [r3, #0]
      break;
 800405a:	e01f      	b.n	800409c <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_208Hz:
      *val = LSM6DSOX_XL_ODR_208Hz;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	2205      	movs	r2, #5
 8004060:	701a      	strb	r2, [r3, #0]
      break;
 8004062:	e01b      	b.n	800409c <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_417Hz:
      *val = LSM6DSOX_XL_ODR_417Hz;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	2206      	movs	r2, #6
 8004068:	701a      	strb	r2, [r3, #0]
      break;
 800406a:	e017      	b.n	800409c <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_833Hz:
      *val = LSM6DSOX_XL_ODR_833Hz;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	2207      	movs	r2, #7
 8004070:	701a      	strb	r2, [r3, #0]
      break;
 8004072:	e013      	b.n	800409c <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_1667Hz:
      *val = LSM6DSOX_XL_ODR_1667Hz;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	2208      	movs	r2, #8
 8004078:	701a      	strb	r2, [r3, #0]
      break;
 800407a:	e00f      	b.n	800409c <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_3333Hz:
      *val = LSM6DSOX_XL_ODR_3333Hz;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	2209      	movs	r2, #9
 8004080:	701a      	strb	r2, [r3, #0]
      break;
 8004082:	e00b      	b.n	800409c <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_6667Hz:
      *val = LSM6DSOX_XL_ODR_6667Hz;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	220a      	movs	r2, #10
 8004088:	701a      	strb	r2, [r3, #0]
      break;
 800408a:	e007      	b.n	800409c <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_1Hz6:
      *val = LSM6DSOX_XL_ODR_1Hz6;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	220b      	movs	r2, #11
 8004090:	701a      	strb	r2, [r3, #0]
      break;
 8004092:	e003      	b.n	800409c <lsm6dsox_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSOX_XL_ODR_OFF;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	2200      	movs	r2, #0
 8004098:	701a      	strb	r2, [r3, #0]
      break;
 800409a:	bf00      	nop
  }

  return ret;
 800409c:	68fb      	ldr	r3, [r7, #12]
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop

080040a8 <lsm6dsox_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_gy_full_scale_set(stmdev_ctx_t *ctx,
                                   lsm6dsox_fs_g_t val)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	460b      	mov	r3, r1
 80040b2:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 80040b4:	f107 0208 	add.w	r2, r7, #8
 80040b8:	2301      	movs	r3, #1
 80040ba:	2111      	movs	r1, #17
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f7ff fd75 	bl	8003bac <lsm6dsox_read_reg>
 80040c2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10f      	bne.n	80040ea <lsm6dsox_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 80040ca:	78fb      	ldrb	r3, [r7, #3]
 80040cc:	f003 0307 	and.w	r3, r3, #7
 80040d0:	b2da      	uxtb	r2, r3
 80040d2:	7a3b      	ldrb	r3, [r7, #8]
 80040d4:	f362 0343 	bfi	r3, r2, #1, #3
 80040d8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 80040da:	f107 0208 	add.w	r2, r7, #8
 80040de:	2301      	movs	r3, #1
 80040e0:	2111      	movs	r1, #17
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7ff fd7a 	bl	8003bdc <lsm6dsox_write_reg>
 80040e8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80040ea:	68fb      	ldr	r3, [r7, #12]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <lsm6dsox_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_gy_full_scale_get(stmdev_ctx_t *ctx,
                                   lsm6dsox_fs_g_t *val)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  lsm6dsox_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 80040fe:	f107 0208 	add.w	r2, r7, #8
 8004102:	2301      	movs	r3, #1
 8004104:	2111      	movs	r1, #17
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7ff fd50 	bl	8003bac <lsm6dsox_read_reg>
 800410c:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 800410e:	7a3b      	ldrb	r3, [r7, #8]
 8004110:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b06      	cmp	r3, #6
 8004118:	d824      	bhi.n	8004164 <lsm6dsox_gy_full_scale_get+0x70>
 800411a:	a201      	add	r2, pc, #4	; (adr r2, 8004120 <lsm6dsox_gy_full_scale_get+0x2c>)
 800411c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004120:	0800413d 	.word	0x0800413d
 8004124:	08004145 	.word	0x08004145
 8004128:	0800414d 	.word	0x0800414d
 800412c:	08004165 	.word	0x08004165
 8004130:	08004155 	.word	0x08004155
 8004134:	08004165 	.word	0x08004165
 8004138:	0800415d 	.word	0x0800415d
  {
    case LSM6DSOX_250dps:
      *val = LSM6DSOX_250dps;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	2200      	movs	r2, #0
 8004140:	701a      	strb	r2, [r3, #0]
      break;
 8004142:	e013      	b.n	800416c <lsm6dsox_gy_full_scale_get+0x78>

    case LSM6DSOX_125dps:
      *val = LSM6DSOX_125dps;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	2201      	movs	r2, #1
 8004148:	701a      	strb	r2, [r3, #0]
      break;
 800414a:	e00f      	b.n	800416c <lsm6dsox_gy_full_scale_get+0x78>

    case LSM6DSOX_500dps:
      *val = LSM6DSOX_500dps;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	2202      	movs	r2, #2
 8004150:	701a      	strb	r2, [r3, #0]
      break;
 8004152:	e00b      	b.n	800416c <lsm6dsox_gy_full_scale_get+0x78>

    case LSM6DSOX_1000dps:
      *val = LSM6DSOX_1000dps;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	2204      	movs	r2, #4
 8004158:	701a      	strb	r2, [r3, #0]
      break;
 800415a:	e007      	b.n	800416c <lsm6dsox_gy_full_scale_get+0x78>

    case LSM6DSOX_2000dps:
      *val = LSM6DSOX_2000dps;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	2206      	movs	r2, #6
 8004160:	701a      	strb	r2, [r3, #0]
      break;
 8004162:	e003      	b.n	800416c <lsm6dsox_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSOX_250dps;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	2200      	movs	r2, #0
 8004168:	701a      	strb	r2, [r3, #0]
      break;
 800416a:	bf00      	nop
  }

  return ret;
 800416c:	68fb      	ldr	r3, [r7, #12]
}
 800416e:	4618      	mov	r0, r3
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop

08004178 <lsm6dsox_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_gy_data_rate_set(stmdev_ctx_t *ctx,
                                  lsm6dsox_odr_g_t val)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b088      	sub	sp, #32
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	460b      	mov	r3, r1
 8004182:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_odr_g_t odr_gy =  val;
 8004184:	78fb      	ldrb	r3, [r7, #3]
 8004186:	77fb      	strb	r3, [r7, #31]
  lsm6dsox_mlc_odr_t mlc_odr;
  lsm6dsox_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsox_fsm_enable_get(ctx, &fsm_enable);
 8004188:	f107 0314 	add.w	r3, r7, #20
 800418c:	4619      	mov	r1, r3
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 fc0a 	bl	80049a8 <lsm6dsox_fsm_enable_get>
 8004194:	61b8      	str	r0, [r7, #24]

  if (ret == 0)
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	2b00      	cmp	r3, #0
 800419a:	f040 80c4 	bne.w	8004326 <lsm6dsox_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800419e:	7d3b      	ldrb	r3, [r7, #20]
 80041a0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80041a4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80041a6:	7d3b      	ldrb	r3, [r7, #20]
 80041a8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80041ac:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80041ae:	4313      	orrs	r3, r2
 80041b0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80041b2:	7d3b      	ldrb	r3, [r7, #20]
 80041b4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80041b8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80041ba:	4313      	orrs	r3, r2
 80041bc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80041be:	7d3b      	ldrb	r3, [r7, #20]
 80041c0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80041c4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80041c6:	4313      	orrs	r3, r2
 80041c8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80041ca:	7d3b      	ldrb	r3, [r7, #20]
 80041cc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80041d0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80041d2:	4313      	orrs	r3, r2
 80041d4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80041d6:	7d3b      	ldrb	r3, [r7, #20]
 80041d8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80041dc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80041de:	4313      	orrs	r3, r2
 80041e0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80041e2:	7d3b      	ldrb	r3, [r7, #20]
 80041e4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80041e8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80041ea:	4313      	orrs	r3, r2
 80041ec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80041ee:	7d3b      	ldrb	r3, [r7, #20]
 80041f0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80041f4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80041f6:	4313      	orrs	r3, r2
 80041f8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80041fa:	7d7b      	ldrb	r3, [r7, #21]
 80041fc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004200:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004202:	4313      	orrs	r3, r2
 8004204:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004206:	7d7b      	ldrb	r3, [r7, #21]
 8004208:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800420c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800420e:	4313      	orrs	r3, r2
 8004210:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8004212:	7d7b      	ldrb	r3, [r7, #21]
 8004214:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004218:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800421a:	4313      	orrs	r3, r2
 800421c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800421e:	7d7b      	ldrb	r3, [r7, #21]
 8004220:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004224:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8004226:	4313      	orrs	r3, r2
 8004228:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800422a:	7d7b      	ldrb	r3, [r7, #21]
 800422c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004230:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8004232:	4313      	orrs	r3, r2
 8004234:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8004236:	7d7b      	ldrb	r3, [r7, #21]
 8004238:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800423c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800423e:	4313      	orrs	r3, r2
 8004240:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8004242:	7d7b      	ldrb	r3, [r7, #21]
 8004244:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004248:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800424a:	4313      	orrs	r3, r2
 800424c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800424e:	7d7b      	ldrb	r3, [r7, #21]
 8004250:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004254:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8004256:	4313      	orrs	r3, r2
 8004258:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800425a:	2b01      	cmp	r3, #1
 800425c:	d163      	bne.n	8004326 <lsm6dsox_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsox_fsm_data_rate_get(ctx, &fsm_odr);
 800425e:	f107 0313 	add.w	r3, r7, #19
 8004262:	4619      	mov	r1, r3
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 fbc1 	bl	80049ec <lsm6dsox_fsm_data_rate_get>
 800426a:	61b8      	str	r0, [r7, #24]

      if (ret == 0)
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d159      	bne.n	8004326 <lsm6dsox_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8004272:	7cfb      	ldrb	r3, [r7, #19]
 8004274:	2b03      	cmp	r3, #3
 8004276:	d853      	bhi.n	8004320 <lsm6dsox_gy_data_rate_set+0x1a8>
 8004278:	a201      	add	r2, pc, #4	; (adr r2, 8004280 <lsm6dsox_gy_data_rate_set+0x108>)
 800427a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800427e:	bf00      	nop
 8004280:	08004291 	.word	0x08004291
 8004284:	080042a3 	.word	0x080042a3
 8004288:	080042c1 	.word	0x080042c1
 800428c:	080042eb 	.word	0x080042eb
        {
          case LSM6DSOX_ODR_FSM_12Hz5:
            if (val == LSM6DSOX_GY_ODR_OFF)
 8004290:	78fb      	ldrb	r3, [r7, #3]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d102      	bne.n	800429c <lsm6dsox_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSOX_GY_ODR_12Hz5;
 8004296:	2301      	movs	r3, #1
 8004298:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 800429a:	e045      	b.n	8004328 <lsm6dsox_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800429c:	78fb      	ldrb	r3, [r7, #3]
 800429e:	77fb      	strb	r3, [r7, #31]
            break;
 80042a0:	e042      	b.n	8004328 <lsm6dsox_gy_data_rate_set+0x1b0>

          case LSM6DSOX_ODR_FSM_26Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 80042a2:	78fb      	ldrb	r3, [r7, #3]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d102      	bne.n	80042ae <lsm6dsox_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSOX_GY_ODR_26Hz;
 80042a8:	2302      	movs	r3, #2
 80042aa:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 80042ac:	e03c      	b.n	8004328 <lsm6dsox_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 80042ae:	78fb      	ldrb	r3, [r7, #3]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d102      	bne.n	80042ba <lsm6dsox_gy_data_rate_set+0x142>
              odr_gy = LSM6DSOX_GY_ODR_26Hz;
 80042b4:	2302      	movs	r3, #2
 80042b6:	77fb      	strb	r3, [r7, #31]
            break;
 80042b8:	e036      	b.n	8004328 <lsm6dsox_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80042ba:	78fb      	ldrb	r3, [r7, #3]
 80042bc:	77fb      	strb	r3, [r7, #31]
            break;
 80042be:	e033      	b.n	8004328 <lsm6dsox_gy_data_rate_set+0x1b0>

          case LSM6DSOX_ODR_FSM_52Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 80042c0:	78fb      	ldrb	r3, [r7, #3]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d102      	bne.n	80042cc <lsm6dsox_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 80042c6:	2303      	movs	r3, #3
 80042c8:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 80042ca:	e02d      	b.n	8004328 <lsm6dsox_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 80042cc:	78fb      	ldrb	r3, [r7, #3]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d102      	bne.n	80042d8 <lsm6dsox_gy_data_rate_set+0x160>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 80042d2:	2303      	movs	r3, #3
 80042d4:	77fb      	strb	r3, [r7, #31]
            break;
 80042d6:	e027      	b.n	8004328 <lsm6dsox_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_GY_ODR_26Hz)
 80042d8:	78fb      	ldrb	r3, [r7, #3]
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d102      	bne.n	80042e4 <lsm6dsox_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 80042de:	2303      	movs	r3, #3
 80042e0:	77fb      	strb	r3, [r7, #31]
            break;
 80042e2:	e021      	b.n	8004328 <lsm6dsox_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80042e4:	78fb      	ldrb	r3, [r7, #3]
 80042e6:	77fb      	strb	r3, [r7, #31]
            break;
 80042e8:	e01e      	b.n	8004328 <lsm6dsox_gy_data_rate_set+0x1b0>

          case LSM6DSOX_ODR_FSM_104Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 80042ea:	78fb      	ldrb	r3, [r7, #3]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d102      	bne.n	80042f6 <lsm6dsox_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 80042f0:	2304      	movs	r3, #4
 80042f2:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 80042f4:	e018      	b.n	8004328 <lsm6dsox_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 80042f6:	78fb      	ldrb	r3, [r7, #3]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d102      	bne.n	8004302 <lsm6dsox_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 80042fc:	2304      	movs	r3, #4
 80042fe:	77fb      	strb	r3, [r7, #31]
            break;
 8004300:	e012      	b.n	8004328 <lsm6dsox_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_GY_ODR_26Hz)
 8004302:	78fb      	ldrb	r3, [r7, #3]
 8004304:	2b02      	cmp	r3, #2
 8004306:	d102      	bne.n	800430e <lsm6dsox_gy_data_rate_set+0x196>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 8004308:	2304      	movs	r3, #4
 800430a:	77fb      	strb	r3, [r7, #31]
            break;
 800430c:	e00c      	b.n	8004328 <lsm6dsox_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_GY_ODR_52Hz)
 800430e:	78fb      	ldrb	r3, [r7, #3]
 8004310:	2b03      	cmp	r3, #3
 8004312:	d102      	bne.n	800431a <lsm6dsox_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 8004314:	2304      	movs	r3, #4
 8004316:	77fb      	strb	r3, [r7, #31]
            break;
 8004318:	e006      	b.n	8004328 <lsm6dsox_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800431a:	78fb      	ldrb	r3, [r7, #3]
 800431c:	77fb      	strb	r3, [r7, #31]
            break;
 800431e:	e003      	b.n	8004328 <lsm6dsox_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8004320:	78fb      	ldrb	r3, [r7, #3]
 8004322:	77fb      	strb	r3, [r7, #31]
            break;
 8004324:	e000      	b.n	8004328 <lsm6dsox_gy_data_rate_set+0x1b0>
        }
      }
 8004326:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  emb_sens.mlc = PROPERTY_DISABLE;
 8004328:	7c3b      	ldrb	r3, [r7, #16]
 800432a:	f36f 03c3 	bfc	r3, #3, #1
 800432e:	743b      	strb	r3, [r7, #16]

  if (ret == 0)
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d16f      	bne.n	8004416 <lsm6dsox_gy_data_rate_set+0x29e>
  {
    ret =  lsm6dsox_embedded_sens_get(ctx, &emb_sens);
 8004336:	f107 0310 	add.w	r3, r7, #16
 800433a:	4619      	mov	r1, r3
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f002 f83f 	bl	80063c0 <lsm6dsox_embedded_sens_get>
 8004342:	61b8      	str	r0, [r7, #24]

    if (emb_sens.mlc == PROPERTY_ENABLE)
 8004344:	7c3b      	ldrb	r3, [r7, #16]
 8004346:	f003 0308 	and.w	r3, r3, #8
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b00      	cmp	r3, #0
 800434e:	d062      	beq.n	8004416 <lsm6dsox_gy_data_rate_set+0x29e>
    {
      ret =  lsm6dsox_mlc_data_rate_get(ctx, &mlc_odr);
 8004350:	f107 030f 	add.w	r3, r7, #15
 8004354:	4619      	mov	r1, r3
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 fb90 	bl	8004a7c <lsm6dsox_mlc_data_rate_get>
 800435c:	61b8      	str	r0, [r7, #24]

      if (ret == 0)
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d158      	bne.n	8004416 <lsm6dsox_gy_data_rate_set+0x29e>
      {
        switch (mlc_odr)
 8004364:	7bfb      	ldrb	r3, [r7, #15]
 8004366:	2b03      	cmp	r3, #3
 8004368:	d852      	bhi.n	8004410 <lsm6dsox_gy_data_rate_set+0x298>
 800436a:	a201      	add	r2, pc, #4	; (adr r2, 8004370 <lsm6dsox_gy_data_rate_set+0x1f8>)
 800436c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004370:	08004381 	.word	0x08004381
 8004374:	08004393 	.word	0x08004393
 8004378:	080043b1 	.word	0x080043b1
 800437c:	080043db 	.word	0x080043db
        {
          case LSM6DSOX_ODR_PRGS_12Hz5:
            if (val == LSM6DSOX_GY_ODR_OFF)
 8004380:	78fb      	ldrb	r3, [r7, #3]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d102      	bne.n	800438c <lsm6dsox_gy_data_rate_set+0x214>
            {
              odr_gy = LSM6DSOX_GY_ODR_12Hz5;
 8004386:	2301      	movs	r3, #1
 8004388:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 800438a:	e045      	b.n	8004418 <lsm6dsox_gy_data_rate_set+0x2a0>
              odr_gy = val;
 800438c:	78fb      	ldrb	r3, [r7, #3]
 800438e:	77fb      	strb	r3, [r7, #31]
            break;
 8004390:	e042      	b.n	8004418 <lsm6dsox_gy_data_rate_set+0x2a0>

          case LSM6DSOX_ODR_PRGS_26Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 8004392:	78fb      	ldrb	r3, [r7, #3]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d102      	bne.n	800439e <lsm6dsox_gy_data_rate_set+0x226>
            {
              odr_gy = LSM6DSOX_GY_ODR_26Hz;
 8004398:	2302      	movs	r3, #2
 800439a:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 800439c:	e03c      	b.n	8004418 <lsm6dsox_gy_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 800439e:	78fb      	ldrb	r3, [r7, #3]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d102      	bne.n	80043aa <lsm6dsox_gy_data_rate_set+0x232>
              odr_gy = LSM6DSOX_GY_ODR_26Hz;
 80043a4:	2302      	movs	r3, #2
 80043a6:	77fb      	strb	r3, [r7, #31]
            break;
 80043a8:	e036      	b.n	8004418 <lsm6dsox_gy_data_rate_set+0x2a0>
              odr_gy = val;
 80043aa:	78fb      	ldrb	r3, [r7, #3]
 80043ac:	77fb      	strb	r3, [r7, #31]
            break;
 80043ae:	e033      	b.n	8004418 <lsm6dsox_gy_data_rate_set+0x2a0>

          case LSM6DSOX_ODR_PRGS_52Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 80043b0:	78fb      	ldrb	r3, [r7, #3]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d102      	bne.n	80043bc <lsm6dsox_gy_data_rate_set+0x244>
            {
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 80043b6:	2303      	movs	r3, #3
 80043b8:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 80043ba:	e02d      	b.n	8004418 <lsm6dsox_gy_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 80043bc:	78fb      	ldrb	r3, [r7, #3]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d102      	bne.n	80043c8 <lsm6dsox_gy_data_rate_set+0x250>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 80043c2:	2303      	movs	r3, #3
 80043c4:	77fb      	strb	r3, [r7, #31]
            break;
 80043c6:	e027      	b.n	8004418 <lsm6dsox_gy_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_GY_ODR_26Hz)
 80043c8:	78fb      	ldrb	r3, [r7, #3]
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d102      	bne.n	80043d4 <lsm6dsox_gy_data_rate_set+0x25c>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 80043ce:	2303      	movs	r3, #3
 80043d0:	77fb      	strb	r3, [r7, #31]
            break;
 80043d2:	e021      	b.n	8004418 <lsm6dsox_gy_data_rate_set+0x2a0>
              odr_gy = val;
 80043d4:	78fb      	ldrb	r3, [r7, #3]
 80043d6:	77fb      	strb	r3, [r7, #31]
            break;
 80043d8:	e01e      	b.n	8004418 <lsm6dsox_gy_data_rate_set+0x2a0>

          case LSM6DSOX_ODR_PRGS_104Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 80043da:	78fb      	ldrb	r3, [r7, #3]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d102      	bne.n	80043e6 <lsm6dsox_gy_data_rate_set+0x26e>
            {
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 80043e0:	2304      	movs	r3, #4
 80043e2:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 80043e4:	e018      	b.n	8004418 <lsm6dsox_gy_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 80043e6:	78fb      	ldrb	r3, [r7, #3]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d102      	bne.n	80043f2 <lsm6dsox_gy_data_rate_set+0x27a>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 80043ec:	2304      	movs	r3, #4
 80043ee:	77fb      	strb	r3, [r7, #31]
            break;
 80043f0:	e012      	b.n	8004418 <lsm6dsox_gy_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_GY_ODR_26Hz)
 80043f2:	78fb      	ldrb	r3, [r7, #3]
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d102      	bne.n	80043fe <lsm6dsox_gy_data_rate_set+0x286>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 80043f8:	2304      	movs	r3, #4
 80043fa:	77fb      	strb	r3, [r7, #31]
            break;
 80043fc:	e00c      	b.n	8004418 <lsm6dsox_gy_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_GY_ODR_52Hz)
 80043fe:	78fb      	ldrb	r3, [r7, #3]
 8004400:	2b03      	cmp	r3, #3
 8004402:	d102      	bne.n	800440a <lsm6dsox_gy_data_rate_set+0x292>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 8004404:	2304      	movs	r3, #4
 8004406:	77fb      	strb	r3, [r7, #31]
            break;
 8004408:	e006      	b.n	8004418 <lsm6dsox_gy_data_rate_set+0x2a0>
              odr_gy = val;
 800440a:	78fb      	ldrb	r3, [r7, #3]
 800440c:	77fb      	strb	r3, [r7, #31]
            break;
 800440e:	e003      	b.n	8004418 <lsm6dsox_gy_data_rate_set+0x2a0>

          default:
            odr_gy = val;
 8004410:	78fb      	ldrb	r3, [r7, #3]
 8004412:	77fb      	strb	r3, [r7, #31]
            break;
 8004414:	e000      	b.n	8004418 <lsm6dsox_gy_data_rate_set+0x2a0>
        }
      }
 8004416:	bf00      	nop
    }
  }

  if (ret == 0)
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d107      	bne.n	800442e <lsm6dsox_gy_data_rate_set+0x2b6>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 800441e:	f107 020c 	add.w	r2, r7, #12
 8004422:	2301      	movs	r3, #1
 8004424:	2111      	movs	r1, #17
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7ff fbc0 	bl	8003bac <lsm6dsox_read_reg>
 800442c:	61b8      	str	r0, [r7, #24]
  }

  if (ret == 0)
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10f      	bne.n	8004454 <lsm6dsox_gy_data_rate_set+0x2dc>
  {
    reg.odr_g = (uint8_t) odr_gy;
 8004434:	7ffb      	ldrb	r3, [r7, #31]
 8004436:	f003 030f 	and.w	r3, r3, #15
 800443a:	b2da      	uxtb	r2, r3
 800443c:	7b3b      	ldrb	r3, [r7, #12]
 800443e:	f362 1307 	bfi	r3, r2, #4, #4
 8004442:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 8004444:	f107 020c 	add.w	r2, r7, #12
 8004448:	2301      	movs	r3, #1
 800444a:	2111      	movs	r1, #17
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f7ff fbc5 	bl	8003bdc <lsm6dsox_write_reg>
 8004452:	61b8      	str	r0, [r7, #24]
  }

  return ret;
 8004454:	69bb      	ldr	r3, [r7, #24]
}
 8004456:	4618      	mov	r0, r3
 8004458:	3720      	adds	r7, #32
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop

08004460 <lsm6dsox_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_gy_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsox_odr_g_t *val)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  lsm6dsox_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 800446a:	f107 0208 	add.w	r2, r7, #8
 800446e:	2301      	movs	r3, #1
 8004470:	2111      	movs	r1, #17
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7ff fb9a 	bl	8003bac <lsm6dsox_read_reg>
 8004478:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 800447a:	7a3b      	ldrb	r3, [r7, #8]
 800447c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b0a      	cmp	r3, #10
 8004484:	d844      	bhi.n	8004510 <lsm6dsox_gy_data_rate_get+0xb0>
 8004486:	a201      	add	r2, pc, #4	; (adr r2, 800448c <lsm6dsox_gy_data_rate_get+0x2c>)
 8004488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800448c:	080044b9 	.word	0x080044b9
 8004490:	080044c1 	.word	0x080044c1
 8004494:	080044c9 	.word	0x080044c9
 8004498:	080044d1 	.word	0x080044d1
 800449c:	080044d9 	.word	0x080044d9
 80044a0:	080044e1 	.word	0x080044e1
 80044a4:	080044e9 	.word	0x080044e9
 80044a8:	080044f1 	.word	0x080044f1
 80044ac:	080044f9 	.word	0x080044f9
 80044b0:	08004501 	.word	0x08004501
 80044b4:	08004509 	.word	0x08004509
  {
    case LSM6DSOX_GY_ODR_OFF:
      *val = LSM6DSOX_GY_ODR_OFF;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	2200      	movs	r2, #0
 80044bc:	701a      	strb	r2, [r3, #0]
      break;
 80044be:	e02b      	b.n	8004518 <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_12Hz5:
      *val = LSM6DSOX_GY_ODR_12Hz5;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	2201      	movs	r2, #1
 80044c4:	701a      	strb	r2, [r3, #0]
      break;
 80044c6:	e027      	b.n	8004518 <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_26Hz:
      *val = LSM6DSOX_GY_ODR_26Hz;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	2202      	movs	r2, #2
 80044cc:	701a      	strb	r2, [r3, #0]
      break;
 80044ce:	e023      	b.n	8004518 <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_52Hz:
      *val = LSM6DSOX_GY_ODR_52Hz;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	2203      	movs	r2, #3
 80044d4:	701a      	strb	r2, [r3, #0]
      break;
 80044d6:	e01f      	b.n	8004518 <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_104Hz:
      *val = LSM6DSOX_GY_ODR_104Hz;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	2204      	movs	r2, #4
 80044dc:	701a      	strb	r2, [r3, #0]
      break;
 80044de:	e01b      	b.n	8004518 <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_208Hz:
      *val = LSM6DSOX_GY_ODR_208Hz;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	2205      	movs	r2, #5
 80044e4:	701a      	strb	r2, [r3, #0]
      break;
 80044e6:	e017      	b.n	8004518 <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_417Hz:
      *val = LSM6DSOX_GY_ODR_417Hz;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	2206      	movs	r2, #6
 80044ec:	701a      	strb	r2, [r3, #0]
      break;
 80044ee:	e013      	b.n	8004518 <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_833Hz:
      *val = LSM6DSOX_GY_ODR_833Hz;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	2207      	movs	r2, #7
 80044f4:	701a      	strb	r2, [r3, #0]
      break;
 80044f6:	e00f      	b.n	8004518 <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_1667Hz:
      *val = LSM6DSOX_GY_ODR_1667Hz;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	2208      	movs	r2, #8
 80044fc:	701a      	strb	r2, [r3, #0]
      break;
 80044fe:	e00b      	b.n	8004518 <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_3333Hz:
      *val = LSM6DSOX_GY_ODR_3333Hz;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	2209      	movs	r2, #9
 8004504:	701a      	strb	r2, [r3, #0]
      break;
 8004506:	e007      	b.n	8004518 <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_6667Hz:
      *val = LSM6DSOX_GY_ODR_6667Hz;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	220a      	movs	r2, #10
 800450c:	701a      	strb	r2, [r3, #0]
      break;
 800450e:	e003      	b.n	8004518 <lsm6dsox_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSOX_GY_ODR_OFF;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	2200      	movs	r2, #0
 8004514:	701a      	strb	r2, [r3, #0]
      break;
 8004516:	bf00      	nop
  }

  return ret;
 8004518:	68fb      	ldr	r3, [r7, #12]
}
 800451a:	4618      	mov	r0, r3
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop

08004524 <lsm6dsox_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	460b      	mov	r3, r1
 800452e:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 8004530:	f107 0208 	add.w	r2, r7, #8
 8004534:	2301      	movs	r3, #1
 8004536:	2112      	movs	r1, #18
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f7ff fb37 	bl	8003bac <lsm6dsox_read_reg>
 800453e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10f      	bne.n	8004566 <lsm6dsox_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8004546:	78fb      	ldrb	r3, [r7, #3]
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	b2da      	uxtb	r2, r3
 800454e:	7a3b      	ldrb	r3, [r7, #8]
 8004550:	f362 1386 	bfi	r3, r2, #6, #1
 8004554:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 8004556:	f107 0208 	add.w	r2, r7, #8
 800455a:	2301      	movs	r3, #1
 800455c:	2112      	movs	r1, #18
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7ff fb3c 	bl	8003bdc <lsm6dsox_write_reg>
 8004564:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004566:	68fb      	ldr	r3, [r7, #12]
}
 8004568:	4618      	mov	r0, r3
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <lsm6dsox_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_OUTX_L_G, buff, 6);
 800457a:	f107 020c 	add.w	r2, r7, #12
 800457e:	2306      	movs	r3, #6
 8004580:	2122      	movs	r1, #34	; 0x22
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f7ff fb12 	bl	8003bac <lsm6dsox_read_reg>
 8004588:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800458a:	7b7b      	ldrb	r3, [r7, #13]
 800458c:	b21a      	sxth	r2, r3
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004598:	b29b      	uxth	r3, r3
 800459a:	021b      	lsls	r3, r3, #8
 800459c:	b29a      	uxth	r2, r3
 800459e:	7b3b      	ldrb	r3, [r7, #12]
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	4413      	add	r3, r2
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	b21a      	sxth	r2, r3
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80045ac:	7bfa      	ldrb	r2, [r7, #15]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	3302      	adds	r3, #2
 80045b2:	b212      	sxth	r2, r2
 80045b4:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	3302      	adds	r3, #2
 80045ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045be:	b29b      	uxth	r3, r3
 80045c0:	021b      	lsls	r3, r3, #8
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	7bbb      	ldrb	r3, [r7, #14]
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	4413      	add	r3, r2
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	3302      	adds	r3, #2
 80045d0:	b212      	sxth	r2, r2
 80045d2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80045d4:	7c7a      	ldrb	r2, [r7, #17]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	3304      	adds	r3, #4
 80045da:	b212      	sxth	r2, r2
 80045dc:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	3304      	adds	r3, #4
 80045e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	021b      	lsls	r3, r3, #8
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	7c3b      	ldrb	r3, [r7, #16]
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	4413      	add	r3, r2
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	3304      	adds	r3, #4
 80045f8:	b212      	sxth	r2, r2
 80045fa:	801a      	strh	r2, [r3, #0]

  return ret;
 80045fc:	697b      	ldr	r3, [r7, #20]
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3718      	adds	r7, #24
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <lsm6dsox_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b086      	sub	sp, #24
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
 800460e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_OUTX_L_A, buff, 6);
 8004610:	f107 020c 	add.w	r2, r7, #12
 8004614:	2306      	movs	r3, #6
 8004616:	2128      	movs	r1, #40	; 0x28
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f7ff fac7 	bl	8003bac <lsm6dsox_read_reg>
 800461e:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004620:	7b7b      	ldrb	r3, [r7, #13]
 8004622:	b21a      	sxth	r2, r3
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800462e:	b29b      	uxth	r3, r3
 8004630:	021b      	lsls	r3, r3, #8
 8004632:	b29a      	uxth	r2, r3
 8004634:	7b3b      	ldrb	r3, [r7, #12]
 8004636:	b29b      	uxth	r3, r3
 8004638:	4413      	add	r3, r2
 800463a:	b29b      	uxth	r3, r3
 800463c:	b21a      	sxth	r2, r3
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004642:	7bfa      	ldrb	r2, [r7, #15]
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	3302      	adds	r3, #2
 8004648:	b212      	sxth	r2, r2
 800464a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	3302      	adds	r3, #2
 8004650:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004654:	b29b      	uxth	r3, r3
 8004656:	021b      	lsls	r3, r3, #8
 8004658:	b29a      	uxth	r2, r3
 800465a:	7bbb      	ldrb	r3, [r7, #14]
 800465c:	b29b      	uxth	r3, r3
 800465e:	4413      	add	r3, r2
 8004660:	b29a      	uxth	r2, r3
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	3302      	adds	r3, #2
 8004666:	b212      	sxth	r2, r2
 8004668:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800466a:	7c7a      	ldrb	r2, [r7, #17]
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	3304      	adds	r3, #4
 8004670:	b212      	sxth	r2, r2
 8004672:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	3304      	adds	r3, #4
 8004678:	f9b3 3000 	ldrsh.w	r3, [r3]
 800467c:	b29b      	uxth	r3, r3
 800467e:	021b      	lsls	r3, r3, #8
 8004680:	b29a      	uxth	r2, r3
 8004682:	7c3b      	ldrb	r3, [r7, #16]
 8004684:	b29b      	uxth	r3, r3
 8004686:	4413      	add	r3, r2
 8004688:	b29a      	uxth	r2, r3
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	3304      	adds	r3, #4
 800468e:	b212      	sxth	r2, r2
 8004690:	801a      	strh	r2, [r3, #0]

  return ret;
 8004692:	697b      	ldr	r3, [r7, #20]
}
 8004694:	4618      	mov	r0, r3
 8004696:	3718      	adds	r7, #24
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <lsm6dsox_mlc_out_get>:
  * @param  uint8_t * : buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_mlc_out_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 80046a6:	2102      	movs	r1, #2
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 f818 	bl	80046de <lsm6dsox_mem_bank_set>
 80046ae:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d106      	bne.n	80046c4 <lsm6dsox_mlc_out_get+0x28>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_MLC0_SRC, buff, 8);
 80046b6:	2308      	movs	r3, #8
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	2170      	movs	r1, #112	; 0x70
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f7ff fa75 	bl	8003bac <lsm6dsox_read_reg>
 80046c2:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d104      	bne.n	80046d4 <lsm6dsox_mlc_out_get+0x38>
  {
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 80046ca:	2100      	movs	r1, #0
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f806 	bl	80046de <lsm6dsox_mem_bank_set>
 80046d2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80046d4:	68fb      	ldr	r3, [r7, #12]
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <lsm6dsox_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_mem_bank_set(stmdev_ctx_t *ctx,
                              lsm6dsox_reg_access_t val)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b084      	sub	sp, #16
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
 80046e6:	460b      	mov	r3, r1
 80046e8:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FUNC_CFG_ACCESS,
 80046ea:	f107 0208 	add.w	r2, r7, #8
 80046ee:	2301      	movs	r3, #1
 80046f0:	2101      	movs	r1, #1
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f7ff fa5a 	bl	8003bac <lsm6dsox_read_reg>
 80046f8:	60f8      	str	r0, [r7, #12]
                          (uint8_t *)&reg, 1);

  if (ret == 0)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10f      	bne.n	8004720 <lsm6dsox_mem_bank_set+0x42>
  {
    reg.reg_access = (uint8_t)val;
 8004700:	78fb      	ldrb	r3, [r7, #3]
 8004702:	f003 0303 	and.w	r3, r3, #3
 8004706:	b2da      	uxtb	r2, r3
 8004708:	7a3b      	ldrb	r3, [r7, #8]
 800470a:	f362 1387 	bfi	r3, r2, #6, #2
 800470e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_FUNC_CFG_ACCESS,
 8004710:	f107 0208 	add.w	r2, r7, #8
 8004714:	2301      	movs	r3, #1
 8004716:	2101      	movs	r1, #1
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f7ff fa5f 	bl	8003bdc <lsm6dsox_write_reg>
 800471e:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&reg, 1);
  }

  return ret;
 8004720:	68fb      	ldr	r3, [r7, #12]
}
 8004722:	4618      	mov	r0, r3
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <lsm6dsox_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b084      	sub	sp, #16
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
 8004732:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_WHO_AM_I, buff, 1);
 8004734:	2301      	movs	r3, #1
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	210f      	movs	r1, #15
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7ff fa36 	bl	8003bac <lsm6dsox_read_reg>
 8004740:	60f8      	str	r0, [r7, #12]

  return ret;
 8004742:	68fb      	ldr	r3, [r7, #12]
}
 8004744:	4618      	mov	r0, r3
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <lsm6dsox_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	460b      	mov	r3, r1
 8004756:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 8004758:	f107 0208 	add.w	r2, r7, #8
 800475c:	2301      	movs	r3, #1
 800475e:	2112      	movs	r1, #18
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f7ff fa23 	bl	8003bac <lsm6dsox_read_reg>
 8004766:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10f      	bne.n	800478e <lsm6dsox_reset_set+0x42>
  {
    reg.sw_reset = val;
 800476e:	78fb      	ldrb	r3, [r7, #3]
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	b2da      	uxtb	r2, r3
 8004776:	7a3b      	ldrb	r3, [r7, #8]
 8004778:	f362 0300 	bfi	r3, r2, #0, #1
 800477c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 800477e:	f107 0208 	add.w	r2, r7, #8
 8004782:	2301      	movs	r3, #1
 8004784:	2112      	movs	r1, #18
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f7ff fa28 	bl	8003bdc <lsm6dsox_write_reg>
 800478c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800478e:	68fb      	ldr	r3, [r7, #12]
}
 8004790:	4618      	mov	r0, r3
 8004792:	3710      	adds	r7, #16
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <lsm6dsox_reset_get>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  lsm6dsox_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 80047a2:	f107 0208 	add.w	r2, r7, #8
 80047a6:	2301      	movs	r3, #1
 80047a8:	2112      	movs	r1, #18
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f7ff f9fe 	bl	8003bac <lsm6dsox_read_reg>
 80047b0:	60f8      	str	r0, [r7, #12]
  *val = reg.sw_reset;
 80047b2:	7a3b      	ldrb	r3, [r7, #8]
 80047b4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	461a      	mov	r2, r3
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	701a      	strb	r2, [r3, #0]

  return ret;
 80047c0:	68fb      	ldr	r3, [r7, #12]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <lsm6dsox_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b084      	sub	sp, #16
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
 80047d2:	460b      	mov	r3, r1
 80047d4:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 80047d6:	f107 0208 	add.w	r2, r7, #8
 80047da:	2301      	movs	r3, #1
 80047dc:	2112      	movs	r1, #18
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f7ff f9e4 	bl	8003bac <lsm6dsox_read_reg>
 80047e4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10f      	bne.n	800480c <lsm6dsox_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 80047ec:	78fb      	ldrb	r3, [r7, #3]
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	b2da      	uxtb	r2, r3
 80047f4:	7a3b      	ldrb	r3, [r7, #8]
 80047f6:	f362 0382 	bfi	r3, r2, #2, #1
 80047fa:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 80047fc:	f107 0208 	add.w	r2, r7, #8
 8004800:	2301      	movs	r3, #1
 8004802:	2112      	movs	r1, #18
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f7ff f9e9 	bl	8003bdc <lsm6dsox_write_reg>
 800480a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800480c:	68fb      	ldr	r3, [r7, #12]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <lsm6dsox_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_i3c_disable_set(stmdev_ctx_t *ctx,
                                 lsm6dsox_i3c_disable_t val)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b086      	sub	sp, #24
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
 800481e:	460b      	mov	r3, r1
 8004820:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_i3c_bus_avb_t i3c_bus_avb;
  lsm6dsox_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8004822:	f107 020c 	add.w	r2, r7, #12
 8004826:	2301      	movs	r3, #1
 8004828:	2118      	movs	r1, #24
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f7ff f9be 	bl	8003bac <lsm6dsox_read_reg>
 8004830:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d111      	bne.n	800485c <lsm6dsox_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8004838:	78fb      	ldrb	r3, [r7, #3]
 800483a:	09db      	lsrs	r3, r3, #7
 800483c:	b2db      	uxtb	r3, r3
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	b2da      	uxtb	r2, r3
 8004844:	7b3b      	ldrb	r3, [r7, #12]
 8004846:	f362 0341 	bfi	r3, r2, #1, #1
 800484a:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 800484c:	f107 020c 	add.w	r2, r7, #12
 8004850:	2301      	movs	r3, #1
 8004852:	2118      	movs	r1, #24
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7ff f9c1 	bl	8003bdc <lsm6dsox_write_reg>
 800485a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d107      	bne.n	8004872 <lsm6dsox_i3c_disable_set+0x5c>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_I3C_BUS_AVB,
 8004862:	f107 0210 	add.w	r2, r7, #16
 8004866:	2301      	movs	r3, #1
 8004868:	2162      	movs	r1, #98	; 0x62
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f7ff f99e 	bl	8003bac <lsm6dsox_read_reg>
 8004870:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10f      	bne.n	8004898 <lsm6dsox_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8004878:	78fb      	ldrb	r3, [r7, #3]
 800487a:	f003 0303 	and.w	r3, r3, #3
 800487e:	b2da      	uxtb	r2, r3
 8004880:	7c3b      	ldrb	r3, [r7, #16]
 8004882:	f362 03c4 	bfi	r3, r2, #3, #2
 8004886:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_I3C_BUS_AVB,
 8004888:	f107 0210 	add.w	r2, r7, #16
 800488c:	2301      	movs	r3, #1
 800488e:	2162      	movs	r1, #98	; 0x62
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f7ff f9a3 	bl	8003bdc <lsm6dsox_write_reg>
 8004896:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8004898:	697b      	ldr	r3, [r7, #20]
}
 800489a:	4618      	mov	r0, r3
 800489c:	3718      	adds	r7, #24
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <lsm6dsox_int_notification_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_int_notification_set(stmdev_ctx_t *ctx,
                                      lsm6dsox_lir_t val)
{
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b086      	sub	sp, #24
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
 80048aa:	460b      	mov	r3, r1
 80048ac:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_tap_cfg0_t tap_cfg0;
  lsm6dsox_page_rw_t page_rw;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_TAP_CFG0, (uint8_t *) &tap_cfg0, 1);
 80048ae:	f107 0210 	add.w	r2, r7, #16
 80048b2:	2301      	movs	r3, #1
 80048b4:	2156      	movs	r1, #86	; 0x56
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7ff f978 	bl	8003bac <lsm6dsox_read_reg>
 80048bc:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d117      	bne.n	80048f4 <lsm6dsox_int_notification_set+0x52>
  {
    tap_cfg0.lir = (uint8_t)val & 0x01U;
 80048c4:	78fb      	ldrb	r3, [r7, #3]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	b2da      	uxtb	r2, r3
 80048cc:	7c3b      	ldrb	r3, [r7, #16]
 80048ce:	f362 0300 	bfi	r3, r2, #0, #1
 80048d2:	743b      	strb	r3, [r7, #16]
    tap_cfg0.int_clr_on_read = (uint8_t)val & 0x01U;
 80048d4:	78fb      	ldrb	r3, [r7, #3]
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	b2da      	uxtb	r2, r3
 80048dc:	7c3b      	ldrb	r3, [r7, #16]
 80048de:	f362 1386 	bfi	r3, r2, #6, #1
 80048e2:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_TAP_CFG0,
 80048e4:	f107 0210 	add.w	r2, r7, #16
 80048e8:	2301      	movs	r3, #1
 80048ea:	2156      	movs	r1, #86	; 0x56
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f7ff f975 	bl	8003bdc <lsm6dsox_write_reg>
 80048f2:	6178      	str	r0, [r7, #20]
                             (uint8_t *) &tap_cfg0, 1);
  }

  if (ret == 0)
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d104      	bne.n	8004904 <lsm6dsox_int_notification_set+0x62>
  {
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 80048fa:	2102      	movs	r1, #2
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f7ff feee 	bl	80046de <lsm6dsox_mem_bank_set>
 8004902:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d107      	bne.n	800491a <lsm6dsox_int_notification_set+0x78>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_PAGE_RW, (uint8_t *) &page_rw, 1);
 800490a:	f107 020c 	add.w	r2, r7, #12
 800490e:	2301      	movs	r3, #1
 8004910:	2117      	movs	r1, #23
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f7ff f94a 	bl	8003bac <lsm6dsox_read_reg>
 8004918:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d110      	bne.n	8004942 <lsm6dsox_int_notification_set+0xa0>
  {
    page_rw.emb_func_lir = ((uint8_t)val & 0x02U) >> 1;
 8004920:	78fb      	ldrb	r3, [r7, #3]
 8004922:	085b      	lsrs	r3, r3, #1
 8004924:	f003 0301 	and.w	r3, r3, #1
 8004928:	b2da      	uxtb	r2, r3
 800492a:	7b3b      	ldrb	r3, [r7, #12]
 800492c:	f362 13c7 	bfi	r3, r2, #7, #1
 8004930:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_PAGE_RW, (uint8_t *) &page_rw, 1);
 8004932:	f107 020c 	add.w	r2, r7, #12
 8004936:	2301      	movs	r3, #1
 8004938:	2117      	movs	r1, #23
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f7ff f94e 	bl	8003bdc <lsm6dsox_write_reg>
 8004940:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d104      	bne.n	8004952 <lsm6dsox_int_notification_set+0xb0>
  {
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8004948:	2100      	movs	r1, #0
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f7ff fec7 	bl	80046de <lsm6dsox_mem_bank_set>
 8004950:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004952:	697b      	ldr	r3, [r7, #20]
}
 8004954:	4618      	mov	r0, r3
 8004956:	3718      	adds	r7, #24
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <lsm6dsox_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_fifo_mode_set(stmdev_ctx_t *ctx,
                               lsm6dsox_fifo_mode_t val)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	460b      	mov	r3, r1
 8004966:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8004968:	f107 0208 	add.w	r2, r7, #8
 800496c:	2301      	movs	r3, #1
 800496e:	210a      	movs	r1, #10
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f7ff f91b 	bl	8003bac <lsm6dsox_read_reg>
 8004976:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10f      	bne.n	800499e <lsm6dsox_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 800497e:	78fb      	ldrb	r3, [r7, #3]
 8004980:	f003 0307 	and.w	r3, r3, #7
 8004984:	b2da      	uxtb	r2, r3
 8004986:	7a3b      	ldrb	r3, [r7, #8]
 8004988:	f362 0302 	bfi	r3, r2, #0, #3
 800498c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_FIFO_CTRL4, (uint8_t *)&reg, 1);
 800498e:	f107 0208 	add.w	r2, r7, #8
 8004992:	2301      	movs	r3, #1
 8004994:	210a      	movs	r1, #10
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7ff f920 	bl	8003bdc <lsm6dsox_write_reg>
 800499c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800499e:	68fb      	ldr	r3, [r7, #12]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <lsm6dsox_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_fsm_enable_get(stmdev_ctx_t *ctx,
                                lsm6dsox_emb_fsm_enable_t *val)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 80049b2:	2102      	movs	r1, #2
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f7ff fe92 	bl	80046de <lsm6dsox_mem_bank_set>
 80049ba:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d106      	bne.n	80049d0 <lsm6dsox_fsm_enable_get+0x28>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FSM_ENABLE_A, (uint8_t *) val,
 80049c2:	2302      	movs	r3, #2
 80049c4:	683a      	ldr	r2, [r7, #0]
 80049c6:	2146      	movs	r1, #70	; 0x46
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f7ff f8ef 	bl	8003bac <lsm6dsox_read_reg>
 80049ce:	60f8      	str	r0, [r7, #12]
                            2);
  }

  if (ret == 0)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d104      	bne.n	80049e0 <lsm6dsox_fsm_enable_get+0x38>
  {
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 80049d6:	2100      	movs	r1, #0
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f7ff fe80 	bl	80046de <lsm6dsox_mem_bank_set>
 80049de:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80049e0:	68fb      	ldr	r3, [r7, #12]
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
	...

080049ec <lsm6dsox_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm6dsox_fsm_odr_t *val)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  lsm6dsox_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 80049f6:	2102      	movs	r1, #2
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f7ff fe70 	bl	80046de <lsm6dsox_mem_bank_set>
 80049fe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d107      	bne.n	8004a16 <lsm6dsox_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_ODR_CFG_B,
 8004a06:	f107 0208 	add.w	r2, r7, #8
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	215f      	movs	r1, #95	; 0x5f
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7ff f8cc 	bl	8003bac <lsm6dsox_read_reg>
 8004a14:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d12a      	bne.n	8004a72 <lsm6dsox_fsm_data_rate_get+0x86>
  {
    switch (reg.fsm_odr)
 8004a1c:	7a3b      	ldrb	r3, [r7, #8]
 8004a1e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	2b03      	cmp	r3, #3
 8004a26:	d81b      	bhi.n	8004a60 <lsm6dsox_fsm_data_rate_get+0x74>
 8004a28:	a201      	add	r2, pc, #4	; (adr r2, 8004a30 <lsm6dsox_fsm_data_rate_get+0x44>)
 8004a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a2e:	bf00      	nop
 8004a30:	08004a41 	.word	0x08004a41
 8004a34:	08004a49 	.word	0x08004a49
 8004a38:	08004a51 	.word	0x08004a51
 8004a3c:	08004a59 	.word	0x08004a59
    {
      case LSM6DSOX_ODR_FSM_12Hz5:
        *val = LSM6DSOX_ODR_FSM_12Hz5;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	2200      	movs	r2, #0
 8004a44:	701a      	strb	r2, [r3, #0]
        break;
 8004a46:	e00f      	b.n	8004a68 <lsm6dsox_fsm_data_rate_get+0x7c>

      case LSM6DSOX_ODR_FSM_26Hz:
        *val = LSM6DSOX_ODR_FSM_26Hz;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	701a      	strb	r2, [r3, #0]
        break;
 8004a4e:	e00b      	b.n	8004a68 <lsm6dsox_fsm_data_rate_get+0x7c>

      case LSM6DSOX_ODR_FSM_52Hz:
        *val = LSM6DSOX_ODR_FSM_52Hz;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	2202      	movs	r2, #2
 8004a54:	701a      	strb	r2, [r3, #0]
        break;
 8004a56:	e007      	b.n	8004a68 <lsm6dsox_fsm_data_rate_get+0x7c>

      case LSM6DSOX_ODR_FSM_104Hz:
        *val = LSM6DSOX_ODR_FSM_104Hz;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	2203      	movs	r2, #3
 8004a5c:	701a      	strb	r2, [r3, #0]
        break;
 8004a5e:	e003      	b.n	8004a68 <lsm6dsox_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSOX_ODR_FSM_12Hz5;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	2200      	movs	r2, #0
 8004a64:	701a      	strb	r2, [r3, #0]
        break;
 8004a66:	bf00      	nop
    }

    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8004a68:	2100      	movs	r1, #0
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f7ff fe37 	bl	80046de <lsm6dsox_mem_bank_set>
 8004a70:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004a72:	68fb      	ldr	r3, [r7, #12]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <lsm6dsox_mlc_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_mlc_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm6dsox_mlc_odr_t *val)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  lsm6dsox_emb_func_odr_cfg_c_t reg;
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8004a86:	2102      	movs	r1, #2
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f7ff fe28 	bl	80046de <lsm6dsox_mem_bank_set>
 8004a8e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d107      	bne.n	8004aa6 <lsm6dsox_mlc_data_rate_get+0x2a>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_ODR_CFG_C,
 8004a96:	f107 0208 	add.w	r2, r7, #8
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	2160      	movs	r1, #96	; 0x60
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f7ff f884 	bl	8003bac <lsm6dsox_read_reg>
 8004aa4:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d12a      	bne.n	8004b02 <lsm6dsox_mlc_data_rate_get+0x86>
  {
    switch (reg.mlc_odr)
 8004aac:	7a3b      	ldrb	r3, [r7, #8]
 8004aae:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b03      	cmp	r3, #3
 8004ab6:	d81b      	bhi.n	8004af0 <lsm6dsox_mlc_data_rate_get+0x74>
 8004ab8:	a201      	add	r2, pc, #4	; (adr r2, 8004ac0 <lsm6dsox_mlc_data_rate_get+0x44>)
 8004aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004abe:	bf00      	nop
 8004ac0:	08004ad1 	.word	0x08004ad1
 8004ac4:	08004ad9 	.word	0x08004ad9
 8004ac8:	08004ae1 	.word	0x08004ae1
 8004acc:	08004ae9 	.word	0x08004ae9
    {
      case LSM6DSOX_ODR_PRGS_12Hz5:
        *val = LSM6DSOX_ODR_PRGS_12Hz5;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	701a      	strb	r2, [r3, #0]
        break;
 8004ad6:	e00f      	b.n	8004af8 <lsm6dsox_mlc_data_rate_get+0x7c>

      case LSM6DSOX_ODR_PRGS_26Hz:
        *val = LSM6DSOX_ODR_PRGS_26Hz;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	2201      	movs	r2, #1
 8004adc:	701a      	strb	r2, [r3, #0]
        break;
 8004ade:	e00b      	b.n	8004af8 <lsm6dsox_mlc_data_rate_get+0x7c>

      case LSM6DSOX_ODR_PRGS_52Hz:
        *val = LSM6DSOX_ODR_PRGS_52Hz;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	701a      	strb	r2, [r3, #0]
        break;
 8004ae6:	e007      	b.n	8004af8 <lsm6dsox_mlc_data_rate_get+0x7c>

      case LSM6DSOX_ODR_PRGS_104Hz:
        *val = LSM6DSOX_ODR_PRGS_104Hz;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	2203      	movs	r2, #3
 8004aec:	701a      	strb	r2, [r3, #0]
        break;
 8004aee:	e003      	b.n	8004af8 <lsm6dsox_mlc_data_rate_get+0x7c>

      default:
        *val = LSM6DSOX_ODR_PRGS_12Hz5;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	2200      	movs	r2, #0
 8004af4:	701a      	strb	r2, [r3, #0]
        break;
 8004af6:	bf00      	nop
    }

    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8004af8:	2100      	movs	r1, #0
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7ff fdef 	bl	80046de <lsm6dsox_mem_bank_set>
 8004b00:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004b02:	68fb      	ldr	r3, [r7, #12]
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <lsm6dsox_pin_int1_route_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_pin_int1_route_set(stmdev_ctx_t *ctx,
                                    lsm6dsox_pin_int1_route_t val)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b092      	sub	sp, #72	; 0x48
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	1d3b      	adds	r3, r7, #4
 8004b16:	e883 0006 	stmia.w	r3, {r1, r2}
  lsm6dsox_tap_cfg2_t        tap_cfg2;
  lsm6dsox_md2_cfg_t         md2_cfg;
  lsm6dsox_md1_cfg_t         md1_cfg;
  lsm6dsox_ctrl4_c_t         ctrl4_c;
  int32_t                    ret;
  int1_ctrl.int1_drdy_xl   = val.drdy_xl;
 8004b1a:	793b      	ldrb	r3, [r7, #4]
 8004b1c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004b20:	b2da      	uxtb	r2, r3
 8004b22:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004b26:	f362 0300 	bfi	r3, r2, #0, #1
 8004b2a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  int1_ctrl.int1_drdy_g    = val.drdy_g;
 8004b2e:	793b      	ldrb	r3, [r7, #4]
 8004b30:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004b34:	b2da      	uxtb	r2, r3
 8004b36:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004b3a:	f362 0341 	bfi	r3, r2, #1, #1
 8004b3e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  int1_ctrl.int1_boot      = val.boot;
 8004b42:	793b      	ldrb	r3, [r7, #4]
 8004b44:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004b48:	b2da      	uxtb	r2, r3
 8004b4a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004b4e:	f362 0382 	bfi	r3, r2, #2, #1
 8004b52:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  int1_ctrl.int1_fifo_th   = val.fifo_th;
 8004b56:	793b      	ldrb	r3, [r7, #4]
 8004b58:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004b5c:	b2da      	uxtb	r2, r3
 8004b5e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004b62:	f362 03c3 	bfi	r3, r2, #3, #1
 8004b66:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  int1_ctrl.int1_fifo_ovr  = val.fifo_ovr;
 8004b6a:	793b      	ldrb	r3, [r7, #4]
 8004b6c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004b70:	b2da      	uxtb	r2, r3
 8004b72:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004b76:	f362 1304 	bfi	r3, r2, #4, #1
 8004b7a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  int1_ctrl.int1_fifo_full = val.fifo_full;
 8004b7e:	793b      	ldrb	r3, [r7, #4]
 8004b80:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004b84:	b2da      	uxtb	r2, r3
 8004b86:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004b8a:	f362 1345 	bfi	r3, r2, #5, #1
 8004b8e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  int1_ctrl.int1_cnt_bdr   = val.fifo_bdr;
 8004b92:	793b      	ldrb	r3, [r7, #4]
 8004b94:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004b9e:	f362 1386 	bfi	r3, r2, #6, #1
 8004ba2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  int1_ctrl.den_drdy_flag  = val.den_flag;
 8004ba6:	797b      	ldrb	r3, [r7, #5]
 8004ba8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004bac:	b2da      	uxtb	r2, r3
 8004bae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004bb2:	f362 13c7 	bfi	r3, r2, #7, #1
 8004bb6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  md1_cfg.int1_shub         = val.sh_endop;
 8004bba:	797b      	ldrb	r3, [r7, #5]
 8004bbc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004bc0:	b2da      	uxtb	r2, r3
 8004bc2:	7e3b      	ldrb	r3, [r7, #24]
 8004bc4:	f362 0300 	bfi	r3, r2, #0, #1
 8004bc8:	763b      	strb	r3, [r7, #24]
  md1_cfg.int1_6d           = val.six_d;
 8004bca:	797b      	ldrb	r3, [r7, #5]
 8004bcc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	7e3b      	ldrb	r3, [r7, #24]
 8004bd4:	f362 0382 	bfi	r3, r2, #2, #1
 8004bd8:	763b      	strb	r3, [r7, #24]
  md1_cfg.int1_double_tap   = val.double_tap;
 8004bda:	797b      	ldrb	r3, [r7, #5]
 8004bdc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004be0:	b2da      	uxtb	r2, r3
 8004be2:	7e3b      	ldrb	r3, [r7, #24]
 8004be4:	f362 03c3 	bfi	r3, r2, #3, #1
 8004be8:	763b      	strb	r3, [r7, #24]
  md1_cfg.int1_ff           = val.free_fall;
 8004bea:	797b      	ldrb	r3, [r7, #5]
 8004bec:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	7e3b      	ldrb	r3, [r7, #24]
 8004bf4:	f362 1304 	bfi	r3, r2, #4, #1
 8004bf8:	763b      	strb	r3, [r7, #24]
  md1_cfg.int1_wu           = val.wake_up;
 8004bfa:	797b      	ldrb	r3, [r7, #5]
 8004bfc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004c00:	b2da      	uxtb	r2, r3
 8004c02:	7e3b      	ldrb	r3, [r7, #24]
 8004c04:	f362 1345 	bfi	r3, r2, #5, #1
 8004c08:	763b      	strb	r3, [r7, #24]
  md1_cfg.int1_single_tap   = val.single_tap;
 8004c0a:	797b      	ldrb	r3, [r7, #5]
 8004c0c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004c10:	b2da      	uxtb	r2, r3
 8004c12:	7e3b      	ldrb	r3, [r7, #24]
 8004c14:	f362 1386 	bfi	r3, r2, #6, #1
 8004c18:	763b      	strb	r3, [r7, #24]
  md1_cfg.int1_sleep_change = val.sleep_change;
 8004c1a:	79bb      	ldrb	r3, [r7, #6]
 8004c1c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004c20:	b2da      	uxtb	r2, r3
 8004c22:	7e3b      	ldrb	r3, [r7, #24]
 8004c24:	f362 13c7 	bfi	r3, r2, #7, #1
 8004c28:	763b      	strb	r3, [r7, #24]
  emb_func_int1.not_used_01 = 0;
 8004c2a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004c2e:	f36f 0302 	bfc	r3, #0, #3
 8004c32:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  emb_func_int1.int1_step_detector = val.step_detector;
 8004c36:	79bb      	ldrb	r3, [r7, #6]
 8004c38:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004c3c:	b2da      	uxtb	r2, r3
 8004c3e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004c42:	f362 03c3 	bfi	r3, r2, #3, #1
 8004c46:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  emb_func_int1.int1_tilt          = val.tilt;
 8004c4a:	79bb      	ldrb	r3, [r7, #6]
 8004c4c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004c50:	b2da      	uxtb	r2, r3
 8004c52:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004c56:	f362 1304 	bfi	r3, r2, #4, #1
 8004c5a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  emb_func_int1.int1_sig_mot       = val.sig_mot;
 8004c5e:	79bb      	ldrb	r3, [r7, #6]
 8004c60:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004c64:	b2da      	uxtb	r2, r3
 8004c66:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004c6a:	f362 1345 	bfi	r3, r2, #5, #1
 8004c6e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  emb_func_int1.not_used_02 = 0;
 8004c72:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004c76:	f36f 1386 	bfc	r3, #6, #1
 8004c7a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  emb_func_int1.int1_fsm_lc        = val.fsm_lc;
 8004c7e:	79bb      	ldrb	r3, [r7, #6]
 8004c80:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004c84:	b2da      	uxtb	r2, r3
 8004c86:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004c8a:	f362 13c7 	bfi	r3, r2, #7, #1
 8004c8e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  fsm_int1_a.int1_fsm1 = val.fsm1;
 8004c92:	79bb      	ldrb	r3, [r7, #6]
 8004c94:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004c98:	b2da      	uxtb	r2, r3
 8004c9a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004c9e:	f362 0300 	bfi	r3, r2, #0, #1
 8004ca2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  fsm_int1_a.int1_fsm2 = val.fsm2;
 8004ca6:	79bb      	ldrb	r3, [r7, #6]
 8004ca8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004cac:	b2da      	uxtb	r2, r3
 8004cae:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004cb2:	f362 0341 	bfi	r3, r2, #1, #1
 8004cb6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  fsm_int1_a.int1_fsm3 = val.fsm3;
 8004cba:	79bb      	ldrb	r3, [r7, #6]
 8004cbc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004cc0:	b2da      	uxtb	r2, r3
 8004cc2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004cc6:	f362 0382 	bfi	r3, r2, #2, #1
 8004cca:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  fsm_int1_a.int1_fsm4 = val.fsm4;
 8004cce:	79fb      	ldrb	r3, [r7, #7]
 8004cd0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004cd4:	b2da      	uxtb	r2, r3
 8004cd6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004cda:	f362 03c3 	bfi	r3, r2, #3, #1
 8004cde:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  fsm_int1_a.int1_fsm5 = val.fsm5;
 8004ce2:	79fb      	ldrb	r3, [r7, #7]
 8004ce4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004ce8:	b2da      	uxtb	r2, r3
 8004cea:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004cee:	f362 1304 	bfi	r3, r2, #4, #1
 8004cf2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  fsm_int1_a.int1_fsm6 = val.fsm6;
 8004cf6:	79fb      	ldrb	r3, [r7, #7]
 8004cf8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004cfc:	b2da      	uxtb	r2, r3
 8004cfe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004d02:	f362 1345 	bfi	r3, r2, #5, #1
 8004d06:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  fsm_int1_a.int1_fsm7 = val.fsm7;
 8004d0a:	79fb      	ldrb	r3, [r7, #7]
 8004d0c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004d16:	f362 1386 	bfi	r3, r2, #6, #1
 8004d1a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  fsm_int1_a.int1_fsm8 = val.fsm8;
 8004d1e:	79fb      	ldrb	r3, [r7, #7]
 8004d20:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004d24:	b2da      	uxtb	r2, r3
 8004d26:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004d2a:	f362 13c7 	bfi	r3, r2, #7, #1
 8004d2e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  fsm_int1_b.int1_fsm9  = val.fsm9 ;
 8004d32:	79fb      	ldrb	r3, [r7, #7]
 8004d34:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004d38:	b2da      	uxtb	r2, r3
 8004d3a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004d3e:	f362 13c7 	bfi	r3, r2, #7, #1
 8004d42:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  fsm_int1_b.int1_fsm10 = val.fsm10;
 8004d46:	79fb      	ldrb	r3, [r7, #7]
 8004d48:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004d4c:	b2da      	uxtb	r2, r3
 8004d4e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004d52:	f362 1386 	bfi	r3, r2, #6, #1
 8004d56:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  fsm_int1_b.int1_fsm11 = val.fsm11;
 8004d5a:	79fb      	ldrb	r3, [r7, #7]
 8004d5c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004d60:	b2da      	uxtb	r2, r3
 8004d62:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004d66:	f362 1345 	bfi	r3, r2, #5, #1
 8004d6a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  fsm_int1_b.int1_fsm12 = val.fsm12;
 8004d6e:	7a3b      	ldrb	r3, [r7, #8]
 8004d70:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004d74:	b2da      	uxtb	r2, r3
 8004d76:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004d7a:	f362 1304 	bfi	r3, r2, #4, #1
 8004d7e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  fsm_int1_b.int1_fsm13 = val.fsm13;
 8004d82:	7a3b      	ldrb	r3, [r7, #8]
 8004d84:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004d88:	b2da      	uxtb	r2, r3
 8004d8a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004d8e:	f362 03c3 	bfi	r3, r2, #3, #1
 8004d92:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  fsm_int1_b.int1_fsm14 = val.fsm14;
 8004d96:	7a3b      	ldrb	r3, [r7, #8]
 8004d98:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004d9c:	b2da      	uxtb	r2, r3
 8004d9e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004da2:	f362 0382 	bfi	r3, r2, #2, #1
 8004da6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  fsm_int1_b.int1_fsm15 = val.fsm15;
 8004daa:	7a3b      	ldrb	r3, [r7, #8]
 8004dac:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004db0:	b2da      	uxtb	r2, r3
 8004db2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004db6:	f362 0341 	bfi	r3, r2, #1, #1
 8004dba:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  fsm_int1_b.int1_fsm16 = val.fsm16;
 8004dbe:	7a3b      	ldrb	r3, [r7, #8]
 8004dc0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004dc4:	b2da      	uxtb	r2, r3
 8004dc6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004dca:	f362 0300 	bfi	r3, r2, #0, #1
 8004dce:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  mlc_int1.int1_mlc1 = val.mlc1;
 8004dd2:	7a3b      	ldrb	r3, [r7, #8]
 8004dd4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004dd8:	b2da      	uxtb	r2, r3
 8004dda:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004dde:	f362 0300 	bfi	r3, r2, #0, #1
 8004de2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  mlc_int1.int1_mlc2 = val.mlc2;
 8004de6:	7a3b      	ldrb	r3, [r7, #8]
 8004de8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004dec:	b2da      	uxtb	r2, r3
 8004dee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004df2:	f362 0341 	bfi	r3, r2, #1, #1
 8004df6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  mlc_int1.int1_mlc3 = val.mlc3;
 8004dfa:	7a3b      	ldrb	r3, [r7, #8]
 8004dfc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004e00:	b2da      	uxtb	r2, r3
 8004e02:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004e06:	f362 0382 	bfi	r3, r2, #2, #1
 8004e0a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  mlc_int1.int1_mlc4 = val.mlc4;
 8004e0e:	7a7b      	ldrb	r3, [r7, #9]
 8004e10:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004e1a:	f362 03c3 	bfi	r3, r2, #3, #1
 8004e1e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  mlc_int1.int1_mlc5 = val.mlc5;
 8004e22:	7a7b      	ldrb	r3, [r7, #9]
 8004e24:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004e28:	b2da      	uxtb	r2, r3
 8004e2a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004e2e:	f362 1304 	bfi	r3, r2, #4, #1
 8004e32:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  mlc_int1.int1_mlc6 = val.mlc6;
 8004e36:	7a7b      	ldrb	r3, [r7, #9]
 8004e38:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004e3c:	b2da      	uxtb	r2, r3
 8004e3e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004e42:	f362 1345 	bfi	r3, r2, #5, #1
 8004e46:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  mlc_int1.int1_mlc7 = val.mlc7;
 8004e4a:	7a7b      	ldrb	r3, [r7, #9]
 8004e4c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004e50:	b2da      	uxtb	r2, r3
 8004e52:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004e56:	f362 1386 	bfi	r3, r2, #6, #1
 8004e5a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  mlc_int1.int1_mlc8 = val.mlc8;
 8004e5e:	7a7b      	ldrb	r3, [r7, #9]
 8004e60:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004e64:	b2da      	uxtb	r2, r3
 8004e66:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004e6a:	f362 13c7 	bfi	r3, r2, #7, #1
 8004e6e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8004e72:	f107 0214 	add.w	r2, r7, #20
 8004e76:	2301      	movs	r3, #1
 8004e78:	2113      	movs	r1, #19
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f7fe fe96 	bl	8003bac <lsm6dsox_read_reg>
 8004e80:	6478      	str	r0, [r7, #68]	; 0x44

  if (ret == 0)
 8004e82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d11c      	bne.n	8004ec2 <lsm6dsox_pin_int1_route_set+0x3b6>
  {
    if ((val.drdy_temp | val.timestamp) != PROPERTY_DISABLE)
 8004e88:	793b      	ldrb	r3, [r7, #4]
 8004e8a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004e8e:	b2da      	uxtb	r2, r3
 8004e90:	797b      	ldrb	r3, [r7, #5]
 8004e92:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d004      	beq.n	8004eaa <lsm6dsox_pin_int1_route_set+0x39e>
    {
      ctrl4_c.int2_on_int1 = PROPERTY_ENABLE;
 8004ea0:	7d3b      	ldrb	r3, [r7, #20]
 8004ea2:	f043 0320 	orr.w	r3, r3, #32
 8004ea6:	753b      	strb	r3, [r7, #20]
 8004ea8:	e003      	b.n	8004eb2 <lsm6dsox_pin_int1_route_set+0x3a6>
    }

    else
    {
      ctrl4_c.int2_on_int1 = PROPERTY_DISABLE;
 8004eaa:	7d3b      	ldrb	r3, [r7, #20]
 8004eac:	f36f 1345 	bfc	r3, #5, #1
 8004eb0:	753b      	strb	r3, [r7, #20]
    }

    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8004eb2:	f107 0214 	add.w	r2, r7, #20
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	2113      	movs	r1, #19
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f7fe fe8e 	bl	8003bdc <lsm6dsox_write_reg>
 8004ec0:	6478      	str	r0, [r7, #68]	; 0x44
  }

  if (ret == 0)
 8004ec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d104      	bne.n	8004ed2 <lsm6dsox_pin_int1_route_set+0x3c6>
  {
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8004ec8:	2102      	movs	r1, #2
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f7ff fc07 	bl	80046de <lsm6dsox_mem_bank_set>
 8004ed0:	6478      	str	r0, [r7, #68]	; 0x44
  }

  if (ret == 0)
 8004ed2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d107      	bne.n	8004ee8 <lsm6dsox_pin_int1_route_set+0x3dc>
  {
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_MLC_INT1,
 8004ed8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004edc:	2301      	movs	r3, #1
 8004ede:	210d      	movs	r1, #13
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f7fe fe7b 	bl	8003bdc <lsm6dsox_write_reg>
 8004ee6:	6478      	str	r0, [r7, #68]	; 0x44
                             (uint8_t *)&mlc_int1, 1);
  }

  if (ret == 0)
 8004ee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d107      	bne.n	8004efe <lsm6dsox_pin_int1_route_set+0x3f2>
  {
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_EMB_FUNC_INT1,
 8004eee:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	210a      	movs	r1, #10
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f7fe fe70 	bl	8003bdc <lsm6dsox_write_reg>
 8004efc:	6478      	str	r0, [r7, #68]	; 0x44
                             (uint8_t *)&emb_func_int1, 1);
  }

  if (ret == 0)
 8004efe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d107      	bne.n	8004f14 <lsm6dsox_pin_int1_route_set+0x408>
  {
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_FSM_INT1_A,
 8004f04:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004f08:	2301      	movs	r3, #1
 8004f0a:	210b      	movs	r1, #11
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f7fe fe65 	bl	8003bdc <lsm6dsox_write_reg>
 8004f12:	6478      	str	r0, [r7, #68]	; 0x44
                             (uint8_t *)&fsm_int1_a, 1);
  }

  if (ret == 0)
 8004f14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d107      	bne.n	8004f2a <lsm6dsox_pin_int1_route_set+0x41e>
  {
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_FSM_INT1_B,
 8004f1a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004f1e:	2301      	movs	r3, #1
 8004f20:	210c      	movs	r1, #12
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f7fe fe5a 	bl	8003bdc <lsm6dsox_write_reg>
 8004f28:	6478      	str	r0, [r7, #68]	; 0x44
                             (uint8_t *)&fsm_int1_b, 1);
  }

  if (ret == 0)
 8004f2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d104      	bne.n	8004f3a <lsm6dsox_pin_int1_route_set+0x42e>
  {
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8004f30:	2100      	movs	r1, #0
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f7ff fbd3 	bl	80046de <lsm6dsox_mem_bank_set>
 8004f38:	6478      	str	r0, [r7, #68]	; 0x44
  }

  if (ret == 0)
 8004f3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f040 80d5 	bne.w	80050ec <lsm6dsox_pin_int1_route_set+0x5e0>
  {
    if ((emb_func_int1.int1_fsm_lc
 8004f42:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004f46:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004f4a:	b2da      	uxtb	r2, r3
         | emb_func_int1.int1_sig_mot
 8004f4c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004f50:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	4313      	orrs	r3, r2
 8004f58:	b2da      	uxtb	r2, r3
         | emb_func_int1.int1_step_detector
 8004f5a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004f5e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	4313      	orrs	r3, r2
 8004f66:	b2da      	uxtb	r2, r3
         | emb_func_int1.int1_tilt
 8004f68:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004f6c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	4313      	orrs	r3, r2
 8004f74:	b2da      	uxtb	r2, r3
         | fsm_int1_a.int1_fsm1
 8004f76:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004f7a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	4313      	orrs	r3, r2
 8004f82:	b2da      	uxtb	r2, r3
         | fsm_int1_a.int1_fsm2
 8004f84:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004f88:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	b2da      	uxtb	r2, r3
         | fsm_int1_a.int1_fsm3
 8004f92:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004f96:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	b2da      	uxtb	r2, r3
         | fsm_int1_a.int1_fsm4
 8004fa0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004fa4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	4313      	orrs	r3, r2
 8004fac:	b2da      	uxtb	r2, r3
         | fsm_int1_a.int1_fsm5
 8004fae:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004fb2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	b2da      	uxtb	r2, r3
         | fsm_int1_a.int1_fsm6
 8004fbc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004fc0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	b2da      	uxtb	r2, r3
         | fsm_int1_a.int1_fsm7
 8004fca:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004fce:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	b2da      	uxtb	r2, r3
         | fsm_int1_a.int1_fsm8
 8004fd8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004fdc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	b2da      	uxtb	r2, r3
         | fsm_int1_b.int1_fsm9
 8004fe6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004fea:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	b2da      	uxtb	r2, r3
         | fsm_int1_b.int1_fsm10
 8004ff4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004ff8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	4313      	orrs	r3, r2
 8005000:	b2da      	uxtb	r2, r3
         | fsm_int1_b.int1_fsm11
 8005002:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005006:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800500a:	b2db      	uxtb	r3, r3
 800500c:	4313      	orrs	r3, r2
 800500e:	b2da      	uxtb	r2, r3
         | fsm_int1_b.int1_fsm12
 8005010:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005014:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005018:	b2db      	uxtb	r3, r3
 800501a:	4313      	orrs	r3, r2
 800501c:	b2da      	uxtb	r2, r3
         | fsm_int1_b.int1_fsm13
 800501e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005022:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005026:	b2db      	uxtb	r3, r3
 8005028:	4313      	orrs	r3, r2
 800502a:	b2da      	uxtb	r2, r3
         | fsm_int1_b.int1_fsm14
 800502c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005030:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005034:	b2db      	uxtb	r3, r3
 8005036:	4313      	orrs	r3, r2
 8005038:	b2da      	uxtb	r2, r3
         | fsm_int1_b.int1_fsm15
 800503a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800503e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005042:	b2db      	uxtb	r3, r3
 8005044:	4313      	orrs	r3, r2
 8005046:	b2da      	uxtb	r2, r3
         | fsm_int1_b.int1_fsm16
 8005048:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800504c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005050:	b2db      	uxtb	r3, r3
 8005052:	4313      	orrs	r3, r2
 8005054:	b2da      	uxtb	r2, r3
         | mlc_int1.int1_mlc1
 8005056:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800505a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800505e:	b2db      	uxtb	r3, r3
 8005060:	4313      	orrs	r3, r2
 8005062:	b2da      	uxtb	r2, r3
         | mlc_int1.int1_mlc2
 8005064:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005068:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800506c:	b2db      	uxtb	r3, r3
 800506e:	4313      	orrs	r3, r2
 8005070:	b2da      	uxtb	r2, r3
         | mlc_int1.int1_mlc3
 8005072:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005076:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800507a:	b2db      	uxtb	r3, r3
 800507c:	4313      	orrs	r3, r2
 800507e:	b2da      	uxtb	r2, r3
         | mlc_int1.int1_mlc4
 8005080:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005084:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005088:	b2db      	uxtb	r3, r3
 800508a:	4313      	orrs	r3, r2
 800508c:	b2da      	uxtb	r2, r3
         | mlc_int1.int1_mlc5
 800508e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005092:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005096:	b2db      	uxtb	r3, r3
 8005098:	4313      	orrs	r3, r2
 800509a:	b2da      	uxtb	r2, r3
         | mlc_int1.int1_mlc6
 800509c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80050a0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	4313      	orrs	r3, r2
 80050a8:	b2da      	uxtb	r2, r3
         | mlc_int1.int1_mlc7
 80050aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80050ae:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	4313      	orrs	r3, r2
 80050b6:	b2da      	uxtb	r2, r3
         | mlc_int1.int1_mlc8) != PROPERTY_DISABLE)
 80050b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80050bc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	4313      	orrs	r3, r2
 80050c4:	b2db      	uxtb	r3, r3
    if ((emb_func_int1.int1_fsm_lc
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d004      	beq.n	80050d4 <lsm6dsox_pin_int1_route_set+0x5c8>
    {
      md1_cfg.int1_emb_func = PROPERTY_ENABLE;
 80050ca:	7e3b      	ldrb	r3, [r7, #24]
 80050cc:	f043 0302 	orr.w	r3, r3, #2
 80050d0:	763b      	strb	r3, [r7, #24]
 80050d2:	e003      	b.n	80050dc <lsm6dsox_pin_int1_route_set+0x5d0>
    }

    else
    {
      md1_cfg.int1_emb_func = PROPERTY_DISABLE;
 80050d4:	7e3b      	ldrb	r3, [r7, #24]
 80050d6:	f36f 0341 	bfc	r3, #1, #1
 80050da:	763b      	strb	r3, [r7, #24]
    }

    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_INT1_CTRL,
 80050dc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80050e0:	2301      	movs	r3, #1
 80050e2:	210d      	movs	r1, #13
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f7fe fd79 	bl	8003bdc <lsm6dsox_write_reg>
 80050ea:	6478      	str	r0, [r7, #68]	; 0x44
                             (uint8_t *)&int1_ctrl, 1);
  }

  if (ret == 0)
 80050ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d107      	bne.n	8005102 <lsm6dsox_pin_int1_route_set+0x5f6>
  {
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 80050f2:	f107 0218 	add.w	r2, r7, #24
 80050f6:	2301      	movs	r3, #1
 80050f8:	215e      	movs	r1, #94	; 0x5e
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f7fe fd6e 	bl	8003bdc <lsm6dsox_write_reg>
 8005100:	6478      	str	r0, [r7, #68]	; 0x44
  }

  if (ret == 0)
 8005102:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005104:	2b00      	cmp	r3, #0
 8005106:	d107      	bne.n	8005118 <lsm6dsox_pin_int1_route_set+0x60c>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_INT2_CTRL,
 8005108:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800510c:	2301      	movs	r3, #1
 800510e:	210e      	movs	r1, #14
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f7fe fd4b 	bl	8003bac <lsm6dsox_read_reg>
 8005116:	6478      	str	r0, [r7, #68]	; 0x44
                            (uint8_t *)&int2_ctrl, 1);
  }

  if (ret == 0)
 8005118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800511a:	2b00      	cmp	r3, #0
 800511c:	d111      	bne.n	8005142 <lsm6dsox_pin_int1_route_set+0x636>
  {
    int2_ctrl.int2_drdy_temp = val.drdy_temp;
 800511e:	793b      	ldrb	r3, [r7, #4]
 8005120:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005124:	b2da      	uxtb	r2, r3
 8005126:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800512a:	f362 0382 	bfi	r3, r2, #2, #1
 800512e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_INT2_CTRL,
 8005132:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005136:	2301      	movs	r3, #1
 8005138:	210e      	movs	r1, #14
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f7fe fd4e 	bl	8003bdc <lsm6dsox_write_reg>
 8005140:	6478      	str	r0, [r7, #68]	; 0x44
                             (uint8_t *)&int2_ctrl, 1);
  }

  if (ret == 0)
 8005142:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005144:	2b00      	cmp	r3, #0
 8005146:	d107      	bne.n	8005158 <lsm6dsox_pin_int1_route_set+0x64c>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8005148:	f107 021c 	add.w	r2, r7, #28
 800514c:	2301      	movs	r3, #1
 800514e:	215f      	movs	r1, #95	; 0x5f
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f7fe fd2b 	bl	8003bac <lsm6dsox_read_reg>
 8005156:	6478      	str	r0, [r7, #68]	; 0x44
  }

  if (ret == 0)
 8005158:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10f      	bne.n	800517e <lsm6dsox_pin_int1_route_set+0x672>
  {
    md2_cfg.int2_timestamp = val.timestamp;
 800515e:	797b      	ldrb	r3, [r7, #5]
 8005160:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005164:	b2da      	uxtb	r2, r3
 8005166:	7f3b      	ldrb	r3, [r7, #28]
 8005168:	f362 0300 	bfi	r3, r2, #0, #1
 800516c:	773b      	strb	r3, [r7, #28]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 800516e:	f107 021c 	add.w	r2, r7, #28
 8005172:	2301      	movs	r3, #1
 8005174:	215f      	movs	r1, #95	; 0x5f
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f7fe fd30 	bl	8003bdc <lsm6dsox_write_reg>
 800517c:	6478      	str	r0, [r7, #68]	; 0x44
  }

  if (ret == 0)
 800517e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005180:	2b00      	cmp	r3, #0
 8005182:	d107      	bne.n	8005194 <lsm6dsox_pin_int1_route_set+0x688>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_TAP_CFG2, (uint8_t *) &tap_cfg2, 1);
 8005184:	f107 0220 	add.w	r2, r7, #32
 8005188:	2301      	movs	r3, #1
 800518a:	2158      	movs	r1, #88	; 0x58
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f7fe fd0d 	bl	8003bac <lsm6dsox_read_reg>
 8005192:	6478      	str	r0, [r7, #68]	; 0x44
  }

  if (ret == 0)
 8005194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005196:	2b00      	cmp	r3, #0
 8005198:	d107      	bne.n	80051aa <lsm6dsox_pin_int1_route_set+0x69e>
  {
    ret = lsm6dsox_pin_int2_route_get(ctx, NULL, &pin_int2_route);
 800519a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800519e:	461a      	mov	r2, r3
 80051a0:	2100      	movs	r1, #0
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f000 fb10 	bl	80057c8 <lsm6dsox_pin_int2_route_get>
 80051a8:	6478      	str	r0, [r7, #68]	; 0x44
  }

  if (ret == 0)
 80051aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f040 80d2 	bne.w	8005356 <lsm6dsox_pin_int1_route_set+0x84a>
  {
    if ((pin_int2_route.fifo_bdr
 80051b2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80051b6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80051ba:	b2da      	uxtb	r2, r3
         | pin_int2_route.drdy_g
 80051bc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80051c0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	4313      	orrs	r3, r2
 80051c8:	b2da      	uxtb	r2, r3
         | pin_int2_route.drdy_temp
 80051ca:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80051ce:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	4313      	orrs	r3, r2
 80051d6:	b2da      	uxtb	r2, r3
         | pin_int2_route.drdy_xl
 80051d8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80051dc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	4313      	orrs	r3, r2
 80051e4:	b2da      	uxtb	r2, r3
         | pin_int2_route.fifo_full
 80051e6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80051ea:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	4313      	orrs	r3, r2
 80051f2:	b2da      	uxtb	r2, r3
         | pin_int2_route.fifo_ovr
 80051f4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80051f8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	4313      	orrs	r3, r2
 8005200:	b2da      	uxtb	r2, r3
         | pin_int2_route.fifo_th
 8005202:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005206:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800520a:	b2db      	uxtb	r3, r3
 800520c:	4313      	orrs	r3, r2
 800520e:	b2da      	uxtb	r2, r3
         | pin_int2_route.six_d
 8005210:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8005214:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005218:	b2db      	uxtb	r3, r3
 800521a:	4313      	orrs	r3, r2
 800521c:	b2da      	uxtb	r2, r3
         | pin_int2_route.double_tap
 800521e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8005222:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005226:	b2db      	uxtb	r3, r3
 8005228:	4313      	orrs	r3, r2
 800522a:	b2da      	uxtb	r2, r3
         | pin_int2_route.free_fall
 800522c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8005230:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005234:	b2db      	uxtb	r3, r3
 8005236:	4313      	orrs	r3, r2
 8005238:	b2da      	uxtb	r2, r3
         | pin_int2_route.wake_up
 800523a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800523e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005242:	b2db      	uxtb	r3, r3
 8005244:	4313      	orrs	r3, r2
 8005246:	b2da      	uxtb	r2, r3
         | pin_int2_route.single_tap
 8005248:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800524c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005250:	b2db      	uxtb	r3, r3
 8005252:	4313      	orrs	r3, r2
 8005254:	b2da      	uxtb	r2, r3
         | pin_int2_route.sleep_change
 8005256:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800525a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800525e:	b2db      	uxtb	r3, r3
 8005260:	4313      	orrs	r3, r2
 8005262:	b2da      	uxtb	r2, r3
         | int1_ctrl.den_drdy_flag
 8005264:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005268:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800526c:	b2db      	uxtb	r3, r3
 800526e:	4313      	orrs	r3, r2
 8005270:	b2da      	uxtb	r2, r3
         | int1_ctrl.int1_boot
 8005272:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005276:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800527a:	b2db      	uxtb	r3, r3
 800527c:	4313      	orrs	r3, r2
 800527e:	b2da      	uxtb	r2, r3
         | int1_ctrl.int1_cnt_bdr
 8005280:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005284:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005288:	b2db      	uxtb	r3, r3
 800528a:	4313      	orrs	r3, r2
 800528c:	b2da      	uxtb	r2, r3
         | int1_ctrl.int1_drdy_g
 800528e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005292:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005296:	b2db      	uxtb	r3, r3
 8005298:	4313      	orrs	r3, r2
 800529a:	b2da      	uxtb	r2, r3
         | int1_ctrl.int1_drdy_xl
 800529c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80052a0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	4313      	orrs	r3, r2
 80052a8:	b2da      	uxtb	r2, r3
         | int1_ctrl.int1_fifo_full
 80052aa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80052ae:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	4313      	orrs	r3, r2
 80052b6:	b2da      	uxtb	r2, r3
         | int1_ctrl.int1_fifo_ovr
 80052b8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80052bc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	4313      	orrs	r3, r2
 80052c4:	b2da      	uxtb	r2, r3
         | int1_ctrl.int1_fifo_th
 80052c6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80052ca:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	4313      	orrs	r3, r2
 80052d2:	b2da      	uxtb	r2, r3
         | md1_cfg.int1_shub
 80052d4:	7e3b      	ldrb	r3, [r7, #24]
 80052d6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	4313      	orrs	r3, r2
 80052de:	b2da      	uxtb	r2, r3
         | md1_cfg.int1_6d
 80052e0:	7e3b      	ldrb	r3, [r7, #24]
 80052e2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	4313      	orrs	r3, r2
 80052ea:	b2da      	uxtb	r2, r3
         | md1_cfg.int1_double_tap
 80052ec:	7e3b      	ldrb	r3, [r7, #24]
 80052ee:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	4313      	orrs	r3, r2
 80052f6:	b2da      	uxtb	r2, r3
         | md1_cfg.int1_ff
 80052f8:	7e3b      	ldrb	r3, [r7, #24]
 80052fa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	4313      	orrs	r3, r2
 8005302:	b2da      	uxtb	r2, r3
         | md1_cfg.int1_wu
 8005304:	7e3b      	ldrb	r3, [r7, #24]
 8005306:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800530a:	b2db      	uxtb	r3, r3
 800530c:	4313      	orrs	r3, r2
 800530e:	b2da      	uxtb	r2, r3
         | md1_cfg.int1_single_tap
 8005310:	7e3b      	ldrb	r3, [r7, #24]
 8005312:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005316:	b2db      	uxtb	r3, r3
 8005318:	4313      	orrs	r3, r2
 800531a:	b2da      	uxtb	r2, r3
         | md1_cfg.int1_sleep_change) != PROPERTY_DISABLE)
 800531c:	7e3b      	ldrb	r3, [r7, #24]
 800531e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005322:	b2db      	uxtb	r3, r3
 8005324:	4313      	orrs	r3, r2
 8005326:	b2db      	uxtb	r3, r3
    if ((pin_int2_route.fifo_bdr
 8005328:	2b00      	cmp	r3, #0
 800532a:	d006      	beq.n	800533a <lsm6dsox_pin_int1_route_set+0x82e>
    {
      tap_cfg2.interrupts_enable = PROPERTY_ENABLE;
 800532c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005334:	f887 3020 	strb.w	r3, [r7, #32]
 8005338:	e005      	b.n	8005346 <lsm6dsox_pin_int1_route_set+0x83a>
    }

    else
    {
      tap_cfg2.interrupts_enable = PROPERTY_DISABLE;
 800533a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800533e:	f36f 13c7 	bfc	r3, #7, #1
 8005342:	f887 3020 	strb.w	r3, [r7, #32]
    }

    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_TAP_CFG2,
 8005346:	f107 0220 	add.w	r2, r7, #32
 800534a:	2301      	movs	r3, #1
 800534c:	2158      	movs	r1, #88	; 0x58
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f7fe fc44 	bl	8003bdc <lsm6dsox_write_reg>
 8005354:	6478      	str	r0, [r7, #68]	; 0x44
                             (uint8_t *) &tap_cfg2, 1);
  }

  return ret;
 8005356:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005358:	4618      	mov	r0, r3
 800535a:	3748      	adds	r7, #72	; 0x48
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <lsm6dsox_pin_int1_route_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_pin_int1_route_get(stmdev_ctx_t *ctx,
                                    lsm6dsox_pin_int1_route_t *val)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b08c      	sub	sp, #48	; 0x30
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  lsm6dsox_mlc_int1_t        mlc_int1;
  lsm6dsox_md2_cfg_t         md2_cfg;
  lsm6dsox_md1_cfg_t         md1_cfg;
  lsm6dsox_ctrl4_c_t         ctrl4_c;
  int32_t                    ret;
  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 800536a:	2102      	movs	r1, #2
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f7ff f9b6 	bl	80046de <lsm6dsox_mem_bank_set>
 8005372:	62f8      	str	r0, [r7, #44]	; 0x2c

  if (ret == 0)
 8005374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005376:	2b00      	cmp	r3, #0
 8005378:	d107      	bne.n	800538a <lsm6dsox_pin_int1_route_get+0x2a>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_MLC_INT1,
 800537a:	f107 0214 	add.w	r2, r7, #20
 800537e:	2301      	movs	r3, #1
 8005380:	210d      	movs	r1, #13
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f7fe fc12 	bl	8003bac <lsm6dsox_read_reg>
 8005388:	62f8      	str	r0, [r7, #44]	; 0x2c
                            (uint8_t *)&mlc_int1, 1);
  }

  if (ret == 0)
 800538a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538c:	2b00      	cmp	r3, #0
 800538e:	d107      	bne.n	80053a0 <lsm6dsox_pin_int1_route_get+0x40>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_INT1,
 8005390:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005394:	2301      	movs	r3, #1
 8005396:	210a      	movs	r1, #10
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f7fe fc07 	bl	8003bac <lsm6dsox_read_reg>
 800539e:	62f8      	str	r0, [r7, #44]	; 0x2c
                            (uint8_t *)&emb_func_int1, 1);
  }

  if (ret == 0)
 80053a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d107      	bne.n	80053b6 <lsm6dsox_pin_int1_route_get+0x56>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FSM_INT1_A,
 80053a6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80053aa:	2301      	movs	r3, #1
 80053ac:	210b      	movs	r1, #11
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f7fe fbfc 	bl	8003bac <lsm6dsox_read_reg>
 80053b4:	62f8      	str	r0, [r7, #44]	; 0x2c
                            (uint8_t *)&fsm_int1_a, 1);
  }

  if (ret == 0)
 80053b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d107      	bne.n	80053cc <lsm6dsox_pin_int1_route_get+0x6c>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FSM_INT1_B,
 80053bc:	f107 0220 	add.w	r2, r7, #32
 80053c0:	2301      	movs	r3, #1
 80053c2:	210c      	movs	r1, #12
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f7fe fbf1 	bl	8003bac <lsm6dsox_read_reg>
 80053ca:	62f8      	str	r0, [r7, #44]	; 0x2c
                            (uint8_t *)&fsm_int1_b, 1);
  }

  if (ret == 0)
 80053cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d104      	bne.n	80053dc <lsm6dsox_pin_int1_route_get+0x7c>
  {
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 80053d2:	2100      	movs	r1, #0
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f7ff f982 	bl	80046de <lsm6dsox_mem_bank_set>
 80053da:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (ret == 0)
 80053dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d107      	bne.n	80053f2 <lsm6dsox_pin_int1_route_get+0x92>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_INT1_CTRL,
 80053e2:	f107 021c 	add.w	r2, r7, #28
 80053e6:	2301      	movs	r3, #1
 80053e8:	210d      	movs	r1, #13
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f7fe fbde 	bl	8003bac <lsm6dsox_read_reg>
 80053f0:	62f8      	str	r0, [r7, #44]	; 0x2c
                            (uint8_t *)&int1_ctrl, 1);
  }

  if (ret == 0)
 80053f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d107      	bne.n	8005408 <lsm6dsox_pin_int1_route_get+0xa8>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 80053f8:	f107 020c 	add.w	r2, r7, #12
 80053fc:	2301      	movs	r3, #1
 80053fe:	215e      	movs	r1, #94	; 0x5e
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f7fe fbd3 	bl	8003bac <lsm6dsox_read_reg>
 8005406:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (ret == 0)
 8005408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540a:	2b00      	cmp	r3, #0
 800540c:	d107      	bne.n	800541e <lsm6dsox_pin_int1_route_get+0xbe>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 800540e:	f107 0208 	add.w	r2, r7, #8
 8005412:	2301      	movs	r3, #1
 8005414:	2113      	movs	r1, #19
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f7fe fbc8 	bl	8003bac <lsm6dsox_read_reg>
 800541c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (ctrl4_c.int2_on_int1 == PROPERTY_ENABLE)
 800541e:	7a3b      	ldrb	r3, [r7, #8]
 8005420:	f003 0320 	and.w	r3, r3, #32
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d028      	beq.n	800547c <lsm6dsox_pin_int1_route_get+0x11c>
  {
    if (ret == 0)
 800542a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800542c:	2b00      	cmp	r3, #0
 800542e:	d110      	bne.n	8005452 <lsm6dsox_pin_int1_route_get+0xf2>
    {
      ret = lsm6dsox_read_reg(ctx, LSM6DSOX_INT2_CTRL,
 8005430:	f107 0218 	add.w	r2, r7, #24
 8005434:	2301      	movs	r3, #1
 8005436:	210e      	movs	r1, #14
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f7fe fbb7 	bl	8003bac <lsm6dsox_read_reg>
 800543e:	62f8      	str	r0, [r7, #44]	; 0x2c
                              (uint8_t *)&int2_ctrl, 1);
      val->drdy_temp = int2_ctrl.int2_drdy_temp;
 8005440:	7e3b      	ldrb	r3, [r7, #24]
 8005442:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005446:	b2d9      	uxtb	r1, r3
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	7813      	ldrb	r3, [r2, #0]
 800544c:	f361 0382 	bfi	r3, r1, #2, #1
 8005450:	7013      	strb	r3, [r2, #0]
    }

    if (ret == 0)
 8005452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005454:	2b00      	cmp	r3, #0
 8005456:	d11b      	bne.n	8005490 <lsm6dsox_pin_int1_route_get+0x130>
    {
      ret = lsm6dsox_read_reg(ctx, LSM6DSOX_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8005458:	f107 0210 	add.w	r2, r7, #16
 800545c:	2301      	movs	r3, #1
 800545e:	215f      	movs	r1, #95	; 0x5f
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f7fe fba3 	bl	8003bac <lsm6dsox_read_reg>
 8005466:	62f8      	str	r0, [r7, #44]	; 0x2c
      val->timestamp = md2_cfg.int2_timestamp;
 8005468:	7c3b      	ldrb	r3, [r7, #16]
 800546a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800546e:	b2d9      	uxtb	r1, r3
 8005470:	683a      	ldr	r2, [r7, #0]
 8005472:	7853      	ldrb	r3, [r2, #1]
 8005474:	f361 0382 	bfi	r3, r1, #2, #1
 8005478:	7053      	strb	r3, [r2, #1]
 800547a:	e009      	b.n	8005490 <lsm6dsox_pin_int1_route_get+0x130>
    }
  }

  else
  {
    val->drdy_temp = PROPERTY_DISABLE;
 800547c:	683a      	ldr	r2, [r7, #0]
 800547e:	7813      	ldrb	r3, [r2, #0]
 8005480:	f36f 0382 	bfc	r3, #2, #1
 8005484:	7013      	strb	r3, [r2, #0]
    val->timestamp = PROPERTY_DISABLE;
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	7853      	ldrb	r3, [r2, #1]
 800548a:	f36f 0382 	bfc	r3, #2, #1
 800548e:	7053      	strb	r3, [r2, #1]
  }

  val->drdy_xl   = int1_ctrl.int1_drdy_xl;
 8005490:	7f3b      	ldrb	r3, [r7, #28]
 8005492:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005496:	b2d9      	uxtb	r1, r3
 8005498:	683a      	ldr	r2, [r7, #0]
 800549a:	7813      	ldrb	r3, [r2, #0]
 800549c:	f361 0300 	bfi	r3, r1, #0, #1
 80054a0:	7013      	strb	r3, [r2, #0]
  val->drdy_g    = int1_ctrl.int1_drdy_g;
 80054a2:	7f3b      	ldrb	r3, [r7, #28]
 80054a4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80054a8:	b2d9      	uxtb	r1, r3
 80054aa:	683a      	ldr	r2, [r7, #0]
 80054ac:	7813      	ldrb	r3, [r2, #0]
 80054ae:	f361 0341 	bfi	r3, r1, #1, #1
 80054b2:	7013      	strb	r3, [r2, #0]
  val->boot      = int1_ctrl.int1_boot;
 80054b4:	7f3b      	ldrb	r3, [r7, #28]
 80054b6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80054ba:	b2d9      	uxtb	r1, r3
 80054bc:	683a      	ldr	r2, [r7, #0]
 80054be:	7813      	ldrb	r3, [r2, #0]
 80054c0:	f361 03c3 	bfi	r3, r1, #3, #1
 80054c4:	7013      	strb	r3, [r2, #0]
  val->fifo_th   = int1_ctrl.int1_fifo_th;
 80054c6:	7f3b      	ldrb	r3, [r7, #28]
 80054c8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80054cc:	b2d9      	uxtb	r1, r3
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	7813      	ldrb	r3, [r2, #0]
 80054d2:	f361 1304 	bfi	r3, r1, #4, #1
 80054d6:	7013      	strb	r3, [r2, #0]
  val->fifo_ovr  = int1_ctrl.int1_fifo_ovr;
 80054d8:	7f3b      	ldrb	r3, [r7, #28]
 80054da:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80054de:	b2d9      	uxtb	r1, r3
 80054e0:	683a      	ldr	r2, [r7, #0]
 80054e2:	7813      	ldrb	r3, [r2, #0]
 80054e4:	f361 1345 	bfi	r3, r1, #5, #1
 80054e8:	7013      	strb	r3, [r2, #0]
  val->fifo_full = int1_ctrl.int1_fifo_full;
 80054ea:	7f3b      	ldrb	r3, [r7, #28]
 80054ec:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80054f0:	b2d9      	uxtb	r1, r3
 80054f2:	683a      	ldr	r2, [r7, #0]
 80054f4:	7813      	ldrb	r3, [r2, #0]
 80054f6:	f361 1386 	bfi	r3, r1, #6, #1
 80054fa:	7013      	strb	r3, [r2, #0]
  val->fifo_bdr  = int1_ctrl.int1_cnt_bdr;
 80054fc:	7f3b      	ldrb	r3, [r7, #28]
 80054fe:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005502:	b2d9      	uxtb	r1, r3
 8005504:	683a      	ldr	r2, [r7, #0]
 8005506:	7813      	ldrb	r3, [r2, #0]
 8005508:	f361 13c7 	bfi	r3, r1, #7, #1
 800550c:	7013      	strb	r3, [r2, #0]
  val->den_flag  = int1_ctrl.den_drdy_flag;
 800550e:	7f3b      	ldrb	r3, [r7, #28]
 8005510:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005514:	b2d9      	uxtb	r1, r3
 8005516:	683a      	ldr	r2, [r7, #0]
 8005518:	7853      	ldrb	r3, [r2, #1]
 800551a:	f361 0300 	bfi	r3, r1, #0, #1
 800551e:	7053      	strb	r3, [r2, #1]
  val->sh_endop     = md1_cfg.int1_shub;
 8005520:	7b3b      	ldrb	r3, [r7, #12]
 8005522:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005526:	b2d9      	uxtb	r1, r3
 8005528:	683a      	ldr	r2, [r7, #0]
 800552a:	7853      	ldrb	r3, [r2, #1]
 800552c:	f361 0341 	bfi	r3, r1, #1, #1
 8005530:	7053      	strb	r3, [r2, #1]
  val->six_d        = md1_cfg.int1_6d;
 8005532:	7b3b      	ldrb	r3, [r7, #12]
 8005534:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005538:	b2d9      	uxtb	r1, r3
 800553a:	683a      	ldr	r2, [r7, #0]
 800553c:	7853      	ldrb	r3, [r2, #1]
 800553e:	f361 03c3 	bfi	r3, r1, #3, #1
 8005542:	7053      	strb	r3, [r2, #1]
  val->double_tap   = md1_cfg.int1_double_tap;
 8005544:	7b3b      	ldrb	r3, [r7, #12]
 8005546:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800554a:	b2d9      	uxtb	r1, r3
 800554c:	683a      	ldr	r2, [r7, #0]
 800554e:	7853      	ldrb	r3, [r2, #1]
 8005550:	f361 1304 	bfi	r3, r1, #4, #1
 8005554:	7053      	strb	r3, [r2, #1]
  val->free_fall    = md1_cfg.int1_ff;
 8005556:	7b3b      	ldrb	r3, [r7, #12]
 8005558:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800555c:	b2d9      	uxtb	r1, r3
 800555e:	683a      	ldr	r2, [r7, #0]
 8005560:	7853      	ldrb	r3, [r2, #1]
 8005562:	f361 1345 	bfi	r3, r1, #5, #1
 8005566:	7053      	strb	r3, [r2, #1]
  val->wake_up      = md1_cfg.int1_wu;
 8005568:	7b3b      	ldrb	r3, [r7, #12]
 800556a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800556e:	b2d9      	uxtb	r1, r3
 8005570:	683a      	ldr	r2, [r7, #0]
 8005572:	7853      	ldrb	r3, [r2, #1]
 8005574:	f361 1386 	bfi	r3, r1, #6, #1
 8005578:	7053      	strb	r3, [r2, #1]
  val->single_tap   = md1_cfg.int1_single_tap;
 800557a:	7b3b      	ldrb	r3, [r7, #12]
 800557c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005580:	b2d9      	uxtb	r1, r3
 8005582:	683a      	ldr	r2, [r7, #0]
 8005584:	7853      	ldrb	r3, [r2, #1]
 8005586:	f361 13c7 	bfi	r3, r1, #7, #1
 800558a:	7053      	strb	r3, [r2, #1]
  val->sleep_change = md1_cfg.int1_sleep_change;
 800558c:	7b3b      	ldrb	r3, [r7, #12]
 800558e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005592:	b2d9      	uxtb	r1, r3
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	7893      	ldrb	r3, [r2, #2]
 8005598:	f361 0300 	bfi	r3, r1, #0, #1
 800559c:	7093      	strb	r3, [r2, #2]
  val->step_detector = emb_func_int1.int1_step_detector;
 800559e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80055a2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80055a6:	b2d9      	uxtb	r1, r3
 80055a8:	683a      	ldr	r2, [r7, #0]
 80055aa:	7893      	ldrb	r3, [r2, #2]
 80055ac:	f361 0341 	bfi	r3, r1, #1, #1
 80055b0:	7093      	strb	r3, [r2, #2]
  val->tilt          = emb_func_int1.int1_tilt;
 80055b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80055b6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80055ba:	b2d9      	uxtb	r1, r3
 80055bc:	683a      	ldr	r2, [r7, #0]
 80055be:	7893      	ldrb	r3, [r2, #2]
 80055c0:	f361 0382 	bfi	r3, r1, #2, #1
 80055c4:	7093      	strb	r3, [r2, #2]
  val->sig_mot       = emb_func_int1.int1_sig_mot;
 80055c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80055ca:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80055ce:	b2d9      	uxtb	r1, r3
 80055d0:	683a      	ldr	r2, [r7, #0]
 80055d2:	7893      	ldrb	r3, [r2, #2]
 80055d4:	f361 03c3 	bfi	r3, r1, #3, #1
 80055d8:	7093      	strb	r3, [r2, #2]
  val->fsm_lc        = emb_func_int1.int1_fsm_lc;
 80055da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80055de:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80055e2:	b2d9      	uxtb	r1, r3
 80055e4:	683a      	ldr	r2, [r7, #0]
 80055e6:	7893      	ldrb	r3, [r2, #2]
 80055e8:	f361 1304 	bfi	r3, r1, #4, #1
 80055ec:	7093      	strb	r3, [r2, #2]
  val->fsm1 = fsm_int1_a.int1_fsm1;
 80055ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80055f2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80055f6:	b2d9      	uxtb	r1, r3
 80055f8:	683a      	ldr	r2, [r7, #0]
 80055fa:	7893      	ldrb	r3, [r2, #2]
 80055fc:	f361 1345 	bfi	r3, r1, #5, #1
 8005600:	7093      	strb	r3, [r2, #2]
  val->fsm2 = fsm_int1_a.int1_fsm2;
 8005602:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005606:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800560a:	b2d9      	uxtb	r1, r3
 800560c:	683a      	ldr	r2, [r7, #0]
 800560e:	7893      	ldrb	r3, [r2, #2]
 8005610:	f361 1386 	bfi	r3, r1, #6, #1
 8005614:	7093      	strb	r3, [r2, #2]
  val->fsm3 = fsm_int1_a.int1_fsm3;
 8005616:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800561a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800561e:	b2d9      	uxtb	r1, r3
 8005620:	683a      	ldr	r2, [r7, #0]
 8005622:	7893      	ldrb	r3, [r2, #2]
 8005624:	f361 13c7 	bfi	r3, r1, #7, #1
 8005628:	7093      	strb	r3, [r2, #2]
  val->fsm4 = fsm_int1_a.int1_fsm4;
 800562a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800562e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005632:	b2d9      	uxtb	r1, r3
 8005634:	683a      	ldr	r2, [r7, #0]
 8005636:	78d3      	ldrb	r3, [r2, #3]
 8005638:	f361 0300 	bfi	r3, r1, #0, #1
 800563c:	70d3      	strb	r3, [r2, #3]
  val->fsm5 = fsm_int1_a.int1_fsm5;
 800563e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005642:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005646:	b2d9      	uxtb	r1, r3
 8005648:	683a      	ldr	r2, [r7, #0]
 800564a:	78d3      	ldrb	r3, [r2, #3]
 800564c:	f361 0341 	bfi	r3, r1, #1, #1
 8005650:	70d3      	strb	r3, [r2, #3]
  val->fsm6 = fsm_int1_a.int1_fsm6;
 8005652:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005656:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800565a:	b2d9      	uxtb	r1, r3
 800565c:	683a      	ldr	r2, [r7, #0]
 800565e:	78d3      	ldrb	r3, [r2, #3]
 8005660:	f361 0382 	bfi	r3, r1, #2, #1
 8005664:	70d3      	strb	r3, [r2, #3]
  val->fsm7 = fsm_int1_a.int1_fsm7;
 8005666:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800566a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800566e:	b2d9      	uxtb	r1, r3
 8005670:	683a      	ldr	r2, [r7, #0]
 8005672:	78d3      	ldrb	r3, [r2, #3]
 8005674:	f361 03c3 	bfi	r3, r1, #3, #1
 8005678:	70d3      	strb	r3, [r2, #3]
  val->fsm8 = fsm_int1_a.int1_fsm8;
 800567a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800567e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005682:	b2d9      	uxtb	r1, r3
 8005684:	683a      	ldr	r2, [r7, #0]
 8005686:	78d3      	ldrb	r3, [r2, #3]
 8005688:	f361 1304 	bfi	r3, r1, #4, #1
 800568c:	70d3      	strb	r3, [r2, #3]
  val->fsm9  = fsm_int1_b.int1_fsm9;
 800568e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005692:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005696:	b2d9      	uxtb	r1, r3
 8005698:	683a      	ldr	r2, [r7, #0]
 800569a:	78d3      	ldrb	r3, [r2, #3]
 800569c:	f361 1345 	bfi	r3, r1, #5, #1
 80056a0:	70d3      	strb	r3, [r2, #3]
  val->fsm10 = fsm_int1_b.int1_fsm10;
 80056a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80056a6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80056aa:	b2d9      	uxtb	r1, r3
 80056ac:	683a      	ldr	r2, [r7, #0]
 80056ae:	78d3      	ldrb	r3, [r2, #3]
 80056b0:	f361 1386 	bfi	r3, r1, #6, #1
 80056b4:	70d3      	strb	r3, [r2, #3]
  val->fsm11 = fsm_int1_b.int1_fsm11;
 80056b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80056ba:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80056be:	b2d9      	uxtb	r1, r3
 80056c0:	683a      	ldr	r2, [r7, #0]
 80056c2:	78d3      	ldrb	r3, [r2, #3]
 80056c4:	f361 13c7 	bfi	r3, r1, #7, #1
 80056c8:	70d3      	strb	r3, [r2, #3]
  val->fsm12 = fsm_int1_b.int1_fsm12;
 80056ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80056ce:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80056d2:	b2d9      	uxtb	r1, r3
 80056d4:	683a      	ldr	r2, [r7, #0]
 80056d6:	7913      	ldrb	r3, [r2, #4]
 80056d8:	f361 0300 	bfi	r3, r1, #0, #1
 80056dc:	7113      	strb	r3, [r2, #4]
  val->fsm13 = fsm_int1_b.int1_fsm13;
 80056de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80056e2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80056e6:	b2d9      	uxtb	r1, r3
 80056e8:	683a      	ldr	r2, [r7, #0]
 80056ea:	7913      	ldrb	r3, [r2, #4]
 80056ec:	f361 0341 	bfi	r3, r1, #1, #1
 80056f0:	7113      	strb	r3, [r2, #4]
  val->fsm14 = fsm_int1_b.int1_fsm14;
 80056f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80056f6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80056fa:	b2d9      	uxtb	r1, r3
 80056fc:	683a      	ldr	r2, [r7, #0]
 80056fe:	7913      	ldrb	r3, [r2, #4]
 8005700:	f361 0382 	bfi	r3, r1, #2, #1
 8005704:	7113      	strb	r3, [r2, #4]
  val->fsm15 = fsm_int1_b.int1_fsm15;
 8005706:	f897 3020 	ldrb.w	r3, [r7, #32]
 800570a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800570e:	b2d9      	uxtb	r1, r3
 8005710:	683a      	ldr	r2, [r7, #0]
 8005712:	7913      	ldrb	r3, [r2, #4]
 8005714:	f361 03c3 	bfi	r3, r1, #3, #1
 8005718:	7113      	strb	r3, [r2, #4]
  val->fsm16 = fsm_int1_b.int1_fsm16;
 800571a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800571e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005722:	b2d9      	uxtb	r1, r3
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	7913      	ldrb	r3, [r2, #4]
 8005728:	f361 1304 	bfi	r3, r1, #4, #1
 800572c:	7113      	strb	r3, [r2, #4]
  val->mlc1 = mlc_int1.int1_mlc1;
 800572e:	7d3b      	ldrb	r3, [r7, #20]
 8005730:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005734:	b2d9      	uxtb	r1, r3
 8005736:	683a      	ldr	r2, [r7, #0]
 8005738:	7913      	ldrb	r3, [r2, #4]
 800573a:	f361 1345 	bfi	r3, r1, #5, #1
 800573e:	7113      	strb	r3, [r2, #4]
  val->mlc2 = mlc_int1.int1_mlc2;
 8005740:	7d3b      	ldrb	r3, [r7, #20]
 8005742:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005746:	b2d9      	uxtb	r1, r3
 8005748:	683a      	ldr	r2, [r7, #0]
 800574a:	7913      	ldrb	r3, [r2, #4]
 800574c:	f361 1386 	bfi	r3, r1, #6, #1
 8005750:	7113      	strb	r3, [r2, #4]
  val->mlc3 = mlc_int1.int1_mlc3;
 8005752:	7d3b      	ldrb	r3, [r7, #20]
 8005754:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005758:	b2d9      	uxtb	r1, r3
 800575a:	683a      	ldr	r2, [r7, #0]
 800575c:	7913      	ldrb	r3, [r2, #4]
 800575e:	f361 13c7 	bfi	r3, r1, #7, #1
 8005762:	7113      	strb	r3, [r2, #4]
  val->mlc4 = mlc_int1.int1_mlc4;
 8005764:	7d3b      	ldrb	r3, [r7, #20]
 8005766:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800576a:	b2d9      	uxtb	r1, r3
 800576c:	683a      	ldr	r2, [r7, #0]
 800576e:	7953      	ldrb	r3, [r2, #5]
 8005770:	f361 0300 	bfi	r3, r1, #0, #1
 8005774:	7153      	strb	r3, [r2, #5]
  val->mlc5 = mlc_int1.int1_mlc5;
 8005776:	7d3b      	ldrb	r3, [r7, #20]
 8005778:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800577c:	b2d9      	uxtb	r1, r3
 800577e:	683a      	ldr	r2, [r7, #0]
 8005780:	7953      	ldrb	r3, [r2, #5]
 8005782:	f361 0341 	bfi	r3, r1, #1, #1
 8005786:	7153      	strb	r3, [r2, #5]
  val->mlc6 = mlc_int1.int1_mlc6;
 8005788:	7d3b      	ldrb	r3, [r7, #20]
 800578a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800578e:	b2d9      	uxtb	r1, r3
 8005790:	683a      	ldr	r2, [r7, #0]
 8005792:	7953      	ldrb	r3, [r2, #5]
 8005794:	f361 0382 	bfi	r3, r1, #2, #1
 8005798:	7153      	strb	r3, [r2, #5]
  val->mlc7 = mlc_int1.int1_mlc7;
 800579a:	7d3b      	ldrb	r3, [r7, #20]
 800579c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80057a0:	b2d9      	uxtb	r1, r3
 80057a2:	683a      	ldr	r2, [r7, #0]
 80057a4:	7953      	ldrb	r3, [r2, #5]
 80057a6:	f361 03c3 	bfi	r3, r1, #3, #1
 80057aa:	7153      	strb	r3, [r2, #5]
  val->mlc8 = mlc_int1.int1_mlc8;
 80057ac:	7d3b      	ldrb	r3, [r7, #20]
 80057ae:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80057b2:	b2d9      	uxtb	r1, r3
 80057b4:	683a      	ldr	r2, [r7, #0]
 80057b6:	7953      	ldrb	r3, [r2, #5]
 80057b8:	f361 1304 	bfi	r3, r1, #4, #1
 80057bc:	7153      	strb	r3, [r2, #5]

  return ret;
 80057be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3730      	adds	r7, #48	; 0x30
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <lsm6dsox_pin_int2_route_get>:
  *
  */
int32_t lsm6dsox_pin_int2_route_get(stmdev_ctx_t *ctx,
                                    stmdev_ctx_t *aux_ctx,
                                    lsm6dsox_pin_int2_route_t *val)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b08e      	sub	sp, #56	; 0x38
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
  lsm6dsox_int2_ctrl_t      int2_ctrl;
  lsm6dsox_mlc_int2_t       mlc_int2;
  lsm6dsox_md2_cfg_t        md2_cfg;
  lsm6dsox_ctrl4_c_t        ctrl4_c;
  int32_t                   ret;
  ret = 0;
 80057d4:	2300      	movs	r3, #0
 80057d6:	637b      	str	r3, [r7, #52]	; 0x34

  if (aux_ctx != NULL)
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d011      	beq.n	8005802 <lsm6dsox_pin_int2_route_get+0x3a>
  {
    ret = lsm6dsox_read_reg(aux_ctx, LSM6DSOX_SPI2_INT_OIS,
 80057de:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80057e2:	2301      	movs	r3, #1
 80057e4:	216f      	movs	r1, #111	; 0x6f
 80057e6:	68b8      	ldr	r0, [r7, #8]
 80057e8:	f7fe f9e0 	bl	8003bac <lsm6dsox_read_reg>
 80057ec:	6378      	str	r0, [r7, #52]	; 0x34
                            (uint8_t *)&spi2_int_ois, 1);
    val->drdy_ois = spi2_int_ois.int2_drdy_ois;
 80057ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80057f2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80057f6:	b2d9      	uxtb	r1, r3
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	7813      	ldrb	r3, [r2, #0]
 80057fc:	f361 0300 	bfi	r3, r1, #0, #1
 8005800:	7013      	strb	r3, [r2, #0]
  }

  if (ctx != NULL)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2b00      	cmp	r3, #0
 8005806:	f000 8222 	beq.w	8005c4e <lsm6dsox_pin_int2_route_get+0x486>
  {
    if (ret == 0)
 800580a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800580c:	2b00      	cmp	r3, #0
 800580e:	d104      	bne.n	800581a <lsm6dsox_pin_int2_route_get+0x52>
    {
      ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8005810:	2102      	movs	r1, #2
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f7fe ff63 	bl	80046de <lsm6dsox_mem_bank_set>
 8005818:	6378      	str	r0, [r7, #52]	; 0x34
    }

    if (ret == 0)
 800581a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800581c:	2b00      	cmp	r3, #0
 800581e:	d107      	bne.n	8005830 <lsm6dsox_pin_int2_route_get+0x68>
    {
      ret = lsm6dsox_read_reg(ctx, LSM6DSOX_MLC_INT2,
 8005820:	f107 021c 	add.w	r2, r7, #28
 8005824:	2301      	movs	r3, #1
 8005826:	2111      	movs	r1, #17
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f7fe f9bf 	bl	8003bac <lsm6dsox_read_reg>
 800582e:	6378      	str	r0, [r7, #52]	; 0x34
                              (uint8_t *)&mlc_int2, 1);
    }

    if (ret == 0)
 8005830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005832:	2b00      	cmp	r3, #0
 8005834:	d107      	bne.n	8005846 <lsm6dsox_pin_int2_route_get+0x7e>
    {
      ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_INT2,
 8005836:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800583a:	2301      	movs	r3, #1
 800583c:	210e      	movs	r1, #14
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f7fe f9b4 	bl	8003bac <lsm6dsox_read_reg>
 8005844:	6378      	str	r0, [r7, #52]	; 0x34
                              (uint8_t *)&emb_func_int2, 1);
    }

    if (ret == 0)
 8005846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005848:	2b00      	cmp	r3, #0
 800584a:	d107      	bne.n	800585c <lsm6dsox_pin_int2_route_get+0x94>
    {
      ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FSM_INT2_A,
 800584c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005850:	2301      	movs	r3, #1
 8005852:	210f      	movs	r1, #15
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f7fe f9a9 	bl	8003bac <lsm6dsox_read_reg>
 800585a:	6378      	str	r0, [r7, #52]	; 0x34
                              (uint8_t *)&fsm_int2_a, 1);
    }

    if (ret == 0)
 800585c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800585e:	2b00      	cmp	r3, #0
 8005860:	d107      	bne.n	8005872 <lsm6dsox_pin_int2_route_get+0xaa>
    {
      ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FSM_INT2_B,
 8005862:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005866:	2301      	movs	r3, #1
 8005868:	2110      	movs	r1, #16
 800586a:	68f8      	ldr	r0, [r7, #12]
 800586c:	f7fe f99e 	bl	8003bac <lsm6dsox_read_reg>
 8005870:	6378      	str	r0, [r7, #52]	; 0x34
                              (uint8_t *)&fsm_int2_b, 1);
    }

    if (ret == 0)
 8005872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005874:	2b00      	cmp	r3, #0
 8005876:	d104      	bne.n	8005882 <lsm6dsox_pin_int2_route_get+0xba>
    {
      ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8005878:	2100      	movs	r1, #0
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f7fe ff2f 	bl	80046de <lsm6dsox_mem_bank_set>
 8005880:	6378      	str	r0, [r7, #52]	; 0x34
    }

    if (ret == 0)
 8005882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005884:	2b00      	cmp	r3, #0
 8005886:	d107      	bne.n	8005898 <lsm6dsox_pin_int2_route_get+0xd0>
    {
      ret = lsm6dsox_read_reg(ctx, LSM6DSOX_INT2_CTRL,
 8005888:	f107 0220 	add.w	r2, r7, #32
 800588c:	2301      	movs	r3, #1
 800588e:	210e      	movs	r1, #14
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	f7fe f98b 	bl	8003bac <lsm6dsox_read_reg>
 8005896:	6378      	str	r0, [r7, #52]	; 0x34
                              (uint8_t *)&int2_ctrl, 1);
    }

    if (ret == 0)
 8005898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800589a:	2b00      	cmp	r3, #0
 800589c:	d107      	bne.n	80058ae <lsm6dsox_pin_int2_route_get+0xe6>
    {
      ret = lsm6dsox_read_reg(ctx, LSM6DSOX_MD2_CFG,
 800589e:	f107 0218 	add.w	r2, r7, #24
 80058a2:	2301      	movs	r3, #1
 80058a4:	215f      	movs	r1, #95	; 0x5f
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f7fe f980 	bl	8003bac <lsm6dsox_read_reg>
 80058ac:	6378      	str	r0, [r7, #52]	; 0x34
                              (uint8_t *)&md2_cfg, 1);
    }

    if (ret == 0)
 80058ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d107      	bne.n	80058c4 <lsm6dsox_pin_int2_route_get+0xfc>
    {
      ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 80058b4:	f107 0214 	add.w	r2, r7, #20
 80058b8:	2301      	movs	r3, #1
 80058ba:	2113      	movs	r1, #19
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f7fe f975 	bl	8003bac <lsm6dsox_read_reg>
 80058c2:	6378      	str	r0, [r7, #52]	; 0x34
    }

    if (ctrl4_c.int2_on_int1 == PROPERTY_DISABLE)
 80058c4:	7d3b      	ldrb	r3, [r7, #20]
 80058c6:	f003 0320 	and.w	r3, r3, #32
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d129      	bne.n	8005924 <lsm6dsox_pin_int2_route_get+0x15c>
    {
      if (ret == 0)
 80058d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d111      	bne.n	80058fa <lsm6dsox_pin_int2_route_get+0x132>
      {
        ret = lsm6dsox_read_reg(ctx, LSM6DSOX_INT2_CTRL,
 80058d6:	f107 0220 	add.w	r2, r7, #32
 80058da:	2301      	movs	r3, #1
 80058dc:	210e      	movs	r1, #14
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f7fe f964 	bl	8003bac <lsm6dsox_read_reg>
 80058e4:	6378      	str	r0, [r7, #52]	; 0x34
                                (uint8_t *)&int2_ctrl, 1);
        val->drdy_temp = int2_ctrl.int2_drdy_temp;
 80058e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80058ea:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80058ee:	b2d9      	uxtb	r1, r3
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	7813      	ldrb	r3, [r2, #0]
 80058f4:	f361 03c3 	bfi	r3, r1, #3, #1
 80058f8:	7013      	strb	r3, [r2, #0]
      }

      if (ret == 0)
 80058fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d11b      	bne.n	8005938 <lsm6dsox_pin_int2_route_get+0x170>
      {
        ret = lsm6dsox_read_reg(ctx, LSM6DSOX_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8005900:	f107 0218 	add.w	r2, r7, #24
 8005904:	2301      	movs	r3, #1
 8005906:	215f      	movs	r1, #95	; 0x5f
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f7fe f94f 	bl	8003bac <lsm6dsox_read_reg>
 800590e:	6378      	str	r0, [r7, #52]	; 0x34
        val->timestamp = md2_cfg.int2_timestamp;
 8005910:	7e3b      	ldrb	r3, [r7, #24]
 8005912:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005916:	b2d9      	uxtb	r1, r3
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	7853      	ldrb	r3, [r2, #1]
 800591c:	f361 0300 	bfi	r3, r1, #0, #1
 8005920:	7053      	strb	r3, [r2, #1]
 8005922:	e009      	b.n	8005938 <lsm6dsox_pin_int2_route_get+0x170>
      }
    }

    else
    {
      val->drdy_temp = PROPERTY_DISABLE;
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	7813      	ldrb	r3, [r2, #0]
 8005928:	f36f 03c3 	bfc	r3, #3, #1
 800592c:	7013      	strb	r3, [r2, #0]
      val->timestamp = PROPERTY_DISABLE;
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	7853      	ldrb	r3, [r2, #1]
 8005932:	f36f 0300 	bfc	r3, #0, #1
 8005936:	7053      	strb	r3, [r2, #1]
    }

    val->drdy_xl   = int2_ctrl.int2_drdy_xl;
 8005938:	f897 3020 	ldrb.w	r3, [r7, #32]
 800593c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005940:	b2d9      	uxtb	r1, r3
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	7813      	ldrb	r3, [r2, #0]
 8005946:	f361 0341 	bfi	r3, r1, #1, #1
 800594a:	7013      	strb	r3, [r2, #0]
    val->drdy_g    = int2_ctrl.int2_drdy_g;
 800594c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005950:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005954:	b2d9      	uxtb	r1, r3
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	7813      	ldrb	r3, [r2, #0]
 800595a:	f361 0382 	bfi	r3, r1, #2, #1
 800595e:	7013      	strb	r3, [r2, #0]
    val->drdy_temp = int2_ctrl.int2_drdy_temp;
 8005960:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005964:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005968:	b2d9      	uxtb	r1, r3
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	7813      	ldrb	r3, [r2, #0]
 800596e:	f361 03c3 	bfi	r3, r1, #3, #1
 8005972:	7013      	strb	r3, [r2, #0]
    val->fifo_th   = int2_ctrl.int2_fifo_th;
 8005974:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005978:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800597c:	b2d9      	uxtb	r1, r3
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	7813      	ldrb	r3, [r2, #0]
 8005982:	f361 1304 	bfi	r3, r1, #4, #1
 8005986:	7013      	strb	r3, [r2, #0]
    val->fifo_ovr  = int2_ctrl.int2_fifo_ovr;
 8005988:	f897 3020 	ldrb.w	r3, [r7, #32]
 800598c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005990:	b2d9      	uxtb	r1, r3
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	7813      	ldrb	r3, [r2, #0]
 8005996:	f361 1345 	bfi	r3, r1, #5, #1
 800599a:	7013      	strb	r3, [r2, #0]
    val->fifo_full = int2_ctrl.int2_fifo_full;
 800599c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80059a0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80059a4:	b2d9      	uxtb	r1, r3
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	7813      	ldrb	r3, [r2, #0]
 80059aa:	f361 1386 	bfi	r3, r1, #6, #1
 80059ae:	7013      	strb	r3, [r2, #0]
    val->fifo_bdr   = int2_ctrl.int2_cnt_bdr;
 80059b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80059b4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80059b8:	b2d9      	uxtb	r1, r3
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	7813      	ldrb	r3, [r2, #0]
 80059be:	f361 13c7 	bfi	r3, r1, #7, #1
 80059c2:	7013      	strb	r3, [r2, #0]
    val->timestamp    = md2_cfg.int2_timestamp;
 80059c4:	7e3b      	ldrb	r3, [r7, #24]
 80059c6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80059ca:	b2d9      	uxtb	r1, r3
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	7853      	ldrb	r3, [r2, #1]
 80059d0:	f361 0300 	bfi	r3, r1, #0, #1
 80059d4:	7053      	strb	r3, [r2, #1]
    val->six_d        = md2_cfg.int2_6d;
 80059d6:	7e3b      	ldrb	r3, [r7, #24]
 80059d8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80059dc:	b2d9      	uxtb	r1, r3
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	7853      	ldrb	r3, [r2, #1]
 80059e2:	f361 0341 	bfi	r3, r1, #1, #1
 80059e6:	7053      	strb	r3, [r2, #1]
    val->double_tap   = md2_cfg.int2_double_tap;
 80059e8:	7e3b      	ldrb	r3, [r7, #24]
 80059ea:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80059ee:	b2d9      	uxtb	r1, r3
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	7853      	ldrb	r3, [r2, #1]
 80059f4:	f361 0382 	bfi	r3, r1, #2, #1
 80059f8:	7053      	strb	r3, [r2, #1]
    val->free_fall    = md2_cfg.int2_ff;
 80059fa:	7e3b      	ldrb	r3, [r7, #24]
 80059fc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005a00:	b2d9      	uxtb	r1, r3
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	7853      	ldrb	r3, [r2, #1]
 8005a06:	f361 03c3 	bfi	r3, r1, #3, #1
 8005a0a:	7053      	strb	r3, [r2, #1]
    val->wake_up      = md2_cfg.int2_wu;
 8005a0c:	7e3b      	ldrb	r3, [r7, #24]
 8005a0e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005a12:	b2d9      	uxtb	r1, r3
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	7853      	ldrb	r3, [r2, #1]
 8005a18:	f361 1304 	bfi	r3, r1, #4, #1
 8005a1c:	7053      	strb	r3, [r2, #1]
    val->single_tap   = md2_cfg.int2_single_tap;
 8005a1e:	7e3b      	ldrb	r3, [r7, #24]
 8005a20:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005a24:	b2d9      	uxtb	r1, r3
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	7853      	ldrb	r3, [r2, #1]
 8005a2a:	f361 1345 	bfi	r3, r1, #5, #1
 8005a2e:	7053      	strb	r3, [r2, #1]
    val->sleep_change = md2_cfg.int2_sleep_change;
 8005a30:	7e3b      	ldrb	r3, [r7, #24]
 8005a32:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005a36:	b2d9      	uxtb	r1, r3
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	7853      	ldrb	r3, [r2, #1]
 8005a3c:	f361 1386 	bfi	r3, r1, #6, #1
 8005a40:	7053      	strb	r3, [r2, #1]
    val->step_detector = emb_func_int2. int2_step_detector;
 8005a42:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005a46:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005a4a:	b2d9      	uxtb	r1, r3
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	7853      	ldrb	r3, [r2, #1]
 8005a50:	f361 13c7 	bfi	r3, r1, #7, #1
 8005a54:	7053      	strb	r3, [r2, #1]
    val->tilt          = emb_func_int2.int2_tilt;
 8005a56:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005a5a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005a5e:	b2d9      	uxtb	r1, r3
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	7893      	ldrb	r3, [r2, #2]
 8005a64:	f361 0300 	bfi	r3, r1, #0, #1
 8005a68:	7093      	strb	r3, [r2, #2]
    val->fsm_lc        = emb_func_int2.int2_fsm_lc;
 8005a6a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005a6e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005a72:	b2d9      	uxtb	r1, r3
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	7893      	ldrb	r3, [r2, #2]
 8005a78:	f361 0382 	bfi	r3, r1, #2, #1
 8005a7c:	7093      	strb	r3, [r2, #2]
    val->fsm1 = fsm_int2_a.int2_fsm1;
 8005a7e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a82:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005a86:	b2d9      	uxtb	r1, r3
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	7893      	ldrb	r3, [r2, #2]
 8005a8c:	f361 03c3 	bfi	r3, r1, #3, #1
 8005a90:	7093      	strb	r3, [r2, #2]
    val->fsm2 = fsm_int2_a.int2_fsm2;
 8005a92:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a96:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005a9a:	b2d9      	uxtb	r1, r3
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	7893      	ldrb	r3, [r2, #2]
 8005aa0:	f361 1304 	bfi	r3, r1, #4, #1
 8005aa4:	7093      	strb	r3, [r2, #2]
    val->fsm3 = fsm_int2_a.int2_fsm3;
 8005aa6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005aaa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005aae:	b2d9      	uxtb	r1, r3
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	7893      	ldrb	r3, [r2, #2]
 8005ab4:	f361 1345 	bfi	r3, r1, #5, #1
 8005ab8:	7093      	strb	r3, [r2, #2]
    val->fsm4 = fsm_int2_a.int2_fsm4;
 8005aba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005abe:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005ac2:	b2d9      	uxtb	r1, r3
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	7893      	ldrb	r3, [r2, #2]
 8005ac8:	f361 1386 	bfi	r3, r1, #6, #1
 8005acc:	7093      	strb	r3, [r2, #2]
    val->fsm5 = fsm_int2_a.int2_fsm5;
 8005ace:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ad2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005ad6:	b2d9      	uxtb	r1, r3
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	7893      	ldrb	r3, [r2, #2]
 8005adc:	f361 13c7 	bfi	r3, r1, #7, #1
 8005ae0:	7093      	strb	r3, [r2, #2]
    val->fsm6 = fsm_int2_a.int2_fsm6;
 8005ae2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ae6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005aea:	b2d9      	uxtb	r1, r3
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	78d3      	ldrb	r3, [r2, #3]
 8005af0:	f361 0300 	bfi	r3, r1, #0, #1
 8005af4:	70d3      	strb	r3, [r2, #3]
    val->fsm7 = fsm_int2_a.int2_fsm7;
 8005af6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005afa:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005afe:	b2d9      	uxtb	r1, r3
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	78d3      	ldrb	r3, [r2, #3]
 8005b04:	f361 0341 	bfi	r3, r1, #1, #1
 8005b08:	70d3      	strb	r3, [r2, #3]
    val->fsm8 = fsm_int2_a.int2_fsm8;
 8005b0a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005b0e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005b12:	b2d9      	uxtb	r1, r3
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	78d3      	ldrb	r3, [r2, #3]
 8005b18:	f361 0382 	bfi	r3, r1, #2, #1
 8005b1c:	70d3      	strb	r3, [r2, #3]
    val->fsm9  = fsm_int2_b.int2_fsm9;
 8005b1e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005b22:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005b26:	b2d9      	uxtb	r1, r3
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	78d3      	ldrb	r3, [r2, #3]
 8005b2c:	f361 03c3 	bfi	r3, r1, #3, #1
 8005b30:	70d3      	strb	r3, [r2, #3]
    val->fsm10 = fsm_int2_b.int2_fsm10;
 8005b32:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005b36:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005b3a:	b2d9      	uxtb	r1, r3
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	78d3      	ldrb	r3, [r2, #3]
 8005b40:	f361 1304 	bfi	r3, r1, #4, #1
 8005b44:	70d3      	strb	r3, [r2, #3]
    val->fsm11 = fsm_int2_b.int2_fsm11;
 8005b46:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005b4a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005b4e:	b2d9      	uxtb	r1, r3
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	78d3      	ldrb	r3, [r2, #3]
 8005b54:	f361 1345 	bfi	r3, r1, #5, #1
 8005b58:	70d3      	strb	r3, [r2, #3]
    val->fsm12 = fsm_int2_b.int2_fsm12;
 8005b5a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005b5e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005b62:	b2d9      	uxtb	r1, r3
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	78d3      	ldrb	r3, [r2, #3]
 8005b68:	f361 1386 	bfi	r3, r1, #6, #1
 8005b6c:	70d3      	strb	r3, [r2, #3]
    val->fsm13 = fsm_int2_b.int2_fsm13;
 8005b6e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005b72:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005b76:	b2d9      	uxtb	r1, r3
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	78d3      	ldrb	r3, [r2, #3]
 8005b7c:	f361 13c7 	bfi	r3, r1, #7, #1
 8005b80:	70d3      	strb	r3, [r2, #3]
    val->fsm14 = fsm_int2_b.int2_fsm14;
 8005b82:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005b86:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005b8a:	b2d9      	uxtb	r1, r3
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	7913      	ldrb	r3, [r2, #4]
 8005b90:	f361 0300 	bfi	r3, r1, #0, #1
 8005b94:	7113      	strb	r3, [r2, #4]
    val->fsm15 = fsm_int2_b.int2_fsm15;
 8005b96:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005b9a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005b9e:	b2d9      	uxtb	r1, r3
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	7913      	ldrb	r3, [r2, #4]
 8005ba4:	f361 0341 	bfi	r3, r1, #1, #1
 8005ba8:	7113      	strb	r3, [r2, #4]
    val->fsm16 = fsm_int2_b.int2_fsm16;
 8005baa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005bae:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005bb2:	b2d9      	uxtb	r1, r3
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	7913      	ldrb	r3, [r2, #4]
 8005bb8:	f361 0382 	bfi	r3, r1, #2, #1
 8005bbc:	7113      	strb	r3, [r2, #4]
    val->mlc1 = mlc_int2.int2_mlc1;
 8005bbe:	7f3b      	ldrb	r3, [r7, #28]
 8005bc0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005bc4:	b2d9      	uxtb	r1, r3
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	7913      	ldrb	r3, [r2, #4]
 8005bca:	f361 03c3 	bfi	r3, r1, #3, #1
 8005bce:	7113      	strb	r3, [r2, #4]
    val->mlc2 = mlc_int2.int2_mlc2;
 8005bd0:	7f3b      	ldrb	r3, [r7, #28]
 8005bd2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005bd6:	b2d9      	uxtb	r1, r3
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	7913      	ldrb	r3, [r2, #4]
 8005bdc:	f361 1304 	bfi	r3, r1, #4, #1
 8005be0:	7113      	strb	r3, [r2, #4]
    val->mlc3 = mlc_int2.int2_mlc3;
 8005be2:	7f3b      	ldrb	r3, [r7, #28]
 8005be4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005be8:	b2d9      	uxtb	r1, r3
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	7913      	ldrb	r3, [r2, #4]
 8005bee:	f361 1345 	bfi	r3, r1, #5, #1
 8005bf2:	7113      	strb	r3, [r2, #4]
    val->mlc4 = mlc_int2.int2_mlc4;
 8005bf4:	7f3b      	ldrb	r3, [r7, #28]
 8005bf6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005bfa:	b2d9      	uxtb	r1, r3
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	7913      	ldrb	r3, [r2, #4]
 8005c00:	f361 1386 	bfi	r3, r1, #6, #1
 8005c04:	7113      	strb	r3, [r2, #4]
    val->mlc5 = mlc_int2.int2_mlc5;
 8005c06:	7f3b      	ldrb	r3, [r7, #28]
 8005c08:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005c0c:	b2d9      	uxtb	r1, r3
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	7913      	ldrb	r3, [r2, #4]
 8005c12:	f361 13c7 	bfi	r3, r1, #7, #1
 8005c16:	7113      	strb	r3, [r2, #4]
    val->mlc6 = mlc_int2.int2_mlc6;
 8005c18:	7f3b      	ldrb	r3, [r7, #28]
 8005c1a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005c1e:	b2d9      	uxtb	r1, r3
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	7953      	ldrb	r3, [r2, #5]
 8005c24:	f361 0300 	bfi	r3, r1, #0, #1
 8005c28:	7153      	strb	r3, [r2, #5]
    val->mlc7 = mlc_int2.int2_mlc7;
 8005c2a:	7f3b      	ldrb	r3, [r7, #28]
 8005c2c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005c30:	b2d9      	uxtb	r1, r3
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	7953      	ldrb	r3, [r2, #5]
 8005c36:	f361 0341 	bfi	r3, r1, #1, #1
 8005c3a:	7153      	strb	r3, [r2, #5]
    val->mlc8 = mlc_int2.int2_mlc8;
 8005c3c:	7f3b      	ldrb	r3, [r7, #28]
 8005c3e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005c42:	b2d9      	uxtb	r1, r3
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	7953      	ldrb	r3, [r2, #5]
 8005c48:	f361 0382 	bfi	r3, r1, #2, #1
 8005c4c:	7153      	strb	r3, [r2, #5]
  }

  return ret;
 8005c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3738      	adds	r7, #56	; 0x38
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <lsm6dsox_all_sources_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_all_sources_get(stmdev_ctx_t *ctx,
                                 lsm6dsox_all_sources_t *val)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b094      	sub	sp, #80	; 0x50
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  lsm6dsox_tap_src_t                  tap_src;
  lsm6dsox_d6d_src_t                  d6d_src;
  lsm6dsox_ctrl5_c_t                  ctrl5_c;
  uint8_t                             reg[12];
  int32_t                             ret;
  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL5_C, (uint8_t *)&ctrl5_c, 1);
 8005c62:	f107 0218 	add.w	r2, r7, #24
 8005c66:	2301      	movs	r3, #1
 8005c68:	2114      	movs	r1, #20
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f7fd ff9e 	bl	8003bac <lsm6dsox_read_reg>
 8005c70:	64f8      	str	r0, [r7, #76]	; 0x4c

  if (ret == 0)
 8005c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10b      	bne.n	8005c90 <lsm6dsox_all_sources_get+0x38>
  {
    ctrl5_c.rounding_status = PROPERTY_ENABLE;
 8005c78:	7e3b      	ldrb	r3, [r7, #24]
 8005c7a:	f043 0310 	orr.w	r3, r3, #16
 8005c7e:	763b      	strb	r3, [r7, #24]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL5_C, (uint8_t *)&ctrl5_c, 1);
 8005c80:	f107 0218 	add.w	r2, r7, #24
 8005c84:	2301      	movs	r3, #1
 8005c86:	2114      	movs	r1, #20
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f7fd ffa7 	bl	8003bdc <lsm6dsox_write_reg>
 8005c8e:	64f8      	str	r0, [r7, #76]	; 0x4c
  }

  if (ret == 0)
 8005c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d107      	bne.n	8005ca6 <lsm6dsox_all_sources_get+0x4e>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_ALL_INT_SRC, reg, 12);
 8005c96:	f107 020c 	add.w	r2, r7, #12
 8005c9a:	230c      	movs	r3, #12
 8005c9c:	211a      	movs	r1, #26
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f7fd ff84 	bl	8003bac <lsm6dsox_read_reg>
 8005ca4:	64f8      	str	r0, [r7, #76]	; 0x4c
  }

  if (ret == 0)
 8005ca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f040 830b 	bne.w	80062c4 <lsm6dsox_all_sources_get+0x66c>
  {
    bytecpy((uint8_t *)&all_int_src, &reg[0]);
 8005cae:	f107 020c 	add.w	r2, r7, #12
 8005cb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005cb6:	4611      	mov	r1, r2
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f7fd ffa7 	bl	8003c0c <bytecpy>
    bytecpy((uint8_t *)&wake_up_src, &reg[1]);
 8005cbe:	f107 030c 	add.w	r3, r7, #12
 8005cc2:	1c5a      	adds	r2, r3, #1
 8005cc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005cc8:	4611      	mov	r1, r2
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f7fd ff9e 	bl	8003c0c <bytecpy>
    bytecpy((uint8_t *)&tap_src, &reg[2]);
 8005cd0:	f107 030c 	add.w	r3, r7, #12
 8005cd4:	1c9a      	adds	r2, r3, #2
 8005cd6:	f107 0320 	add.w	r3, r7, #32
 8005cda:	4611      	mov	r1, r2
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7fd ff95 	bl	8003c0c <bytecpy>
    bytecpy((uint8_t *)&d6d_src, &reg[3]);
 8005ce2:	f107 030c 	add.w	r3, r7, #12
 8005ce6:	1cda      	adds	r2, r3, #3
 8005ce8:	f107 031c 	add.w	r3, r7, #28
 8005cec:	4611      	mov	r1, r2
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7fd ff8c 	bl	8003c0c <bytecpy>
    bytecpy((uint8_t *)&status_reg, &reg[4]);
 8005cf4:	f107 030c 	add.w	r3, r7, #12
 8005cf8:	1d1a      	adds	r2, r3, #4
 8005cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cfe:	4611      	mov	r1, r2
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7fd ff83 	bl	8003c0c <bytecpy>
    bytecpy((uint8_t *)&emb_func_status_mainpage, &reg[5]);
 8005d06:	f107 030c 	add.w	r3, r7, #12
 8005d0a:	1d5a      	adds	r2, r3, #5
 8005d0c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005d10:	4611      	mov	r1, r2
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7fd ff7a 	bl	8003c0c <bytecpy>
    bytecpy((uint8_t *)&fsm_status_a_mainpage, &reg[6]);
 8005d18:	f107 030c 	add.w	r3, r7, #12
 8005d1c:	1d9a      	adds	r2, r3, #6
 8005d1e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005d22:	4611      	mov	r1, r2
 8005d24:	4618      	mov	r0, r3
 8005d26:	f7fd ff71 	bl	8003c0c <bytecpy>
    bytecpy((uint8_t *)&fsm_status_b_mainpage, &reg[7]);
 8005d2a:	f107 030c 	add.w	r3, r7, #12
 8005d2e:	1dda      	adds	r2, r3, #7
 8005d30:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005d34:	4611      	mov	r1, r2
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7fd ff68 	bl	8003c0c <bytecpy>
    bytecpy((uint8_t *)&mlc_status_mainpage, &reg[8]);
 8005d3c:	f107 030c 	add.w	r3, r7, #12
 8005d40:	f103 0208 	add.w	r2, r3, #8
 8005d44:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005d48:	4611      	mov	r1, r2
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7fd ff5e 	bl	8003c0c <bytecpy>
    bytecpy((uint8_t *)&status_master_mainpage, &reg[9]);
 8005d50:	f107 030c 	add.w	r3, r7, #12
 8005d54:	f103 0209 	add.w	r2, r3, #9
 8005d58:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005d5c:	4611      	mov	r1, r2
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7fd ff54 	bl	8003c0c <bytecpy>
    bytecpy((uint8_t *)&fifo_status1, &reg[10]);
 8005d64:	f107 030c 	add.w	r3, r7, #12
 8005d68:	f103 020a 	add.w	r2, r3, #10
 8005d6c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005d70:	4611      	mov	r1, r2
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7fd ff4a 	bl	8003c0c <bytecpy>
    bytecpy((uint8_t *)&fifo_status2, &reg[11]);
 8005d78:	f107 030c 	add.w	r3, r7, #12
 8005d7c:	f103 020b 	add.w	r2, r3, #11
 8005d80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005d84:	4611      	mov	r1, r2
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7fd ff40 	bl	8003c0c <bytecpy>
    val->timestamp = all_int_src.timestamp_endcount;
 8005d8c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005d90:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005d94:	b2d9      	uxtb	r1, r3
 8005d96:	683a      	ldr	r2, [r7, #0]
 8005d98:	7813      	ldrb	r3, [r2, #0]
 8005d9a:	f361 1304 	bfi	r3, r1, #4, #1
 8005d9e:	7013      	strb	r3, [r2, #0]
    val->wake_up_z    = wake_up_src.z_wu;
 8005da0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005da4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005da8:	b2d9      	uxtb	r1, r3
 8005daa:	683a      	ldr	r2, [r7, #0]
 8005dac:	7813      	ldrb	r3, [r2, #0]
 8005dae:	f361 13c7 	bfi	r3, r1, #7, #1
 8005db2:	7013      	strb	r3, [r2, #0]
    val->wake_up_y    = wake_up_src.y_wu;
 8005db4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005db8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005dbc:	b2d9      	uxtb	r1, r3
 8005dbe:	683a      	ldr	r2, [r7, #0]
 8005dc0:	7853      	ldrb	r3, [r2, #1]
 8005dc2:	f361 0300 	bfi	r3, r1, #0, #1
 8005dc6:	7053      	strb	r3, [r2, #1]
    val->wake_up_x    = wake_up_src.x_wu;
 8005dc8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005dcc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005dd0:	b2d9      	uxtb	r1, r3
 8005dd2:	683a      	ldr	r2, [r7, #0]
 8005dd4:	7853      	ldrb	r3, [r2, #1]
 8005dd6:	f361 0341 	bfi	r3, r1, #1, #1
 8005dda:	7053      	strb	r3, [r2, #1]
    val->wake_up      = wake_up_src.wu_ia;
 8005ddc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005de0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005de4:	b2d9      	uxtb	r1, r3
 8005de6:	683a      	ldr	r2, [r7, #0]
 8005de8:	7813      	ldrb	r3, [r2, #0]
 8005dea:	f361 1386 	bfi	r3, r1, #6, #1
 8005dee:	7013      	strb	r3, [r2, #0]
    val->sleep_state  = wake_up_src.sleep_state;
 8005df0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005df4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005df8:	b2d9      	uxtb	r1, r3
 8005dfa:	683a      	ldr	r2, [r7, #0]
 8005dfc:	78d3      	ldrb	r3, [r2, #3]
 8005dfe:	f361 0300 	bfi	r3, r1, #0, #1
 8005e02:	70d3      	strb	r3, [r2, #3]
    val->free_fall    = wake_up_src.ff_ia;
 8005e04:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e08:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005e0c:	b2d9      	uxtb	r1, r3
 8005e0e:	683a      	ldr	r2, [r7, #0]
 8005e10:	7813      	ldrb	r3, [r2, #0]
 8005e12:	f361 1345 	bfi	r3, r1, #5, #1
 8005e16:	7013      	strb	r3, [r2, #0]
    val->sleep_change = wake_up_src.sleep_change_ia;
 8005e18:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e1c:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	f003 0301 	and.w	r3, r3, #1
 8005e26:	b2d9      	uxtb	r1, r3
 8005e28:	683a      	ldr	r2, [r7, #0]
 8005e2a:	7893      	ldrb	r3, [r2, #2]
 8005e2c:	f361 13c7 	bfi	r3, r1, #7, #1
 8005e30:	7093      	strb	r3, [r2, #2]
    val->tap_x      = tap_src.x_tap;
 8005e32:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005e36:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005e3a:	b2d9      	uxtb	r1, r3
 8005e3c:	683a      	ldr	r2, [r7, #0]
 8005e3e:	7853      	ldrb	r3, [r2, #1]
 8005e40:	f361 1386 	bfi	r3, r1, #6, #1
 8005e44:	7053      	strb	r3, [r2, #1]
    val->tap_y      = tap_src.y_tap;
 8005e46:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005e4a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005e4e:	b2d9      	uxtb	r1, r3
 8005e50:	683a      	ldr	r2, [r7, #0]
 8005e52:	7853      	ldrb	r3, [r2, #1]
 8005e54:	f361 1345 	bfi	r3, r1, #5, #1
 8005e58:	7053      	strb	r3, [r2, #1]
    val->tap_z      = tap_src.z_tap;
 8005e5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005e5e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005e62:	b2d9      	uxtb	r1, r3
 8005e64:	683a      	ldr	r2, [r7, #0]
 8005e66:	7853      	ldrb	r3, [r2, #1]
 8005e68:	f361 1304 	bfi	r3, r1, #4, #1
 8005e6c:	7053      	strb	r3, [r2, #1]
    val->tap_sign   = tap_src.tap_sign;
 8005e6e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005e72:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005e76:	b2d9      	uxtb	r1, r3
 8005e78:	683a      	ldr	r2, [r7, #0]
 8005e7a:	7853      	ldrb	r3, [r2, #1]
 8005e7c:	f361 13c7 	bfi	r3, r1, #7, #1
 8005e80:	7053      	strb	r3, [r2, #1]
    val->double_tap = tap_src.double_tap;
 8005e82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005e86:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005e8a:	b2d9      	uxtb	r1, r3
 8005e8c:	683a      	ldr	r2, [r7, #0]
 8005e8e:	7853      	ldrb	r3, [r2, #1]
 8005e90:	f361 03c3 	bfi	r3, r1, #3, #1
 8005e94:	7053      	strb	r3, [r2, #1]
    val->single_tap = tap_src.single_tap;
 8005e96:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005e9a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005e9e:	b2d9      	uxtb	r1, r3
 8005ea0:	683a      	ldr	r2, [r7, #0]
 8005ea2:	7853      	ldrb	r3, [r2, #1]
 8005ea4:	f361 0382 	bfi	r3, r1, #2, #1
 8005ea8:	7053      	strb	r3, [r2, #1]
    val->six_d_xl = d6d_src.xl;
 8005eaa:	7f3b      	ldrb	r3, [r7, #28]
 8005eac:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005eb0:	b2d9      	uxtb	r1, r3
 8005eb2:	683a      	ldr	r2, [r7, #0]
 8005eb4:	7893      	ldrb	r3, [r2, #2]
 8005eb6:	f361 0341 	bfi	r3, r1, #1, #1
 8005eba:	7093      	strb	r3, [r2, #2]
    val->six_d_xh = d6d_src.xh;
 8005ebc:	7f3b      	ldrb	r3, [r7, #28]
 8005ebe:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005ec2:	b2d9      	uxtb	r1, r3
 8005ec4:	683a      	ldr	r2, [r7, #0]
 8005ec6:	7893      	ldrb	r3, [r2, #2]
 8005ec8:	f361 0382 	bfi	r3, r1, #2, #1
 8005ecc:	7093      	strb	r3, [r2, #2]
    val->six_d_yl = d6d_src.yl;
 8005ece:	7f3b      	ldrb	r3, [r7, #28]
 8005ed0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005ed4:	b2d9      	uxtb	r1, r3
 8005ed6:	683a      	ldr	r2, [r7, #0]
 8005ed8:	7893      	ldrb	r3, [r2, #2]
 8005eda:	f361 03c3 	bfi	r3, r1, #3, #1
 8005ede:	7093      	strb	r3, [r2, #2]
    val->six_d_yh = d6d_src.yh;
 8005ee0:	7f3b      	ldrb	r3, [r7, #28]
 8005ee2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005ee6:	b2d9      	uxtb	r1, r3
 8005ee8:	683a      	ldr	r2, [r7, #0]
 8005eea:	7893      	ldrb	r3, [r2, #2]
 8005eec:	f361 1304 	bfi	r3, r1, #4, #1
 8005ef0:	7093      	strb	r3, [r2, #2]
    val->six_d_zl = d6d_src.zl;
 8005ef2:	7f3b      	ldrb	r3, [r7, #28]
 8005ef4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005ef8:	b2d9      	uxtb	r1, r3
 8005efa:	683a      	ldr	r2, [r7, #0]
 8005efc:	7893      	ldrb	r3, [r2, #2]
 8005efe:	f361 1345 	bfi	r3, r1, #5, #1
 8005f02:	7093      	strb	r3, [r2, #2]
    val->six_d_zh = d6d_src.zh;
 8005f04:	7f3b      	ldrb	r3, [r7, #28]
 8005f06:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005f0a:	b2d9      	uxtb	r1, r3
 8005f0c:	683a      	ldr	r2, [r7, #0]
 8005f0e:	7893      	ldrb	r3, [r2, #2]
 8005f10:	f361 1386 	bfi	r3, r1, #6, #1
 8005f14:	7093      	strb	r3, [r2, #2]
    val->six_d    = d6d_src.d6d_ia;
 8005f16:	7f3b      	ldrb	r3, [r7, #28]
 8005f18:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005f1c:	b2d9      	uxtb	r1, r3
 8005f1e:	683a      	ldr	r2, [r7, #0]
 8005f20:	7893      	ldrb	r3, [r2, #2]
 8005f22:	f361 0300 	bfi	r3, r1, #0, #1
 8005f26:	7093      	strb	r3, [r2, #2]
    val->den_flag = d6d_src.den_drdy;
 8005f28:	7f3b      	ldrb	r3, [r7, #28]
 8005f2a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005f2e:	b2d9      	uxtb	r1, r3
 8005f30:	683a      	ldr	r2, [r7, #0]
 8005f32:	7813      	ldrb	r3, [r2, #0]
 8005f34:	f361 03c3 	bfi	r3, r1, #3, #1
 8005f38:	7013      	strb	r3, [r2, #0]
    val->drdy_xl   = status_reg.xlda;
 8005f3a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005f3e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005f42:	b2d9      	uxtb	r1, r3
 8005f44:	683a      	ldr	r2, [r7, #0]
 8005f46:	7813      	ldrb	r3, [r2, #0]
 8005f48:	f361 0300 	bfi	r3, r1, #0, #1
 8005f4c:	7013      	strb	r3, [r2, #0]
    val->drdy_g    = status_reg.gda;
 8005f4e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005f52:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005f56:	b2d9      	uxtb	r1, r3
 8005f58:	683a      	ldr	r2, [r7, #0]
 8005f5a:	7813      	ldrb	r3, [r2, #0]
 8005f5c:	f361 0341 	bfi	r3, r1, #1, #1
 8005f60:	7013      	strb	r3, [r2, #0]
    val->drdy_temp = status_reg.tda;
 8005f62:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005f66:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005f6a:	b2d9      	uxtb	r1, r3
 8005f6c:	683a      	ldr	r2, [r7, #0]
 8005f6e:	7813      	ldrb	r3, [r2, #0]
 8005f70:	f361 0382 	bfi	r3, r1, #2, #1
 8005f74:	7013      	strb	r3, [r2, #0]
    val->step_detector = emb_func_status_mainpage.is_step_det;
 8005f76:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8005f7a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005f7e:	b2d9      	uxtb	r1, r3
 8005f80:	683a      	ldr	r2, [r7, #0]
 8005f82:	78d3      	ldrb	r3, [r2, #3]
 8005f84:	f361 0341 	bfi	r3, r1, #1, #1
 8005f88:	70d3      	strb	r3, [r2, #3]
    val->tilt          = emb_func_status_mainpage.is_tilt;
 8005f8a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8005f8e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005f92:	b2d9      	uxtb	r1, r3
 8005f94:	683a      	ldr	r2, [r7, #0]
 8005f96:	78d3      	ldrb	r3, [r2, #3]
 8005f98:	f361 0382 	bfi	r3, r1, #2, #1
 8005f9c:	70d3      	strb	r3, [r2, #3]
    val->sig_mot       = emb_func_status_mainpage.is_sigmot;
 8005f9e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8005fa2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005fa6:	b2d9      	uxtb	r1, r3
 8005fa8:	683a      	ldr	r2, [r7, #0]
 8005faa:	78d3      	ldrb	r3, [r2, #3]
 8005fac:	f361 03c3 	bfi	r3, r1, #3, #1
 8005fb0:	70d3      	strb	r3, [r2, #3]
    val->fsm_lc        = emb_func_status_mainpage.is_fsm_lc;
 8005fb2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8005fb6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005fba:	b2d9      	uxtb	r1, r3
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	78d3      	ldrb	r3, [r2, #3]
 8005fc0:	f361 1304 	bfi	r3, r1, #4, #1
 8005fc4:	70d3      	strb	r3, [r2, #3]
    val->fsm1 = fsm_status_a_mainpage.is_fsm1;
 8005fc6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005fca:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005fce:	b2d9      	uxtb	r1, r3
 8005fd0:	683a      	ldr	r2, [r7, #0]
 8005fd2:	78d3      	ldrb	r3, [r2, #3]
 8005fd4:	f361 1345 	bfi	r3, r1, #5, #1
 8005fd8:	70d3      	strb	r3, [r2, #3]
    val->fsm2 = fsm_status_a_mainpage.is_fsm2;
 8005fda:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005fde:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005fe2:	b2d9      	uxtb	r1, r3
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	78d3      	ldrb	r3, [r2, #3]
 8005fe8:	f361 1386 	bfi	r3, r1, #6, #1
 8005fec:	70d3      	strb	r3, [r2, #3]
    val->fsm3 = fsm_status_a_mainpage.is_fsm3;
 8005fee:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005ff2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005ff6:	b2d9      	uxtb	r1, r3
 8005ff8:	683a      	ldr	r2, [r7, #0]
 8005ffa:	78d3      	ldrb	r3, [r2, #3]
 8005ffc:	f361 13c7 	bfi	r3, r1, #7, #1
 8006000:	70d3      	strb	r3, [r2, #3]
    val->fsm4 = fsm_status_a_mainpage.is_fsm4;
 8006002:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8006006:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800600a:	b2d9      	uxtb	r1, r3
 800600c:	683a      	ldr	r2, [r7, #0]
 800600e:	7913      	ldrb	r3, [r2, #4]
 8006010:	f361 0300 	bfi	r3, r1, #0, #1
 8006014:	7113      	strb	r3, [r2, #4]
    val->fsm5 = fsm_status_a_mainpage.is_fsm5;
 8006016:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800601a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800601e:	b2d9      	uxtb	r1, r3
 8006020:	683a      	ldr	r2, [r7, #0]
 8006022:	7913      	ldrb	r3, [r2, #4]
 8006024:	f361 0341 	bfi	r3, r1, #1, #1
 8006028:	7113      	strb	r3, [r2, #4]
    val->fsm6 = fsm_status_a_mainpage.is_fsm6;
 800602a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800602e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006032:	b2d9      	uxtb	r1, r3
 8006034:	683a      	ldr	r2, [r7, #0]
 8006036:	7913      	ldrb	r3, [r2, #4]
 8006038:	f361 0382 	bfi	r3, r1, #2, #1
 800603c:	7113      	strb	r3, [r2, #4]
    val->fsm7 = fsm_status_a_mainpage.is_fsm7;
 800603e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8006042:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006046:	b2d9      	uxtb	r1, r3
 8006048:	683a      	ldr	r2, [r7, #0]
 800604a:	7913      	ldrb	r3, [r2, #4]
 800604c:	f361 03c3 	bfi	r3, r1, #3, #1
 8006050:	7113      	strb	r3, [r2, #4]
    val->fsm8 = fsm_status_a_mainpage.is_fsm8;
 8006052:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8006056:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800605a:	b2d9      	uxtb	r1, r3
 800605c:	683a      	ldr	r2, [r7, #0]
 800605e:	7913      	ldrb	r3, [r2, #4]
 8006060:	f361 1304 	bfi	r3, r1, #4, #1
 8006064:	7113      	strb	r3, [r2, #4]
    val->fsm9  = fsm_status_b_mainpage.is_fsm9;
 8006066:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800606a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800606e:	b2d9      	uxtb	r1, r3
 8006070:	683a      	ldr	r2, [r7, #0]
 8006072:	7913      	ldrb	r3, [r2, #4]
 8006074:	f361 1345 	bfi	r3, r1, #5, #1
 8006078:	7113      	strb	r3, [r2, #4]
    val->fsm10 = fsm_status_b_mainpage.is_fsm10;
 800607a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800607e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006082:	b2d9      	uxtb	r1, r3
 8006084:	683a      	ldr	r2, [r7, #0]
 8006086:	7913      	ldrb	r3, [r2, #4]
 8006088:	f361 1386 	bfi	r3, r1, #6, #1
 800608c:	7113      	strb	r3, [r2, #4]
    val->fsm11 = fsm_status_b_mainpage.is_fsm11;
 800608e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8006092:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006096:	b2d9      	uxtb	r1, r3
 8006098:	683a      	ldr	r2, [r7, #0]
 800609a:	7913      	ldrb	r3, [r2, #4]
 800609c:	f361 13c7 	bfi	r3, r1, #7, #1
 80060a0:	7113      	strb	r3, [r2, #4]
    val->fsm12 = fsm_status_b_mainpage.is_fsm12;
 80060a2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80060a6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80060aa:	b2d9      	uxtb	r1, r3
 80060ac:	683a      	ldr	r2, [r7, #0]
 80060ae:	7953      	ldrb	r3, [r2, #5]
 80060b0:	f361 0300 	bfi	r3, r1, #0, #1
 80060b4:	7153      	strb	r3, [r2, #5]
    val->fsm13 = fsm_status_b_mainpage.is_fsm13;
 80060b6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80060ba:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80060be:	b2d9      	uxtb	r1, r3
 80060c0:	683a      	ldr	r2, [r7, #0]
 80060c2:	7953      	ldrb	r3, [r2, #5]
 80060c4:	f361 0341 	bfi	r3, r1, #1, #1
 80060c8:	7153      	strb	r3, [r2, #5]
    val->fsm14 = fsm_status_b_mainpage.is_fsm14;
 80060ca:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80060ce:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80060d2:	b2d9      	uxtb	r1, r3
 80060d4:	683a      	ldr	r2, [r7, #0]
 80060d6:	7953      	ldrb	r3, [r2, #5]
 80060d8:	f361 0382 	bfi	r3, r1, #2, #1
 80060dc:	7153      	strb	r3, [r2, #5]
    val->fsm15 = fsm_status_b_mainpage.is_fsm15;
 80060de:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80060e2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80060e6:	b2d9      	uxtb	r1, r3
 80060e8:	683a      	ldr	r2, [r7, #0]
 80060ea:	7953      	ldrb	r3, [r2, #5]
 80060ec:	f361 03c3 	bfi	r3, r1, #3, #1
 80060f0:	7153      	strb	r3, [r2, #5]
    val->fsm16 = fsm_status_b_mainpage.is_fsm16;
 80060f2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80060f6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80060fa:	b2d9      	uxtb	r1, r3
 80060fc:	683a      	ldr	r2, [r7, #0]
 80060fe:	7953      	ldrb	r3, [r2, #5]
 8006100:	f361 1304 	bfi	r3, r1, #4, #1
 8006104:	7153      	strb	r3, [r2, #5]
    val->mlc1 = mlc_status_mainpage.is_mlc1;
 8006106:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800610a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800610e:	b2d9      	uxtb	r1, r3
 8006110:	683a      	ldr	r2, [r7, #0]
 8006112:	7953      	ldrb	r3, [r2, #5]
 8006114:	f361 1345 	bfi	r3, r1, #5, #1
 8006118:	7153      	strb	r3, [r2, #5]
    val->mlc2 = mlc_status_mainpage.is_mlc2;
 800611a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800611e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006122:	b2d9      	uxtb	r1, r3
 8006124:	683a      	ldr	r2, [r7, #0]
 8006126:	7953      	ldrb	r3, [r2, #5]
 8006128:	f361 1386 	bfi	r3, r1, #6, #1
 800612c:	7153      	strb	r3, [r2, #5]
    val->mlc3 = mlc_status_mainpage.is_mlc3;
 800612e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8006132:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006136:	b2d9      	uxtb	r1, r3
 8006138:	683a      	ldr	r2, [r7, #0]
 800613a:	7953      	ldrb	r3, [r2, #5]
 800613c:	f361 13c7 	bfi	r3, r1, #7, #1
 8006140:	7153      	strb	r3, [r2, #5]
    val->mlc4 = mlc_status_mainpage.is_mlc4;
 8006142:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8006146:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800614a:	b2d9      	uxtb	r1, r3
 800614c:	683a      	ldr	r2, [r7, #0]
 800614e:	7993      	ldrb	r3, [r2, #6]
 8006150:	f361 0300 	bfi	r3, r1, #0, #1
 8006154:	7193      	strb	r3, [r2, #6]
    val->mlc5 = mlc_status_mainpage.is_mlc5;
 8006156:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800615a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800615e:	b2d9      	uxtb	r1, r3
 8006160:	683a      	ldr	r2, [r7, #0]
 8006162:	7993      	ldrb	r3, [r2, #6]
 8006164:	f361 0341 	bfi	r3, r1, #1, #1
 8006168:	7193      	strb	r3, [r2, #6]
    val->mlc6 = mlc_status_mainpage.is_mlc6;
 800616a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800616e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006172:	b2d9      	uxtb	r1, r3
 8006174:	683a      	ldr	r2, [r7, #0]
 8006176:	7993      	ldrb	r3, [r2, #6]
 8006178:	f361 0382 	bfi	r3, r1, #2, #1
 800617c:	7193      	strb	r3, [r2, #6]
    val->mlc7 = mlc_status_mainpage.is_mlc7;
 800617e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8006182:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006186:	b2d9      	uxtb	r1, r3
 8006188:	683a      	ldr	r2, [r7, #0]
 800618a:	7993      	ldrb	r3, [r2, #6]
 800618c:	f361 03c3 	bfi	r3, r1, #3, #1
 8006190:	7193      	strb	r3, [r2, #6]
    val->mlc8 = mlc_status_mainpage.is_mlc8;
 8006192:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8006196:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800619a:	b2d9      	uxtb	r1, r3
 800619c:	683a      	ldr	r2, [r7, #0]
 800619e:	7993      	ldrb	r3, [r2, #6]
 80061a0:	f361 1304 	bfi	r3, r1, #4, #1
 80061a4:	7193      	strb	r3, [r2, #6]
    val->sh_endop       = status_master_mainpage.sens_hub_endop;
 80061a6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80061aa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80061ae:	b2d9      	uxtb	r1, r3
 80061b0:	683a      	ldr	r2, [r7, #0]
 80061b2:	7993      	ldrb	r3, [r2, #6]
 80061b4:	f361 1345 	bfi	r3, r1, #5, #1
 80061b8:	7193      	strb	r3, [r2, #6]
    val->sh_slave0_nack = status_master_mainpage.slave0_nack;
 80061ba:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80061be:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80061c2:	b2d9      	uxtb	r1, r3
 80061c4:	683a      	ldr	r2, [r7, #0]
 80061c6:	7993      	ldrb	r3, [r2, #6]
 80061c8:	f361 1386 	bfi	r3, r1, #6, #1
 80061cc:	7193      	strb	r3, [r2, #6]
    val->sh_slave1_nack = status_master_mainpage.slave1_nack;
 80061ce:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80061d2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80061d6:	b2d9      	uxtb	r1, r3
 80061d8:	683a      	ldr	r2, [r7, #0]
 80061da:	7993      	ldrb	r3, [r2, #6]
 80061dc:	f361 13c7 	bfi	r3, r1, #7, #1
 80061e0:	7193      	strb	r3, [r2, #6]
    val->sh_slave2_nack = status_master_mainpage.slave2_nack;
 80061e2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80061e6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80061ea:	b2d9      	uxtb	r1, r3
 80061ec:	683a      	ldr	r2, [r7, #0]
 80061ee:	79d3      	ldrb	r3, [r2, #7]
 80061f0:	f361 0300 	bfi	r3, r1, #0, #1
 80061f4:	71d3      	strb	r3, [r2, #7]
    val->sh_slave3_nack = status_master_mainpage.slave3_nack;
 80061f6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80061fa:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80061fe:	b2d9      	uxtb	r1, r3
 8006200:	683a      	ldr	r2, [r7, #0]
 8006202:	79d3      	ldrb	r3, [r2, #7]
 8006204:	f361 0341 	bfi	r3, r1, #1, #1
 8006208:	71d3      	strb	r3, [r2, #7]
    val->sh_wr_once     = status_master_mainpage.wr_once_done;
 800620a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800620e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006212:	b2d9      	uxtb	r1, r3
 8006214:	683a      	ldr	r2, [r7, #0]
 8006216:	79d3      	ldrb	r3, [r2, #7]
 8006218:	f361 0382 	bfi	r3, r1, #2, #1
 800621c:	71d3      	strb	r3, [r2, #7]
    val->fifo_diff = (256U * fifo_status2.diff_fifo) +
 800621e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006222:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8006226:	b2db      	uxtb	r3, r3
 8006228:	b29b      	uxth	r3, r3
 800622a:	021b      	lsls	r3, r3, #8
 800622c:	b29a      	uxth	r2, r3
                     fifo_status1.diff_fifo;
 800622e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006232:	b29b      	uxth	r3, r3
    val->fifo_diff = (256U * fifo_status2.diff_fifo) +
 8006234:	4413      	add	r3, r2
 8006236:	b29b      	uxth	r3, r3
 8006238:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800623c:	b299      	uxth	r1, r3
 800623e:	683a      	ldr	r2, [r7, #0]
 8006240:	8913      	ldrh	r3, [r2, #8]
 8006242:	f361 0309 	bfi	r3, r1, #0, #10
 8006246:	8113      	strh	r3, [r2, #8]
    val->fifo_ovr_latched = fifo_status2.over_run_latched;
 8006248:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800624c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006250:	b2d9      	uxtb	r1, r3
 8006252:	683a      	ldr	r2, [r7, #0]
 8006254:	7a53      	ldrb	r3, [r2, #9]
 8006256:	f361 0382 	bfi	r3, r1, #2, #1
 800625a:	7253      	strb	r3, [r2, #9]
    val->fifo_bdr         = fifo_status2.counter_bdr_ia;
 800625c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006260:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006264:	b2d9      	uxtb	r1, r3
 8006266:	683a      	ldr	r2, [r7, #0]
 8006268:	7a53      	ldrb	r3, [r2, #9]
 800626a:	f361 03c3 	bfi	r3, r1, #3, #1
 800626e:	7253      	strb	r3, [r2, #9]
    val->fifo_full        = fifo_status2.fifo_full_ia;
 8006270:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006274:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006278:	b2d9      	uxtb	r1, r3
 800627a:	683a      	ldr	r2, [r7, #0]
 800627c:	7a53      	ldrb	r3, [r2, #9]
 800627e:	f361 1304 	bfi	r3, r1, #4, #1
 8006282:	7253      	strb	r3, [r2, #9]
    val->fifo_ovr         = fifo_status2.fifo_ovr_ia;
 8006284:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006288:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800628c:	b2d9      	uxtb	r1, r3
 800628e:	683a      	ldr	r2, [r7, #0]
 8006290:	7a53      	ldrb	r3, [r2, #9]
 8006292:	f361 1345 	bfi	r3, r1, #5, #1
 8006296:	7253      	strb	r3, [r2, #9]
    val->fifo_th          = fifo_status2.fifo_wtm_ia;
 8006298:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800629c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80062a0:	b2d9      	uxtb	r1, r3
 80062a2:	683a      	ldr	r2, [r7, #0]
 80062a4:	7a53      	ldrb	r3, [r2, #9]
 80062a6:	f361 1386 	bfi	r3, r1, #6, #1
 80062aa:	7253      	strb	r3, [r2, #9]
    ctrl5_c.rounding_status = PROPERTY_DISABLE;
 80062ac:	7e3b      	ldrb	r3, [r7, #24]
 80062ae:	f36f 1304 	bfc	r3, #4, #1
 80062b2:	763b      	strb	r3, [r7, #24]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL5_C, (uint8_t *)&ctrl5_c, 1);
 80062b4:	f107 0218 	add.w	r2, r7, #24
 80062b8:	2301      	movs	r3, #1
 80062ba:	2114      	movs	r1, #20
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f7fd fc8d 	bl	8003bdc <lsm6dsox_write_reg>
 80062c2:	64f8      	str	r0, [r7, #76]	; 0x4c
  }

  return ret;
 80062c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3750      	adds	r7, #80	; 0x50
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <lsm6dsox_embedded_sens_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_embedded_sens_set(stmdev_ctx_t *ctx,
                                   lsm6dsox_emb_sens_t *val)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b086      	sub	sp, #24
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
 80062d6:	6039      	str	r1, [r7, #0]
  lsm6dsox_emb_func_en_a_t emb_func_en_a;
  lsm6dsox_emb_func_en_b_t emb_func_en_b;
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 80062d8:	2102      	movs	r1, #2
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f7fe f9ff 	bl	80046de <lsm6dsox_mem_bank_set>
 80062e0:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d107      	bne.n	80062f8 <lsm6dsox_embedded_sens_set+0x2a>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_EN_A,
 80062e8:	f107 0210 	add.w	r2, r7, #16
 80062ec:	2301      	movs	r3, #1
 80062ee:	2104      	movs	r1, #4
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f7fd fc5b 	bl	8003bac <lsm6dsox_read_reg>
 80062f6:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&emb_func_en_a, 1);
  }

  if (ret == 0)
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d13d      	bne.n	800637a <lsm6dsox_embedded_sens_set+0xac>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_EN_B,
 80062fe:	f107 020c 	add.w	r2, r7, #12
 8006302:	2301      	movs	r3, #1
 8006304:	2105      	movs	r1, #5
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f7fd fc50 	bl	8003bac <lsm6dsox_read_reg>
 800630c:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&emb_func_en_b, 1);
    emb_func_en_b.mlc_en = val->mlc;
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006316:	b2da      	uxtb	r2, r3
 8006318:	7b3b      	ldrb	r3, [r7, #12]
 800631a:	f362 1304 	bfi	r3, r2, #4, #1
 800631e:	733b      	strb	r3, [r7, #12]
    emb_func_en_b.fsm_en = val->fsm;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006328:	b2da      	uxtb	r2, r3
 800632a:	7b3b      	ldrb	r3, [r7, #12]
 800632c:	f362 0300 	bfi	r3, r2, #0, #1
 8006330:	733b      	strb	r3, [r7, #12]
    emb_func_en_a.tilt_en = val->tilt;
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800633a:	b2da      	uxtb	r2, r3
 800633c:	7c3b      	ldrb	r3, [r7, #16]
 800633e:	f362 1304 	bfi	r3, r2, #4, #1
 8006342:	743b      	strb	r3, [r7, #16]
    emb_func_en_a.pedo_en = val->step;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800634c:	b2da      	uxtb	r2, r3
 800634e:	7c3b      	ldrb	r3, [r7, #16]
 8006350:	f362 03c3 	bfi	r3, r2, #3, #1
 8006354:	743b      	strb	r3, [r7, #16]
    emb_func_en_a.sign_motion_en = val->sig_mot;
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800635e:	b2da      	uxtb	r2, r3
 8006360:	7c3b      	ldrb	r3, [r7, #16]
 8006362:	f362 1345 	bfi	r3, r2, #5, #1
 8006366:	743b      	strb	r3, [r7, #16]
    emb_func_en_b.fifo_compr_en = val->fifo_compr;
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006370:	b2da      	uxtb	r2, r3
 8006372:	7b3b      	ldrb	r3, [r7, #12]
 8006374:	f362 03c3 	bfi	r3, r2, #3, #1
 8006378:	733b      	strb	r3, [r7, #12]
  }

  if (ret == 0)
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d107      	bne.n	8006390 <lsm6dsox_embedded_sens_set+0xc2>
  {
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_EMB_FUNC_EN_A,
 8006380:	f107 0210 	add.w	r2, r7, #16
 8006384:	2301      	movs	r3, #1
 8006386:	2104      	movs	r1, #4
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f7fd fc27 	bl	8003bdc <lsm6dsox_write_reg>
 800638e:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&emb_func_en_a, 1);
  }

  if (ret == 0)
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d107      	bne.n	80063a6 <lsm6dsox_embedded_sens_set+0xd8>
  {
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_EMB_FUNC_EN_B,
 8006396:	f107 020c 	add.w	r2, r7, #12
 800639a:	2301      	movs	r3, #1
 800639c:	2105      	movs	r1, #5
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f7fd fc1c 	bl	8003bdc <lsm6dsox_write_reg>
 80063a4:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&emb_func_en_b, 1);
  }

  if (ret == 0)
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d104      	bne.n	80063b6 <lsm6dsox_embedded_sens_set+0xe8>
  {
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 80063ac:	2100      	movs	r1, #0
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f7fe f995 	bl	80046de <lsm6dsox_mem_bank_set>
 80063b4:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80063b6:	697b      	ldr	r3, [r7, #20]
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3718      	adds	r7, #24
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <lsm6dsox_embedded_sens_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_embedded_sens_get(stmdev_ctx_t *ctx,
                                   lsm6dsox_emb_sens_t *emb_sens)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b086      	sub	sp, #24
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  lsm6dsox_emb_func_en_a_t emb_func_en_a;
  lsm6dsox_emb_func_en_b_t emb_func_en_b;
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 80063ca:	2102      	movs	r1, #2
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f7fe f986 	bl	80046de <lsm6dsox_mem_bank_set>
 80063d2:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d107      	bne.n	80063ea <lsm6dsox_embedded_sens_get+0x2a>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_EN_A,
 80063da:	f107 0210 	add.w	r2, r7, #16
 80063de:	2301      	movs	r3, #1
 80063e0:	2104      	movs	r1, #4
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f7fd fbe2 	bl	8003bac <lsm6dsox_read_reg>
 80063e8:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&emb_func_en_a, 1);
  }

  if (ret == 0)
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d13d      	bne.n	800646c <lsm6dsox_embedded_sens_get+0xac>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_EN_B,
 80063f0:	f107 020c 	add.w	r2, r7, #12
 80063f4:	2301      	movs	r3, #1
 80063f6:	2105      	movs	r1, #5
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f7fd fbd7 	bl	8003bac <lsm6dsox_read_reg>
 80063fe:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&emb_func_en_b, 1);
    emb_sens->mlc = emb_func_en_b.mlc_en;
 8006400:	7b3b      	ldrb	r3, [r7, #12]
 8006402:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006406:	b2d9      	uxtb	r1, r3
 8006408:	683a      	ldr	r2, [r7, #0]
 800640a:	7813      	ldrb	r3, [r2, #0]
 800640c:	f361 03c3 	bfi	r3, r1, #3, #1
 8006410:	7013      	strb	r3, [r2, #0]
    emb_sens->fsm = emb_func_en_b.fsm_en;
 8006412:	7b3b      	ldrb	r3, [r7, #12]
 8006414:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006418:	b2d9      	uxtb	r1, r3
 800641a:	683a      	ldr	r2, [r7, #0]
 800641c:	7813      	ldrb	r3, [r2, #0]
 800641e:	f361 1304 	bfi	r3, r1, #4, #1
 8006422:	7013      	strb	r3, [r2, #0]
    emb_sens->tilt = emb_func_en_a.tilt_en;
 8006424:	7c3b      	ldrb	r3, [r7, #16]
 8006426:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800642a:	b2d9      	uxtb	r1, r3
 800642c:	683a      	ldr	r2, [r7, #0]
 800642e:	7813      	ldrb	r3, [r2, #0]
 8006430:	f361 0341 	bfi	r3, r1, #1, #1
 8006434:	7013      	strb	r3, [r2, #0]
    emb_sens->step = emb_func_en_a.pedo_en;
 8006436:	7c3b      	ldrb	r3, [r7, #16]
 8006438:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800643c:	b2d9      	uxtb	r1, r3
 800643e:	683a      	ldr	r2, [r7, #0]
 8006440:	7813      	ldrb	r3, [r2, #0]
 8006442:	f361 0382 	bfi	r3, r1, #2, #1
 8006446:	7013      	strb	r3, [r2, #0]
    emb_sens->sig_mot = emb_func_en_a.sign_motion_en;
 8006448:	7c3b      	ldrb	r3, [r7, #16]
 800644a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800644e:	b2d9      	uxtb	r1, r3
 8006450:	683a      	ldr	r2, [r7, #0]
 8006452:	7813      	ldrb	r3, [r2, #0]
 8006454:	f361 0300 	bfi	r3, r1, #0, #1
 8006458:	7013      	strb	r3, [r2, #0]
    emb_sens->fifo_compr = emb_func_en_b.fifo_compr_en;
 800645a:	7b3b      	ldrb	r3, [r7, #12]
 800645c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006460:	b2d9      	uxtb	r1, r3
 8006462:	683a      	ldr	r2, [r7, #0]
 8006464:	7813      	ldrb	r3, [r2, #0]
 8006466:	f361 1345 	bfi	r3, r1, #5, #1
 800646a:	7013      	strb	r3, [r2, #0]
  }

  if (ret == 0)
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d104      	bne.n	800647c <lsm6dsox_embedded_sens_get+0xbc>
  {
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8006472:	2100      	movs	r1, #0
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f7fe f932 	bl	80046de <lsm6dsox_mem_bank_set>
 800647a:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800647c:	697b      	ldr	r3, [r7, #20]
}
 800647e:	4618      	mov	r0, r3
 8006480:	3718      	adds	r7, #24
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <lsm6dsox_embedded_sens_off>:
  *                  EMB_FUNC_EN_A e EMB_FUNC_EN_B.
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_embedded_sens_off(stmdev_ctx_t *ctx)
{
 8006486:	b580      	push	{r7, lr}
 8006488:	b086      	sub	sp, #24
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
  lsm6dsox_emb_func_en_a_t emb_func_en_a;
  lsm6dsox_emb_func_en_b_t emb_func_en_b;
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 800648e:	2102      	movs	r1, #2
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f7fe f924 	bl	80046de <lsm6dsox_mem_bank_set>
 8006496:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d107      	bne.n	80064ae <lsm6dsox_embedded_sens_off+0x28>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_EN_A,
 800649e:	f107 0210 	add.w	r2, r7, #16
 80064a2:	2301      	movs	r3, #1
 80064a4:	2104      	movs	r1, #4
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f7fd fb80 	bl	8003bac <lsm6dsox_read_reg>
 80064ac:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&emb_func_en_a, 1);
  }

  if (ret == 0)
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d11f      	bne.n	80064f4 <lsm6dsox_embedded_sens_off+0x6e>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_EN_B,
 80064b4:	f107 020c 	add.w	r2, r7, #12
 80064b8:	2301      	movs	r3, #1
 80064ba:	2105      	movs	r1, #5
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f7fd fb75 	bl	8003bac <lsm6dsox_read_reg>
 80064c2:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&emb_func_en_b, 1);
    emb_func_en_b.mlc_en = PROPERTY_DISABLE;
 80064c4:	7b3b      	ldrb	r3, [r7, #12]
 80064c6:	f36f 1304 	bfc	r3, #4, #1
 80064ca:	733b      	strb	r3, [r7, #12]
    emb_func_en_b.fsm_en = PROPERTY_DISABLE;
 80064cc:	7b3b      	ldrb	r3, [r7, #12]
 80064ce:	f36f 0300 	bfc	r3, #0, #1
 80064d2:	733b      	strb	r3, [r7, #12]
    emb_func_en_a.tilt_en = PROPERTY_DISABLE;
 80064d4:	7c3b      	ldrb	r3, [r7, #16]
 80064d6:	f36f 1304 	bfc	r3, #4, #1
 80064da:	743b      	strb	r3, [r7, #16]
    emb_func_en_a.pedo_en = PROPERTY_DISABLE;
 80064dc:	7c3b      	ldrb	r3, [r7, #16]
 80064de:	f36f 03c3 	bfc	r3, #3, #1
 80064e2:	743b      	strb	r3, [r7, #16]
    emb_func_en_a.sign_motion_en = PROPERTY_DISABLE;
 80064e4:	7c3b      	ldrb	r3, [r7, #16]
 80064e6:	f36f 1345 	bfc	r3, #5, #1
 80064ea:	743b      	strb	r3, [r7, #16]
    emb_func_en_b.fifo_compr_en = PROPERTY_DISABLE;
 80064ec:	7b3b      	ldrb	r3, [r7, #12]
 80064ee:	f36f 03c3 	bfc	r3, #3, #1
 80064f2:	733b      	strb	r3, [r7, #12]
  }

  if (ret == 0)
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d107      	bne.n	800650a <lsm6dsox_embedded_sens_off+0x84>
  {
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_EMB_FUNC_EN_A,
 80064fa:	f107 0210 	add.w	r2, r7, #16
 80064fe:	2301      	movs	r3, #1
 8006500:	2104      	movs	r1, #4
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f7fd fb6a 	bl	8003bdc <lsm6dsox_write_reg>
 8006508:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&emb_func_en_a, 1);
  }

  if (ret == 0)
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d107      	bne.n	8006520 <lsm6dsox_embedded_sens_off+0x9a>
  {
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_EMB_FUNC_EN_B,
 8006510:	f107 020c 	add.w	r2, r7, #12
 8006514:	2301      	movs	r3, #1
 8006516:	2105      	movs	r1, #5
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f7fd fb5f 	bl	8003bdc <lsm6dsox_write_reg>
 800651e:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&emb_func_en_b, 1);
  }

  if (ret == 0)
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d104      	bne.n	8006530 <lsm6dsox_embedded_sens_off+0xaa>
  {
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8006526:	2100      	movs	r1, #0
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f7fe f8d8 	bl	80046de <lsm6dsox_mem_bank_set>
 800652e:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8006530:	697b      	ldr	r3, [r7, #20]
}
 8006532:	4618      	mov	r0, r3
 8006534:	3718      	adds	r7, #24
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <LL_AHB2_GRP1_EnableClock>:
{
 800653a:	b480      	push	{r7}
 800653c:	b085      	sub	sp, #20
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006546:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006548:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4313      	orrs	r3, r2
 8006550:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006552:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006556:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4013      	ands	r3, r2
 800655c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800655e:	68fb      	ldr	r3, [r7, #12]
}
 8006560:	bf00      	nop
 8006562:	3714      	adds	r7, #20
 8006564:	46bd      	mov	sp, r7
 8006566:	bc80      	pop	{r7}
 8006568:	4770      	bx	lr

0800656a <LL_APB1_GRP2_EnableClock>:
{
 800656a:	b480      	push	{r7}
 800656c:	b085      	sub	sp, #20
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8006572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006576:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006578:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4313      	orrs	r3, r2
 8006580:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8006582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006586:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4013      	ands	r3, r2
 800658c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800658e:	68fb      	ldr	r3, [r7, #12]
}
 8006590:	bf00      	nop
 8006592:	3714      	adds	r7, #20
 8006594:	46bd      	mov	sp, r7
 8006596:	bc80      	pop	{r7}
 8006598:	4770      	bx	lr
	...

0800659c <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	4603      	mov	r3, r0
 80065a4:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 80065a6:	79fb      	ldrb	r3, [r7, #7]
 80065a8:	4a04      	ldr	r2, [pc, #16]	; (80065bc <BSP_LED_Init+0x20>)
 80065aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065ae:	4798      	blx	r3
  return BSP_ERROR_NONE;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3708      	adds	r7, #8
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	0800ec1c 	.word	0x0800ec1c

080065c0 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b086      	sub	sp, #24
 80065c4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80065c6:	2002      	movs	r0, #2
 80065c8:	f7ff ffb7 	bl	800653a <LL_AHB2_GRP1_EnableClock>

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065cc:	1d3b      	adds	r3, r7, #4
 80065ce:	2200      	movs	r2, #0
 80065d0:	601a      	str	r2, [r3, #0]
 80065d2:	605a      	str	r2, [r3, #4]
 80065d4:	609a      	str	r2, [r3, #8]
 80065d6:	60da      	str	r2, [r3, #12]
 80065d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80065da:	2002      	movs	r0, #2
 80065dc:	f7ff ffad 	bl	800653a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 80065e0:	2200      	movs	r2, #0
 80065e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80065e6:	480a      	ldr	r0, [pc, #40]	; (8006610 <LED_USER_GPIO_Init+0x50>)
 80065e8:	f001 f935 	bl	8007856 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 80065ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80065f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80065f2:	2301      	movs	r3, #1
 80065f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065f6:	2300      	movs	r3, #0
 80065f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80065fa:	2302      	movs	r3, #2
 80065fc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 80065fe:	1d3b      	adds	r3, r7, #4
 8006600:	4619      	mov	r1, r3
 8006602:	4803      	ldr	r0, [pc, #12]	; (8006610 <LED_USER_GPIO_Init+0x50>)
 8006604:	f000 fee2 	bl	80073cc <HAL_GPIO_Init>

}
 8006608:	bf00      	nop
 800660a:	3718      	adds	r7, #24
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	48000400 	.word	0x48000400

08006614 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	4603      	mov	r3, r0
 800661c:	460a      	mov	r2, r1
 800661e:	71fb      	strb	r3, [r7, #7]
 8006620:	4613      	mov	r3, r2
 8006622:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8006624:	2300      	movs	r3, #0
 8006626:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8006628:	79fb      	ldrb	r3, [r7, #7]
 800662a:	4a1f      	ldr	r2, [pc, #124]	; (80066a8 <BSP_PB_Init+0x94>)
 800662c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006630:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8006632:	79bb      	ldrb	r3, [r7, #6]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d132      	bne.n	800669e <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8006638:	79fb      	ldrb	r3, [r7, #7]
 800663a:	00db      	lsls	r3, r3, #3
 800663c:	4a1b      	ldr	r2, [pc, #108]	; (80066ac <BSP_PB_Init+0x98>)
 800663e:	441a      	add	r2, r3
 8006640:	79fb      	ldrb	r3, [r7, #7]
 8006642:	491b      	ldr	r1, [pc, #108]	; (80066b0 <BSP_PB_Init+0x9c>)
 8006644:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006648:	4619      	mov	r1, r3
 800664a:	4610      	mov	r0, r2
 800664c:	f000 fe7b 	bl	8007346 <HAL_EXTI_GetHandle>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d003      	beq.n	800665e <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8006656:	f06f 0303 	mvn.w	r3, #3
 800665a:	60fb      	str	r3, [r7, #12]
 800665c:	e01f      	b.n	800669e <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 800665e:	79fb      	ldrb	r3, [r7, #7]
 8006660:	00db      	lsls	r3, r3, #3
 8006662:	4a12      	ldr	r2, [pc, #72]	; (80066ac <BSP_PB_Init+0x98>)
 8006664:	1898      	adds	r0, r3, r2
 8006666:	79fb      	ldrb	r3, [r7, #7]
 8006668:	4a12      	ldr	r2, [pc, #72]	; (80066b4 <BSP_PB_Init+0xa0>)
 800666a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800666e:	461a      	mov	r2, r3
 8006670:	2100      	movs	r1, #0
 8006672:	f000 fe4f 	bl	8007314 <HAL_EXTI_RegisterCallback>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d003      	beq.n	8006684 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800667c:	f06f 0303 	mvn.w	r3, #3
 8006680:	60fb      	str	r3, [r7, #12]
 8006682:	e00c      	b.n	800669e <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8006684:	2006      	movs	r0, #6
 8006686:	79fb      	ldrb	r3, [r7, #7]
 8006688:	4a0b      	ldr	r2, [pc, #44]	; (80066b8 <BSP_PB_Init+0xa4>)
 800668a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800668e:	2200      	movs	r2, #0
 8006690:	4619      	mov	r1, r3
 8006692:	f000 fb16 	bl	8006cc2 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8006696:	2306      	movs	r3, #6
 8006698:	4618      	mov	r0, r3
 800669a:	f000 fb2c 	bl	8006cf6 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 800669e:	68fb      	ldr	r3, [r7, #12]
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	0800ec20 	.word	0x0800ec20
 80066ac:	20000060 	.word	0x20000060
 80066b0:	0800ec24 	.word	0x0800ec24
 80066b4:	0800ec28 	.word	0x0800ec28
 80066b8:	0800ec2c 	.word	0x0800ec2c

080066bc <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	4603      	mov	r3, r0
 80066c4:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 80066c6:	79fb      	ldrb	r3, [r7, #7]
 80066c8:	4a08      	ldr	r2, [pc, #32]	; (80066ec <BSP_PB_GetState+0x30>)
 80066ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066ce:	2201      	movs	r2, #1
 80066d0:	4611      	mov	r1, r2
 80066d2:	4618      	mov	r0, r3
 80066d4:	f001 f8a8 	bl	8007828 <HAL_GPIO_ReadPin>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	bf0c      	ite	eq
 80066de:	2301      	moveq	r3, #1
 80066e0:	2300      	movne	r3, #0
 80066e2:	b2db      	uxtb	r3, r3
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3708      	adds	r7, #8
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	2000005c 	.word	0x2000005c

080066f0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80066f4:	2000      	movs	r0, #0
 80066f6:	f005 f813 	bl	800b720 <BSP_PB_Callback>
}
 80066fa:	bf00      	nop
 80066fc:	bd80      	pop	{r7, pc}

080066fe <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 80066fe:	b580      	push	{r7, lr}
 8006700:	b086      	sub	sp, #24
 8006702:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006704:	2001      	movs	r0, #1
 8006706:	f7ff ff18 	bl	800653a <LL_AHB2_GRP1_EnableClock>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800670a:	2200      	movs	r2, #0
 800670c:	2100      	movs	r1, #0
 800670e:	2006      	movs	r0, #6
 8006710:	f000 fad7 	bl	8006cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8006714:	2006      	movs	r0, #6
 8006716:	f000 faee 	bl	8006cf6 <HAL_NVIC_EnableIRQ>

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800671a:	1d3b      	adds	r3, r7, #4
 800671c:	2200      	movs	r2, #0
 800671e:	601a      	str	r2, [r3, #0]
 8006720:	605a      	str	r2, [r3, #4]
 8006722:	609a      	str	r2, [r3, #8]
 8006724:	60da      	str	r2, [r3, #12]
 8006726:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006728:	2001      	movs	r0, #1
 800672a:	f7ff ff06 	bl	800653a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 800672e:	2301      	movs	r3, #1
 8006730:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006732:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8006736:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006738:	2300      	movs	r3, #0
 800673a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 800673c:	1d3b      	adds	r3, r7, #4
 800673e:	4619      	mov	r1, r3
 8006740:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006744:	f000 fe42 	bl	80073cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8006748:	2200      	movs	r2, #0
 800674a:	2100      	movs	r1, #0
 800674c:	2006      	movs	r0, #6
 800674e:	f000 fab8 	bl	8006cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8006752:	2006      	movs	r0, #6
 8006754:	f000 facf 	bl	8006cf6 <HAL_NVIC_EnableIRQ>

}
 8006758:	bf00      	nop
 800675a:	3718      	adds	r7, #24
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	4603      	mov	r3, r0
 8006768:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800676a:	2300      	movs	r3, #0
 800676c:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800676e:	79fb      	ldrb	r3, [r7, #7]
 8006770:	2b01      	cmp	r3, #1
 8006772:	d903      	bls.n	800677c <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006774:	f06f 0301 	mvn.w	r3, #1
 8006778:	60fb      	str	r3, [r7, #12]
 800677a:	e025      	b.n	80067c8 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 800677c:	79fb      	ldrb	r3, [r7, #7]
 800677e:	79fa      	ldrb	r2, [r7, #7]
 8006780:	4914      	ldr	r1, [pc, #80]	; (80067d4 <BSP_COM_Init+0x74>)
 8006782:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006786:	4814      	ldr	r0, [pc, #80]	; (80067d8 <BSP_COM_Init+0x78>)
 8006788:	4613      	mov	r3, r2
 800678a:	00db      	lsls	r3, r3, #3
 800678c:	4413      	add	r3, r2
 800678e:	011b      	lsls	r3, r3, #4
 8006790:	4403      	add	r3, r0
 8006792:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    LPUART1_MspInit(&hcom_uart[COM]);
 8006794:	79fa      	ldrb	r2, [r7, #7]
 8006796:	4613      	mov	r3, r2
 8006798:	00db      	lsls	r3, r3, #3
 800679a:	4413      	add	r3, r2
 800679c:	011b      	lsls	r3, r3, #4
 800679e:	4a0e      	ldr	r2, [pc, #56]	; (80067d8 <BSP_COM_Init+0x78>)
 80067a0:	4413      	add	r3, r2
 80067a2:	4618      	mov	r0, r3
 80067a4:	f000 f888 	bl	80068b8 <LPUART1_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_LPUART1_UART_Init(&hcom_uart[COM]))
 80067a8:	79fa      	ldrb	r2, [r7, #7]
 80067aa:	4613      	mov	r3, r2
 80067ac:	00db      	lsls	r3, r3, #3
 80067ae:	4413      	add	r3, r2
 80067b0:	011b      	lsls	r3, r3, #4
 80067b2:	4a09      	ldr	r2, [pc, #36]	; (80067d8 <BSP_COM_Init+0x78>)
 80067b4:	4413      	add	r3, r2
 80067b6:	4618      	mov	r0, r3
 80067b8:	f000 f810 	bl	80067dc <MX_LPUART1_UART_Init>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d002      	beq.n	80067c8 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80067c2:	f06f 0303 	mvn.w	r3, #3
 80067c6:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80067c8:	68fb      	ldr	r3, [r7, #12]
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	20000068 	.word	0x20000068
 80067d8:	200006cc 	.word	0x200006cc

080067dc <MX_LPUART1_UART_Init>:
 */

/* LPUART1 init function */

__weak HAL_StatusTypeDef MX_LPUART1_UART_Init(UART_HandleTypeDef* hlpuart)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80067e4:	2300      	movs	r3, #0
 80067e6:	73fb      	strb	r3, [r7, #15]

  hlpuart->Instance = LPUART1;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a24      	ldr	r2, [pc, #144]	; (800687c <MX_LPUART1_UART_Init+0xa0>)
 80067ec:	601a      	str	r2, [r3, #0]
  hlpuart->Init.BaudRate = 921600;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80067f4:	605a      	str	r2, [r3, #4]
  hlpuart->Init.WordLength = UART_WORDLENGTH_8B;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	609a      	str	r2, [r3, #8]
  hlpuart->Init.StopBits = UART_STOPBITS_1;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	60da      	str	r2, [r3, #12]
  hlpuart->Init.Parity = UART_PARITY_NONE;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	611a      	str	r2, [r3, #16]
  hlpuart->Init.Mode = UART_MODE_TX_RX;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	220c      	movs	r2, #12
 800680c:	615a      	str	r2, [r3, #20]
  hlpuart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	619a      	str	r2, [r3, #24]
  hlpuart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	621a      	str	r2, [r3, #32]
  hlpuart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart->FifoMode = UART_FIFOMODE_DISABLE;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(hlpuart) != HAL_OK)
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f004 f837 	bl	800a8a0 <HAL_UART_Init>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d001      	beq.n	800683c <MX_LPUART1_UART_Init+0x60>
  {
    ret = HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetTxFifoThreshold(hlpuart, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800683c:	2100      	movs	r1, #0
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f004 fd74 	bl	800b32c <HAL_UARTEx_SetTxFifoThreshold>
 8006844:	4603      	mov	r3, r0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d001      	beq.n	800684e <MX_LPUART1_UART_Init+0x72>
  {
    ret = HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetRxFifoThreshold(hlpuart, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800684e:	2100      	movs	r1, #0
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f004 fda9 	bl	800b3a8 <HAL_UARTEx_SetRxFifoThreshold>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d001      	beq.n	8006860 <MX_LPUART1_UART_Init+0x84>
  {
    ret = HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_DisableFifoMode(hlpuart) != HAL_OK)
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f004 fd2b 	bl	800b2bc <HAL_UARTEx_DisableFifoMode>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d001      	beq.n	8006870 <MX_LPUART1_UART_Init+0x94>
  {
    ret = HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006870:	7bfb      	ldrb	r3, [r7, #15]
}
 8006872:	4618      	mov	r0, r3
 8006874:	3710      	adds	r7, #16
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	40008000 	.word	0x40008000

08006880 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8006888:	4b09      	ldr	r3, [pc, #36]	; (80068b0 <__io_putchar+0x30>)
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	461a      	mov	r2, r3
 800688e:	4613      	mov	r3, r2
 8006890:	00db      	lsls	r3, r3, #3
 8006892:	4413      	add	r3, r2
 8006894:	011b      	lsls	r3, r3, #4
 8006896:	4a07      	ldr	r2, [pc, #28]	; (80068b4 <__io_putchar+0x34>)
 8006898:	1898      	adds	r0, r3, r2
 800689a:	1d39      	adds	r1, r7, #4
 800689c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80068a0:	2201      	movs	r2, #1
 80068a2:	f004 f84d 	bl	800a940 <HAL_UART_Transmit>
  return ch;
 80068a6:	687b      	ldr	r3, [r7, #4]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3708      	adds	r7, #8
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	2000075c 	.word	0x2000075c
 80068b4:	200006cc 	.word	0x200006cc

080068b8 <LPUART1_MspInit>:
 * @retval None
 */
DMA_HandleTypeDef hdma_lpuart1_rx;

static void LPUART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b096      	sub	sp, #88	; 0x58
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80068c0:	f107 030c 	add.w	r3, r7, #12
 80068c4:	2238      	movs	r2, #56	; 0x38
 80068c6:	2100      	movs	r1, #0
 80068c8:	4618      	mov	r0, r3
 80068ca:	f005 fd77 	bl	800c3bc <memset>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80068ce:	2320      	movs	r3, #32
 80068d0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80068d2:	2300      	movs	r3, #0
 80068d4:	61fb      	str	r3, [r7, #28]
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80068d6:	f107 030c 	add.w	r3, r7, #12
 80068da:	4618      	mov	r0, r3
 80068dc:	f003 f872 	bl	80099c4 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80068e0:	2001      	movs	r0, #1
 80068e2:	f7ff fe42 	bl	800656a <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80068e6:	2002      	movs	r0, #2
 80068e8:	f7ff fe27 	bl	800653a <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068ec:	2001      	movs	r0, #1
 80068ee:	f7ff fe24 	bl	800653a <LL_AHB2_GRP1_EnableClock>
    PB13     ------> LPUART1_CTS
    PB12     ------> LPUART1_RTS
    PA3     ------> LPUART1_RX
    PA2     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = BUS_LPUART1_CTS_GPIO_PIN;
 80068f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80068f6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068f8:	2302      	movs	r3, #2
 80068fa:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068fc:	2300      	movs	r3, #0
 80068fe:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006900:	2300      	movs	r3, #0
 8006902:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = BUS_LPUART1_CTS_GPIO_AF;
 8006904:	2308      	movs	r3, #8
 8006906:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(BUS_LPUART1_CTS_GPIO_PORT, &GPIO_InitStruct);
 8006908:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800690c:	4619      	mov	r1, r3
 800690e:	4831      	ldr	r0, [pc, #196]	; (80069d4 <LPUART1_MspInit+0x11c>)
 8006910:	f000 fd5c 	bl	80073cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_LPUART1_RTS_GPIO_PIN;
 8006914:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006918:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800691a:	2302      	movs	r3, #2
 800691c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800691e:	2300      	movs	r3, #0
 8006920:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006922:	2300      	movs	r3, #0
 8006924:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = BUS_LPUART1_RTS_GPIO_AF;
 8006926:	2308      	movs	r3, #8
 8006928:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(BUS_LPUART1_RTS_GPIO_PORT, &GPIO_InitStruct);
 800692a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800692e:	4619      	mov	r1, r3
 8006930:	4828      	ldr	r0, [pc, #160]	; (80069d4 <LPUART1_MspInit+0x11c>)
 8006932:	f000 fd4b 	bl	80073cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_LPUART1_RX_GPIO_PIN;
 8006936:	2308      	movs	r3, #8
 8006938:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800693a:	2302      	movs	r3, #2
 800693c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800693e:	2300      	movs	r3, #0
 8006940:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006942:	2300      	movs	r3, #0
 8006944:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = BUS_LPUART1_RX_GPIO_AF;
 8006946:	2308      	movs	r3, #8
 8006948:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(BUS_LPUART1_RX_GPIO_PORT, &GPIO_InitStruct);
 800694a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800694e:	4619      	mov	r1, r3
 8006950:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006954:	f000 fd3a 	bl	80073cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_LPUART1_TX_GPIO_PIN;
 8006958:	2304      	movs	r3, #4
 800695a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800695c:	2302      	movs	r3, #2
 800695e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006960:	2300      	movs	r3, #0
 8006962:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006964:	2300      	movs	r3, #0
 8006966:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = BUS_LPUART1_TX_GPIO_AF;
 8006968:	2308      	movs	r3, #8
 800696a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(BUS_LPUART1_TX_GPIO_PORT, &GPIO_InitStruct);
 800696c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006970:	4619      	mov	r1, r3
 8006972:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006976:	f000 fd29 	bl	80073cc <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_lpuart1_rx.Instance = DMA1_Channel6;
 800697a:	4b17      	ldr	r3, [pc, #92]	; (80069d8 <LPUART1_MspInit+0x120>)
 800697c:	4a17      	ldr	r2, [pc, #92]	; (80069dc <LPUART1_MspInit+0x124>)
 800697e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8006980:	4b15      	ldr	r3, [pc, #84]	; (80069d8 <LPUART1_MspInit+0x120>)
 8006982:	2215      	movs	r2, #21
 8006984:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006986:	4b14      	ldr	r3, [pc, #80]	; (80069d8 <LPUART1_MspInit+0x120>)
 8006988:	2200      	movs	r2, #0
 800698a:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800698c:	4b12      	ldr	r3, [pc, #72]	; (80069d8 <LPUART1_MspInit+0x120>)
 800698e:	2200      	movs	r2, #0
 8006990:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006992:	4b11      	ldr	r3, [pc, #68]	; (80069d8 <LPUART1_MspInit+0x120>)
 8006994:	2280      	movs	r2, #128	; 0x80
 8006996:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006998:	4b0f      	ldr	r3, [pc, #60]	; (80069d8 <LPUART1_MspInit+0x120>)
 800699a:	2200      	movs	r2, #0
 800699c:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800699e:	4b0e      	ldr	r3, [pc, #56]	; (80069d8 <LPUART1_MspInit+0x120>)
 80069a0:	2200      	movs	r2, #0
 80069a2:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 80069a4:	4b0c      	ldr	r3, [pc, #48]	; (80069d8 <LPUART1_MspInit+0x120>)
 80069a6:	2220      	movs	r2, #32
 80069a8:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80069aa:	4b0b      	ldr	r3, [pc, #44]	; (80069d8 <LPUART1_MspInit+0x120>)
 80069ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80069b0:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_lpuart1_rx);
 80069b2:	4809      	ldr	r0, [pc, #36]	; (80069d8 <LPUART1_MspInit+0x120>)
 80069b4:	f000 faa4 	bl	8006f00 <HAL_DMA_Init>

    HAL_DMA_ConfigChannelAttributes(&hdma_lpuart1_rx, DMA_CHANNEL_NPRIV);
 80069b8:	2110      	movs	r1, #16
 80069ba:	4807      	ldr	r0, [pc, #28]	; (80069d8 <LPUART1_MspInit+0x120>)
 80069bc:	f000 fc0e 	bl	80071dc <HAL_DMA_ConfigChannelAttributes>

  __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a05      	ldr	r2, [pc, #20]	; (80069d8 <LPUART1_MspInit+0x120>)
 80069c4:	67da      	str	r2, [r3, #124]	; 0x7c
 80069c6:	4a04      	ldr	r2, [pc, #16]	; (80069d8 <LPUART1_MspInit+0x120>)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
}
 80069cc:	bf00      	nop
 80069ce:	3758      	adds	r7, #88	; 0x58
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	48000400 	.word	0x48000400
 80069d8:	20000760 	.word	0x20000760
 80069dc:	4002006c 	.word	0x4002006c

080069e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80069e6:	2300      	movs	r3, #0
 80069e8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80069ea:	2003      	movs	r0, #3
 80069ec:	f000 f95e 	bl	8006cac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80069f0:	f002 fe0a 	bl	8009608 <HAL_RCC_GetHCLKFreq>
 80069f4:	4603      	mov	r3, r0
 80069f6:	4a09      	ldr	r2, [pc, #36]	; (8006a1c <HAL_Init+0x3c>)
 80069f8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80069fa:	2000      	movs	r0, #0
 80069fc:	f000 f810 	bl	8006a20 <HAL_InitTick>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d002      	beq.n	8006a0c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	71fb      	strb	r3, [r7, #7]
 8006a0a:	e001      	b.n	8006a10 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006a0c:	f7fb fb48 	bl	80020a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006a10:	79fb      	ldrb	r3, [r7, #7]
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3708      	adds	r7, #8
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	20000000 	.word	0x20000000

08006a20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8006a2c:	4b17      	ldr	r3, [pc, #92]	; (8006a8c <HAL_InitTick+0x6c>)
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d024      	beq.n	8006a7e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8006a34:	f002 fde8 	bl	8009608 <HAL_RCC_GetHCLKFreq>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	4b14      	ldr	r3, [pc, #80]	; (8006a8c <HAL_InitTick+0x6c>)
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	4619      	mov	r1, r3
 8006a40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a44:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f000 f960 	bl	8006d12 <HAL_SYSTICK_Config>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d10f      	bne.n	8006a78 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2b0f      	cmp	r3, #15
 8006a5c:	d809      	bhi.n	8006a72 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006a5e:	2200      	movs	r2, #0
 8006a60:	6879      	ldr	r1, [r7, #4]
 8006a62:	f04f 30ff 	mov.w	r0, #4294967295
 8006a66:	f000 f92c 	bl	8006cc2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006a6a:	4a09      	ldr	r2, [pc, #36]	; (8006a90 <HAL_InitTick+0x70>)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6013      	str	r3, [r2, #0]
 8006a70:	e007      	b.n	8006a82 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	73fb      	strb	r3, [r7, #15]
 8006a76:	e004      	b.n	8006a82 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	73fb      	strb	r3, [r7, #15]
 8006a7c:	e001      	b.n	8006a82 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3710      	adds	r7, #16
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	20000070 	.word	0x20000070
 8006a90:	2000006c 	.word	0x2000006c

08006a94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006a94:	b480      	push	{r7}
 8006a96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006a98:	4b05      	ldr	r3, [pc, #20]	; (8006ab0 <HAL_IncTick+0x1c>)
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	4b05      	ldr	r3, [pc, #20]	; (8006ab4 <HAL_IncTick+0x20>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	4a03      	ldr	r2, [pc, #12]	; (8006ab4 <HAL_IncTick+0x20>)
 8006aa6:	6013      	str	r3, [r2, #0]
}
 8006aa8:	bf00      	nop
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bc80      	pop	{r7}
 8006aae:	4770      	bx	lr
 8006ab0:	20000070 	.word	0x20000070
 8006ab4:	200007c0 	.word	0x200007c0

08006ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	af00      	add	r7, sp, #0
  return uwTick;
 8006abc:	4b02      	ldr	r3, [pc, #8]	; (8006ac8 <HAL_GetTick+0x10>)
 8006abe:	681b      	ldr	r3, [r3, #0]
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bc80      	pop	{r7}
 8006ac6:	4770      	bx	lr
 8006ac8:	200007c0 	.word	0x200007c0

08006acc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006ad4:	f7ff fff0 	bl	8006ab8 <HAL_GetTick>
 8006ad8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae4:	d005      	beq.n	8006af2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006ae6:	4b0a      	ldr	r3, [pc, #40]	; (8006b10 <HAL_Delay+0x44>)
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	461a      	mov	r2, r3
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	4413      	add	r3, r2
 8006af0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006af2:	bf00      	nop
 8006af4:	f7ff ffe0 	bl	8006ab8 <HAL_GetTick>
 8006af8:	4602      	mov	r2, r0
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d8f7      	bhi.n	8006af4 <HAL_Delay+0x28>
  {
  }
}
 8006b04:	bf00      	nop
 8006b06:	bf00      	nop
 8006b08:	3710      	adds	r7, #16
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	20000070 	.word	0x20000070

08006b14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f003 0307 	and.w	r3, r3, #7
 8006b22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006b24:	4b0c      	ldr	r3, [pc, #48]	; (8006b58 <__NVIC_SetPriorityGrouping+0x44>)
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006b2a:	68ba      	ldr	r2, [r7, #8]
 8006b2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006b30:	4013      	ands	r3, r2
 8006b32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006b3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006b46:	4a04      	ldr	r2, [pc, #16]	; (8006b58 <__NVIC_SetPriorityGrouping+0x44>)
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	60d3      	str	r3, [r2, #12]
}
 8006b4c:	bf00      	nop
 8006b4e:	3714      	adds	r7, #20
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bc80      	pop	{r7}
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop
 8006b58:	e000ed00 	.word	0xe000ed00

08006b5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006b60:	4b04      	ldr	r3, [pc, #16]	; (8006b74 <__NVIC_GetPriorityGrouping+0x18>)
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	0a1b      	lsrs	r3, r3, #8
 8006b66:	f003 0307 	and.w	r3, r3, #7
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bc80      	pop	{r7}
 8006b70:	4770      	bx	lr
 8006b72:	bf00      	nop
 8006b74:	e000ed00 	.word	0xe000ed00

08006b78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	4603      	mov	r3, r0
 8006b80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	db0b      	blt.n	8006ba2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006b8a:	79fb      	ldrb	r3, [r7, #7]
 8006b8c:	f003 021f 	and.w	r2, r3, #31
 8006b90:	4906      	ldr	r1, [pc, #24]	; (8006bac <__NVIC_EnableIRQ+0x34>)
 8006b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b96:	095b      	lsrs	r3, r3, #5
 8006b98:	2001      	movs	r0, #1
 8006b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8006b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006ba2:	bf00      	nop
 8006ba4:	370c      	adds	r7, #12
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bc80      	pop	{r7}
 8006baa:	4770      	bx	lr
 8006bac:	e000e100 	.word	0xe000e100

08006bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	6039      	str	r1, [r7, #0]
 8006bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	db0a      	blt.n	8006bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	b2da      	uxtb	r2, r3
 8006bc8:	490c      	ldr	r1, [pc, #48]	; (8006bfc <__NVIC_SetPriority+0x4c>)
 8006bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bce:	0112      	lsls	r2, r2, #4
 8006bd0:	b2d2      	uxtb	r2, r2
 8006bd2:	440b      	add	r3, r1
 8006bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006bd8:	e00a      	b.n	8006bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	b2da      	uxtb	r2, r3
 8006bde:	4908      	ldr	r1, [pc, #32]	; (8006c00 <__NVIC_SetPriority+0x50>)
 8006be0:	79fb      	ldrb	r3, [r7, #7]
 8006be2:	f003 030f 	and.w	r3, r3, #15
 8006be6:	3b04      	subs	r3, #4
 8006be8:	0112      	lsls	r2, r2, #4
 8006bea:	b2d2      	uxtb	r2, r2
 8006bec:	440b      	add	r3, r1
 8006bee:	761a      	strb	r2, [r3, #24]
}
 8006bf0:	bf00      	nop
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bc80      	pop	{r7}
 8006bf8:	4770      	bx	lr
 8006bfa:	bf00      	nop
 8006bfc:	e000e100 	.word	0xe000e100
 8006c00:	e000ed00 	.word	0xe000ed00

08006c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b089      	sub	sp, #36	; 0x24
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f003 0307 	and.w	r3, r3, #7
 8006c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	f1c3 0307 	rsb	r3, r3, #7
 8006c1e:	2b04      	cmp	r3, #4
 8006c20:	bf28      	it	cs
 8006c22:	2304      	movcs	r3, #4
 8006c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	3304      	adds	r3, #4
 8006c2a:	2b06      	cmp	r3, #6
 8006c2c:	d902      	bls.n	8006c34 <NVIC_EncodePriority+0x30>
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	3b03      	subs	r3, #3
 8006c32:	e000      	b.n	8006c36 <NVIC_EncodePriority+0x32>
 8006c34:	2300      	movs	r3, #0
 8006c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006c38:	f04f 32ff 	mov.w	r2, #4294967295
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c42:	43da      	mvns	r2, r3
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	401a      	ands	r2, r3
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	fa01 f303 	lsl.w	r3, r1, r3
 8006c56:	43d9      	mvns	r1, r3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006c5c:	4313      	orrs	r3, r2
         );
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3724      	adds	r7, #36	; 0x24
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bc80      	pop	{r7}
 8006c66:	4770      	bx	lr

08006c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	3b01      	subs	r3, #1
 8006c74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c78:	d301      	bcc.n	8006c7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e00f      	b.n	8006c9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006c7e:	4a0a      	ldr	r2, [pc, #40]	; (8006ca8 <SysTick_Config+0x40>)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	3b01      	subs	r3, #1
 8006c84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006c86:	210f      	movs	r1, #15
 8006c88:	f04f 30ff 	mov.w	r0, #4294967295
 8006c8c:	f7ff ff90 	bl	8006bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006c90:	4b05      	ldr	r3, [pc, #20]	; (8006ca8 <SysTick_Config+0x40>)
 8006c92:	2200      	movs	r2, #0
 8006c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006c96:	4b04      	ldr	r3, [pc, #16]	; (8006ca8 <SysTick_Config+0x40>)
 8006c98:	2207      	movs	r2, #7
 8006c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3708      	adds	r7, #8
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	e000e010 	.word	0xe000e010

08006cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b082      	sub	sp, #8
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f7ff ff2d 	bl	8006b14 <__NVIC_SetPriorityGrouping>
}
 8006cba:	bf00      	nop
 8006cbc:	3708      	adds	r7, #8
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b086      	sub	sp, #24
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	4603      	mov	r3, r0
 8006cca:	60b9      	str	r1, [r7, #8]
 8006ccc:	607a      	str	r2, [r7, #4]
 8006cce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006cd0:	f7ff ff44 	bl	8006b5c <__NVIC_GetPriorityGrouping>
 8006cd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	68b9      	ldr	r1, [r7, #8]
 8006cda:	6978      	ldr	r0, [r7, #20]
 8006cdc:	f7ff ff92 	bl	8006c04 <NVIC_EncodePriority>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ce6:	4611      	mov	r1, r2
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f7ff ff61 	bl	8006bb0 <__NVIC_SetPriority>
}
 8006cee:	bf00      	nop
 8006cf0:	3718      	adds	r7, #24
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}

08006cf6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006cf6:	b580      	push	{r7, lr}
 8006cf8:	b082      	sub	sp, #8
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d04:	4618      	mov	r0, r3
 8006d06:	f7ff ff37 	bl	8006b78 <__NVIC_EnableIRQ>
}
 8006d0a:	bf00      	nop
 8006d0c:	3708      	adds	r7, #8
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b082      	sub	sp, #8
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f7ff ffa4 	bl	8006c68 <SysTick_Config>
 8006d20:	4603      	mov	r3, r0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3708      	adds	r7, #8
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
	...

08006d2c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d101      	bne.n	8006d3e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e054      	b.n	8006de8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	7f5b      	ldrb	r3, [r3, #29]
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d105      	bne.n	8006d54 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f7fb f9ac 	bl	80020ac <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2202      	movs	r2, #2
 8006d58:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	791b      	ldrb	r3, [r3, #4]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10c      	bne.n	8006d7c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a22      	ldr	r2, [pc, #136]	; (8006df0 <HAL_CRC_Init+0xc4>)
 8006d68:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	689a      	ldr	r2, [r3, #8]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f022 0218 	bic.w	r2, r2, #24
 8006d78:	609a      	str	r2, [r3, #8]
 8006d7a:	e00c      	b.n	8006d96 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6899      	ldr	r1, [r3, #8]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	461a      	mov	r2, r3
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 f834 	bl	8006df4 <HAL_CRCEx_Polynomial_Set>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d001      	beq.n	8006d96 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e028      	b.n	8006de8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	795b      	ldrb	r3, [r3, #5]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d105      	bne.n	8006daa <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f04f 32ff 	mov.w	r2, #4294967295
 8006da6:	611a      	str	r2, [r3, #16]
 8006da8:	e004      	b.n	8006db4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	6912      	ldr	r2, [r2, #16]
 8006db2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	695a      	ldr	r2, [r3, #20]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	430a      	orrs	r2, r1
 8006dc8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	699a      	ldr	r2, [r3, #24]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	430a      	orrs	r2, r1
 8006dde:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3708      	adds	r7, #8
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	04c11db7 	.word	0x04c11db7

08006df4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b087      	sub	sp, #28
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e00:	2300      	movs	r3, #0
 8006e02:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006e04:	231f      	movs	r3, #31
 8006e06:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006e08:	bf00      	nop
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	1e5a      	subs	r2, r3, #1
 8006e0e:	613a      	str	r2, [r7, #16]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d009      	beq.n	8006e28 <HAL_CRCEx_Polynomial_Set+0x34>
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	f003 031f 	and.w	r3, r3, #31
 8006e1a:	68ba      	ldr	r2, [r7, #8]
 8006e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e20:	f003 0301 	and.w	r3, r3, #1
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d0f0      	beq.n	8006e0a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2b18      	cmp	r3, #24
 8006e2c:	d846      	bhi.n	8006ebc <HAL_CRCEx_Polynomial_Set+0xc8>
 8006e2e:	a201      	add	r2, pc, #4	; (adr r2, 8006e34 <HAL_CRCEx_Polynomial_Set+0x40>)
 8006e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e34:	08006ec3 	.word	0x08006ec3
 8006e38:	08006ebd 	.word	0x08006ebd
 8006e3c:	08006ebd 	.word	0x08006ebd
 8006e40:	08006ebd 	.word	0x08006ebd
 8006e44:	08006ebd 	.word	0x08006ebd
 8006e48:	08006ebd 	.word	0x08006ebd
 8006e4c:	08006ebd 	.word	0x08006ebd
 8006e50:	08006ebd 	.word	0x08006ebd
 8006e54:	08006eb1 	.word	0x08006eb1
 8006e58:	08006ebd 	.word	0x08006ebd
 8006e5c:	08006ebd 	.word	0x08006ebd
 8006e60:	08006ebd 	.word	0x08006ebd
 8006e64:	08006ebd 	.word	0x08006ebd
 8006e68:	08006ebd 	.word	0x08006ebd
 8006e6c:	08006ebd 	.word	0x08006ebd
 8006e70:	08006ebd 	.word	0x08006ebd
 8006e74:	08006ea5 	.word	0x08006ea5
 8006e78:	08006ebd 	.word	0x08006ebd
 8006e7c:	08006ebd 	.word	0x08006ebd
 8006e80:	08006ebd 	.word	0x08006ebd
 8006e84:	08006ebd 	.word	0x08006ebd
 8006e88:	08006ebd 	.word	0x08006ebd
 8006e8c:	08006ebd 	.word	0x08006ebd
 8006e90:	08006ebd 	.word	0x08006ebd
 8006e94:	08006e99 	.word	0x08006e99
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	2b06      	cmp	r3, #6
 8006e9c:	d913      	bls.n	8006ec6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006ea2:	e010      	b.n	8006ec6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	2b07      	cmp	r3, #7
 8006ea8:	d90f      	bls.n	8006eca <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006eae:	e00c      	b.n	8006eca <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	2b0f      	cmp	r3, #15
 8006eb4:	d90b      	bls.n	8006ece <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006eba:	e008      	b.n	8006ece <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	75fb      	strb	r3, [r7, #23]
      break;
 8006ec0:	e006      	b.n	8006ed0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006ec2:	bf00      	nop
 8006ec4:	e004      	b.n	8006ed0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006ec6:	bf00      	nop
 8006ec8:	e002      	b.n	8006ed0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006eca:	bf00      	nop
 8006ecc:	e000      	b.n	8006ed0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006ece:	bf00      	nop
  }
  if (status == HAL_OK)
 8006ed0:	7dfb      	ldrb	r3, [r7, #23]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d10d      	bne.n	8006ef2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68ba      	ldr	r2, [r7, #8]
 8006edc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	f023 0118 	bic.w	r1, r3, #24
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	430a      	orrs	r2, r1
 8006ef0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	371c      	adds	r7, #28
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bc80      	pop	{r7}
 8006efc:	4770      	bx	lr
 8006efe:	bf00      	nop

08006f00 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d101      	bne.n	8006f12 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e08e      	b.n	8007030 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	461a      	mov	r2, r3
 8006f18:	4b47      	ldr	r3, [pc, #284]	; (8007038 <HAL_DMA_Init+0x138>)
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d80f      	bhi.n	8006f3e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	461a      	mov	r2, r3
 8006f24:	4b45      	ldr	r3, [pc, #276]	; (800703c <HAL_DMA_Init+0x13c>)
 8006f26:	4413      	add	r3, r2
 8006f28:	4a45      	ldr	r2, [pc, #276]	; (8007040 <HAL_DMA_Init+0x140>)
 8006f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f2e:	091b      	lsrs	r3, r3, #4
 8006f30:	009a      	lsls	r2, r3, #2
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a42      	ldr	r2, [pc, #264]	; (8007044 <HAL_DMA_Init+0x144>)
 8006f3a:	641a      	str	r2, [r3, #64]	; 0x40
 8006f3c:	e00e      	b.n	8006f5c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	461a      	mov	r2, r3
 8006f44:	4b40      	ldr	r3, [pc, #256]	; (8007048 <HAL_DMA_Init+0x148>)
 8006f46:	4413      	add	r3, r2
 8006f48:	4a3d      	ldr	r2, [pc, #244]	; (8007040 <HAL_DMA_Init+0x140>)
 8006f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f4e:	091b      	lsrs	r3, r3, #4
 8006f50:	009a      	lsls	r2, r3, #2
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a3c      	ldr	r2, [pc, #240]	; (800704c <HAL_DMA_Init+0x14c>)
 8006f5a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2202      	movs	r2, #2
 8006f60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	6812      	ldr	r2, [r2, #0]
 8006f6e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f76:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	6819      	ldr	r1, [r3, #0]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	689a      	ldr	r2, [r3, #8]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	431a      	orrs	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	431a      	orrs	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	431a      	orrs	r2, r3
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	699b      	ldr	r3, [r3, #24]
 8006f98:	431a      	orrs	r2, r3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	69db      	ldr	r3, [r3, #28]
 8006f9e:	431a      	orrs	r2, r3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6a1b      	ldr	r3, [r3, #32]
 8006fa4:	431a      	orrs	r2, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	430a      	orrs	r2, r1
 8006fac:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 f944 	bl	800723c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fbc:	d102      	bne.n	8006fc4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	685a      	ldr	r2, [r3, #4]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fcc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006fd0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006fda:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d010      	beq.n	8007006 <HAL_DMA_Init+0x106>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	2b04      	cmp	r3, #4
 8006fea:	d80c      	bhi.n	8007006 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 f96d 	bl	80072cc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007002:	605a      	str	r2, [r3, #4]
 8007004:	e008      	b.n	8007018 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2201      	movs	r2, #1
 8007022:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	40020407 	.word	0x40020407
 800703c:	bffdfff8 	.word	0xbffdfff8
 8007040:	cccccccd 	.word	0xcccccccd
 8007044:	40020000 	.word	0x40020000
 8007048:	bffdfbf8 	.word	0xbffdfbf8
 800704c:	40020400 	.word	0x40020400

08007050 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800706c:	f003 031c 	and.w	r3, r3, #28
 8007070:	2204      	movs	r2, #4
 8007072:	409a      	lsls	r2, r3
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	4013      	ands	r3, r2
 8007078:	2b00      	cmp	r3, #0
 800707a:	d027      	beq.n	80070cc <HAL_DMA_IRQHandler+0x7c>
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	f003 0304 	and.w	r3, r3, #4
 8007082:	2b00      	cmp	r3, #0
 8007084:	d022      	beq.n	80070cc <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 0320 	and.w	r3, r3, #32
 8007090:	2b00      	cmp	r3, #0
 8007092:	d107      	bne.n	80070a4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f022 0204 	bic.w	r2, r2, #4
 80070a2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070a8:	f003 021c 	and.w	r2, r3, #28
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b0:	2104      	movs	r1, #4
 80070b2:	fa01 f202 	lsl.w	r2, r1, r2
 80070b6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f000 8081 	beq.w	80071c4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80070ca:	e07b      	b.n	80071c4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070d0:	f003 031c 	and.w	r3, r3, #28
 80070d4:	2202      	movs	r2, #2
 80070d6:	409a      	lsls	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	4013      	ands	r3, r2
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d03d      	beq.n	800715c <HAL_DMA_IRQHandler+0x10c>
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	f003 0302 	and.w	r3, r3, #2
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d038      	beq.n	800715c <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 0320 	and.w	r3, r3, #32
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d10b      	bne.n	8007110 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f022 020a 	bic.w	r2, r2, #10
 8007106:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	461a      	mov	r2, r3
 8007116:	4b2e      	ldr	r3, [pc, #184]	; (80071d0 <HAL_DMA_IRQHandler+0x180>)
 8007118:	429a      	cmp	r2, r3
 800711a:	d909      	bls.n	8007130 <HAL_DMA_IRQHandler+0xe0>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007120:	f003 031c 	and.w	r3, r3, #28
 8007124:	4a2b      	ldr	r2, [pc, #172]	; (80071d4 <HAL_DMA_IRQHandler+0x184>)
 8007126:	2102      	movs	r1, #2
 8007128:	fa01 f303 	lsl.w	r3, r1, r3
 800712c:	6053      	str	r3, [r2, #4]
 800712e:	e008      	b.n	8007142 <HAL_DMA_IRQHandler+0xf2>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007134:	f003 031c 	and.w	r3, r3, #28
 8007138:	4a27      	ldr	r2, [pc, #156]	; (80071d8 <HAL_DMA_IRQHandler+0x188>)
 800713a:	2102      	movs	r1, #2
 800713c:	fa01 f303 	lsl.w	r3, r1, r3
 8007140:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800714e:	2b00      	cmp	r3, #0
 8007150:	d038      	beq.n	80071c4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800715a:	e033      	b.n	80071c4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007160:	f003 031c 	and.w	r3, r3, #28
 8007164:	2208      	movs	r2, #8
 8007166:	409a      	lsls	r2, r3
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	4013      	ands	r3, r2
 800716c:	2b00      	cmp	r3, #0
 800716e:	d02a      	beq.n	80071c6 <HAL_DMA_IRQHandler+0x176>
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	f003 0308 	and.w	r3, r3, #8
 8007176:	2b00      	cmp	r3, #0
 8007178:	d025      	beq.n	80071c6 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f022 020e 	bic.w	r2, r2, #14
 8007188:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800718e:	f003 021c 	and.w	r2, r3, #28
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007196:	2101      	movs	r1, #1
 8007198:	fa01 f202 	lsl.w	r2, r1, r2
 800719c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2201      	movs	r2, #1
 80071a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d004      	beq.n	80071c6 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80071c4:	bf00      	nop
 80071c6:	bf00      	nop
}
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	40020080 	.word	0x40020080
 80071d4:	40020400 	.word	0x40020400
 80071d8:	40020000 	.word	0x40020000

080071dc <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 80071dc:	b480      	push	{r7}
 80071de:	b085      	sub	sp, #20
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071e6:	2300      	movs	r3, #0
 80071e8:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d103      	bne.n	80071f8 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	72fb      	strb	r3, [r7, #11]
    return status;
 80071f4:	7afb      	ldrb	r3, [r7, #11]
 80071f6:	e01b      	b.n	8007230 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	f003 0310 	and.w	r3, r3, #16
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00d      	beq.n	8007226 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007210:	2b00      	cmp	r3, #0
 8007212:	d004      	beq.n	800721e <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800721a:	60fb      	str	r3, [r7, #12]
 800721c:	e003      	b.n	8007226 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007224:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	68fa      	ldr	r2, [r7, #12]
 800722c:	601a      	str	r2, [r3, #0]

  return status;
 800722e:	7afb      	ldrb	r3, [r7, #11]
}
 8007230:	4618      	mov	r0, r3
 8007232:	3714      	adds	r7, #20
 8007234:	46bd      	mov	sp, r7
 8007236:	bc80      	pop	{r7}
 8007238:	4770      	bx	lr
	...

0800723c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800723c:	b480      	push	{r7}
 800723e:	b085      	sub	sp, #20
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	461a      	mov	r2, r3
 800724a:	4b1c      	ldr	r3, [pc, #112]	; (80072bc <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 800724c:	429a      	cmp	r2, r3
 800724e:	d813      	bhi.n	8007278 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007254:	089b      	lsrs	r3, r3, #2
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800725c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	b2db      	uxtb	r3, r3
 800726a:	3b08      	subs	r3, #8
 800726c:	4a14      	ldr	r2, [pc, #80]	; (80072c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800726e:	fba2 2303 	umull	r2, r3, r2, r3
 8007272:	091b      	lsrs	r3, r3, #4
 8007274:	60fb      	str	r3, [r7, #12]
 8007276:	e011      	b.n	800729c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800727c:	089b      	lsrs	r3, r3, #2
 800727e:	009a      	lsls	r2, r3, #2
 8007280:	4b10      	ldr	r3, [pc, #64]	; (80072c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8007282:	4413      	add	r3, r2
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	b2db      	uxtb	r3, r3
 800728e:	3b08      	subs	r3, #8
 8007290:	4a0b      	ldr	r2, [pc, #44]	; (80072c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8007292:	fba2 2303 	umull	r2, r3, r2, r3
 8007296:	091b      	lsrs	r3, r3, #4
 8007298:	3307      	adds	r3, #7
 800729a:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4a0a      	ldr	r2, [pc, #40]	; (80072c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80072a0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f003 031f 	and.w	r3, r3, #31
 80072a8:	2201      	movs	r2, #1
 80072aa:	409a      	lsls	r2, r3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	651a      	str	r2, [r3, #80]	; 0x50
}
 80072b0:	bf00      	nop
 80072b2:	3714      	adds	r7, #20
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bc80      	pop	{r7}
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	40020407 	.word	0x40020407
 80072c0:	cccccccd 	.word	0xcccccccd
 80072c4:	4002081c 	.word	0x4002081c
 80072c8:	40020880 	.word	0x40020880

080072cc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b085      	sub	sp, #20
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072dc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	4b0a      	ldr	r3, [pc, #40]	; (800730c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80072e2:	4413      	add	r3, r2
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	461a      	mov	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4a08      	ldr	r2, [pc, #32]	; (8007310 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80072f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	3b01      	subs	r3, #1
 80072f6:	f003 0303 	and.w	r3, r3, #3
 80072fa:	2201      	movs	r2, #1
 80072fc:	409a      	lsls	r2, r3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8007302:	bf00      	nop
 8007304:	3714      	adds	r7, #20
 8007306:	46bd      	mov	sp, r7
 8007308:	bc80      	pop	{r7}
 800730a:	4770      	bx	lr
 800730c:	1000823f 	.word	0x1000823f
 8007310:	40020940 	.word	0x40020940

08007314 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8007314:	b480      	push	{r7}
 8007316:	b087      	sub	sp, #28
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	460b      	mov	r3, r1
 800731e:	607a      	str	r2, [r7, #4]
 8007320:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007322:	2300      	movs	r3, #0
 8007324:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8007326:	7afb      	ldrb	r3, [r7, #11]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d103      	bne.n	8007334 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	605a      	str	r2, [r3, #4]
      break;
 8007332:	e002      	b.n	800733a <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	75fb      	strb	r3, [r7, #23]
      break;
 8007338:	bf00      	nop
  }

  return status;
 800733a:	7dfb      	ldrb	r3, [r7, #23]
}
 800733c:	4618      	mov	r0, r3
 800733e:	371c      	adds	r7, #28
 8007340:	46bd      	mov	sp, r7
 8007342:	bc80      	pop	{r7}
 8007344:	4770      	bx	lr

08007346 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8007346:	b480      	push	{r7}
 8007348:	b083      	sub	sp, #12
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
 800734e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d101      	bne.n	800735a <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	e003      	b.n	8007362 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	683a      	ldr	r2, [r7, #0]
 800735e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007360:	2300      	movs	r3, #0
  }
}
 8007362:	4618      	mov	r0, r3
 8007364:	370c      	adds	r7, #12
 8007366:	46bd      	mov	sp, r7
 8007368:	bc80      	pop	{r7}
 800736a:	4770      	bx	lr

0800736c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b086      	sub	sp, #24
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	0c1b      	lsrs	r3, r3, #16
 800737a:	f003 0301 	and.w	r3, r3, #1
 800737e:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 031f 	and.w	r3, r3, #31
 8007388:	2201      	movs	r2, #1
 800738a:	fa02 f303 	lsl.w	r3, r2, r3
 800738e:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	015b      	lsls	r3, r3, #5
 8007394:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8007398:	f603 030c 	addw	r3, r3, #2060	; 0x80c
 800739c:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	693a      	ldr	r2, [r7, #16]
 80073a4:	4013      	ands	r3, r2
 80073a6:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d009      	beq.n	80073c2 <HAL_EXTI_IRQHandler+0x56>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	693a      	ldr	r2, [r7, #16]
 80073b2:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d002      	beq.n	80073c2 <HAL_EXTI_IRQHandler+0x56>
    {
      hexti->PendingCallback();
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	4798      	blx	r3
    }
  }
}
 80073c2:	bf00      	nop
 80073c4:	3718      	adds	r7, #24
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
	...

080073cc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b087      	sub	sp, #28
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80073d6:	2300      	movs	r3, #0
 80073d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80073da:	e140      	b.n	800765e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	2101      	movs	r1, #1
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	fa01 f303 	lsl.w	r3, r1, r3
 80073e8:	4013      	ands	r3, r2
 80073ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	f000 8132 	beq.w	8007658 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	f003 0303 	and.w	r3, r3, #3
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d005      	beq.n	800740c <HAL_GPIO_Init+0x40>
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	f003 0303 	and.w	r3, r3, #3
 8007408:	2b02      	cmp	r3, #2
 800740a:	d130      	bne.n	800746e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	005b      	lsls	r3, r3, #1
 8007416:	2203      	movs	r2, #3
 8007418:	fa02 f303 	lsl.w	r3, r2, r3
 800741c:	43db      	mvns	r3, r3
 800741e:	693a      	ldr	r2, [r7, #16]
 8007420:	4013      	ands	r3, r2
 8007422:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	68da      	ldr	r2, [r3, #12]
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	005b      	lsls	r3, r3, #1
 800742c:	fa02 f303 	lsl.w	r3, r2, r3
 8007430:	693a      	ldr	r2, [r7, #16]
 8007432:	4313      	orrs	r3, r2
 8007434:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	693a      	ldr	r2, [r7, #16]
 800743a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007442:	2201      	movs	r2, #1
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	fa02 f303 	lsl.w	r3, r2, r3
 800744a:	43db      	mvns	r3, r3
 800744c:	693a      	ldr	r2, [r7, #16]
 800744e:	4013      	ands	r3, r2
 8007450:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	091b      	lsrs	r3, r3, #4
 8007458:	f003 0201 	and.w	r2, r3, #1
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	fa02 f303 	lsl.w	r3, r2, r3
 8007462:	693a      	ldr	r2, [r7, #16]
 8007464:	4313      	orrs	r3, r2
 8007466:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	693a      	ldr	r2, [r7, #16]
 800746c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	f003 0303 	and.w	r3, r3, #3
 8007476:	2b03      	cmp	r3, #3
 8007478:	d017      	beq.n	80074aa <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	005b      	lsls	r3, r3, #1
 8007484:	2203      	movs	r2, #3
 8007486:	fa02 f303 	lsl.w	r3, r2, r3
 800748a:	43db      	mvns	r3, r3
 800748c:	693a      	ldr	r2, [r7, #16]
 800748e:	4013      	ands	r3, r2
 8007490:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	689a      	ldr	r2, [r3, #8]
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	005b      	lsls	r3, r3, #1
 800749a:	fa02 f303 	lsl.w	r3, r2, r3
 800749e:	693a      	ldr	r2, [r7, #16]
 80074a0:	4313      	orrs	r3, r2
 80074a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	693a      	ldr	r2, [r7, #16]
 80074a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	f003 0303 	and.w	r3, r3, #3
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	d123      	bne.n	80074fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	08da      	lsrs	r2, r3, #3
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	3208      	adds	r2, #8
 80074be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	f003 0307 	and.w	r3, r3, #7
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	220f      	movs	r2, #15
 80074ce:	fa02 f303 	lsl.w	r3, r2, r3
 80074d2:	43db      	mvns	r3, r3
 80074d4:	693a      	ldr	r2, [r7, #16]
 80074d6:	4013      	ands	r3, r2
 80074d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	691a      	ldr	r2, [r3, #16]
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	f003 0307 	and.w	r3, r3, #7
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	fa02 f303 	lsl.w	r3, r2, r3
 80074ea:	693a      	ldr	r2, [r7, #16]
 80074ec:	4313      	orrs	r3, r2
 80074ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	08da      	lsrs	r2, r3, #3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	3208      	adds	r2, #8
 80074f8:	6939      	ldr	r1, [r7, #16]
 80074fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	005b      	lsls	r3, r3, #1
 8007508:	2203      	movs	r2, #3
 800750a:	fa02 f303 	lsl.w	r3, r2, r3
 800750e:	43db      	mvns	r3, r3
 8007510:	693a      	ldr	r2, [r7, #16]
 8007512:	4013      	ands	r3, r2
 8007514:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	f003 0203 	and.w	r2, r3, #3
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	005b      	lsls	r3, r3, #1
 8007522:	fa02 f303 	lsl.w	r3, r2, r3
 8007526:	693a      	ldr	r2, [r7, #16]
 8007528:	4313      	orrs	r3, r2
 800752a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	693a      	ldr	r2, [r7, #16]
 8007530:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800753a:	2b00      	cmp	r3, #0
 800753c:	f000 808c 	beq.w	8007658 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8007540:	4a4e      	ldr	r2, [pc, #312]	; (800767c <HAL_GPIO_Init+0x2b0>)
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	089b      	lsrs	r3, r3, #2
 8007546:	3302      	adds	r3, #2
 8007548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800754c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	f003 0303 	and.w	r3, r3, #3
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	2207      	movs	r2, #7
 8007558:	fa02 f303 	lsl.w	r3, r2, r3
 800755c:	43db      	mvns	r3, r3
 800755e:	693a      	ldr	r2, [r7, #16]
 8007560:	4013      	ands	r3, r2
 8007562:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800756a:	d00d      	beq.n	8007588 <HAL_GPIO_Init+0x1bc>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	4a44      	ldr	r2, [pc, #272]	; (8007680 <HAL_GPIO_Init+0x2b4>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d007      	beq.n	8007584 <HAL_GPIO_Init+0x1b8>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	4a43      	ldr	r2, [pc, #268]	; (8007684 <HAL_GPIO_Init+0x2b8>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d101      	bne.n	8007580 <HAL_GPIO_Init+0x1b4>
 800757c:	2302      	movs	r3, #2
 800757e:	e004      	b.n	800758a <HAL_GPIO_Init+0x1be>
 8007580:	2307      	movs	r3, #7
 8007582:	e002      	b.n	800758a <HAL_GPIO_Init+0x1be>
 8007584:	2301      	movs	r3, #1
 8007586:	e000      	b.n	800758a <HAL_GPIO_Init+0x1be>
 8007588:	2300      	movs	r3, #0
 800758a:	697a      	ldr	r2, [r7, #20]
 800758c:	f002 0203 	and.w	r2, r2, #3
 8007590:	0092      	lsls	r2, r2, #2
 8007592:	4093      	lsls	r3, r2
 8007594:	693a      	ldr	r2, [r7, #16]
 8007596:	4313      	orrs	r3, r2
 8007598:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800759a:	4938      	ldr	r1, [pc, #224]	; (800767c <HAL_GPIO_Init+0x2b0>)
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	089b      	lsrs	r3, r3, #2
 80075a0:	3302      	adds	r3, #2
 80075a2:	693a      	ldr	r2, [r7, #16]
 80075a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80075a8:	4b37      	ldr	r3, [pc, #220]	; (8007688 <HAL_GPIO_Init+0x2bc>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	43db      	mvns	r3, r3
 80075b2:	693a      	ldr	r2, [r7, #16]
 80075b4:	4013      	ands	r3, r2
 80075b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d003      	beq.n	80075cc <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80075c4:	693a      	ldr	r2, [r7, #16]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80075cc:	4a2e      	ldr	r2, [pc, #184]	; (8007688 <HAL_GPIO_Init+0x2bc>)
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80075d2:	4b2d      	ldr	r3, [pc, #180]	; (8007688 <HAL_GPIO_Init+0x2bc>)
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	43db      	mvns	r3, r3
 80075dc:	693a      	ldr	r2, [r7, #16]
 80075de:	4013      	ands	r3, r2
 80075e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d003      	beq.n	80075f6 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80075ee:	693a      	ldr	r2, [r7, #16]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80075f6:	4a24      	ldr	r2, [pc, #144]	; (8007688 <HAL_GPIO_Init+0x2bc>)
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80075fc:	4b22      	ldr	r3, [pc, #136]	; (8007688 <HAL_GPIO_Init+0x2bc>)
 80075fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007602:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	43db      	mvns	r3, r3
 8007608:	693a      	ldr	r2, [r7, #16]
 800760a:	4013      	ands	r3, r2
 800760c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007616:	2b00      	cmp	r3, #0
 8007618:	d003      	beq.n	8007622 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800761a:	693a      	ldr	r2, [r7, #16]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	4313      	orrs	r3, r2
 8007620:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8007622:	4a19      	ldr	r2, [pc, #100]	; (8007688 <HAL_GPIO_Init+0x2bc>)
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800762a:	4b17      	ldr	r3, [pc, #92]	; (8007688 <HAL_GPIO_Init+0x2bc>)
 800762c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007630:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	43db      	mvns	r3, r3
 8007636:	693a      	ldr	r2, [r7, #16]
 8007638:	4013      	ands	r3, r2
 800763a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007644:	2b00      	cmp	r3, #0
 8007646:	d003      	beq.n	8007650 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8007648:	693a      	ldr	r2, [r7, #16]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	4313      	orrs	r3, r2
 800764e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8007650:	4a0d      	ldr	r2, [pc, #52]	; (8007688 <HAL_GPIO_Init+0x2bc>)
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	3301      	adds	r3, #1
 800765c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	fa22 f303 	lsr.w	r3, r2, r3
 8007668:	2b00      	cmp	r3, #0
 800766a:	f47f aeb7 	bne.w	80073dc <HAL_GPIO_Init+0x10>
  }
}
 800766e:	bf00      	nop
 8007670:	bf00      	nop
 8007672:	371c      	adds	r7, #28
 8007674:	46bd      	mov	sp, r7
 8007676:	bc80      	pop	{r7}
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop
 800767c:	40010000 	.word	0x40010000
 8007680:	48000400 	.word	0x48000400
 8007684:	48000800 	.word	0x48000800
 8007688:	58000800 	.word	0x58000800

0800768c <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800768c:	b480      	push	{r7}
 800768e:	b087      	sub	sp, #28
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007696:	2300      	movs	r3, #0
 8007698:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800769a:	e0af      	b.n	80077fc <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800769c:	2201      	movs	r2, #1
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	fa02 f303 	lsl.w	r3, r2, r3
 80076a4:	683a      	ldr	r2, [r7, #0]
 80076a6:	4013      	ands	r3, r2
 80076a8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	f000 80a2 	beq.w	80077f6 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80076b2:	4a59      	ldr	r2, [pc, #356]	; (8007818 <HAL_GPIO_DeInit+0x18c>)
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	089b      	lsrs	r3, r3, #2
 80076b8:	3302      	adds	r3, #2
 80076ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076be:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	f003 0303 	and.w	r3, r3, #3
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	2207      	movs	r2, #7
 80076ca:	fa02 f303 	lsl.w	r3, r2, r3
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	4013      	ands	r3, r2
 80076d2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80076da:	d00d      	beq.n	80076f8 <HAL_GPIO_DeInit+0x6c>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4a4f      	ldr	r2, [pc, #316]	; (800781c <HAL_GPIO_DeInit+0x190>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d007      	beq.n	80076f4 <HAL_GPIO_DeInit+0x68>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	4a4e      	ldr	r2, [pc, #312]	; (8007820 <HAL_GPIO_DeInit+0x194>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d101      	bne.n	80076f0 <HAL_GPIO_DeInit+0x64>
 80076ec:	2302      	movs	r3, #2
 80076ee:	e004      	b.n	80076fa <HAL_GPIO_DeInit+0x6e>
 80076f0:	2307      	movs	r3, #7
 80076f2:	e002      	b.n	80076fa <HAL_GPIO_DeInit+0x6e>
 80076f4:	2301      	movs	r3, #1
 80076f6:	e000      	b.n	80076fa <HAL_GPIO_DeInit+0x6e>
 80076f8:	2300      	movs	r3, #0
 80076fa:	697a      	ldr	r2, [r7, #20]
 80076fc:	f002 0203 	and.w	r2, r2, #3
 8007700:	0092      	lsls	r2, r2, #2
 8007702:	4093      	lsls	r3, r2
 8007704:	68fa      	ldr	r2, [r7, #12]
 8007706:	429a      	cmp	r2, r3
 8007708:	d136      	bne.n	8007778 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 800770a:	4b46      	ldr	r3, [pc, #280]	; (8007824 <HAL_GPIO_DeInit+0x198>)
 800770c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	43db      	mvns	r3, r3
 8007714:	4943      	ldr	r1, [pc, #268]	; (8007824 <HAL_GPIO_DeInit+0x198>)
 8007716:	4013      	ands	r3, r2
 8007718:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 800771c:	4b41      	ldr	r3, [pc, #260]	; (8007824 <HAL_GPIO_DeInit+0x198>)
 800771e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	43db      	mvns	r3, r3
 8007726:	493f      	ldr	r1, [pc, #252]	; (8007824 <HAL_GPIO_DeInit+0x198>)
 8007728:	4013      	ands	r3, r2
 800772a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800772e:	4b3d      	ldr	r3, [pc, #244]	; (8007824 <HAL_GPIO_DeInit+0x198>)
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	43db      	mvns	r3, r3
 8007736:	493b      	ldr	r1, [pc, #236]	; (8007824 <HAL_GPIO_DeInit+0x198>)
 8007738:	4013      	ands	r3, r2
 800773a:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800773c:	4b39      	ldr	r3, [pc, #228]	; (8007824 <HAL_GPIO_DeInit+0x198>)
 800773e:	685a      	ldr	r2, [r3, #4]
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	43db      	mvns	r3, r3
 8007744:	4937      	ldr	r1, [pc, #220]	; (8007824 <HAL_GPIO_DeInit+0x198>)
 8007746:	4013      	ands	r3, r2
 8007748:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	f003 0303 	and.w	r3, r3, #3
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	2207      	movs	r2, #7
 8007754:	fa02 f303 	lsl.w	r3, r2, r3
 8007758:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800775a:	4a2f      	ldr	r2, [pc, #188]	; (8007818 <HAL_GPIO_DeInit+0x18c>)
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	089b      	lsrs	r3, r3, #2
 8007760:	3302      	adds	r3, #2
 8007762:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	43da      	mvns	r2, r3
 800776a:	482b      	ldr	r0, [pc, #172]	; (8007818 <HAL_GPIO_DeInit+0x18c>)
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	089b      	lsrs	r3, r3, #2
 8007770:	400a      	ands	r2, r1
 8007772:	3302      	adds	r3, #2
 8007774:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	005b      	lsls	r3, r3, #1
 8007780:	2103      	movs	r1, #3
 8007782:	fa01 f303 	lsl.w	r3, r1, r3
 8007786:	431a      	orrs	r2, r3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	08da      	lsrs	r2, r3, #3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	3208      	adds	r2, #8
 8007794:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	f003 0307 	and.w	r3, r3, #7
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	220f      	movs	r2, #15
 80077a2:	fa02 f303 	lsl.w	r3, r2, r3
 80077a6:	43db      	mvns	r3, r3
 80077a8:	697a      	ldr	r2, [r7, #20]
 80077aa:	08d2      	lsrs	r2, r2, #3
 80077ac:	4019      	ands	r1, r3
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	3208      	adds	r2, #8
 80077b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	689a      	ldr	r2, [r3, #8]
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	005b      	lsls	r3, r3, #1
 80077be:	2103      	movs	r1, #3
 80077c0:	fa01 f303 	lsl.w	r3, r1, r3
 80077c4:	43db      	mvns	r3, r3
 80077c6:	401a      	ands	r2, r3
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	685a      	ldr	r2, [r3, #4]
 80077d0:	2101      	movs	r1, #1
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	fa01 f303 	lsl.w	r3, r1, r3
 80077d8:	43db      	mvns	r3, r3
 80077da:	401a      	ands	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	68da      	ldr	r2, [r3, #12]
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	005b      	lsls	r3, r3, #1
 80077e8:	2103      	movs	r1, #3
 80077ea:	fa01 f303 	lsl.w	r3, r1, r3
 80077ee:	43db      	mvns	r3, r3
 80077f0:	401a      	ands	r2, r3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	60da      	str	r2, [r3, #12]
    }

    position++;
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	3301      	adds	r3, #1
 80077fa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80077fc:	683a      	ldr	r2, [r7, #0]
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	fa22 f303 	lsr.w	r3, r2, r3
 8007804:	2b00      	cmp	r3, #0
 8007806:	f47f af49 	bne.w	800769c <HAL_GPIO_DeInit+0x10>
  }
}
 800780a:	bf00      	nop
 800780c:	bf00      	nop
 800780e:	371c      	adds	r7, #28
 8007810:	46bd      	mov	sp, r7
 8007812:	bc80      	pop	{r7}
 8007814:	4770      	bx	lr
 8007816:	bf00      	nop
 8007818:	40010000 	.word	0x40010000
 800781c:	48000400 	.word	0x48000400
 8007820:	48000800 	.word	0x48000800
 8007824:	58000800 	.word	0x58000800

08007828 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007828:	b480      	push	{r7}
 800782a:	b085      	sub	sp, #20
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	460b      	mov	r3, r1
 8007832:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	691a      	ldr	r2, [r3, #16]
 8007838:	887b      	ldrh	r3, [r7, #2]
 800783a:	4013      	ands	r3, r2
 800783c:	2b00      	cmp	r3, #0
 800783e:	d002      	beq.n	8007846 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007840:	2301      	movs	r3, #1
 8007842:	73fb      	strb	r3, [r7, #15]
 8007844:	e001      	b.n	800784a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007846:	2300      	movs	r3, #0
 8007848:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800784a:	7bfb      	ldrb	r3, [r7, #15]
}
 800784c:	4618      	mov	r0, r3
 800784e:	3714      	adds	r7, #20
 8007850:	46bd      	mov	sp, r7
 8007852:	bc80      	pop	{r7}
 8007854:	4770      	bx	lr

08007856 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007856:	b480      	push	{r7}
 8007858:	b083      	sub	sp, #12
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
 800785e:	460b      	mov	r3, r1
 8007860:	807b      	strh	r3, [r7, #2]
 8007862:	4613      	mov	r3, r2
 8007864:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007866:	787b      	ldrb	r3, [r7, #1]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d003      	beq.n	8007874 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800786c:	887a      	ldrh	r2, [r7, #2]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007872:	e002      	b.n	800787a <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007874:	887a      	ldrh	r2, [r7, #2]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	629a      	str	r2, [r3, #40]	; 0x28
}
 800787a:	bf00      	nop
 800787c:	370c      	adds	r7, #12
 800787e:	46bd      	mov	sp, r7
 8007880:	bc80      	pop	{r7}
 8007882:	4770      	bx	lr

08007884 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	4603      	mov	r3, r0
 800788c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800788e:	4b08      	ldr	r3, [pc, #32]	; (80078b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007890:	68da      	ldr	r2, [r3, #12]
 8007892:	88fb      	ldrh	r3, [r7, #6]
 8007894:	4013      	ands	r3, r2
 8007896:	2b00      	cmp	r3, #0
 8007898:	d006      	beq.n	80078a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800789a:	4a05      	ldr	r2, [pc, #20]	; (80078b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800789c:	88fb      	ldrh	r3, [r7, #6]
 800789e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80078a0:	88fb      	ldrh	r3, [r7, #6]
 80078a2:	4618      	mov	r0, r3
 80078a4:	f000 f806 	bl	80078b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80078a8:	bf00      	nop
 80078aa:	3708      	adds	r7, #8
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	58000800 	.word	0x58000800

080078b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	4603      	mov	r3, r0
 80078bc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80078be:	bf00      	nop
 80078c0:	370c      	adds	r7, #12
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bc80      	pop	{r7}
 80078c6:	4770      	bx	lr

080078c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b082      	sub	sp, #8
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d101      	bne.n	80078da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	e081      	b.n	80079de <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d106      	bne.n	80078f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f7fa fb14 	bl	8001f1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2224      	movs	r2, #36	; 0x24
 80078f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f022 0201 	bic.w	r2, r2, #1
 800790a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	685a      	ldr	r2, [r3, #4]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007918:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	689a      	ldr	r2, [r3, #8]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007928:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	2b01      	cmp	r3, #1
 8007930:	d107      	bne.n	8007942 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	689a      	ldr	r2, [r3, #8]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800793e:	609a      	str	r2, [r3, #8]
 8007940:	e006      	b.n	8007950 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	689a      	ldr	r2, [r3, #8]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800794e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	2b02      	cmp	r3, #2
 8007956:	d104      	bne.n	8007962 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007960:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	6812      	ldr	r2, [r2, #0]
 800796c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007970:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007974:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68da      	ldr	r2, [r3, #12]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007984:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	691a      	ldr	r2, [r3, #16]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	695b      	ldr	r3, [r3, #20]
 800798e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	699b      	ldr	r3, [r3, #24]
 8007996:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	430a      	orrs	r2, r1
 800799e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	69d9      	ldr	r1, [r3, #28]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6a1a      	ldr	r2, [r3, #32]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	430a      	orrs	r2, r1
 80079ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f042 0201 	orr.w	r2, r2, #1
 80079be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2220      	movs	r2, #32
 80079ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80079dc:	2300      	movs	r3, #0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3708      	adds	r7, #8
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b082      	sub	sp, #8
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d101      	bne.n	80079f8 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	e021      	b.n	8007a3c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2224      	movs	r2, #36	; 0x24
 80079fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f022 0201 	bic.w	r2, r2, #1
 8007a0e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f7fa fab3 	bl	8001f7c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3708      	adds	r7, #8
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b088      	sub	sp, #32
 8007a48:	af02      	add	r7, sp, #8
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	4608      	mov	r0, r1
 8007a4e:	4611      	mov	r1, r2
 8007a50:	461a      	mov	r2, r3
 8007a52:	4603      	mov	r3, r0
 8007a54:	817b      	strh	r3, [r7, #10]
 8007a56:	460b      	mov	r3, r1
 8007a58:	813b      	strh	r3, [r7, #8]
 8007a5a:	4613      	mov	r3, r2
 8007a5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	2b20      	cmp	r3, #32
 8007a68:	f040 80f9 	bne.w	8007c5e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a6c:	6a3b      	ldr	r3, [r7, #32]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d002      	beq.n	8007a78 <HAL_I2C_Mem_Write+0x34>
 8007a72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d105      	bne.n	8007a84 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a7e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007a80:	2301      	movs	r3, #1
 8007a82:	e0ed      	b.n	8007c60 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d101      	bne.n	8007a92 <HAL_I2C_Mem_Write+0x4e>
 8007a8e:	2302      	movs	r3, #2
 8007a90:	e0e6      	b.n	8007c60 <HAL_I2C_Mem_Write+0x21c>
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2201      	movs	r2, #1
 8007a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007a9a:	f7ff f80d 	bl	8006ab8 <HAL_GetTick>
 8007a9e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	9300      	str	r3, [sp, #0]
 8007aa4:	2319      	movs	r3, #25
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007aac:	68f8      	ldr	r0, [r7, #12]
 8007aae:	f000 fada 	bl	8008066 <I2C_WaitOnFlagUntilTimeout>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d001      	beq.n	8007abc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e0d1      	b.n	8007c60 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2221      	movs	r2, #33	; 0x21
 8007ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2240      	movs	r2, #64	; 0x40
 8007ac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	6a3a      	ldr	r2, [r7, #32]
 8007ad6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007adc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007ae4:	88f8      	ldrh	r0, [r7, #6]
 8007ae6:	893a      	ldrh	r2, [r7, #8]
 8007ae8:	8979      	ldrh	r1, [r7, #10]
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	9301      	str	r3, [sp, #4]
 8007aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af0:	9300      	str	r3, [sp, #0]
 8007af2:	4603      	mov	r3, r0
 8007af4:	68f8      	ldr	r0, [r7, #12]
 8007af6:	f000 f9eb 	bl	8007ed0 <I2C_RequestMemoryWrite>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d005      	beq.n	8007b0c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e0a9      	b.n	8007c60 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	2bff      	cmp	r3, #255	; 0xff
 8007b14:	d90e      	bls.n	8007b34 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	22ff      	movs	r2, #255	; 0xff
 8007b1a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b20:	b2da      	uxtb	r2, r3
 8007b22:	8979      	ldrh	r1, [r7, #10]
 8007b24:	2300      	movs	r3, #0
 8007b26:	9300      	str	r3, [sp, #0]
 8007b28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b2c:	68f8      	ldr	r0, [r7, #12]
 8007b2e:	f000 fc43 	bl	80083b8 <I2C_TransferConfig>
 8007b32:	e00f      	b.n	8007b54 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b38:	b29a      	uxth	r2, r3
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b42:	b2da      	uxtb	r2, r3
 8007b44:	8979      	ldrh	r1, [r7, #10]
 8007b46:	2300      	movs	r3, #0
 8007b48:	9300      	str	r3, [sp, #0]
 8007b4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007b4e:	68f8      	ldr	r0, [r7, #12]
 8007b50:	f000 fc32 	bl	80083b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b54:	697a      	ldr	r2, [r7, #20]
 8007b56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	f000 fac4 	bl	80080e6 <I2C_WaitOnTXISFlagUntilTimeout>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d001      	beq.n	8007b68 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007b64:	2301      	movs	r3, #1
 8007b66:	e07b      	b.n	8007c60 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6c:	781a      	ldrb	r2, [r3, #0]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b78:	1c5a      	adds	r2, r3, #1
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	3b01      	subs	r3, #1
 8007b86:	b29a      	uxth	r2, r3
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b90:	3b01      	subs	r3, #1
 8007b92:	b29a      	uxth	r2, r3
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d034      	beq.n	8007c0c <HAL_I2C_Mem_Write+0x1c8>
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d130      	bne.n	8007c0c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	9300      	str	r3, [sp, #0]
 8007bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	2180      	movs	r1, #128	; 0x80
 8007bb4:	68f8      	ldr	r0, [r7, #12]
 8007bb6:	f000 fa56 	bl	8008066 <I2C_WaitOnFlagUntilTimeout>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d001      	beq.n	8007bc4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e04d      	b.n	8007c60 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	2bff      	cmp	r3, #255	; 0xff
 8007bcc:	d90e      	bls.n	8007bec <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	22ff      	movs	r2, #255	; 0xff
 8007bd2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bd8:	b2da      	uxtb	r2, r3
 8007bda:	8979      	ldrh	r1, [r7, #10]
 8007bdc:	2300      	movs	r3, #0
 8007bde:	9300      	str	r3, [sp, #0]
 8007be0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	f000 fbe7 	bl	80083b8 <I2C_TransferConfig>
 8007bea:	e00f      	b.n	8007c0c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bf0:	b29a      	uxth	r2, r3
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bfa:	b2da      	uxtb	r2, r3
 8007bfc:	8979      	ldrh	r1, [r7, #10]
 8007bfe:	2300      	movs	r3, #0
 8007c00:	9300      	str	r3, [sp, #0]
 8007c02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f000 fbd6 	bl	80083b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d19e      	bne.n	8007b54 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c16:	697a      	ldr	r2, [r7, #20]
 8007c18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c1a:	68f8      	ldr	r0, [r7, #12]
 8007c1c:	f000 faa3 	bl	8008166 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d001      	beq.n	8007c2a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	e01a      	b.n	8007c60 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2220      	movs	r2, #32
 8007c30:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	6859      	ldr	r1, [r3, #4]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	4b0a      	ldr	r3, [pc, #40]	; (8007c68 <HAL_I2C_Mem_Write+0x224>)
 8007c3e:	400b      	ands	r3, r1
 8007c40:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2220      	movs	r2, #32
 8007c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2200      	movs	r2, #0
 8007c56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	e000      	b.n	8007c60 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007c5e:	2302      	movs	r3, #2
  }
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3718      	adds	r7, #24
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	fe00e800 	.word	0xfe00e800

08007c6c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b088      	sub	sp, #32
 8007c70:	af02      	add	r7, sp, #8
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	4608      	mov	r0, r1
 8007c76:	4611      	mov	r1, r2
 8007c78:	461a      	mov	r2, r3
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	817b      	strh	r3, [r7, #10]
 8007c7e:	460b      	mov	r3, r1
 8007c80:	813b      	strh	r3, [r7, #8]
 8007c82:	4613      	mov	r3, r2
 8007c84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	2b20      	cmp	r3, #32
 8007c90:	f040 80fd 	bne.w	8007e8e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c94:	6a3b      	ldr	r3, [r7, #32]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d002      	beq.n	8007ca0 <HAL_I2C_Mem_Read+0x34>
 8007c9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d105      	bne.n	8007cac <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ca6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	e0f1      	b.n	8007e90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d101      	bne.n	8007cba <HAL_I2C_Mem_Read+0x4e>
 8007cb6:	2302      	movs	r3, #2
 8007cb8:	e0ea      	b.n	8007e90 <HAL_I2C_Mem_Read+0x224>
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007cc2:	f7fe fef9 	bl	8006ab8 <HAL_GetTick>
 8007cc6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	9300      	str	r3, [sp, #0]
 8007ccc:	2319      	movs	r3, #25
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007cd4:	68f8      	ldr	r0, [r7, #12]
 8007cd6:	f000 f9c6 	bl	8008066 <I2C_WaitOnFlagUntilTimeout>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d001      	beq.n	8007ce4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e0d5      	b.n	8007e90 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2222      	movs	r2, #34	; 0x22
 8007ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2240      	movs	r2, #64	; 0x40
 8007cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	6a3a      	ldr	r2, [r7, #32]
 8007cfe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007d04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007d0c:	88f8      	ldrh	r0, [r7, #6]
 8007d0e:	893a      	ldrh	r2, [r7, #8]
 8007d10:	8979      	ldrh	r1, [r7, #10]
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	9301      	str	r3, [sp, #4]
 8007d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d18:	9300      	str	r3, [sp, #0]
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f000 f92b 	bl	8007f78 <I2C_RequestMemoryRead>
 8007d22:	4603      	mov	r3, r0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d005      	beq.n	8007d34 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	e0ad      	b.n	8007e90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	2bff      	cmp	r3, #255	; 0xff
 8007d3c:	d90e      	bls.n	8007d5c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	22ff      	movs	r2, #255	; 0xff
 8007d42:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d48:	b2da      	uxtb	r2, r3
 8007d4a:	8979      	ldrh	r1, [r7, #10]
 8007d4c:	4b52      	ldr	r3, [pc, #328]	; (8007e98 <HAL_I2C_Mem_Read+0x22c>)
 8007d4e:	9300      	str	r3, [sp, #0]
 8007d50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f000 fb2f 	bl	80083b8 <I2C_TransferConfig>
 8007d5a:	e00f      	b.n	8007d7c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d60:	b29a      	uxth	r2, r3
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d6a:	b2da      	uxtb	r2, r3
 8007d6c:	8979      	ldrh	r1, [r7, #10]
 8007d6e:	4b4a      	ldr	r3, [pc, #296]	; (8007e98 <HAL_I2C_Mem_Read+0x22c>)
 8007d70:	9300      	str	r3, [sp, #0]
 8007d72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d76:	68f8      	ldr	r0, [r7, #12]
 8007d78:	f000 fb1e 	bl	80083b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	9300      	str	r3, [sp, #0]
 8007d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d82:	2200      	movs	r2, #0
 8007d84:	2104      	movs	r1, #4
 8007d86:	68f8      	ldr	r0, [r7, #12]
 8007d88:	f000 f96d 	bl	8008066 <I2C_WaitOnFlagUntilTimeout>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d001      	beq.n	8007d96 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	e07c      	b.n	8007e90 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da0:	b2d2      	uxtb	r2, r2
 8007da2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da8:	1c5a      	adds	r2, r3, #1
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007db2:	3b01      	subs	r3, #1
 8007db4:	b29a      	uxth	r2, r3
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	3b01      	subs	r3, #1
 8007dc2:	b29a      	uxth	r2, r3
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d034      	beq.n	8007e3c <HAL_I2C_Mem_Read+0x1d0>
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d130      	bne.n	8007e3c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	9300      	str	r3, [sp, #0]
 8007dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de0:	2200      	movs	r2, #0
 8007de2:	2180      	movs	r1, #128	; 0x80
 8007de4:	68f8      	ldr	r0, [r7, #12]
 8007de6:	f000 f93e 	bl	8008066 <I2C_WaitOnFlagUntilTimeout>
 8007dea:	4603      	mov	r3, r0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d001      	beq.n	8007df4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007df0:	2301      	movs	r3, #1
 8007df2:	e04d      	b.n	8007e90 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	2bff      	cmp	r3, #255	; 0xff
 8007dfc:	d90e      	bls.n	8007e1c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	22ff      	movs	r2, #255	; 0xff
 8007e02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e08:	b2da      	uxtb	r2, r3
 8007e0a:	8979      	ldrh	r1, [r7, #10]
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	9300      	str	r3, [sp, #0]
 8007e10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	f000 facf 	bl	80083b8 <I2C_TransferConfig>
 8007e1a:	e00f      	b.n	8007e3c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e20:	b29a      	uxth	r2, r3
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e2a:	b2da      	uxtb	r2, r3
 8007e2c:	8979      	ldrh	r1, [r7, #10]
 8007e2e:	2300      	movs	r3, #0
 8007e30:	9300      	str	r3, [sp, #0]
 8007e32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f000 fabe 	bl	80083b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d19a      	bne.n	8007d7c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e46:	697a      	ldr	r2, [r7, #20]
 8007e48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e4a:	68f8      	ldr	r0, [r7, #12]
 8007e4c:	f000 f98b 	bl	8008166 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d001      	beq.n	8007e5a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007e56:	2301      	movs	r3, #1
 8007e58:	e01a      	b.n	8007e90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2220      	movs	r2, #32
 8007e60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	6859      	ldr	r1, [r3, #4]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	4b0b      	ldr	r3, [pc, #44]	; (8007e9c <HAL_I2C_Mem_Read+0x230>)
 8007e6e:	400b      	ands	r3, r1
 8007e70:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2220      	movs	r2, #32
 8007e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	e000      	b.n	8007e90 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007e8e:	2302      	movs	r3, #2
  }
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3718      	adds	r7, #24
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	80002400 	.word	0x80002400
 8007e9c:	fe00e800 	.word	0xfe00e800

08007ea0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007eae:	b2db      	uxtb	r3, r3
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	370c      	adds	r7, #12
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bc80      	pop	{r7}
 8007eb8:	4770      	bx	lr

08007eba <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8007eba:	b480      	push	{r7}
 8007ebc:	b083      	sub	sp, #12
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	370c      	adds	r7, #12
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bc80      	pop	{r7}
 8007ece:	4770      	bx	lr

08007ed0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b086      	sub	sp, #24
 8007ed4:	af02      	add	r7, sp, #8
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	4608      	mov	r0, r1
 8007eda:	4611      	mov	r1, r2
 8007edc:	461a      	mov	r2, r3
 8007ede:	4603      	mov	r3, r0
 8007ee0:	817b      	strh	r3, [r7, #10]
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	813b      	strh	r3, [r7, #8]
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007eea:	88fb      	ldrh	r3, [r7, #6]
 8007eec:	b2da      	uxtb	r2, r3
 8007eee:	8979      	ldrh	r1, [r7, #10]
 8007ef0:	4b20      	ldr	r3, [pc, #128]	; (8007f74 <I2C_RequestMemoryWrite+0xa4>)
 8007ef2:	9300      	str	r3, [sp, #0]
 8007ef4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ef8:	68f8      	ldr	r0, [r7, #12]
 8007efa:	f000 fa5d 	bl	80083b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007efe:	69fa      	ldr	r2, [r7, #28]
 8007f00:	69b9      	ldr	r1, [r7, #24]
 8007f02:	68f8      	ldr	r0, [r7, #12]
 8007f04:	f000 f8ef 	bl	80080e6 <I2C_WaitOnTXISFlagUntilTimeout>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d001      	beq.n	8007f12 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	e02c      	b.n	8007f6c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007f12:	88fb      	ldrh	r3, [r7, #6]
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d105      	bne.n	8007f24 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007f18:	893b      	ldrh	r3, [r7, #8]
 8007f1a:	b2da      	uxtb	r2, r3
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	629a      	str	r2, [r3, #40]	; 0x28
 8007f22:	e015      	b.n	8007f50 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007f24:	893b      	ldrh	r3, [r7, #8]
 8007f26:	0a1b      	lsrs	r3, r3, #8
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	b2da      	uxtb	r2, r3
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f32:	69fa      	ldr	r2, [r7, #28]
 8007f34:	69b9      	ldr	r1, [r7, #24]
 8007f36:	68f8      	ldr	r0, [r7, #12]
 8007f38:	f000 f8d5 	bl	80080e6 <I2C_WaitOnTXISFlagUntilTimeout>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d001      	beq.n	8007f46 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	e012      	b.n	8007f6c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007f46:	893b      	ldrh	r3, [r7, #8]
 8007f48:	b2da      	uxtb	r2, r3
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007f50:	69fb      	ldr	r3, [r7, #28]
 8007f52:	9300      	str	r3, [sp, #0]
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	2200      	movs	r2, #0
 8007f58:	2180      	movs	r1, #128	; 0x80
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	f000 f883 	bl	8008066 <I2C_WaitOnFlagUntilTimeout>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d001      	beq.n	8007f6a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	e000      	b.n	8007f6c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007f6a:	2300      	movs	r3, #0
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3710      	adds	r7, #16
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}
 8007f74:	80002000 	.word	0x80002000

08007f78 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b086      	sub	sp, #24
 8007f7c:	af02      	add	r7, sp, #8
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	4608      	mov	r0, r1
 8007f82:	4611      	mov	r1, r2
 8007f84:	461a      	mov	r2, r3
 8007f86:	4603      	mov	r3, r0
 8007f88:	817b      	strh	r3, [r7, #10]
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	813b      	strh	r3, [r7, #8]
 8007f8e:	4613      	mov	r3, r2
 8007f90:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007f92:	88fb      	ldrh	r3, [r7, #6]
 8007f94:	b2da      	uxtb	r2, r3
 8007f96:	8979      	ldrh	r1, [r7, #10]
 8007f98:	4b20      	ldr	r3, [pc, #128]	; (800801c <I2C_RequestMemoryRead+0xa4>)
 8007f9a:	9300      	str	r3, [sp, #0]
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	68f8      	ldr	r0, [r7, #12]
 8007fa0:	f000 fa0a 	bl	80083b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007fa4:	69fa      	ldr	r2, [r7, #28]
 8007fa6:	69b9      	ldr	r1, [r7, #24]
 8007fa8:	68f8      	ldr	r0, [r7, #12]
 8007faa:	f000 f89c 	bl	80080e6 <I2C_WaitOnTXISFlagUntilTimeout>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d001      	beq.n	8007fb8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e02c      	b.n	8008012 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007fb8:	88fb      	ldrh	r3, [r7, #6]
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d105      	bne.n	8007fca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007fbe:	893b      	ldrh	r3, [r7, #8]
 8007fc0:	b2da      	uxtb	r2, r3
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	629a      	str	r2, [r3, #40]	; 0x28
 8007fc8:	e015      	b.n	8007ff6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007fca:	893b      	ldrh	r3, [r7, #8]
 8007fcc:	0a1b      	lsrs	r3, r3, #8
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	b2da      	uxtb	r2, r3
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007fd8:	69fa      	ldr	r2, [r7, #28]
 8007fda:	69b9      	ldr	r1, [r7, #24]
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f000 f882 	bl	80080e6 <I2C_WaitOnTXISFlagUntilTimeout>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d001      	beq.n	8007fec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e012      	b.n	8008012 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007fec:	893b      	ldrh	r3, [r7, #8]
 8007fee:	b2da      	uxtb	r2, r3
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007ff6:	69fb      	ldr	r3, [r7, #28]
 8007ff8:	9300      	str	r3, [sp, #0]
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	2140      	movs	r1, #64	; 0x40
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	f000 f830 	bl	8008066 <I2C_WaitOnFlagUntilTimeout>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d001      	beq.n	8008010 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	e000      	b.n	8008012 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	3710      	adds	r7, #16
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	80002000 	.word	0x80002000

08008020 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	699b      	ldr	r3, [r3, #24]
 800802e:	f003 0302 	and.w	r3, r3, #2
 8008032:	2b02      	cmp	r3, #2
 8008034:	d103      	bne.n	800803e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	2200      	movs	r2, #0
 800803c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	699b      	ldr	r3, [r3, #24]
 8008044:	f003 0301 	and.w	r3, r3, #1
 8008048:	2b01      	cmp	r3, #1
 800804a:	d007      	beq.n	800805c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	699a      	ldr	r2, [r3, #24]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f042 0201 	orr.w	r2, r2, #1
 800805a:	619a      	str	r2, [r3, #24]
  }
}
 800805c:	bf00      	nop
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	bc80      	pop	{r7}
 8008064:	4770      	bx	lr

08008066 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008066:	b580      	push	{r7, lr}
 8008068:	b084      	sub	sp, #16
 800806a:	af00      	add	r7, sp, #0
 800806c:	60f8      	str	r0, [r7, #12]
 800806e:	60b9      	str	r1, [r7, #8]
 8008070:	603b      	str	r3, [r7, #0]
 8008072:	4613      	mov	r3, r2
 8008074:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008076:	e022      	b.n	80080be <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800807e:	d01e      	beq.n	80080be <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008080:	f7fe fd1a 	bl	8006ab8 <HAL_GetTick>
 8008084:	4602      	mov	r2, r0
 8008086:	69bb      	ldr	r3, [r7, #24]
 8008088:	1ad3      	subs	r3, r2, r3
 800808a:	683a      	ldr	r2, [r7, #0]
 800808c:	429a      	cmp	r2, r3
 800808e:	d302      	bcc.n	8008096 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d113      	bne.n	80080be <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800809a:	f043 0220 	orr.w	r2, r3, #32
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2220      	movs	r2, #32
 80080a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2200      	movs	r2, #0
 80080ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80080ba:	2301      	movs	r3, #1
 80080bc:	e00f      	b.n	80080de <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	699a      	ldr	r2, [r3, #24]
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	4013      	ands	r3, r2
 80080c8:	68ba      	ldr	r2, [r7, #8]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	bf0c      	ite	eq
 80080ce:	2301      	moveq	r3, #1
 80080d0:	2300      	movne	r3, #0
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	461a      	mov	r2, r3
 80080d6:	79fb      	ldrb	r3, [r7, #7]
 80080d8:	429a      	cmp	r2, r3
 80080da:	d0cd      	beq.n	8008078 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80080dc:	2300      	movs	r3, #0
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3710      	adds	r7, #16
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b084      	sub	sp, #16
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	60f8      	str	r0, [r7, #12]
 80080ee:	60b9      	str	r1, [r7, #8]
 80080f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80080f2:	e02c      	b.n	800814e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	68b9      	ldr	r1, [r7, #8]
 80080f8:	68f8      	ldr	r0, [r7, #12]
 80080fa:	f000 f871 	bl	80081e0 <I2C_IsErrorOccurred>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d001      	beq.n	8008108 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008104:	2301      	movs	r3, #1
 8008106:	e02a      	b.n	800815e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800810e:	d01e      	beq.n	800814e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008110:	f7fe fcd2 	bl	8006ab8 <HAL_GetTick>
 8008114:	4602      	mov	r2, r0
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	1ad3      	subs	r3, r2, r3
 800811a:	68ba      	ldr	r2, [r7, #8]
 800811c:	429a      	cmp	r2, r3
 800811e:	d302      	bcc.n	8008126 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d113      	bne.n	800814e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800812a:	f043 0220 	orr.w	r2, r3, #32
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2220      	movs	r2, #32
 8008136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2200      	movs	r2, #0
 800813e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2200      	movs	r2, #0
 8008146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	e007      	b.n	800815e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	699b      	ldr	r3, [r3, #24]
 8008154:	f003 0302 	and.w	r3, r3, #2
 8008158:	2b02      	cmp	r3, #2
 800815a:	d1cb      	bne.n	80080f4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800815c:	2300      	movs	r3, #0
}
 800815e:	4618      	mov	r0, r3
 8008160:	3710      	adds	r7, #16
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b084      	sub	sp, #16
 800816a:	af00      	add	r7, sp, #0
 800816c:	60f8      	str	r0, [r7, #12]
 800816e:	60b9      	str	r1, [r7, #8]
 8008170:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008172:	e028      	b.n	80081c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008174:	687a      	ldr	r2, [r7, #4]
 8008176:	68b9      	ldr	r1, [r7, #8]
 8008178:	68f8      	ldr	r0, [r7, #12]
 800817a:	f000 f831 	bl	80081e0 <I2C_IsErrorOccurred>
 800817e:	4603      	mov	r3, r0
 8008180:	2b00      	cmp	r3, #0
 8008182:	d001      	beq.n	8008188 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008184:	2301      	movs	r3, #1
 8008186:	e026      	b.n	80081d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008188:	f7fe fc96 	bl	8006ab8 <HAL_GetTick>
 800818c:	4602      	mov	r2, r0
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	1ad3      	subs	r3, r2, r3
 8008192:	68ba      	ldr	r2, [r7, #8]
 8008194:	429a      	cmp	r2, r3
 8008196:	d302      	bcc.n	800819e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d113      	bne.n	80081c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081a2:	f043 0220 	orr.w	r2, r3, #32
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2220      	movs	r2, #32
 80081ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2200      	movs	r2, #0
 80081be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80081c2:	2301      	movs	r3, #1
 80081c4:	e007      	b.n	80081d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	699b      	ldr	r3, [r3, #24]
 80081cc:	f003 0320 	and.w	r3, r3, #32
 80081d0:	2b20      	cmp	r3, #32
 80081d2:	d1cf      	bne.n	8008174 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3710      	adds	r7, #16
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
	...

080081e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b08a      	sub	sp, #40	; 0x28
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081ec:	2300      	movs	r3, #0
 80081ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	699b      	ldr	r3, [r3, #24]
 80081f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80081fa:	2300      	movs	r3, #0
 80081fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	f003 0310 	and.w	r3, r3, #16
 8008208:	2b00      	cmp	r3, #0
 800820a:	d075      	beq.n	80082f8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2210      	movs	r2, #16
 8008212:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008214:	e056      	b.n	80082c4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800821c:	d052      	beq.n	80082c4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800821e:	f7fe fc4b 	bl	8006ab8 <HAL_GetTick>
 8008222:	4602      	mov	r2, r0
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	1ad3      	subs	r3, r2, r3
 8008228:	68ba      	ldr	r2, [r7, #8]
 800822a:	429a      	cmp	r2, r3
 800822c:	d302      	bcc.n	8008234 <I2C_IsErrorOccurred+0x54>
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d147      	bne.n	80082c4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800823e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008246:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	699b      	ldr	r3, [r3, #24]
 800824e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008252:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008256:	d12e      	bne.n	80082b6 <I2C_IsErrorOccurred+0xd6>
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800825e:	d02a      	beq.n	80082b6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8008260:	7cfb      	ldrb	r3, [r7, #19]
 8008262:	2b20      	cmp	r3, #32
 8008264:	d027      	beq.n	80082b6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	685a      	ldr	r2, [r3, #4]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008274:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008276:	f7fe fc1f 	bl	8006ab8 <HAL_GetTick>
 800827a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800827c:	e01b      	b.n	80082b6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800827e:	f7fe fc1b 	bl	8006ab8 <HAL_GetTick>
 8008282:	4602      	mov	r2, r0
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	1ad3      	subs	r3, r2, r3
 8008288:	2b19      	cmp	r3, #25
 800828a:	d914      	bls.n	80082b6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008290:	f043 0220 	orr.w	r2, r3, #32
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2220      	movs	r2, #32
 800829c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2200      	movs	r2, #0
 80082ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80082b0:	2301      	movs	r3, #1
 80082b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	699b      	ldr	r3, [r3, #24]
 80082bc:	f003 0320 	and.w	r3, r3, #32
 80082c0:	2b20      	cmp	r3, #32
 80082c2:	d1dc      	bne.n	800827e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	699b      	ldr	r3, [r3, #24]
 80082ca:	f003 0320 	and.w	r3, r3, #32
 80082ce:	2b20      	cmp	r3, #32
 80082d0:	d003      	beq.n	80082da <I2C_IsErrorOccurred+0xfa>
 80082d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d09d      	beq.n	8008216 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80082da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d103      	bne.n	80082ea <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2220      	movs	r2, #32
 80082e8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80082ea:	6a3b      	ldr	r3, [r7, #32]
 80082ec:	f043 0304 	orr.w	r3, r3, #4
 80082f0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	699b      	ldr	r3, [r3, #24]
 80082fe:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008306:	2b00      	cmp	r3, #0
 8008308:	d00b      	beq.n	8008322 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800830a:	6a3b      	ldr	r3, [r7, #32]
 800830c:	f043 0301 	orr.w	r3, r3, #1
 8008310:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f44f 7280 	mov.w	r2, #256	; 0x100
 800831a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800831c:	2301      	movs	r3, #1
 800831e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008322:	69bb      	ldr	r3, [r7, #24]
 8008324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008328:	2b00      	cmp	r3, #0
 800832a:	d00b      	beq.n	8008344 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800832c:	6a3b      	ldr	r3, [r7, #32]
 800832e:	f043 0308 	orr.w	r3, r3, #8
 8008332:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800833c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008344:	69bb      	ldr	r3, [r7, #24]
 8008346:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800834a:	2b00      	cmp	r3, #0
 800834c:	d00b      	beq.n	8008366 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800834e:	6a3b      	ldr	r3, [r7, #32]
 8008350:	f043 0302 	orr.w	r3, r3, #2
 8008354:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800835e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008360:	2301      	movs	r3, #1
 8008362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008366:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800836a:	2b00      	cmp	r3, #0
 800836c:	d01c      	beq.n	80083a8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800836e:	68f8      	ldr	r0, [r7, #12]
 8008370:	f7ff fe56 	bl	8008020 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	6859      	ldr	r1, [r3, #4]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	4b0d      	ldr	r3, [pc, #52]	; (80083b4 <I2C_IsErrorOccurred+0x1d4>)
 8008380:	400b      	ands	r3, r1
 8008382:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008388:	6a3b      	ldr	r3, [r7, #32]
 800838a:	431a      	orrs	r2, r3
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2220      	movs	r2, #32
 8008394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2200      	movs	r2, #0
 800839c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2200      	movs	r2, #0
 80083a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80083a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3728      	adds	r7, #40	; 0x28
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	fe00e800 	.word	0xfe00e800

080083b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b087      	sub	sp, #28
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	607b      	str	r3, [r7, #4]
 80083c2:	460b      	mov	r3, r1
 80083c4:	817b      	strh	r3, [r7, #10]
 80083c6:	4613      	mov	r3, r2
 80083c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80083ca:	897b      	ldrh	r3, [r7, #10]
 80083cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80083d0:	7a7b      	ldrb	r3, [r7, #9]
 80083d2:	041b      	lsls	r3, r3, #16
 80083d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80083d8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80083de:	6a3b      	ldr	r3, [r7, #32]
 80083e0:	4313      	orrs	r3, r2
 80083e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80083e6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	685a      	ldr	r2, [r3, #4]
 80083ee:	6a3b      	ldr	r3, [r7, #32]
 80083f0:	0d5b      	lsrs	r3, r3, #21
 80083f2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80083f6:	4b07      	ldr	r3, [pc, #28]	; (8008414 <I2C_TransferConfig+0x5c>)
 80083f8:	430b      	orrs	r3, r1
 80083fa:	43db      	mvns	r3, r3
 80083fc:	ea02 0103 	and.w	r1, r2, r3
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	697a      	ldr	r2, [r7, #20]
 8008406:	430a      	orrs	r2, r1
 8008408:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800840a:	bf00      	nop
 800840c:	371c      	adds	r7, #28
 800840e:	46bd      	mov	sp, r7
 8008410:	bc80      	pop	{r7}
 8008412:	4770      	bx	lr
 8008414:	03ff63ff 	.word	0x03ff63ff

08008418 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008428:	b2db      	uxtb	r3, r3
 800842a:	2b20      	cmp	r3, #32
 800842c:	d138      	bne.n	80084a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008434:	2b01      	cmp	r3, #1
 8008436:	d101      	bne.n	800843c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008438:	2302      	movs	r3, #2
 800843a:	e032      	b.n	80084a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2201      	movs	r2, #1
 8008440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2224      	movs	r2, #36	; 0x24
 8008448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f022 0201 	bic.w	r2, r2, #1
 800845a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800846a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	6819      	ldr	r1, [r3, #0]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	683a      	ldr	r2, [r7, #0]
 8008478:	430a      	orrs	r2, r1
 800847a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f042 0201 	orr.w	r2, r2, #1
 800848a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2220      	movs	r2, #32
 8008490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800849c:	2300      	movs	r3, #0
 800849e:	e000      	b.n	80084a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80084a0:	2302      	movs	r3, #2
  }
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	370c      	adds	r7, #12
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bc80      	pop	{r7}
 80084aa:	4770      	bx	lr

080084ac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b085      	sub	sp, #20
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	2b20      	cmp	r3, #32
 80084c0:	d139      	bne.n	8008536 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d101      	bne.n	80084d0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80084cc:	2302      	movs	r3, #2
 80084ce:	e033      	b.n	8008538 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2201      	movs	r2, #1
 80084d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2224      	movs	r2, #36	; 0x24
 80084dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f022 0201 	bic.w	r2, r2, #1
 80084ee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80084fe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	021b      	lsls	r3, r3, #8
 8008504:	68fa      	ldr	r2, [r7, #12]
 8008506:	4313      	orrs	r3, r2
 8008508:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	68fa      	ldr	r2, [r7, #12]
 8008510:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f042 0201 	orr.w	r2, r2, #1
 8008520:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2220      	movs	r2, #32
 8008526:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008532:	2300      	movs	r3, #0
 8008534:	e000      	b.n	8008538 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008536:	2302      	movs	r3, #2
  }
}
 8008538:	4618      	mov	r0, r3
 800853a:	3714      	adds	r7, #20
 800853c:	46bd      	mov	sp, r7
 800853e:	bc80      	pop	{r7}
 8008540:	4770      	bx	lr
	...

08008544 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 800854c:	4b05      	ldr	r3, [pc, #20]	; (8008564 <HAL_I2CEx_EnableFastModePlus+0x20>)
 800854e:	685a      	ldr	r2, [r3, #4]
 8008550:	4904      	ldr	r1, [pc, #16]	; (8008564 <HAL_I2CEx_EnableFastModePlus+0x20>)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4313      	orrs	r3, r2
 8008556:	604b      	str	r3, [r1, #4]
}
 8008558:	bf00      	nop
 800855a:	370c      	adds	r7, #12
 800855c:	46bd      	mov	sp, r7
 800855e:	bc80      	pop	{r7}
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop
 8008564:	40010000 	.word	0x40010000

08008568 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008568:	b480      	push	{r7}
 800856a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800856c:	4b04      	ldr	r3, [pc, #16]	; (8008580 <HAL_PWR_EnableBkUpAccess+0x18>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a03      	ldr	r2, [pc, #12]	; (8008580 <HAL_PWR_EnableBkUpAccess+0x18>)
 8008572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008576:	6013      	str	r3, [r2, #0]
}
 8008578:	bf00      	nop
 800857a:	46bd      	mov	sp, r7
 800857c:	bc80      	pop	{r7}
 800857e:	4770      	bx	lr
 8008580:	58000400 	.word	0x58000400

08008584 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008584:	b480      	push	{r7}
 8008586:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8008588:	4b03      	ldr	r3, [pc, #12]	; (8008598 <HAL_PWREx_GetVoltageRange+0x14>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8008590:	4618      	mov	r0, r3
 8008592:	46bd      	mov	sp, r7
 8008594:	bc80      	pop	{r7}
 8008596:	4770      	bx	lr
 8008598:	58000400 	.word	0x58000400

0800859c <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 800859c:	b480      	push	{r7}
 800859e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80085a0:	4b06      	ldr	r3, [pc, #24]	; (80085bc <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085ac:	d101      	bne.n	80085b2 <LL_PWR_IsEnabledBkUpAccess+0x16>
 80085ae:	2301      	movs	r3, #1
 80085b0:	e000      	b.n	80085b4 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80085b2:	2300      	movs	r3, #0
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bc80      	pop	{r7}
 80085ba:	4770      	bx	lr
 80085bc:	58000400 	.word	0x58000400

080085c0 <LL_RCC_HSE_EnableTcxo>:
{
 80085c0:	b480      	push	{r7}
 80085c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80085c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80085ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80085d2:	6013      	str	r3, [r2, #0]
}
 80085d4:	bf00      	nop
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bc80      	pop	{r7}
 80085da:	4770      	bx	lr

080085dc <LL_RCC_HSE_DisableTcxo>:
{
 80085dc:	b480      	push	{r7}
 80085de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80085e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80085ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80085ee:	6013      	str	r3, [r2, #0]
}
 80085f0:	bf00      	nop
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bc80      	pop	{r7}
 80085f6:	4770      	bx	lr

080085f8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80085f8:	b480      	push	{r7}
 80085fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80085fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008606:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800860a:	d101      	bne.n	8008610 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800860c:	2301      	movs	r3, #1
 800860e:	e000      	b.n	8008612 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8008610:	2300      	movs	r3, #0
}
 8008612:	4618      	mov	r0, r3
 8008614:	46bd      	mov	sp, r7
 8008616:	bc80      	pop	{r7}
 8008618:	4770      	bx	lr

0800861a <LL_RCC_HSE_Enable>:
{
 800861a:	b480      	push	{r7}
 800861c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800861e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800862c:	6013      	str	r3, [r2, #0]
}
 800862e:	bf00      	nop
 8008630:	46bd      	mov	sp, r7
 8008632:	bc80      	pop	{r7}
 8008634:	4770      	bx	lr

08008636 <LL_RCC_HSE_Disable>:
{
 8008636:	b480      	push	{r7}
 8008638:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800863a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008648:	6013      	str	r3, [r2, #0]
}
 800864a:	bf00      	nop
 800864c:	46bd      	mov	sp, r7
 800864e:	bc80      	pop	{r7}
 8008650:	4770      	bx	lr

08008652 <LL_RCC_HSE_IsReady>:
{
 8008652:	b480      	push	{r7}
 8008654:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8008656:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008660:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008664:	d101      	bne.n	800866a <LL_RCC_HSE_IsReady+0x18>
 8008666:	2301      	movs	r3, #1
 8008668:	e000      	b.n	800866c <LL_RCC_HSE_IsReady+0x1a>
 800866a:	2300      	movs	r3, #0
}
 800866c:	4618      	mov	r0, r3
 800866e:	46bd      	mov	sp, r7
 8008670:	bc80      	pop	{r7}
 8008672:	4770      	bx	lr

08008674 <LL_RCC_HSI_Enable>:
{
 8008674:	b480      	push	{r7}
 8008676:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8008678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008686:	6013      	str	r3, [r2, #0]
}
 8008688:	bf00      	nop
 800868a:	46bd      	mov	sp, r7
 800868c:	bc80      	pop	{r7}
 800868e:	4770      	bx	lr

08008690 <LL_RCC_HSI_Disable>:
{
 8008690:	b480      	push	{r7}
 8008692:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8008694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800869e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086a2:	6013      	str	r3, [r2, #0]
}
 80086a4:	bf00      	nop
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bc80      	pop	{r7}
 80086aa:	4770      	bx	lr

080086ac <LL_RCC_HSI_IsReady>:
{
 80086ac:	b480      	push	{r7}
 80086ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80086b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086be:	d101      	bne.n	80086c4 <LL_RCC_HSI_IsReady+0x18>
 80086c0:	2301      	movs	r3, #1
 80086c2:	e000      	b.n	80086c6 <LL_RCC_HSI_IsReady+0x1a>
 80086c4:	2300      	movs	r3, #0
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bc80      	pop	{r7}
 80086cc:	4770      	bx	lr

080086ce <LL_RCC_HSI_SetCalibTrimming>:
{
 80086ce:	b480      	push	{r7}
 80086d0:	b083      	sub	sp, #12
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80086d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	061b      	lsls	r3, r3, #24
 80086e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80086e8:	4313      	orrs	r3, r2
 80086ea:	604b      	str	r3, [r1, #4]
}
 80086ec:	bf00      	nop
 80086ee:	370c      	adds	r7, #12
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bc80      	pop	{r7}
 80086f4:	4770      	bx	lr

080086f6 <LL_RCC_LSE_IsReady>:
{
 80086f6:	b480      	push	{r7}
 80086f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80086fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008702:	f003 0302 	and.w	r3, r3, #2
 8008706:	2b02      	cmp	r3, #2
 8008708:	d101      	bne.n	800870e <LL_RCC_LSE_IsReady+0x18>
 800870a:	2301      	movs	r3, #1
 800870c:	e000      	b.n	8008710 <LL_RCC_LSE_IsReady+0x1a>
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	46bd      	mov	sp, r7
 8008714:	bc80      	pop	{r7}
 8008716:	4770      	bx	lr

08008718 <LL_RCC_LSI_Enable>:
{
 8008718:	b480      	push	{r7}
 800871a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800871c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008720:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008724:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008728:	f043 0301 	orr.w	r3, r3, #1
 800872c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008730:	bf00      	nop
 8008732:	46bd      	mov	sp, r7
 8008734:	bc80      	pop	{r7}
 8008736:	4770      	bx	lr

08008738 <LL_RCC_LSI_Disable>:
{
 8008738:	b480      	push	{r7}
 800873a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800873c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008740:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008744:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008748:	f023 0301 	bic.w	r3, r3, #1
 800874c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008750:	bf00      	nop
 8008752:	46bd      	mov	sp, r7
 8008754:	bc80      	pop	{r7}
 8008756:	4770      	bx	lr

08008758 <LL_RCC_LSI_IsReady>:
{
 8008758:	b480      	push	{r7}
 800875a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800875c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008760:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008764:	f003 0302 	and.w	r3, r3, #2
 8008768:	2b02      	cmp	r3, #2
 800876a:	d101      	bne.n	8008770 <LL_RCC_LSI_IsReady+0x18>
 800876c:	2301      	movs	r3, #1
 800876e:	e000      	b.n	8008772 <LL_RCC_LSI_IsReady+0x1a>
 8008770:	2300      	movs	r3, #0
}
 8008772:	4618      	mov	r0, r3
 8008774:	46bd      	mov	sp, r7
 8008776:	bc80      	pop	{r7}
 8008778:	4770      	bx	lr

0800877a <LL_RCC_MSI_Enable>:
{
 800877a:	b480      	push	{r7}
 800877c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800877e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008788:	f043 0301 	orr.w	r3, r3, #1
 800878c:	6013      	str	r3, [r2, #0]
}
 800878e:	bf00      	nop
 8008790:	46bd      	mov	sp, r7
 8008792:	bc80      	pop	{r7}
 8008794:	4770      	bx	lr

08008796 <LL_RCC_MSI_Disable>:
{
 8008796:	b480      	push	{r7}
 8008798:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800879a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80087a4:	f023 0301 	bic.w	r3, r3, #1
 80087a8:	6013      	str	r3, [r2, #0]
}
 80087aa:	bf00      	nop
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bc80      	pop	{r7}
 80087b0:	4770      	bx	lr

080087b2 <LL_RCC_MSI_IsReady>:
{
 80087b2:	b480      	push	{r7}
 80087b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80087b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f003 0302 	and.w	r3, r3, #2
 80087c0:	2b02      	cmp	r3, #2
 80087c2:	d101      	bne.n	80087c8 <LL_RCC_MSI_IsReady+0x16>
 80087c4:	2301      	movs	r3, #1
 80087c6:	e000      	b.n	80087ca <LL_RCC_MSI_IsReady+0x18>
 80087c8:	2300      	movs	r3, #0
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bc80      	pop	{r7}
 80087d0:	4770      	bx	lr

080087d2 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80087d2:	b480      	push	{r7}
 80087d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80087d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f003 0308 	and.w	r3, r3, #8
 80087e0:	2b08      	cmp	r3, #8
 80087e2:	d101      	bne.n	80087e8 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80087e4:	2301      	movs	r3, #1
 80087e6:	e000      	b.n	80087ea <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80087e8:	2300      	movs	r3, #0
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bc80      	pop	{r7}
 80087f0:	4770      	bx	lr

080087f2 <LL_RCC_MSI_GetRange>:
{
 80087f2:	b480      	push	{r7}
 80087f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80087f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8008800:	4618      	mov	r0, r3
 8008802:	46bd      	mov	sp, r7
 8008804:	bc80      	pop	{r7}
 8008806:	4770      	bx	lr

08008808 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8008808:	b480      	push	{r7}
 800880a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800880c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008810:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008814:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8008818:	4618      	mov	r0, r3
 800881a:	46bd      	mov	sp, r7
 800881c:	bc80      	pop	{r7}
 800881e:	4770      	bx	lr

08008820 <LL_RCC_MSI_SetCalibTrimming>:
{
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8008828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	021b      	lsls	r3, r3, #8
 8008836:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800883a:	4313      	orrs	r3, r2
 800883c:	604b      	str	r3, [r1, #4]
}
 800883e:	bf00      	nop
 8008840:	370c      	adds	r7, #12
 8008842:	46bd      	mov	sp, r7
 8008844:	bc80      	pop	{r7}
 8008846:	4770      	bx	lr

08008848 <LL_RCC_SetSysClkSource>:
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8008850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	f023 0203 	bic.w	r2, r3, #3
 800885a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	4313      	orrs	r3, r2
 8008862:	608b      	str	r3, [r1, #8]
}
 8008864:	bf00      	nop
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	bc80      	pop	{r7}
 800886c:	4770      	bx	lr

0800886e <LL_RCC_GetSysClkSource>:
{
 800886e:	b480      	push	{r7}
 8008870:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8008872:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008876:	689b      	ldr	r3, [r3, #8]
 8008878:	f003 030c 	and.w	r3, r3, #12
}
 800887c:	4618      	mov	r0, r3
 800887e:	46bd      	mov	sp, r7
 8008880:	bc80      	pop	{r7}
 8008882:	4770      	bx	lr

08008884 <LL_RCC_SetAHBPrescaler>:
{
 8008884:	b480      	push	{r7}
 8008886:	b083      	sub	sp, #12
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800888c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008896:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	4313      	orrs	r3, r2
 800889e:	608b      	str	r3, [r1, #8]
}
 80088a0:	bf00      	nop
 80088a2:	370c      	adds	r7, #12
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bc80      	pop	{r7}
 80088a8:	4770      	bx	lr

080088aa <LL_C2_RCC_SetAHBPrescaler>:
{
 80088aa:	b480      	push	{r7}
 80088ac:	b083      	sub	sp, #12
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80088b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80088ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80088be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	4313      	orrs	r3, r2
 80088c6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80088ca:	bf00      	nop
 80088cc:	370c      	adds	r7, #12
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bc80      	pop	{r7}
 80088d2:	4770      	bx	lr

080088d4 <LL_RCC_SetAHB3Prescaler>:
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80088dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088e0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80088e4:	f023 020f 	bic.w	r2, r3, #15
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	091b      	lsrs	r3, r3, #4
 80088ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80088f0:	4313      	orrs	r3, r2
 80088f2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80088f6:	bf00      	nop
 80088f8:	370c      	adds	r7, #12
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bc80      	pop	{r7}
 80088fe:	4770      	bx	lr

08008900 <LL_RCC_SetAPB1Prescaler>:
{
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8008908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008912:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	4313      	orrs	r3, r2
 800891a:	608b      	str	r3, [r1, #8]
}
 800891c:	bf00      	nop
 800891e:	370c      	adds	r7, #12
 8008920:	46bd      	mov	sp, r7
 8008922:	bc80      	pop	{r7}
 8008924:	4770      	bx	lr

08008926 <LL_RCC_SetAPB2Prescaler>:
{
 8008926:	b480      	push	{r7}
 8008928:	b083      	sub	sp, #12
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800892e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008938:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	4313      	orrs	r3, r2
 8008940:	608b      	str	r3, [r1, #8]
}
 8008942:	bf00      	nop
 8008944:	370c      	adds	r7, #12
 8008946:	46bd      	mov	sp, r7
 8008948:	bc80      	pop	{r7}
 800894a:	4770      	bx	lr

0800894c <LL_RCC_GetAHBPrescaler>:
{
 800894c:	b480      	push	{r7}
 800894e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8008950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800895a:	4618      	mov	r0, r3
 800895c:	46bd      	mov	sp, r7
 800895e:	bc80      	pop	{r7}
 8008960:	4770      	bx	lr

08008962 <LL_RCC_GetAHB3Prescaler>:
{
 8008962:	b480      	push	{r7}
 8008964:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8008966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800896a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800896e:	011b      	lsls	r3, r3, #4
 8008970:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8008974:	4618      	mov	r0, r3
 8008976:	46bd      	mov	sp, r7
 8008978:	bc80      	pop	{r7}
 800897a:	4770      	bx	lr

0800897c <LL_RCC_GetAPB1Prescaler>:
{
 800897c:	b480      	push	{r7}
 800897e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8008980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008984:	689b      	ldr	r3, [r3, #8]
 8008986:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800898a:	4618      	mov	r0, r3
 800898c:	46bd      	mov	sp, r7
 800898e:	bc80      	pop	{r7}
 8008990:	4770      	bx	lr

08008992 <LL_RCC_GetAPB2Prescaler>:
{
 8008992:	b480      	push	{r7}
 8008994:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8008996:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bc80      	pop	{r7}
 80089a6:	4770      	bx	lr

080089a8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80089a8:	b480      	push	{r7}
 80089aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80089ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80089b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80089ba:	6013      	str	r3, [r2, #0]
}
 80089bc:	bf00      	nop
 80089be:	46bd      	mov	sp, r7
 80089c0:	bc80      	pop	{r7}
 80089c2:	4770      	bx	lr

080089c4 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80089c4:	b480      	push	{r7}
 80089c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80089c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80089d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80089d6:	6013      	str	r3, [r2, #0]
}
 80089d8:	bf00      	nop
 80089da:	46bd      	mov	sp, r7
 80089dc:	bc80      	pop	{r7}
 80089de:	4770      	bx	lr

080089e0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80089e0:	b480      	push	{r7}
 80089e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80089e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80089f2:	d101      	bne.n	80089f8 <LL_RCC_PLL_IsReady+0x18>
 80089f4:	2301      	movs	r3, #1
 80089f6:	e000      	b.n	80089fa <LL_RCC_PLL_IsReady+0x1a>
 80089f8:	2300      	movs	r3, #0
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bc80      	pop	{r7}
 8008a00:	4770      	bx	lr

08008a02 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8008a02:	b480      	push	{r7}
 8008a04:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8008a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a0a:	68db      	ldr	r3, [r3, #12]
 8008a0c:	0a1b      	lsrs	r3, r3, #8
 8008a0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bc80      	pop	{r7}
 8008a18:	4770      	bx	lr

08008a1a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8008a1a:	b480      	push	{r7}
 8008a1c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8008a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a22:	68db      	ldr	r3, [r3, #12]
 8008a24:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bc80      	pop	{r7}
 8008a2e:	4770      	bx	lr

08008a30 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8008a30:	b480      	push	{r7}
 8008a32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8008a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a38:	68db      	ldr	r3, [r3, #12]
 8008a3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bc80      	pop	{r7}
 8008a44:	4770      	bx	lr

08008a46 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8008a46:	b480      	push	{r7}
 8008a48:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8008a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	f003 0303 	and.w	r3, r3, #3
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bc80      	pop	{r7}
 8008a5a:	4770      	bx	lr

08008a5c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8008a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a6e:	d101      	bne.n	8008a74 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8008a70:	2301      	movs	r3, #1
 8008a72:	e000      	b.n	8008a76 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8008a74:	2300      	movs	r3, #0
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bc80      	pop	{r7}
 8008a7c:	4770      	bx	lr

08008a7e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8008a7e:	b480      	push	{r7}
 8008a80:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8008a82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a86:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a92:	d101      	bne.n	8008a98 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8008a94:	2301      	movs	r3, #1
 8008a96:	e000      	b.n	8008a9a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8008a98:	2300      	movs	r3, #0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bc80      	pop	{r7}
 8008aa0:	4770      	bx	lr

08008aa2 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8008aa2:	b480      	push	{r7}
 8008aa4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8008aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008aaa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ab6:	d101      	bne.n	8008abc <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8008ab8:	2301      	movs	r3, #1
 8008aba:	e000      	b.n	8008abe <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8008abc:	2300      	movs	r3, #0
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bc80      	pop	{r7}
 8008ac4:	4770      	bx	lr

08008ac6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8008ac6:	b480      	push	{r7}
 8008ac8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8008aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ace:	689b      	ldr	r3, [r3, #8]
 8008ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ad4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ad8:	d101      	bne.n	8008ade <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8008ada:	2301      	movs	r3, #1
 8008adc:	e000      	b.n	8008ae0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8008ade:	2300      	movs	r3, #0
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bc80      	pop	{r7}
 8008ae6:	4770      	bx	lr

08008ae8 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8008aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008af6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008afa:	d101      	bne.n	8008b00 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8008afc:	2301      	movs	r3, #1
 8008afe:	e000      	b.n	8008b02 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8008b00:	2300      	movs	r3, #0
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bc80      	pop	{r7}
 8008b08:	4770      	bx	lr
	...

08008b0c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b088      	sub	sp, #32
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d101      	bne.n	8008b1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e38b      	b.n	8009236 <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b1e:	f7ff fea6 	bl	800886e <LL_RCC_GetSysClkSource>
 8008b22:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008b24:	f7ff ff8f 	bl	8008a46 <LL_RCC_PLL_GetMainSource>
 8008b28:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f003 0320 	and.w	r3, r3, #32
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	f000 80c9 	beq.w	8008cca <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008b38:	69fb      	ldr	r3, [r7, #28]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d005      	beq.n	8008b4a <HAL_RCC_OscConfig+0x3e>
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	2b0c      	cmp	r3, #12
 8008b42:	d17b      	bne.n	8008c3c <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008b44:	69bb      	ldr	r3, [r7, #24]
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	d178      	bne.n	8008c3c <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008b4a:	f7ff fe32 	bl	80087b2 <LL_RCC_MSI_IsReady>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d005      	beq.n	8008b60 <HAL_RCC_OscConfig+0x54>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6a1b      	ldr	r3, [r3, #32]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d101      	bne.n	8008b60 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	e36a      	b.n	8009236 <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f003 0308 	and.w	r3, r3, #8
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d005      	beq.n	8008b7e <HAL_RCC_OscConfig+0x72>
 8008b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b7c:	e006      	b.n	8008b8c <HAL_RCC_OscConfig+0x80>
 8008b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b86:	091b      	lsrs	r3, r3, #4
 8008b88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d222      	bcs.n	8008bd6 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b94:	4618      	mov	r0, r3
 8008b96:	f000 fd6f 	bl	8009678 <RCC_SetFlashLatencyFromMSIRange>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d001      	beq.n	8008ba4 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e348      	b.n	8009236 <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008bae:	f043 0308 	orr.w	r3, r3, #8
 8008bb2:	6013      	str	r3, [r2, #0]
 8008bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f7ff fe26 	bl	8008820 <LL_RCC_MSI_SetCalibTrimming>
 8008bd4:	e021      	b.n	8008c1a <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008bd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008be0:	f043 0308 	orr.w	r3, r3, #8
 8008be4:	6013      	str	r3, [r2, #0]
 8008be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bf4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c00:	4618      	mov	r0, r3
 8008c02:	f7ff fe0d 	bl	8008820 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f000 fd34 	bl	8009678 <RCC_SetFlashLatencyFromMSIRange>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d001      	beq.n	8008c1a <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	e30d      	b.n	8009236 <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008c1a:	f000 fcf5 	bl	8009608 <HAL_RCC_GetHCLKFreq>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	4aa1      	ldr	r2, [pc, #644]	; (8008ea8 <HAL_RCC_OscConfig+0x39c>)
 8008c22:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008c24:	4ba1      	ldr	r3, [pc, #644]	; (8008eac <HAL_RCC_OscConfig+0x3a0>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f7fd fef9 	bl	8006a20 <HAL_InitTick>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8008c32:	7cfb      	ldrb	r3, [r7, #19]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d047      	beq.n	8008cc8 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8008c38:	7cfb      	ldrb	r3, [r7, #19]
 8008c3a:	e2fc      	b.n	8009236 <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6a1b      	ldr	r3, [r3, #32]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d02c      	beq.n	8008c9e <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008c44:	f7ff fd99 	bl	800877a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008c48:	f7fd ff36 	bl	8006ab8 <HAL_GetTick>
 8008c4c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8008c4e:	e008      	b.n	8008c62 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008c50:	f7fd ff32 	bl	8006ab8 <HAL_GetTick>
 8008c54:	4602      	mov	r2, r0
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	1ad3      	subs	r3, r2, r3
 8008c5a:	2b02      	cmp	r3, #2
 8008c5c:	d901      	bls.n	8008c62 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8008c5e:	2303      	movs	r3, #3
 8008c60:	e2e9      	b.n	8009236 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8008c62:	f7ff fda6 	bl	80087b2 <LL_RCC_MSI_IsReady>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d0f1      	beq.n	8008c50 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c76:	f043 0308 	orr.w	r3, r3, #8
 8008c7a:	6013      	str	r3, [r2, #0]
 8008c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7ff fdc2 	bl	8008820 <LL_RCC_MSI_SetCalibTrimming>
 8008c9c:	e015      	b.n	8008cca <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008c9e:	f7ff fd7a 	bl	8008796 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008ca2:	f7fd ff09 	bl	8006ab8 <HAL_GetTick>
 8008ca6:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8008ca8:	e008      	b.n	8008cbc <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008caa:	f7fd ff05 	bl	8006ab8 <HAL_GetTick>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	1ad3      	subs	r3, r2, r3
 8008cb4:	2b02      	cmp	r3, #2
 8008cb6:	d901      	bls.n	8008cbc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8008cb8:	2303      	movs	r3, #3
 8008cba:	e2bc      	b.n	8009236 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8008cbc:	f7ff fd79 	bl	80087b2 <LL_RCC_MSI_IsReady>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d1f1      	bne.n	8008caa <HAL_RCC_OscConfig+0x19e>
 8008cc6:	e000      	b.n	8008cca <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008cc8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f003 0301 	and.w	r3, r3, #1
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d05f      	beq.n	8008d96 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8008cd6:	69fb      	ldr	r3, [r7, #28]
 8008cd8:	2b08      	cmp	r3, #8
 8008cda:	d005      	beq.n	8008ce8 <HAL_RCC_OscConfig+0x1dc>
 8008cdc:	69fb      	ldr	r3, [r7, #28]
 8008cde:	2b0c      	cmp	r3, #12
 8008ce0:	d10d      	bne.n	8008cfe <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008ce2:	69bb      	ldr	r3, [r7, #24]
 8008ce4:	2b03      	cmp	r3, #3
 8008ce6:	d10a      	bne.n	8008cfe <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ce8:	f7ff fcb3 	bl	8008652 <LL_RCC_HSE_IsReady>
 8008cec:	4603      	mov	r3, r0
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d050      	beq.n	8008d94 <HAL_RCC_OscConfig+0x288>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d14c      	bne.n	8008d94 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	e29b      	b.n	8009236 <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8008cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008d10:	4313      	orrs	r3, r2
 8008d12:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d1c:	d102      	bne.n	8008d24 <HAL_RCC_OscConfig+0x218>
 8008d1e:	f7ff fc7c 	bl	800861a <LL_RCC_HSE_Enable>
 8008d22:	e00d      	b.n	8008d40 <HAL_RCC_OscConfig+0x234>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8008d2c:	d104      	bne.n	8008d38 <HAL_RCC_OscConfig+0x22c>
 8008d2e:	f7ff fc47 	bl	80085c0 <LL_RCC_HSE_EnableTcxo>
 8008d32:	f7ff fc72 	bl	800861a <LL_RCC_HSE_Enable>
 8008d36:	e003      	b.n	8008d40 <HAL_RCC_OscConfig+0x234>
 8008d38:	f7ff fc7d 	bl	8008636 <LL_RCC_HSE_Disable>
 8008d3c:	f7ff fc4e 	bl	80085dc <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d012      	beq.n	8008d6e <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d48:	f7fd feb6 	bl	8006ab8 <HAL_GetTick>
 8008d4c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8008d4e:	e008      	b.n	8008d62 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008d50:	f7fd feb2 	bl	8006ab8 <HAL_GetTick>
 8008d54:	4602      	mov	r2, r0
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	1ad3      	subs	r3, r2, r3
 8008d5a:	2b64      	cmp	r3, #100	; 0x64
 8008d5c:	d901      	bls.n	8008d62 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8008d5e:	2303      	movs	r3, #3
 8008d60:	e269      	b.n	8009236 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8008d62:	f7ff fc76 	bl	8008652 <LL_RCC_HSE_IsReady>
 8008d66:	4603      	mov	r3, r0
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d0f1      	beq.n	8008d50 <HAL_RCC_OscConfig+0x244>
 8008d6c:	e013      	b.n	8008d96 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d6e:	f7fd fea3 	bl	8006ab8 <HAL_GetTick>
 8008d72:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8008d74:	e008      	b.n	8008d88 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008d76:	f7fd fe9f 	bl	8006ab8 <HAL_GetTick>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	1ad3      	subs	r3, r2, r3
 8008d80:	2b64      	cmp	r3, #100	; 0x64
 8008d82:	d901      	bls.n	8008d88 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8008d84:	2303      	movs	r3, #3
 8008d86:	e256      	b.n	8009236 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8008d88:	f7ff fc63 	bl	8008652 <LL_RCC_HSE_IsReady>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d1f1      	bne.n	8008d76 <HAL_RCC_OscConfig+0x26a>
 8008d92:	e000      	b.n	8008d96 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d94:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f003 0302 	and.w	r3, r3, #2
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d04b      	beq.n	8008e3a <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8008da2:	69fb      	ldr	r3, [r7, #28]
 8008da4:	2b04      	cmp	r3, #4
 8008da6:	d005      	beq.n	8008db4 <HAL_RCC_OscConfig+0x2a8>
 8008da8:	69fb      	ldr	r3, [r7, #28]
 8008daa:	2b0c      	cmp	r3, #12
 8008dac:	d113      	bne.n	8008dd6 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008dae:	69bb      	ldr	r3, [r7, #24]
 8008db0:	2b02      	cmp	r3, #2
 8008db2:	d110      	bne.n	8008dd6 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008db4:	f7ff fc7a 	bl	80086ac <LL_RCC_HSI_IsReady>
 8008db8:	4603      	mov	r3, r0
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d005      	beq.n	8008dca <HAL_RCC_OscConfig+0x2be>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	691b      	ldr	r3, [r3, #16]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d101      	bne.n	8008dca <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e235      	b.n	8009236 <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	695b      	ldr	r3, [r3, #20]
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7ff fc7d 	bl	80086ce <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008dd4:	e031      	b.n	8008e3a <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	691b      	ldr	r3, [r3, #16]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d019      	beq.n	8008e12 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008dde:	f7ff fc49 	bl	8008674 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008de2:	f7fd fe69 	bl	8006ab8 <HAL_GetTick>
 8008de6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8008de8:	e008      	b.n	8008dfc <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008dea:	f7fd fe65 	bl	8006ab8 <HAL_GetTick>
 8008dee:	4602      	mov	r2, r0
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	1ad3      	subs	r3, r2, r3
 8008df4:	2b02      	cmp	r3, #2
 8008df6:	d901      	bls.n	8008dfc <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8008df8:	2303      	movs	r3, #3
 8008dfa:	e21c      	b.n	8009236 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 8008dfc:	f7ff fc56 	bl	80086ac <LL_RCC_HSI_IsReady>
 8008e00:	4603      	mov	r3, r0
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d0f1      	beq.n	8008dea <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	695b      	ldr	r3, [r3, #20]
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7ff fc5f 	bl	80086ce <LL_RCC_HSI_SetCalibTrimming>
 8008e10:	e013      	b.n	8008e3a <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008e12:	f7ff fc3d 	bl	8008690 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e16:	f7fd fe4f 	bl	8006ab8 <HAL_GetTick>
 8008e1a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8008e1c:	e008      	b.n	8008e30 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e1e:	f7fd fe4b 	bl	8006ab8 <HAL_GetTick>
 8008e22:	4602      	mov	r2, r0
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	1ad3      	subs	r3, r2, r3
 8008e28:	2b02      	cmp	r3, #2
 8008e2a:	d901      	bls.n	8008e30 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8008e2c:	2303      	movs	r3, #3
 8008e2e:	e202      	b.n	8009236 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8008e30:	f7ff fc3c 	bl	80086ac <LL_RCC_HSI_IsReady>
 8008e34:	4603      	mov	r3, r0
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d1f1      	bne.n	8008e1e <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f003 0308 	and.w	r3, r3, #8
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d06f      	beq.n	8008f26 <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	699b      	ldr	r3, [r3, #24]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d057      	beq.n	8008efe <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 8008e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008e56:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	69da      	ldr	r2, [r3, #28]
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f003 0310 	and.w	r3, r3, #16
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d036      	beq.n	8008ed4 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f003 0302 	and.w	r3, r3, #2
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d006      	beq.n	8008e7e <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d101      	bne.n	8008e7e <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	e1db      	b.n	8009236 <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f003 0301 	and.w	r3, r3, #1
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d018      	beq.n	8008eba <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 8008e88:	f7ff fc56 	bl	8008738 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008e8c:	f7fd fe14 	bl	8006ab8 <HAL_GetTick>
 8008e90:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8008e92:	e00d      	b.n	8008eb0 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008e94:	f7fd fe10 	bl	8006ab8 <HAL_GetTick>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	1ad3      	subs	r3, r2, r3
 8008e9e:	2b11      	cmp	r3, #17
 8008ea0:	d906      	bls.n	8008eb0 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 8008ea2:	2303      	movs	r3, #3
 8008ea4:	e1c7      	b.n	8009236 <HAL_RCC_OscConfig+0x72a>
 8008ea6:	bf00      	nop
 8008ea8:	20000000 	.word	0x20000000
 8008eac:	2000006c 	.word	0x2000006c
          while (LL_RCC_LSI_IsReady() != 0U)
 8008eb0:	f7ff fc52 	bl	8008758 <LL_RCC_LSI_IsReady>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d1ec      	bne.n	8008e94 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8008eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ec2:	f023 0210 	bic.w	r2, r3, #16
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	69db      	ldr	r3, [r3, #28]
 8008eca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008ed4:	f7ff fc20 	bl	8008718 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ed8:	f7fd fdee 	bl	8006ab8 <HAL_GetTick>
 8008edc:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8008ede:	e008      	b.n	8008ef2 <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ee0:	f7fd fdea 	bl	8006ab8 <HAL_GetTick>
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	1ad3      	subs	r3, r2, r3
 8008eea:	2b11      	cmp	r3, #17
 8008eec:	d901      	bls.n	8008ef2 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 8008eee:	2303      	movs	r3, #3
 8008ef0:	e1a1      	b.n	8009236 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 8008ef2:	f7ff fc31 	bl	8008758 <LL_RCC_LSI_IsReady>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d0f1      	beq.n	8008ee0 <HAL_RCC_OscConfig+0x3d4>
 8008efc:	e013      	b.n	8008f26 <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008efe:	f7ff fc1b 	bl	8008738 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f02:	f7fd fdd9 	bl	8006ab8 <HAL_GetTick>
 8008f06:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8008f08:	e008      	b.n	8008f1c <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f0a:	f7fd fdd5 	bl	8006ab8 <HAL_GetTick>
 8008f0e:	4602      	mov	r2, r0
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	1ad3      	subs	r3, r2, r3
 8008f14:	2b11      	cmp	r3, #17
 8008f16:	d901      	bls.n	8008f1c <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8008f18:	2303      	movs	r3, #3
 8008f1a:	e18c      	b.n	8009236 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 8008f1c:	f7ff fc1c 	bl	8008758 <LL_RCC_LSI_IsReady>
 8008f20:	4603      	mov	r3, r0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d1f1      	bne.n	8008f0a <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f003 0304 	and.w	r3, r3, #4
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	f000 80d8 	beq.w	80090e4 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8008f34:	f7ff fb32 	bl	800859c <LL_PWR_IsEnabledBkUpAccess>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d113      	bne.n	8008f66 <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8008f3e:	f7ff fb13 	bl	8008568 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008f42:	f7fd fdb9 	bl	8006ab8 <HAL_GetTick>
 8008f46:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8008f48:	e008      	b.n	8008f5c <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f4a:	f7fd fdb5 	bl	8006ab8 <HAL_GetTick>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	1ad3      	subs	r3, r2, r3
 8008f54:	2b02      	cmp	r3, #2
 8008f56:	d901      	bls.n	8008f5c <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8008f58:	2303      	movs	r3, #3
 8008f5a:	e16c      	b.n	8009236 <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8008f5c:	f7ff fb1e 	bl	800859c <LL_PWR_IsEnabledBkUpAccess>
 8008f60:	4603      	mov	r3, r0
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d0f1      	beq.n	8008f4a <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	68db      	ldr	r3, [r3, #12]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d07b      	beq.n	8009066 <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	68db      	ldr	r3, [r3, #12]
 8008f72:	2b85      	cmp	r3, #133	; 0x85
 8008f74:	d003      	beq.n	8008f7e <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	2b05      	cmp	r3, #5
 8008f7c:	d109      	bne.n	8008f92 <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f8a:	f043 0304 	orr.w	r3, r3, #4
 8008f8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f92:	f7fd fd91 	bl	8006ab8 <HAL_GetTick>
 8008f96:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fa0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008fa4:	f043 0301 	orr.w	r3, r3, #1
 8008fa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8008fac:	e00a      	b.n	8008fc4 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008fae:	f7fd fd83 	bl	8006ab8 <HAL_GetTick>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	1ad3      	subs	r3, r2, r3
 8008fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d901      	bls.n	8008fc4 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8008fc0:	2303      	movs	r3, #3
 8008fc2:	e138      	b.n	8009236 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8008fc4:	f7ff fb97 	bl	80086f6 <LL_RCC_LSE_IsReady>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d0ef      	beq.n	8008fae <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	2b81      	cmp	r3, #129	; 0x81
 8008fd4:	d003      	beq.n	8008fde <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	68db      	ldr	r3, [r3, #12]
 8008fda:	2b85      	cmp	r3, #133	; 0x85
 8008fdc:	d121      	bne.n	8009022 <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fde:	f7fd fd6b 	bl	8006ab8 <HAL_GetTick>
 8008fe2:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ff4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008ff8:	e00a      	b.n	8009010 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ffa:	f7fd fd5d 	bl	8006ab8 <HAL_GetTick>
 8008ffe:	4602      	mov	r2, r0
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	1ad3      	subs	r3, r2, r3
 8009004:	f241 3288 	movw	r2, #5000	; 0x1388
 8009008:	4293      	cmp	r3, r2
 800900a:	d901      	bls.n	8009010 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 800900c:	2303      	movs	r3, #3
 800900e:	e112      	b.n	8009236 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8009010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009018:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800901c:	2b00      	cmp	r3, #0
 800901e:	d0ec      	beq.n	8008ffa <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8009020:	e060      	b.n	80090e4 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009022:	f7fd fd49 	bl	8006ab8 <HAL_GetTick>
 8009026:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8009028:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800902c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009030:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009034:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009038:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800903c:	e00a      	b.n	8009054 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800903e:	f7fd fd3b 	bl	8006ab8 <HAL_GetTick>
 8009042:	4602      	mov	r2, r0
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	1ad3      	subs	r3, r2, r3
 8009048:	f241 3288 	movw	r2, #5000	; 0x1388
 800904c:	4293      	cmp	r3, r2
 800904e:	d901      	bls.n	8009054 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8009050:	2303      	movs	r3, #3
 8009052:	e0f0      	b.n	8009236 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8009054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800905c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009060:	2b00      	cmp	r3, #0
 8009062:	d1ec      	bne.n	800903e <HAL_RCC_OscConfig+0x532>
 8009064:	e03e      	b.n	80090e4 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009066:	f7fd fd27 	bl	8006ab8 <HAL_GetTick>
 800906a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800906c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009074:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009078:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800907c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8009080:	e00a      	b.n	8009098 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009082:	f7fd fd19 	bl	8006ab8 <HAL_GetTick>
 8009086:	4602      	mov	r2, r0
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	1ad3      	subs	r3, r2, r3
 800908c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009090:	4293      	cmp	r3, r2
 8009092:	d901      	bls.n	8009098 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8009094:	2303      	movs	r3, #3
 8009096:	e0ce      	b.n	8009236 <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8009098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800909c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d1ec      	bne.n	8009082 <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090a8:	f7fd fd06 	bl	8006ab8 <HAL_GetTick>
 80090ac:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80090ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80090ba:	f023 0301 	bic.w	r3, r3, #1
 80090be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80090c2:	e00a      	b.n	80090da <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80090c4:	f7fd fcf8 	bl	8006ab8 <HAL_GetTick>
 80090c8:	4602      	mov	r2, r0
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	1ad3      	subs	r3, r2, r3
 80090ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d901      	bls.n	80090da <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 80090d6:	2303      	movs	r3, #3
 80090d8:	e0ad      	b.n	8009236 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 80090da:	f7ff fb0c 	bl	80086f6 <LL_RCC_LSE_IsReady>
 80090de:	4603      	mov	r3, r0
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d1ef      	bne.n	80090c4 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	f000 80a3 	beq.w	8009234 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80090ee:	69fb      	ldr	r3, [r7, #28]
 80090f0:	2b0c      	cmp	r3, #12
 80090f2:	d076      	beq.n	80091e2 <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f8:	2b02      	cmp	r3, #2
 80090fa:	d14b      	bne.n	8009194 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80090fc:	f7ff fc62 	bl	80089c4 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009100:	f7fd fcda 	bl	8006ab8 <HAL_GetTick>
 8009104:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8009106:	e008      	b.n	800911a <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009108:	f7fd fcd6 	bl	8006ab8 <HAL_GetTick>
 800910c:	4602      	mov	r2, r0
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	1ad3      	subs	r3, r2, r3
 8009112:	2b0a      	cmp	r3, #10
 8009114:	d901      	bls.n	800911a <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 8009116:	2303      	movs	r3, #3
 8009118:	e08d      	b.n	8009236 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 800911a:	f7ff fc61 	bl	80089e0 <LL_RCC_PLL_IsReady>
 800911e:	4603      	mov	r3, r0
 8009120:	2b00      	cmp	r3, #0
 8009122:	d1f1      	bne.n	8009108 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009128:	68da      	ldr	r2, [r3, #12]
 800912a:	4b45      	ldr	r3, [pc, #276]	; (8009240 <HAL_RCC_OscConfig+0x734>)
 800912c:	4013      	ands	r3, r2
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009136:	4311      	orrs	r1, r2
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800913c:	0212      	lsls	r2, r2, #8
 800913e:	4311      	orrs	r1, r2
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009144:	4311      	orrs	r1, r2
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800914a:	4311      	orrs	r1, r2
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009150:	430a      	orrs	r2, r1
 8009152:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009156:	4313      	orrs	r3, r2
 8009158:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800915a:	f7ff fc25 	bl	80089a8 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800915e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009162:	68db      	ldr	r3, [r3, #12]
 8009164:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800916c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800916e:	f7fd fca3 	bl	8006ab8 <HAL_GetTick>
 8009172:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8009174:	e008      	b.n	8009188 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009176:	f7fd fc9f 	bl	8006ab8 <HAL_GetTick>
 800917a:	4602      	mov	r2, r0
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	1ad3      	subs	r3, r2, r3
 8009180:	2b0a      	cmp	r3, #10
 8009182:	d901      	bls.n	8009188 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8009184:	2303      	movs	r3, #3
 8009186:	e056      	b.n	8009236 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 8009188:	f7ff fc2a 	bl	80089e0 <LL_RCC_PLL_IsReady>
 800918c:	4603      	mov	r3, r0
 800918e:	2b00      	cmp	r3, #0
 8009190:	d0f1      	beq.n	8009176 <HAL_RCC_OscConfig+0x66a>
 8009192:	e04f      	b.n	8009234 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009194:	f7ff fc16 	bl	80089c4 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8009198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800919c:	68db      	ldr	r3, [r3, #12]
 800919e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80091a2:	f023 0303 	bic.w	r3, r3, #3
 80091a6:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 80091a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091ac:	68db      	ldr	r3, [r3, #12]
 80091ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80091b2:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80091b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091ba:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091bc:	f7fd fc7c 	bl	8006ab8 <HAL_GetTick>
 80091c0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80091c2:	e008      	b.n	80091d6 <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80091c4:	f7fd fc78 	bl	8006ab8 <HAL_GetTick>
 80091c8:	4602      	mov	r2, r0
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	1ad3      	subs	r3, r2, r3
 80091ce:	2b0a      	cmp	r3, #10
 80091d0:	d901      	bls.n	80091d6 <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 80091d2:	2303      	movs	r3, #3
 80091d4:	e02f      	b.n	8009236 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 80091d6:	f7ff fc03 	bl	80089e0 <LL_RCC_PLL_IsReady>
 80091da:	4603      	mov	r3, r0
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d1f1      	bne.n	80091c4 <HAL_RCC_OscConfig+0x6b8>
 80091e0:	e028      	b.n	8009234 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d101      	bne.n	80091ee <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 80091ea:	2301      	movs	r3, #1
 80091ec:	e023      	b.n	8009236 <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80091ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091f2:	68db      	ldr	r3, [r3, #12]
 80091f4:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80091f6:	69bb      	ldr	r3, [r7, #24]
 80091f8:	f003 0203 	and.w	r2, r3, #3
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009200:	429a      	cmp	r2, r3
 8009202:	d115      	bne.n	8009230 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8009204:	69bb      	ldr	r3, [r7, #24]
 8009206:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800920e:	429a      	cmp	r2, r3
 8009210:	d10e      	bne.n	8009230 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8009212:	69bb      	ldr	r3, [r7, #24]
 8009214:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800921c:	021b      	lsls	r3, r3, #8
 800921e:	429a      	cmp	r2, r3
 8009220:	d106      	bne.n	8009230 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8009222:	69bb      	ldr	r3, [r7, #24]
 8009224:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800922c:	429a      	cmp	r2, r3
 800922e:	d001      	beq.n	8009234 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 8009230:	2301      	movs	r3, #1
 8009232:	e000      	b.n	8009236 <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8009234:	2300      	movs	r3, #0
}
 8009236:	4618      	mov	r0, r3
 8009238:	3720      	adds	r7, #32
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
 800923e:	bf00      	nop
 8009240:	11c1808c 	.word	0x11c1808c

08009244 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d101      	bne.n	8009258 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009254:	2301      	movs	r3, #1
 8009256:	e12c      	b.n	80094b2 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009258:	4b98      	ldr	r3, [pc, #608]	; (80094bc <HAL_RCC_ClockConfig+0x278>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f003 0307 	and.w	r3, r3, #7
 8009260:	683a      	ldr	r2, [r7, #0]
 8009262:	429a      	cmp	r2, r3
 8009264:	d91b      	bls.n	800929e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009266:	4b95      	ldr	r3, [pc, #596]	; (80094bc <HAL_RCC_ClockConfig+0x278>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f023 0207 	bic.w	r2, r3, #7
 800926e:	4993      	ldr	r1, [pc, #588]	; (80094bc <HAL_RCC_ClockConfig+0x278>)
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	4313      	orrs	r3, r2
 8009274:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009276:	f7fd fc1f 	bl	8006ab8 <HAL_GetTick>
 800927a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800927c:	e008      	b.n	8009290 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800927e:	f7fd fc1b 	bl	8006ab8 <HAL_GetTick>
 8009282:	4602      	mov	r2, r0
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	1ad3      	subs	r3, r2, r3
 8009288:	2b02      	cmp	r3, #2
 800928a:	d901      	bls.n	8009290 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800928c:	2303      	movs	r3, #3
 800928e:	e110      	b.n	80094b2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009290:	4b8a      	ldr	r3, [pc, #552]	; (80094bc <HAL_RCC_ClockConfig+0x278>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f003 0307 	and.w	r3, r3, #7
 8009298:	683a      	ldr	r2, [r7, #0]
 800929a:	429a      	cmp	r2, r3
 800929c:	d1ef      	bne.n	800927e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f003 0302 	and.w	r3, r3, #2
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d016      	beq.n	80092d8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	4618      	mov	r0, r3
 80092b0:	f7ff fae8 	bl	8008884 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80092b4:	f7fd fc00 	bl	8006ab8 <HAL_GetTick>
 80092b8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80092ba:	e008      	b.n	80092ce <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80092bc:	f7fd fbfc 	bl	8006ab8 <HAL_GetTick>
 80092c0:	4602      	mov	r2, r0
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	1ad3      	subs	r3, r2, r3
 80092c6:	2b02      	cmp	r3, #2
 80092c8:	d901      	bls.n	80092ce <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80092ca:	2303      	movs	r3, #3
 80092cc:	e0f1      	b.n	80094b2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80092ce:	f7ff fbc5 	bl	8008a5c <LL_RCC_IsActiveFlag_HPRE>
 80092d2:	4603      	mov	r3, r0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d0f1      	beq.n	80092bc <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f003 0320 	and.w	r3, r3, #32
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d016      	beq.n	8009312 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	695b      	ldr	r3, [r3, #20]
 80092e8:	4618      	mov	r0, r3
 80092ea:	f7ff fade 	bl	80088aa <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80092ee:	f7fd fbe3 	bl	8006ab8 <HAL_GetTick>
 80092f2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80092f4:	e008      	b.n	8009308 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80092f6:	f7fd fbdf 	bl	8006ab8 <HAL_GetTick>
 80092fa:	4602      	mov	r2, r0
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	1ad3      	subs	r3, r2, r3
 8009300:	2b02      	cmp	r3, #2
 8009302:	d901      	bls.n	8009308 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8009304:	2303      	movs	r3, #3
 8009306:	e0d4      	b.n	80094b2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8009308:	f7ff fbb9 	bl	8008a7e <LL_RCC_IsActiveFlag_C2HPRE>
 800930c:	4603      	mov	r3, r0
 800930e:	2b00      	cmp	r3, #0
 8009310:	d0f1      	beq.n	80092f6 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800931a:	2b00      	cmp	r3, #0
 800931c:	d016      	beq.n	800934c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	699b      	ldr	r3, [r3, #24]
 8009322:	4618      	mov	r0, r3
 8009324:	f7ff fad6 	bl	80088d4 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009328:	f7fd fbc6 	bl	8006ab8 <HAL_GetTick>
 800932c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800932e:	e008      	b.n	8009342 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009330:	f7fd fbc2 	bl	8006ab8 <HAL_GetTick>
 8009334:	4602      	mov	r2, r0
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	1ad3      	subs	r3, r2, r3
 800933a:	2b02      	cmp	r3, #2
 800933c:	d901      	bls.n	8009342 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800933e:	2303      	movs	r3, #3
 8009340:	e0b7      	b.n	80094b2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8009342:	f7ff fbae 	bl	8008aa2 <LL_RCC_IsActiveFlag_SHDHPRE>
 8009346:	4603      	mov	r3, r0
 8009348:	2b00      	cmp	r3, #0
 800934a:	d0f1      	beq.n	8009330 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f003 0304 	and.w	r3, r3, #4
 8009354:	2b00      	cmp	r3, #0
 8009356:	d016      	beq.n	8009386 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	68db      	ldr	r3, [r3, #12]
 800935c:	4618      	mov	r0, r3
 800935e:	f7ff facf 	bl	8008900 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009362:	f7fd fba9 	bl	8006ab8 <HAL_GetTick>
 8009366:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8009368:	e008      	b.n	800937c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800936a:	f7fd fba5 	bl	8006ab8 <HAL_GetTick>
 800936e:	4602      	mov	r2, r0
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	1ad3      	subs	r3, r2, r3
 8009374:	2b02      	cmp	r3, #2
 8009376:	d901      	bls.n	800937c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8009378:	2303      	movs	r3, #3
 800937a:	e09a      	b.n	80094b2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800937c:	f7ff fba3 	bl	8008ac6 <LL_RCC_IsActiveFlag_PPRE1>
 8009380:	4603      	mov	r3, r0
 8009382:	2b00      	cmp	r3, #0
 8009384:	d0f1      	beq.n	800936a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f003 0308 	and.w	r3, r3, #8
 800938e:	2b00      	cmp	r3, #0
 8009390:	d017      	beq.n	80093c2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	691b      	ldr	r3, [r3, #16]
 8009396:	00db      	lsls	r3, r3, #3
 8009398:	4618      	mov	r0, r3
 800939a:	f7ff fac4 	bl	8008926 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800939e:	f7fd fb8b 	bl	8006ab8 <HAL_GetTick>
 80093a2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80093a4:	e008      	b.n	80093b8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80093a6:	f7fd fb87 	bl	8006ab8 <HAL_GetTick>
 80093aa:	4602      	mov	r2, r0
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	1ad3      	subs	r3, r2, r3
 80093b0:	2b02      	cmp	r3, #2
 80093b2:	d901      	bls.n	80093b8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80093b4:	2303      	movs	r3, #3
 80093b6:	e07c      	b.n	80094b2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80093b8:	f7ff fb96 	bl	8008ae8 <LL_RCC_IsActiveFlag_PPRE2>
 80093bc:	4603      	mov	r3, r0
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d0f1      	beq.n	80093a6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f003 0301 	and.w	r3, r3, #1
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d043      	beq.n	8009456 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	2b02      	cmp	r3, #2
 80093d4:	d106      	bne.n	80093e4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80093d6:	f7ff f93c 	bl	8008652 <LL_RCC_HSE_IsReady>
 80093da:	4603      	mov	r3, r0
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d11e      	bne.n	800941e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80093e0:	2301      	movs	r3, #1
 80093e2:	e066      	b.n	80094b2 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	2b03      	cmp	r3, #3
 80093ea:	d106      	bne.n	80093fa <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80093ec:	f7ff faf8 	bl	80089e0 <LL_RCC_PLL_IsReady>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d113      	bne.n	800941e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80093f6:	2301      	movs	r3, #1
 80093f8:	e05b      	b.n	80094b2 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d106      	bne.n	8009410 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8009402:	f7ff f9d6 	bl	80087b2 <LL_RCC_MSI_IsReady>
 8009406:	4603      	mov	r3, r0
 8009408:	2b00      	cmp	r3, #0
 800940a:	d108      	bne.n	800941e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800940c:	2301      	movs	r3, #1
 800940e:	e050      	b.n	80094b2 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8009410:	f7ff f94c 	bl	80086ac <LL_RCC_HSI_IsReady>
 8009414:	4603      	mov	r3, r0
 8009416:	2b00      	cmp	r3, #0
 8009418:	d101      	bne.n	800941e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800941a:	2301      	movs	r3, #1
 800941c:	e049      	b.n	80094b2 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	4618      	mov	r0, r3
 8009424:	f7ff fa10 	bl	8008848 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009428:	f7fd fb46 	bl	8006ab8 <HAL_GetTick>
 800942c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800942e:	e00a      	b.n	8009446 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009430:	f7fd fb42 	bl	8006ab8 <HAL_GetTick>
 8009434:	4602      	mov	r2, r0
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	1ad3      	subs	r3, r2, r3
 800943a:	f241 3288 	movw	r2, #5000	; 0x1388
 800943e:	4293      	cmp	r3, r2
 8009440:	d901      	bls.n	8009446 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8009442:	2303      	movs	r3, #3
 8009444:	e035      	b.n	80094b2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009446:	f7ff fa12 	bl	800886e <LL_RCC_GetSysClkSource>
 800944a:	4602      	mov	r2, r0
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	009b      	lsls	r3, r3, #2
 8009452:	429a      	cmp	r2, r3
 8009454:	d1ec      	bne.n	8009430 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009456:	4b19      	ldr	r3, [pc, #100]	; (80094bc <HAL_RCC_ClockConfig+0x278>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f003 0307 	and.w	r3, r3, #7
 800945e:	683a      	ldr	r2, [r7, #0]
 8009460:	429a      	cmp	r2, r3
 8009462:	d21b      	bcs.n	800949c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009464:	4b15      	ldr	r3, [pc, #84]	; (80094bc <HAL_RCC_ClockConfig+0x278>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f023 0207 	bic.w	r2, r3, #7
 800946c:	4913      	ldr	r1, [pc, #76]	; (80094bc <HAL_RCC_ClockConfig+0x278>)
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	4313      	orrs	r3, r2
 8009472:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009474:	f7fd fb20 	bl	8006ab8 <HAL_GetTick>
 8009478:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800947a:	e008      	b.n	800948e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800947c:	f7fd fb1c 	bl	8006ab8 <HAL_GetTick>
 8009480:	4602      	mov	r2, r0
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	1ad3      	subs	r3, r2, r3
 8009486:	2b02      	cmp	r3, #2
 8009488:	d901      	bls.n	800948e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800948a:	2303      	movs	r3, #3
 800948c:	e011      	b.n	80094b2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800948e:	4b0b      	ldr	r3, [pc, #44]	; (80094bc <HAL_RCC_ClockConfig+0x278>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f003 0307 	and.w	r3, r3, #7
 8009496:	683a      	ldr	r2, [r7, #0]
 8009498:	429a      	cmp	r2, r3
 800949a:	d1ef      	bne.n	800947c <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800949c:	f000 f8b4 	bl	8009608 <HAL_RCC_GetHCLKFreq>
 80094a0:	4603      	mov	r3, r0
 80094a2:	4a07      	ldr	r2, [pc, #28]	; (80094c0 <HAL_RCC_ClockConfig+0x27c>)
 80094a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80094a6:	4b07      	ldr	r3, [pc, #28]	; (80094c4 <HAL_RCC_ClockConfig+0x280>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4618      	mov	r0, r3
 80094ac:	f7fd fab8 	bl	8006a20 <HAL_InitTick>
 80094b0:	4603      	mov	r3, r0
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3710      	adds	r7, #16
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
 80094ba:	bf00      	nop
 80094bc:	58004000 	.word	0x58004000
 80094c0:	20000000 	.word	0x20000000
 80094c4:	2000006c 	.word	0x2000006c

080094c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80094c8:	b590      	push	{r4, r7, lr}
 80094ca:	b087      	sub	sp, #28
 80094cc:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80094ce:	2300      	movs	r3, #0
 80094d0:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80094d2:	2300      	movs	r3, #0
 80094d4:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80094d6:	f7ff f9ca 	bl	800886e <LL_RCC_GetSysClkSource>
 80094da:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80094dc:	f7ff fab3 	bl	8008a46 <LL_RCC_PLL_GetMainSource>
 80094e0:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d005      	beq.n	80094f4 <HAL_RCC_GetSysClockFreq+0x2c>
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	2b0c      	cmp	r3, #12
 80094ec:	d139      	bne.n	8009562 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d136      	bne.n	8009562 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80094f4:	f7ff f96d 	bl	80087d2 <LL_RCC_MSI_IsEnabledRangeSelect>
 80094f8:	4603      	mov	r3, r0
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d115      	bne.n	800952a <HAL_RCC_GetSysClockFreq+0x62>
 80094fe:	f7ff f968 	bl	80087d2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8009502:	4603      	mov	r3, r0
 8009504:	2b01      	cmp	r3, #1
 8009506:	d106      	bne.n	8009516 <HAL_RCC_GetSysClockFreq+0x4e>
 8009508:	f7ff f973 	bl	80087f2 <LL_RCC_MSI_GetRange>
 800950c:	4603      	mov	r3, r0
 800950e:	0a1b      	lsrs	r3, r3, #8
 8009510:	f003 030f 	and.w	r3, r3, #15
 8009514:	e005      	b.n	8009522 <HAL_RCC_GetSysClockFreq+0x5a>
 8009516:	f7ff f977 	bl	8008808 <LL_RCC_MSI_GetRangeAfterStandby>
 800951a:	4603      	mov	r3, r0
 800951c:	0a1b      	lsrs	r3, r3, #8
 800951e:	f003 030f 	and.w	r3, r3, #15
 8009522:	4a36      	ldr	r2, [pc, #216]	; (80095fc <HAL_RCC_GetSysClockFreq+0x134>)
 8009524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009528:	e014      	b.n	8009554 <HAL_RCC_GetSysClockFreq+0x8c>
 800952a:	f7ff f952 	bl	80087d2 <LL_RCC_MSI_IsEnabledRangeSelect>
 800952e:	4603      	mov	r3, r0
 8009530:	2b01      	cmp	r3, #1
 8009532:	d106      	bne.n	8009542 <HAL_RCC_GetSysClockFreq+0x7a>
 8009534:	f7ff f95d 	bl	80087f2 <LL_RCC_MSI_GetRange>
 8009538:	4603      	mov	r3, r0
 800953a:	091b      	lsrs	r3, r3, #4
 800953c:	f003 030f 	and.w	r3, r3, #15
 8009540:	e005      	b.n	800954e <HAL_RCC_GetSysClockFreq+0x86>
 8009542:	f7ff f961 	bl	8008808 <LL_RCC_MSI_GetRangeAfterStandby>
 8009546:	4603      	mov	r3, r0
 8009548:	091b      	lsrs	r3, r3, #4
 800954a:	f003 030f 	and.w	r3, r3, #15
 800954e:	4a2b      	ldr	r2, [pc, #172]	; (80095fc <HAL_RCC_GetSysClockFreq+0x134>)
 8009550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009554:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d115      	bne.n	8009588 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009560:	e012      	b.n	8009588 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	2b04      	cmp	r3, #4
 8009566:	d102      	bne.n	800956e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009568:	4b25      	ldr	r3, [pc, #148]	; (8009600 <HAL_RCC_GetSysClockFreq+0x138>)
 800956a:	617b      	str	r3, [r7, #20]
 800956c:	e00c      	b.n	8009588 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	2b08      	cmp	r3, #8
 8009572:	d109      	bne.n	8009588 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8009574:	f7ff f840 	bl	80085f8 <LL_RCC_HSE_IsEnabledDiv2>
 8009578:	4603      	mov	r3, r0
 800957a:	2b01      	cmp	r3, #1
 800957c:	d102      	bne.n	8009584 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800957e:	4b20      	ldr	r3, [pc, #128]	; (8009600 <HAL_RCC_GetSysClockFreq+0x138>)
 8009580:	617b      	str	r3, [r7, #20]
 8009582:	e001      	b.n	8009588 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8009584:	4b1f      	ldr	r3, [pc, #124]	; (8009604 <HAL_RCC_GetSysClockFreq+0x13c>)
 8009586:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009588:	f7ff f971 	bl	800886e <LL_RCC_GetSysClkSource>
 800958c:	4603      	mov	r3, r0
 800958e:	2b0c      	cmp	r3, #12
 8009590:	d12f      	bne.n	80095f2 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8009592:	f7ff fa58 	bl	8008a46 <LL_RCC_PLL_GetMainSource>
 8009596:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2b02      	cmp	r3, #2
 800959c:	d003      	beq.n	80095a6 <HAL_RCC_GetSysClockFreq+0xde>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2b03      	cmp	r3, #3
 80095a2:	d003      	beq.n	80095ac <HAL_RCC_GetSysClockFreq+0xe4>
 80095a4:	e00d      	b.n	80095c2 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80095a6:	4b16      	ldr	r3, [pc, #88]	; (8009600 <HAL_RCC_GetSysClockFreq+0x138>)
 80095a8:	60fb      	str	r3, [r7, #12]
        break;
 80095aa:	e00d      	b.n	80095c8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80095ac:	f7ff f824 	bl	80085f8 <LL_RCC_HSE_IsEnabledDiv2>
 80095b0:	4603      	mov	r3, r0
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	d102      	bne.n	80095bc <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80095b6:	4b12      	ldr	r3, [pc, #72]	; (8009600 <HAL_RCC_GetSysClockFreq+0x138>)
 80095b8:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80095ba:	e005      	b.n	80095c8 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80095bc:	4b11      	ldr	r3, [pc, #68]	; (8009604 <HAL_RCC_GetSysClockFreq+0x13c>)
 80095be:	60fb      	str	r3, [r7, #12]
        break;
 80095c0:	e002      	b.n	80095c8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	60fb      	str	r3, [r7, #12]
        break;
 80095c6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80095c8:	f7ff fa1b 	bl	8008a02 <LL_RCC_PLL_GetN>
 80095cc:	4602      	mov	r2, r0
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	fb03 f402 	mul.w	r4, r3, r2
 80095d4:	f7ff fa2c 	bl	8008a30 <LL_RCC_PLL_GetDivider>
 80095d8:	4603      	mov	r3, r0
 80095da:	091b      	lsrs	r3, r3, #4
 80095dc:	3301      	adds	r3, #1
 80095de:	fbb4 f4f3 	udiv	r4, r4, r3
 80095e2:	f7ff fa1a 	bl	8008a1a <LL_RCC_PLL_GetR>
 80095e6:	4603      	mov	r3, r0
 80095e8:	0f5b      	lsrs	r3, r3, #29
 80095ea:	3301      	adds	r3, #1
 80095ec:	fbb4 f3f3 	udiv	r3, r4, r3
 80095f0:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80095f2:	697b      	ldr	r3, [r7, #20]
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	371c      	adds	r7, #28
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd90      	pop	{r4, r7, pc}
 80095fc:	0800ebdc 	.word	0x0800ebdc
 8009600:	00f42400 	.word	0x00f42400
 8009604:	01e84800 	.word	0x01e84800

08009608 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009608:	b598      	push	{r3, r4, r7, lr}
 800960a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800960c:	f7ff ff5c 	bl	80094c8 <HAL_RCC_GetSysClockFreq>
 8009610:	4604      	mov	r4, r0
 8009612:	f7ff f99b 	bl	800894c <LL_RCC_GetAHBPrescaler>
 8009616:	4603      	mov	r3, r0
 8009618:	091b      	lsrs	r3, r3, #4
 800961a:	f003 030f 	and.w	r3, r3, #15
 800961e:	4a03      	ldr	r2, [pc, #12]	; (800962c <HAL_RCC_GetHCLKFreq+0x24>)
 8009620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009624:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8009628:	4618      	mov	r0, r3
 800962a:	bd98      	pop	{r3, r4, r7, pc}
 800962c:	0800eb7c 	.word	0x0800eb7c

08009630 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009630:	b598      	push	{r3, r4, r7, lr}
 8009632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8009634:	f7ff ffe8 	bl	8009608 <HAL_RCC_GetHCLKFreq>
 8009638:	4604      	mov	r4, r0
 800963a:	f7ff f99f 	bl	800897c <LL_RCC_GetAPB1Prescaler>
 800963e:	4603      	mov	r3, r0
 8009640:	0a1b      	lsrs	r3, r3, #8
 8009642:	4a03      	ldr	r2, [pc, #12]	; (8009650 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009648:	fa24 f303 	lsr.w	r3, r4, r3
}
 800964c:	4618      	mov	r0, r3
 800964e:	bd98      	pop	{r3, r4, r7, pc}
 8009650:	0800ebbc 	.word	0x0800ebbc

08009654 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009654:	b598      	push	{r3, r4, r7, lr}
 8009656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8009658:	f7ff ffd6 	bl	8009608 <HAL_RCC_GetHCLKFreq>
 800965c:	4604      	mov	r4, r0
 800965e:	f7ff f998 	bl	8008992 <LL_RCC_GetAPB2Prescaler>
 8009662:	4603      	mov	r3, r0
 8009664:	0adb      	lsrs	r3, r3, #11
 8009666:	4a03      	ldr	r2, [pc, #12]	; (8009674 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800966c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8009670:	4618      	mov	r0, r3
 8009672:	bd98      	pop	{r3, r4, r7, pc}
 8009674:	0800ebbc 	.word	0x0800ebbc

08009678 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8009678:	b590      	push	{r4, r7, lr}
 800967a:	b085      	sub	sp, #20
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	091b      	lsrs	r3, r3, #4
 8009684:	f003 030f 	and.w	r3, r3, #15
 8009688:	4a10      	ldr	r2, [pc, #64]	; (80096cc <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800968a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800968e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8009690:	f7ff f967 	bl	8008962 <LL_RCC_GetAHB3Prescaler>
 8009694:	4603      	mov	r3, r0
 8009696:	091b      	lsrs	r3, r3, #4
 8009698:	f003 030f 	and.w	r3, r3, #15
 800969c:	4a0c      	ldr	r2, [pc, #48]	; (80096d0 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800969e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096a2:	68fa      	ldr	r2, [r7, #12]
 80096a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80096a8:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	4a09      	ldr	r2, [pc, #36]	; (80096d4 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80096ae:	fba2 2303 	umull	r2, r3, r2, r3
 80096b2:	0c9c      	lsrs	r4, r3, #18
 80096b4:	f7fe ff66 	bl	8008584 <HAL_PWREx_GetVoltageRange>
 80096b8:	4603      	mov	r3, r0
 80096ba:	4619      	mov	r1, r3
 80096bc:	4620      	mov	r0, r4
 80096be:	f000 f80b 	bl	80096d8 <RCC_SetFlashLatency>
 80096c2:	4603      	mov	r3, r0
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3714      	adds	r7, #20
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd90      	pop	{r4, r7, pc}
 80096cc:	0800ebdc 	.word	0x0800ebdc
 80096d0:	0800eb7c 	.word	0x0800eb7c
 80096d4:	431bde83 	.word	0x431bde83

080096d8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b08e      	sub	sp, #56	; 0x38
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80096e2:	4a3a      	ldr	r2, [pc, #232]	; (80097cc <RCC_SetFlashLatency+0xf4>)
 80096e4:	f107 0320 	add.w	r3, r7, #32
 80096e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80096ec:	6018      	str	r0, [r3, #0]
 80096ee:	3304      	adds	r3, #4
 80096f0:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80096f2:	4a37      	ldr	r2, [pc, #220]	; (80097d0 <RCC_SetFlashLatency+0xf8>)
 80096f4:	f107 0318 	add.w	r3, r7, #24
 80096f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80096fc:	6018      	str	r0, [r3, #0]
 80096fe:	3304      	adds	r3, #4
 8009700:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8009702:	4a34      	ldr	r2, [pc, #208]	; (80097d4 <RCC_SetFlashLatency+0xfc>)
 8009704:	f107 030c 	add.w	r3, r7, #12
 8009708:	ca07      	ldmia	r2, {r0, r1, r2}
 800970a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800970e:	2300      	movs	r3, #0
 8009710:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009718:	d11b      	bne.n	8009752 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800971a:	2300      	movs	r3, #0
 800971c:	633b      	str	r3, [r7, #48]	; 0x30
 800971e:	e014      	b.n	800974a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8009720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009722:	005b      	lsls	r3, r3, #1
 8009724:	3338      	adds	r3, #56	; 0x38
 8009726:	443b      	add	r3, r7
 8009728:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800972c:	461a      	mov	r2, r3
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	4293      	cmp	r3, r2
 8009732:	d807      	bhi.n	8009744 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8009734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009736:	009b      	lsls	r3, r3, #2
 8009738:	3338      	adds	r3, #56	; 0x38
 800973a:	443b      	add	r3, r7
 800973c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8009740:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009742:	e021      	b.n	8009788 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8009744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009746:	3301      	adds	r3, #1
 8009748:	633b      	str	r3, [r7, #48]	; 0x30
 800974a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800974c:	2b02      	cmp	r3, #2
 800974e:	d9e7      	bls.n	8009720 <RCC_SetFlashLatency+0x48>
 8009750:	e01a      	b.n	8009788 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8009752:	2300      	movs	r3, #0
 8009754:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009756:	e014      	b.n	8009782 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8009758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800975a:	005b      	lsls	r3, r3, #1
 800975c:	3338      	adds	r3, #56	; 0x38
 800975e:	443b      	add	r3, r7
 8009760:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8009764:	461a      	mov	r2, r3
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	4293      	cmp	r3, r2
 800976a:	d807      	bhi.n	800977c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800976c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800976e:	009b      	lsls	r3, r3, #2
 8009770:	3338      	adds	r3, #56	; 0x38
 8009772:	443b      	add	r3, r7
 8009774:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8009778:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800977a:	e005      	b.n	8009788 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800977c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800977e:	3301      	adds	r3, #1
 8009780:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009784:	2b02      	cmp	r3, #2
 8009786:	d9e7      	bls.n	8009758 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009788:	4b13      	ldr	r3, [pc, #76]	; (80097d8 <RCC_SetFlashLatency+0x100>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f023 0207 	bic.w	r2, r3, #7
 8009790:	4911      	ldr	r1, [pc, #68]	; (80097d8 <RCC_SetFlashLatency+0x100>)
 8009792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009794:	4313      	orrs	r3, r2
 8009796:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009798:	f7fd f98e 	bl	8006ab8 <HAL_GetTick>
 800979c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800979e:	e008      	b.n	80097b2 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80097a0:	f7fd f98a 	bl	8006ab8 <HAL_GetTick>
 80097a4:	4602      	mov	r2, r0
 80097a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a8:	1ad3      	subs	r3, r2, r3
 80097aa:	2b02      	cmp	r3, #2
 80097ac:	d901      	bls.n	80097b2 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80097ae:	2303      	movs	r3, #3
 80097b0:	e007      	b.n	80097c2 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80097b2:	4b09      	ldr	r3, [pc, #36]	; (80097d8 <RCC_SetFlashLatency+0x100>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f003 0307 	and.w	r3, r3, #7
 80097ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80097bc:	429a      	cmp	r2, r3
 80097be:	d1ef      	bne.n	80097a0 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80097c0:	2300      	movs	r3, #0
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3738      	adds	r7, #56	; 0x38
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	0800e65c 	.word	0x0800e65c
 80097d0:	0800e664 	.word	0x0800e664
 80097d4:	0800e66c 	.word	0x0800e66c
 80097d8:	58004000 	.word	0x58004000

080097dc <LL_RCC_LSE_IsReady>:
{
 80097dc:	b480      	push	{r7}
 80097de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80097e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097e8:	f003 0302 	and.w	r3, r3, #2
 80097ec:	2b02      	cmp	r3, #2
 80097ee:	d101      	bne.n	80097f4 <LL_RCC_LSE_IsReady+0x18>
 80097f0:	2301      	movs	r3, #1
 80097f2:	e000      	b.n	80097f6 <LL_RCC_LSE_IsReady+0x1a>
 80097f4:	2300      	movs	r3, #0
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bc80      	pop	{r7}
 80097fc:	4770      	bx	lr

080097fe <LL_RCC_SetUSARTClockSource>:
{
 80097fe:	b480      	push	{r7}
 8009800:	b083      	sub	sp, #12
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8009806:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800980a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	0c1b      	lsrs	r3, r3, #16
 8009812:	43db      	mvns	r3, r3
 8009814:	401a      	ands	r2, r3
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	b29b      	uxth	r3, r3
 800981a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800981e:	4313      	orrs	r3, r2
 8009820:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009824:	bf00      	nop
 8009826:	370c      	adds	r7, #12
 8009828:	46bd      	mov	sp, r7
 800982a:	bc80      	pop	{r7}
 800982c:	4770      	bx	lr

0800982e <LL_RCC_SetI2SClockSource>:
{
 800982e:	b480      	push	{r7}
 8009830:	b083      	sub	sp, #12
 8009832:	af00      	add	r7, sp, #0
 8009834:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8009836:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800983a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800983e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009842:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	4313      	orrs	r3, r2
 800984a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800984e:	bf00      	nop
 8009850:	370c      	adds	r7, #12
 8009852:	46bd      	mov	sp, r7
 8009854:	bc80      	pop	{r7}
 8009856:	4770      	bx	lr

08009858 <LL_RCC_SetLPUARTClockSource>:
{
 8009858:	b480      	push	{r7}
 800985a:	b083      	sub	sp, #12
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8009860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009868:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800986c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	4313      	orrs	r3, r2
 8009874:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009878:	bf00      	nop
 800987a:	370c      	adds	r7, #12
 800987c:	46bd      	mov	sp, r7
 800987e:	bc80      	pop	{r7}
 8009880:	4770      	bx	lr

08009882 <LL_RCC_SetI2CClockSource>:
{
 8009882:	b480      	push	{r7}
 8009884:	b083      	sub	sp, #12
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800988a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800988e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	091b      	lsrs	r3, r3, #4
 8009896:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800989a:	43db      	mvns	r3, r3
 800989c:	401a      	ands	r2, r3
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	011b      	lsls	r3, r3, #4
 80098a2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80098a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80098aa:	4313      	orrs	r3, r2
 80098ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80098b0:	bf00      	nop
 80098b2:	370c      	adds	r7, #12
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bc80      	pop	{r7}
 80098b8:	4770      	bx	lr

080098ba <LL_RCC_SetLPTIMClockSource>:
{
 80098ba:	b480      	push	{r7}
 80098bc:	b083      	sub	sp, #12
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80098c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80098c6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	0c1b      	lsrs	r3, r3, #16
 80098ce:	041b      	lsls	r3, r3, #16
 80098d0:	43db      	mvns	r3, r3
 80098d2:	401a      	ands	r2, r3
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	041b      	lsls	r3, r3, #16
 80098d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80098dc:	4313      	orrs	r3, r2
 80098de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80098e2:	bf00      	nop
 80098e4:	370c      	adds	r7, #12
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bc80      	pop	{r7}
 80098ea:	4770      	bx	lr

080098ec <LL_RCC_SetRNGClockSource>:
{
 80098ec:	b480      	push	{r7}
 80098ee:	b083      	sub	sp, #12
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80098f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80098f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098fc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8009900:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	4313      	orrs	r3, r2
 8009908:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800990c:	bf00      	nop
 800990e:	370c      	adds	r7, #12
 8009910:	46bd      	mov	sp, r7
 8009912:	bc80      	pop	{r7}
 8009914:	4770      	bx	lr

08009916 <LL_RCC_SetADCClockSource>:
{
 8009916:	b480      	push	{r7}
 8009918:	b083      	sub	sp, #12
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800991e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009926:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800992a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	4313      	orrs	r3, r2
 8009932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009936:	bf00      	nop
 8009938:	370c      	adds	r7, #12
 800993a:	46bd      	mov	sp, r7
 800993c:	bc80      	pop	{r7}
 800993e:	4770      	bx	lr

08009940 <LL_RCC_SetRTCClockSource>:
{
 8009940:	b480      	push	{r7}
 8009942:	b083      	sub	sp, #12
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8009948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800994c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009950:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009954:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	4313      	orrs	r3, r2
 800995c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8009960:	bf00      	nop
 8009962:	370c      	adds	r7, #12
 8009964:	46bd      	mov	sp, r7
 8009966:	bc80      	pop	{r7}
 8009968:	4770      	bx	lr

0800996a <LL_RCC_GetRTCClockSource>:
{
 800996a:	b480      	push	{r7}
 800996c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800996e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009976:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800997a:	4618      	mov	r0, r3
 800997c:	46bd      	mov	sp, r7
 800997e:	bc80      	pop	{r7}
 8009980:	4770      	bx	lr

08009982 <LL_RCC_ForceBackupDomainReset>:
{
 8009982:	b480      	push	{r7}
 8009984:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8009986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800998a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800998e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009992:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009996:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800999a:	bf00      	nop
 800999c:	46bd      	mov	sp, r7
 800999e:	bc80      	pop	{r7}
 80099a0:	4770      	bx	lr

080099a2 <LL_RCC_ReleaseBackupDomainReset>:
{
 80099a2:	b480      	push	{r7}
 80099a4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80099a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80099aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80099b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80099ba:	bf00      	nop
 80099bc:	46bd      	mov	sp, r7
 80099be:	bc80      	pop	{r7}
 80099c0:	4770      	bx	lr
	...

080099c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b086      	sub	sp, #24
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80099cc:	2300      	movs	r3, #0
 80099ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80099d0:	2300      	movs	r3, #0
 80099d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80099d4:	2300      	movs	r3, #0
 80099d6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d058      	beq.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80099e4:	f7fe fdc0 	bl	8008568 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80099e8:	f7fd f866 	bl	8006ab8 <HAL_GetTick>
 80099ec:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80099ee:	e009      	b.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80099f0:	f7fd f862 	bl	8006ab8 <HAL_GetTick>
 80099f4:	4602      	mov	r2, r0
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	1ad3      	subs	r3, r2, r3
 80099fa:	2b02      	cmp	r3, #2
 80099fc:	d902      	bls.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80099fe:	2303      	movs	r3, #3
 8009a00:	74fb      	strb	r3, [r7, #19]
        break;
 8009a02:	e006      	b.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8009a04:	4b7b      	ldr	r3, [pc, #492]	; (8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a10:	d1ee      	bne.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8009a12:	7cfb      	ldrb	r3, [r7, #19]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d13c      	bne.n	8009a92 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8009a18:	f7ff ffa7 	bl	800996a <LL_RCC_GetRTCClockSource>
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d00f      	beq.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a32:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009a34:	f7ff ffa5 	bl	8009982 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009a38:	f7ff ffb3 	bl	80099a2 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009a3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	f003 0302 	and.w	r3, r3, #2
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d014      	beq.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a50:	f7fd f832 	bl	8006ab8 <HAL_GetTick>
 8009a54:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8009a56:	e00b      	b.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a58:	f7fd f82e 	bl	8006ab8 <HAL_GetTick>
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	1ad3      	subs	r3, r2, r3
 8009a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d902      	bls.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8009a6a:	2303      	movs	r3, #3
 8009a6c:	74fb      	strb	r3, [r7, #19]
            break;
 8009a6e:	e004      	b.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8009a70:	f7ff feb4 	bl	80097dc <LL_RCC_LSE_IsReady>
 8009a74:	4603      	mov	r3, r0
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	d1ee      	bne.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8009a7a:	7cfb      	ldrb	r3, [r7, #19]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d105      	bne.n	8009a8c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a84:	4618      	mov	r0, r3
 8009a86:	f7ff ff5b 	bl	8009940 <LL_RCC_SetRTCClockSource>
 8009a8a:	e004      	b.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009a8c:	7cfb      	ldrb	r3, [r7, #19]
 8009a8e:	74bb      	strb	r3, [r7, #18]
 8009a90:	e001      	b.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a92:	7cfb      	ldrb	r3, [r7, #19]
 8009a94:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f003 0301 	and.w	r3, r3, #1
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d004      	beq.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	685b      	ldr	r3, [r3, #4]
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f7ff fea9 	bl	80097fe <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f003 0302 	and.w	r3, r3, #2
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d004      	beq.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	4618      	mov	r0, r3
 8009abe:	f7ff fe9e 	bl	80097fe <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f003 0320 	and.w	r3, r3, #32
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d004      	beq.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	691b      	ldr	r3, [r3, #16]
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f7ff fec0 	bl	8009858 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d004      	beq.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6a1b      	ldr	r3, [r3, #32]
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f7ff fee6 	bl	80098ba <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d004      	beq.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009afe:	4618      	mov	r0, r3
 8009b00:	f7ff fedb 	bl	80098ba <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d004      	beq.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7ff fed0 	bl	80098ba <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d004      	beq.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	695b      	ldr	r3, [r3, #20]
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f7ff fea9 	bl	8009882 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d004      	beq.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	699b      	ldr	r3, [r3, #24]
 8009b40:	4618      	mov	r0, r3
 8009b42:	f7ff fe9e 	bl	8009882 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d004      	beq.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	69db      	ldr	r3, [r3, #28]
 8009b56:	4618      	mov	r0, r3
 8009b58:	f7ff fe93 	bl	8009882 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f003 0310 	and.w	r3, r3, #16
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d011      	beq.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	68db      	ldr	r3, [r3, #12]
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f7ff fe5e 	bl	800982e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	68db      	ldr	r3, [r3, #12]
 8009b76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b7a:	d107      	bne.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8009b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009b80:	68db      	ldr	r3, [r3, #12]
 8009b82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009b86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009b8a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d010      	beq.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f7ff fea5 	bl	80098ec <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d107      	bne.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8009baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009bae:	68db      	ldr	r3, [r3, #12]
 8009bb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009bb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009bb8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d011      	beq.n	8009bea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f7ff fea3 	bl	8009916 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bd8:	d107      	bne.n	8009bea <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009bde:	68db      	ldr	r3, [r3, #12]
 8009be0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009be8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8009bea:	7cbb      	ldrb	r3, [r7, #18]
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3718      	adds	r7, #24
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}
 8009bf4:	58000400 	.word	0x58000400

08009bf8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b084      	sub	sp, #16
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009c00:	2301      	movs	r3, #1
 8009c02:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d068      	beq.n	8009cdc <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009c10:	b2db      	uxtb	r3, r3
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d106      	bne.n	8009c24 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f7f8 fa9e 	bl	8002160 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2202      	movs	r2, #2
 8009c28:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009c2c:	4b2e      	ldr	r3, [pc, #184]	; (8009ce8 <HAL_RTC_Init+0xf0>)
 8009c2e:	22ca      	movs	r2, #202	; 0xca
 8009c30:	625a      	str	r2, [r3, #36]	; 0x24
 8009c32:	4b2d      	ldr	r3, [pc, #180]	; (8009ce8 <HAL_RTC_Init+0xf0>)
 8009c34:	2253      	movs	r2, #83	; 0x53
 8009c36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 f99f 	bl	8009f7c <RTC_EnterInitMode>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8009c42:	7bfb      	ldrb	r3, [r7, #15]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d13f      	bne.n	8009cc8 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8009c48:	4b27      	ldr	r3, [pc, #156]	; (8009ce8 <HAL_RTC_Init+0xf0>)
 8009c4a:	699b      	ldr	r3, [r3, #24]
 8009c4c:	4a26      	ldr	r2, [pc, #152]	; (8009ce8 <HAL_RTC_Init+0xf0>)
 8009c4e:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8009c52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c56:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8009c58:	4b23      	ldr	r3, [pc, #140]	; (8009ce8 <HAL_RTC_Init+0xf0>)
 8009c5a:	699a      	ldr	r2, [r3, #24]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6859      	ldr	r1, [r3, #4]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	691b      	ldr	r3, [r3, #16]
 8009c64:	4319      	orrs	r1, r3
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	699b      	ldr	r3, [r3, #24]
 8009c6a:	430b      	orrs	r3, r1
 8009c6c:	491e      	ldr	r1, [pc, #120]	; (8009ce8 <HAL_RTC_Init+0xf0>)
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	68da      	ldr	r2, [r3, #12]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	689b      	ldr	r3, [r3, #8]
 8009c7a:	041b      	lsls	r3, r3, #16
 8009c7c:	491a      	ldr	r1, [pc, #104]	; (8009ce8 <HAL_RTC_Init+0xf0>)
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8009c82:	4b19      	ldr	r3, [pc, #100]	; (8009ce8 <HAL_RTC_Init+0xf0>)
 8009c84:	68db      	ldr	r3, [r3, #12]
 8009c86:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c92:	430b      	orrs	r3, r1
 8009c94:	4914      	ldr	r1, [pc, #80]	; (8009ce8 <HAL_RTC_Init+0xf0>)
 8009c96:	4313      	orrs	r3, r2
 8009c98:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f000 f9a2 	bl	8009fe4 <RTC_ExitInitMode>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8009ca4:	7bfb      	ldrb	r3, [r7, #15]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d10e      	bne.n	8009cc8 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 8009caa:	4b0f      	ldr	r3, [pc, #60]	; (8009ce8 <HAL_RTC_Init+0xf0>)
 8009cac:	699b      	ldr	r3, [r3, #24]
 8009cae:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6a19      	ldr	r1, [r3, #32]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	69db      	ldr	r3, [r3, #28]
 8009cba:	4319      	orrs	r1, r3
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	695b      	ldr	r3, [r3, #20]
 8009cc0:	430b      	orrs	r3, r1
 8009cc2:	4909      	ldr	r1, [pc, #36]	; (8009ce8 <HAL_RTC_Init+0xf0>)
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009cc8:	4b07      	ldr	r3, [pc, #28]	; (8009ce8 <HAL_RTC_Init+0xf0>)
 8009cca:	22ff      	movs	r2, #255	; 0xff
 8009ccc:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8009cce:	7bfb      	ldrb	r3, [r7, #15]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d103      	bne.n	8009cdc <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8009cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3710      	adds	r7, #16
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	40002800 	.word	0x40002800

08009cec <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009cec:	b590      	push	{r4, r7, lr}
 8009cee:	b087      	sub	sp, #28
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	60b9      	str	r1, [r7, #8]
 8009cf6:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	d101      	bne.n	8009d06 <HAL_RTC_SetTime+0x1a>
 8009d02:	2302      	movs	r3, #2
 8009d04:	e088      	b.n	8009e18 <HAL_RTC_SetTime+0x12c>
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2201      	movs	r2, #1
 8009d0a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2202      	movs	r2, #2
 8009d12:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009d16:	4b42      	ldr	r3, [pc, #264]	; (8009e20 <HAL_RTC_SetTime+0x134>)
 8009d18:	22ca      	movs	r2, #202	; 0xca
 8009d1a:	625a      	str	r2, [r3, #36]	; 0x24
 8009d1c:	4b40      	ldr	r3, [pc, #256]	; (8009e20 <HAL_RTC_SetTime+0x134>)
 8009d1e:	2253      	movs	r2, #83	; 0x53
 8009d20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009d22:	68f8      	ldr	r0, [r7, #12]
 8009d24:	f000 f92a 	bl	8009f7c <RTC_EnterInitMode>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009d2c:	7cfb      	ldrb	r3, [r7, #19]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d15e      	bne.n	8009df0 <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8009d32:	4b3b      	ldr	r3, [pc, #236]	; (8009e20 <HAL_RTC_SetTime+0x134>)
 8009d34:	68db      	ldr	r3, [r3, #12]
 8009d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d3e:	d057      	beq.n	8009df0 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d125      	bne.n	8009d92 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8009d46:	4b36      	ldr	r3, [pc, #216]	; (8009e20 <HAL_RTC_SetTime+0x134>)
 8009d48:	699b      	ldr	r3, [r3, #24]
 8009d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d102      	bne.n	8009d58 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	2200      	movs	r2, #0
 8009d56:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f000 f97f 	bl	800a060 <RTC_ByteToBcd2>
 8009d62:	4603      	mov	r3, r0
 8009d64:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	785b      	ldrb	r3, [r3, #1]
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f000 f978 	bl	800a060 <RTC_ByteToBcd2>
 8009d70:	4603      	mov	r3, r0
 8009d72:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009d74:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	789b      	ldrb	r3, [r3, #2]
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f000 f970 	bl	800a060 <RTC_ByteToBcd2>
 8009d80:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009d82:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	78db      	ldrb	r3, [r3, #3]
 8009d8a:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	617b      	str	r3, [r7, #20]
 8009d90:	e017      	b.n	8009dc2 <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8009d92:	4b23      	ldr	r3, [pc, #140]	; (8009e20 <HAL_RTC_SetTime+0x134>)
 8009d94:	699b      	ldr	r3, [r3, #24]
 8009d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d102      	bne.n	8009da4 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	2200      	movs	r2, #0
 8009da2:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	785b      	ldrb	r3, [r3, #1]
 8009dae:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009db0:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8009db2:	68ba      	ldr	r2, [r7, #8]
 8009db4:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009db6:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	78db      	ldrb	r3, [r3, #3]
 8009dbc:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8009dc2:	4a17      	ldr	r2, [pc, #92]	; (8009e20 <HAL_RTC_SetTime+0x134>)
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009dca:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009dce:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8009dd0:	4b13      	ldr	r3, [pc, #76]	; (8009e20 <HAL_RTC_SetTime+0x134>)
 8009dd2:	699b      	ldr	r3, [r3, #24]
 8009dd4:	4a12      	ldr	r2, [pc, #72]	; (8009e20 <HAL_RTC_SetTime+0x134>)
 8009dd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009dda:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8009ddc:	4b10      	ldr	r3, [pc, #64]	; (8009e20 <HAL_RTC_SetTime+0x134>)
 8009dde:	699a      	ldr	r2, [r3, #24]
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	68d9      	ldr	r1, [r3, #12]
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	691b      	ldr	r3, [r3, #16]
 8009de8:	430b      	orrs	r3, r1
 8009dea:	490d      	ldr	r1, [pc, #52]	; (8009e20 <HAL_RTC_SetTime+0x134>)
 8009dec:	4313      	orrs	r3, r2
 8009dee:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 8009df0:	68f8      	ldr	r0, [r7, #12]
 8009df2:	f000 f8f7 	bl	8009fe4 <RTC_ExitInitMode>
 8009df6:	4603      	mov	r3, r0
 8009df8:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009dfa:	4b09      	ldr	r3, [pc, #36]	; (8009e20 <HAL_RTC_SetTime+0x134>)
 8009dfc:	22ff      	movs	r2, #255	; 0xff
 8009dfe:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8009e00:	7cfb      	ldrb	r3, [r7, #19]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d103      	bne.n	8009e0e <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2201      	movs	r2, #1
 8009e0a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2200      	movs	r2, #0
 8009e12:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8009e16:	7cfb      	ldrb	r3, [r7, #19]
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	371c      	adds	r7, #28
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd90      	pop	{r4, r7, pc}
 8009e20:	40002800 	.word	0x40002800

08009e24 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009e24:	b590      	push	{r4, r7, lr}
 8009e26:	b087      	sub	sp, #28
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	60f8      	str	r0, [r7, #12]
 8009e2c:	60b9      	str	r1, [r7, #8]
 8009e2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	d101      	bne.n	8009e3e <HAL_RTC_SetDate+0x1a>
 8009e3a:	2302      	movs	r3, #2
 8009e3c:	e071      	b.n	8009f22 <HAL_RTC_SetDate+0xfe>
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2201      	movs	r2, #1
 8009e42:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	2202      	movs	r2, #2
 8009e4a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d10e      	bne.n	8009e72 <HAL_RTC_SetDate+0x4e>
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	785b      	ldrb	r3, [r3, #1]
 8009e58:	f003 0310 	and.w	r3, r3, #16
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d008      	beq.n	8009e72 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	785b      	ldrb	r3, [r3, #1]
 8009e64:	f023 0310 	bic.w	r3, r3, #16
 8009e68:	b2db      	uxtb	r3, r3
 8009e6a:	330a      	adds	r3, #10
 8009e6c:	b2da      	uxtb	r2, r3
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d11c      	bne.n	8009eb2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	78db      	ldrb	r3, [r3, #3]
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f000 f8ef 	bl	800a060 <RTC_ByteToBcd2>
 8009e82:	4603      	mov	r3, r0
 8009e84:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	785b      	ldrb	r3, [r3, #1]
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f000 f8e8 	bl	800a060 <RTC_ByteToBcd2>
 8009e90:	4603      	mov	r3, r0
 8009e92:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009e94:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	789b      	ldrb	r3, [r3, #2]
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f000 f8e0 	bl	800a060 <RTC_ByteToBcd2>
 8009ea0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009ea2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009eac:	4313      	orrs	r3, r2
 8009eae:	617b      	str	r3, [r7, #20]
 8009eb0:	e00e      	b.n	8009ed0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	78db      	ldrb	r3, [r3, #3]
 8009eb6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	785b      	ldrb	r3, [r3, #1]
 8009ebc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009ebe:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8009ec0:	68ba      	ldr	r2, [r7, #8]
 8009ec2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8009ec4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	781b      	ldrb	r3, [r3, #0]
 8009eca:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009ed0:	4b16      	ldr	r3, [pc, #88]	; (8009f2c <HAL_RTC_SetDate+0x108>)
 8009ed2:	22ca      	movs	r2, #202	; 0xca
 8009ed4:	625a      	str	r2, [r3, #36]	; 0x24
 8009ed6:	4b15      	ldr	r3, [pc, #84]	; (8009f2c <HAL_RTC_SetDate+0x108>)
 8009ed8:	2253      	movs	r2, #83	; 0x53
 8009eda:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009edc:	68f8      	ldr	r0, [r7, #12]
 8009ede:	f000 f84d 	bl	8009f7c <RTC_EnterInitMode>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009ee6:	7cfb      	ldrb	r3, [r7, #19]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d10b      	bne.n	8009f04 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8009eec:	4a0f      	ldr	r2, [pc, #60]	; (8009f2c <HAL_RTC_SetDate+0x108>)
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009ef4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009ef8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009efa:	68f8      	ldr	r0, [r7, #12]
 8009efc:	f000 f872 	bl	8009fe4 <RTC_ExitInitMode>
 8009f00:	4603      	mov	r3, r0
 8009f02:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f04:	4b09      	ldr	r3, [pc, #36]	; (8009f2c <HAL_RTC_SetDate+0x108>)
 8009f06:	22ff      	movs	r2, #255	; 0xff
 8009f08:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8009f0a:	7cfb      	ldrb	r3, [r7, #19]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d103      	bne.n	8009f18 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	2201      	movs	r2, #1
 8009f14:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8009f20:	7cfb      	ldrb	r3, [r7, #19]
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	371c      	adds	r7, #28
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd90      	pop	{r4, r7, pc}
 8009f2a:	bf00      	nop
 8009f2c:	40002800 	.word	0x40002800

08009f30 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8009f38:	4b0f      	ldr	r3, [pc, #60]	; (8009f78 <HAL_RTC_WaitForSynchro+0x48>)
 8009f3a:	68db      	ldr	r3, [r3, #12]
 8009f3c:	4a0e      	ldr	r2, [pc, #56]	; (8009f78 <HAL_RTC_WaitForSynchro+0x48>)
 8009f3e:	f023 0320 	bic.w	r3, r3, #32
 8009f42:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8009f44:	f7fc fdb8 	bl	8006ab8 <HAL_GetTick>
 8009f48:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8009f4a:	e009      	b.n	8009f60 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009f4c:	f7fc fdb4 	bl	8006ab8 <HAL_GetTick>
 8009f50:	4602      	mov	r2, r0
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	1ad3      	subs	r3, r2, r3
 8009f56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009f5a:	d901      	bls.n	8009f60 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8009f5c:	2303      	movs	r3, #3
 8009f5e:	e006      	b.n	8009f6e <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8009f60:	4b05      	ldr	r3, [pc, #20]	; (8009f78 <HAL_RTC_WaitForSynchro+0x48>)
 8009f62:	68db      	ldr	r3, [r3, #12]
 8009f64:	f003 0320 	and.w	r3, r3, #32
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d0ef      	beq.n	8009f4c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8009f6c:	2300      	movs	r3, #0
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3710      	adds	r7, #16
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}
 8009f76:	bf00      	nop
 8009f78:	40002800 	.word	0x40002800

08009f7c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b084      	sub	sp, #16
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009f84:	2300      	movs	r3, #0
 8009f86:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8009f88:	4b15      	ldr	r3, [pc, #84]	; (8009fe0 <RTC_EnterInitMode+0x64>)
 8009f8a:	68db      	ldr	r3, [r3, #12]
 8009f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d120      	bne.n	8009fd6 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009f94:	4b12      	ldr	r3, [pc, #72]	; (8009fe0 <RTC_EnterInitMode+0x64>)
 8009f96:	68db      	ldr	r3, [r3, #12]
 8009f98:	4a11      	ldr	r2, [pc, #68]	; (8009fe0 <RTC_EnterInitMode+0x64>)
 8009f9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f9e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8009fa0:	f7fc fd8a 	bl	8006ab8 <HAL_GetTick>
 8009fa4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009fa6:	e00d      	b.n	8009fc4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009fa8:	f7fc fd86 	bl	8006ab8 <HAL_GetTick>
 8009fac:	4602      	mov	r2, r0
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	1ad3      	subs	r3, r2, r3
 8009fb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009fb6:	d905      	bls.n	8009fc4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009fb8:	2303      	movs	r3, #3
 8009fba:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2203      	movs	r2, #3
 8009fc0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009fc4:	4b06      	ldr	r3, [pc, #24]	; (8009fe0 <RTC_EnterInitMode+0x64>)
 8009fc6:	68db      	ldr	r3, [r3, #12]
 8009fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d102      	bne.n	8009fd6 <RTC_EnterInitMode+0x5a>
 8009fd0:	7bfb      	ldrb	r3, [r7, #15]
 8009fd2:	2b03      	cmp	r3, #3
 8009fd4:	d1e8      	bne.n	8009fa8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8009fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3710      	adds	r7, #16
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}
 8009fe0:	40002800 	.word	0x40002800

08009fe4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009fec:	2300      	movs	r3, #0
 8009fee:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009ff0:	4b1a      	ldr	r3, [pc, #104]	; (800a05c <RTC_ExitInitMode+0x78>)
 8009ff2:	68db      	ldr	r3, [r3, #12]
 8009ff4:	4a19      	ldr	r2, [pc, #100]	; (800a05c <RTC_ExitInitMode+0x78>)
 8009ff6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ffa:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009ffc:	4b17      	ldr	r3, [pc, #92]	; (800a05c <RTC_ExitInitMode+0x78>)
 8009ffe:	699b      	ldr	r3, [r3, #24]
 800a000:	f003 0320 	and.w	r3, r3, #32
 800a004:	2b00      	cmp	r3, #0
 800a006:	d10c      	bne.n	800a022 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f7ff ff91 	bl	8009f30 <HAL_RTC_WaitForSynchro>
 800a00e:	4603      	mov	r3, r0
 800a010:	2b00      	cmp	r3, #0
 800a012:	d01e      	beq.n	800a052 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2203      	movs	r2, #3
 800a018:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800a01c:	2303      	movs	r3, #3
 800a01e:	73fb      	strb	r3, [r7, #15]
 800a020:	e017      	b.n	800a052 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a022:	4b0e      	ldr	r3, [pc, #56]	; (800a05c <RTC_ExitInitMode+0x78>)
 800a024:	699b      	ldr	r3, [r3, #24]
 800a026:	4a0d      	ldr	r2, [pc, #52]	; (800a05c <RTC_ExitInitMode+0x78>)
 800a028:	f023 0320 	bic.w	r3, r3, #32
 800a02c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f7ff ff7e 	bl	8009f30 <HAL_RTC_WaitForSynchro>
 800a034:	4603      	mov	r3, r0
 800a036:	2b00      	cmp	r3, #0
 800a038:	d005      	beq.n	800a046 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2203      	movs	r2, #3
 800a03e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800a042:	2303      	movs	r3, #3
 800a044:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a046:	4b05      	ldr	r3, [pc, #20]	; (800a05c <RTC_ExitInitMode+0x78>)
 800a048:	699b      	ldr	r3, [r3, #24]
 800a04a:	4a04      	ldr	r2, [pc, #16]	; (800a05c <RTC_ExitInitMode+0x78>)
 800a04c:	f043 0320 	orr.w	r3, r3, #32
 800a050:	6193      	str	r3, [r2, #24]
  }

  return status;
 800a052:	7bfb      	ldrb	r3, [r7, #15]
}
 800a054:	4618      	mov	r0, r3
 800a056:	3710      	adds	r7, #16
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}
 800a05c:	40002800 	.word	0x40002800

0800a060 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a060:	b480      	push	{r7}
 800a062:	b085      	sub	sp, #20
 800a064:	af00      	add	r7, sp, #0
 800a066:	4603      	mov	r3, r0
 800a068:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a06a:	2300      	movs	r3, #0
 800a06c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800a06e:	79fb      	ldrb	r3, [r7, #7]
 800a070:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800a072:	e005      	b.n	800a080 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	3301      	adds	r3, #1
 800a078:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800a07a:	7afb      	ldrb	r3, [r7, #11]
 800a07c:	3b0a      	subs	r3, #10
 800a07e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 800a080:	7afb      	ldrb	r3, [r7, #11]
 800a082:	2b09      	cmp	r3, #9
 800a084:	d8f6      	bhi.n	800a074 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	011b      	lsls	r3, r3, #4
 800a08c:	b2da      	uxtb	r2, r3
 800a08e:	7afb      	ldrb	r3, [r7, #11]
 800a090:	4313      	orrs	r3, r2
 800a092:	b2db      	uxtb	r3, r3
}
 800a094:	4618      	mov	r0, r3
 800a096:	3714      	adds	r7, #20
 800a098:	46bd      	mov	sp, r7
 800a09a:	bc80      	pop	{r7}
 800a09c:	4770      	bx	lr

0800a09e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a09e:	b580      	push	{r7, lr}
 800a0a0:	b082      	sub	sp, #8
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d101      	bne.n	800a0b0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	e049      	b.n	800a144 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0b6:	b2db      	uxtb	r3, r3
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d106      	bne.n	800a0ca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f7f8 f877 	bl	80021b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2202      	movs	r2, #2
 800a0ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	3304      	adds	r3, #4
 800a0da:	4619      	mov	r1, r3
 800a0dc:	4610      	mov	r0, r2
 800a0de:	f000 fa4b 	bl	800a578 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2201      	movs	r2, #1
 800a0e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2201      	movs	r2, #1
 800a0ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2201      	movs	r2, #1
 800a0fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2201      	movs	r2, #1
 800a106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2201      	movs	r2, #1
 800a10e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2201      	movs	r2, #1
 800a116:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2201      	movs	r2, #1
 800a11e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2201      	movs	r2, #1
 800a126:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2201      	movs	r2, #1
 800a12e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2201      	movs	r2, #1
 800a136:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2201      	movs	r2, #1
 800a13e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a142:	2300      	movs	r3, #0
}
 800a144:	4618      	mov	r0, r3
 800a146:	3708      	adds	r7, #8
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b082      	sub	sp, #8
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	691b      	ldr	r3, [r3, #16]
 800a15a:	f003 0302 	and.w	r3, r3, #2
 800a15e:	2b02      	cmp	r3, #2
 800a160:	d122      	bne.n	800a1a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	68db      	ldr	r3, [r3, #12]
 800a168:	f003 0302 	and.w	r3, r3, #2
 800a16c:	2b02      	cmp	r3, #2
 800a16e:	d11b      	bne.n	800a1a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f06f 0202 	mvn.w	r2, #2
 800a178:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2201      	movs	r2, #1
 800a17e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	699b      	ldr	r3, [r3, #24]
 800a186:	f003 0303 	and.w	r3, r3, #3
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d003      	beq.n	800a196 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f000 f9d6 	bl	800a540 <HAL_TIM_IC_CaptureCallback>
 800a194:	e005      	b.n	800a1a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f000 f9c9 	bl	800a52e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f000 f9d8 	bl	800a552 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	691b      	ldr	r3, [r3, #16]
 800a1ae:	f003 0304 	and.w	r3, r3, #4
 800a1b2:	2b04      	cmp	r3, #4
 800a1b4:	d122      	bne.n	800a1fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	68db      	ldr	r3, [r3, #12]
 800a1bc:	f003 0304 	and.w	r3, r3, #4
 800a1c0:	2b04      	cmp	r3, #4
 800a1c2:	d11b      	bne.n	800a1fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f06f 0204 	mvn.w	r2, #4
 800a1cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2202      	movs	r2, #2
 800a1d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	699b      	ldr	r3, [r3, #24]
 800a1da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d003      	beq.n	800a1ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f000 f9ac 	bl	800a540 <HAL_TIM_IC_CaptureCallback>
 800a1e8:	e005      	b.n	800a1f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f000 f99f 	bl	800a52e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f000 f9ae 	bl	800a552 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	691b      	ldr	r3, [r3, #16]
 800a202:	f003 0308 	and.w	r3, r3, #8
 800a206:	2b08      	cmp	r3, #8
 800a208:	d122      	bne.n	800a250 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	68db      	ldr	r3, [r3, #12]
 800a210:	f003 0308 	and.w	r3, r3, #8
 800a214:	2b08      	cmp	r3, #8
 800a216:	d11b      	bne.n	800a250 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f06f 0208 	mvn.w	r2, #8
 800a220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2204      	movs	r2, #4
 800a226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	69db      	ldr	r3, [r3, #28]
 800a22e:	f003 0303 	and.w	r3, r3, #3
 800a232:	2b00      	cmp	r3, #0
 800a234:	d003      	beq.n	800a23e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f000 f982 	bl	800a540 <HAL_TIM_IC_CaptureCallback>
 800a23c:	e005      	b.n	800a24a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f000 f975 	bl	800a52e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f000 f984 	bl	800a552 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2200      	movs	r2, #0
 800a24e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	691b      	ldr	r3, [r3, #16]
 800a256:	f003 0310 	and.w	r3, r3, #16
 800a25a:	2b10      	cmp	r3, #16
 800a25c:	d122      	bne.n	800a2a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	68db      	ldr	r3, [r3, #12]
 800a264:	f003 0310 	and.w	r3, r3, #16
 800a268:	2b10      	cmp	r3, #16
 800a26a:	d11b      	bne.n	800a2a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f06f 0210 	mvn.w	r2, #16
 800a274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2208      	movs	r2, #8
 800a27a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	69db      	ldr	r3, [r3, #28]
 800a282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a286:	2b00      	cmp	r3, #0
 800a288:	d003      	beq.n	800a292 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 f958 	bl	800a540 <HAL_TIM_IC_CaptureCallback>
 800a290:	e005      	b.n	800a29e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 f94b 	bl	800a52e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f000 f95a 	bl	800a552 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	691b      	ldr	r3, [r3, #16]
 800a2aa:	f003 0301 	and.w	r3, r3, #1
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	d10e      	bne.n	800a2d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	68db      	ldr	r3, [r3, #12]
 800a2b8:	f003 0301 	and.w	r3, r3, #1
 800a2bc:	2b01      	cmp	r3, #1
 800a2be:	d107      	bne.n	800a2d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f06f 0201 	mvn.w	r2, #1
 800a2c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 f926 	bl	800a51c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	691b      	ldr	r3, [r3, #16]
 800a2d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2da:	2b80      	cmp	r3, #128	; 0x80
 800a2dc:	d10e      	bne.n	800a2fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	68db      	ldr	r3, [r3, #12]
 800a2e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2e8:	2b80      	cmp	r3, #128	; 0x80
 800a2ea:	d107      	bne.n	800a2fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a2f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 fa9f 	bl	800a83a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	691b      	ldr	r3, [r3, #16]
 800a302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a30a:	d10e      	bne.n	800a32a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	68db      	ldr	r3, [r3, #12]
 800a312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a316:	2b80      	cmp	r3, #128	; 0x80
 800a318:	d107      	bne.n	800a32a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f000 fa91 	bl	800a84c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	691b      	ldr	r3, [r3, #16]
 800a330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a334:	2b40      	cmp	r3, #64	; 0x40
 800a336:	d10e      	bne.n	800a356 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	68db      	ldr	r3, [r3, #12]
 800a33e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a342:	2b40      	cmp	r3, #64	; 0x40
 800a344:	d107      	bne.n	800a356 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a34e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f000 f907 	bl	800a564 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	691b      	ldr	r3, [r3, #16]
 800a35c:	f003 0320 	and.w	r3, r3, #32
 800a360:	2b20      	cmp	r3, #32
 800a362:	d10e      	bne.n	800a382 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	68db      	ldr	r3, [r3, #12]
 800a36a:	f003 0320 	and.w	r3, r3, #32
 800a36e:	2b20      	cmp	r3, #32
 800a370:	d107      	bne.n	800a382 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f06f 0220 	mvn.w	r2, #32
 800a37a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f000 fa53 	bl	800a828 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a382:	bf00      	nop
 800a384:	3708      	adds	r7, #8
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}

0800a38a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a38a:	b580      	push	{r7, lr}
 800a38c:	b084      	sub	sp, #16
 800a38e:	af00      	add	r7, sp, #0
 800a390:	6078      	str	r0, [r7, #4]
 800a392:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a394:	2300      	movs	r3, #0
 800a396:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a39e:	2b01      	cmp	r3, #1
 800a3a0:	d101      	bne.n	800a3a6 <HAL_TIM_ConfigClockSource+0x1c>
 800a3a2:	2302      	movs	r3, #2
 800a3a4:	e0b6      	b.n	800a514 <HAL_TIM_ConfigClockSource+0x18a>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2201      	movs	r2, #1
 800a3aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2202      	movs	r2, #2
 800a3b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	689b      	ldr	r3, [r3, #8]
 800a3bc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800a3c4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a3c8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a3d0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	68ba      	ldr	r2, [r7, #8]
 800a3d8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3e2:	d03e      	beq.n	800a462 <HAL_TIM_ConfigClockSource+0xd8>
 800a3e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3e8:	f200 8087 	bhi.w	800a4fa <HAL_TIM_ConfigClockSource+0x170>
 800a3ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3f0:	f000 8086 	beq.w	800a500 <HAL_TIM_ConfigClockSource+0x176>
 800a3f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3f8:	d87f      	bhi.n	800a4fa <HAL_TIM_ConfigClockSource+0x170>
 800a3fa:	2b70      	cmp	r3, #112	; 0x70
 800a3fc:	d01a      	beq.n	800a434 <HAL_TIM_ConfigClockSource+0xaa>
 800a3fe:	2b70      	cmp	r3, #112	; 0x70
 800a400:	d87b      	bhi.n	800a4fa <HAL_TIM_ConfigClockSource+0x170>
 800a402:	2b60      	cmp	r3, #96	; 0x60
 800a404:	d050      	beq.n	800a4a8 <HAL_TIM_ConfigClockSource+0x11e>
 800a406:	2b60      	cmp	r3, #96	; 0x60
 800a408:	d877      	bhi.n	800a4fa <HAL_TIM_ConfigClockSource+0x170>
 800a40a:	2b50      	cmp	r3, #80	; 0x50
 800a40c:	d03c      	beq.n	800a488 <HAL_TIM_ConfigClockSource+0xfe>
 800a40e:	2b50      	cmp	r3, #80	; 0x50
 800a410:	d873      	bhi.n	800a4fa <HAL_TIM_ConfigClockSource+0x170>
 800a412:	2b40      	cmp	r3, #64	; 0x40
 800a414:	d058      	beq.n	800a4c8 <HAL_TIM_ConfigClockSource+0x13e>
 800a416:	2b40      	cmp	r3, #64	; 0x40
 800a418:	d86f      	bhi.n	800a4fa <HAL_TIM_ConfigClockSource+0x170>
 800a41a:	2b30      	cmp	r3, #48	; 0x30
 800a41c:	d064      	beq.n	800a4e8 <HAL_TIM_ConfigClockSource+0x15e>
 800a41e:	2b30      	cmp	r3, #48	; 0x30
 800a420:	d86b      	bhi.n	800a4fa <HAL_TIM_ConfigClockSource+0x170>
 800a422:	2b20      	cmp	r3, #32
 800a424:	d060      	beq.n	800a4e8 <HAL_TIM_ConfigClockSource+0x15e>
 800a426:	2b20      	cmp	r3, #32
 800a428:	d867      	bhi.n	800a4fa <HAL_TIM_ConfigClockSource+0x170>
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d05c      	beq.n	800a4e8 <HAL_TIM_ConfigClockSource+0x15e>
 800a42e:	2b10      	cmp	r3, #16
 800a430:	d05a      	beq.n	800a4e8 <HAL_TIM_ConfigClockSource+0x15e>
 800a432:	e062      	b.n	800a4fa <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6818      	ldr	r0, [r3, #0]
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	6899      	ldr	r1, [r3, #8]
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	685a      	ldr	r2, [r3, #4]
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	68db      	ldr	r3, [r3, #12]
 800a444:	f000 f973 	bl	800a72e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	689b      	ldr	r3, [r3, #8]
 800a44e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a456:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	68ba      	ldr	r2, [r7, #8]
 800a45e:	609a      	str	r2, [r3, #8]
      break;
 800a460:	e04f      	b.n	800a502 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6818      	ldr	r0, [r3, #0]
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	6899      	ldr	r1, [r3, #8]
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	685a      	ldr	r2, [r3, #4]
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	68db      	ldr	r3, [r3, #12]
 800a472:	f000 f95c 	bl	800a72e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	689a      	ldr	r2, [r3, #8]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a484:	609a      	str	r2, [r3, #8]
      break;
 800a486:	e03c      	b.n	800a502 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6818      	ldr	r0, [r3, #0]
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	6859      	ldr	r1, [r3, #4]
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	68db      	ldr	r3, [r3, #12]
 800a494:	461a      	mov	r2, r3
 800a496:	f000 f8d1 	bl	800a63c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	2150      	movs	r1, #80	; 0x50
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f000 f928 	bl	800a6f6 <TIM_ITRx_SetConfig>
      break;
 800a4a6:	e02c      	b.n	800a502 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6818      	ldr	r0, [r3, #0]
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	6859      	ldr	r1, [r3, #4]
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	68db      	ldr	r3, [r3, #12]
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	f000 f8ef 	bl	800a698 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	2160      	movs	r1, #96	; 0x60
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f000 f918 	bl	800a6f6 <TIM_ITRx_SetConfig>
      break;
 800a4c6:	e01c      	b.n	800a502 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6818      	ldr	r0, [r3, #0]
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	6859      	ldr	r1, [r3, #4]
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	68db      	ldr	r3, [r3, #12]
 800a4d4:	461a      	mov	r2, r3
 800a4d6:	f000 f8b1 	bl	800a63c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	2140      	movs	r1, #64	; 0x40
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f000 f908 	bl	800a6f6 <TIM_ITRx_SetConfig>
      break;
 800a4e6:	e00c      	b.n	800a502 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681a      	ldr	r2, [r3, #0]
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4619      	mov	r1, r3
 800a4f2:	4610      	mov	r0, r2
 800a4f4:	f000 f8ff 	bl	800a6f6 <TIM_ITRx_SetConfig>
      break;
 800a4f8:	e003      	b.n	800a502 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	73fb      	strb	r3, [r7, #15]
      break;
 800a4fe:	e000      	b.n	800a502 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800a500:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2201      	movs	r2, #1
 800a506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2200      	movs	r2, #0
 800a50e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a512:	7bfb      	ldrb	r3, [r7, #15]
}
 800a514:	4618      	mov	r0, r3
 800a516:	3710      	adds	r7, #16
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}

0800a51c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b083      	sub	sp, #12
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a524:	bf00      	nop
 800a526:	370c      	adds	r7, #12
 800a528:	46bd      	mov	sp, r7
 800a52a:	bc80      	pop	{r7}
 800a52c:	4770      	bx	lr

0800a52e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a52e:	b480      	push	{r7}
 800a530:	b083      	sub	sp, #12
 800a532:	af00      	add	r7, sp, #0
 800a534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a536:	bf00      	nop
 800a538:	370c      	adds	r7, #12
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bc80      	pop	{r7}
 800a53e:	4770      	bx	lr

0800a540 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a540:	b480      	push	{r7}
 800a542:	b083      	sub	sp, #12
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a548:	bf00      	nop
 800a54a:	370c      	adds	r7, #12
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bc80      	pop	{r7}
 800a550:	4770      	bx	lr

0800a552 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a552:	b480      	push	{r7}
 800a554:	b083      	sub	sp, #12
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a55a:	bf00      	nop
 800a55c:	370c      	adds	r7, #12
 800a55e:	46bd      	mov	sp, r7
 800a560:	bc80      	pop	{r7}
 800a562:	4770      	bx	lr

0800a564 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a564:	b480      	push	{r7}
 800a566:	b083      	sub	sp, #12
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a56c:	bf00      	nop
 800a56e:	370c      	adds	r7, #12
 800a570:	46bd      	mov	sp, r7
 800a572:	bc80      	pop	{r7}
 800a574:	4770      	bx	lr
	...

0800a578 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a578:	b480      	push	{r7}
 800a57a:	b085      	sub	sp, #20
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	4a29      	ldr	r2, [pc, #164]	; (800a630 <TIM_Base_SetConfig+0xb8>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d003      	beq.n	800a598 <TIM_Base_SetConfig+0x20>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a596:	d108      	bne.n	800a5aa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a59e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	68fa      	ldr	r2, [r7, #12]
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	4a20      	ldr	r2, [pc, #128]	; (800a630 <TIM_Base_SetConfig+0xb8>)
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d00b      	beq.n	800a5ca <TIM_Base_SetConfig+0x52>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5b8:	d007      	beq.n	800a5ca <TIM_Base_SetConfig+0x52>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	4a1d      	ldr	r2, [pc, #116]	; (800a634 <TIM_Base_SetConfig+0xbc>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d003      	beq.n	800a5ca <TIM_Base_SetConfig+0x52>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	4a1c      	ldr	r2, [pc, #112]	; (800a638 <TIM_Base_SetConfig+0xc0>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d108      	bne.n	800a5dc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	68db      	ldr	r3, [r3, #12]
 800a5d6:	68fa      	ldr	r2, [r7, #12]
 800a5d8:	4313      	orrs	r3, r2
 800a5da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	695b      	ldr	r3, [r3, #20]
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	68fa      	ldr	r2, [r7, #12]
 800a5ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	689a      	ldr	r2, [r3, #8]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	681a      	ldr	r2, [r3, #0]
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	4a0b      	ldr	r2, [pc, #44]	; (800a630 <TIM_Base_SetConfig+0xb8>)
 800a604:	4293      	cmp	r3, r2
 800a606:	d007      	beq.n	800a618 <TIM_Base_SetConfig+0xa0>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	4a0a      	ldr	r2, [pc, #40]	; (800a634 <TIM_Base_SetConfig+0xbc>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d003      	beq.n	800a618 <TIM_Base_SetConfig+0xa0>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	4a09      	ldr	r2, [pc, #36]	; (800a638 <TIM_Base_SetConfig+0xc0>)
 800a614:	4293      	cmp	r3, r2
 800a616:	d103      	bne.n	800a620 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	691a      	ldr	r2, [r3, #16]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2201      	movs	r2, #1
 800a624:	615a      	str	r2, [r3, #20]
}
 800a626:	bf00      	nop
 800a628:	3714      	adds	r7, #20
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bc80      	pop	{r7}
 800a62e:	4770      	bx	lr
 800a630:	40012c00 	.word	0x40012c00
 800a634:	40014400 	.word	0x40014400
 800a638:	40014800 	.word	0x40014800

0800a63c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b087      	sub	sp, #28
 800a640:	af00      	add	r7, sp, #0
 800a642:	60f8      	str	r0, [r7, #12]
 800a644:	60b9      	str	r1, [r7, #8]
 800a646:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	6a1b      	ldr	r3, [r3, #32]
 800a64c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	6a1b      	ldr	r3, [r3, #32]
 800a652:	f023 0201 	bic.w	r2, r3, #1
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	699b      	ldr	r3, [r3, #24]
 800a65e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a666:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	011b      	lsls	r3, r3, #4
 800a66c:	693a      	ldr	r2, [r7, #16]
 800a66e:	4313      	orrs	r3, r2
 800a670:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	f023 030a 	bic.w	r3, r3, #10
 800a678:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a67a:	697a      	ldr	r2, [r7, #20]
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	4313      	orrs	r3, r2
 800a680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	693a      	ldr	r2, [r7, #16]
 800a686:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	697a      	ldr	r2, [r7, #20]
 800a68c:	621a      	str	r2, [r3, #32]
}
 800a68e:	bf00      	nop
 800a690:	371c      	adds	r7, #28
 800a692:	46bd      	mov	sp, r7
 800a694:	bc80      	pop	{r7}
 800a696:	4770      	bx	lr

0800a698 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a698:	b480      	push	{r7}
 800a69a:	b087      	sub	sp, #28
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	60f8      	str	r0, [r7, #12]
 800a6a0:	60b9      	str	r1, [r7, #8]
 800a6a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	6a1b      	ldr	r3, [r3, #32]
 800a6a8:	f023 0210 	bic.w	r2, r3, #16
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	699b      	ldr	r3, [r3, #24]
 800a6b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	6a1b      	ldr	r3, [r3, #32]
 800a6ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a6c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	031b      	lsls	r3, r3, #12
 800a6c8:	697a      	ldr	r2, [r7, #20]
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a6d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	011b      	lsls	r3, r3, #4
 800a6da:	693a      	ldr	r2, [r7, #16]
 800a6dc:	4313      	orrs	r3, r2
 800a6de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	697a      	ldr	r2, [r7, #20]
 800a6e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	693a      	ldr	r2, [r7, #16]
 800a6ea:	621a      	str	r2, [r3, #32]
}
 800a6ec:	bf00      	nop
 800a6ee:	371c      	adds	r7, #28
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bc80      	pop	{r7}
 800a6f4:	4770      	bx	lr

0800a6f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a6f6:	b480      	push	{r7}
 800a6f8:	b085      	sub	sp, #20
 800a6fa:	af00      	add	r7, sp, #0
 800a6fc:	6078      	str	r0, [r7, #4]
 800a6fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	689b      	ldr	r3, [r3, #8]
 800a704:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a70c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a710:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a712:	683a      	ldr	r2, [r7, #0]
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	4313      	orrs	r3, r2
 800a718:	f043 0307 	orr.w	r3, r3, #7
 800a71c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	68fa      	ldr	r2, [r7, #12]
 800a722:	609a      	str	r2, [r3, #8]
}
 800a724:	bf00      	nop
 800a726:	3714      	adds	r7, #20
 800a728:	46bd      	mov	sp, r7
 800a72a:	bc80      	pop	{r7}
 800a72c:	4770      	bx	lr

0800a72e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a72e:	b480      	push	{r7}
 800a730:	b087      	sub	sp, #28
 800a732:	af00      	add	r7, sp, #0
 800a734:	60f8      	str	r0, [r7, #12]
 800a736:	60b9      	str	r1, [r7, #8]
 800a738:	607a      	str	r2, [r7, #4]
 800a73a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	689b      	ldr	r3, [r3, #8]
 800a740:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a748:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	021a      	lsls	r2, r3, #8
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	431a      	orrs	r2, r3
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	4313      	orrs	r3, r2
 800a756:	697a      	ldr	r2, [r7, #20]
 800a758:	4313      	orrs	r3, r2
 800a75a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	697a      	ldr	r2, [r7, #20]
 800a760:	609a      	str	r2, [r3, #8]
}
 800a762:	bf00      	nop
 800a764:	371c      	adds	r7, #28
 800a766:	46bd      	mov	sp, r7
 800a768:	bc80      	pop	{r7}
 800a76a:	4770      	bx	lr

0800a76c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b085      	sub	sp, #20
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	d101      	bne.n	800a784 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a780:	2302      	movs	r3, #2
 800a782:	e04a      	b.n	800a81a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2201      	movs	r2, #1
 800a788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2202      	movs	r2, #2
 800a790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	685b      	ldr	r3, [r3, #4]
 800a79a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	689b      	ldr	r3, [r3, #8]
 800a7a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	4a1e      	ldr	r2, [pc, #120]	; (800a824 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d108      	bne.n	800a7c0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a7b4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	685b      	ldr	r3, [r3, #4]
 800a7ba:	68fa      	ldr	r2, [r7, #12]
 800a7bc:	4313      	orrs	r3, r2
 800a7be:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	68fa      	ldr	r2, [r7, #12]
 800a7ce:	4313      	orrs	r3, r2
 800a7d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	68fa      	ldr	r2, [r7, #12]
 800a7d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4a11      	ldr	r2, [pc, #68]	; (800a824 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d004      	beq.n	800a7ee <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7ec:	d10c      	bne.n	800a808 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a7f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	689b      	ldr	r3, [r3, #8]
 800a7fa:	68ba      	ldr	r2, [r7, #8]
 800a7fc:	4313      	orrs	r3, r2
 800a7fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	68ba      	ldr	r2, [r7, #8]
 800a806:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2201      	movs	r2, #1
 800a80c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2200      	movs	r2, #0
 800a814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a818:	2300      	movs	r3, #0
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3714      	adds	r7, #20
 800a81e:	46bd      	mov	sp, r7
 800a820:	bc80      	pop	{r7}
 800a822:	4770      	bx	lr
 800a824:	40012c00 	.word	0x40012c00

0800a828 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a828:	b480      	push	{r7}
 800a82a:	b083      	sub	sp, #12
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a830:	bf00      	nop
 800a832:	370c      	adds	r7, #12
 800a834:	46bd      	mov	sp, r7
 800a836:	bc80      	pop	{r7}
 800a838:	4770      	bx	lr

0800a83a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a83a:	b480      	push	{r7}
 800a83c:	b083      	sub	sp, #12
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a842:	bf00      	nop
 800a844:	370c      	adds	r7, #12
 800a846:	46bd      	mov	sp, r7
 800a848:	bc80      	pop	{r7}
 800a84a:	4770      	bx	lr

0800a84c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b083      	sub	sp, #12
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a854:	bf00      	nop
 800a856:	370c      	adds	r7, #12
 800a858:	46bd      	mov	sp, r7
 800a85a:	bc80      	pop	{r7}
 800a85c:	4770      	bx	lr

0800a85e <LL_RCC_GetUSARTClockSource>:
{
 800a85e:	b480      	push	{r7}
 800a860:	b083      	sub	sp, #12
 800a862:	af00      	add	r7, sp, #0
 800a864:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800a866:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a86a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	401a      	ands	r2, r3
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	041b      	lsls	r3, r3, #16
 800a876:	4313      	orrs	r3, r2
}
 800a878:	4618      	mov	r0, r3
 800a87a:	370c      	adds	r7, #12
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bc80      	pop	{r7}
 800a880:	4770      	bx	lr

0800a882 <LL_RCC_GetLPUARTClockSource>:
{
 800a882:	b480      	push	{r7}
 800a884:	b083      	sub	sp, #12
 800a886:	af00      	add	r7, sp, #0
 800a888:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800a88a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a88e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	4013      	ands	r3, r2
}
 800a896:	4618      	mov	r0, r3
 800a898:	370c      	adds	r7, #12
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bc80      	pop	{r7}
 800a89e:	4770      	bx	lr

0800a8a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b082      	sub	sp, #8
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d101      	bne.n	800a8b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	e042      	b.n	800a938 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d106      	bne.n	800a8ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f7f7 fc05 	bl	80020d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2224      	movs	r2, #36	; 0x24
 800a8ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	681a      	ldr	r2, [r3, #0]
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f022 0201 	bic.w	r2, r2, #1
 800a8e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f000 f8c2 	bl	800aa6c <UART_SetConfig>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	2b01      	cmp	r3, #1
 800a8ec:	d101      	bne.n	800a8f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	e022      	b.n	800a938 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d002      	beq.n	800a900 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f000 fb2a 	bl	800af54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	685a      	ldr	r2, [r3, #4]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a90e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	689a      	ldr	r2, [r3, #8]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a91e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	681a      	ldr	r2, [r3, #0]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f042 0201 	orr.w	r2, r2, #1
 800a92e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f000 fbb0 	bl	800b096 <UART_CheckIdleState>
 800a936:	4603      	mov	r3, r0
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3708      	adds	r7, #8
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}

0800a940 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b08a      	sub	sp, #40	; 0x28
 800a944:	af02      	add	r7, sp, #8
 800a946:	60f8      	str	r0, [r7, #12]
 800a948:	60b9      	str	r1, [r7, #8]
 800a94a:	603b      	str	r3, [r7, #0]
 800a94c:	4613      	mov	r3, r2
 800a94e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a956:	2b20      	cmp	r3, #32
 800a958:	f040 8083 	bne.w	800aa62 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d002      	beq.n	800a968 <HAL_UART_Transmit+0x28>
 800a962:	88fb      	ldrh	r3, [r7, #6]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d101      	bne.n	800a96c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a968:	2301      	movs	r3, #1
 800a96a:	e07b      	b.n	800aa64 <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a972:	2b01      	cmp	r3, #1
 800a974:	d101      	bne.n	800a97a <HAL_UART_Transmit+0x3a>
 800a976:	2302      	movs	r3, #2
 800a978:	e074      	b.n	800aa64 <HAL_UART_Transmit+0x124>
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2201      	movs	r2, #1
 800a97e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2200      	movs	r2, #0
 800a986:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	2221      	movs	r2, #33	; 0x21
 800a98e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a992:	f7fc f891 	bl	8006ab8 <HAL_GetTick>
 800a996:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	88fa      	ldrh	r2, [r7, #6]
 800a99c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	88fa      	ldrh	r2, [r7, #6]
 800a9a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	689b      	ldr	r3, [r3, #8]
 800a9ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9b0:	d108      	bne.n	800a9c4 <HAL_UART_Transmit+0x84>
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	691b      	ldr	r3, [r3, #16]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d104      	bne.n	800a9c4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	61bb      	str	r3, [r7, #24]
 800a9c2:	e003      	b.n	800a9cc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800a9d4:	e02c      	b.n	800aa30 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	9300      	str	r3, [sp, #0]
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	2180      	movs	r1, #128	; 0x80
 800a9e0:	68f8      	ldr	r0, [r7, #12]
 800a9e2:	f000 fba3 	bl	800b12c <UART_WaitOnFlagUntilTimeout>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d001      	beq.n	800a9f0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800a9ec:	2303      	movs	r3, #3
 800a9ee:	e039      	b.n	800aa64 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800a9f0:	69fb      	ldr	r3, [r7, #28]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d10b      	bne.n	800aa0e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a9f6:	69bb      	ldr	r3, [r7, #24]
 800a9f8:	881b      	ldrh	r3, [r3, #0]
 800a9fa:	461a      	mov	r2, r3
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aa04:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800aa06:	69bb      	ldr	r3, [r7, #24]
 800aa08:	3302      	adds	r3, #2
 800aa0a:	61bb      	str	r3, [r7, #24]
 800aa0c:	e007      	b.n	800aa1e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800aa0e:	69fb      	ldr	r3, [r7, #28]
 800aa10:	781a      	ldrb	r2, [r3, #0]
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800aa18:	69fb      	ldr	r3, [r7, #28]
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800aa24:	b29b      	uxth	r3, r3
 800aa26:	3b01      	subs	r3, #1
 800aa28:	b29a      	uxth	r2, r3
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800aa36:	b29b      	uxth	r3, r3
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d1cc      	bne.n	800a9d6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	9300      	str	r3, [sp, #0]
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	2200      	movs	r2, #0
 800aa44:	2140      	movs	r1, #64	; 0x40
 800aa46:	68f8      	ldr	r0, [r7, #12]
 800aa48:	f000 fb70 	bl	800b12c <UART_WaitOnFlagUntilTimeout>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d001      	beq.n	800aa56 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800aa52:	2303      	movs	r3, #3
 800aa54:	e006      	b.n	800aa64 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	2220      	movs	r2, #32
 800aa5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	e000      	b.n	800aa64 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800aa62:	2302      	movs	r3, #2
  }
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3720      	adds	r7, #32
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}

0800aa6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aa70:	b08c      	sub	sp, #48	; 0x30
 800aa72:	af00      	add	r7, sp, #0
 800aa74:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aa76:	2300      	movs	r3, #0
 800aa78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	689a      	ldr	r2, [r3, #8]
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	691b      	ldr	r3, [r3, #16]
 800aa84:	431a      	orrs	r2, r3
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	695b      	ldr	r3, [r3, #20]
 800aa8a:	431a      	orrs	r2, r3
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	69db      	ldr	r3, [r3, #28]
 800aa90:	4313      	orrs	r3, r2
 800aa92:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	681a      	ldr	r2, [r3, #0]
 800aa9a:	4b94      	ldr	r3, [pc, #592]	; (800acec <UART_SetConfig+0x280>)
 800aa9c:	4013      	ands	r3, r2
 800aa9e:	697a      	ldr	r2, [r7, #20]
 800aaa0:	6812      	ldr	r2, [r2, #0]
 800aaa2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aaa4:	430b      	orrs	r3, r1
 800aaa6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	68da      	ldr	r2, [r3, #12]
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	430a      	orrs	r2, r1
 800aabc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	699b      	ldr	r3, [r3, #24]
 800aac2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4a89      	ldr	r2, [pc, #548]	; (800acf0 <UART_SetConfig+0x284>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d004      	beq.n	800aad8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	6a1b      	ldr	r3, [r3, #32]
 800aad2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aad4:	4313      	orrs	r3, r2
 800aad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	689b      	ldr	r3, [r3, #8]
 800aade:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800aae2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800aae6:	697a      	ldr	r2, [r7, #20]
 800aae8:	6812      	ldr	r2, [r2, #0]
 800aaea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aaec:	430b      	orrs	r3, r1
 800aaee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaf6:	f023 010f 	bic.w	r1, r3, #15
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	430a      	orrs	r2, r1
 800ab04:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	4a7a      	ldr	r2, [pc, #488]	; (800acf4 <UART_SetConfig+0x288>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d127      	bne.n	800ab60 <UART_SetConfig+0xf4>
 800ab10:	2003      	movs	r0, #3
 800ab12:	f7ff fea4 	bl	800a85e <LL_RCC_GetUSARTClockSource>
 800ab16:	4603      	mov	r3, r0
 800ab18:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800ab1c:	2b03      	cmp	r3, #3
 800ab1e:	d81b      	bhi.n	800ab58 <UART_SetConfig+0xec>
 800ab20:	a201      	add	r2, pc, #4	; (adr r2, 800ab28 <UART_SetConfig+0xbc>)
 800ab22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab26:	bf00      	nop
 800ab28:	0800ab39 	.word	0x0800ab39
 800ab2c:	0800ab49 	.word	0x0800ab49
 800ab30:	0800ab41 	.word	0x0800ab41
 800ab34:	0800ab51 	.word	0x0800ab51
 800ab38:	2301      	movs	r3, #1
 800ab3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab3e:	e080      	b.n	800ac42 <UART_SetConfig+0x1d6>
 800ab40:	2302      	movs	r3, #2
 800ab42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab46:	e07c      	b.n	800ac42 <UART_SetConfig+0x1d6>
 800ab48:	2304      	movs	r3, #4
 800ab4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab4e:	e078      	b.n	800ac42 <UART_SetConfig+0x1d6>
 800ab50:	2308      	movs	r3, #8
 800ab52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab56:	e074      	b.n	800ac42 <UART_SetConfig+0x1d6>
 800ab58:	2310      	movs	r3, #16
 800ab5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab5e:	e070      	b.n	800ac42 <UART_SetConfig+0x1d6>
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	4a64      	ldr	r2, [pc, #400]	; (800acf8 <UART_SetConfig+0x28c>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d138      	bne.n	800abdc <UART_SetConfig+0x170>
 800ab6a:	200c      	movs	r0, #12
 800ab6c:	f7ff fe77 	bl	800a85e <LL_RCC_GetUSARTClockSource>
 800ab70:	4603      	mov	r3, r0
 800ab72:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800ab76:	2b0c      	cmp	r3, #12
 800ab78:	d82c      	bhi.n	800abd4 <UART_SetConfig+0x168>
 800ab7a:	a201      	add	r2, pc, #4	; (adr r2, 800ab80 <UART_SetConfig+0x114>)
 800ab7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab80:	0800abb5 	.word	0x0800abb5
 800ab84:	0800abd5 	.word	0x0800abd5
 800ab88:	0800abd5 	.word	0x0800abd5
 800ab8c:	0800abd5 	.word	0x0800abd5
 800ab90:	0800abc5 	.word	0x0800abc5
 800ab94:	0800abd5 	.word	0x0800abd5
 800ab98:	0800abd5 	.word	0x0800abd5
 800ab9c:	0800abd5 	.word	0x0800abd5
 800aba0:	0800abbd 	.word	0x0800abbd
 800aba4:	0800abd5 	.word	0x0800abd5
 800aba8:	0800abd5 	.word	0x0800abd5
 800abac:	0800abd5 	.word	0x0800abd5
 800abb0:	0800abcd 	.word	0x0800abcd
 800abb4:	2300      	movs	r3, #0
 800abb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abba:	e042      	b.n	800ac42 <UART_SetConfig+0x1d6>
 800abbc:	2302      	movs	r3, #2
 800abbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abc2:	e03e      	b.n	800ac42 <UART_SetConfig+0x1d6>
 800abc4:	2304      	movs	r3, #4
 800abc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abca:	e03a      	b.n	800ac42 <UART_SetConfig+0x1d6>
 800abcc:	2308      	movs	r3, #8
 800abce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abd2:	e036      	b.n	800ac42 <UART_SetConfig+0x1d6>
 800abd4:	2310      	movs	r3, #16
 800abd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abda:	e032      	b.n	800ac42 <UART_SetConfig+0x1d6>
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4a43      	ldr	r2, [pc, #268]	; (800acf0 <UART_SetConfig+0x284>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d12a      	bne.n	800ac3c <UART_SetConfig+0x1d0>
 800abe6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800abea:	f7ff fe4a 	bl	800a882 <LL_RCC_GetLPUARTClockSource>
 800abee:	4603      	mov	r3, r0
 800abf0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800abf4:	d01a      	beq.n	800ac2c <UART_SetConfig+0x1c0>
 800abf6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800abfa:	d81b      	bhi.n	800ac34 <UART_SetConfig+0x1c8>
 800abfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac00:	d00c      	beq.n	800ac1c <UART_SetConfig+0x1b0>
 800ac02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac06:	d815      	bhi.n	800ac34 <UART_SetConfig+0x1c8>
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d003      	beq.n	800ac14 <UART_SetConfig+0x1a8>
 800ac0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac10:	d008      	beq.n	800ac24 <UART_SetConfig+0x1b8>
 800ac12:	e00f      	b.n	800ac34 <UART_SetConfig+0x1c8>
 800ac14:	2300      	movs	r3, #0
 800ac16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac1a:	e012      	b.n	800ac42 <UART_SetConfig+0x1d6>
 800ac1c:	2302      	movs	r3, #2
 800ac1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac22:	e00e      	b.n	800ac42 <UART_SetConfig+0x1d6>
 800ac24:	2304      	movs	r3, #4
 800ac26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac2a:	e00a      	b.n	800ac42 <UART_SetConfig+0x1d6>
 800ac2c:	2308      	movs	r3, #8
 800ac2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac32:	e006      	b.n	800ac42 <UART_SetConfig+0x1d6>
 800ac34:	2310      	movs	r3, #16
 800ac36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac3a:	e002      	b.n	800ac42 <UART_SetConfig+0x1d6>
 800ac3c:	2310      	movs	r3, #16
 800ac3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	4a2a      	ldr	r2, [pc, #168]	; (800acf0 <UART_SetConfig+0x284>)
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	f040 80a4 	bne.w	800ad96 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ac4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ac52:	2b08      	cmp	r3, #8
 800ac54:	d823      	bhi.n	800ac9e <UART_SetConfig+0x232>
 800ac56:	a201      	add	r2, pc, #4	; (adr r2, 800ac5c <UART_SetConfig+0x1f0>)
 800ac58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac5c:	0800ac81 	.word	0x0800ac81
 800ac60:	0800ac9f 	.word	0x0800ac9f
 800ac64:	0800ac89 	.word	0x0800ac89
 800ac68:	0800ac9f 	.word	0x0800ac9f
 800ac6c:	0800ac8f 	.word	0x0800ac8f
 800ac70:	0800ac9f 	.word	0x0800ac9f
 800ac74:	0800ac9f 	.word	0x0800ac9f
 800ac78:	0800ac9f 	.word	0x0800ac9f
 800ac7c:	0800ac97 	.word	0x0800ac97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac80:	f7fe fcd6 	bl	8009630 <HAL_RCC_GetPCLK1Freq>
 800ac84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ac86:	e010      	b.n	800acaa <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ac88:	4b1c      	ldr	r3, [pc, #112]	; (800acfc <UART_SetConfig+0x290>)
 800ac8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ac8c:	e00d      	b.n	800acaa <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac8e:	f7fe fc1b 	bl	80094c8 <HAL_RCC_GetSysClockFreq>
 800ac92:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ac94:	e009      	b.n	800acaa <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ac9c:	e005      	b.n	800acaa <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800aca2:	2301      	movs	r3, #1
 800aca4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800aca8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800acaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acac:	2b00      	cmp	r3, #0
 800acae:	f000 8137 	beq.w	800af20 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb6:	4a12      	ldr	r2, [pc, #72]	; (800ad00 <UART_SetConfig+0x294>)
 800acb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800acbc:	461a      	mov	r2, r3
 800acbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc0:	fbb3 f3f2 	udiv	r3, r3, r2
 800acc4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	685a      	ldr	r2, [r3, #4]
 800acca:	4613      	mov	r3, r2
 800accc:	005b      	lsls	r3, r3, #1
 800acce:	4413      	add	r3, r2
 800acd0:	69ba      	ldr	r2, [r7, #24]
 800acd2:	429a      	cmp	r2, r3
 800acd4:	d305      	bcc.n	800ace2 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	685b      	ldr	r3, [r3, #4]
 800acda:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800acdc:	69ba      	ldr	r2, [r7, #24]
 800acde:	429a      	cmp	r2, r3
 800ace0:	d910      	bls.n	800ad04 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800ace2:	2301      	movs	r3, #1
 800ace4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ace8:	e11a      	b.n	800af20 <UART_SetConfig+0x4b4>
 800acea:	bf00      	nop
 800acec:	cfff69f3 	.word	0xcfff69f3
 800acf0:	40008000 	.word	0x40008000
 800acf4:	40013800 	.word	0x40013800
 800acf8:	40004400 	.word	0x40004400
 800acfc:	00f42400 	.word	0x00f42400
 800ad00:	0800ec30 	.word	0x0800ec30
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad06:	2200      	movs	r2, #0
 800ad08:	60bb      	str	r3, [r7, #8]
 800ad0a:	60fa      	str	r2, [r7, #12]
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad10:	4a8e      	ldr	r2, [pc, #568]	; (800af4c <UART_SetConfig+0x4e0>)
 800ad12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	2200      	movs	r2, #0
 800ad1a:	603b      	str	r3, [r7, #0]
 800ad1c:	607a      	str	r2, [r7, #4]
 800ad1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ad26:	f7f6 fa61 	bl	80011ec <__aeabi_uldivmod>
 800ad2a:	4602      	mov	r2, r0
 800ad2c:	460b      	mov	r3, r1
 800ad2e:	4610      	mov	r0, r2
 800ad30:	4619      	mov	r1, r3
 800ad32:	f04f 0200 	mov.w	r2, #0
 800ad36:	f04f 0300 	mov.w	r3, #0
 800ad3a:	020b      	lsls	r3, r1, #8
 800ad3c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ad40:	0202      	lsls	r2, r0, #8
 800ad42:	6979      	ldr	r1, [r7, #20]
 800ad44:	6849      	ldr	r1, [r1, #4]
 800ad46:	0849      	lsrs	r1, r1, #1
 800ad48:	2000      	movs	r0, #0
 800ad4a:	460c      	mov	r4, r1
 800ad4c:	4605      	mov	r5, r0
 800ad4e:	eb12 0804 	adds.w	r8, r2, r4
 800ad52:	eb43 0905 	adc.w	r9, r3, r5
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	685b      	ldr	r3, [r3, #4]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	469a      	mov	sl, r3
 800ad5e:	4693      	mov	fp, r2
 800ad60:	4652      	mov	r2, sl
 800ad62:	465b      	mov	r3, fp
 800ad64:	4640      	mov	r0, r8
 800ad66:	4649      	mov	r1, r9
 800ad68:	f7f6 fa40 	bl	80011ec <__aeabi_uldivmod>
 800ad6c:	4602      	mov	r2, r0
 800ad6e:	460b      	mov	r3, r1
 800ad70:	4613      	mov	r3, r2
 800ad72:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ad74:	6a3b      	ldr	r3, [r7, #32]
 800ad76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad7a:	d308      	bcc.n	800ad8e <UART_SetConfig+0x322>
 800ad7c:	6a3b      	ldr	r3, [r7, #32]
 800ad7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad82:	d204      	bcs.n	800ad8e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	6a3a      	ldr	r2, [r7, #32]
 800ad8a:	60da      	str	r2, [r3, #12]
 800ad8c:	e0c8      	b.n	800af20 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800ad8e:	2301      	movs	r3, #1
 800ad90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ad94:	e0c4      	b.n	800af20 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	69db      	ldr	r3, [r3, #28]
 800ad9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad9e:	d168      	bne.n	800ae72 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800ada0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ada4:	2b08      	cmp	r3, #8
 800ada6:	d828      	bhi.n	800adfa <UART_SetConfig+0x38e>
 800ada8:	a201      	add	r2, pc, #4	; (adr r2, 800adb0 <UART_SetConfig+0x344>)
 800adaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adae:	bf00      	nop
 800adb0:	0800add5 	.word	0x0800add5
 800adb4:	0800addd 	.word	0x0800addd
 800adb8:	0800ade5 	.word	0x0800ade5
 800adbc:	0800adfb 	.word	0x0800adfb
 800adc0:	0800adeb 	.word	0x0800adeb
 800adc4:	0800adfb 	.word	0x0800adfb
 800adc8:	0800adfb 	.word	0x0800adfb
 800adcc:	0800adfb 	.word	0x0800adfb
 800add0:	0800adf3 	.word	0x0800adf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800add4:	f7fe fc2c 	bl	8009630 <HAL_RCC_GetPCLK1Freq>
 800add8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800adda:	e014      	b.n	800ae06 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800addc:	f7fe fc3a 	bl	8009654 <HAL_RCC_GetPCLK2Freq>
 800ade0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ade2:	e010      	b.n	800ae06 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ade4:	4b5a      	ldr	r3, [pc, #360]	; (800af50 <UART_SetConfig+0x4e4>)
 800ade6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ade8:	e00d      	b.n	800ae06 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800adea:	f7fe fb6d 	bl	80094c8 <HAL_RCC_GetSysClockFreq>
 800adee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800adf0:	e009      	b.n	800ae06 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800adf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800adf6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800adf8:	e005      	b.n	800ae06 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800adfa:	2300      	movs	r3, #0
 800adfc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800adfe:	2301      	movs	r3, #1
 800ae00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ae04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ae06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	f000 8089 	beq.w	800af20 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae12:	4a4e      	ldr	r2, [pc, #312]	; (800af4c <UART_SetConfig+0x4e0>)
 800ae14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae18:	461a      	mov	r2, r3
 800ae1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae1c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae20:	005a      	lsls	r2, r3, #1
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	085b      	lsrs	r3, r3, #1
 800ae28:	441a      	add	r2, r3
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	685b      	ldr	r3, [r3, #4]
 800ae2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae32:	b29b      	uxth	r3, r3
 800ae34:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae36:	6a3b      	ldr	r3, [r7, #32]
 800ae38:	2b0f      	cmp	r3, #15
 800ae3a:	d916      	bls.n	800ae6a <UART_SetConfig+0x3fe>
 800ae3c:	6a3b      	ldr	r3, [r7, #32]
 800ae3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae42:	d212      	bcs.n	800ae6a <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae44:	6a3b      	ldr	r3, [r7, #32]
 800ae46:	b29b      	uxth	r3, r3
 800ae48:	f023 030f 	bic.w	r3, r3, #15
 800ae4c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ae4e:	6a3b      	ldr	r3, [r7, #32]
 800ae50:	085b      	lsrs	r3, r3, #1
 800ae52:	b29b      	uxth	r3, r3
 800ae54:	f003 0307 	and.w	r3, r3, #7
 800ae58:	b29a      	uxth	r2, r3
 800ae5a:	8bfb      	ldrh	r3, [r7, #30]
 800ae5c:	4313      	orrs	r3, r2
 800ae5e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	8bfa      	ldrh	r2, [r7, #30]
 800ae66:	60da      	str	r2, [r3, #12]
 800ae68:	e05a      	b.n	800af20 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ae70:	e056      	b.n	800af20 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ae72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ae76:	2b08      	cmp	r3, #8
 800ae78:	d827      	bhi.n	800aeca <UART_SetConfig+0x45e>
 800ae7a:	a201      	add	r2, pc, #4	; (adr r2, 800ae80 <UART_SetConfig+0x414>)
 800ae7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae80:	0800aea5 	.word	0x0800aea5
 800ae84:	0800aead 	.word	0x0800aead
 800ae88:	0800aeb5 	.word	0x0800aeb5
 800ae8c:	0800aecb 	.word	0x0800aecb
 800ae90:	0800aebb 	.word	0x0800aebb
 800ae94:	0800aecb 	.word	0x0800aecb
 800ae98:	0800aecb 	.word	0x0800aecb
 800ae9c:	0800aecb 	.word	0x0800aecb
 800aea0:	0800aec3 	.word	0x0800aec3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aea4:	f7fe fbc4 	bl	8009630 <HAL_RCC_GetPCLK1Freq>
 800aea8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aeaa:	e014      	b.n	800aed6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aeac:	f7fe fbd2 	bl	8009654 <HAL_RCC_GetPCLK2Freq>
 800aeb0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aeb2:	e010      	b.n	800aed6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aeb4:	4b26      	ldr	r3, [pc, #152]	; (800af50 <UART_SetConfig+0x4e4>)
 800aeb6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800aeb8:	e00d      	b.n	800aed6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aeba:	f7fe fb05 	bl	80094c8 <HAL_RCC_GetSysClockFreq>
 800aebe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aec0:	e009      	b.n	800aed6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aec2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aec6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800aec8:	e005      	b.n	800aed6 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800aeca:	2300      	movs	r3, #0
 800aecc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800aece:	2301      	movs	r3, #1
 800aed0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800aed4:	bf00      	nop
    }

    if (pclk != 0U)
 800aed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d021      	beq.n	800af20 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aee0:	4a1a      	ldr	r2, [pc, #104]	; (800af4c <UART_SetConfig+0x4e0>)
 800aee2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aee6:	461a      	mov	r2, r3
 800aee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeea:	fbb3 f2f2 	udiv	r2, r3, r2
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	685b      	ldr	r3, [r3, #4]
 800aef2:	085b      	lsrs	r3, r3, #1
 800aef4:	441a      	add	r2, r3
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	685b      	ldr	r3, [r3, #4]
 800aefa:	fbb2 f3f3 	udiv	r3, r2, r3
 800aefe:	b29b      	uxth	r3, r3
 800af00:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af02:	6a3b      	ldr	r3, [r7, #32]
 800af04:	2b0f      	cmp	r3, #15
 800af06:	d908      	bls.n	800af1a <UART_SetConfig+0x4ae>
 800af08:	6a3b      	ldr	r3, [r7, #32]
 800af0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af0e:	d204      	bcs.n	800af1a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	6a3a      	ldr	r2, [r7, #32]
 800af16:	60da      	str	r2, [r3, #12]
 800af18:	e002      	b.n	800af20 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800af1a:	2301      	movs	r3, #1
 800af1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	2201      	movs	r2, #1
 800af24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	2201      	movs	r2, #1
 800af2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	2200      	movs	r2, #0
 800af34:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	2200      	movs	r2, #0
 800af3a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800af3c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800af40:	4618      	mov	r0, r3
 800af42:	3730      	adds	r7, #48	; 0x30
 800af44:	46bd      	mov	sp, r7
 800af46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800af4a:	bf00      	nop
 800af4c:	0800ec30 	.word	0x0800ec30
 800af50:	00f42400 	.word	0x00f42400

0800af54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800af54:	b480      	push	{r7}
 800af56:	b083      	sub	sp, #12
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af60:	f003 0301 	and.w	r3, r3, #1
 800af64:	2b00      	cmp	r3, #0
 800af66:	d00a      	beq.n	800af7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	685b      	ldr	r3, [r3, #4]
 800af6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	430a      	orrs	r2, r1
 800af7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af82:	f003 0302 	and.w	r3, r3, #2
 800af86:	2b00      	cmp	r3, #0
 800af88:	d00a      	beq.n	800afa0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	685b      	ldr	r3, [r3, #4]
 800af90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	430a      	orrs	r2, r1
 800af9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afa4:	f003 0304 	and.w	r3, r3, #4
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d00a      	beq.n	800afc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	685b      	ldr	r3, [r3, #4]
 800afb2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	430a      	orrs	r2, r1
 800afc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afc6:	f003 0308 	and.w	r3, r3, #8
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d00a      	beq.n	800afe4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	430a      	orrs	r2, r1
 800afe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afe8:	f003 0310 	and.w	r3, r3, #16
 800afec:	2b00      	cmp	r3, #0
 800afee:	d00a      	beq.n	800b006 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	689b      	ldr	r3, [r3, #8]
 800aff6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	430a      	orrs	r2, r1
 800b004:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b00a:	f003 0320 	and.w	r3, r3, #32
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d00a      	beq.n	800b028 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	689b      	ldr	r3, [r3, #8]
 800b018:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	430a      	orrs	r2, r1
 800b026:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b02c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b030:	2b00      	cmp	r3, #0
 800b032:	d01a      	beq.n	800b06a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	430a      	orrs	r2, r1
 800b048:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b04e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b052:	d10a      	bne.n	800b06a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	430a      	orrs	r2, r1
 800b068:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b06e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b072:	2b00      	cmp	r3, #0
 800b074:	d00a      	beq.n	800b08c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	685b      	ldr	r3, [r3, #4]
 800b07c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	430a      	orrs	r2, r1
 800b08a:	605a      	str	r2, [r3, #4]
  }
}
 800b08c:	bf00      	nop
 800b08e:	370c      	adds	r7, #12
 800b090:	46bd      	mov	sp, r7
 800b092:	bc80      	pop	{r7}
 800b094:	4770      	bx	lr

0800b096 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b096:	b580      	push	{r7, lr}
 800b098:	b086      	sub	sp, #24
 800b09a:	af02      	add	r7, sp, #8
 800b09c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b0a6:	f7fb fd07 	bl	8006ab8 <HAL_GetTick>
 800b0aa:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f003 0308 	and.w	r3, r3, #8
 800b0b6:	2b08      	cmp	r3, #8
 800b0b8:	d10e      	bne.n	800b0d8 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b0ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b0be:	9300      	str	r3, [sp, #0]
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f000 f82f 	bl	800b12c <UART_WaitOnFlagUntilTimeout>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d001      	beq.n	800b0d8 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b0d4:	2303      	movs	r3, #3
 800b0d6:	e025      	b.n	800b124 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f003 0304 	and.w	r3, r3, #4
 800b0e2:	2b04      	cmp	r3, #4
 800b0e4:	d10e      	bne.n	800b104 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b0e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b0ea:	9300      	str	r3, [sp, #0]
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f000 f819 	bl	800b12c <UART_WaitOnFlagUntilTimeout>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d001      	beq.n	800b104 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b100:	2303      	movs	r3, #3
 800b102:	e00f      	b.n	800b124 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2220      	movs	r2, #32
 800b108:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2220      	movs	r2, #32
 800b110:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2200      	movs	r2, #0
 800b118:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2200      	movs	r2, #0
 800b11e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b122:	2300      	movs	r3, #0
}
 800b124:	4618      	mov	r0, r3
 800b126:	3710      	adds	r7, #16
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}

0800b12c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b09c      	sub	sp, #112	; 0x70
 800b130:	af00      	add	r7, sp, #0
 800b132:	60f8      	str	r0, [r7, #12]
 800b134:	60b9      	str	r1, [r7, #8]
 800b136:	603b      	str	r3, [r7, #0]
 800b138:	4613      	mov	r3, r2
 800b13a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b13c:	e0a9      	b.n	800b292 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b13e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b140:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b144:	f000 80a5 	beq.w	800b292 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b148:	f7fb fcb6 	bl	8006ab8 <HAL_GetTick>
 800b14c:	4602      	mov	r2, r0
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	1ad3      	subs	r3, r2, r3
 800b152:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b154:	429a      	cmp	r2, r3
 800b156:	d302      	bcc.n	800b15e <UART_WaitOnFlagUntilTimeout+0x32>
 800b158:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d140      	bne.n	800b1e0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b164:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b166:	e853 3f00 	ldrex	r3, [r3]
 800b16a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b16c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b16e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b172:	667b      	str	r3, [r7, #100]	; 0x64
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	461a      	mov	r2, r3
 800b17a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b17c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b17e:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b180:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b182:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b184:	e841 2300 	strex	r3, r2, [r1]
 800b188:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b18a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d1e6      	bne.n	800b15e <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	3308      	adds	r3, #8
 800b196:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b19a:	e853 3f00 	ldrex	r3, [r3]
 800b19e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a2:	f023 0301 	bic.w	r3, r3, #1
 800b1a6:	663b      	str	r3, [r7, #96]	; 0x60
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	3308      	adds	r3, #8
 800b1ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b1b0:	64ba      	str	r2, [r7, #72]	; 0x48
 800b1b2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b1b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b1b8:	e841 2300 	strex	r3, r2, [r1]
 800b1bc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b1be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d1e5      	bne.n	800b190 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	2220      	movs	r2, #32
 800b1c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2220      	movs	r2, #32
 800b1d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b1dc:	2303      	movs	r3, #3
 800b1de:	e069      	b.n	800b2b4 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f003 0304 	and.w	r3, r3, #4
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d051      	beq.n	800b292 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	69db      	ldr	r3, [r3, #28]
 800b1f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b1f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b1fc:	d149      	bne.n	800b292 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b206:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b210:	e853 3f00 	ldrex	r3, [r3]
 800b214:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b218:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b21c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	461a      	mov	r2, r3
 800b224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b226:	637b      	str	r3, [r7, #52]	; 0x34
 800b228:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b22a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b22c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b22e:	e841 2300 	strex	r3, r2, [r1]
 800b232:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b236:	2b00      	cmp	r3, #0
 800b238:	d1e6      	bne.n	800b208 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	3308      	adds	r3, #8
 800b240:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	e853 3f00 	ldrex	r3, [r3]
 800b248:	613b      	str	r3, [r7, #16]
   return(result);
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	f023 0301 	bic.w	r3, r3, #1
 800b250:	66bb      	str	r3, [r7, #104]	; 0x68
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	3308      	adds	r3, #8
 800b258:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b25a:	623a      	str	r2, [r7, #32]
 800b25c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b25e:	69f9      	ldr	r1, [r7, #28]
 800b260:	6a3a      	ldr	r2, [r7, #32]
 800b262:	e841 2300 	strex	r3, r2, [r1]
 800b266:	61bb      	str	r3, [r7, #24]
   return(result);
 800b268:	69bb      	ldr	r3, [r7, #24]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d1e5      	bne.n	800b23a <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	2220      	movs	r2, #32
 800b272:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	2220      	movs	r2, #32
 800b27a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	2220      	movs	r2, #32
 800b282:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2200      	movs	r2, #0
 800b28a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b28e:	2303      	movs	r3, #3
 800b290:	e010      	b.n	800b2b4 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	69da      	ldr	r2, [r3, #28]
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	4013      	ands	r3, r2
 800b29c:	68ba      	ldr	r2, [r7, #8]
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	bf0c      	ite	eq
 800b2a2:	2301      	moveq	r3, #1
 800b2a4:	2300      	movne	r3, #0
 800b2a6:	b2db      	uxtb	r3, r3
 800b2a8:	461a      	mov	r2, r3
 800b2aa:	79fb      	ldrb	r3, [r7, #7]
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	f43f af46 	beq.w	800b13e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b2b2:	2300      	movs	r3, #0
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3770      	adds	r7, #112	; 0x70
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}

0800b2bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b085      	sub	sp, #20
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b2ca:	2b01      	cmp	r3, #1
 800b2cc:	d101      	bne.n	800b2d2 <HAL_UARTEx_DisableFifoMode+0x16>
 800b2ce:	2302      	movs	r3, #2
 800b2d0:	e027      	b.n	800b322 <HAL_UARTEx_DisableFifoMode+0x66>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2201      	movs	r2, #1
 800b2d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2224      	movs	r2, #36	; 0x24
 800b2de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	681a      	ldr	r2, [r3, #0]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f022 0201 	bic.w	r2, r2, #1
 800b2f8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b300:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2200      	movs	r2, #0
 800b306:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	68fa      	ldr	r2, [r7, #12]
 800b30e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2220      	movs	r2, #32
 800b314:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2200      	movs	r2, #0
 800b31c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b320:	2300      	movs	r3, #0
}
 800b322:	4618      	mov	r0, r3
 800b324:	3714      	adds	r7, #20
 800b326:	46bd      	mov	sp, r7
 800b328:	bc80      	pop	{r7}
 800b32a:	4770      	bx	lr

0800b32c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b084      	sub	sp, #16
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
 800b334:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b33c:	2b01      	cmp	r3, #1
 800b33e:	d101      	bne.n	800b344 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b340:	2302      	movs	r3, #2
 800b342:	e02d      	b.n	800b3a0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2201      	movs	r2, #1
 800b348:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2224      	movs	r2, #36	; 0x24
 800b350:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	681a      	ldr	r2, [r3, #0]
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f022 0201 	bic.w	r2, r2, #1
 800b36a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	689b      	ldr	r3, [r3, #8]
 800b372:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	683a      	ldr	r2, [r7, #0]
 800b37c:	430a      	orrs	r2, r1
 800b37e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f000 f84f 	bl	800b424 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	68fa      	ldr	r2, [r7, #12]
 800b38c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2220      	movs	r2, #32
 800b392:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2200      	movs	r2, #0
 800b39a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b39e:	2300      	movs	r3, #0
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3710      	adds	r7, #16
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}

0800b3a8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b084      	sub	sp, #16
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
 800b3b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b3b8:	2b01      	cmp	r3, #1
 800b3ba:	d101      	bne.n	800b3c0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b3bc:	2302      	movs	r3, #2
 800b3be:	e02d      	b.n	800b41c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2224      	movs	r2, #36	; 0x24
 800b3cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	681a      	ldr	r2, [r3, #0]
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f022 0201 	bic.w	r2, r2, #1
 800b3e6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	689b      	ldr	r3, [r3, #8]
 800b3ee:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	683a      	ldr	r2, [r7, #0]
 800b3f8:	430a      	orrs	r2, r1
 800b3fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f000 f811 	bl	800b424 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	68fa      	ldr	r2, [r7, #12]
 800b408:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2220      	movs	r2, #32
 800b40e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2200      	movs	r2, #0
 800b416:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b41a:	2300      	movs	r3, #0
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3710      	adds	r7, #16
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}

0800b424 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b424:	b480      	push	{r7}
 800b426:	b085      	sub	sp, #20
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b430:	2b00      	cmp	r3, #0
 800b432:	d108      	bne.n	800b446 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2201      	movs	r2, #1
 800b438:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2201      	movs	r2, #1
 800b440:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b444:	e031      	b.n	800b4aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b446:	2308      	movs	r3, #8
 800b448:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b44a:	2308      	movs	r3, #8
 800b44c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	689b      	ldr	r3, [r3, #8]
 800b454:	0e5b      	lsrs	r3, r3, #25
 800b456:	b2db      	uxtb	r3, r3
 800b458:	f003 0307 	and.w	r3, r3, #7
 800b45c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	689b      	ldr	r3, [r3, #8]
 800b464:	0f5b      	lsrs	r3, r3, #29
 800b466:	b2db      	uxtb	r3, r3
 800b468:	f003 0307 	and.w	r3, r3, #7
 800b46c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b46e:	7bbb      	ldrb	r3, [r7, #14]
 800b470:	7b3a      	ldrb	r2, [r7, #12]
 800b472:	4910      	ldr	r1, [pc, #64]	; (800b4b4 <UARTEx_SetNbDataToProcess+0x90>)
 800b474:	5c8a      	ldrb	r2, [r1, r2]
 800b476:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b47a:	7b3a      	ldrb	r2, [r7, #12]
 800b47c:	490e      	ldr	r1, [pc, #56]	; (800b4b8 <UARTEx_SetNbDataToProcess+0x94>)
 800b47e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b480:	fb93 f3f2 	sdiv	r3, r3, r2
 800b484:	b29a      	uxth	r2, r3
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b48c:	7bfb      	ldrb	r3, [r7, #15]
 800b48e:	7b7a      	ldrb	r2, [r7, #13]
 800b490:	4908      	ldr	r1, [pc, #32]	; (800b4b4 <UARTEx_SetNbDataToProcess+0x90>)
 800b492:	5c8a      	ldrb	r2, [r1, r2]
 800b494:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b498:	7b7a      	ldrb	r2, [r7, #13]
 800b49a:	4907      	ldr	r1, [pc, #28]	; (800b4b8 <UARTEx_SetNbDataToProcess+0x94>)
 800b49c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b49e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b4a2:	b29a      	uxth	r2, r3
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b4aa:	bf00      	nop
 800b4ac:	3714      	adds	r7, #20
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bc80      	pop	{r7}
 800b4b2:	4770      	bx	lr
 800b4b4:	0800ec48 	.word	0x0800ec48
 800b4b8:	0800ec50 	.word	0x0800ec50

0800b4bc <MX_MEMS_Init>:
static void Motion_Magneto_Sensor_Handler(uint32_t Instance);
static void MX_DataLogTerminal_Init(void);
static void MX_DataLogTerminal_Process(void);

void MX_MEMS_Init(void)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	af00      	add	r7, sp, #0

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */

  MX_DataLogTerminal_Init();
 800b4c0:	f000 f808 	bl	800b4d4 <MX_DataLogTerminal_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 800b4c4:	bf00      	nop
 800b4c6:	bd80      	pop	{r7, pc}

0800b4c8 <MX_MEMS_Process>:

/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Process_PreTreatment */

  /* USER CODE END MEMS_Process_PreTreatment */

  MX_DataLogTerminal_Process();
 800b4cc:	f000 f938 	bl	800b740 <MX_DataLogTerminal_Process>

  /* USER CODE BEGIN MEMS_Process_PostTreatment */

  /* USER CODE END MEMS_Process_PostTreatment */
}
 800b4d0:	bf00      	nop
 800b4d2:	bd80      	pop	{r7, pc}

0800b4d4 <MX_DataLogTerminal_Init>:
/**
  * @brief  Initialize the DataLogTerminal application
  * @retval None
  */
void MX_DataLogTerminal_Init(void)
{
 800b4d4:	b5b0      	push	{r4, r5, r7, lr}
 800b4d6:	b088      	sub	sp, #32
 800b4d8:	af04      	add	r7, sp, #16
  displayFloatToInt_t out_value_odr;
  int i;

  /* Initialize LED */
  BSP_LED_Init(LED2);
 800b4da:	2000      	movs	r0, #0
 800b4dc:	f7fb f85e 	bl	800659c <BSP_LED_Init>

  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 800b4e0:	2101      	movs	r1, #1
 800b4e2:	2000      	movs	r0, #0
 800b4e4:	f7fb f896 	bl	8006614 <BSP_PB_Init>

  /* Check what is the Push Button State when the button is not pressed. It can change across families */
  PushButtonState = (BSP_PB_GetState(BUTTON_KEY)) ?  0 : 1;
 800b4e8:	2000      	movs	r0, #0
 800b4ea:	f7fb f8e7 	bl	80066bc <BSP_PB_GetState>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	bf0c      	ite	eq
 800b4f4:	2301      	moveq	r3, #1
 800b4f6:	2300      	movne	r3, #0
 800b4f8:	b2db      	uxtb	r3, r3
 800b4fa:	461a      	mov	r2, r3
 800b4fc:	4b7d      	ldr	r3, [pc, #500]	; (800b6f4 <MX_DataLogTerminal_Init+0x220>)
 800b4fe:	601a      	str	r2, [r3, #0]

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 800b500:	2000      	movs	r0, #0
 800b502:	f7fb f92d 	bl	8006760 <BSP_COM_Init>

  snprintf(dataOut, MAX_BUF_SIZE, "\r\n__________________________________________________________________________\r\n");
 800b506:	4a7c      	ldr	r2, [pc, #496]	; (800b6f8 <MX_DataLogTerminal_Init+0x224>)
 800b508:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b50c:	487b      	ldr	r0, [pc, #492]	; (800b6fc <MX_DataLogTerminal_Init+0x228>)
 800b50e:	f000 ffeb 	bl	800c4e8 <sniprintf>
  printf("%s", dataOut);
 800b512:	497a      	ldr	r1, [pc, #488]	; (800b6fc <MX_DataLogTerminal_Init+0x228>)
 800b514:	487a      	ldr	r0, [pc, #488]	; (800b700 <MX_DataLogTerminal_Init+0x22c>)
 800b516:	f000 ff59 	bl	800c3cc <iprintf>

  CUSTOM_MOTION_SENSOR_Init(CUSTOM_LSM6DSOX_0, MOTION_ACCELERO | MOTION_GYRO);
 800b51a:	2103      	movs	r1, #3
 800b51c:	2000      	movs	r0, #0
 800b51e:	f000 fc37 	bl	800bd90 <CUSTOM_MOTION_SENSOR_Init>

  CUSTOM_MOTION_SENSOR_SetOutputDataRate(CUSTOM_LSM6DSOX_0, MOTION_ACCELERO, LSM6DSOX_ACC_ODR);
 800b522:	4a78      	ldr	r2, [pc, #480]	; (800b704 <MX_DataLogTerminal_Init+0x230>)
 800b524:	2102      	movs	r1, #2
 800b526:	2000      	movs	r0, #0
 800b528:	f000 fdda 	bl	800c0e0 <CUSTOM_MOTION_SENSOR_SetOutputDataRate>

  CUSTOM_MOTION_SENSOR_SetFullScale(CUSTOM_LSM6DSOX_0, MOTION_ACCELERO, LSM6DSOX_ACC_FS);
 800b52c:	2202      	movs	r2, #2
 800b52e:	2102      	movs	r1, #2
 800b530:	2000      	movs	r0, #0
 800b532:	f000 fe19 	bl	800c168 <CUSTOM_MOTION_SENSOR_SetFullScale>

  CUSTOM_MOTION_SENSOR_SetOutputDataRate(CUSTOM_LSM6DSOX_0, MOTION_GYRO, LSM6DSOX_GYRO_ODR);
 800b536:	4a73      	ldr	r2, [pc, #460]	; (800b704 <MX_DataLogTerminal_Init+0x230>)
 800b538:	2101      	movs	r1, #1
 800b53a:	2000      	movs	r0, #0
 800b53c:	f000 fdd0 	bl	800c0e0 <CUSTOM_MOTION_SENSOR_SetOutputDataRate>

  CUSTOM_MOTION_SENSOR_SetFullScale(CUSTOM_LSM6DSOX_0, MOTION_GYRO, LSM6DSOX_GYRO_FS);
 800b540:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b544:	2101      	movs	r1, #1
 800b546:	2000      	movs	r0, #0
 800b548:	f000 fe0e 	bl	800c168 <CUSTOM_MOTION_SENSOR_SetFullScale>

  for(i = 0; i < CUSTOM_MOTION_INSTANCES_NBR; i++)
 800b54c:	2300      	movs	r3, #0
 800b54e:	60fb      	str	r3, [r7, #12]
 800b550:	e0ba      	b.n	800b6c8 <MX_DataLogTerminal_Init+0x1f4>
  {
    CUSTOM_MOTION_SENSOR_GetCapabilities(i, &MotionCapabilities[i]);
 800b552:	68f8      	ldr	r0, [r7, #12]
 800b554:	68fa      	ldr	r2, [r7, #12]
 800b556:	4613      	mov	r3, r2
 800b558:	00db      	lsls	r3, r3, #3
 800b55a:	1a9b      	subs	r3, r3, r2
 800b55c:	009b      	lsls	r3, r3, #2
 800b55e:	4a6a      	ldr	r2, [pc, #424]	; (800b708 <MX_DataLogTerminal_Init+0x234>)
 800b560:	4413      	add	r3, r2
 800b562:	4619      	mov	r1, r3
 800b564:	f000 fc9c 	bl	800bea0 <CUSTOM_MOTION_SENSOR_GetCapabilities>
    snprintf(dataOut, MAX_BUF_SIZE,
             "\r\nMotion Sensor Instance %d capabilities: \r\n ACCELEROMETER: %d\r\n GYROSCOPE: %d\r\n MAGNETOMETER: %d\r\n LOW POWER: %d\r\n",
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 800b568:	4967      	ldr	r1, [pc, #412]	; (800b708 <MX_DataLogTerminal_Init+0x234>)
 800b56a:	68fa      	ldr	r2, [r7, #12]
 800b56c:	4613      	mov	r3, r2
 800b56e:	00db      	lsls	r3, r3, #3
 800b570:	1a9b      	subs	r3, r3, r2
 800b572:	009b      	lsls	r3, r3, #2
 800b574:	440b      	add	r3, r1
 800b576:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800b578:	4618      	mov	r0, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 800b57a:	4963      	ldr	r1, [pc, #396]	; (800b708 <MX_DataLogTerminal_Init+0x234>)
 800b57c:	68fa      	ldr	r2, [r7, #12]
 800b57e:	4613      	mov	r3, r2
 800b580:	00db      	lsls	r3, r3, #3
 800b582:	1a9b      	subs	r3, r3, r2
 800b584:	009b      	lsls	r3, r3, #2
 800b586:	440b      	add	r3, r1
 800b588:	3301      	adds	r3, #1
 800b58a:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800b58c:	461c      	mov	r4, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 800b58e:	495e      	ldr	r1, [pc, #376]	; (800b708 <MX_DataLogTerminal_Init+0x234>)
 800b590:	68fa      	ldr	r2, [r7, #12]
 800b592:	4613      	mov	r3, r2
 800b594:	00db      	lsls	r3, r3, #3
 800b596:	1a9b      	subs	r3, r3, r2
 800b598:	009b      	lsls	r3, r3, #2
 800b59a:	440b      	add	r3, r1
 800b59c:	3302      	adds	r3, #2
 800b59e:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800b5a0:	461d      	mov	r5, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 800b5a2:	4959      	ldr	r1, [pc, #356]	; (800b708 <MX_DataLogTerminal_Init+0x234>)
 800b5a4:	68fa      	ldr	r2, [r7, #12]
 800b5a6:	4613      	mov	r3, r2
 800b5a8:	00db      	lsls	r3, r3, #3
 800b5aa:	1a9b      	subs	r3, r3, r2
 800b5ac:	009b      	lsls	r3, r3, #2
 800b5ae:	440b      	add	r3, r1
 800b5b0:	3303      	adds	r3, #3
 800b5b2:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800b5b4:	9303      	str	r3, [sp, #12]
 800b5b6:	9502      	str	r5, [sp, #8]
 800b5b8:	9401      	str	r4, [sp, #4]
 800b5ba:	9000      	str	r0, [sp, #0]
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	4a53      	ldr	r2, [pc, #332]	; (800b70c <MX_DataLogTerminal_Init+0x238>)
 800b5c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b5c4:	484d      	ldr	r0, [pc, #308]	; (800b6fc <MX_DataLogTerminal_Init+0x228>)
 800b5c6:	f000 ff8f 	bl	800c4e8 <sniprintf>
    printf("%s", dataOut);
 800b5ca:	494c      	ldr	r1, [pc, #304]	; (800b6fc <MX_DataLogTerminal_Init+0x228>)
 800b5cc:	484c      	ldr	r0, [pc, #304]	; (800b700 <MX_DataLogTerminal_Init+0x22c>)
 800b5ce:	f000 fefd 	bl	800c3cc <iprintf>
    floatToInt(MotionCapabilities[i].AccMaxOdr, &out_value_odr, 3);
 800b5d2:	494d      	ldr	r1, [pc, #308]	; (800b708 <MX_DataLogTerminal_Init+0x234>)
 800b5d4:	68fa      	ldr	r2, [r7, #12]
 800b5d6:	4613      	mov	r3, r2
 800b5d8:	00db      	lsls	r3, r3, #3
 800b5da:	1a9b      	subs	r3, r3, r2
 800b5dc:	009b      	lsls	r3, r3, #2
 800b5de:	440b      	add	r3, r1
 800b5e0:	3314      	adds	r3, #20
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	4639      	mov	r1, r7
 800b5e6:	2203      	movs	r2, #3
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f000 f919 	bl	800b820 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 800b5f2:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 800b5f4:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 800b5f6:	4944      	ldr	r1, [pc, #272]	; (800b708 <MX_DataLogTerminal_Init+0x234>)
 800b5f8:	68fa      	ldr	r2, [r7, #12]
 800b5fa:	4613      	mov	r3, r2
 800b5fc:	00db      	lsls	r3, r3, #3
 800b5fe:	1a9b      	subs	r3, r3, r2
 800b600:	009b      	lsls	r3, r3, #2
 800b602:	440b      	add	r3, r1
 800b604:	3308      	adds	r3, #8
 800b606:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 800b608:	9301      	str	r3, [sp, #4]
 800b60a:	9000      	str	r0, [sp, #0]
 800b60c:	4623      	mov	r3, r4
 800b60e:	4a40      	ldr	r2, [pc, #256]	; (800b710 <MX_DataLogTerminal_Init+0x23c>)
 800b610:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b614:	4839      	ldr	r0, [pc, #228]	; (800b6fc <MX_DataLogTerminal_Init+0x228>)
 800b616:	f000 ff67 	bl	800c4e8 <sniprintf>
    printf("%s", dataOut);
 800b61a:	4938      	ldr	r1, [pc, #224]	; (800b6fc <MX_DataLogTerminal_Init+0x228>)
 800b61c:	4838      	ldr	r0, [pc, #224]	; (800b700 <MX_DataLogTerminal_Init+0x22c>)
 800b61e:	f000 fed5 	bl	800c3cc <iprintf>
    floatToInt(MotionCapabilities[i].GyroMaxOdr, &out_value_odr, 3);
 800b622:	4939      	ldr	r1, [pc, #228]	; (800b708 <MX_DataLogTerminal_Init+0x234>)
 800b624:	68fa      	ldr	r2, [r7, #12]
 800b626:	4613      	mov	r3, r2
 800b628:	00db      	lsls	r3, r3, #3
 800b62a:	1a9b      	subs	r3, r3, r2
 800b62c:	009b      	lsls	r3, r3, #2
 800b62e:	440b      	add	r3, r1
 800b630:	3310      	adds	r3, #16
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	4639      	mov	r1, r7
 800b636:	2203      	movs	r2, #3
 800b638:	4618      	mov	r0, r3
 800b63a:	f000 f8f1 	bl	800b820 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 800b642:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 800b644:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 800b646:	4930      	ldr	r1, [pc, #192]	; (800b708 <MX_DataLogTerminal_Init+0x234>)
 800b648:	68fa      	ldr	r2, [r7, #12]
 800b64a:	4613      	mov	r3, r2
 800b64c:	00db      	lsls	r3, r3, #3
 800b64e:	1a9b      	subs	r3, r3, r2
 800b650:	009b      	lsls	r3, r3, #2
 800b652:	440b      	add	r3, r1
 800b654:	3304      	adds	r3, #4
 800b656:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 800b658:	9301      	str	r3, [sp, #4]
 800b65a:	9000      	str	r0, [sp, #0]
 800b65c:	4623      	mov	r3, r4
 800b65e:	4a2d      	ldr	r2, [pc, #180]	; (800b714 <MX_DataLogTerminal_Init+0x240>)
 800b660:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b664:	4825      	ldr	r0, [pc, #148]	; (800b6fc <MX_DataLogTerminal_Init+0x228>)
 800b666:	f000 ff3f 	bl	800c4e8 <sniprintf>
    printf("%s", dataOut);
 800b66a:	4924      	ldr	r1, [pc, #144]	; (800b6fc <MX_DataLogTerminal_Init+0x228>)
 800b66c:	4824      	ldr	r0, [pc, #144]	; (800b700 <MX_DataLogTerminal_Init+0x22c>)
 800b66e:	f000 fead 	bl	800c3cc <iprintf>
    floatToInt(MotionCapabilities[i].MagMaxOdr, &out_value_odr, 3);
 800b672:	4925      	ldr	r1, [pc, #148]	; (800b708 <MX_DataLogTerminal_Init+0x234>)
 800b674:	68fa      	ldr	r2, [r7, #12]
 800b676:	4613      	mov	r3, r2
 800b678:	00db      	lsls	r3, r3, #3
 800b67a:	1a9b      	subs	r3, r3, r2
 800b67c:	009b      	lsls	r3, r3, #2
 800b67e:	440b      	add	r3, r1
 800b680:	3318      	adds	r3, #24
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	4639      	mov	r1, r7
 800b686:	2203      	movs	r2, #3
 800b688:	4618      	mov	r0, r3
 800b68a:	f000 f8c9 	bl	800b820 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 800b692:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 800b694:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 800b696:	491c      	ldr	r1, [pc, #112]	; (800b708 <MX_DataLogTerminal_Init+0x234>)
 800b698:	68fa      	ldr	r2, [r7, #12]
 800b69a:	4613      	mov	r3, r2
 800b69c:	00db      	lsls	r3, r3, #3
 800b69e:	1a9b      	subs	r3, r3, r2
 800b6a0:	009b      	lsls	r3, r3, #2
 800b6a2:	440b      	add	r3, r1
 800b6a4:	330c      	adds	r3, #12
 800b6a6:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 800b6a8:	9301      	str	r3, [sp, #4]
 800b6aa:	9000      	str	r0, [sp, #0]
 800b6ac:	4623      	mov	r3, r4
 800b6ae:	4a1a      	ldr	r2, [pc, #104]	; (800b718 <MX_DataLogTerminal_Init+0x244>)
 800b6b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b6b4:	4811      	ldr	r0, [pc, #68]	; (800b6fc <MX_DataLogTerminal_Init+0x228>)
 800b6b6:	f000 ff17 	bl	800c4e8 <sniprintf>
    printf("%s", dataOut);
 800b6ba:	4910      	ldr	r1, [pc, #64]	; (800b6fc <MX_DataLogTerminal_Init+0x228>)
 800b6bc:	4810      	ldr	r0, [pc, #64]	; (800b700 <MX_DataLogTerminal_Init+0x22c>)
 800b6be:	f000 fe85 	bl	800c3cc <iprintf>
  for(i = 0; i < CUSTOM_MOTION_INSTANCES_NBR; i++)
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	3301      	adds	r3, #1
 800b6c6:	60fb      	str	r3, [r7, #12]
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	f43f af41 	beq.w	800b552 <MX_DataLogTerminal_Init+0x7e>
  }

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nPlease wait...\r\n");
 800b6d0:	4a12      	ldr	r2, [pc, #72]	; (800b71c <MX_DataLogTerminal_Init+0x248>)
 800b6d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b6d6:	4809      	ldr	r0, [pc, #36]	; (800b6fc <MX_DataLogTerminal_Init+0x228>)
 800b6d8:	f000 ff06 	bl	800c4e8 <sniprintf>
  printf("%s", dataOut);
 800b6dc:	4907      	ldr	r1, [pc, #28]	; (800b6fc <MX_DataLogTerminal_Init+0x228>)
 800b6de:	4808      	ldr	r0, [pc, #32]	; (800b700 <MX_DataLogTerminal_Init+0x22c>)
 800b6e0:	f000 fe74 	bl	800c3cc <iprintf>
  HAL_Delay(5000);
 800b6e4:	f241 3088 	movw	r0, #5000	; 0x1388
 800b6e8:	f7fb f9f0 	bl	8006acc <HAL_Delay>
}
 800b6ec:	bf00      	nop
 800b6ee:	3710      	adds	r7, #16
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bdb0      	pop	{r4, r5, r7, pc}
 800b6f4:	200008e4 	.word	0x200008e4
 800b6f8:	0800e678 	.word	0x0800e678
 800b6fc:	200007e4 	.word	0x200007e4
 800b700:	0800e6c8 	.word	0x0800e6c8
 800b704:	42d00000 	.word	0x42d00000
 800b708:	200007c8 	.word	0x200007c8
 800b70c:	0800e6cc 	.word	0x0800e6cc
 800b710:	0800e740 	.word	0x0800e740
 800b714:	0800e76c 	.word	0x0800e76c
 800b718:	0800e79c 	.word	0x0800e79c
 800b71c:	0800e7c8 	.word	0x0800e7c8

0800b720 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 800b720:	b480      	push	{r7}
 800b722:	b083      	sub	sp, #12
 800b724:	af00      	add	r7, sp, #0
 800b726:	4603      	mov	r3, r0
 800b728:	71fb      	strb	r3, [r7, #7]
  PushButtonDetected = 1;
 800b72a:	4b04      	ldr	r3, [pc, #16]	; (800b73c <BSP_PB_Callback+0x1c>)
 800b72c:	2201      	movs	r2, #1
 800b72e:	701a      	strb	r2, [r3, #0]
}
 800b730:	bf00      	nop
 800b732:	370c      	adds	r7, #12
 800b734:	46bd      	mov	sp, r7
 800b736:	bc80      	pop	{r7}
 800b738:	4770      	bx	lr
 800b73a:	bf00      	nop
 800b73c:	200007c4 	.word	0x200007c4

0800b740 <MX_DataLogTerminal_Process>:
/**
  * @brief  Process of the DataLogTerminal application
  * @retval None
  */
void MX_DataLogTerminal_Process(void)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b082      	sub	sp, #8
 800b744:	af00      	add	r7, sp, #0
  int i;

  if (PushButtonDetected != 0U)
 800b746:	4b30      	ldr	r3, [pc, #192]	; (800b808 <MX_DataLogTerminal_Process+0xc8>)
 800b748:	781b      	ldrb	r3, [r3, #0]
 800b74a:	b2db      	uxtb	r3, r3
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d013      	beq.n	800b778 <MX_DataLogTerminal_Process+0x38>
  {
    /* Debouncing */
    HAL_Delay(50);
 800b750:	2032      	movs	r0, #50	; 0x32
 800b752:	f7fb f9bb 	bl	8006acc <HAL_Delay>

    /* Wait until the button is released */
    while ((BSP_PB_GetState( BUTTON_KEY ) == PushButtonState));
 800b756:	bf00      	nop
 800b758:	2000      	movs	r0, #0
 800b75a:	f7fa ffaf 	bl	80066bc <BSP_PB_GetState>
 800b75e:	4602      	mov	r2, r0
 800b760:	4b2a      	ldr	r3, [pc, #168]	; (800b80c <MX_DataLogTerminal_Process+0xcc>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	429a      	cmp	r2, r3
 800b766:	d0f7      	beq.n	800b758 <MX_DataLogTerminal_Process+0x18>

    /* Debouncing */
    HAL_Delay(50);
 800b768:	2032      	movs	r0, #50	; 0x32
 800b76a:	f7fb f9af 	bl	8006acc <HAL_Delay>

    /* Reset Interrupt flag */
    PushButtonDetected = 0;
 800b76e:	4b26      	ldr	r3, [pc, #152]	; (800b808 <MX_DataLogTerminal_Process+0xc8>)
 800b770:	2200      	movs	r2, #0
 800b772:	701a      	strb	r2, [r3, #0]

    MX_DataLogTerminal_Init();
 800b774:	f7ff feae 	bl	800b4d4 <MX_DataLogTerminal_Init>
  }

  snprintf(dataOut, MAX_BUF_SIZE, "\r\n__________________________________________________________________________\r\n");
 800b778:	4a25      	ldr	r2, [pc, #148]	; (800b810 <MX_DataLogTerminal_Process+0xd0>)
 800b77a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b77e:	4825      	ldr	r0, [pc, #148]	; (800b814 <MX_DataLogTerminal_Process+0xd4>)
 800b780:	f000 feb2 	bl	800c4e8 <sniprintf>
  printf("%s", dataOut);
 800b784:	4923      	ldr	r1, [pc, #140]	; (800b814 <MX_DataLogTerminal_Process+0xd4>)
 800b786:	4824      	ldr	r0, [pc, #144]	; (800b818 <MX_DataLogTerminal_Process+0xd8>)
 800b788:	f000 fe20 	bl	800c3cc <iprintf>

  for(i = 0; i < CUSTOM_MOTION_INSTANCES_NBR; i++)
 800b78c:	2300      	movs	r3, #0
 800b78e:	607b      	str	r3, [r7, #4]
 800b790:	e02e      	b.n	800b7f0 <MX_DataLogTerminal_Process+0xb0>
  {
    if(MotionCapabilities[i].Acc)
 800b792:	4922      	ldr	r1, [pc, #136]	; (800b81c <MX_DataLogTerminal_Process+0xdc>)
 800b794:	687a      	ldr	r2, [r7, #4]
 800b796:	4613      	mov	r3, r2
 800b798:	00db      	lsls	r3, r3, #3
 800b79a:	1a9b      	subs	r3, r3, r2
 800b79c:	009b      	lsls	r3, r3, #2
 800b79e:	440b      	add	r3, r1
 800b7a0:	781b      	ldrb	r3, [r3, #0]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d003      	beq.n	800b7ae <MX_DataLogTerminal_Process+0x6e>
    {
      Motion_Accelero_Sensor_Handler(i);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f000 f8b7 	bl	800b91c <Motion_Accelero_Sensor_Handler>
    }
    if(MotionCapabilities[i].Gyro)
 800b7ae:	491b      	ldr	r1, [pc, #108]	; (800b81c <MX_DataLogTerminal_Process+0xdc>)
 800b7b0:	687a      	ldr	r2, [r7, #4]
 800b7b2:	4613      	mov	r3, r2
 800b7b4:	00db      	lsls	r3, r3, #3
 800b7b6:	1a9b      	subs	r3, r3, r2
 800b7b8:	009b      	lsls	r3, r3, #2
 800b7ba:	440b      	add	r3, r1
 800b7bc:	3301      	adds	r3, #1
 800b7be:	781b      	ldrb	r3, [r3, #0]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d003      	beq.n	800b7cc <MX_DataLogTerminal_Process+0x8c>
    {
      Motion_Gyro_Sensor_Handler(i);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f000 f966 	bl	800ba98 <Motion_Gyro_Sensor_Handler>
    }
    if(MotionCapabilities[i].Magneto)
 800b7cc:	4913      	ldr	r1, [pc, #76]	; (800b81c <MX_DataLogTerminal_Process+0xdc>)
 800b7ce:	687a      	ldr	r2, [r7, #4]
 800b7d0:	4613      	mov	r3, r2
 800b7d2:	00db      	lsls	r3, r3, #3
 800b7d4:	1a9b      	subs	r3, r3, r2
 800b7d6:	009b      	lsls	r3, r3, #2
 800b7d8:	440b      	add	r3, r1
 800b7da:	3302      	adds	r3, #2
 800b7dc:	781b      	ldrb	r3, [r3, #0]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d003      	beq.n	800b7ea <MX_DataLogTerminal_Process+0xaa>
    {
      Motion_Magneto_Sensor_Handler(i);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f000 fa15 	bl	800bc14 <Motion_Magneto_Sensor_Handler>
  for(i = 0; i < CUSTOM_MOTION_INSTANCES_NBR; i++)
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	3301      	adds	r3, #1
 800b7ee:	607b      	str	r3, [r7, #4]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d0cd      	beq.n	800b792 <MX_DataLogTerminal_Process+0x52>
    }
  }

  HAL_Delay( 1000 );
 800b7f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b7fa:	f7fb f967 	bl	8006acc <HAL_Delay>
}
 800b7fe:	bf00      	nop
 800b800:	3708      	adds	r7, #8
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}
 800b806:	bf00      	nop
 800b808:	200007c4 	.word	0x200007c4
 800b80c:	200008e4 	.word	0x200008e4
 800b810:	0800e678 	.word	0x0800e678
 800b814:	200007e4 	.word	0x200007e4
 800b818:	0800e6c8 	.word	0x0800e6c8
 800b81c:	200007c8 	.word	0x200007c8

0800b820 <floatToInt>:
  * @param  out_value the pointer to the output integer structure
  * @param  dec_prec the decimal precision to be used
  * @retval None
  */
static void floatToInt(float in, displayFloatToInt_t *out_value, int32_t dec_prec)
{
 800b820:	b5b0      	push	{r4, r5, r7, lr}
 800b822:	b084      	sub	sp, #16
 800b824:	af00      	add	r7, sp, #0
 800b826:	60f8      	str	r0, [r7, #12]
 800b828:	60b9      	str	r1, [r7, #8]
 800b82a:	607a      	str	r2, [r7, #4]
  if(in >= 0.0f)
 800b82c:	f04f 0100 	mov.w	r1, #0
 800b830:	68f8      	ldr	r0, [r7, #12]
 800b832:	f7f5 fca1 	bl	8001178 <__aeabi_fcmpge>
 800b836:	4603      	mov	r3, r0
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d003      	beq.n	800b844 <floatToInt+0x24>
  {
    out_value->sign = 0;
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	2200      	movs	r2, #0
 800b840:	701a      	strb	r2, [r3, #0]
 800b842:	e006      	b.n	800b852 <floatToInt+0x32>
  }else
  {
    out_value->sign = 1;
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	2201      	movs	r2, #1
 800b848:	701a      	strb	r2, [r3, #0]
    in = -in;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b850:	60fb      	str	r3, [r7, #12]
  }

  in = in + (0.5f / pow(10, dec_prec));
 800b852:	68f8      	ldr	r0, [r7, #12]
 800b854:	f7f4 fe50 	bl	80004f8 <__aeabi_f2d>
 800b858:	4604      	mov	r4, r0
 800b85a:	460d      	mov	r5, r1
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f7f4 fe39 	bl	80004d4 <__aeabi_i2d>
 800b862:	4602      	mov	r2, r0
 800b864:	460b      	mov	r3, r1
 800b866:	f04f 0000 	mov.w	r0, #0
 800b86a:	492a      	ldr	r1, [pc, #168]	; (800b914 <floatToInt+0xf4>)
 800b86c:	f001 ffea 	bl	800d844 <pow>
 800b870:	4602      	mov	r2, r0
 800b872:	460b      	mov	r3, r1
 800b874:	f04f 0000 	mov.w	r0, #0
 800b878:	4927      	ldr	r1, [pc, #156]	; (800b918 <floatToInt+0xf8>)
 800b87a:	f7f4 ffbf 	bl	80007fc <__aeabi_ddiv>
 800b87e:	4602      	mov	r2, r0
 800b880:	460b      	mov	r3, r1
 800b882:	4620      	mov	r0, r4
 800b884:	4629      	mov	r1, r5
 800b886:	f7f4 fcd9 	bl	800023c <__adddf3>
 800b88a:	4602      	mov	r2, r0
 800b88c:	460b      	mov	r3, r1
 800b88e:	4610      	mov	r0, r2
 800b890:	4619      	mov	r1, r3
 800b892:	f7f5 f961 	bl	8000b58 <__aeabi_d2f>
 800b896:	4603      	mov	r3, r0
 800b898:	60fb      	str	r3, [r7, #12]
  out_value->out_int = (int32_t)in;
 800b89a:	68f8      	ldr	r0, [r7, #12]
 800b89c:	f7f5 fc80 	bl	80011a0 <__aeabi_f2iz>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	461a      	mov	r2, r3
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	605a      	str	r2, [r3, #4]
  in = in - (float)(out_value->out_int);
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	685b      	ldr	r3, [r3, #4]
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f7f5 fa59 	bl	8000d64 <__aeabi_ui2f>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	68f8      	ldr	r0, [r7, #12]
 800b8b8:	f7f5 f9a2 	bl	8000c00 <__aeabi_fsub>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	60fb      	str	r3, [r7, #12]
  out_value->out_dec = (int32_t)trunc(in * pow(10, dec_prec));
 800b8c0:	68f8      	ldr	r0, [r7, #12]
 800b8c2:	f7f4 fe19 	bl	80004f8 <__aeabi_f2d>
 800b8c6:	4604      	mov	r4, r0
 800b8c8:	460d      	mov	r5, r1
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f7f4 fe02 	bl	80004d4 <__aeabi_i2d>
 800b8d0:	4602      	mov	r2, r0
 800b8d2:	460b      	mov	r3, r1
 800b8d4:	f04f 0000 	mov.w	r0, #0
 800b8d8:	490e      	ldr	r1, [pc, #56]	; (800b914 <floatToInt+0xf4>)
 800b8da:	f001 ffb3 	bl	800d844 <pow>
 800b8de:	4602      	mov	r2, r0
 800b8e0:	460b      	mov	r3, r1
 800b8e2:	4620      	mov	r0, r4
 800b8e4:	4629      	mov	r1, r5
 800b8e6:	f7f4 fe5f 	bl	80005a8 <__aeabi_dmul>
 800b8ea:	4602      	mov	r2, r0
 800b8ec:	460b      	mov	r3, r1
 800b8ee:	4610      	mov	r0, r2
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	f001 ff77 	bl	800d7e4 <trunc>
 800b8f6:	4602      	mov	r2, r0
 800b8f8:	460b      	mov	r3, r1
 800b8fa:	4610      	mov	r0, r2
 800b8fc:	4619      	mov	r1, r3
 800b8fe:	f7f5 f903 	bl	8000b08 <__aeabi_d2iz>
 800b902:	4603      	mov	r3, r0
 800b904:	461a      	mov	r2, r3
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	609a      	str	r2, [r3, #8]
}
 800b90a:	bf00      	nop
 800b90c:	3710      	adds	r7, #16
 800b90e:	46bd      	mov	sp, r7
 800b910:	bdb0      	pop	{r4, r5, r7, pc}
 800b912:	bf00      	nop
 800b914:	40240000 	.word	0x40240000
 800b918:	3fe00000 	.word	0x3fe00000

0800b91c <Motion_Accelero_Sensor_Handler>:
  * @brief  Handles the accelerometer axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Motion_Accelero_Sensor_Handler(uint32_t Instance)
{
 800b91c:	b5b0      	push	{r4, r5, r7, lr}
 800b91e:	b092      	sub	sp, #72	; 0x48
 800b920:	af06      	add	r7, sp, #24
 800b922:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  CUSTOM_MOTION_SENSOR_Axes_t acceleration;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nMotion sensor instance %d:", (int)Instance);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	4a50      	ldr	r2, [pc, #320]	; (800ba68 <Motion_Accelero_Sensor_Handler+0x14c>)
 800b928:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b92c:	484f      	ldr	r0, [pc, #316]	; (800ba6c <Motion_Accelero_Sensor_Handler+0x150>)
 800b92e:	f000 fddb 	bl	800c4e8 <sniprintf>
  printf("%s", dataOut);
 800b932:	494e      	ldr	r1, [pc, #312]	; (800ba6c <Motion_Accelero_Sensor_Handler+0x150>)
 800b934:	484e      	ldr	r0, [pc, #312]	; (800ba70 <Motion_Accelero_Sensor_Handler+0x154>)
 800b936:	f000 fd49 	bl	800c3cc <iprintf>

  if (CUSTOM_MOTION_SENSOR_GetAxes(Instance, MOTION_ACCELERO, &acceleration))
 800b93a:	f107 031c 	add.w	r3, r7, #28
 800b93e:	461a      	mov	r2, r3
 800b940:	2102      	movs	r1, #2
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f000 fb00 	bl	800bf48 <CUSTOM_MOTION_SENSOR_GetAxes>
 800b948:	4603      	mov	r3, r0
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d007      	beq.n	800b95e <Motion_Accelero_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC[%d]: Error\r\n", (int)Instance);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	4a48      	ldr	r2, [pc, #288]	; (800ba74 <Motion_Accelero_Sensor_Handler+0x158>)
 800b952:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b956:	4845      	ldr	r0, [pc, #276]	; (800ba6c <Motion_Accelero_Sensor_Handler+0x150>)
 800b958:	f000 fdc6 	bl	800c4e8 <sniprintf>
 800b95c:	e011      	b.n	800b982 <Motion_Accelero_Sensor_Handler+0x66>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 800b95e:	687d      	ldr	r5, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 800b960:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 800b962:	687a      	ldr	r2, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 800b964:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 800b966:	6878      	ldr	r0, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 800b968:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 800b96a:	9404      	str	r4, [sp, #16]
 800b96c:	9003      	str	r0, [sp, #12]
 800b96e:	9102      	str	r1, [sp, #8]
 800b970:	9201      	str	r2, [sp, #4]
 800b972:	9300      	str	r3, [sp, #0]
 800b974:	462b      	mov	r3, r5
 800b976:	4a40      	ldr	r2, [pc, #256]	; (800ba78 <Motion_Accelero_Sensor_Handler+0x15c>)
 800b978:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b97c:	483b      	ldr	r0, [pc, #236]	; (800ba6c <Motion_Accelero_Sensor_Handler+0x150>)
 800b97e:	f000 fdb3 	bl	800c4e8 <sniprintf>
  }

  printf("%s", dataOut);
 800b982:	493a      	ldr	r1, [pc, #232]	; (800ba6c <Motion_Accelero_Sensor_Handler+0x150>)
 800b984:	483a      	ldr	r0, [pc, #232]	; (800ba70 <Motion_Accelero_Sensor_Handler+0x154>)
 800b986:	f000 fd21 	bl	800c3cc <iprintf>

  if (verbose == 1)
 800b98a:	4b3c      	ldr	r3, [pc, #240]	; (800ba7c <Motion_Accelero_Sensor_Handler+0x160>)
 800b98c:	781b      	ldrb	r3, [r3, #0]
 800b98e:	2b01      	cmp	r3, #1
 800b990:	d165      	bne.n	800ba5e <Motion_Accelero_Sensor_Handler+0x142>
  {
    if (CUSTOM_MOTION_SENSOR_ReadID(Instance, &whoami))
 800b992:	f107 030f 	add.w	r3, r7, #15
 800b996:	4619      	mov	r1, r3
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f000 faab 	bl	800bef4 <CUSTOM_MOTION_SENSOR_ReadID>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d007      	beq.n	800b9b4 <Motion_Accelero_Sensor_Handler+0x98>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	4a36      	ldr	r2, [pc, #216]	; (800ba80 <Motion_Accelero_Sensor_Handler+0x164>)
 800b9a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b9ac:	482f      	ldr	r0, [pc, #188]	; (800ba6c <Motion_Accelero_Sensor_Handler+0x150>)
 800b9ae:	f000 fd9b 	bl	800c4e8 <sniprintf>
 800b9b2:	e008      	b.n	800b9c6 <Motion_Accelero_Sensor_Handler+0xaa>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	7bfa      	ldrb	r2, [r7, #15]
 800b9b8:	9200      	str	r2, [sp, #0]
 800b9ba:	4a32      	ldr	r2, [pc, #200]	; (800ba84 <Motion_Accelero_Sensor_Handler+0x168>)
 800b9bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b9c0:	482a      	ldr	r0, [pc, #168]	; (800ba6c <Motion_Accelero_Sensor_Handler+0x150>)
 800b9c2:	f000 fd91 	bl	800c4e8 <sniprintf>
    }

    printf("%s", dataOut);
 800b9c6:	4929      	ldr	r1, [pc, #164]	; (800ba6c <Motion_Accelero_Sensor_Handler+0x150>)
 800b9c8:	4829      	ldr	r0, [pc, #164]	; (800ba70 <Motion_Accelero_Sensor_Handler+0x154>)
 800b9ca:	f000 fcff 	bl	800c3cc <iprintf>

    if (CUSTOM_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_ACCELERO, &odr))
 800b9ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b9d2:	461a      	mov	r2, r3
 800b9d4:	2102      	movs	r1, #2
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f000 fafa 	bl	800bfd0 <CUSTOM_MOTION_SENSOR_GetOutputDataRate>
 800b9dc:	4603      	mov	r3, r0
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d007      	beq.n	800b9f2 <Motion_Accelero_Sensor_Handler+0xd6>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	4a28      	ldr	r2, [pc, #160]	; (800ba88 <Motion_Accelero_Sensor_Handler+0x16c>)
 800b9e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b9ea:	4820      	ldr	r0, [pc, #128]	; (800ba6c <Motion_Accelero_Sensor_Handler+0x150>)
 800b9ec:	f000 fd7c 	bl	800c4e8 <sniprintf>
 800b9f0:	e011      	b.n	800ba16 <Motion_Accelero_Sensor_Handler+0xfa>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 800b9f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9f4:	f107 0110 	add.w	r1, r7, #16
 800b9f8:	2203      	movs	r2, #3
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f7ff ff10 	bl	800b820 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 800ba04:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800ba06:	9101      	str	r1, [sp, #4]
 800ba08:	9200      	str	r2, [sp, #0]
 800ba0a:	4a20      	ldr	r2, [pc, #128]	; (800ba8c <Motion_Accelero_Sensor_Handler+0x170>)
 800ba0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ba10:	4816      	ldr	r0, [pc, #88]	; (800ba6c <Motion_Accelero_Sensor_Handler+0x150>)
 800ba12:	f000 fd69 	bl	800c4e8 <sniprintf>
    }

    printf("%s", dataOut);
 800ba16:	4915      	ldr	r1, [pc, #84]	; (800ba6c <Motion_Accelero_Sensor_Handler+0x150>)
 800ba18:	4815      	ldr	r0, [pc, #84]	; (800ba70 <Motion_Accelero_Sensor_Handler+0x154>)
 800ba1a:	f000 fcd7 	bl	800c3cc <iprintf>

    if (CUSTOM_MOTION_SENSOR_GetFullScale(Instance, MOTION_ACCELERO, &fullScale))
 800ba1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ba22:	461a      	mov	r2, r3
 800ba24:	2102      	movs	r1, #2
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f000 fb16 	bl	800c058 <CUSTOM_MOTION_SENSOR_GetFullScale>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d007      	beq.n	800ba42 <Motion_Accelero_Sensor_Handler+0x126>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	4a16      	ldr	r2, [pc, #88]	; (800ba90 <Motion_Accelero_Sensor_Handler+0x174>)
 800ba36:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ba3a:	480c      	ldr	r0, [pc, #48]	; (800ba6c <Motion_Accelero_Sensor_Handler+0x150>)
 800ba3c:	f000 fd54 	bl	800c4e8 <sniprintf>
 800ba40:	e009      	b.n	800ba56 <Motion_Accelero_Sensor_Handler+0x13a>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d g\r\n", (int)Instance, (int)fullScale);
 800ba42:	687a      	ldr	r2, [r7, #4]
 800ba44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba46:	9300      	str	r3, [sp, #0]
 800ba48:	4613      	mov	r3, r2
 800ba4a:	4a12      	ldr	r2, [pc, #72]	; (800ba94 <Motion_Accelero_Sensor_Handler+0x178>)
 800ba4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ba50:	4806      	ldr	r0, [pc, #24]	; (800ba6c <Motion_Accelero_Sensor_Handler+0x150>)
 800ba52:	f000 fd49 	bl	800c4e8 <sniprintf>
    }

    printf("%s", dataOut);
 800ba56:	4905      	ldr	r1, [pc, #20]	; (800ba6c <Motion_Accelero_Sensor_Handler+0x150>)
 800ba58:	4805      	ldr	r0, [pc, #20]	; (800ba70 <Motion_Accelero_Sensor_Handler+0x154>)
 800ba5a:	f000 fcb7 	bl	800c3cc <iprintf>
  }
}
 800ba5e:	bf00      	nop
 800ba60:	3730      	adds	r7, #48	; 0x30
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bdb0      	pop	{r4, r5, r7, pc}
 800ba66:	bf00      	nop
 800ba68:	0800e7dc 	.word	0x0800e7dc
 800ba6c:	200007e4 	.word	0x200007e4
 800ba70:	0800e6c8 	.word	0x0800e6c8
 800ba74:	0800e7fc 	.word	0x0800e7fc
 800ba78:	0800e810 	.word	0x0800e810
 800ba7c:	20000071 	.word	0x20000071
 800ba80:	0800e840 	.word	0x0800e840
 800ba84:	0800e854 	.word	0x0800e854
 800ba88:	0800e868 	.word	0x0800e868
 800ba8c:	0800e87c 	.word	0x0800e87c
 800ba90:	0800e894 	.word	0x0800e894
 800ba94:	0800e8a4 	.word	0x0800e8a4

0800ba98 <Motion_Gyro_Sensor_Handler>:
  * @brief  Handles the gyroscope axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Motion_Gyro_Sensor_Handler(uint32_t Instance)
{
 800ba98:	b5b0      	push	{r4, r5, r7, lr}
 800ba9a:	b092      	sub	sp, #72	; 0x48
 800ba9c:	af06      	add	r7, sp, #24
 800ba9e:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  CUSTOM_MOTION_SENSOR_Axes_t angular_velocity;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nMotion sensor instance %d:", (int)Instance);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	4a50      	ldr	r2, [pc, #320]	; (800bbe4 <Motion_Gyro_Sensor_Handler+0x14c>)
 800baa4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800baa8:	484f      	ldr	r0, [pc, #316]	; (800bbe8 <Motion_Gyro_Sensor_Handler+0x150>)
 800baaa:	f000 fd1d 	bl	800c4e8 <sniprintf>
  printf("%s", dataOut);
 800baae:	494e      	ldr	r1, [pc, #312]	; (800bbe8 <Motion_Gyro_Sensor_Handler+0x150>)
 800bab0:	484e      	ldr	r0, [pc, #312]	; (800bbec <Motion_Gyro_Sensor_Handler+0x154>)
 800bab2:	f000 fc8b 	bl	800c3cc <iprintf>

  if (CUSTOM_MOTION_SENSOR_GetAxes(Instance, MOTION_GYRO, &angular_velocity))
 800bab6:	f107 031c 	add.w	r3, r7, #28
 800baba:	461a      	mov	r2, r3
 800babc:	2101      	movs	r1, #1
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f000 fa42 	bl	800bf48 <CUSTOM_MOTION_SENSOR_GetAxes>
 800bac4:	4603      	mov	r3, r0
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d007      	beq.n	800bada <Motion_Gyro_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR[%d]: Error\r\n", (int)Instance);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	4a48      	ldr	r2, [pc, #288]	; (800bbf0 <Motion_Gyro_Sensor_Handler+0x158>)
 800bace:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bad2:	4845      	ldr	r0, [pc, #276]	; (800bbe8 <Motion_Gyro_Sensor_Handler+0x150>)
 800bad4:	f000 fd08 	bl	800c4e8 <sniprintf>
 800bad8:	e011      	b.n	800bafe <Motion_Gyro_Sensor_Handler+0x66>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 800bada:	687d      	ldr	r5, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 800badc:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 800bade:	687a      	ldr	r2, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 800bae0:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 800bae2:	6878      	ldr	r0, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 800bae4:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 800bae6:	9404      	str	r4, [sp, #16]
 800bae8:	9003      	str	r0, [sp, #12]
 800baea:	9102      	str	r1, [sp, #8]
 800baec:	9201      	str	r2, [sp, #4]
 800baee:	9300      	str	r3, [sp, #0]
 800baf0:	462b      	mov	r3, r5
 800baf2:	4a40      	ldr	r2, [pc, #256]	; (800bbf4 <Motion_Gyro_Sensor_Handler+0x15c>)
 800baf4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800baf8:	483b      	ldr	r0, [pc, #236]	; (800bbe8 <Motion_Gyro_Sensor_Handler+0x150>)
 800bafa:	f000 fcf5 	bl	800c4e8 <sniprintf>
  }

  printf("%s", dataOut);
 800bafe:	493a      	ldr	r1, [pc, #232]	; (800bbe8 <Motion_Gyro_Sensor_Handler+0x150>)
 800bb00:	483a      	ldr	r0, [pc, #232]	; (800bbec <Motion_Gyro_Sensor_Handler+0x154>)
 800bb02:	f000 fc63 	bl	800c3cc <iprintf>

  if (verbose == 1)
 800bb06:	4b3c      	ldr	r3, [pc, #240]	; (800bbf8 <Motion_Gyro_Sensor_Handler+0x160>)
 800bb08:	781b      	ldrb	r3, [r3, #0]
 800bb0a:	2b01      	cmp	r3, #1
 800bb0c:	d165      	bne.n	800bbda <Motion_Gyro_Sensor_Handler+0x142>
  {
    if (CUSTOM_MOTION_SENSOR_ReadID(Instance, &whoami))
 800bb0e:	f107 030f 	add.w	r3, r7, #15
 800bb12:	4619      	mov	r1, r3
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f000 f9ed 	bl	800bef4 <CUSTOM_MOTION_SENSOR_ReadID>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d007      	beq.n	800bb30 <Motion_Gyro_Sensor_Handler+0x98>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	4a36      	ldr	r2, [pc, #216]	; (800bbfc <Motion_Gyro_Sensor_Handler+0x164>)
 800bb24:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bb28:	482f      	ldr	r0, [pc, #188]	; (800bbe8 <Motion_Gyro_Sensor_Handler+0x150>)
 800bb2a:	f000 fcdd 	bl	800c4e8 <sniprintf>
 800bb2e:	e008      	b.n	800bb42 <Motion_Gyro_Sensor_Handler+0xaa>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	7bfa      	ldrb	r2, [r7, #15]
 800bb34:	9200      	str	r2, [sp, #0]
 800bb36:	4a32      	ldr	r2, [pc, #200]	; (800bc00 <Motion_Gyro_Sensor_Handler+0x168>)
 800bb38:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bb3c:	482a      	ldr	r0, [pc, #168]	; (800bbe8 <Motion_Gyro_Sensor_Handler+0x150>)
 800bb3e:	f000 fcd3 	bl	800c4e8 <sniprintf>
    }

    printf("%s", dataOut);
 800bb42:	4929      	ldr	r1, [pc, #164]	; (800bbe8 <Motion_Gyro_Sensor_Handler+0x150>)
 800bb44:	4829      	ldr	r0, [pc, #164]	; (800bbec <Motion_Gyro_Sensor_Handler+0x154>)
 800bb46:	f000 fc41 	bl	800c3cc <iprintf>

    if (CUSTOM_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_GYRO, &odr))
 800bb4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bb4e:	461a      	mov	r2, r3
 800bb50:	2101      	movs	r1, #1
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f000 fa3c 	bl	800bfd0 <CUSTOM_MOTION_SENSOR_GetOutputDataRate>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d007      	beq.n	800bb6e <Motion_Gyro_Sensor_Handler+0xd6>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	4a28      	ldr	r2, [pc, #160]	; (800bc04 <Motion_Gyro_Sensor_Handler+0x16c>)
 800bb62:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bb66:	4820      	ldr	r0, [pc, #128]	; (800bbe8 <Motion_Gyro_Sensor_Handler+0x150>)
 800bb68:	f000 fcbe 	bl	800c4e8 <sniprintf>
 800bb6c:	e011      	b.n	800bb92 <Motion_Gyro_Sensor_Handler+0xfa>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 800bb6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb70:	f107 0110 	add.w	r1, r7, #16
 800bb74:	2203      	movs	r2, #3
 800bb76:	4618      	mov	r0, r3
 800bb78:	f7ff fe52 	bl	800b820 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 800bb80:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800bb82:	9101      	str	r1, [sp, #4]
 800bb84:	9200      	str	r2, [sp, #0]
 800bb86:	4a20      	ldr	r2, [pc, #128]	; (800bc08 <Motion_Gyro_Sensor_Handler+0x170>)
 800bb88:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bb8c:	4816      	ldr	r0, [pc, #88]	; (800bbe8 <Motion_Gyro_Sensor_Handler+0x150>)
 800bb8e:	f000 fcab 	bl	800c4e8 <sniprintf>
    }

    printf("%s", dataOut);
 800bb92:	4915      	ldr	r1, [pc, #84]	; (800bbe8 <Motion_Gyro_Sensor_Handler+0x150>)
 800bb94:	4815      	ldr	r0, [pc, #84]	; (800bbec <Motion_Gyro_Sensor_Handler+0x154>)
 800bb96:	f000 fc19 	bl	800c3cc <iprintf>

    if (CUSTOM_MOTION_SENSOR_GetFullScale(Instance, MOTION_GYRO, &fullScale))
 800bb9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bb9e:	461a      	mov	r2, r3
 800bba0:	2101      	movs	r1, #1
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f000 fa58 	bl	800c058 <CUSTOM_MOTION_SENSOR_GetFullScale>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d007      	beq.n	800bbbe <Motion_Gyro_Sensor_Handler+0x126>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	4a16      	ldr	r2, [pc, #88]	; (800bc0c <Motion_Gyro_Sensor_Handler+0x174>)
 800bbb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bbb6:	480c      	ldr	r0, [pc, #48]	; (800bbe8 <Motion_Gyro_Sensor_Handler+0x150>)
 800bbb8:	f000 fc96 	bl	800c4e8 <sniprintf>
 800bbbc:	e009      	b.n	800bbd2 <Motion_Gyro_Sensor_Handler+0x13a>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d dps\r\n", (int)Instance, (int)fullScale);
 800bbbe:	687a      	ldr	r2, [r7, #4]
 800bbc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbc2:	9300      	str	r3, [sp, #0]
 800bbc4:	4613      	mov	r3, r2
 800bbc6:	4a12      	ldr	r2, [pc, #72]	; (800bc10 <Motion_Gyro_Sensor_Handler+0x178>)
 800bbc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bbcc:	4806      	ldr	r0, [pc, #24]	; (800bbe8 <Motion_Gyro_Sensor_Handler+0x150>)
 800bbce:	f000 fc8b 	bl	800c4e8 <sniprintf>
    }

    printf("%s", dataOut);
 800bbd2:	4905      	ldr	r1, [pc, #20]	; (800bbe8 <Motion_Gyro_Sensor_Handler+0x150>)
 800bbd4:	4805      	ldr	r0, [pc, #20]	; (800bbec <Motion_Gyro_Sensor_Handler+0x154>)
 800bbd6:	f000 fbf9 	bl	800c3cc <iprintf>
  }
}
 800bbda:	bf00      	nop
 800bbdc:	3730      	adds	r7, #48	; 0x30
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bdb0      	pop	{r4, r5, r7, pc}
 800bbe2:	bf00      	nop
 800bbe4:	0800e7dc 	.word	0x0800e7dc
 800bbe8:	200007e4 	.word	0x200007e4
 800bbec:	0800e6c8 	.word	0x0800e6c8
 800bbf0:	0800e8b4 	.word	0x0800e8b4
 800bbf4:	0800e8c8 	.word	0x0800e8c8
 800bbf8:	20000071 	.word	0x20000071
 800bbfc:	0800e840 	.word	0x0800e840
 800bc00:	0800e854 	.word	0x0800e854
 800bc04:	0800e868 	.word	0x0800e868
 800bc08:	0800e87c 	.word	0x0800e87c
 800bc0c:	0800e894 	.word	0x0800e894
 800bc10:	0800e8f8 	.word	0x0800e8f8

0800bc14 <Motion_Magneto_Sensor_Handler>:
  * @brief  Handles the magneto axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Motion_Magneto_Sensor_Handler(uint32_t Instance)
{
 800bc14:	b5b0      	push	{r4, r5, r7, lr}
 800bc16:	b092      	sub	sp, #72	; 0x48
 800bc18:	af06      	add	r7, sp, #24
 800bc1a:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  CUSTOM_MOTION_SENSOR_Axes_t magnetic_field;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nMotion sensor instance %d:", (int)Instance);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	4a50      	ldr	r2, [pc, #320]	; (800bd60 <Motion_Magneto_Sensor_Handler+0x14c>)
 800bc20:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bc24:	484f      	ldr	r0, [pc, #316]	; (800bd64 <Motion_Magneto_Sensor_Handler+0x150>)
 800bc26:	f000 fc5f 	bl	800c4e8 <sniprintf>
  printf("%s", dataOut);
 800bc2a:	494e      	ldr	r1, [pc, #312]	; (800bd64 <Motion_Magneto_Sensor_Handler+0x150>)
 800bc2c:	484e      	ldr	r0, [pc, #312]	; (800bd68 <Motion_Magneto_Sensor_Handler+0x154>)
 800bc2e:	f000 fbcd 	bl	800c3cc <iprintf>

  if (CUSTOM_MOTION_SENSOR_GetAxes(Instance, MOTION_MAGNETO, &magnetic_field))
 800bc32:	f107 031c 	add.w	r3, r7, #28
 800bc36:	461a      	mov	r2, r3
 800bc38:	2104      	movs	r1, #4
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f000 f984 	bl	800bf48 <CUSTOM_MOTION_SENSOR_GetAxes>
 800bc40:	4603      	mov	r3, r0
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d007      	beq.n	800bc56 <Motion_Magneto_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG[%d]: Error\r\n", (int)Instance);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	4a48      	ldr	r2, [pc, #288]	; (800bd6c <Motion_Magneto_Sensor_Handler+0x158>)
 800bc4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bc4e:	4845      	ldr	r0, [pc, #276]	; (800bd64 <Motion_Magneto_Sensor_Handler+0x150>)
 800bc50:	f000 fc4a 	bl	800c4e8 <sniprintf>
 800bc54:	e011      	b.n	800bc7a <Motion_Magneto_Sensor_Handler+0x66>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 800bc56:	687d      	ldr	r5, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 800bc58:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 800bc5a:	687a      	ldr	r2, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 800bc5c:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 800bc5e:	6878      	ldr	r0, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 800bc60:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 800bc62:	9404      	str	r4, [sp, #16]
 800bc64:	9003      	str	r0, [sp, #12]
 800bc66:	9102      	str	r1, [sp, #8]
 800bc68:	9201      	str	r2, [sp, #4]
 800bc6a:	9300      	str	r3, [sp, #0]
 800bc6c:	462b      	mov	r3, r5
 800bc6e:	4a40      	ldr	r2, [pc, #256]	; (800bd70 <Motion_Magneto_Sensor_Handler+0x15c>)
 800bc70:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bc74:	483b      	ldr	r0, [pc, #236]	; (800bd64 <Motion_Magneto_Sensor_Handler+0x150>)
 800bc76:	f000 fc37 	bl	800c4e8 <sniprintf>
  }

  printf("%s", dataOut);
 800bc7a:	493a      	ldr	r1, [pc, #232]	; (800bd64 <Motion_Magneto_Sensor_Handler+0x150>)
 800bc7c:	483a      	ldr	r0, [pc, #232]	; (800bd68 <Motion_Magneto_Sensor_Handler+0x154>)
 800bc7e:	f000 fba5 	bl	800c3cc <iprintf>

  if (verbose == 1)
 800bc82:	4b3c      	ldr	r3, [pc, #240]	; (800bd74 <Motion_Magneto_Sensor_Handler+0x160>)
 800bc84:	781b      	ldrb	r3, [r3, #0]
 800bc86:	2b01      	cmp	r3, #1
 800bc88:	d165      	bne.n	800bd56 <Motion_Magneto_Sensor_Handler+0x142>
  {
    if (CUSTOM_MOTION_SENSOR_ReadID(Instance, &whoami))
 800bc8a:	f107 030f 	add.w	r3, r7, #15
 800bc8e:	4619      	mov	r1, r3
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f000 f92f 	bl	800bef4 <CUSTOM_MOTION_SENSOR_ReadID>
 800bc96:	4603      	mov	r3, r0
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d007      	beq.n	800bcac <Motion_Magneto_Sensor_Handler+0x98>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	4a36      	ldr	r2, [pc, #216]	; (800bd78 <Motion_Magneto_Sensor_Handler+0x164>)
 800bca0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bca4:	482f      	ldr	r0, [pc, #188]	; (800bd64 <Motion_Magneto_Sensor_Handler+0x150>)
 800bca6:	f000 fc1f 	bl	800c4e8 <sniprintf>
 800bcaa:	e008      	b.n	800bcbe <Motion_Magneto_Sensor_Handler+0xaa>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	7bfa      	ldrb	r2, [r7, #15]
 800bcb0:	9200      	str	r2, [sp, #0]
 800bcb2:	4a32      	ldr	r2, [pc, #200]	; (800bd7c <Motion_Magneto_Sensor_Handler+0x168>)
 800bcb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bcb8:	482a      	ldr	r0, [pc, #168]	; (800bd64 <Motion_Magneto_Sensor_Handler+0x150>)
 800bcba:	f000 fc15 	bl	800c4e8 <sniprintf>
    }

    printf("%s", dataOut);
 800bcbe:	4929      	ldr	r1, [pc, #164]	; (800bd64 <Motion_Magneto_Sensor_Handler+0x150>)
 800bcc0:	4829      	ldr	r0, [pc, #164]	; (800bd68 <Motion_Magneto_Sensor_Handler+0x154>)
 800bcc2:	f000 fb83 	bl	800c3cc <iprintf>

    if (CUSTOM_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_MAGNETO, &odr))
 800bcc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bcca:	461a      	mov	r2, r3
 800bccc:	2104      	movs	r1, #4
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f000 f97e 	bl	800bfd0 <CUSTOM_MOTION_SENSOR_GetOutputDataRate>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d007      	beq.n	800bcea <Motion_Magneto_Sensor_Handler+0xd6>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	4a28      	ldr	r2, [pc, #160]	; (800bd80 <Motion_Magneto_Sensor_Handler+0x16c>)
 800bcde:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bce2:	4820      	ldr	r0, [pc, #128]	; (800bd64 <Motion_Magneto_Sensor_Handler+0x150>)
 800bce4:	f000 fc00 	bl	800c4e8 <sniprintf>
 800bce8:	e011      	b.n	800bd0e <Motion_Magneto_Sensor_Handler+0xfa>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 800bcea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcec:	f107 0110 	add.w	r1, r7, #16
 800bcf0:	2203      	movs	r2, #3
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f7ff fd94 	bl	800b820 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 800bcfc:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800bcfe:	9101      	str	r1, [sp, #4]
 800bd00:	9200      	str	r2, [sp, #0]
 800bd02:	4a20      	ldr	r2, [pc, #128]	; (800bd84 <Motion_Magneto_Sensor_Handler+0x170>)
 800bd04:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bd08:	4816      	ldr	r0, [pc, #88]	; (800bd64 <Motion_Magneto_Sensor_Handler+0x150>)
 800bd0a:	f000 fbed 	bl	800c4e8 <sniprintf>
    }

    printf("%s", dataOut);
 800bd0e:	4915      	ldr	r1, [pc, #84]	; (800bd64 <Motion_Magneto_Sensor_Handler+0x150>)
 800bd10:	4815      	ldr	r0, [pc, #84]	; (800bd68 <Motion_Magneto_Sensor_Handler+0x154>)
 800bd12:	f000 fb5b 	bl	800c3cc <iprintf>

    if (CUSTOM_MOTION_SENSOR_GetFullScale(Instance, MOTION_MAGNETO, &fullScale))
 800bd16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bd1a:	461a      	mov	r2, r3
 800bd1c:	2104      	movs	r1, #4
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f000 f99a 	bl	800c058 <CUSTOM_MOTION_SENSOR_GetFullScale>
 800bd24:	4603      	mov	r3, r0
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d007      	beq.n	800bd3a <Motion_Magneto_Sensor_Handler+0x126>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	4a16      	ldr	r2, [pc, #88]	; (800bd88 <Motion_Magneto_Sensor_Handler+0x174>)
 800bd2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bd32:	480c      	ldr	r0, [pc, #48]	; (800bd64 <Motion_Magneto_Sensor_Handler+0x150>)
 800bd34:	f000 fbd8 	bl	800c4e8 <sniprintf>
 800bd38:	e009      	b.n	800bd4e <Motion_Magneto_Sensor_Handler+0x13a>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d gauss\r\n", (int)Instance, (int)fullScale);
 800bd3a:	687a      	ldr	r2, [r7, #4]
 800bd3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd3e:	9300      	str	r3, [sp, #0]
 800bd40:	4613      	mov	r3, r2
 800bd42:	4a12      	ldr	r2, [pc, #72]	; (800bd8c <Motion_Magneto_Sensor_Handler+0x178>)
 800bd44:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bd48:	4806      	ldr	r0, [pc, #24]	; (800bd64 <Motion_Magneto_Sensor_Handler+0x150>)
 800bd4a:	f000 fbcd 	bl	800c4e8 <sniprintf>
    }

    printf("%s", dataOut);
 800bd4e:	4905      	ldr	r1, [pc, #20]	; (800bd64 <Motion_Magneto_Sensor_Handler+0x150>)
 800bd50:	4805      	ldr	r0, [pc, #20]	; (800bd68 <Motion_Magneto_Sensor_Handler+0x154>)
 800bd52:	f000 fb3b 	bl	800c3cc <iprintf>
  }
}
 800bd56:	bf00      	nop
 800bd58:	3730      	adds	r7, #48	; 0x30
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bdb0      	pop	{r4, r5, r7, pc}
 800bd5e:	bf00      	nop
 800bd60:	0800e7dc 	.word	0x0800e7dc
 800bd64:	200007e4 	.word	0x200007e4
 800bd68:	0800e6c8 	.word	0x0800e6c8
 800bd6c:	0800e90c 	.word	0x0800e90c
 800bd70:	0800e920 	.word	0x0800e920
 800bd74:	20000071 	.word	0x20000071
 800bd78:	0800e840 	.word	0x0800e840
 800bd7c:	0800e854 	.word	0x0800e854
 800bd80:	0800e868 	.word	0x0800e868
 800bd84:	0800e87c 	.word	0x0800e87c
 800bd88:	0800e894 	.word	0x0800e894
 800bd8c:	0800e950 	.word	0x0800e950

0800bd90 <CUSTOM_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
int32_t CUSTOM_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b08e      	sub	sp, #56	; 0x38
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
 800bd98:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 800bd9e:	2301      	movs	r3, #1
 800bda0:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800bda2:	2300      	movs	r3, #0
 800bda4:	62bb      	str	r3, [r7, #40]	; 0x28
  CUSTOM_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d131      	bne.n	800be10 <CUSTOM_MOTION_SENSOR_Init+0x80>
  {
#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSOX_0 == 1)
    case CUSTOM_LSM6DSOX_0:
      if (LSM6DSOX_0_Probe(Functions) != BSP_ERROR_NONE)
 800bdac:	6838      	ldr	r0, [r7, #0]
 800bdae:	f000 fa1f 	bl	800c1f0 <LSM6DSOX_0_Probe>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d002      	beq.n	800bdbe <CUSTOM_MOTION_SENSOR_Init+0x2e>
      {
        return BSP_ERROR_NO_INIT;
 800bdb8:	f04f 33ff 	mov.w	r3, #4294967295
 800bdbc:	e064      	b.n	800be88 <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800bdbe:	4a34      	ldr	r2, [pc, #208]	; (800be90 <CUSTOM_MOTION_SENSOR_Init+0x100>)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdc6:	68db      	ldr	r3, [r3, #12]
 800bdc8:	4932      	ldr	r1, [pc, #200]	; (800be94 <CUSTOM_MOTION_SENSOR_Init+0x104>)
 800bdca:	687a      	ldr	r2, [r7, #4]
 800bdcc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800bdd0:	f107 010c 	add.w	r1, r7, #12
 800bdd4:	4610      	mov	r0, r2
 800bdd6:	4798      	blx	r3
 800bdd8:	4603      	mov	r3, r0
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d002      	beq.n	800bde4 <CUSTOM_MOTION_SENSOR_Init+0x54>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800bdde:	f06f 0306 	mvn.w	r3, #6
 800bde2:	e051      	b.n	800be88 <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
      if (cap.Acc == 1U)
 800bde4:	7b3b      	ldrb	r3, [r7, #12]
 800bde6:	2b01      	cmp	r3, #1
 800bde8:	d103      	bne.n	800bdf2 <CUSTOM_MOTION_SENSOR_Init+0x62>
      {
        component_functions |= MOTION_ACCELERO;
 800bdea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdec:	f043 0302 	orr.w	r3, r3, #2
 800bdf0:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800bdf2:	7b7b      	ldrb	r3, [r7, #13]
 800bdf4:	2b01      	cmp	r3, #1
 800bdf6:	d103      	bne.n	800be00 <CUSTOM_MOTION_SENSOR_Init+0x70>
      {
        component_functions |= MOTION_GYRO;
 800bdf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdfa:	f043 0301 	orr.w	r3, r3, #1
 800bdfe:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800be00:	7bbb      	ldrb	r3, [r7, #14]
 800be02:	2b01      	cmp	r3, #1
 800be04:	d108      	bne.n	800be18 <CUSTOM_MOTION_SENSOR_Init+0x88>
      {
        component_functions |= MOTION_MAGNETO;
 800be06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be08:	f043 0304 	orr.w	r3, r3, #4
 800be0c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800be0e:	e003      	b.n	800be18 <CUSTOM_MOTION_SENSOR_Init+0x88>
#endif
    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800be10:	f06f 0301 	mvn.w	r3, #1
 800be14:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 800be16:	e000      	b.n	800be1a <CUSTOM_MOTION_SENSOR_Init+0x8a>
      break;
 800be18:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800be1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d001      	beq.n	800be24 <CUSTOM_MOTION_SENSOR_Init+0x94>
  {
    return ret;
 800be20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be22:	e031      	b.n	800be88 <CUSTOM_MOTION_SENSOR_Init+0xf8>
  }

  for (i = 0; i < CUSTOM_MOTION_FUNCTIONS_NBR; i++)
 800be24:	2300      	movs	r3, #0
 800be26:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be28:	e02a      	b.n	800be80 <CUSTOM_MOTION_SENSOR_Init+0xf0>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800be2a:	683a      	ldr	r2, [r7, #0]
 800be2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be2e:	4013      	ands	r3, r2
 800be30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be32:	429a      	cmp	r2, r3
 800be34:	d11e      	bne.n	800be74 <CUSTOM_MOTION_SENSOR_Init+0xe4>
 800be36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be3a:	4013      	ands	r3, r2
 800be3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be3e:	429a      	cmp	r2, r3
 800be40:	d118      	bne.n	800be74 <CUSTOM_MOTION_SENSOR_Init+0xe4>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800be42:	4a15      	ldr	r2, [pc, #84]	; (800be98 <CUSTOM_MOTION_SENSOR_Init+0x108>)
 800be44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be46:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800be4a:	4814      	ldr	r0, [pc, #80]	; (800be9c <CUSTOM_MOTION_SENSOR_Init+0x10c>)
 800be4c:	687a      	ldr	r2, [r7, #4]
 800be4e:	4613      	mov	r3, r2
 800be50:	005b      	lsls	r3, r3, #1
 800be52:	4413      	add	r3, r2
 800be54:	440b      	add	r3, r1
 800be56:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	490d      	ldr	r1, [pc, #52]	; (800be94 <CUSTOM_MOTION_SENSOR_Init+0x104>)
 800be5e:	687a      	ldr	r2, [r7, #4]
 800be60:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800be64:	4610      	mov	r0, r2
 800be66:	4798      	blx	r3
 800be68:	4603      	mov	r3, r0
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d002      	beq.n	800be74 <CUSTOM_MOTION_SENSOR_Init+0xe4>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800be6e:	f06f 0304 	mvn.w	r3, #4
 800be72:	e009      	b.n	800be88 <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
    }
    function = function << 1;
 800be74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be76:	005b      	lsls	r3, r3, #1
 800be78:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < CUSTOM_MOTION_FUNCTIONS_NBR; i++)
 800be7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be7c:	3301      	adds	r3, #1
 800be7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be82:	2b02      	cmp	r3, #2
 800be84:	d9d1      	bls.n	800be2a <CUSTOM_MOTION_SENSOR_Init+0x9a>
  }

  return ret;
 800be86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800be88:	4618      	mov	r0, r3
 800be8a:	3738      	adds	r7, #56	; 0x38
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd80      	pop	{r7, pc}
 800be90:	200008f8 	.word	0x200008f8
 800be94:	200008e8 	.word	0x200008e8
 800be98:	20000074 	.word	0x20000074
 800be9c:	200008ec 	.word	0x200008ec

0800bea0 <CUSTOM_MOTION_SENSOR_GetCapabilities>:
 * @param  Instance Motion sensor instance
 * @param  Capabilities pointer to motion sensor capabilities
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_GetCapabilities(uint32_t Instance, CUSTOM_MOTION_SENSOR_Capabilities_t *Capabilities)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b084      	sub	sp, #16
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d003      	beq.n	800beb8 <CUSTOM_MOTION_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800beb0:	f06f 0301 	mvn.w	r3, #1
 800beb4:	60fb      	str	r3, [r7, #12]
 800beb6:	e014      	b.n	800bee2 <CUSTOM_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 800beb8:	4a0c      	ldr	r2, [pc, #48]	; (800beec <CUSTOM_MOTION_SENSOR_GetCapabilities+0x4c>)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bec0:	68db      	ldr	r3, [r3, #12]
 800bec2:	490b      	ldr	r1, [pc, #44]	; (800bef0 <CUSTOM_MOTION_SENSOR_GetCapabilities+0x50>)
 800bec4:	687a      	ldr	r2, [r7, #4]
 800bec6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800beca:	6839      	ldr	r1, [r7, #0]
 800becc:	4610      	mov	r0, r2
 800bece:	4798      	blx	r3
 800bed0:	4603      	mov	r3, r0
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d003      	beq.n	800bede <CUSTOM_MOTION_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bed6:	f06f 0306 	mvn.w	r3, #6
 800beda:	60fb      	str	r3, [r7, #12]
 800bedc:	e001      	b.n	800bee2 <CUSTOM_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800bede:	2300      	movs	r3, #0
 800bee0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800bee2:	68fb      	ldr	r3, [r7, #12]
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	3710      	adds	r7, #16
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}
 800beec:	200008f8 	.word	0x200008f8
 800bef0:	200008e8 	.word	0x200008e8

0800bef4 <CUSTOM_MOTION_SENSOR_ReadID>:
 * @param  Instance Motion sensor instance
 * @param  Id WHOAMI value
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_ReadID(uint32_t Instance, uint8_t *Id)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b084      	sub	sp, #16
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
 800befc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d003      	beq.n	800bf0c <CUSTOM_MOTION_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800bf04:	f06f 0301 	mvn.w	r3, #1
 800bf08:	60fb      	str	r3, [r7, #12]
 800bf0a:	e014      	b.n	800bf36 <CUSTOM_MOTION_SENSOR_ReadID+0x42>
  }
  else if (MotionDrv[Instance]->ReadID(MotionCompObj[Instance], Id) != BSP_ERROR_NONE)
 800bf0c:	4a0c      	ldr	r2, [pc, #48]	; (800bf40 <CUSTOM_MOTION_SENSOR_ReadID+0x4c>)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf14:	689b      	ldr	r3, [r3, #8]
 800bf16:	490b      	ldr	r1, [pc, #44]	; (800bf44 <CUSTOM_MOTION_SENSOR_ReadID+0x50>)
 800bf18:	687a      	ldr	r2, [r7, #4]
 800bf1a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800bf1e:	6839      	ldr	r1, [r7, #0]
 800bf20:	4610      	mov	r0, r2
 800bf22:	4798      	blx	r3
 800bf24:	4603      	mov	r3, r0
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d003      	beq.n	800bf32 <CUSTOM_MOTION_SENSOR_ReadID+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bf2a:	f06f 0306 	mvn.w	r3, #6
 800bf2e:	60fb      	str	r3, [r7, #12]
 800bf30:	e001      	b.n	800bf36 <CUSTOM_MOTION_SENSOR_ReadID+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800bf32:	2300      	movs	r3, #0
 800bf34:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800bf36:	68fb      	ldr	r3, [r7, #12]
}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	3710      	adds	r7, #16
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}
 800bf40:	200008f8 	.word	0x200008f8
 800bf44:	200008e8 	.word	0x200008e8

0800bf48 <CUSTOM_MOTION_SENSOR_GetAxes>:
 *         - MOTION_MAGNETO
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, CUSTOM_MOTION_SENSOR_Axes_t *Axes)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b086      	sub	sp, #24
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	60f8      	str	r0, [r7, #12]
 800bf50:	60b9      	str	r1, [r7, #8]
 800bf52:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d003      	beq.n	800bf62 <CUSTOM_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800bf5a:	f06f 0301 	mvn.w	r3, #1
 800bf5e:	617b      	str	r3, [r7, #20]
 800bf60:	e029      	b.n	800bfb6 <CUSTOM_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800bf62:	4a17      	ldr	r2, [pc, #92]	; (800bfc0 <CUSTOM_MOTION_SENSOR_GetAxes+0x78>)
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	4013      	ands	r3, r2
 800bf6e:	68ba      	ldr	r2, [r7, #8]
 800bf70:	429a      	cmp	r2, r3
 800bf72:	d11d      	bne.n	800bfb0 <CUSTOM_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 800bf74:	4a13      	ldr	r2, [pc, #76]	; (800bfc4 <CUSTOM_MOTION_SENSOR_GetAxes+0x7c>)
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800bf7c:	4812      	ldr	r0, [pc, #72]	; (800bfc8 <CUSTOM_MOTION_SENSOR_GetAxes+0x80>)
 800bf7e:	68fa      	ldr	r2, [r7, #12]
 800bf80:	4613      	mov	r3, r2
 800bf82:	005b      	lsls	r3, r3, #1
 800bf84:	4413      	add	r3, r2
 800bf86:	440b      	add	r3, r1
 800bf88:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800bf8c:	69db      	ldr	r3, [r3, #28]
 800bf8e:	490f      	ldr	r1, [pc, #60]	; (800bfcc <CUSTOM_MOTION_SENSOR_GetAxes+0x84>)
 800bf90:	68fa      	ldr	r2, [r7, #12]
 800bf92:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800bf96:	6879      	ldr	r1, [r7, #4]
 800bf98:	4610      	mov	r0, r2
 800bf9a:	4798      	blx	r3
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d003      	beq.n	800bfaa <CUSTOM_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bfa2:	f06f 0304 	mvn.w	r3, #4
 800bfa6:	617b      	str	r3, [r7, #20]
 800bfa8:	e005      	b.n	800bfb6 <CUSTOM_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800bfaa:	2300      	movs	r3, #0
 800bfac:	617b      	str	r3, [r7, #20]
 800bfae:	e002      	b.n	800bfb6 <CUSTOM_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800bfb0:	f06f 0301 	mvn.w	r3, #1
 800bfb4:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800bfb6:	697b      	ldr	r3, [r7, #20]
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	3718      	adds	r7, #24
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}
 800bfc0:	200008fc 	.word	0x200008fc
 800bfc4:	20000074 	.word	0x20000074
 800bfc8:	200008ec 	.word	0x200008ec
 800bfcc:	200008e8 	.word	0x200008e8

0800bfd0 <CUSTOM_MOTION_SENSOR_GetOutputDataRate>:
 *         - MOTION_MAGNETO
 * @param  Odr pointer to Output Data Rate read value
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_GetOutputDataRate(uint32_t Instance, uint32_t Function, float *Odr)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b086      	sub	sp, #24
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	60f8      	str	r0, [r7, #12]
 800bfd8:	60b9      	str	r1, [r7, #8]
 800bfda:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d003      	beq.n	800bfea <CUSTOM_MOTION_SENSOR_GetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800bfe2:	f06f 0301 	mvn.w	r3, #1
 800bfe6:	617b      	str	r3, [r7, #20]
 800bfe8:	e029      	b.n	800c03e <CUSTOM_MOTION_SENSOR_GetOutputDataRate+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800bfea:	4a17      	ldr	r2, [pc, #92]	; (800c048 <CUSTOM_MOTION_SENSOR_GetOutputDataRate+0x78>)
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800bff2:	68bb      	ldr	r3, [r7, #8]
 800bff4:	4013      	ands	r3, r2
 800bff6:	68ba      	ldr	r2, [r7, #8]
 800bff8:	429a      	cmp	r2, r3
 800bffa:	d11d      	bne.n	800c038 <CUSTOM_MOTION_SENSOR_GetOutputDataRate+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800bffc:	4a13      	ldr	r2, [pc, #76]	; (800c04c <CUSTOM_MOTION_SENSOR_GetOutputDataRate+0x7c>)
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c004:	4812      	ldr	r0, [pc, #72]	; (800c050 <CUSTOM_MOTION_SENSOR_GetOutputDataRate+0x80>)
 800c006:	68fa      	ldr	r2, [r7, #12]
 800c008:	4613      	mov	r3, r2
 800c00a:	005b      	lsls	r3, r3, #1
 800c00c:	4413      	add	r3, r2
 800c00e:	440b      	add	r3, r1
 800c010:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800c014:	68db      	ldr	r3, [r3, #12]
 800c016:	490f      	ldr	r1, [pc, #60]	; (800c054 <CUSTOM_MOTION_SENSOR_GetOutputDataRate+0x84>)
 800c018:	68fa      	ldr	r2, [r7, #12]
 800c01a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800c01e:	6879      	ldr	r1, [r7, #4]
 800c020:	4610      	mov	r0, r2
 800c022:	4798      	blx	r3
 800c024:	4603      	mov	r3, r0
 800c026:	2b00      	cmp	r3, #0
 800c028:	d003      	beq.n	800c032 <CUSTOM_MOTION_SENSOR_GetOutputDataRate+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800c02a:	f06f 0304 	mvn.w	r3, #4
 800c02e:	617b      	str	r3, [r7, #20]
 800c030:	e005      	b.n	800c03e <CUSTOM_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800c032:	2300      	movs	r3, #0
 800c034:	617b      	str	r3, [r7, #20]
 800c036:	e002      	b.n	800c03e <CUSTOM_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800c038:	f06f 0301 	mvn.w	r3, #1
 800c03c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800c03e:	697b      	ldr	r3, [r7, #20]
}
 800c040:	4618      	mov	r0, r3
 800c042:	3718      	adds	r7, #24
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}
 800c048:	200008fc 	.word	0x200008fc
 800c04c:	20000074 	.word	0x20000074
 800c050:	200008ec 	.word	0x200008ec
 800c054:	200008e8 	.word	0x200008e8

0800c058 <CUSTOM_MOTION_SENSOR_GetFullScale>:
 *         - MOTION_MAGNETO
 * @param  Fullscale pointer to Fullscale read value
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_GetFullScale(uint32_t Instance, uint32_t Function, int32_t *Fullscale)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b086      	sub	sp, #24
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	60f8      	str	r0, [r7, #12]
 800c060:	60b9      	str	r1, [r7, #8]
 800c062:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d003      	beq.n	800c072 <CUSTOM_MOTION_SENSOR_GetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c06a:	f06f 0301 	mvn.w	r3, #1
 800c06e:	617b      	str	r3, [r7, #20]
 800c070:	e029      	b.n	800c0c6 <CUSTOM_MOTION_SENSOR_GetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800c072:	4a17      	ldr	r2, [pc, #92]	; (800c0d0 <CUSTOM_MOTION_SENSOR_GetFullScale+0x78>)
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	4013      	ands	r3, r2
 800c07e:	68ba      	ldr	r2, [r7, #8]
 800c080:	429a      	cmp	r2, r3
 800c082:	d11d      	bne.n	800c0c0 <CUSTOM_MOTION_SENSOR_GetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetFullScale(MotionCompObj[Instance], Fullscale) != BSP_ERROR_NONE)
 800c084:	4a13      	ldr	r2, [pc, #76]	; (800c0d4 <CUSTOM_MOTION_SENSOR_GetFullScale+0x7c>)
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c08c:	4812      	ldr	r0, [pc, #72]	; (800c0d8 <CUSTOM_MOTION_SENSOR_GetFullScale+0x80>)
 800c08e:	68fa      	ldr	r2, [r7, #12]
 800c090:	4613      	mov	r3, r2
 800c092:	005b      	lsls	r3, r3, #1
 800c094:	4413      	add	r3, r2
 800c096:	440b      	add	r3, r1
 800c098:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800c09c:	695b      	ldr	r3, [r3, #20]
 800c09e:	490f      	ldr	r1, [pc, #60]	; (800c0dc <CUSTOM_MOTION_SENSOR_GetFullScale+0x84>)
 800c0a0:	68fa      	ldr	r2, [r7, #12]
 800c0a2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800c0a6:	6879      	ldr	r1, [r7, #4]
 800c0a8:	4610      	mov	r0, r2
 800c0aa:	4798      	blx	r3
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d003      	beq.n	800c0ba <CUSTOM_MOTION_SENSOR_GetFullScale+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800c0b2:	f06f 0304 	mvn.w	r3, #4
 800c0b6:	617b      	str	r3, [r7, #20]
 800c0b8:	e005      	b.n	800c0c6 <CUSTOM_MOTION_SENSOR_GetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	617b      	str	r3, [r7, #20]
 800c0be:	e002      	b.n	800c0c6 <CUSTOM_MOTION_SENSOR_GetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800c0c0:	f06f 0301 	mvn.w	r3, #1
 800c0c4:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800c0c6:	697b      	ldr	r3, [r7, #20]
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3718      	adds	r7, #24
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}
 800c0d0:	200008fc 	.word	0x200008fc
 800c0d4:	20000074 	.word	0x20000074
 800c0d8:	200008ec 	.word	0x200008ec
 800c0dc:	200008e8 	.word	0x200008e8

0800c0e0 <CUSTOM_MOTION_SENSOR_SetOutputDataRate>:
 *         - MOTION_MAGNETO
 * @param  Odr Output Data Rate value to be set
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b086      	sub	sp, #24
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	60f8      	str	r0, [r7, #12]
 800c0e8:	60b9      	str	r1, [r7, #8]
 800c0ea:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d003      	beq.n	800c0fa <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c0f2:	f06f 0301 	mvn.w	r3, #1
 800c0f6:	617b      	str	r3, [r7, #20]
 800c0f8:	e029      	b.n	800c14e <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800c0fa:	4a17      	ldr	r2, [pc, #92]	; (800c158 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x78>)
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	4013      	ands	r3, r2
 800c106:	68ba      	ldr	r2, [r7, #8]
 800c108:	429a      	cmp	r2, r3
 800c10a:	d11d      	bne.n	800c148 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800c10c:	4a13      	ldr	r2, [pc, #76]	; (800c15c <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c114:	4812      	ldr	r0, [pc, #72]	; (800c160 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x80>)
 800c116:	68fa      	ldr	r2, [r7, #12]
 800c118:	4613      	mov	r3, r2
 800c11a:	005b      	lsls	r3, r3, #1
 800c11c:	4413      	add	r3, r2
 800c11e:	440b      	add	r3, r1
 800c120:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800c124:	691b      	ldr	r3, [r3, #16]
 800c126:	490f      	ldr	r1, [pc, #60]	; (800c164 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x84>)
 800c128:	68fa      	ldr	r2, [r7, #12]
 800c12a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800c12e:	6879      	ldr	r1, [r7, #4]
 800c130:	4610      	mov	r0, r2
 800c132:	4798      	blx	r3
 800c134:	4603      	mov	r3, r0
 800c136:	2b00      	cmp	r3, #0
 800c138:	d003      	beq.n	800c142 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800c13a:	f06f 0304 	mvn.w	r3, #4
 800c13e:	617b      	str	r3, [r7, #20]
 800c140:	e005      	b.n	800c14e <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800c142:	2300      	movs	r3, #0
 800c144:	617b      	str	r3, [r7, #20]
 800c146:	e002      	b.n	800c14e <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800c148:	f06f 0301 	mvn.w	r3, #1
 800c14c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800c14e:	697b      	ldr	r3, [r7, #20]
}
 800c150:	4618      	mov	r0, r3
 800c152:	3718      	adds	r7, #24
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}
 800c158:	200008fc 	.word	0x200008fc
 800c15c:	20000074 	.word	0x20000074
 800c160:	200008ec 	.word	0x200008ec
 800c164:	200008e8 	.word	0x200008e8

0800c168 <CUSTOM_MOTION_SENSOR_SetFullScale>:
 *         - MOTION_MAGNETO
 * @param  Fullscale Fullscale value to be set
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b086      	sub	sp, #24
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	60f8      	str	r0, [r7, #12]
 800c170:	60b9      	str	r1, [r7, #8]
 800c172:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d003      	beq.n	800c182 <CUSTOM_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c17a:	f06f 0301 	mvn.w	r3, #1
 800c17e:	617b      	str	r3, [r7, #20]
 800c180:	e029      	b.n	800c1d6 <CUSTOM_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800c182:	4a17      	ldr	r2, [pc, #92]	; (800c1e0 <CUSTOM_MOTION_SENSOR_SetFullScale+0x78>)
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	4013      	ands	r3, r2
 800c18e:	68ba      	ldr	r2, [r7, #8]
 800c190:	429a      	cmp	r2, r3
 800c192:	d11d      	bne.n	800c1d0 <CUSTOM_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance], Fullscale) != BSP_ERROR_NONE)
 800c194:	4a13      	ldr	r2, [pc, #76]	; (800c1e4 <CUSTOM_MOTION_SENSOR_SetFullScale+0x7c>)
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c19c:	4812      	ldr	r0, [pc, #72]	; (800c1e8 <CUSTOM_MOTION_SENSOR_SetFullScale+0x80>)
 800c19e:	68fa      	ldr	r2, [r7, #12]
 800c1a0:	4613      	mov	r3, r2
 800c1a2:	005b      	lsls	r3, r3, #1
 800c1a4:	4413      	add	r3, r2
 800c1a6:	440b      	add	r3, r1
 800c1a8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800c1ac:	699b      	ldr	r3, [r3, #24]
 800c1ae:	490f      	ldr	r1, [pc, #60]	; (800c1ec <CUSTOM_MOTION_SENSOR_SetFullScale+0x84>)
 800c1b0:	68fa      	ldr	r2, [r7, #12]
 800c1b2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800c1b6:	6879      	ldr	r1, [r7, #4]
 800c1b8:	4610      	mov	r0, r2
 800c1ba:	4798      	blx	r3
 800c1bc:	4603      	mov	r3, r0
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d003      	beq.n	800c1ca <CUSTOM_MOTION_SENSOR_SetFullScale+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800c1c2:	f06f 0304 	mvn.w	r3, #4
 800c1c6:	617b      	str	r3, [r7, #20]
 800c1c8:	e005      	b.n	800c1d6 <CUSTOM_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	617b      	str	r3, [r7, #20]
 800c1ce:	e002      	b.n	800c1d6 <CUSTOM_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800c1d0:	f06f 0301 	mvn.w	r3, #1
 800c1d4:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800c1d6:	697b      	ldr	r3, [r7, #20]
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3718      	adds	r7, #24
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}
 800c1e0:	200008fc 	.word	0x200008fc
 800c1e4:	20000074 	.word	0x20000074
 800c1e8:	200008ec 	.word	0x200008ec
 800c1ec:	200008e8 	.word	0x200008e8

0800c1f0 <LSM6DSOX_0_Probe>:
 * @param  Functions Motion sensor functions. Could be :
 *         - MOTION_GYRO and/or MOTION_ACCELERO
 * @retval BSP status
 */
static int32_t LSM6DSOX_0_Probe(uint32_t Functions)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b092      	sub	sp, #72	; 0x48
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
  LSM6DSOX_IO_t            io_ctx;
  uint8_t                  id;
  static LSM6DSOX_Object_t lsm6dsox_obj_0;
  LSM6DSOX_Capabilities_t  cap;
  int32_t                  ret = BSP_ERROR_NONE;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the driver */
  io_ctx.BusType     = LSM6DSOX_I2C_BUS; /* I2C */
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSOX_I2C_ADD_L; /* SA0 = GND */
 800c200:	23d5      	movs	r3, #213	; 0xd5
 800c202:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = CUSTOM_LSM6DSOX_0_I2C_Init;
 800c206:	4b4a      	ldr	r3, [pc, #296]	; (800c330 <LSM6DSOX_0_Probe+0x140>)
 800c208:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = CUSTOM_LSM6DSOX_0_I2C_DeInit;
 800c20a:	4b4a      	ldr	r3, [pc, #296]	; (800c334 <LSM6DSOX_0_Probe+0x144>)
 800c20c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = CUSTOM_LSM6DSOX_0_I2C_ReadReg;
 800c20e:	4b4a      	ldr	r3, [pc, #296]	; (800c338 <LSM6DSOX_0_Probe+0x148>)
 800c210:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = CUSTOM_LSM6DSOX_0_I2C_WriteReg;
 800c212:	4b4a      	ldr	r3, [pc, #296]	; (800c33c <LSM6DSOX_0_Probe+0x14c>)
 800c214:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = BSP_GetTick;
 800c216:	4b4a      	ldr	r3, [pc, #296]	; (800c340 <LSM6DSOX_0_Probe+0x150>)
 800c218:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSOX_RegisterBusIO(&lsm6dsox_obj_0, &io_ctx) != LSM6DSOX_OK)
 800c21a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c21e:	4619      	mov	r1, r3
 800c220:	4848      	ldr	r0, [pc, #288]	; (800c344 <LSM6DSOX_0_Probe+0x154>)
 800c222:	f7f6 fae9 	bl	80027f8 <LSM6DSOX_RegisterBusIO>
 800c226:	4603      	mov	r3, r0
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d003      	beq.n	800c234 <LSM6DSOX_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800c22c:	f06f 0306 	mvn.w	r3, #6
 800c230:	647b      	str	r3, [r7, #68]	; 0x44
 800c232:	e077      	b.n	800c324 <LSM6DSOX_0_Probe+0x134>
  }
  else if (LSM6DSOX_ReadID(&lsm6dsox_obj_0, &id) != LSM6DSOX_OK)
 800c234:	f107 0327 	add.w	r3, r7, #39	; 0x27
 800c238:	4619      	mov	r1, r3
 800c23a:	4842      	ldr	r0, [pc, #264]	; (800c344 <LSM6DSOX_0_Probe+0x154>)
 800c23c:	f7f6 fbde 	bl	80029fc <LSM6DSOX_ReadID>
 800c240:	4603      	mov	r3, r0
 800c242:	2b00      	cmp	r3, #0
 800c244:	d003      	beq.n	800c24e <LSM6DSOX_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800c246:	f06f 0306 	mvn.w	r3, #6
 800c24a:	647b      	str	r3, [r7, #68]	; 0x44
 800c24c:	e06a      	b.n	800c324 <LSM6DSOX_0_Probe+0x134>
  }
  else if (id != (uint8_t)LSM6DSOX_ID)
 800c24e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c252:	2b6c      	cmp	r3, #108	; 0x6c
 800c254:	d003      	beq.n	800c25e <LSM6DSOX_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800c256:	f06f 0306 	mvn.w	r3, #6
 800c25a:	647b      	str	r3, [r7, #68]	; 0x44
 800c25c:	e062      	b.n	800c324 <LSM6DSOX_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSOX_GetCapabilities(&lsm6dsox_obj_0, &cap);
 800c25e:	f107 0308 	add.w	r3, r7, #8
 800c262:	4619      	mov	r1, r3
 800c264:	4837      	ldr	r0, [pc, #220]	; (800c344 <LSM6DSOX_0_Probe+0x154>)
 800c266:	f7f6 fbdf 	bl	8002a28 <LSM6DSOX_GetCapabilities>
    MotionCtx[CUSTOM_LSM6DSOX_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800c26a:	7a7b      	ldrb	r3, [r7, #9]
 800c26c:	461a      	mov	r2, r3
 800c26e:	7a3b      	ldrb	r3, [r7, #8]
 800c270:	005b      	lsls	r3, r3, #1
 800c272:	431a      	orrs	r2, r3
 800c274:	7abb      	ldrb	r3, [r7, #10]
 800c276:	009b      	lsls	r3, r3, #2
 800c278:	4313      	orrs	r3, r2
 800c27a:	4a33      	ldr	r2, [pc, #204]	; (800c348 <LSM6DSOX_0_Probe+0x158>)
 800c27c:	6013      	str	r3, [r2, #0]

    MotionCompObj[CUSTOM_LSM6DSOX_0] = &lsm6dsox_obj_0;
 800c27e:	4b33      	ldr	r3, [pc, #204]	; (800c34c <LSM6DSOX_0_Probe+0x15c>)
 800c280:	4a30      	ldr	r2, [pc, #192]	; (800c344 <LSM6DSOX_0_Probe+0x154>)
 800c282:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[CUSTOM_LSM6DSOX_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSOX_COMMON_Driver;
 800c284:	4b32      	ldr	r3, [pc, #200]	; (800c350 <LSM6DSOX_0_Probe+0x160>)
 800c286:	4a33      	ldr	r2, [pc, #204]	; (800c354 <LSM6DSOX_0_Probe+0x164>)
 800c288:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800c28a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d11d      	bne.n	800c2cc <LSM6DSOX_0_Probe+0xdc>
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f003 0301 	and.w	r3, r3, #1
 800c296:	2b00      	cmp	r3, #0
 800c298:	d018      	beq.n	800c2cc <LSM6DSOX_0_Probe+0xdc>
 800c29a:	7a7b      	ldrb	r3, [r7, #9]
 800c29c:	2b01      	cmp	r3, #1
 800c29e:	d115      	bne.n	800c2cc <LSM6DSOX_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[CUSTOM_LSM6DSOX_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSOX_GYRO_Driver;
 800c2a0:	4b2d      	ldr	r3, [pc, #180]	; (800c358 <LSM6DSOX_0_Probe+0x168>)
 800c2a2:	685b      	ldr	r3, [r3, #4]
 800c2a4:	4a2d      	ldr	r2, [pc, #180]	; (800c35c <LSM6DSOX_0_Probe+0x16c>)
 800c2a6:	492e      	ldr	r1, [pc, #184]	; (800c360 <LSM6DSOX_0_Probe+0x170>)
 800c2a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[CUSTOM_LSM6DSOX_0]->Init(MotionCompObj[CUSTOM_LSM6DSOX_0]) != LSM6DSOX_OK)
 800c2ac:	4b28      	ldr	r3, [pc, #160]	; (800c350 <LSM6DSOX_0_Probe+0x160>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	4a26      	ldr	r2, [pc, #152]	; (800c34c <LSM6DSOX_0_Probe+0x15c>)
 800c2b4:	6812      	ldr	r2, [r2, #0]
 800c2b6:	4610      	mov	r0, r2
 800c2b8:	4798      	blx	r3
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d003      	beq.n	800c2c8 <LSM6DSOX_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800c2c0:	f06f 0304 	mvn.w	r3, #4
 800c2c4:	647b      	str	r3, [r7, #68]	; 0x44
 800c2c6:	e001      	b.n	800c2cc <LSM6DSOX_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800c2cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d11d      	bne.n	800c30e <LSM6DSOX_0_Probe+0x11e>
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	f003 0302 	and.w	r3, r3, #2
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d018      	beq.n	800c30e <LSM6DSOX_0_Probe+0x11e>
 800c2dc:	7a3b      	ldrb	r3, [r7, #8]
 800c2de:	2b01      	cmp	r3, #1
 800c2e0:	d115      	bne.n	800c30e <LSM6DSOX_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[CUSTOM_LSM6DSOX_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSOX_ACC_Driver;
 800c2e2:	4b1d      	ldr	r3, [pc, #116]	; (800c358 <LSM6DSOX_0_Probe+0x168>)
 800c2e4:	689b      	ldr	r3, [r3, #8]
 800c2e6:	4a1d      	ldr	r2, [pc, #116]	; (800c35c <LSM6DSOX_0_Probe+0x16c>)
 800c2e8:	491e      	ldr	r1, [pc, #120]	; (800c364 <LSM6DSOX_0_Probe+0x174>)
 800c2ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[CUSTOM_LSM6DSOX_0]->Init(MotionCompObj[CUSTOM_LSM6DSOX_0]) != LSM6DSOX_OK)
 800c2ee:	4b18      	ldr	r3, [pc, #96]	; (800c350 <LSM6DSOX_0_Probe+0x160>)
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	4a15      	ldr	r2, [pc, #84]	; (800c34c <LSM6DSOX_0_Probe+0x15c>)
 800c2f6:	6812      	ldr	r2, [r2, #0]
 800c2f8:	4610      	mov	r0, r2
 800c2fa:	4798      	blx	r3
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d003      	beq.n	800c30a <LSM6DSOX_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800c302:	f06f 0304 	mvn.w	r3, #4
 800c306:	647b      	str	r3, [r7, #68]	; 0x44
 800c308:	e001      	b.n	800c30e <LSM6DSOX_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800c30a:	2300      	movs	r3, #0
 800c30c:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800c30e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c310:	2b00      	cmp	r3, #0
 800c312:	d107      	bne.n	800c324 <LSM6DSOX_0_Probe+0x134>
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f003 0304 	and.w	r3, r3, #4
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d002      	beq.n	800c324 <LSM6DSOX_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800c31e:	f06f 0304 	mvn.w	r3, #4
 800c322:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 800c324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800c326:	4618      	mov	r0, r3
 800c328:	3748      	adds	r7, #72	; 0x48
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}
 800c32e:	bf00      	nop
 800c330:	08002375 	.word	0x08002375
 800c334:	080023f1 	.word	0x080023f1
 800c338:	080024a5 	.word	0x080024a5
 800c33c:	08002441 	.word	0x08002441
 800c340:	08002509 	.word	0x08002509
 800c344:	20000900 	.word	0x20000900
 800c348:	200008fc 	.word	0x200008fc
 800c34c:	200008e8 	.word	0x200008e8
 800c350:	200008f8 	.word	0x200008f8
 800c354:	20000004 	.word	0x20000004
 800c358:	20000074 	.word	0x20000074
 800c35c:	200008ec 	.word	0x200008ec
 800c360:	20000038 	.word	0x20000038
 800c364:	20000014 	.word	0x20000014

0800c368 <__errno>:
 800c368:	4b01      	ldr	r3, [pc, #4]	; (800c370 <__errno+0x8>)
 800c36a:	6818      	ldr	r0, [r3, #0]
 800c36c:	4770      	bx	lr
 800c36e:	bf00      	nop
 800c370:	20000088 	.word	0x20000088

0800c374 <__libc_init_array>:
 800c374:	b570      	push	{r4, r5, r6, lr}
 800c376:	4d0d      	ldr	r5, [pc, #52]	; (800c3ac <__libc_init_array+0x38>)
 800c378:	4c0d      	ldr	r4, [pc, #52]	; (800c3b0 <__libc_init_array+0x3c>)
 800c37a:	1b64      	subs	r4, r4, r5
 800c37c:	10a4      	asrs	r4, r4, #2
 800c37e:	2600      	movs	r6, #0
 800c380:	42a6      	cmp	r6, r4
 800c382:	d109      	bne.n	800c398 <__libc_init_array+0x24>
 800c384:	4d0b      	ldr	r5, [pc, #44]	; (800c3b4 <__libc_init_array+0x40>)
 800c386:	4c0c      	ldr	r4, [pc, #48]	; (800c3b8 <__libc_init_array+0x44>)
 800c388:	f002 f940 	bl	800e60c <_init>
 800c38c:	1b64      	subs	r4, r4, r5
 800c38e:	10a4      	asrs	r4, r4, #2
 800c390:	2600      	movs	r6, #0
 800c392:	42a6      	cmp	r6, r4
 800c394:	d105      	bne.n	800c3a2 <__libc_init_array+0x2e>
 800c396:	bd70      	pop	{r4, r5, r6, pc}
 800c398:	f855 3b04 	ldr.w	r3, [r5], #4
 800c39c:	4798      	blx	r3
 800c39e:	3601      	adds	r6, #1
 800c3a0:	e7ee      	b.n	800c380 <__libc_init_array+0xc>
 800c3a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3a6:	4798      	blx	r3
 800c3a8:	3601      	adds	r6, #1
 800c3aa:	e7f2      	b.n	800c392 <__libc_init_array+0x1e>
 800c3ac:	0800ed28 	.word	0x0800ed28
 800c3b0:	0800ed28 	.word	0x0800ed28
 800c3b4:	0800ed28 	.word	0x0800ed28
 800c3b8:	0800ed2c 	.word	0x0800ed2c

0800c3bc <memset>:
 800c3bc:	4402      	add	r2, r0
 800c3be:	4603      	mov	r3, r0
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	d100      	bne.n	800c3c6 <memset+0xa>
 800c3c4:	4770      	bx	lr
 800c3c6:	f803 1b01 	strb.w	r1, [r3], #1
 800c3ca:	e7f9      	b.n	800c3c0 <memset+0x4>

0800c3cc <iprintf>:
 800c3cc:	b40f      	push	{r0, r1, r2, r3}
 800c3ce:	4b0a      	ldr	r3, [pc, #40]	; (800c3f8 <iprintf+0x2c>)
 800c3d0:	b513      	push	{r0, r1, r4, lr}
 800c3d2:	681c      	ldr	r4, [r3, #0]
 800c3d4:	b124      	cbz	r4, 800c3e0 <iprintf+0x14>
 800c3d6:	69a3      	ldr	r3, [r4, #24]
 800c3d8:	b913      	cbnz	r3, 800c3e0 <iprintf+0x14>
 800c3da:	4620      	mov	r0, r4
 800c3dc:	f000 faae 	bl	800c93c <__sinit>
 800c3e0:	ab05      	add	r3, sp, #20
 800c3e2:	9a04      	ldr	r2, [sp, #16]
 800c3e4:	68a1      	ldr	r1, [r4, #8]
 800c3e6:	9301      	str	r3, [sp, #4]
 800c3e8:	4620      	mov	r0, r4
 800c3ea:	f000 fe0f 	bl	800d00c <_vfiprintf_r>
 800c3ee:	b002      	add	sp, #8
 800c3f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3f4:	b004      	add	sp, #16
 800c3f6:	4770      	bx	lr
 800c3f8:	20000088 	.word	0x20000088

0800c3fc <_puts_r>:
 800c3fc:	b570      	push	{r4, r5, r6, lr}
 800c3fe:	460e      	mov	r6, r1
 800c400:	4605      	mov	r5, r0
 800c402:	b118      	cbz	r0, 800c40c <_puts_r+0x10>
 800c404:	6983      	ldr	r3, [r0, #24]
 800c406:	b90b      	cbnz	r3, 800c40c <_puts_r+0x10>
 800c408:	f000 fa98 	bl	800c93c <__sinit>
 800c40c:	69ab      	ldr	r3, [r5, #24]
 800c40e:	68ac      	ldr	r4, [r5, #8]
 800c410:	b913      	cbnz	r3, 800c418 <_puts_r+0x1c>
 800c412:	4628      	mov	r0, r5
 800c414:	f000 fa92 	bl	800c93c <__sinit>
 800c418:	4b2c      	ldr	r3, [pc, #176]	; (800c4cc <_puts_r+0xd0>)
 800c41a:	429c      	cmp	r4, r3
 800c41c:	d120      	bne.n	800c460 <_puts_r+0x64>
 800c41e:	686c      	ldr	r4, [r5, #4]
 800c420:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c422:	07db      	lsls	r3, r3, #31
 800c424:	d405      	bmi.n	800c432 <_puts_r+0x36>
 800c426:	89a3      	ldrh	r3, [r4, #12]
 800c428:	0598      	lsls	r0, r3, #22
 800c42a:	d402      	bmi.n	800c432 <_puts_r+0x36>
 800c42c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c42e:	f000 fb23 	bl	800ca78 <__retarget_lock_acquire_recursive>
 800c432:	89a3      	ldrh	r3, [r4, #12]
 800c434:	0719      	lsls	r1, r3, #28
 800c436:	d51d      	bpl.n	800c474 <_puts_r+0x78>
 800c438:	6923      	ldr	r3, [r4, #16]
 800c43a:	b1db      	cbz	r3, 800c474 <_puts_r+0x78>
 800c43c:	3e01      	subs	r6, #1
 800c43e:	68a3      	ldr	r3, [r4, #8]
 800c440:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c444:	3b01      	subs	r3, #1
 800c446:	60a3      	str	r3, [r4, #8]
 800c448:	bb39      	cbnz	r1, 800c49a <_puts_r+0x9e>
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	da38      	bge.n	800c4c0 <_puts_r+0xc4>
 800c44e:	4622      	mov	r2, r4
 800c450:	210a      	movs	r1, #10
 800c452:	4628      	mov	r0, r5
 800c454:	f000 f89c 	bl	800c590 <__swbuf_r>
 800c458:	3001      	adds	r0, #1
 800c45a:	d011      	beq.n	800c480 <_puts_r+0x84>
 800c45c:	250a      	movs	r5, #10
 800c45e:	e011      	b.n	800c484 <_puts_r+0x88>
 800c460:	4b1b      	ldr	r3, [pc, #108]	; (800c4d0 <_puts_r+0xd4>)
 800c462:	429c      	cmp	r4, r3
 800c464:	d101      	bne.n	800c46a <_puts_r+0x6e>
 800c466:	68ac      	ldr	r4, [r5, #8]
 800c468:	e7da      	b.n	800c420 <_puts_r+0x24>
 800c46a:	4b1a      	ldr	r3, [pc, #104]	; (800c4d4 <_puts_r+0xd8>)
 800c46c:	429c      	cmp	r4, r3
 800c46e:	bf08      	it	eq
 800c470:	68ec      	ldreq	r4, [r5, #12]
 800c472:	e7d5      	b.n	800c420 <_puts_r+0x24>
 800c474:	4621      	mov	r1, r4
 800c476:	4628      	mov	r0, r5
 800c478:	f000 f8dc 	bl	800c634 <__swsetup_r>
 800c47c:	2800      	cmp	r0, #0
 800c47e:	d0dd      	beq.n	800c43c <_puts_r+0x40>
 800c480:	f04f 35ff 	mov.w	r5, #4294967295
 800c484:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c486:	07da      	lsls	r2, r3, #31
 800c488:	d405      	bmi.n	800c496 <_puts_r+0x9a>
 800c48a:	89a3      	ldrh	r3, [r4, #12]
 800c48c:	059b      	lsls	r3, r3, #22
 800c48e:	d402      	bmi.n	800c496 <_puts_r+0x9a>
 800c490:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c492:	f000 faf2 	bl	800ca7a <__retarget_lock_release_recursive>
 800c496:	4628      	mov	r0, r5
 800c498:	bd70      	pop	{r4, r5, r6, pc}
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	da04      	bge.n	800c4a8 <_puts_r+0xac>
 800c49e:	69a2      	ldr	r2, [r4, #24]
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	dc06      	bgt.n	800c4b2 <_puts_r+0xb6>
 800c4a4:	290a      	cmp	r1, #10
 800c4a6:	d004      	beq.n	800c4b2 <_puts_r+0xb6>
 800c4a8:	6823      	ldr	r3, [r4, #0]
 800c4aa:	1c5a      	adds	r2, r3, #1
 800c4ac:	6022      	str	r2, [r4, #0]
 800c4ae:	7019      	strb	r1, [r3, #0]
 800c4b0:	e7c5      	b.n	800c43e <_puts_r+0x42>
 800c4b2:	4622      	mov	r2, r4
 800c4b4:	4628      	mov	r0, r5
 800c4b6:	f000 f86b 	bl	800c590 <__swbuf_r>
 800c4ba:	3001      	adds	r0, #1
 800c4bc:	d1bf      	bne.n	800c43e <_puts_r+0x42>
 800c4be:	e7df      	b.n	800c480 <_puts_r+0x84>
 800c4c0:	6823      	ldr	r3, [r4, #0]
 800c4c2:	250a      	movs	r5, #10
 800c4c4:	1c5a      	adds	r2, r3, #1
 800c4c6:	6022      	str	r2, [r4, #0]
 800c4c8:	701d      	strb	r5, [r3, #0]
 800c4ca:	e7db      	b.n	800c484 <_puts_r+0x88>
 800c4cc:	0800ec7c 	.word	0x0800ec7c
 800c4d0:	0800ec9c 	.word	0x0800ec9c
 800c4d4:	0800ec5c 	.word	0x0800ec5c

0800c4d8 <puts>:
 800c4d8:	4b02      	ldr	r3, [pc, #8]	; (800c4e4 <puts+0xc>)
 800c4da:	4601      	mov	r1, r0
 800c4dc:	6818      	ldr	r0, [r3, #0]
 800c4de:	f7ff bf8d 	b.w	800c3fc <_puts_r>
 800c4e2:	bf00      	nop
 800c4e4:	20000088 	.word	0x20000088

0800c4e8 <sniprintf>:
 800c4e8:	b40c      	push	{r2, r3}
 800c4ea:	b530      	push	{r4, r5, lr}
 800c4ec:	4b17      	ldr	r3, [pc, #92]	; (800c54c <sniprintf+0x64>)
 800c4ee:	1e0c      	subs	r4, r1, #0
 800c4f0:	681d      	ldr	r5, [r3, #0]
 800c4f2:	b09d      	sub	sp, #116	; 0x74
 800c4f4:	da08      	bge.n	800c508 <sniprintf+0x20>
 800c4f6:	238b      	movs	r3, #139	; 0x8b
 800c4f8:	602b      	str	r3, [r5, #0]
 800c4fa:	f04f 30ff 	mov.w	r0, #4294967295
 800c4fe:	b01d      	add	sp, #116	; 0x74
 800c500:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c504:	b002      	add	sp, #8
 800c506:	4770      	bx	lr
 800c508:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c50c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c510:	bf14      	ite	ne
 800c512:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c516:	4623      	moveq	r3, r4
 800c518:	9304      	str	r3, [sp, #16]
 800c51a:	9307      	str	r3, [sp, #28]
 800c51c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c520:	9002      	str	r0, [sp, #8]
 800c522:	9006      	str	r0, [sp, #24]
 800c524:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c528:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c52a:	ab21      	add	r3, sp, #132	; 0x84
 800c52c:	a902      	add	r1, sp, #8
 800c52e:	4628      	mov	r0, r5
 800c530:	9301      	str	r3, [sp, #4]
 800c532:	f000 fc43 	bl	800cdbc <_svfiprintf_r>
 800c536:	1c43      	adds	r3, r0, #1
 800c538:	bfbc      	itt	lt
 800c53a:	238b      	movlt	r3, #139	; 0x8b
 800c53c:	602b      	strlt	r3, [r5, #0]
 800c53e:	2c00      	cmp	r4, #0
 800c540:	d0dd      	beq.n	800c4fe <sniprintf+0x16>
 800c542:	9b02      	ldr	r3, [sp, #8]
 800c544:	2200      	movs	r2, #0
 800c546:	701a      	strb	r2, [r3, #0]
 800c548:	e7d9      	b.n	800c4fe <sniprintf+0x16>
 800c54a:	bf00      	nop
 800c54c:	20000088 	.word	0x20000088

0800c550 <siprintf>:
 800c550:	b40e      	push	{r1, r2, r3}
 800c552:	b500      	push	{lr}
 800c554:	b09c      	sub	sp, #112	; 0x70
 800c556:	ab1d      	add	r3, sp, #116	; 0x74
 800c558:	9002      	str	r0, [sp, #8]
 800c55a:	9006      	str	r0, [sp, #24]
 800c55c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c560:	4809      	ldr	r0, [pc, #36]	; (800c588 <siprintf+0x38>)
 800c562:	9107      	str	r1, [sp, #28]
 800c564:	9104      	str	r1, [sp, #16]
 800c566:	4909      	ldr	r1, [pc, #36]	; (800c58c <siprintf+0x3c>)
 800c568:	f853 2b04 	ldr.w	r2, [r3], #4
 800c56c:	9105      	str	r1, [sp, #20]
 800c56e:	6800      	ldr	r0, [r0, #0]
 800c570:	9301      	str	r3, [sp, #4]
 800c572:	a902      	add	r1, sp, #8
 800c574:	f000 fc22 	bl	800cdbc <_svfiprintf_r>
 800c578:	9b02      	ldr	r3, [sp, #8]
 800c57a:	2200      	movs	r2, #0
 800c57c:	701a      	strb	r2, [r3, #0]
 800c57e:	b01c      	add	sp, #112	; 0x70
 800c580:	f85d eb04 	ldr.w	lr, [sp], #4
 800c584:	b003      	add	sp, #12
 800c586:	4770      	bx	lr
 800c588:	20000088 	.word	0x20000088
 800c58c:	ffff0208 	.word	0xffff0208

0800c590 <__swbuf_r>:
 800c590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c592:	460e      	mov	r6, r1
 800c594:	4614      	mov	r4, r2
 800c596:	4605      	mov	r5, r0
 800c598:	b118      	cbz	r0, 800c5a2 <__swbuf_r+0x12>
 800c59a:	6983      	ldr	r3, [r0, #24]
 800c59c:	b90b      	cbnz	r3, 800c5a2 <__swbuf_r+0x12>
 800c59e:	f000 f9cd 	bl	800c93c <__sinit>
 800c5a2:	4b21      	ldr	r3, [pc, #132]	; (800c628 <__swbuf_r+0x98>)
 800c5a4:	429c      	cmp	r4, r3
 800c5a6:	d12b      	bne.n	800c600 <__swbuf_r+0x70>
 800c5a8:	686c      	ldr	r4, [r5, #4]
 800c5aa:	69a3      	ldr	r3, [r4, #24]
 800c5ac:	60a3      	str	r3, [r4, #8]
 800c5ae:	89a3      	ldrh	r3, [r4, #12]
 800c5b0:	071a      	lsls	r2, r3, #28
 800c5b2:	d52f      	bpl.n	800c614 <__swbuf_r+0x84>
 800c5b4:	6923      	ldr	r3, [r4, #16]
 800c5b6:	b36b      	cbz	r3, 800c614 <__swbuf_r+0x84>
 800c5b8:	6923      	ldr	r3, [r4, #16]
 800c5ba:	6820      	ldr	r0, [r4, #0]
 800c5bc:	1ac0      	subs	r0, r0, r3
 800c5be:	6963      	ldr	r3, [r4, #20]
 800c5c0:	b2f6      	uxtb	r6, r6
 800c5c2:	4283      	cmp	r3, r0
 800c5c4:	4637      	mov	r7, r6
 800c5c6:	dc04      	bgt.n	800c5d2 <__swbuf_r+0x42>
 800c5c8:	4621      	mov	r1, r4
 800c5ca:	4628      	mov	r0, r5
 800c5cc:	f000 f922 	bl	800c814 <_fflush_r>
 800c5d0:	bb30      	cbnz	r0, 800c620 <__swbuf_r+0x90>
 800c5d2:	68a3      	ldr	r3, [r4, #8]
 800c5d4:	3b01      	subs	r3, #1
 800c5d6:	60a3      	str	r3, [r4, #8]
 800c5d8:	6823      	ldr	r3, [r4, #0]
 800c5da:	1c5a      	adds	r2, r3, #1
 800c5dc:	6022      	str	r2, [r4, #0]
 800c5de:	701e      	strb	r6, [r3, #0]
 800c5e0:	6963      	ldr	r3, [r4, #20]
 800c5e2:	3001      	adds	r0, #1
 800c5e4:	4283      	cmp	r3, r0
 800c5e6:	d004      	beq.n	800c5f2 <__swbuf_r+0x62>
 800c5e8:	89a3      	ldrh	r3, [r4, #12]
 800c5ea:	07db      	lsls	r3, r3, #31
 800c5ec:	d506      	bpl.n	800c5fc <__swbuf_r+0x6c>
 800c5ee:	2e0a      	cmp	r6, #10
 800c5f0:	d104      	bne.n	800c5fc <__swbuf_r+0x6c>
 800c5f2:	4621      	mov	r1, r4
 800c5f4:	4628      	mov	r0, r5
 800c5f6:	f000 f90d 	bl	800c814 <_fflush_r>
 800c5fa:	b988      	cbnz	r0, 800c620 <__swbuf_r+0x90>
 800c5fc:	4638      	mov	r0, r7
 800c5fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c600:	4b0a      	ldr	r3, [pc, #40]	; (800c62c <__swbuf_r+0x9c>)
 800c602:	429c      	cmp	r4, r3
 800c604:	d101      	bne.n	800c60a <__swbuf_r+0x7a>
 800c606:	68ac      	ldr	r4, [r5, #8]
 800c608:	e7cf      	b.n	800c5aa <__swbuf_r+0x1a>
 800c60a:	4b09      	ldr	r3, [pc, #36]	; (800c630 <__swbuf_r+0xa0>)
 800c60c:	429c      	cmp	r4, r3
 800c60e:	bf08      	it	eq
 800c610:	68ec      	ldreq	r4, [r5, #12]
 800c612:	e7ca      	b.n	800c5aa <__swbuf_r+0x1a>
 800c614:	4621      	mov	r1, r4
 800c616:	4628      	mov	r0, r5
 800c618:	f000 f80c 	bl	800c634 <__swsetup_r>
 800c61c:	2800      	cmp	r0, #0
 800c61e:	d0cb      	beq.n	800c5b8 <__swbuf_r+0x28>
 800c620:	f04f 37ff 	mov.w	r7, #4294967295
 800c624:	e7ea      	b.n	800c5fc <__swbuf_r+0x6c>
 800c626:	bf00      	nop
 800c628:	0800ec7c 	.word	0x0800ec7c
 800c62c:	0800ec9c 	.word	0x0800ec9c
 800c630:	0800ec5c 	.word	0x0800ec5c

0800c634 <__swsetup_r>:
 800c634:	4b32      	ldr	r3, [pc, #200]	; (800c700 <__swsetup_r+0xcc>)
 800c636:	b570      	push	{r4, r5, r6, lr}
 800c638:	681d      	ldr	r5, [r3, #0]
 800c63a:	4606      	mov	r6, r0
 800c63c:	460c      	mov	r4, r1
 800c63e:	b125      	cbz	r5, 800c64a <__swsetup_r+0x16>
 800c640:	69ab      	ldr	r3, [r5, #24]
 800c642:	b913      	cbnz	r3, 800c64a <__swsetup_r+0x16>
 800c644:	4628      	mov	r0, r5
 800c646:	f000 f979 	bl	800c93c <__sinit>
 800c64a:	4b2e      	ldr	r3, [pc, #184]	; (800c704 <__swsetup_r+0xd0>)
 800c64c:	429c      	cmp	r4, r3
 800c64e:	d10f      	bne.n	800c670 <__swsetup_r+0x3c>
 800c650:	686c      	ldr	r4, [r5, #4]
 800c652:	89a3      	ldrh	r3, [r4, #12]
 800c654:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c658:	0719      	lsls	r1, r3, #28
 800c65a:	d42c      	bmi.n	800c6b6 <__swsetup_r+0x82>
 800c65c:	06dd      	lsls	r5, r3, #27
 800c65e:	d411      	bmi.n	800c684 <__swsetup_r+0x50>
 800c660:	2309      	movs	r3, #9
 800c662:	6033      	str	r3, [r6, #0]
 800c664:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c668:	81a3      	strh	r3, [r4, #12]
 800c66a:	f04f 30ff 	mov.w	r0, #4294967295
 800c66e:	e03e      	b.n	800c6ee <__swsetup_r+0xba>
 800c670:	4b25      	ldr	r3, [pc, #148]	; (800c708 <__swsetup_r+0xd4>)
 800c672:	429c      	cmp	r4, r3
 800c674:	d101      	bne.n	800c67a <__swsetup_r+0x46>
 800c676:	68ac      	ldr	r4, [r5, #8]
 800c678:	e7eb      	b.n	800c652 <__swsetup_r+0x1e>
 800c67a:	4b24      	ldr	r3, [pc, #144]	; (800c70c <__swsetup_r+0xd8>)
 800c67c:	429c      	cmp	r4, r3
 800c67e:	bf08      	it	eq
 800c680:	68ec      	ldreq	r4, [r5, #12]
 800c682:	e7e6      	b.n	800c652 <__swsetup_r+0x1e>
 800c684:	0758      	lsls	r0, r3, #29
 800c686:	d512      	bpl.n	800c6ae <__swsetup_r+0x7a>
 800c688:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c68a:	b141      	cbz	r1, 800c69e <__swsetup_r+0x6a>
 800c68c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c690:	4299      	cmp	r1, r3
 800c692:	d002      	beq.n	800c69a <__swsetup_r+0x66>
 800c694:	4630      	mov	r0, r6
 800c696:	f000 fa57 	bl	800cb48 <_free_r>
 800c69a:	2300      	movs	r3, #0
 800c69c:	6363      	str	r3, [r4, #52]	; 0x34
 800c69e:	89a3      	ldrh	r3, [r4, #12]
 800c6a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c6a4:	81a3      	strh	r3, [r4, #12]
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	6063      	str	r3, [r4, #4]
 800c6aa:	6923      	ldr	r3, [r4, #16]
 800c6ac:	6023      	str	r3, [r4, #0]
 800c6ae:	89a3      	ldrh	r3, [r4, #12]
 800c6b0:	f043 0308 	orr.w	r3, r3, #8
 800c6b4:	81a3      	strh	r3, [r4, #12]
 800c6b6:	6923      	ldr	r3, [r4, #16]
 800c6b8:	b94b      	cbnz	r3, 800c6ce <__swsetup_r+0x9a>
 800c6ba:	89a3      	ldrh	r3, [r4, #12]
 800c6bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c6c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c6c4:	d003      	beq.n	800c6ce <__swsetup_r+0x9a>
 800c6c6:	4621      	mov	r1, r4
 800c6c8:	4630      	mov	r0, r6
 800c6ca:	f000 f9fd 	bl	800cac8 <__smakebuf_r>
 800c6ce:	89a0      	ldrh	r0, [r4, #12]
 800c6d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c6d4:	f010 0301 	ands.w	r3, r0, #1
 800c6d8:	d00a      	beq.n	800c6f0 <__swsetup_r+0xbc>
 800c6da:	2300      	movs	r3, #0
 800c6dc:	60a3      	str	r3, [r4, #8]
 800c6de:	6963      	ldr	r3, [r4, #20]
 800c6e0:	425b      	negs	r3, r3
 800c6e2:	61a3      	str	r3, [r4, #24]
 800c6e4:	6923      	ldr	r3, [r4, #16]
 800c6e6:	b943      	cbnz	r3, 800c6fa <__swsetup_r+0xc6>
 800c6e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c6ec:	d1ba      	bne.n	800c664 <__swsetup_r+0x30>
 800c6ee:	bd70      	pop	{r4, r5, r6, pc}
 800c6f0:	0781      	lsls	r1, r0, #30
 800c6f2:	bf58      	it	pl
 800c6f4:	6963      	ldrpl	r3, [r4, #20]
 800c6f6:	60a3      	str	r3, [r4, #8]
 800c6f8:	e7f4      	b.n	800c6e4 <__swsetup_r+0xb0>
 800c6fa:	2000      	movs	r0, #0
 800c6fc:	e7f7      	b.n	800c6ee <__swsetup_r+0xba>
 800c6fe:	bf00      	nop
 800c700:	20000088 	.word	0x20000088
 800c704:	0800ec7c 	.word	0x0800ec7c
 800c708:	0800ec9c 	.word	0x0800ec9c
 800c70c:	0800ec5c 	.word	0x0800ec5c

0800c710 <__sflush_r>:
 800c710:	898a      	ldrh	r2, [r1, #12]
 800c712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c714:	4605      	mov	r5, r0
 800c716:	0710      	lsls	r0, r2, #28
 800c718:	460c      	mov	r4, r1
 800c71a:	d457      	bmi.n	800c7cc <__sflush_r+0xbc>
 800c71c:	684b      	ldr	r3, [r1, #4]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	dc04      	bgt.n	800c72c <__sflush_r+0x1c>
 800c722:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c724:	2b00      	cmp	r3, #0
 800c726:	dc01      	bgt.n	800c72c <__sflush_r+0x1c>
 800c728:	2000      	movs	r0, #0
 800c72a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c72c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c72e:	2e00      	cmp	r6, #0
 800c730:	d0fa      	beq.n	800c728 <__sflush_r+0x18>
 800c732:	2300      	movs	r3, #0
 800c734:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c738:	682f      	ldr	r7, [r5, #0]
 800c73a:	602b      	str	r3, [r5, #0]
 800c73c:	d032      	beq.n	800c7a4 <__sflush_r+0x94>
 800c73e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c740:	89a3      	ldrh	r3, [r4, #12]
 800c742:	075a      	lsls	r2, r3, #29
 800c744:	d505      	bpl.n	800c752 <__sflush_r+0x42>
 800c746:	6863      	ldr	r3, [r4, #4]
 800c748:	1ac0      	subs	r0, r0, r3
 800c74a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c74c:	b10b      	cbz	r3, 800c752 <__sflush_r+0x42>
 800c74e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c750:	1ac0      	subs	r0, r0, r3
 800c752:	2300      	movs	r3, #0
 800c754:	4602      	mov	r2, r0
 800c756:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c758:	6a21      	ldr	r1, [r4, #32]
 800c75a:	4628      	mov	r0, r5
 800c75c:	47b0      	blx	r6
 800c75e:	1c43      	adds	r3, r0, #1
 800c760:	89a3      	ldrh	r3, [r4, #12]
 800c762:	d106      	bne.n	800c772 <__sflush_r+0x62>
 800c764:	6829      	ldr	r1, [r5, #0]
 800c766:	291d      	cmp	r1, #29
 800c768:	d82c      	bhi.n	800c7c4 <__sflush_r+0xb4>
 800c76a:	4a29      	ldr	r2, [pc, #164]	; (800c810 <__sflush_r+0x100>)
 800c76c:	40ca      	lsrs	r2, r1
 800c76e:	07d6      	lsls	r6, r2, #31
 800c770:	d528      	bpl.n	800c7c4 <__sflush_r+0xb4>
 800c772:	2200      	movs	r2, #0
 800c774:	6062      	str	r2, [r4, #4]
 800c776:	04d9      	lsls	r1, r3, #19
 800c778:	6922      	ldr	r2, [r4, #16]
 800c77a:	6022      	str	r2, [r4, #0]
 800c77c:	d504      	bpl.n	800c788 <__sflush_r+0x78>
 800c77e:	1c42      	adds	r2, r0, #1
 800c780:	d101      	bne.n	800c786 <__sflush_r+0x76>
 800c782:	682b      	ldr	r3, [r5, #0]
 800c784:	b903      	cbnz	r3, 800c788 <__sflush_r+0x78>
 800c786:	6560      	str	r0, [r4, #84]	; 0x54
 800c788:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c78a:	602f      	str	r7, [r5, #0]
 800c78c:	2900      	cmp	r1, #0
 800c78e:	d0cb      	beq.n	800c728 <__sflush_r+0x18>
 800c790:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c794:	4299      	cmp	r1, r3
 800c796:	d002      	beq.n	800c79e <__sflush_r+0x8e>
 800c798:	4628      	mov	r0, r5
 800c79a:	f000 f9d5 	bl	800cb48 <_free_r>
 800c79e:	2000      	movs	r0, #0
 800c7a0:	6360      	str	r0, [r4, #52]	; 0x34
 800c7a2:	e7c2      	b.n	800c72a <__sflush_r+0x1a>
 800c7a4:	6a21      	ldr	r1, [r4, #32]
 800c7a6:	2301      	movs	r3, #1
 800c7a8:	4628      	mov	r0, r5
 800c7aa:	47b0      	blx	r6
 800c7ac:	1c41      	adds	r1, r0, #1
 800c7ae:	d1c7      	bne.n	800c740 <__sflush_r+0x30>
 800c7b0:	682b      	ldr	r3, [r5, #0]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d0c4      	beq.n	800c740 <__sflush_r+0x30>
 800c7b6:	2b1d      	cmp	r3, #29
 800c7b8:	d001      	beq.n	800c7be <__sflush_r+0xae>
 800c7ba:	2b16      	cmp	r3, #22
 800c7bc:	d101      	bne.n	800c7c2 <__sflush_r+0xb2>
 800c7be:	602f      	str	r7, [r5, #0]
 800c7c0:	e7b2      	b.n	800c728 <__sflush_r+0x18>
 800c7c2:	89a3      	ldrh	r3, [r4, #12]
 800c7c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7c8:	81a3      	strh	r3, [r4, #12]
 800c7ca:	e7ae      	b.n	800c72a <__sflush_r+0x1a>
 800c7cc:	690f      	ldr	r7, [r1, #16]
 800c7ce:	2f00      	cmp	r7, #0
 800c7d0:	d0aa      	beq.n	800c728 <__sflush_r+0x18>
 800c7d2:	0793      	lsls	r3, r2, #30
 800c7d4:	680e      	ldr	r6, [r1, #0]
 800c7d6:	bf08      	it	eq
 800c7d8:	694b      	ldreq	r3, [r1, #20]
 800c7da:	600f      	str	r7, [r1, #0]
 800c7dc:	bf18      	it	ne
 800c7de:	2300      	movne	r3, #0
 800c7e0:	1bf6      	subs	r6, r6, r7
 800c7e2:	608b      	str	r3, [r1, #8]
 800c7e4:	2e00      	cmp	r6, #0
 800c7e6:	dd9f      	ble.n	800c728 <__sflush_r+0x18>
 800c7e8:	6a21      	ldr	r1, [r4, #32]
 800c7ea:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800c7ee:	4633      	mov	r3, r6
 800c7f0:	463a      	mov	r2, r7
 800c7f2:	4628      	mov	r0, r5
 800c7f4:	47e0      	blx	ip
 800c7f6:	2800      	cmp	r0, #0
 800c7f8:	dc06      	bgt.n	800c808 <__sflush_r+0xf8>
 800c7fa:	89a3      	ldrh	r3, [r4, #12]
 800c7fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c800:	81a3      	strh	r3, [r4, #12]
 800c802:	f04f 30ff 	mov.w	r0, #4294967295
 800c806:	e790      	b.n	800c72a <__sflush_r+0x1a>
 800c808:	4407      	add	r7, r0
 800c80a:	1a36      	subs	r6, r6, r0
 800c80c:	e7ea      	b.n	800c7e4 <__sflush_r+0xd4>
 800c80e:	bf00      	nop
 800c810:	20400001 	.word	0x20400001

0800c814 <_fflush_r>:
 800c814:	b538      	push	{r3, r4, r5, lr}
 800c816:	690b      	ldr	r3, [r1, #16]
 800c818:	4605      	mov	r5, r0
 800c81a:	460c      	mov	r4, r1
 800c81c:	b913      	cbnz	r3, 800c824 <_fflush_r+0x10>
 800c81e:	2500      	movs	r5, #0
 800c820:	4628      	mov	r0, r5
 800c822:	bd38      	pop	{r3, r4, r5, pc}
 800c824:	b118      	cbz	r0, 800c82e <_fflush_r+0x1a>
 800c826:	6983      	ldr	r3, [r0, #24]
 800c828:	b90b      	cbnz	r3, 800c82e <_fflush_r+0x1a>
 800c82a:	f000 f887 	bl	800c93c <__sinit>
 800c82e:	4b14      	ldr	r3, [pc, #80]	; (800c880 <_fflush_r+0x6c>)
 800c830:	429c      	cmp	r4, r3
 800c832:	d11b      	bne.n	800c86c <_fflush_r+0x58>
 800c834:	686c      	ldr	r4, [r5, #4]
 800c836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d0ef      	beq.n	800c81e <_fflush_r+0xa>
 800c83e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c840:	07d0      	lsls	r0, r2, #31
 800c842:	d404      	bmi.n	800c84e <_fflush_r+0x3a>
 800c844:	0599      	lsls	r1, r3, #22
 800c846:	d402      	bmi.n	800c84e <_fflush_r+0x3a>
 800c848:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c84a:	f000 f915 	bl	800ca78 <__retarget_lock_acquire_recursive>
 800c84e:	4628      	mov	r0, r5
 800c850:	4621      	mov	r1, r4
 800c852:	f7ff ff5d 	bl	800c710 <__sflush_r>
 800c856:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c858:	07da      	lsls	r2, r3, #31
 800c85a:	4605      	mov	r5, r0
 800c85c:	d4e0      	bmi.n	800c820 <_fflush_r+0xc>
 800c85e:	89a3      	ldrh	r3, [r4, #12]
 800c860:	059b      	lsls	r3, r3, #22
 800c862:	d4dd      	bmi.n	800c820 <_fflush_r+0xc>
 800c864:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c866:	f000 f908 	bl	800ca7a <__retarget_lock_release_recursive>
 800c86a:	e7d9      	b.n	800c820 <_fflush_r+0xc>
 800c86c:	4b05      	ldr	r3, [pc, #20]	; (800c884 <_fflush_r+0x70>)
 800c86e:	429c      	cmp	r4, r3
 800c870:	d101      	bne.n	800c876 <_fflush_r+0x62>
 800c872:	68ac      	ldr	r4, [r5, #8]
 800c874:	e7df      	b.n	800c836 <_fflush_r+0x22>
 800c876:	4b04      	ldr	r3, [pc, #16]	; (800c888 <_fflush_r+0x74>)
 800c878:	429c      	cmp	r4, r3
 800c87a:	bf08      	it	eq
 800c87c:	68ec      	ldreq	r4, [r5, #12]
 800c87e:	e7da      	b.n	800c836 <_fflush_r+0x22>
 800c880:	0800ec7c 	.word	0x0800ec7c
 800c884:	0800ec9c 	.word	0x0800ec9c
 800c888:	0800ec5c 	.word	0x0800ec5c

0800c88c <std>:
 800c88c:	2300      	movs	r3, #0
 800c88e:	b510      	push	{r4, lr}
 800c890:	4604      	mov	r4, r0
 800c892:	e9c0 3300 	strd	r3, r3, [r0]
 800c896:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c89a:	6083      	str	r3, [r0, #8]
 800c89c:	8181      	strh	r1, [r0, #12]
 800c89e:	6643      	str	r3, [r0, #100]	; 0x64
 800c8a0:	81c2      	strh	r2, [r0, #14]
 800c8a2:	6183      	str	r3, [r0, #24]
 800c8a4:	4619      	mov	r1, r3
 800c8a6:	2208      	movs	r2, #8
 800c8a8:	305c      	adds	r0, #92	; 0x5c
 800c8aa:	f7ff fd87 	bl	800c3bc <memset>
 800c8ae:	4b05      	ldr	r3, [pc, #20]	; (800c8c4 <std+0x38>)
 800c8b0:	6263      	str	r3, [r4, #36]	; 0x24
 800c8b2:	4b05      	ldr	r3, [pc, #20]	; (800c8c8 <std+0x3c>)
 800c8b4:	62a3      	str	r3, [r4, #40]	; 0x28
 800c8b6:	4b05      	ldr	r3, [pc, #20]	; (800c8cc <std+0x40>)
 800c8b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c8ba:	4b05      	ldr	r3, [pc, #20]	; (800c8d0 <std+0x44>)
 800c8bc:	6224      	str	r4, [r4, #32]
 800c8be:	6323      	str	r3, [r4, #48]	; 0x30
 800c8c0:	bd10      	pop	{r4, pc}
 800c8c2:	bf00      	nop
 800c8c4:	0800d5b5 	.word	0x0800d5b5
 800c8c8:	0800d5d7 	.word	0x0800d5d7
 800c8cc:	0800d60f 	.word	0x0800d60f
 800c8d0:	0800d633 	.word	0x0800d633

0800c8d4 <_cleanup_r>:
 800c8d4:	4901      	ldr	r1, [pc, #4]	; (800c8dc <_cleanup_r+0x8>)
 800c8d6:	f000 b8af 	b.w	800ca38 <_fwalk_reent>
 800c8da:	bf00      	nop
 800c8dc:	0800c815 	.word	0x0800c815

0800c8e0 <__sfmoreglue>:
 800c8e0:	b570      	push	{r4, r5, r6, lr}
 800c8e2:	2268      	movs	r2, #104	; 0x68
 800c8e4:	1e4d      	subs	r5, r1, #1
 800c8e6:	4355      	muls	r5, r2
 800c8e8:	460e      	mov	r6, r1
 800c8ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c8ee:	f000 f995 	bl	800cc1c <_malloc_r>
 800c8f2:	4604      	mov	r4, r0
 800c8f4:	b140      	cbz	r0, 800c908 <__sfmoreglue+0x28>
 800c8f6:	2100      	movs	r1, #0
 800c8f8:	e9c0 1600 	strd	r1, r6, [r0]
 800c8fc:	300c      	adds	r0, #12
 800c8fe:	60a0      	str	r0, [r4, #8]
 800c900:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c904:	f7ff fd5a 	bl	800c3bc <memset>
 800c908:	4620      	mov	r0, r4
 800c90a:	bd70      	pop	{r4, r5, r6, pc}

0800c90c <__sfp_lock_acquire>:
 800c90c:	4801      	ldr	r0, [pc, #4]	; (800c914 <__sfp_lock_acquire+0x8>)
 800c90e:	f000 b8b3 	b.w	800ca78 <__retarget_lock_acquire_recursive>
 800c912:	bf00      	nop
 800c914:	20000931 	.word	0x20000931

0800c918 <__sfp_lock_release>:
 800c918:	4801      	ldr	r0, [pc, #4]	; (800c920 <__sfp_lock_release+0x8>)
 800c91a:	f000 b8ae 	b.w	800ca7a <__retarget_lock_release_recursive>
 800c91e:	bf00      	nop
 800c920:	20000931 	.word	0x20000931

0800c924 <__sinit_lock_acquire>:
 800c924:	4801      	ldr	r0, [pc, #4]	; (800c92c <__sinit_lock_acquire+0x8>)
 800c926:	f000 b8a7 	b.w	800ca78 <__retarget_lock_acquire_recursive>
 800c92a:	bf00      	nop
 800c92c:	20000932 	.word	0x20000932

0800c930 <__sinit_lock_release>:
 800c930:	4801      	ldr	r0, [pc, #4]	; (800c938 <__sinit_lock_release+0x8>)
 800c932:	f000 b8a2 	b.w	800ca7a <__retarget_lock_release_recursive>
 800c936:	bf00      	nop
 800c938:	20000932 	.word	0x20000932

0800c93c <__sinit>:
 800c93c:	b510      	push	{r4, lr}
 800c93e:	4604      	mov	r4, r0
 800c940:	f7ff fff0 	bl	800c924 <__sinit_lock_acquire>
 800c944:	69a3      	ldr	r3, [r4, #24]
 800c946:	b11b      	cbz	r3, 800c950 <__sinit+0x14>
 800c948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c94c:	f7ff bff0 	b.w	800c930 <__sinit_lock_release>
 800c950:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c954:	6523      	str	r3, [r4, #80]	; 0x50
 800c956:	4b13      	ldr	r3, [pc, #76]	; (800c9a4 <__sinit+0x68>)
 800c958:	4a13      	ldr	r2, [pc, #76]	; (800c9a8 <__sinit+0x6c>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c95e:	42a3      	cmp	r3, r4
 800c960:	bf04      	itt	eq
 800c962:	2301      	moveq	r3, #1
 800c964:	61a3      	streq	r3, [r4, #24]
 800c966:	4620      	mov	r0, r4
 800c968:	f000 f820 	bl	800c9ac <__sfp>
 800c96c:	6060      	str	r0, [r4, #4]
 800c96e:	4620      	mov	r0, r4
 800c970:	f000 f81c 	bl	800c9ac <__sfp>
 800c974:	60a0      	str	r0, [r4, #8]
 800c976:	4620      	mov	r0, r4
 800c978:	f000 f818 	bl	800c9ac <__sfp>
 800c97c:	2200      	movs	r2, #0
 800c97e:	60e0      	str	r0, [r4, #12]
 800c980:	2104      	movs	r1, #4
 800c982:	6860      	ldr	r0, [r4, #4]
 800c984:	f7ff ff82 	bl	800c88c <std>
 800c988:	68a0      	ldr	r0, [r4, #8]
 800c98a:	2201      	movs	r2, #1
 800c98c:	2109      	movs	r1, #9
 800c98e:	f7ff ff7d 	bl	800c88c <std>
 800c992:	68e0      	ldr	r0, [r4, #12]
 800c994:	2202      	movs	r2, #2
 800c996:	2112      	movs	r1, #18
 800c998:	f7ff ff78 	bl	800c88c <std>
 800c99c:	2301      	movs	r3, #1
 800c99e:	61a3      	str	r3, [r4, #24]
 800c9a0:	e7d2      	b.n	800c948 <__sinit+0xc>
 800c9a2:	bf00      	nop
 800c9a4:	0800ec58 	.word	0x0800ec58
 800c9a8:	0800c8d5 	.word	0x0800c8d5

0800c9ac <__sfp>:
 800c9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ae:	4607      	mov	r7, r0
 800c9b0:	f7ff ffac 	bl	800c90c <__sfp_lock_acquire>
 800c9b4:	4b1e      	ldr	r3, [pc, #120]	; (800ca30 <__sfp+0x84>)
 800c9b6:	681e      	ldr	r6, [r3, #0]
 800c9b8:	69b3      	ldr	r3, [r6, #24]
 800c9ba:	b913      	cbnz	r3, 800c9c2 <__sfp+0x16>
 800c9bc:	4630      	mov	r0, r6
 800c9be:	f7ff ffbd 	bl	800c93c <__sinit>
 800c9c2:	3648      	adds	r6, #72	; 0x48
 800c9c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c9c8:	3b01      	subs	r3, #1
 800c9ca:	d503      	bpl.n	800c9d4 <__sfp+0x28>
 800c9cc:	6833      	ldr	r3, [r6, #0]
 800c9ce:	b30b      	cbz	r3, 800ca14 <__sfp+0x68>
 800c9d0:	6836      	ldr	r6, [r6, #0]
 800c9d2:	e7f7      	b.n	800c9c4 <__sfp+0x18>
 800c9d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c9d8:	b9d5      	cbnz	r5, 800ca10 <__sfp+0x64>
 800c9da:	4b16      	ldr	r3, [pc, #88]	; (800ca34 <__sfp+0x88>)
 800c9dc:	60e3      	str	r3, [r4, #12]
 800c9de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c9e2:	6665      	str	r5, [r4, #100]	; 0x64
 800c9e4:	f000 f847 	bl	800ca76 <__retarget_lock_init_recursive>
 800c9e8:	f7ff ff96 	bl	800c918 <__sfp_lock_release>
 800c9ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c9f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c9f4:	6025      	str	r5, [r4, #0]
 800c9f6:	61a5      	str	r5, [r4, #24]
 800c9f8:	2208      	movs	r2, #8
 800c9fa:	4629      	mov	r1, r5
 800c9fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ca00:	f7ff fcdc 	bl	800c3bc <memset>
 800ca04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ca08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ca0c:	4620      	mov	r0, r4
 800ca0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca10:	3468      	adds	r4, #104	; 0x68
 800ca12:	e7d9      	b.n	800c9c8 <__sfp+0x1c>
 800ca14:	2104      	movs	r1, #4
 800ca16:	4638      	mov	r0, r7
 800ca18:	f7ff ff62 	bl	800c8e0 <__sfmoreglue>
 800ca1c:	4604      	mov	r4, r0
 800ca1e:	6030      	str	r0, [r6, #0]
 800ca20:	2800      	cmp	r0, #0
 800ca22:	d1d5      	bne.n	800c9d0 <__sfp+0x24>
 800ca24:	f7ff ff78 	bl	800c918 <__sfp_lock_release>
 800ca28:	230c      	movs	r3, #12
 800ca2a:	603b      	str	r3, [r7, #0]
 800ca2c:	e7ee      	b.n	800ca0c <__sfp+0x60>
 800ca2e:	bf00      	nop
 800ca30:	0800ec58 	.word	0x0800ec58
 800ca34:	ffff0001 	.word	0xffff0001

0800ca38 <_fwalk_reent>:
 800ca38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca3c:	4606      	mov	r6, r0
 800ca3e:	4688      	mov	r8, r1
 800ca40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ca44:	2700      	movs	r7, #0
 800ca46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ca4a:	f1b9 0901 	subs.w	r9, r9, #1
 800ca4e:	d505      	bpl.n	800ca5c <_fwalk_reent+0x24>
 800ca50:	6824      	ldr	r4, [r4, #0]
 800ca52:	2c00      	cmp	r4, #0
 800ca54:	d1f7      	bne.n	800ca46 <_fwalk_reent+0xe>
 800ca56:	4638      	mov	r0, r7
 800ca58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca5c:	89ab      	ldrh	r3, [r5, #12]
 800ca5e:	2b01      	cmp	r3, #1
 800ca60:	d907      	bls.n	800ca72 <_fwalk_reent+0x3a>
 800ca62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ca66:	3301      	adds	r3, #1
 800ca68:	d003      	beq.n	800ca72 <_fwalk_reent+0x3a>
 800ca6a:	4629      	mov	r1, r5
 800ca6c:	4630      	mov	r0, r6
 800ca6e:	47c0      	blx	r8
 800ca70:	4307      	orrs	r7, r0
 800ca72:	3568      	adds	r5, #104	; 0x68
 800ca74:	e7e9      	b.n	800ca4a <_fwalk_reent+0x12>

0800ca76 <__retarget_lock_init_recursive>:
 800ca76:	4770      	bx	lr

0800ca78 <__retarget_lock_acquire_recursive>:
 800ca78:	4770      	bx	lr

0800ca7a <__retarget_lock_release_recursive>:
 800ca7a:	4770      	bx	lr

0800ca7c <__swhatbuf_r>:
 800ca7c:	b570      	push	{r4, r5, r6, lr}
 800ca7e:	460e      	mov	r6, r1
 800ca80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca84:	2900      	cmp	r1, #0
 800ca86:	b096      	sub	sp, #88	; 0x58
 800ca88:	4614      	mov	r4, r2
 800ca8a:	461d      	mov	r5, r3
 800ca8c:	da08      	bge.n	800caa0 <__swhatbuf_r+0x24>
 800ca8e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ca92:	2200      	movs	r2, #0
 800ca94:	602a      	str	r2, [r5, #0]
 800ca96:	061a      	lsls	r2, r3, #24
 800ca98:	d410      	bmi.n	800cabc <__swhatbuf_r+0x40>
 800ca9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca9e:	e00e      	b.n	800cabe <__swhatbuf_r+0x42>
 800caa0:	466a      	mov	r2, sp
 800caa2:	f000 fded 	bl	800d680 <_fstat_r>
 800caa6:	2800      	cmp	r0, #0
 800caa8:	dbf1      	blt.n	800ca8e <__swhatbuf_r+0x12>
 800caaa:	9a01      	ldr	r2, [sp, #4]
 800caac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cab0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cab4:	425a      	negs	r2, r3
 800cab6:	415a      	adcs	r2, r3
 800cab8:	602a      	str	r2, [r5, #0]
 800caba:	e7ee      	b.n	800ca9a <__swhatbuf_r+0x1e>
 800cabc:	2340      	movs	r3, #64	; 0x40
 800cabe:	2000      	movs	r0, #0
 800cac0:	6023      	str	r3, [r4, #0]
 800cac2:	b016      	add	sp, #88	; 0x58
 800cac4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cac8 <__smakebuf_r>:
 800cac8:	898b      	ldrh	r3, [r1, #12]
 800caca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cacc:	079d      	lsls	r5, r3, #30
 800cace:	4606      	mov	r6, r0
 800cad0:	460c      	mov	r4, r1
 800cad2:	d507      	bpl.n	800cae4 <__smakebuf_r+0x1c>
 800cad4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cad8:	6023      	str	r3, [r4, #0]
 800cada:	6123      	str	r3, [r4, #16]
 800cadc:	2301      	movs	r3, #1
 800cade:	6163      	str	r3, [r4, #20]
 800cae0:	b002      	add	sp, #8
 800cae2:	bd70      	pop	{r4, r5, r6, pc}
 800cae4:	ab01      	add	r3, sp, #4
 800cae6:	466a      	mov	r2, sp
 800cae8:	f7ff ffc8 	bl	800ca7c <__swhatbuf_r>
 800caec:	9900      	ldr	r1, [sp, #0]
 800caee:	4605      	mov	r5, r0
 800caf0:	4630      	mov	r0, r6
 800caf2:	f000 f893 	bl	800cc1c <_malloc_r>
 800caf6:	b948      	cbnz	r0, 800cb0c <__smakebuf_r+0x44>
 800caf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cafc:	059a      	lsls	r2, r3, #22
 800cafe:	d4ef      	bmi.n	800cae0 <__smakebuf_r+0x18>
 800cb00:	f023 0303 	bic.w	r3, r3, #3
 800cb04:	f043 0302 	orr.w	r3, r3, #2
 800cb08:	81a3      	strh	r3, [r4, #12]
 800cb0a:	e7e3      	b.n	800cad4 <__smakebuf_r+0xc>
 800cb0c:	4b0d      	ldr	r3, [pc, #52]	; (800cb44 <__smakebuf_r+0x7c>)
 800cb0e:	62b3      	str	r3, [r6, #40]	; 0x28
 800cb10:	89a3      	ldrh	r3, [r4, #12]
 800cb12:	6020      	str	r0, [r4, #0]
 800cb14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb18:	81a3      	strh	r3, [r4, #12]
 800cb1a:	9b00      	ldr	r3, [sp, #0]
 800cb1c:	6163      	str	r3, [r4, #20]
 800cb1e:	9b01      	ldr	r3, [sp, #4]
 800cb20:	6120      	str	r0, [r4, #16]
 800cb22:	b15b      	cbz	r3, 800cb3c <__smakebuf_r+0x74>
 800cb24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb28:	4630      	mov	r0, r6
 800cb2a:	f000 fdbb 	bl	800d6a4 <_isatty_r>
 800cb2e:	b128      	cbz	r0, 800cb3c <__smakebuf_r+0x74>
 800cb30:	89a3      	ldrh	r3, [r4, #12]
 800cb32:	f023 0303 	bic.w	r3, r3, #3
 800cb36:	f043 0301 	orr.w	r3, r3, #1
 800cb3a:	81a3      	strh	r3, [r4, #12]
 800cb3c:	89a0      	ldrh	r0, [r4, #12]
 800cb3e:	4305      	orrs	r5, r0
 800cb40:	81a5      	strh	r5, [r4, #12]
 800cb42:	e7cd      	b.n	800cae0 <__smakebuf_r+0x18>
 800cb44:	0800c8d5 	.word	0x0800c8d5

0800cb48 <_free_r>:
 800cb48:	b538      	push	{r3, r4, r5, lr}
 800cb4a:	4605      	mov	r5, r0
 800cb4c:	2900      	cmp	r1, #0
 800cb4e:	d041      	beq.n	800cbd4 <_free_r+0x8c>
 800cb50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb54:	1f0c      	subs	r4, r1, #4
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	bfb8      	it	lt
 800cb5a:	18e4      	addlt	r4, r4, r3
 800cb5c:	f000 fdec 	bl	800d738 <__malloc_lock>
 800cb60:	4a1d      	ldr	r2, [pc, #116]	; (800cbd8 <_free_r+0x90>)
 800cb62:	6813      	ldr	r3, [r2, #0]
 800cb64:	b933      	cbnz	r3, 800cb74 <_free_r+0x2c>
 800cb66:	6063      	str	r3, [r4, #4]
 800cb68:	6014      	str	r4, [r2, #0]
 800cb6a:	4628      	mov	r0, r5
 800cb6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb70:	f000 bde8 	b.w	800d744 <__malloc_unlock>
 800cb74:	42a3      	cmp	r3, r4
 800cb76:	d908      	bls.n	800cb8a <_free_r+0x42>
 800cb78:	6820      	ldr	r0, [r4, #0]
 800cb7a:	1821      	adds	r1, r4, r0
 800cb7c:	428b      	cmp	r3, r1
 800cb7e:	bf01      	itttt	eq
 800cb80:	6819      	ldreq	r1, [r3, #0]
 800cb82:	685b      	ldreq	r3, [r3, #4]
 800cb84:	1809      	addeq	r1, r1, r0
 800cb86:	6021      	streq	r1, [r4, #0]
 800cb88:	e7ed      	b.n	800cb66 <_free_r+0x1e>
 800cb8a:	461a      	mov	r2, r3
 800cb8c:	685b      	ldr	r3, [r3, #4]
 800cb8e:	b10b      	cbz	r3, 800cb94 <_free_r+0x4c>
 800cb90:	42a3      	cmp	r3, r4
 800cb92:	d9fa      	bls.n	800cb8a <_free_r+0x42>
 800cb94:	6811      	ldr	r1, [r2, #0]
 800cb96:	1850      	adds	r0, r2, r1
 800cb98:	42a0      	cmp	r0, r4
 800cb9a:	d10b      	bne.n	800cbb4 <_free_r+0x6c>
 800cb9c:	6820      	ldr	r0, [r4, #0]
 800cb9e:	4401      	add	r1, r0
 800cba0:	1850      	adds	r0, r2, r1
 800cba2:	4283      	cmp	r3, r0
 800cba4:	6011      	str	r1, [r2, #0]
 800cba6:	d1e0      	bne.n	800cb6a <_free_r+0x22>
 800cba8:	6818      	ldr	r0, [r3, #0]
 800cbaa:	685b      	ldr	r3, [r3, #4]
 800cbac:	6053      	str	r3, [r2, #4]
 800cbae:	4401      	add	r1, r0
 800cbb0:	6011      	str	r1, [r2, #0]
 800cbb2:	e7da      	b.n	800cb6a <_free_r+0x22>
 800cbb4:	d902      	bls.n	800cbbc <_free_r+0x74>
 800cbb6:	230c      	movs	r3, #12
 800cbb8:	602b      	str	r3, [r5, #0]
 800cbba:	e7d6      	b.n	800cb6a <_free_r+0x22>
 800cbbc:	6820      	ldr	r0, [r4, #0]
 800cbbe:	1821      	adds	r1, r4, r0
 800cbc0:	428b      	cmp	r3, r1
 800cbc2:	bf04      	itt	eq
 800cbc4:	6819      	ldreq	r1, [r3, #0]
 800cbc6:	685b      	ldreq	r3, [r3, #4]
 800cbc8:	6063      	str	r3, [r4, #4]
 800cbca:	bf04      	itt	eq
 800cbcc:	1809      	addeq	r1, r1, r0
 800cbce:	6021      	streq	r1, [r4, #0]
 800cbd0:	6054      	str	r4, [r2, #4]
 800cbd2:	e7ca      	b.n	800cb6a <_free_r+0x22>
 800cbd4:	bd38      	pop	{r3, r4, r5, pc}
 800cbd6:	bf00      	nop
 800cbd8:	20000934 	.word	0x20000934

0800cbdc <sbrk_aligned>:
 800cbdc:	b570      	push	{r4, r5, r6, lr}
 800cbde:	4e0e      	ldr	r6, [pc, #56]	; (800cc18 <sbrk_aligned+0x3c>)
 800cbe0:	460c      	mov	r4, r1
 800cbe2:	6831      	ldr	r1, [r6, #0]
 800cbe4:	4605      	mov	r5, r0
 800cbe6:	b911      	cbnz	r1, 800cbee <sbrk_aligned+0x12>
 800cbe8:	f000 fcd4 	bl	800d594 <_sbrk_r>
 800cbec:	6030      	str	r0, [r6, #0]
 800cbee:	4621      	mov	r1, r4
 800cbf0:	4628      	mov	r0, r5
 800cbf2:	f000 fccf 	bl	800d594 <_sbrk_r>
 800cbf6:	1c43      	adds	r3, r0, #1
 800cbf8:	d00a      	beq.n	800cc10 <sbrk_aligned+0x34>
 800cbfa:	1cc4      	adds	r4, r0, #3
 800cbfc:	f024 0403 	bic.w	r4, r4, #3
 800cc00:	42a0      	cmp	r0, r4
 800cc02:	d007      	beq.n	800cc14 <sbrk_aligned+0x38>
 800cc04:	1a21      	subs	r1, r4, r0
 800cc06:	4628      	mov	r0, r5
 800cc08:	f000 fcc4 	bl	800d594 <_sbrk_r>
 800cc0c:	3001      	adds	r0, #1
 800cc0e:	d101      	bne.n	800cc14 <sbrk_aligned+0x38>
 800cc10:	f04f 34ff 	mov.w	r4, #4294967295
 800cc14:	4620      	mov	r0, r4
 800cc16:	bd70      	pop	{r4, r5, r6, pc}
 800cc18:	20000938 	.word	0x20000938

0800cc1c <_malloc_r>:
 800cc1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc20:	1ccd      	adds	r5, r1, #3
 800cc22:	f025 0503 	bic.w	r5, r5, #3
 800cc26:	3508      	adds	r5, #8
 800cc28:	2d0c      	cmp	r5, #12
 800cc2a:	bf38      	it	cc
 800cc2c:	250c      	movcc	r5, #12
 800cc2e:	2d00      	cmp	r5, #0
 800cc30:	4607      	mov	r7, r0
 800cc32:	db01      	blt.n	800cc38 <_malloc_r+0x1c>
 800cc34:	42a9      	cmp	r1, r5
 800cc36:	d905      	bls.n	800cc44 <_malloc_r+0x28>
 800cc38:	230c      	movs	r3, #12
 800cc3a:	603b      	str	r3, [r7, #0]
 800cc3c:	2600      	movs	r6, #0
 800cc3e:	4630      	mov	r0, r6
 800cc40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc44:	4e2e      	ldr	r6, [pc, #184]	; (800cd00 <_malloc_r+0xe4>)
 800cc46:	f000 fd77 	bl	800d738 <__malloc_lock>
 800cc4a:	6833      	ldr	r3, [r6, #0]
 800cc4c:	461c      	mov	r4, r3
 800cc4e:	bb34      	cbnz	r4, 800cc9e <_malloc_r+0x82>
 800cc50:	4629      	mov	r1, r5
 800cc52:	4638      	mov	r0, r7
 800cc54:	f7ff ffc2 	bl	800cbdc <sbrk_aligned>
 800cc58:	1c43      	adds	r3, r0, #1
 800cc5a:	4604      	mov	r4, r0
 800cc5c:	d14d      	bne.n	800ccfa <_malloc_r+0xde>
 800cc5e:	6834      	ldr	r4, [r6, #0]
 800cc60:	4626      	mov	r6, r4
 800cc62:	2e00      	cmp	r6, #0
 800cc64:	d140      	bne.n	800cce8 <_malloc_r+0xcc>
 800cc66:	6823      	ldr	r3, [r4, #0]
 800cc68:	4631      	mov	r1, r6
 800cc6a:	4638      	mov	r0, r7
 800cc6c:	eb04 0803 	add.w	r8, r4, r3
 800cc70:	f000 fc90 	bl	800d594 <_sbrk_r>
 800cc74:	4580      	cmp	r8, r0
 800cc76:	d13a      	bne.n	800ccee <_malloc_r+0xd2>
 800cc78:	6821      	ldr	r1, [r4, #0]
 800cc7a:	3503      	adds	r5, #3
 800cc7c:	1a6d      	subs	r5, r5, r1
 800cc7e:	f025 0503 	bic.w	r5, r5, #3
 800cc82:	3508      	adds	r5, #8
 800cc84:	2d0c      	cmp	r5, #12
 800cc86:	bf38      	it	cc
 800cc88:	250c      	movcc	r5, #12
 800cc8a:	4629      	mov	r1, r5
 800cc8c:	4638      	mov	r0, r7
 800cc8e:	f7ff ffa5 	bl	800cbdc <sbrk_aligned>
 800cc92:	3001      	adds	r0, #1
 800cc94:	d02b      	beq.n	800ccee <_malloc_r+0xd2>
 800cc96:	6823      	ldr	r3, [r4, #0]
 800cc98:	442b      	add	r3, r5
 800cc9a:	6023      	str	r3, [r4, #0]
 800cc9c:	e00e      	b.n	800ccbc <_malloc_r+0xa0>
 800cc9e:	6822      	ldr	r2, [r4, #0]
 800cca0:	1b52      	subs	r2, r2, r5
 800cca2:	d41e      	bmi.n	800cce2 <_malloc_r+0xc6>
 800cca4:	2a0b      	cmp	r2, #11
 800cca6:	d916      	bls.n	800ccd6 <_malloc_r+0xba>
 800cca8:	1961      	adds	r1, r4, r5
 800ccaa:	42a3      	cmp	r3, r4
 800ccac:	6025      	str	r5, [r4, #0]
 800ccae:	bf18      	it	ne
 800ccb0:	6059      	strne	r1, [r3, #4]
 800ccb2:	6863      	ldr	r3, [r4, #4]
 800ccb4:	bf08      	it	eq
 800ccb6:	6031      	streq	r1, [r6, #0]
 800ccb8:	5162      	str	r2, [r4, r5]
 800ccba:	604b      	str	r3, [r1, #4]
 800ccbc:	4638      	mov	r0, r7
 800ccbe:	f104 060b 	add.w	r6, r4, #11
 800ccc2:	f000 fd3f 	bl	800d744 <__malloc_unlock>
 800ccc6:	f026 0607 	bic.w	r6, r6, #7
 800ccca:	1d23      	adds	r3, r4, #4
 800cccc:	1af2      	subs	r2, r6, r3
 800ccce:	d0b6      	beq.n	800cc3e <_malloc_r+0x22>
 800ccd0:	1b9b      	subs	r3, r3, r6
 800ccd2:	50a3      	str	r3, [r4, r2]
 800ccd4:	e7b3      	b.n	800cc3e <_malloc_r+0x22>
 800ccd6:	6862      	ldr	r2, [r4, #4]
 800ccd8:	42a3      	cmp	r3, r4
 800ccda:	bf0c      	ite	eq
 800ccdc:	6032      	streq	r2, [r6, #0]
 800ccde:	605a      	strne	r2, [r3, #4]
 800cce0:	e7ec      	b.n	800ccbc <_malloc_r+0xa0>
 800cce2:	4623      	mov	r3, r4
 800cce4:	6864      	ldr	r4, [r4, #4]
 800cce6:	e7b2      	b.n	800cc4e <_malloc_r+0x32>
 800cce8:	4634      	mov	r4, r6
 800ccea:	6876      	ldr	r6, [r6, #4]
 800ccec:	e7b9      	b.n	800cc62 <_malloc_r+0x46>
 800ccee:	230c      	movs	r3, #12
 800ccf0:	603b      	str	r3, [r7, #0]
 800ccf2:	4638      	mov	r0, r7
 800ccf4:	f000 fd26 	bl	800d744 <__malloc_unlock>
 800ccf8:	e7a1      	b.n	800cc3e <_malloc_r+0x22>
 800ccfa:	6025      	str	r5, [r4, #0]
 800ccfc:	e7de      	b.n	800ccbc <_malloc_r+0xa0>
 800ccfe:	bf00      	nop
 800cd00:	20000934 	.word	0x20000934

0800cd04 <__ssputs_r>:
 800cd04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd08:	688e      	ldr	r6, [r1, #8]
 800cd0a:	429e      	cmp	r6, r3
 800cd0c:	4682      	mov	sl, r0
 800cd0e:	460c      	mov	r4, r1
 800cd10:	4690      	mov	r8, r2
 800cd12:	461f      	mov	r7, r3
 800cd14:	d838      	bhi.n	800cd88 <__ssputs_r+0x84>
 800cd16:	898a      	ldrh	r2, [r1, #12]
 800cd18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cd1c:	d032      	beq.n	800cd84 <__ssputs_r+0x80>
 800cd1e:	6825      	ldr	r5, [r4, #0]
 800cd20:	6909      	ldr	r1, [r1, #16]
 800cd22:	eba5 0901 	sub.w	r9, r5, r1
 800cd26:	6965      	ldr	r5, [r4, #20]
 800cd28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cd30:	3301      	adds	r3, #1
 800cd32:	444b      	add	r3, r9
 800cd34:	106d      	asrs	r5, r5, #1
 800cd36:	429d      	cmp	r5, r3
 800cd38:	bf38      	it	cc
 800cd3a:	461d      	movcc	r5, r3
 800cd3c:	0553      	lsls	r3, r2, #21
 800cd3e:	d531      	bpl.n	800cda4 <__ssputs_r+0xa0>
 800cd40:	4629      	mov	r1, r5
 800cd42:	f7ff ff6b 	bl	800cc1c <_malloc_r>
 800cd46:	4606      	mov	r6, r0
 800cd48:	b950      	cbnz	r0, 800cd60 <__ssputs_r+0x5c>
 800cd4a:	230c      	movs	r3, #12
 800cd4c:	f8ca 3000 	str.w	r3, [sl]
 800cd50:	89a3      	ldrh	r3, [r4, #12]
 800cd52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd56:	81a3      	strh	r3, [r4, #12]
 800cd58:	f04f 30ff 	mov.w	r0, #4294967295
 800cd5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd60:	6921      	ldr	r1, [r4, #16]
 800cd62:	464a      	mov	r2, r9
 800cd64:	f000 fcc0 	bl	800d6e8 <memcpy>
 800cd68:	89a3      	ldrh	r3, [r4, #12]
 800cd6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cd6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd72:	81a3      	strh	r3, [r4, #12]
 800cd74:	6126      	str	r6, [r4, #16]
 800cd76:	6165      	str	r5, [r4, #20]
 800cd78:	444e      	add	r6, r9
 800cd7a:	eba5 0509 	sub.w	r5, r5, r9
 800cd7e:	6026      	str	r6, [r4, #0]
 800cd80:	60a5      	str	r5, [r4, #8]
 800cd82:	463e      	mov	r6, r7
 800cd84:	42be      	cmp	r6, r7
 800cd86:	d900      	bls.n	800cd8a <__ssputs_r+0x86>
 800cd88:	463e      	mov	r6, r7
 800cd8a:	6820      	ldr	r0, [r4, #0]
 800cd8c:	4632      	mov	r2, r6
 800cd8e:	4641      	mov	r1, r8
 800cd90:	f000 fcb8 	bl	800d704 <memmove>
 800cd94:	68a3      	ldr	r3, [r4, #8]
 800cd96:	1b9b      	subs	r3, r3, r6
 800cd98:	60a3      	str	r3, [r4, #8]
 800cd9a:	6823      	ldr	r3, [r4, #0]
 800cd9c:	4433      	add	r3, r6
 800cd9e:	6023      	str	r3, [r4, #0]
 800cda0:	2000      	movs	r0, #0
 800cda2:	e7db      	b.n	800cd5c <__ssputs_r+0x58>
 800cda4:	462a      	mov	r2, r5
 800cda6:	f000 fcd3 	bl	800d750 <_realloc_r>
 800cdaa:	4606      	mov	r6, r0
 800cdac:	2800      	cmp	r0, #0
 800cdae:	d1e1      	bne.n	800cd74 <__ssputs_r+0x70>
 800cdb0:	6921      	ldr	r1, [r4, #16]
 800cdb2:	4650      	mov	r0, sl
 800cdb4:	f7ff fec8 	bl	800cb48 <_free_r>
 800cdb8:	e7c7      	b.n	800cd4a <__ssputs_r+0x46>
	...

0800cdbc <_svfiprintf_r>:
 800cdbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdc0:	4698      	mov	r8, r3
 800cdc2:	898b      	ldrh	r3, [r1, #12]
 800cdc4:	061b      	lsls	r3, r3, #24
 800cdc6:	b09d      	sub	sp, #116	; 0x74
 800cdc8:	4607      	mov	r7, r0
 800cdca:	460d      	mov	r5, r1
 800cdcc:	4614      	mov	r4, r2
 800cdce:	d50e      	bpl.n	800cdee <_svfiprintf_r+0x32>
 800cdd0:	690b      	ldr	r3, [r1, #16]
 800cdd2:	b963      	cbnz	r3, 800cdee <_svfiprintf_r+0x32>
 800cdd4:	2140      	movs	r1, #64	; 0x40
 800cdd6:	f7ff ff21 	bl	800cc1c <_malloc_r>
 800cdda:	6028      	str	r0, [r5, #0]
 800cddc:	6128      	str	r0, [r5, #16]
 800cdde:	b920      	cbnz	r0, 800cdea <_svfiprintf_r+0x2e>
 800cde0:	230c      	movs	r3, #12
 800cde2:	603b      	str	r3, [r7, #0]
 800cde4:	f04f 30ff 	mov.w	r0, #4294967295
 800cde8:	e0d1      	b.n	800cf8e <_svfiprintf_r+0x1d2>
 800cdea:	2340      	movs	r3, #64	; 0x40
 800cdec:	616b      	str	r3, [r5, #20]
 800cdee:	2300      	movs	r3, #0
 800cdf0:	9309      	str	r3, [sp, #36]	; 0x24
 800cdf2:	2320      	movs	r3, #32
 800cdf4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cdf8:	f8cd 800c 	str.w	r8, [sp, #12]
 800cdfc:	2330      	movs	r3, #48	; 0x30
 800cdfe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cfa8 <_svfiprintf_r+0x1ec>
 800ce02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce06:	f04f 0901 	mov.w	r9, #1
 800ce0a:	4623      	mov	r3, r4
 800ce0c:	469a      	mov	sl, r3
 800ce0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce12:	b10a      	cbz	r2, 800ce18 <_svfiprintf_r+0x5c>
 800ce14:	2a25      	cmp	r2, #37	; 0x25
 800ce16:	d1f9      	bne.n	800ce0c <_svfiprintf_r+0x50>
 800ce18:	ebba 0b04 	subs.w	fp, sl, r4
 800ce1c:	d00b      	beq.n	800ce36 <_svfiprintf_r+0x7a>
 800ce1e:	465b      	mov	r3, fp
 800ce20:	4622      	mov	r2, r4
 800ce22:	4629      	mov	r1, r5
 800ce24:	4638      	mov	r0, r7
 800ce26:	f7ff ff6d 	bl	800cd04 <__ssputs_r>
 800ce2a:	3001      	adds	r0, #1
 800ce2c:	f000 80aa 	beq.w	800cf84 <_svfiprintf_r+0x1c8>
 800ce30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce32:	445a      	add	r2, fp
 800ce34:	9209      	str	r2, [sp, #36]	; 0x24
 800ce36:	f89a 3000 	ldrb.w	r3, [sl]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	f000 80a2 	beq.w	800cf84 <_svfiprintf_r+0x1c8>
 800ce40:	2300      	movs	r3, #0
 800ce42:	f04f 32ff 	mov.w	r2, #4294967295
 800ce46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce4a:	f10a 0a01 	add.w	sl, sl, #1
 800ce4e:	9304      	str	r3, [sp, #16]
 800ce50:	9307      	str	r3, [sp, #28]
 800ce52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ce56:	931a      	str	r3, [sp, #104]	; 0x68
 800ce58:	4654      	mov	r4, sl
 800ce5a:	2205      	movs	r2, #5
 800ce5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce60:	4851      	ldr	r0, [pc, #324]	; (800cfa8 <_svfiprintf_r+0x1ec>)
 800ce62:	f7f3 f995 	bl	8000190 <memchr>
 800ce66:	9a04      	ldr	r2, [sp, #16]
 800ce68:	b9d8      	cbnz	r0, 800cea2 <_svfiprintf_r+0xe6>
 800ce6a:	06d0      	lsls	r0, r2, #27
 800ce6c:	bf44      	itt	mi
 800ce6e:	2320      	movmi	r3, #32
 800ce70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce74:	0711      	lsls	r1, r2, #28
 800ce76:	bf44      	itt	mi
 800ce78:	232b      	movmi	r3, #43	; 0x2b
 800ce7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce7e:	f89a 3000 	ldrb.w	r3, [sl]
 800ce82:	2b2a      	cmp	r3, #42	; 0x2a
 800ce84:	d015      	beq.n	800ceb2 <_svfiprintf_r+0xf6>
 800ce86:	9a07      	ldr	r2, [sp, #28]
 800ce88:	4654      	mov	r4, sl
 800ce8a:	2000      	movs	r0, #0
 800ce8c:	f04f 0c0a 	mov.w	ip, #10
 800ce90:	4621      	mov	r1, r4
 800ce92:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce96:	3b30      	subs	r3, #48	; 0x30
 800ce98:	2b09      	cmp	r3, #9
 800ce9a:	d94e      	bls.n	800cf3a <_svfiprintf_r+0x17e>
 800ce9c:	b1b0      	cbz	r0, 800cecc <_svfiprintf_r+0x110>
 800ce9e:	9207      	str	r2, [sp, #28]
 800cea0:	e014      	b.n	800cecc <_svfiprintf_r+0x110>
 800cea2:	eba0 0308 	sub.w	r3, r0, r8
 800cea6:	fa09 f303 	lsl.w	r3, r9, r3
 800ceaa:	4313      	orrs	r3, r2
 800ceac:	9304      	str	r3, [sp, #16]
 800ceae:	46a2      	mov	sl, r4
 800ceb0:	e7d2      	b.n	800ce58 <_svfiprintf_r+0x9c>
 800ceb2:	9b03      	ldr	r3, [sp, #12]
 800ceb4:	1d19      	adds	r1, r3, #4
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	9103      	str	r1, [sp, #12]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	bfbb      	ittet	lt
 800cebe:	425b      	neglt	r3, r3
 800cec0:	f042 0202 	orrlt.w	r2, r2, #2
 800cec4:	9307      	strge	r3, [sp, #28]
 800cec6:	9307      	strlt	r3, [sp, #28]
 800cec8:	bfb8      	it	lt
 800ceca:	9204      	strlt	r2, [sp, #16]
 800cecc:	7823      	ldrb	r3, [r4, #0]
 800cece:	2b2e      	cmp	r3, #46	; 0x2e
 800ced0:	d10c      	bne.n	800ceec <_svfiprintf_r+0x130>
 800ced2:	7863      	ldrb	r3, [r4, #1]
 800ced4:	2b2a      	cmp	r3, #42	; 0x2a
 800ced6:	d135      	bne.n	800cf44 <_svfiprintf_r+0x188>
 800ced8:	9b03      	ldr	r3, [sp, #12]
 800ceda:	1d1a      	adds	r2, r3, #4
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	9203      	str	r2, [sp, #12]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	bfb8      	it	lt
 800cee4:	f04f 33ff 	movlt.w	r3, #4294967295
 800cee8:	3402      	adds	r4, #2
 800ceea:	9305      	str	r3, [sp, #20]
 800ceec:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800cfac <_svfiprintf_r+0x1f0>
 800cef0:	7821      	ldrb	r1, [r4, #0]
 800cef2:	2203      	movs	r2, #3
 800cef4:	4650      	mov	r0, sl
 800cef6:	f7f3 f94b 	bl	8000190 <memchr>
 800cefa:	b140      	cbz	r0, 800cf0e <_svfiprintf_r+0x152>
 800cefc:	2340      	movs	r3, #64	; 0x40
 800cefe:	eba0 000a 	sub.w	r0, r0, sl
 800cf02:	fa03 f000 	lsl.w	r0, r3, r0
 800cf06:	9b04      	ldr	r3, [sp, #16]
 800cf08:	4303      	orrs	r3, r0
 800cf0a:	3401      	adds	r4, #1
 800cf0c:	9304      	str	r3, [sp, #16]
 800cf0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf12:	4827      	ldr	r0, [pc, #156]	; (800cfb0 <_svfiprintf_r+0x1f4>)
 800cf14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf18:	2206      	movs	r2, #6
 800cf1a:	f7f3 f939 	bl	8000190 <memchr>
 800cf1e:	2800      	cmp	r0, #0
 800cf20:	d038      	beq.n	800cf94 <_svfiprintf_r+0x1d8>
 800cf22:	4b24      	ldr	r3, [pc, #144]	; (800cfb4 <_svfiprintf_r+0x1f8>)
 800cf24:	bb1b      	cbnz	r3, 800cf6e <_svfiprintf_r+0x1b2>
 800cf26:	9b03      	ldr	r3, [sp, #12]
 800cf28:	3307      	adds	r3, #7
 800cf2a:	f023 0307 	bic.w	r3, r3, #7
 800cf2e:	3308      	adds	r3, #8
 800cf30:	9303      	str	r3, [sp, #12]
 800cf32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf34:	4433      	add	r3, r6
 800cf36:	9309      	str	r3, [sp, #36]	; 0x24
 800cf38:	e767      	b.n	800ce0a <_svfiprintf_r+0x4e>
 800cf3a:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf3e:	460c      	mov	r4, r1
 800cf40:	2001      	movs	r0, #1
 800cf42:	e7a5      	b.n	800ce90 <_svfiprintf_r+0xd4>
 800cf44:	2300      	movs	r3, #0
 800cf46:	3401      	adds	r4, #1
 800cf48:	9305      	str	r3, [sp, #20]
 800cf4a:	4619      	mov	r1, r3
 800cf4c:	f04f 0c0a 	mov.w	ip, #10
 800cf50:	4620      	mov	r0, r4
 800cf52:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf56:	3a30      	subs	r2, #48	; 0x30
 800cf58:	2a09      	cmp	r2, #9
 800cf5a:	d903      	bls.n	800cf64 <_svfiprintf_r+0x1a8>
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d0c5      	beq.n	800ceec <_svfiprintf_r+0x130>
 800cf60:	9105      	str	r1, [sp, #20]
 800cf62:	e7c3      	b.n	800ceec <_svfiprintf_r+0x130>
 800cf64:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf68:	4604      	mov	r4, r0
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	e7f0      	b.n	800cf50 <_svfiprintf_r+0x194>
 800cf6e:	ab03      	add	r3, sp, #12
 800cf70:	9300      	str	r3, [sp, #0]
 800cf72:	462a      	mov	r2, r5
 800cf74:	4b10      	ldr	r3, [pc, #64]	; (800cfb8 <_svfiprintf_r+0x1fc>)
 800cf76:	a904      	add	r1, sp, #16
 800cf78:	4638      	mov	r0, r7
 800cf7a:	f3af 8000 	nop.w
 800cf7e:	1c42      	adds	r2, r0, #1
 800cf80:	4606      	mov	r6, r0
 800cf82:	d1d6      	bne.n	800cf32 <_svfiprintf_r+0x176>
 800cf84:	89ab      	ldrh	r3, [r5, #12]
 800cf86:	065b      	lsls	r3, r3, #25
 800cf88:	f53f af2c 	bmi.w	800cde4 <_svfiprintf_r+0x28>
 800cf8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cf8e:	b01d      	add	sp, #116	; 0x74
 800cf90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf94:	ab03      	add	r3, sp, #12
 800cf96:	9300      	str	r3, [sp, #0]
 800cf98:	462a      	mov	r2, r5
 800cf9a:	4b07      	ldr	r3, [pc, #28]	; (800cfb8 <_svfiprintf_r+0x1fc>)
 800cf9c:	a904      	add	r1, sp, #16
 800cf9e:	4638      	mov	r0, r7
 800cfa0:	f000 f9d2 	bl	800d348 <_printf_i>
 800cfa4:	e7eb      	b.n	800cf7e <_svfiprintf_r+0x1c2>
 800cfa6:	bf00      	nop
 800cfa8:	0800ecbc 	.word	0x0800ecbc
 800cfac:	0800ecc2 	.word	0x0800ecc2
 800cfb0:	0800ecc6 	.word	0x0800ecc6
 800cfb4:	00000000 	.word	0x00000000
 800cfb8:	0800cd05 	.word	0x0800cd05

0800cfbc <__sfputc_r>:
 800cfbc:	6893      	ldr	r3, [r2, #8]
 800cfbe:	3b01      	subs	r3, #1
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	b410      	push	{r4}
 800cfc4:	6093      	str	r3, [r2, #8]
 800cfc6:	da07      	bge.n	800cfd8 <__sfputc_r+0x1c>
 800cfc8:	6994      	ldr	r4, [r2, #24]
 800cfca:	42a3      	cmp	r3, r4
 800cfcc:	db01      	blt.n	800cfd2 <__sfputc_r+0x16>
 800cfce:	290a      	cmp	r1, #10
 800cfd0:	d102      	bne.n	800cfd8 <__sfputc_r+0x1c>
 800cfd2:	bc10      	pop	{r4}
 800cfd4:	f7ff badc 	b.w	800c590 <__swbuf_r>
 800cfd8:	6813      	ldr	r3, [r2, #0]
 800cfda:	1c58      	adds	r0, r3, #1
 800cfdc:	6010      	str	r0, [r2, #0]
 800cfde:	7019      	strb	r1, [r3, #0]
 800cfe0:	4608      	mov	r0, r1
 800cfe2:	bc10      	pop	{r4}
 800cfe4:	4770      	bx	lr

0800cfe6 <__sfputs_r>:
 800cfe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfe8:	4606      	mov	r6, r0
 800cfea:	460f      	mov	r7, r1
 800cfec:	4614      	mov	r4, r2
 800cfee:	18d5      	adds	r5, r2, r3
 800cff0:	42ac      	cmp	r4, r5
 800cff2:	d101      	bne.n	800cff8 <__sfputs_r+0x12>
 800cff4:	2000      	movs	r0, #0
 800cff6:	e007      	b.n	800d008 <__sfputs_r+0x22>
 800cff8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cffc:	463a      	mov	r2, r7
 800cffe:	4630      	mov	r0, r6
 800d000:	f7ff ffdc 	bl	800cfbc <__sfputc_r>
 800d004:	1c43      	adds	r3, r0, #1
 800d006:	d1f3      	bne.n	800cff0 <__sfputs_r+0xa>
 800d008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d00c <_vfiprintf_r>:
 800d00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d010:	460d      	mov	r5, r1
 800d012:	b09d      	sub	sp, #116	; 0x74
 800d014:	4614      	mov	r4, r2
 800d016:	4698      	mov	r8, r3
 800d018:	4606      	mov	r6, r0
 800d01a:	b118      	cbz	r0, 800d024 <_vfiprintf_r+0x18>
 800d01c:	6983      	ldr	r3, [r0, #24]
 800d01e:	b90b      	cbnz	r3, 800d024 <_vfiprintf_r+0x18>
 800d020:	f7ff fc8c 	bl	800c93c <__sinit>
 800d024:	4b89      	ldr	r3, [pc, #548]	; (800d24c <_vfiprintf_r+0x240>)
 800d026:	429d      	cmp	r5, r3
 800d028:	d11b      	bne.n	800d062 <_vfiprintf_r+0x56>
 800d02a:	6875      	ldr	r5, [r6, #4]
 800d02c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d02e:	07d9      	lsls	r1, r3, #31
 800d030:	d405      	bmi.n	800d03e <_vfiprintf_r+0x32>
 800d032:	89ab      	ldrh	r3, [r5, #12]
 800d034:	059a      	lsls	r2, r3, #22
 800d036:	d402      	bmi.n	800d03e <_vfiprintf_r+0x32>
 800d038:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d03a:	f7ff fd1d 	bl	800ca78 <__retarget_lock_acquire_recursive>
 800d03e:	89ab      	ldrh	r3, [r5, #12]
 800d040:	071b      	lsls	r3, r3, #28
 800d042:	d501      	bpl.n	800d048 <_vfiprintf_r+0x3c>
 800d044:	692b      	ldr	r3, [r5, #16]
 800d046:	b9eb      	cbnz	r3, 800d084 <_vfiprintf_r+0x78>
 800d048:	4629      	mov	r1, r5
 800d04a:	4630      	mov	r0, r6
 800d04c:	f7ff faf2 	bl	800c634 <__swsetup_r>
 800d050:	b1c0      	cbz	r0, 800d084 <_vfiprintf_r+0x78>
 800d052:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d054:	07dc      	lsls	r4, r3, #31
 800d056:	d50e      	bpl.n	800d076 <_vfiprintf_r+0x6a>
 800d058:	f04f 30ff 	mov.w	r0, #4294967295
 800d05c:	b01d      	add	sp, #116	; 0x74
 800d05e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d062:	4b7b      	ldr	r3, [pc, #492]	; (800d250 <_vfiprintf_r+0x244>)
 800d064:	429d      	cmp	r5, r3
 800d066:	d101      	bne.n	800d06c <_vfiprintf_r+0x60>
 800d068:	68b5      	ldr	r5, [r6, #8]
 800d06a:	e7df      	b.n	800d02c <_vfiprintf_r+0x20>
 800d06c:	4b79      	ldr	r3, [pc, #484]	; (800d254 <_vfiprintf_r+0x248>)
 800d06e:	429d      	cmp	r5, r3
 800d070:	bf08      	it	eq
 800d072:	68f5      	ldreq	r5, [r6, #12]
 800d074:	e7da      	b.n	800d02c <_vfiprintf_r+0x20>
 800d076:	89ab      	ldrh	r3, [r5, #12]
 800d078:	0598      	lsls	r0, r3, #22
 800d07a:	d4ed      	bmi.n	800d058 <_vfiprintf_r+0x4c>
 800d07c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d07e:	f7ff fcfc 	bl	800ca7a <__retarget_lock_release_recursive>
 800d082:	e7e9      	b.n	800d058 <_vfiprintf_r+0x4c>
 800d084:	2300      	movs	r3, #0
 800d086:	9309      	str	r3, [sp, #36]	; 0x24
 800d088:	2320      	movs	r3, #32
 800d08a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d08e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d092:	2330      	movs	r3, #48	; 0x30
 800d094:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d258 <_vfiprintf_r+0x24c>
 800d098:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d09c:	f04f 0901 	mov.w	r9, #1
 800d0a0:	4623      	mov	r3, r4
 800d0a2:	469a      	mov	sl, r3
 800d0a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d0a8:	b10a      	cbz	r2, 800d0ae <_vfiprintf_r+0xa2>
 800d0aa:	2a25      	cmp	r2, #37	; 0x25
 800d0ac:	d1f9      	bne.n	800d0a2 <_vfiprintf_r+0x96>
 800d0ae:	ebba 0b04 	subs.w	fp, sl, r4
 800d0b2:	d00b      	beq.n	800d0cc <_vfiprintf_r+0xc0>
 800d0b4:	465b      	mov	r3, fp
 800d0b6:	4622      	mov	r2, r4
 800d0b8:	4629      	mov	r1, r5
 800d0ba:	4630      	mov	r0, r6
 800d0bc:	f7ff ff93 	bl	800cfe6 <__sfputs_r>
 800d0c0:	3001      	adds	r0, #1
 800d0c2:	f000 80aa 	beq.w	800d21a <_vfiprintf_r+0x20e>
 800d0c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d0c8:	445a      	add	r2, fp
 800d0ca:	9209      	str	r2, [sp, #36]	; 0x24
 800d0cc:	f89a 3000 	ldrb.w	r3, [sl]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	f000 80a2 	beq.w	800d21a <_vfiprintf_r+0x20e>
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	f04f 32ff 	mov.w	r2, #4294967295
 800d0dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d0e0:	f10a 0a01 	add.w	sl, sl, #1
 800d0e4:	9304      	str	r3, [sp, #16]
 800d0e6:	9307      	str	r3, [sp, #28]
 800d0e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d0ec:	931a      	str	r3, [sp, #104]	; 0x68
 800d0ee:	4654      	mov	r4, sl
 800d0f0:	2205      	movs	r2, #5
 800d0f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0f6:	4858      	ldr	r0, [pc, #352]	; (800d258 <_vfiprintf_r+0x24c>)
 800d0f8:	f7f3 f84a 	bl	8000190 <memchr>
 800d0fc:	9a04      	ldr	r2, [sp, #16]
 800d0fe:	b9d8      	cbnz	r0, 800d138 <_vfiprintf_r+0x12c>
 800d100:	06d1      	lsls	r1, r2, #27
 800d102:	bf44      	itt	mi
 800d104:	2320      	movmi	r3, #32
 800d106:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d10a:	0713      	lsls	r3, r2, #28
 800d10c:	bf44      	itt	mi
 800d10e:	232b      	movmi	r3, #43	; 0x2b
 800d110:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d114:	f89a 3000 	ldrb.w	r3, [sl]
 800d118:	2b2a      	cmp	r3, #42	; 0x2a
 800d11a:	d015      	beq.n	800d148 <_vfiprintf_r+0x13c>
 800d11c:	9a07      	ldr	r2, [sp, #28]
 800d11e:	4654      	mov	r4, sl
 800d120:	2000      	movs	r0, #0
 800d122:	f04f 0c0a 	mov.w	ip, #10
 800d126:	4621      	mov	r1, r4
 800d128:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d12c:	3b30      	subs	r3, #48	; 0x30
 800d12e:	2b09      	cmp	r3, #9
 800d130:	d94e      	bls.n	800d1d0 <_vfiprintf_r+0x1c4>
 800d132:	b1b0      	cbz	r0, 800d162 <_vfiprintf_r+0x156>
 800d134:	9207      	str	r2, [sp, #28]
 800d136:	e014      	b.n	800d162 <_vfiprintf_r+0x156>
 800d138:	eba0 0308 	sub.w	r3, r0, r8
 800d13c:	fa09 f303 	lsl.w	r3, r9, r3
 800d140:	4313      	orrs	r3, r2
 800d142:	9304      	str	r3, [sp, #16]
 800d144:	46a2      	mov	sl, r4
 800d146:	e7d2      	b.n	800d0ee <_vfiprintf_r+0xe2>
 800d148:	9b03      	ldr	r3, [sp, #12]
 800d14a:	1d19      	adds	r1, r3, #4
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	9103      	str	r1, [sp, #12]
 800d150:	2b00      	cmp	r3, #0
 800d152:	bfbb      	ittet	lt
 800d154:	425b      	neglt	r3, r3
 800d156:	f042 0202 	orrlt.w	r2, r2, #2
 800d15a:	9307      	strge	r3, [sp, #28]
 800d15c:	9307      	strlt	r3, [sp, #28]
 800d15e:	bfb8      	it	lt
 800d160:	9204      	strlt	r2, [sp, #16]
 800d162:	7823      	ldrb	r3, [r4, #0]
 800d164:	2b2e      	cmp	r3, #46	; 0x2e
 800d166:	d10c      	bne.n	800d182 <_vfiprintf_r+0x176>
 800d168:	7863      	ldrb	r3, [r4, #1]
 800d16a:	2b2a      	cmp	r3, #42	; 0x2a
 800d16c:	d135      	bne.n	800d1da <_vfiprintf_r+0x1ce>
 800d16e:	9b03      	ldr	r3, [sp, #12]
 800d170:	1d1a      	adds	r2, r3, #4
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	9203      	str	r2, [sp, #12]
 800d176:	2b00      	cmp	r3, #0
 800d178:	bfb8      	it	lt
 800d17a:	f04f 33ff 	movlt.w	r3, #4294967295
 800d17e:	3402      	adds	r4, #2
 800d180:	9305      	str	r3, [sp, #20]
 800d182:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800d25c <_vfiprintf_r+0x250>
 800d186:	7821      	ldrb	r1, [r4, #0]
 800d188:	2203      	movs	r2, #3
 800d18a:	4650      	mov	r0, sl
 800d18c:	f7f3 f800 	bl	8000190 <memchr>
 800d190:	b140      	cbz	r0, 800d1a4 <_vfiprintf_r+0x198>
 800d192:	2340      	movs	r3, #64	; 0x40
 800d194:	eba0 000a 	sub.w	r0, r0, sl
 800d198:	fa03 f000 	lsl.w	r0, r3, r0
 800d19c:	9b04      	ldr	r3, [sp, #16]
 800d19e:	4303      	orrs	r3, r0
 800d1a0:	3401      	adds	r4, #1
 800d1a2:	9304      	str	r3, [sp, #16]
 800d1a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1a8:	482d      	ldr	r0, [pc, #180]	; (800d260 <_vfiprintf_r+0x254>)
 800d1aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d1ae:	2206      	movs	r2, #6
 800d1b0:	f7f2 ffee 	bl	8000190 <memchr>
 800d1b4:	2800      	cmp	r0, #0
 800d1b6:	d03f      	beq.n	800d238 <_vfiprintf_r+0x22c>
 800d1b8:	4b2a      	ldr	r3, [pc, #168]	; (800d264 <_vfiprintf_r+0x258>)
 800d1ba:	bb1b      	cbnz	r3, 800d204 <_vfiprintf_r+0x1f8>
 800d1bc:	9b03      	ldr	r3, [sp, #12]
 800d1be:	3307      	adds	r3, #7
 800d1c0:	f023 0307 	bic.w	r3, r3, #7
 800d1c4:	3308      	adds	r3, #8
 800d1c6:	9303      	str	r3, [sp, #12]
 800d1c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1ca:	443b      	add	r3, r7
 800d1cc:	9309      	str	r3, [sp, #36]	; 0x24
 800d1ce:	e767      	b.n	800d0a0 <_vfiprintf_r+0x94>
 800d1d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d1d4:	460c      	mov	r4, r1
 800d1d6:	2001      	movs	r0, #1
 800d1d8:	e7a5      	b.n	800d126 <_vfiprintf_r+0x11a>
 800d1da:	2300      	movs	r3, #0
 800d1dc:	3401      	adds	r4, #1
 800d1de:	9305      	str	r3, [sp, #20]
 800d1e0:	4619      	mov	r1, r3
 800d1e2:	f04f 0c0a 	mov.w	ip, #10
 800d1e6:	4620      	mov	r0, r4
 800d1e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1ec:	3a30      	subs	r2, #48	; 0x30
 800d1ee:	2a09      	cmp	r2, #9
 800d1f0:	d903      	bls.n	800d1fa <_vfiprintf_r+0x1ee>
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d0c5      	beq.n	800d182 <_vfiprintf_r+0x176>
 800d1f6:	9105      	str	r1, [sp, #20]
 800d1f8:	e7c3      	b.n	800d182 <_vfiprintf_r+0x176>
 800d1fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800d1fe:	4604      	mov	r4, r0
 800d200:	2301      	movs	r3, #1
 800d202:	e7f0      	b.n	800d1e6 <_vfiprintf_r+0x1da>
 800d204:	ab03      	add	r3, sp, #12
 800d206:	9300      	str	r3, [sp, #0]
 800d208:	462a      	mov	r2, r5
 800d20a:	4b17      	ldr	r3, [pc, #92]	; (800d268 <_vfiprintf_r+0x25c>)
 800d20c:	a904      	add	r1, sp, #16
 800d20e:	4630      	mov	r0, r6
 800d210:	f3af 8000 	nop.w
 800d214:	4607      	mov	r7, r0
 800d216:	1c78      	adds	r0, r7, #1
 800d218:	d1d6      	bne.n	800d1c8 <_vfiprintf_r+0x1bc>
 800d21a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d21c:	07d9      	lsls	r1, r3, #31
 800d21e:	d405      	bmi.n	800d22c <_vfiprintf_r+0x220>
 800d220:	89ab      	ldrh	r3, [r5, #12]
 800d222:	059a      	lsls	r2, r3, #22
 800d224:	d402      	bmi.n	800d22c <_vfiprintf_r+0x220>
 800d226:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d228:	f7ff fc27 	bl	800ca7a <__retarget_lock_release_recursive>
 800d22c:	89ab      	ldrh	r3, [r5, #12]
 800d22e:	065b      	lsls	r3, r3, #25
 800d230:	f53f af12 	bmi.w	800d058 <_vfiprintf_r+0x4c>
 800d234:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d236:	e711      	b.n	800d05c <_vfiprintf_r+0x50>
 800d238:	ab03      	add	r3, sp, #12
 800d23a:	9300      	str	r3, [sp, #0]
 800d23c:	462a      	mov	r2, r5
 800d23e:	4b0a      	ldr	r3, [pc, #40]	; (800d268 <_vfiprintf_r+0x25c>)
 800d240:	a904      	add	r1, sp, #16
 800d242:	4630      	mov	r0, r6
 800d244:	f000 f880 	bl	800d348 <_printf_i>
 800d248:	e7e4      	b.n	800d214 <_vfiprintf_r+0x208>
 800d24a:	bf00      	nop
 800d24c:	0800ec7c 	.word	0x0800ec7c
 800d250:	0800ec9c 	.word	0x0800ec9c
 800d254:	0800ec5c 	.word	0x0800ec5c
 800d258:	0800ecbc 	.word	0x0800ecbc
 800d25c:	0800ecc2 	.word	0x0800ecc2
 800d260:	0800ecc6 	.word	0x0800ecc6
 800d264:	00000000 	.word	0x00000000
 800d268:	0800cfe7 	.word	0x0800cfe7

0800d26c <_printf_common>:
 800d26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d270:	4616      	mov	r6, r2
 800d272:	4699      	mov	r9, r3
 800d274:	688a      	ldr	r2, [r1, #8]
 800d276:	690b      	ldr	r3, [r1, #16]
 800d278:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d27c:	4293      	cmp	r3, r2
 800d27e:	bfb8      	it	lt
 800d280:	4613      	movlt	r3, r2
 800d282:	6033      	str	r3, [r6, #0]
 800d284:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d288:	4607      	mov	r7, r0
 800d28a:	460c      	mov	r4, r1
 800d28c:	b10a      	cbz	r2, 800d292 <_printf_common+0x26>
 800d28e:	3301      	adds	r3, #1
 800d290:	6033      	str	r3, [r6, #0]
 800d292:	6823      	ldr	r3, [r4, #0]
 800d294:	0699      	lsls	r1, r3, #26
 800d296:	bf42      	ittt	mi
 800d298:	6833      	ldrmi	r3, [r6, #0]
 800d29a:	3302      	addmi	r3, #2
 800d29c:	6033      	strmi	r3, [r6, #0]
 800d29e:	6825      	ldr	r5, [r4, #0]
 800d2a0:	f015 0506 	ands.w	r5, r5, #6
 800d2a4:	d106      	bne.n	800d2b4 <_printf_common+0x48>
 800d2a6:	f104 0a19 	add.w	sl, r4, #25
 800d2aa:	68e3      	ldr	r3, [r4, #12]
 800d2ac:	6832      	ldr	r2, [r6, #0]
 800d2ae:	1a9b      	subs	r3, r3, r2
 800d2b0:	42ab      	cmp	r3, r5
 800d2b2:	dc26      	bgt.n	800d302 <_printf_common+0x96>
 800d2b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d2b8:	1e13      	subs	r3, r2, #0
 800d2ba:	6822      	ldr	r2, [r4, #0]
 800d2bc:	bf18      	it	ne
 800d2be:	2301      	movne	r3, #1
 800d2c0:	0692      	lsls	r2, r2, #26
 800d2c2:	d42b      	bmi.n	800d31c <_printf_common+0xb0>
 800d2c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d2c8:	4649      	mov	r1, r9
 800d2ca:	4638      	mov	r0, r7
 800d2cc:	47c0      	blx	r8
 800d2ce:	3001      	adds	r0, #1
 800d2d0:	d01e      	beq.n	800d310 <_printf_common+0xa4>
 800d2d2:	6823      	ldr	r3, [r4, #0]
 800d2d4:	68e5      	ldr	r5, [r4, #12]
 800d2d6:	6832      	ldr	r2, [r6, #0]
 800d2d8:	f003 0306 	and.w	r3, r3, #6
 800d2dc:	2b04      	cmp	r3, #4
 800d2de:	bf08      	it	eq
 800d2e0:	1aad      	subeq	r5, r5, r2
 800d2e2:	68a3      	ldr	r3, [r4, #8]
 800d2e4:	6922      	ldr	r2, [r4, #16]
 800d2e6:	bf0c      	ite	eq
 800d2e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d2ec:	2500      	movne	r5, #0
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	bfc4      	itt	gt
 800d2f2:	1a9b      	subgt	r3, r3, r2
 800d2f4:	18ed      	addgt	r5, r5, r3
 800d2f6:	2600      	movs	r6, #0
 800d2f8:	341a      	adds	r4, #26
 800d2fa:	42b5      	cmp	r5, r6
 800d2fc:	d11a      	bne.n	800d334 <_printf_common+0xc8>
 800d2fe:	2000      	movs	r0, #0
 800d300:	e008      	b.n	800d314 <_printf_common+0xa8>
 800d302:	2301      	movs	r3, #1
 800d304:	4652      	mov	r2, sl
 800d306:	4649      	mov	r1, r9
 800d308:	4638      	mov	r0, r7
 800d30a:	47c0      	blx	r8
 800d30c:	3001      	adds	r0, #1
 800d30e:	d103      	bne.n	800d318 <_printf_common+0xac>
 800d310:	f04f 30ff 	mov.w	r0, #4294967295
 800d314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d318:	3501      	adds	r5, #1
 800d31a:	e7c6      	b.n	800d2aa <_printf_common+0x3e>
 800d31c:	18e1      	adds	r1, r4, r3
 800d31e:	1c5a      	adds	r2, r3, #1
 800d320:	2030      	movs	r0, #48	; 0x30
 800d322:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d326:	4422      	add	r2, r4
 800d328:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d32c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d330:	3302      	adds	r3, #2
 800d332:	e7c7      	b.n	800d2c4 <_printf_common+0x58>
 800d334:	2301      	movs	r3, #1
 800d336:	4622      	mov	r2, r4
 800d338:	4649      	mov	r1, r9
 800d33a:	4638      	mov	r0, r7
 800d33c:	47c0      	blx	r8
 800d33e:	3001      	adds	r0, #1
 800d340:	d0e6      	beq.n	800d310 <_printf_common+0xa4>
 800d342:	3601      	adds	r6, #1
 800d344:	e7d9      	b.n	800d2fa <_printf_common+0x8e>
	...

0800d348 <_printf_i>:
 800d348:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d34c:	7e0f      	ldrb	r7, [r1, #24]
 800d34e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d350:	2f78      	cmp	r7, #120	; 0x78
 800d352:	4691      	mov	r9, r2
 800d354:	4680      	mov	r8, r0
 800d356:	460c      	mov	r4, r1
 800d358:	469a      	mov	sl, r3
 800d35a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d35e:	d807      	bhi.n	800d370 <_printf_i+0x28>
 800d360:	2f62      	cmp	r7, #98	; 0x62
 800d362:	d80a      	bhi.n	800d37a <_printf_i+0x32>
 800d364:	2f00      	cmp	r7, #0
 800d366:	f000 80d8 	beq.w	800d51a <_printf_i+0x1d2>
 800d36a:	2f58      	cmp	r7, #88	; 0x58
 800d36c:	f000 80a3 	beq.w	800d4b6 <_printf_i+0x16e>
 800d370:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d374:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d378:	e03a      	b.n	800d3f0 <_printf_i+0xa8>
 800d37a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d37e:	2b15      	cmp	r3, #21
 800d380:	d8f6      	bhi.n	800d370 <_printf_i+0x28>
 800d382:	a101      	add	r1, pc, #4	; (adr r1, 800d388 <_printf_i+0x40>)
 800d384:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d388:	0800d3e1 	.word	0x0800d3e1
 800d38c:	0800d3f5 	.word	0x0800d3f5
 800d390:	0800d371 	.word	0x0800d371
 800d394:	0800d371 	.word	0x0800d371
 800d398:	0800d371 	.word	0x0800d371
 800d39c:	0800d371 	.word	0x0800d371
 800d3a0:	0800d3f5 	.word	0x0800d3f5
 800d3a4:	0800d371 	.word	0x0800d371
 800d3a8:	0800d371 	.word	0x0800d371
 800d3ac:	0800d371 	.word	0x0800d371
 800d3b0:	0800d371 	.word	0x0800d371
 800d3b4:	0800d501 	.word	0x0800d501
 800d3b8:	0800d425 	.word	0x0800d425
 800d3bc:	0800d4e3 	.word	0x0800d4e3
 800d3c0:	0800d371 	.word	0x0800d371
 800d3c4:	0800d371 	.word	0x0800d371
 800d3c8:	0800d523 	.word	0x0800d523
 800d3cc:	0800d371 	.word	0x0800d371
 800d3d0:	0800d425 	.word	0x0800d425
 800d3d4:	0800d371 	.word	0x0800d371
 800d3d8:	0800d371 	.word	0x0800d371
 800d3dc:	0800d4eb 	.word	0x0800d4eb
 800d3e0:	682b      	ldr	r3, [r5, #0]
 800d3e2:	1d1a      	adds	r2, r3, #4
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	602a      	str	r2, [r5, #0]
 800d3e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d3ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d3f0:	2301      	movs	r3, #1
 800d3f2:	e0a3      	b.n	800d53c <_printf_i+0x1f4>
 800d3f4:	6820      	ldr	r0, [r4, #0]
 800d3f6:	6829      	ldr	r1, [r5, #0]
 800d3f8:	0606      	lsls	r6, r0, #24
 800d3fa:	f101 0304 	add.w	r3, r1, #4
 800d3fe:	d50a      	bpl.n	800d416 <_printf_i+0xce>
 800d400:	680e      	ldr	r6, [r1, #0]
 800d402:	602b      	str	r3, [r5, #0]
 800d404:	2e00      	cmp	r6, #0
 800d406:	da03      	bge.n	800d410 <_printf_i+0xc8>
 800d408:	232d      	movs	r3, #45	; 0x2d
 800d40a:	4276      	negs	r6, r6
 800d40c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d410:	485e      	ldr	r0, [pc, #376]	; (800d58c <_printf_i+0x244>)
 800d412:	230a      	movs	r3, #10
 800d414:	e019      	b.n	800d44a <_printf_i+0x102>
 800d416:	680e      	ldr	r6, [r1, #0]
 800d418:	602b      	str	r3, [r5, #0]
 800d41a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d41e:	bf18      	it	ne
 800d420:	b236      	sxthne	r6, r6
 800d422:	e7ef      	b.n	800d404 <_printf_i+0xbc>
 800d424:	682b      	ldr	r3, [r5, #0]
 800d426:	6820      	ldr	r0, [r4, #0]
 800d428:	1d19      	adds	r1, r3, #4
 800d42a:	6029      	str	r1, [r5, #0]
 800d42c:	0601      	lsls	r1, r0, #24
 800d42e:	d501      	bpl.n	800d434 <_printf_i+0xec>
 800d430:	681e      	ldr	r6, [r3, #0]
 800d432:	e002      	b.n	800d43a <_printf_i+0xf2>
 800d434:	0646      	lsls	r6, r0, #25
 800d436:	d5fb      	bpl.n	800d430 <_printf_i+0xe8>
 800d438:	881e      	ldrh	r6, [r3, #0]
 800d43a:	4854      	ldr	r0, [pc, #336]	; (800d58c <_printf_i+0x244>)
 800d43c:	2f6f      	cmp	r7, #111	; 0x6f
 800d43e:	bf0c      	ite	eq
 800d440:	2308      	moveq	r3, #8
 800d442:	230a      	movne	r3, #10
 800d444:	2100      	movs	r1, #0
 800d446:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d44a:	6865      	ldr	r5, [r4, #4]
 800d44c:	60a5      	str	r5, [r4, #8]
 800d44e:	2d00      	cmp	r5, #0
 800d450:	bfa2      	ittt	ge
 800d452:	6821      	ldrge	r1, [r4, #0]
 800d454:	f021 0104 	bicge.w	r1, r1, #4
 800d458:	6021      	strge	r1, [r4, #0]
 800d45a:	b90e      	cbnz	r6, 800d460 <_printf_i+0x118>
 800d45c:	2d00      	cmp	r5, #0
 800d45e:	d04d      	beq.n	800d4fc <_printf_i+0x1b4>
 800d460:	4615      	mov	r5, r2
 800d462:	fbb6 f1f3 	udiv	r1, r6, r3
 800d466:	fb03 6711 	mls	r7, r3, r1, r6
 800d46a:	5dc7      	ldrb	r7, [r0, r7]
 800d46c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d470:	4637      	mov	r7, r6
 800d472:	42bb      	cmp	r3, r7
 800d474:	460e      	mov	r6, r1
 800d476:	d9f4      	bls.n	800d462 <_printf_i+0x11a>
 800d478:	2b08      	cmp	r3, #8
 800d47a:	d10b      	bne.n	800d494 <_printf_i+0x14c>
 800d47c:	6823      	ldr	r3, [r4, #0]
 800d47e:	07de      	lsls	r6, r3, #31
 800d480:	d508      	bpl.n	800d494 <_printf_i+0x14c>
 800d482:	6923      	ldr	r3, [r4, #16]
 800d484:	6861      	ldr	r1, [r4, #4]
 800d486:	4299      	cmp	r1, r3
 800d488:	bfde      	ittt	le
 800d48a:	2330      	movle	r3, #48	; 0x30
 800d48c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d490:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d494:	1b52      	subs	r2, r2, r5
 800d496:	6122      	str	r2, [r4, #16]
 800d498:	f8cd a000 	str.w	sl, [sp]
 800d49c:	464b      	mov	r3, r9
 800d49e:	aa03      	add	r2, sp, #12
 800d4a0:	4621      	mov	r1, r4
 800d4a2:	4640      	mov	r0, r8
 800d4a4:	f7ff fee2 	bl	800d26c <_printf_common>
 800d4a8:	3001      	adds	r0, #1
 800d4aa:	d14c      	bne.n	800d546 <_printf_i+0x1fe>
 800d4ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d4b0:	b004      	add	sp, #16
 800d4b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4b6:	4835      	ldr	r0, [pc, #212]	; (800d58c <_printf_i+0x244>)
 800d4b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d4bc:	6829      	ldr	r1, [r5, #0]
 800d4be:	6823      	ldr	r3, [r4, #0]
 800d4c0:	f851 6b04 	ldr.w	r6, [r1], #4
 800d4c4:	6029      	str	r1, [r5, #0]
 800d4c6:	061d      	lsls	r5, r3, #24
 800d4c8:	d514      	bpl.n	800d4f4 <_printf_i+0x1ac>
 800d4ca:	07df      	lsls	r7, r3, #31
 800d4cc:	bf44      	itt	mi
 800d4ce:	f043 0320 	orrmi.w	r3, r3, #32
 800d4d2:	6023      	strmi	r3, [r4, #0]
 800d4d4:	b91e      	cbnz	r6, 800d4de <_printf_i+0x196>
 800d4d6:	6823      	ldr	r3, [r4, #0]
 800d4d8:	f023 0320 	bic.w	r3, r3, #32
 800d4dc:	6023      	str	r3, [r4, #0]
 800d4de:	2310      	movs	r3, #16
 800d4e0:	e7b0      	b.n	800d444 <_printf_i+0xfc>
 800d4e2:	6823      	ldr	r3, [r4, #0]
 800d4e4:	f043 0320 	orr.w	r3, r3, #32
 800d4e8:	6023      	str	r3, [r4, #0]
 800d4ea:	2378      	movs	r3, #120	; 0x78
 800d4ec:	4828      	ldr	r0, [pc, #160]	; (800d590 <_printf_i+0x248>)
 800d4ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d4f2:	e7e3      	b.n	800d4bc <_printf_i+0x174>
 800d4f4:	0659      	lsls	r1, r3, #25
 800d4f6:	bf48      	it	mi
 800d4f8:	b2b6      	uxthmi	r6, r6
 800d4fa:	e7e6      	b.n	800d4ca <_printf_i+0x182>
 800d4fc:	4615      	mov	r5, r2
 800d4fe:	e7bb      	b.n	800d478 <_printf_i+0x130>
 800d500:	682b      	ldr	r3, [r5, #0]
 800d502:	6826      	ldr	r6, [r4, #0]
 800d504:	6961      	ldr	r1, [r4, #20]
 800d506:	1d18      	adds	r0, r3, #4
 800d508:	6028      	str	r0, [r5, #0]
 800d50a:	0635      	lsls	r5, r6, #24
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	d501      	bpl.n	800d514 <_printf_i+0x1cc>
 800d510:	6019      	str	r1, [r3, #0]
 800d512:	e002      	b.n	800d51a <_printf_i+0x1d2>
 800d514:	0670      	lsls	r0, r6, #25
 800d516:	d5fb      	bpl.n	800d510 <_printf_i+0x1c8>
 800d518:	8019      	strh	r1, [r3, #0]
 800d51a:	2300      	movs	r3, #0
 800d51c:	6123      	str	r3, [r4, #16]
 800d51e:	4615      	mov	r5, r2
 800d520:	e7ba      	b.n	800d498 <_printf_i+0x150>
 800d522:	682b      	ldr	r3, [r5, #0]
 800d524:	1d1a      	adds	r2, r3, #4
 800d526:	602a      	str	r2, [r5, #0]
 800d528:	681d      	ldr	r5, [r3, #0]
 800d52a:	6862      	ldr	r2, [r4, #4]
 800d52c:	2100      	movs	r1, #0
 800d52e:	4628      	mov	r0, r5
 800d530:	f7f2 fe2e 	bl	8000190 <memchr>
 800d534:	b108      	cbz	r0, 800d53a <_printf_i+0x1f2>
 800d536:	1b40      	subs	r0, r0, r5
 800d538:	6060      	str	r0, [r4, #4]
 800d53a:	6863      	ldr	r3, [r4, #4]
 800d53c:	6123      	str	r3, [r4, #16]
 800d53e:	2300      	movs	r3, #0
 800d540:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d544:	e7a8      	b.n	800d498 <_printf_i+0x150>
 800d546:	6923      	ldr	r3, [r4, #16]
 800d548:	462a      	mov	r2, r5
 800d54a:	4649      	mov	r1, r9
 800d54c:	4640      	mov	r0, r8
 800d54e:	47d0      	blx	sl
 800d550:	3001      	adds	r0, #1
 800d552:	d0ab      	beq.n	800d4ac <_printf_i+0x164>
 800d554:	6823      	ldr	r3, [r4, #0]
 800d556:	079b      	lsls	r3, r3, #30
 800d558:	d413      	bmi.n	800d582 <_printf_i+0x23a>
 800d55a:	68e0      	ldr	r0, [r4, #12]
 800d55c:	9b03      	ldr	r3, [sp, #12]
 800d55e:	4298      	cmp	r0, r3
 800d560:	bfb8      	it	lt
 800d562:	4618      	movlt	r0, r3
 800d564:	e7a4      	b.n	800d4b0 <_printf_i+0x168>
 800d566:	2301      	movs	r3, #1
 800d568:	4632      	mov	r2, r6
 800d56a:	4649      	mov	r1, r9
 800d56c:	4640      	mov	r0, r8
 800d56e:	47d0      	blx	sl
 800d570:	3001      	adds	r0, #1
 800d572:	d09b      	beq.n	800d4ac <_printf_i+0x164>
 800d574:	3501      	adds	r5, #1
 800d576:	68e3      	ldr	r3, [r4, #12]
 800d578:	9903      	ldr	r1, [sp, #12]
 800d57a:	1a5b      	subs	r3, r3, r1
 800d57c:	42ab      	cmp	r3, r5
 800d57e:	dcf2      	bgt.n	800d566 <_printf_i+0x21e>
 800d580:	e7eb      	b.n	800d55a <_printf_i+0x212>
 800d582:	2500      	movs	r5, #0
 800d584:	f104 0619 	add.w	r6, r4, #25
 800d588:	e7f5      	b.n	800d576 <_printf_i+0x22e>
 800d58a:	bf00      	nop
 800d58c:	0800eccd 	.word	0x0800eccd
 800d590:	0800ecde 	.word	0x0800ecde

0800d594 <_sbrk_r>:
 800d594:	b538      	push	{r3, r4, r5, lr}
 800d596:	4d06      	ldr	r5, [pc, #24]	; (800d5b0 <_sbrk_r+0x1c>)
 800d598:	2300      	movs	r3, #0
 800d59a:	4604      	mov	r4, r0
 800d59c:	4608      	mov	r0, r1
 800d59e:	602b      	str	r3, [r5, #0]
 800d5a0:	f7f5 f8c4 	bl	800272c <_sbrk>
 800d5a4:	1c43      	adds	r3, r0, #1
 800d5a6:	d102      	bne.n	800d5ae <_sbrk_r+0x1a>
 800d5a8:	682b      	ldr	r3, [r5, #0]
 800d5aa:	b103      	cbz	r3, 800d5ae <_sbrk_r+0x1a>
 800d5ac:	6023      	str	r3, [r4, #0]
 800d5ae:	bd38      	pop	{r3, r4, r5, pc}
 800d5b0:	2000093c 	.word	0x2000093c

0800d5b4 <__sread>:
 800d5b4:	b510      	push	{r4, lr}
 800d5b6:	460c      	mov	r4, r1
 800d5b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5bc:	f000 f8f8 	bl	800d7b0 <_read_r>
 800d5c0:	2800      	cmp	r0, #0
 800d5c2:	bfab      	itete	ge
 800d5c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d5c6:	89a3      	ldrhlt	r3, [r4, #12]
 800d5c8:	181b      	addge	r3, r3, r0
 800d5ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d5ce:	bfac      	ite	ge
 800d5d0:	6563      	strge	r3, [r4, #84]	; 0x54
 800d5d2:	81a3      	strhlt	r3, [r4, #12]
 800d5d4:	bd10      	pop	{r4, pc}

0800d5d6 <__swrite>:
 800d5d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5da:	461f      	mov	r7, r3
 800d5dc:	898b      	ldrh	r3, [r1, #12]
 800d5de:	05db      	lsls	r3, r3, #23
 800d5e0:	4605      	mov	r5, r0
 800d5e2:	460c      	mov	r4, r1
 800d5e4:	4616      	mov	r6, r2
 800d5e6:	d505      	bpl.n	800d5f4 <__swrite+0x1e>
 800d5e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5ec:	2302      	movs	r3, #2
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	f000 f868 	bl	800d6c4 <_lseek_r>
 800d5f4:	89a3      	ldrh	r3, [r4, #12]
 800d5f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d5fe:	81a3      	strh	r3, [r4, #12]
 800d600:	4632      	mov	r2, r6
 800d602:	463b      	mov	r3, r7
 800d604:	4628      	mov	r0, r5
 800d606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d60a:	f000 b817 	b.w	800d63c <_write_r>

0800d60e <__sseek>:
 800d60e:	b510      	push	{r4, lr}
 800d610:	460c      	mov	r4, r1
 800d612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d616:	f000 f855 	bl	800d6c4 <_lseek_r>
 800d61a:	1c43      	adds	r3, r0, #1
 800d61c:	89a3      	ldrh	r3, [r4, #12]
 800d61e:	bf15      	itete	ne
 800d620:	6560      	strne	r0, [r4, #84]	; 0x54
 800d622:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d626:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d62a:	81a3      	strheq	r3, [r4, #12]
 800d62c:	bf18      	it	ne
 800d62e:	81a3      	strhne	r3, [r4, #12]
 800d630:	bd10      	pop	{r4, pc}

0800d632 <__sclose>:
 800d632:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d636:	f000 b813 	b.w	800d660 <_close_r>
	...

0800d63c <_write_r>:
 800d63c:	b538      	push	{r3, r4, r5, lr}
 800d63e:	4d07      	ldr	r5, [pc, #28]	; (800d65c <_write_r+0x20>)
 800d640:	4604      	mov	r4, r0
 800d642:	4608      	mov	r0, r1
 800d644:	4611      	mov	r1, r2
 800d646:	2200      	movs	r2, #0
 800d648:	602a      	str	r2, [r5, #0]
 800d64a:	461a      	mov	r2, r3
 800d64c:	f7f5 f821 	bl	8002692 <_write>
 800d650:	1c43      	adds	r3, r0, #1
 800d652:	d102      	bne.n	800d65a <_write_r+0x1e>
 800d654:	682b      	ldr	r3, [r5, #0]
 800d656:	b103      	cbz	r3, 800d65a <_write_r+0x1e>
 800d658:	6023      	str	r3, [r4, #0]
 800d65a:	bd38      	pop	{r3, r4, r5, pc}
 800d65c:	2000093c 	.word	0x2000093c

0800d660 <_close_r>:
 800d660:	b538      	push	{r3, r4, r5, lr}
 800d662:	4d06      	ldr	r5, [pc, #24]	; (800d67c <_close_r+0x1c>)
 800d664:	2300      	movs	r3, #0
 800d666:	4604      	mov	r4, r0
 800d668:	4608      	mov	r0, r1
 800d66a:	602b      	str	r3, [r5, #0]
 800d66c:	f7f5 f82d 	bl	80026ca <_close>
 800d670:	1c43      	adds	r3, r0, #1
 800d672:	d102      	bne.n	800d67a <_close_r+0x1a>
 800d674:	682b      	ldr	r3, [r5, #0]
 800d676:	b103      	cbz	r3, 800d67a <_close_r+0x1a>
 800d678:	6023      	str	r3, [r4, #0]
 800d67a:	bd38      	pop	{r3, r4, r5, pc}
 800d67c:	2000093c 	.word	0x2000093c

0800d680 <_fstat_r>:
 800d680:	b538      	push	{r3, r4, r5, lr}
 800d682:	4d07      	ldr	r5, [pc, #28]	; (800d6a0 <_fstat_r+0x20>)
 800d684:	2300      	movs	r3, #0
 800d686:	4604      	mov	r4, r0
 800d688:	4608      	mov	r0, r1
 800d68a:	4611      	mov	r1, r2
 800d68c:	602b      	str	r3, [r5, #0]
 800d68e:	f7f5 f827 	bl	80026e0 <_fstat>
 800d692:	1c43      	adds	r3, r0, #1
 800d694:	d102      	bne.n	800d69c <_fstat_r+0x1c>
 800d696:	682b      	ldr	r3, [r5, #0]
 800d698:	b103      	cbz	r3, 800d69c <_fstat_r+0x1c>
 800d69a:	6023      	str	r3, [r4, #0]
 800d69c:	bd38      	pop	{r3, r4, r5, pc}
 800d69e:	bf00      	nop
 800d6a0:	2000093c 	.word	0x2000093c

0800d6a4 <_isatty_r>:
 800d6a4:	b538      	push	{r3, r4, r5, lr}
 800d6a6:	4d06      	ldr	r5, [pc, #24]	; (800d6c0 <_isatty_r+0x1c>)
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	4604      	mov	r4, r0
 800d6ac:	4608      	mov	r0, r1
 800d6ae:	602b      	str	r3, [r5, #0]
 800d6b0:	f7f5 f825 	bl	80026fe <_isatty>
 800d6b4:	1c43      	adds	r3, r0, #1
 800d6b6:	d102      	bne.n	800d6be <_isatty_r+0x1a>
 800d6b8:	682b      	ldr	r3, [r5, #0]
 800d6ba:	b103      	cbz	r3, 800d6be <_isatty_r+0x1a>
 800d6bc:	6023      	str	r3, [r4, #0]
 800d6be:	bd38      	pop	{r3, r4, r5, pc}
 800d6c0:	2000093c 	.word	0x2000093c

0800d6c4 <_lseek_r>:
 800d6c4:	b538      	push	{r3, r4, r5, lr}
 800d6c6:	4d07      	ldr	r5, [pc, #28]	; (800d6e4 <_lseek_r+0x20>)
 800d6c8:	4604      	mov	r4, r0
 800d6ca:	4608      	mov	r0, r1
 800d6cc:	4611      	mov	r1, r2
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	602a      	str	r2, [r5, #0]
 800d6d2:	461a      	mov	r2, r3
 800d6d4:	f7f5 f81d 	bl	8002712 <_lseek>
 800d6d8:	1c43      	adds	r3, r0, #1
 800d6da:	d102      	bne.n	800d6e2 <_lseek_r+0x1e>
 800d6dc:	682b      	ldr	r3, [r5, #0]
 800d6de:	b103      	cbz	r3, 800d6e2 <_lseek_r+0x1e>
 800d6e0:	6023      	str	r3, [r4, #0]
 800d6e2:	bd38      	pop	{r3, r4, r5, pc}
 800d6e4:	2000093c 	.word	0x2000093c

0800d6e8 <memcpy>:
 800d6e8:	440a      	add	r2, r1
 800d6ea:	4291      	cmp	r1, r2
 800d6ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800d6f0:	d100      	bne.n	800d6f4 <memcpy+0xc>
 800d6f2:	4770      	bx	lr
 800d6f4:	b510      	push	{r4, lr}
 800d6f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d6fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d6fe:	4291      	cmp	r1, r2
 800d700:	d1f9      	bne.n	800d6f6 <memcpy+0xe>
 800d702:	bd10      	pop	{r4, pc}

0800d704 <memmove>:
 800d704:	4288      	cmp	r0, r1
 800d706:	b510      	push	{r4, lr}
 800d708:	eb01 0402 	add.w	r4, r1, r2
 800d70c:	d902      	bls.n	800d714 <memmove+0x10>
 800d70e:	4284      	cmp	r4, r0
 800d710:	4623      	mov	r3, r4
 800d712:	d807      	bhi.n	800d724 <memmove+0x20>
 800d714:	1e43      	subs	r3, r0, #1
 800d716:	42a1      	cmp	r1, r4
 800d718:	d008      	beq.n	800d72c <memmove+0x28>
 800d71a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d71e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d722:	e7f8      	b.n	800d716 <memmove+0x12>
 800d724:	4402      	add	r2, r0
 800d726:	4601      	mov	r1, r0
 800d728:	428a      	cmp	r2, r1
 800d72a:	d100      	bne.n	800d72e <memmove+0x2a>
 800d72c:	bd10      	pop	{r4, pc}
 800d72e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d732:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d736:	e7f7      	b.n	800d728 <memmove+0x24>

0800d738 <__malloc_lock>:
 800d738:	4801      	ldr	r0, [pc, #4]	; (800d740 <__malloc_lock+0x8>)
 800d73a:	f7ff b99d 	b.w	800ca78 <__retarget_lock_acquire_recursive>
 800d73e:	bf00      	nop
 800d740:	20000930 	.word	0x20000930

0800d744 <__malloc_unlock>:
 800d744:	4801      	ldr	r0, [pc, #4]	; (800d74c <__malloc_unlock+0x8>)
 800d746:	f7ff b998 	b.w	800ca7a <__retarget_lock_release_recursive>
 800d74a:	bf00      	nop
 800d74c:	20000930 	.word	0x20000930

0800d750 <_realloc_r>:
 800d750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d754:	4680      	mov	r8, r0
 800d756:	4614      	mov	r4, r2
 800d758:	460e      	mov	r6, r1
 800d75a:	b921      	cbnz	r1, 800d766 <_realloc_r+0x16>
 800d75c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d760:	4611      	mov	r1, r2
 800d762:	f7ff ba5b 	b.w	800cc1c <_malloc_r>
 800d766:	b92a      	cbnz	r2, 800d774 <_realloc_r+0x24>
 800d768:	f7ff f9ee 	bl	800cb48 <_free_r>
 800d76c:	4625      	mov	r5, r4
 800d76e:	4628      	mov	r0, r5
 800d770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d774:	f000 f82e 	bl	800d7d4 <_malloc_usable_size_r>
 800d778:	4284      	cmp	r4, r0
 800d77a:	4607      	mov	r7, r0
 800d77c:	d802      	bhi.n	800d784 <_realloc_r+0x34>
 800d77e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d782:	d812      	bhi.n	800d7aa <_realloc_r+0x5a>
 800d784:	4621      	mov	r1, r4
 800d786:	4640      	mov	r0, r8
 800d788:	f7ff fa48 	bl	800cc1c <_malloc_r>
 800d78c:	4605      	mov	r5, r0
 800d78e:	2800      	cmp	r0, #0
 800d790:	d0ed      	beq.n	800d76e <_realloc_r+0x1e>
 800d792:	42bc      	cmp	r4, r7
 800d794:	4622      	mov	r2, r4
 800d796:	4631      	mov	r1, r6
 800d798:	bf28      	it	cs
 800d79a:	463a      	movcs	r2, r7
 800d79c:	f7ff ffa4 	bl	800d6e8 <memcpy>
 800d7a0:	4631      	mov	r1, r6
 800d7a2:	4640      	mov	r0, r8
 800d7a4:	f7ff f9d0 	bl	800cb48 <_free_r>
 800d7a8:	e7e1      	b.n	800d76e <_realloc_r+0x1e>
 800d7aa:	4635      	mov	r5, r6
 800d7ac:	e7df      	b.n	800d76e <_realloc_r+0x1e>
	...

0800d7b0 <_read_r>:
 800d7b0:	b538      	push	{r3, r4, r5, lr}
 800d7b2:	4d07      	ldr	r5, [pc, #28]	; (800d7d0 <_read_r+0x20>)
 800d7b4:	4604      	mov	r4, r0
 800d7b6:	4608      	mov	r0, r1
 800d7b8:	4611      	mov	r1, r2
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	602a      	str	r2, [r5, #0]
 800d7be:	461a      	mov	r2, r3
 800d7c0:	f7f4 ff4a 	bl	8002658 <_read>
 800d7c4:	1c43      	adds	r3, r0, #1
 800d7c6:	d102      	bne.n	800d7ce <_read_r+0x1e>
 800d7c8:	682b      	ldr	r3, [r5, #0]
 800d7ca:	b103      	cbz	r3, 800d7ce <_read_r+0x1e>
 800d7cc:	6023      	str	r3, [r4, #0]
 800d7ce:	bd38      	pop	{r3, r4, r5, pc}
 800d7d0:	2000093c 	.word	0x2000093c

0800d7d4 <_malloc_usable_size_r>:
 800d7d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7d8:	1f18      	subs	r0, r3, #4
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	bfbc      	itt	lt
 800d7de:	580b      	ldrlt	r3, [r1, r0]
 800d7e0:	18c0      	addlt	r0, r0, r3
 800d7e2:	4770      	bx	lr

0800d7e4 <trunc>:
 800d7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7e6:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800d7ea:	f2a5 32ff 	subw	r2, r5, #1023	; 0x3ff
 800d7ee:	2a13      	cmp	r2, #19
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	460c      	mov	r4, r1
 800d7f4:	dc10      	bgt.n	800d818 <trunc+0x34>
 800d7f6:	2a00      	cmp	r2, #0
 800d7f8:	bfa7      	ittee	ge
 800d7fa:	4b11      	ldrge	r3, [pc, #68]	; (800d840 <trunc+0x5c>)
 800d7fc:	fa43 f202 	asrge.w	r2, r3, r2
 800d800:	2000      	movlt	r0, #0
 800d802:	f001 4100 	andlt.w	r1, r1, #2147483648	; 0x80000000
 800d806:	bfa4      	itt	ge
 800d808:	2000      	movge	r0, #0
 800d80a:	ea24 0102 	bicge.w	r1, r4, r2
 800d80e:	4603      	mov	r3, r0
 800d810:	460c      	mov	r4, r1
 800d812:	4618      	mov	r0, r3
 800d814:	4621      	mov	r1, r4
 800d816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d818:	2a33      	cmp	r2, #51	; 0x33
 800d81a:	dd07      	ble.n	800d82c <trunc+0x48>
 800d81c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800d820:	d1f7      	bne.n	800d812 <trunc+0x2e>
 800d822:	4602      	mov	r2, r0
 800d824:	460b      	mov	r3, r1
 800d826:	f7f2 fd09 	bl	800023c <__adddf3>
 800d82a:	e7f0      	b.n	800d80e <trunc+0x2a>
 800d82c:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
 800d830:	f04f 32ff 	mov.w	r2, #4294967295
 800d834:	fa22 f505 	lsr.w	r5, r2, r5
 800d838:	ea20 0005 	bic.w	r0, r0, r5
 800d83c:	e7e7      	b.n	800d80e <trunc+0x2a>
 800d83e:	bf00      	nop
 800d840:	000fffff 	.word	0x000fffff

0800d844 <pow>:
 800d844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d848:	4614      	mov	r4, r2
 800d84a:	461d      	mov	r5, r3
 800d84c:	4680      	mov	r8, r0
 800d84e:	4689      	mov	r9, r1
 800d850:	f000 f862 	bl	800d918 <__ieee754_pow>
 800d854:	4622      	mov	r2, r4
 800d856:	4606      	mov	r6, r0
 800d858:	460f      	mov	r7, r1
 800d85a:	462b      	mov	r3, r5
 800d85c:	4620      	mov	r0, r4
 800d85e:	4629      	mov	r1, r5
 800d860:	f7f3 f93c 	bl	8000adc <__aeabi_dcmpun>
 800d864:	bbc8      	cbnz	r0, 800d8da <pow+0x96>
 800d866:	2200      	movs	r2, #0
 800d868:	2300      	movs	r3, #0
 800d86a:	4640      	mov	r0, r8
 800d86c:	4649      	mov	r1, r9
 800d86e:	f7f3 f903 	bl	8000a78 <__aeabi_dcmpeq>
 800d872:	b1b8      	cbz	r0, 800d8a4 <pow+0x60>
 800d874:	2200      	movs	r2, #0
 800d876:	2300      	movs	r3, #0
 800d878:	4620      	mov	r0, r4
 800d87a:	4629      	mov	r1, r5
 800d87c:	f7f3 f8fc 	bl	8000a78 <__aeabi_dcmpeq>
 800d880:	2800      	cmp	r0, #0
 800d882:	d141      	bne.n	800d908 <pow+0xc4>
 800d884:	4620      	mov	r0, r4
 800d886:	4629      	mov	r1, r5
 800d888:	f000 fe39 	bl	800e4fe <finite>
 800d88c:	b328      	cbz	r0, 800d8da <pow+0x96>
 800d88e:	2200      	movs	r2, #0
 800d890:	2300      	movs	r3, #0
 800d892:	4620      	mov	r0, r4
 800d894:	4629      	mov	r1, r5
 800d896:	f7f3 f8f9 	bl	8000a8c <__aeabi_dcmplt>
 800d89a:	b1f0      	cbz	r0, 800d8da <pow+0x96>
 800d89c:	f7fe fd64 	bl	800c368 <__errno>
 800d8a0:	2322      	movs	r3, #34	; 0x22
 800d8a2:	e019      	b.n	800d8d8 <pow+0x94>
 800d8a4:	4630      	mov	r0, r6
 800d8a6:	4639      	mov	r1, r7
 800d8a8:	f000 fe29 	bl	800e4fe <finite>
 800d8ac:	b9c8      	cbnz	r0, 800d8e2 <pow+0x9e>
 800d8ae:	4640      	mov	r0, r8
 800d8b0:	4649      	mov	r1, r9
 800d8b2:	f000 fe24 	bl	800e4fe <finite>
 800d8b6:	b1a0      	cbz	r0, 800d8e2 <pow+0x9e>
 800d8b8:	4620      	mov	r0, r4
 800d8ba:	4629      	mov	r1, r5
 800d8bc:	f000 fe1f 	bl	800e4fe <finite>
 800d8c0:	b178      	cbz	r0, 800d8e2 <pow+0x9e>
 800d8c2:	4632      	mov	r2, r6
 800d8c4:	463b      	mov	r3, r7
 800d8c6:	4630      	mov	r0, r6
 800d8c8:	4639      	mov	r1, r7
 800d8ca:	f7f3 f907 	bl	8000adc <__aeabi_dcmpun>
 800d8ce:	2800      	cmp	r0, #0
 800d8d0:	d0e4      	beq.n	800d89c <pow+0x58>
 800d8d2:	f7fe fd49 	bl	800c368 <__errno>
 800d8d6:	2321      	movs	r3, #33	; 0x21
 800d8d8:	6003      	str	r3, [r0, #0]
 800d8da:	4630      	mov	r0, r6
 800d8dc:	4639      	mov	r1, r7
 800d8de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	4630      	mov	r0, r6
 800d8e8:	4639      	mov	r1, r7
 800d8ea:	f7f3 f8c5 	bl	8000a78 <__aeabi_dcmpeq>
 800d8ee:	2800      	cmp	r0, #0
 800d8f0:	d0f3      	beq.n	800d8da <pow+0x96>
 800d8f2:	4640      	mov	r0, r8
 800d8f4:	4649      	mov	r1, r9
 800d8f6:	f000 fe02 	bl	800e4fe <finite>
 800d8fa:	2800      	cmp	r0, #0
 800d8fc:	d0ed      	beq.n	800d8da <pow+0x96>
 800d8fe:	4620      	mov	r0, r4
 800d900:	4629      	mov	r1, r5
 800d902:	f000 fdfc 	bl	800e4fe <finite>
 800d906:	e7c8      	b.n	800d89a <pow+0x56>
 800d908:	4f01      	ldr	r7, [pc, #4]	; (800d910 <pow+0xcc>)
 800d90a:	2600      	movs	r6, #0
 800d90c:	e7e5      	b.n	800d8da <pow+0x96>
 800d90e:	bf00      	nop
 800d910:	3ff00000 	.word	0x3ff00000
 800d914:	00000000 	.word	0x00000000

0800d918 <__ieee754_pow>:
 800d918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d91c:	b093      	sub	sp, #76	; 0x4c
 800d91e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d922:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800d926:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800d92a:	4689      	mov	r9, r1
 800d92c:	ea56 0102 	orrs.w	r1, r6, r2
 800d930:	4680      	mov	r8, r0
 800d932:	d111      	bne.n	800d958 <__ieee754_pow+0x40>
 800d934:	1803      	adds	r3, r0, r0
 800d936:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800d93a:	4152      	adcs	r2, r2
 800d93c:	4299      	cmp	r1, r3
 800d93e:	4b82      	ldr	r3, [pc, #520]	; (800db48 <__ieee754_pow+0x230>)
 800d940:	4193      	sbcs	r3, r2
 800d942:	f080 84b9 	bcs.w	800e2b8 <__ieee754_pow+0x9a0>
 800d946:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d94a:	4640      	mov	r0, r8
 800d94c:	4649      	mov	r1, r9
 800d94e:	f7f2 fc75 	bl	800023c <__adddf3>
 800d952:	4683      	mov	fp, r0
 800d954:	468c      	mov	ip, r1
 800d956:	e06f      	b.n	800da38 <__ieee754_pow+0x120>
 800d958:	4b7c      	ldr	r3, [pc, #496]	; (800db4c <__ieee754_pow+0x234>)
 800d95a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800d95e:	429c      	cmp	r4, r3
 800d960:	464d      	mov	r5, r9
 800d962:	4682      	mov	sl, r0
 800d964:	dc06      	bgt.n	800d974 <__ieee754_pow+0x5c>
 800d966:	d101      	bne.n	800d96c <__ieee754_pow+0x54>
 800d968:	2800      	cmp	r0, #0
 800d96a:	d1ec      	bne.n	800d946 <__ieee754_pow+0x2e>
 800d96c:	429e      	cmp	r6, r3
 800d96e:	dc01      	bgt.n	800d974 <__ieee754_pow+0x5c>
 800d970:	d10f      	bne.n	800d992 <__ieee754_pow+0x7a>
 800d972:	b172      	cbz	r2, 800d992 <__ieee754_pow+0x7a>
 800d974:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800d978:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800d97c:	ea55 050a 	orrs.w	r5, r5, sl
 800d980:	d1e1      	bne.n	800d946 <__ieee754_pow+0x2e>
 800d982:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d986:	18db      	adds	r3, r3, r3
 800d988:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800d98c:	4152      	adcs	r2, r2
 800d98e:	429d      	cmp	r5, r3
 800d990:	e7d5      	b.n	800d93e <__ieee754_pow+0x26>
 800d992:	2d00      	cmp	r5, #0
 800d994:	da39      	bge.n	800da0a <__ieee754_pow+0xf2>
 800d996:	4b6e      	ldr	r3, [pc, #440]	; (800db50 <__ieee754_pow+0x238>)
 800d998:	429e      	cmp	r6, r3
 800d99a:	dc52      	bgt.n	800da42 <__ieee754_pow+0x12a>
 800d99c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800d9a0:	429e      	cmp	r6, r3
 800d9a2:	f340 849c 	ble.w	800e2de <__ieee754_pow+0x9c6>
 800d9a6:	1533      	asrs	r3, r6, #20
 800d9a8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d9ac:	2b14      	cmp	r3, #20
 800d9ae:	dd0f      	ble.n	800d9d0 <__ieee754_pow+0xb8>
 800d9b0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800d9b4:	fa22 f103 	lsr.w	r1, r2, r3
 800d9b8:	fa01 f303 	lsl.w	r3, r1, r3
 800d9bc:	4293      	cmp	r3, r2
 800d9be:	f040 848e 	bne.w	800e2de <__ieee754_pow+0x9c6>
 800d9c2:	f001 0101 	and.w	r1, r1, #1
 800d9c6:	f1c1 0302 	rsb	r3, r1, #2
 800d9ca:	9300      	str	r3, [sp, #0]
 800d9cc:	b182      	cbz	r2, 800d9f0 <__ieee754_pow+0xd8>
 800d9ce:	e05d      	b.n	800da8c <__ieee754_pow+0x174>
 800d9d0:	2a00      	cmp	r2, #0
 800d9d2:	d159      	bne.n	800da88 <__ieee754_pow+0x170>
 800d9d4:	f1c3 0314 	rsb	r3, r3, #20
 800d9d8:	fa46 f103 	asr.w	r1, r6, r3
 800d9dc:	fa01 f303 	lsl.w	r3, r1, r3
 800d9e0:	42b3      	cmp	r3, r6
 800d9e2:	f040 8479 	bne.w	800e2d8 <__ieee754_pow+0x9c0>
 800d9e6:	f001 0101 	and.w	r1, r1, #1
 800d9ea:	f1c1 0302 	rsb	r3, r1, #2
 800d9ee:	9300      	str	r3, [sp, #0]
 800d9f0:	4b58      	ldr	r3, [pc, #352]	; (800db54 <__ieee754_pow+0x23c>)
 800d9f2:	429e      	cmp	r6, r3
 800d9f4:	d132      	bne.n	800da5c <__ieee754_pow+0x144>
 800d9f6:	2f00      	cmp	r7, #0
 800d9f8:	f280 846a 	bge.w	800e2d0 <__ieee754_pow+0x9b8>
 800d9fc:	4955      	ldr	r1, [pc, #340]	; (800db54 <__ieee754_pow+0x23c>)
 800d9fe:	4642      	mov	r2, r8
 800da00:	464b      	mov	r3, r9
 800da02:	2000      	movs	r0, #0
 800da04:	f7f2 fefa 	bl	80007fc <__aeabi_ddiv>
 800da08:	e7a3      	b.n	800d952 <__ieee754_pow+0x3a>
 800da0a:	2300      	movs	r3, #0
 800da0c:	9300      	str	r3, [sp, #0]
 800da0e:	2a00      	cmp	r2, #0
 800da10:	d13c      	bne.n	800da8c <__ieee754_pow+0x174>
 800da12:	4b4e      	ldr	r3, [pc, #312]	; (800db4c <__ieee754_pow+0x234>)
 800da14:	429e      	cmp	r6, r3
 800da16:	d1eb      	bne.n	800d9f0 <__ieee754_pow+0xd8>
 800da18:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800da1c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800da20:	ea53 030a 	orrs.w	r3, r3, sl
 800da24:	f000 8448 	beq.w	800e2b8 <__ieee754_pow+0x9a0>
 800da28:	4b4b      	ldr	r3, [pc, #300]	; (800db58 <__ieee754_pow+0x240>)
 800da2a:	429c      	cmp	r4, r3
 800da2c:	dd0b      	ble.n	800da46 <__ieee754_pow+0x12e>
 800da2e:	2f00      	cmp	r7, #0
 800da30:	f2c0 8448 	blt.w	800e2c4 <__ieee754_pow+0x9ac>
 800da34:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800da38:	4658      	mov	r0, fp
 800da3a:	4661      	mov	r1, ip
 800da3c:	b013      	add	sp, #76	; 0x4c
 800da3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da42:	2302      	movs	r3, #2
 800da44:	e7e2      	b.n	800da0c <__ieee754_pow+0xf4>
 800da46:	2f00      	cmp	r7, #0
 800da48:	f04f 0b00 	mov.w	fp, #0
 800da4c:	f04f 0c00 	mov.w	ip, #0
 800da50:	daf2      	bge.n	800da38 <__ieee754_pow+0x120>
 800da52:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800da56:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800da5a:	e7ed      	b.n	800da38 <__ieee754_pow+0x120>
 800da5c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800da60:	d106      	bne.n	800da70 <__ieee754_pow+0x158>
 800da62:	4642      	mov	r2, r8
 800da64:	464b      	mov	r3, r9
 800da66:	4640      	mov	r0, r8
 800da68:	4649      	mov	r1, r9
 800da6a:	f7f2 fd9d 	bl	80005a8 <__aeabi_dmul>
 800da6e:	e770      	b.n	800d952 <__ieee754_pow+0x3a>
 800da70:	4b3a      	ldr	r3, [pc, #232]	; (800db5c <__ieee754_pow+0x244>)
 800da72:	429f      	cmp	r7, r3
 800da74:	d10a      	bne.n	800da8c <__ieee754_pow+0x174>
 800da76:	2d00      	cmp	r5, #0
 800da78:	db08      	blt.n	800da8c <__ieee754_pow+0x174>
 800da7a:	4640      	mov	r0, r8
 800da7c:	4649      	mov	r1, r9
 800da7e:	b013      	add	sp, #76	; 0x4c
 800da80:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da84:	f000 bc5e 	b.w	800e344 <__ieee754_sqrt>
 800da88:	2300      	movs	r3, #0
 800da8a:	9300      	str	r3, [sp, #0]
 800da8c:	4640      	mov	r0, r8
 800da8e:	4649      	mov	r1, r9
 800da90:	f000 fd32 	bl	800e4f8 <fabs>
 800da94:	4683      	mov	fp, r0
 800da96:	468c      	mov	ip, r1
 800da98:	f1ba 0f00 	cmp.w	sl, #0
 800da9c:	d128      	bne.n	800daf0 <__ieee754_pow+0x1d8>
 800da9e:	b124      	cbz	r4, 800daaa <__ieee754_pow+0x192>
 800daa0:	4b2c      	ldr	r3, [pc, #176]	; (800db54 <__ieee754_pow+0x23c>)
 800daa2:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800daa6:	429a      	cmp	r2, r3
 800daa8:	d122      	bne.n	800daf0 <__ieee754_pow+0x1d8>
 800daaa:	2f00      	cmp	r7, #0
 800daac:	da07      	bge.n	800dabe <__ieee754_pow+0x1a6>
 800daae:	465a      	mov	r2, fp
 800dab0:	4663      	mov	r3, ip
 800dab2:	4928      	ldr	r1, [pc, #160]	; (800db54 <__ieee754_pow+0x23c>)
 800dab4:	2000      	movs	r0, #0
 800dab6:	f7f2 fea1 	bl	80007fc <__aeabi_ddiv>
 800daba:	4683      	mov	fp, r0
 800dabc:	468c      	mov	ip, r1
 800dabe:	2d00      	cmp	r5, #0
 800dac0:	daba      	bge.n	800da38 <__ieee754_pow+0x120>
 800dac2:	9b00      	ldr	r3, [sp, #0]
 800dac4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800dac8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800dacc:	4323      	orrs	r3, r4
 800dace:	d108      	bne.n	800dae2 <__ieee754_pow+0x1ca>
 800dad0:	465a      	mov	r2, fp
 800dad2:	4663      	mov	r3, ip
 800dad4:	4658      	mov	r0, fp
 800dad6:	4661      	mov	r1, ip
 800dad8:	f7f2 fbae 	bl	8000238 <__aeabi_dsub>
 800dadc:	4602      	mov	r2, r0
 800dade:	460b      	mov	r3, r1
 800dae0:	e790      	b.n	800da04 <__ieee754_pow+0xec>
 800dae2:	9b00      	ldr	r3, [sp, #0]
 800dae4:	2b01      	cmp	r3, #1
 800dae6:	d1a7      	bne.n	800da38 <__ieee754_pow+0x120>
 800dae8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800daec:	469c      	mov	ip, r3
 800daee:	e7a3      	b.n	800da38 <__ieee754_pow+0x120>
 800daf0:	0feb      	lsrs	r3, r5, #31
 800daf2:	3b01      	subs	r3, #1
 800daf4:	930c      	str	r3, [sp, #48]	; 0x30
 800daf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800daf8:	9b00      	ldr	r3, [sp, #0]
 800dafa:	4313      	orrs	r3, r2
 800dafc:	d104      	bne.n	800db08 <__ieee754_pow+0x1f0>
 800dafe:	4642      	mov	r2, r8
 800db00:	464b      	mov	r3, r9
 800db02:	4640      	mov	r0, r8
 800db04:	4649      	mov	r1, r9
 800db06:	e7e7      	b.n	800dad8 <__ieee754_pow+0x1c0>
 800db08:	4b15      	ldr	r3, [pc, #84]	; (800db60 <__ieee754_pow+0x248>)
 800db0a:	429e      	cmp	r6, r3
 800db0c:	f340 80f6 	ble.w	800dcfc <__ieee754_pow+0x3e4>
 800db10:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800db14:	429e      	cmp	r6, r3
 800db16:	4b10      	ldr	r3, [pc, #64]	; (800db58 <__ieee754_pow+0x240>)
 800db18:	dd09      	ble.n	800db2e <__ieee754_pow+0x216>
 800db1a:	429c      	cmp	r4, r3
 800db1c:	dc0c      	bgt.n	800db38 <__ieee754_pow+0x220>
 800db1e:	2f00      	cmp	r7, #0
 800db20:	da0c      	bge.n	800db3c <__ieee754_pow+0x224>
 800db22:	2000      	movs	r0, #0
 800db24:	b013      	add	sp, #76	; 0x4c
 800db26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db2a:	f000 bce0 	b.w	800e4ee <__math_oflow>
 800db2e:	429c      	cmp	r4, r3
 800db30:	dbf5      	blt.n	800db1e <__ieee754_pow+0x206>
 800db32:	4b08      	ldr	r3, [pc, #32]	; (800db54 <__ieee754_pow+0x23c>)
 800db34:	429c      	cmp	r4, r3
 800db36:	dd15      	ble.n	800db64 <__ieee754_pow+0x24c>
 800db38:	2f00      	cmp	r7, #0
 800db3a:	dcf2      	bgt.n	800db22 <__ieee754_pow+0x20a>
 800db3c:	2000      	movs	r0, #0
 800db3e:	b013      	add	sp, #76	; 0x4c
 800db40:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db44:	f000 bcce 	b.w	800e4e4 <__math_uflow>
 800db48:	fff00000 	.word	0xfff00000
 800db4c:	7ff00000 	.word	0x7ff00000
 800db50:	433fffff 	.word	0x433fffff
 800db54:	3ff00000 	.word	0x3ff00000
 800db58:	3fefffff 	.word	0x3fefffff
 800db5c:	3fe00000 	.word	0x3fe00000
 800db60:	41e00000 	.word	0x41e00000
 800db64:	4661      	mov	r1, ip
 800db66:	4b60      	ldr	r3, [pc, #384]	; (800dce8 <__ieee754_pow+0x3d0>)
 800db68:	2200      	movs	r2, #0
 800db6a:	4658      	mov	r0, fp
 800db6c:	f7f2 fb64 	bl	8000238 <__aeabi_dsub>
 800db70:	a355      	add	r3, pc, #340	; (adr r3, 800dcc8 <__ieee754_pow+0x3b0>)
 800db72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db76:	4604      	mov	r4, r0
 800db78:	460d      	mov	r5, r1
 800db7a:	f7f2 fd15 	bl	80005a8 <__aeabi_dmul>
 800db7e:	a354      	add	r3, pc, #336	; (adr r3, 800dcd0 <__ieee754_pow+0x3b8>)
 800db80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db84:	4606      	mov	r6, r0
 800db86:	460f      	mov	r7, r1
 800db88:	4620      	mov	r0, r4
 800db8a:	4629      	mov	r1, r5
 800db8c:	f7f2 fd0c 	bl	80005a8 <__aeabi_dmul>
 800db90:	4b56      	ldr	r3, [pc, #344]	; (800dcec <__ieee754_pow+0x3d4>)
 800db92:	4682      	mov	sl, r0
 800db94:	468b      	mov	fp, r1
 800db96:	2200      	movs	r2, #0
 800db98:	4620      	mov	r0, r4
 800db9a:	4629      	mov	r1, r5
 800db9c:	f7f2 fd04 	bl	80005a8 <__aeabi_dmul>
 800dba0:	4602      	mov	r2, r0
 800dba2:	460b      	mov	r3, r1
 800dba4:	a14c      	add	r1, pc, #304	; (adr r1, 800dcd8 <__ieee754_pow+0x3c0>)
 800dba6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbaa:	f7f2 fb45 	bl	8000238 <__aeabi_dsub>
 800dbae:	4622      	mov	r2, r4
 800dbb0:	462b      	mov	r3, r5
 800dbb2:	f7f2 fcf9 	bl	80005a8 <__aeabi_dmul>
 800dbb6:	4602      	mov	r2, r0
 800dbb8:	460b      	mov	r3, r1
 800dbba:	2000      	movs	r0, #0
 800dbbc:	494c      	ldr	r1, [pc, #304]	; (800dcf0 <__ieee754_pow+0x3d8>)
 800dbbe:	f7f2 fb3b 	bl	8000238 <__aeabi_dsub>
 800dbc2:	4622      	mov	r2, r4
 800dbc4:	462b      	mov	r3, r5
 800dbc6:	4680      	mov	r8, r0
 800dbc8:	4689      	mov	r9, r1
 800dbca:	4620      	mov	r0, r4
 800dbcc:	4629      	mov	r1, r5
 800dbce:	f7f2 fceb 	bl	80005a8 <__aeabi_dmul>
 800dbd2:	4602      	mov	r2, r0
 800dbd4:	460b      	mov	r3, r1
 800dbd6:	4640      	mov	r0, r8
 800dbd8:	4649      	mov	r1, r9
 800dbda:	f7f2 fce5 	bl	80005a8 <__aeabi_dmul>
 800dbde:	a340      	add	r3, pc, #256	; (adr r3, 800dce0 <__ieee754_pow+0x3c8>)
 800dbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbe4:	f7f2 fce0 	bl	80005a8 <__aeabi_dmul>
 800dbe8:	4602      	mov	r2, r0
 800dbea:	460b      	mov	r3, r1
 800dbec:	4650      	mov	r0, sl
 800dbee:	4659      	mov	r1, fp
 800dbf0:	f7f2 fb22 	bl	8000238 <__aeabi_dsub>
 800dbf4:	4602      	mov	r2, r0
 800dbf6:	460b      	mov	r3, r1
 800dbf8:	4604      	mov	r4, r0
 800dbfa:	460d      	mov	r5, r1
 800dbfc:	4630      	mov	r0, r6
 800dbfe:	4639      	mov	r1, r7
 800dc00:	f7f2 fb1c 	bl	800023c <__adddf3>
 800dc04:	f04f 0a00 	mov.w	sl, #0
 800dc08:	4632      	mov	r2, r6
 800dc0a:	463b      	mov	r3, r7
 800dc0c:	4650      	mov	r0, sl
 800dc0e:	468b      	mov	fp, r1
 800dc10:	f7f2 fb12 	bl	8000238 <__aeabi_dsub>
 800dc14:	4602      	mov	r2, r0
 800dc16:	460b      	mov	r3, r1
 800dc18:	4620      	mov	r0, r4
 800dc1a:	4629      	mov	r1, r5
 800dc1c:	f7f2 fb0c 	bl	8000238 <__aeabi_dsub>
 800dc20:	9b00      	ldr	r3, [sp, #0]
 800dc22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dc24:	3b01      	subs	r3, #1
 800dc26:	4313      	orrs	r3, r2
 800dc28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800dc2c:	bf0c      	ite	eq
 800dc2e:	4b31      	ldreq	r3, [pc, #196]	; (800dcf4 <__ieee754_pow+0x3dc>)
 800dc30:	4b2d      	ldrne	r3, [pc, #180]	; (800dce8 <__ieee754_pow+0x3d0>)
 800dc32:	2600      	movs	r6, #0
 800dc34:	2200      	movs	r2, #0
 800dc36:	e9cd 2300 	strd	r2, r3, [sp]
 800dc3a:	4604      	mov	r4, r0
 800dc3c:	460d      	mov	r5, r1
 800dc3e:	4632      	mov	r2, r6
 800dc40:	463b      	mov	r3, r7
 800dc42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc46:	f7f2 faf7 	bl	8000238 <__aeabi_dsub>
 800dc4a:	4652      	mov	r2, sl
 800dc4c:	465b      	mov	r3, fp
 800dc4e:	f7f2 fcab 	bl	80005a8 <__aeabi_dmul>
 800dc52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dc56:	4680      	mov	r8, r0
 800dc58:	4689      	mov	r9, r1
 800dc5a:	4620      	mov	r0, r4
 800dc5c:	4629      	mov	r1, r5
 800dc5e:	f7f2 fca3 	bl	80005a8 <__aeabi_dmul>
 800dc62:	4602      	mov	r2, r0
 800dc64:	460b      	mov	r3, r1
 800dc66:	4640      	mov	r0, r8
 800dc68:	4649      	mov	r1, r9
 800dc6a:	f7f2 fae7 	bl	800023c <__adddf3>
 800dc6e:	4632      	mov	r2, r6
 800dc70:	463b      	mov	r3, r7
 800dc72:	4680      	mov	r8, r0
 800dc74:	4689      	mov	r9, r1
 800dc76:	4650      	mov	r0, sl
 800dc78:	4659      	mov	r1, fp
 800dc7a:	f7f2 fc95 	bl	80005a8 <__aeabi_dmul>
 800dc7e:	460b      	mov	r3, r1
 800dc80:	4604      	mov	r4, r0
 800dc82:	460d      	mov	r5, r1
 800dc84:	4602      	mov	r2, r0
 800dc86:	4649      	mov	r1, r9
 800dc88:	4640      	mov	r0, r8
 800dc8a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800dc8e:	f7f2 fad5 	bl	800023c <__adddf3>
 800dc92:	4b19      	ldr	r3, [pc, #100]	; (800dcf8 <__ieee754_pow+0x3e0>)
 800dc94:	4299      	cmp	r1, r3
 800dc96:	4682      	mov	sl, r0
 800dc98:	460f      	mov	r7, r1
 800dc9a:	460e      	mov	r6, r1
 800dc9c:	f340 82e7 	ble.w	800e26e <__ieee754_pow+0x956>
 800dca0:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800dca4:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800dca8:	4303      	orrs	r3, r0
 800dcaa:	f000 81e1 	beq.w	800e070 <__ieee754_pow+0x758>
 800dcae:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	f7f2 fee9 	bl	8000a8c <__aeabi_dcmplt>
 800dcba:	3800      	subs	r0, #0
 800dcbc:	bf18      	it	ne
 800dcbe:	2001      	movne	r0, #1
 800dcc0:	e730      	b.n	800db24 <__ieee754_pow+0x20c>
 800dcc2:	bf00      	nop
 800dcc4:	f3af 8000 	nop.w
 800dcc8:	60000000 	.word	0x60000000
 800dccc:	3ff71547 	.word	0x3ff71547
 800dcd0:	f85ddf44 	.word	0xf85ddf44
 800dcd4:	3e54ae0b 	.word	0x3e54ae0b
 800dcd8:	55555555 	.word	0x55555555
 800dcdc:	3fd55555 	.word	0x3fd55555
 800dce0:	652b82fe 	.word	0x652b82fe
 800dce4:	3ff71547 	.word	0x3ff71547
 800dce8:	3ff00000 	.word	0x3ff00000
 800dcec:	3fd00000 	.word	0x3fd00000
 800dcf0:	3fe00000 	.word	0x3fe00000
 800dcf4:	bff00000 	.word	0xbff00000
 800dcf8:	408fffff 	.word	0x408fffff
 800dcfc:	4bd2      	ldr	r3, [pc, #840]	; (800e048 <__ieee754_pow+0x730>)
 800dcfe:	402b      	ands	r3, r5
 800dd00:	2200      	movs	r2, #0
 800dd02:	b943      	cbnz	r3, 800dd16 <__ieee754_pow+0x3fe>
 800dd04:	4658      	mov	r0, fp
 800dd06:	4bd1      	ldr	r3, [pc, #836]	; (800e04c <__ieee754_pow+0x734>)
 800dd08:	4661      	mov	r1, ip
 800dd0a:	f7f2 fc4d 	bl	80005a8 <__aeabi_dmul>
 800dd0e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800dd12:	4683      	mov	fp, r0
 800dd14:	460c      	mov	r4, r1
 800dd16:	1523      	asrs	r3, r4, #20
 800dd18:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800dd1c:	4413      	add	r3, r2
 800dd1e:	930b      	str	r3, [sp, #44]	; 0x2c
 800dd20:	4bcb      	ldr	r3, [pc, #812]	; (800e050 <__ieee754_pow+0x738>)
 800dd22:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800dd26:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800dd2a:	429c      	cmp	r4, r3
 800dd2c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800dd30:	dd08      	ble.n	800dd44 <__ieee754_pow+0x42c>
 800dd32:	4bc8      	ldr	r3, [pc, #800]	; (800e054 <__ieee754_pow+0x73c>)
 800dd34:	429c      	cmp	r4, r3
 800dd36:	f340 8199 	ble.w	800e06c <__ieee754_pow+0x754>
 800dd3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd3c:	3301      	adds	r3, #1
 800dd3e:	930b      	str	r3, [sp, #44]	; 0x2c
 800dd40:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800dd44:	2600      	movs	r6, #0
 800dd46:	00f3      	lsls	r3, r6, #3
 800dd48:	930d      	str	r3, [sp, #52]	; 0x34
 800dd4a:	4bc3      	ldr	r3, [pc, #780]	; (800e058 <__ieee754_pow+0x740>)
 800dd4c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800dd50:	e9d3 3400 	ldrd	r3, r4, [r3]
 800dd54:	4658      	mov	r0, fp
 800dd56:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800dd5a:	461a      	mov	r2, r3
 800dd5c:	4629      	mov	r1, r5
 800dd5e:	4623      	mov	r3, r4
 800dd60:	f7f2 fa6a 	bl	8000238 <__aeabi_dsub>
 800dd64:	46da      	mov	sl, fp
 800dd66:	4652      	mov	r2, sl
 800dd68:	462b      	mov	r3, r5
 800dd6a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800dd6e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dd72:	f7f2 fa63 	bl	800023c <__adddf3>
 800dd76:	4602      	mov	r2, r0
 800dd78:	460b      	mov	r3, r1
 800dd7a:	2000      	movs	r0, #0
 800dd7c:	49b7      	ldr	r1, [pc, #732]	; (800e05c <__ieee754_pow+0x744>)
 800dd7e:	f7f2 fd3d 	bl	80007fc <__aeabi_ddiv>
 800dd82:	4602      	mov	r2, r0
 800dd84:	460b      	mov	r3, r1
 800dd86:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800dd8a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800dd8e:	f7f2 fc0b 	bl	80005a8 <__aeabi_dmul>
 800dd92:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800dd96:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800dd9a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800dd9e:	2300      	movs	r3, #0
 800dda0:	9304      	str	r3, [sp, #16]
 800dda2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800dda6:	46ab      	mov	fp, r5
 800dda8:	106d      	asrs	r5, r5, #1
 800ddaa:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ddae:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ddb2:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	4640      	mov	r0, r8
 800ddba:	4649      	mov	r1, r9
 800ddbc:	4614      	mov	r4, r2
 800ddbe:	461d      	mov	r5, r3
 800ddc0:	f7f2 fbf2 	bl	80005a8 <__aeabi_dmul>
 800ddc4:	4602      	mov	r2, r0
 800ddc6:	460b      	mov	r3, r1
 800ddc8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ddcc:	f7f2 fa34 	bl	8000238 <__aeabi_dsub>
 800ddd0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ddd4:	4606      	mov	r6, r0
 800ddd6:	460f      	mov	r7, r1
 800ddd8:	4620      	mov	r0, r4
 800ddda:	4629      	mov	r1, r5
 800dddc:	f7f2 fa2c 	bl	8000238 <__aeabi_dsub>
 800dde0:	4602      	mov	r2, r0
 800dde2:	460b      	mov	r3, r1
 800dde4:	4650      	mov	r0, sl
 800dde6:	4659      	mov	r1, fp
 800dde8:	f7f2 fa26 	bl	8000238 <__aeabi_dsub>
 800ddec:	4642      	mov	r2, r8
 800ddee:	464b      	mov	r3, r9
 800ddf0:	f7f2 fbda 	bl	80005a8 <__aeabi_dmul>
 800ddf4:	4602      	mov	r2, r0
 800ddf6:	460b      	mov	r3, r1
 800ddf8:	4630      	mov	r0, r6
 800ddfa:	4639      	mov	r1, r7
 800ddfc:	f7f2 fa1c 	bl	8000238 <__aeabi_dsub>
 800de00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800de04:	f7f2 fbd0 	bl	80005a8 <__aeabi_dmul>
 800de08:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800de0c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800de10:	4610      	mov	r0, r2
 800de12:	4619      	mov	r1, r3
 800de14:	f7f2 fbc8 	bl	80005a8 <__aeabi_dmul>
 800de18:	a379      	add	r3, pc, #484	; (adr r3, 800e000 <__ieee754_pow+0x6e8>)
 800de1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de1e:	4604      	mov	r4, r0
 800de20:	460d      	mov	r5, r1
 800de22:	f7f2 fbc1 	bl	80005a8 <__aeabi_dmul>
 800de26:	a378      	add	r3, pc, #480	; (adr r3, 800e008 <__ieee754_pow+0x6f0>)
 800de28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de2c:	f7f2 fa06 	bl	800023c <__adddf3>
 800de30:	4622      	mov	r2, r4
 800de32:	462b      	mov	r3, r5
 800de34:	f7f2 fbb8 	bl	80005a8 <__aeabi_dmul>
 800de38:	a375      	add	r3, pc, #468	; (adr r3, 800e010 <__ieee754_pow+0x6f8>)
 800de3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de3e:	f7f2 f9fd 	bl	800023c <__adddf3>
 800de42:	4622      	mov	r2, r4
 800de44:	462b      	mov	r3, r5
 800de46:	f7f2 fbaf 	bl	80005a8 <__aeabi_dmul>
 800de4a:	a373      	add	r3, pc, #460	; (adr r3, 800e018 <__ieee754_pow+0x700>)
 800de4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de50:	f7f2 f9f4 	bl	800023c <__adddf3>
 800de54:	4622      	mov	r2, r4
 800de56:	462b      	mov	r3, r5
 800de58:	f7f2 fba6 	bl	80005a8 <__aeabi_dmul>
 800de5c:	a370      	add	r3, pc, #448	; (adr r3, 800e020 <__ieee754_pow+0x708>)
 800de5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de62:	f7f2 f9eb 	bl	800023c <__adddf3>
 800de66:	4622      	mov	r2, r4
 800de68:	462b      	mov	r3, r5
 800de6a:	f7f2 fb9d 	bl	80005a8 <__aeabi_dmul>
 800de6e:	a36e      	add	r3, pc, #440	; (adr r3, 800e028 <__ieee754_pow+0x710>)
 800de70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de74:	f7f2 f9e2 	bl	800023c <__adddf3>
 800de78:	4622      	mov	r2, r4
 800de7a:	4606      	mov	r6, r0
 800de7c:	460f      	mov	r7, r1
 800de7e:	462b      	mov	r3, r5
 800de80:	4620      	mov	r0, r4
 800de82:	4629      	mov	r1, r5
 800de84:	f7f2 fb90 	bl	80005a8 <__aeabi_dmul>
 800de88:	4602      	mov	r2, r0
 800de8a:	460b      	mov	r3, r1
 800de8c:	4630      	mov	r0, r6
 800de8e:	4639      	mov	r1, r7
 800de90:	f7f2 fb8a 	bl	80005a8 <__aeabi_dmul>
 800de94:	4642      	mov	r2, r8
 800de96:	4604      	mov	r4, r0
 800de98:	460d      	mov	r5, r1
 800de9a:	464b      	mov	r3, r9
 800de9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dea0:	f7f2 f9cc 	bl	800023c <__adddf3>
 800dea4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800dea8:	f7f2 fb7e 	bl	80005a8 <__aeabi_dmul>
 800deac:	4622      	mov	r2, r4
 800deae:	462b      	mov	r3, r5
 800deb0:	f7f2 f9c4 	bl	800023c <__adddf3>
 800deb4:	4642      	mov	r2, r8
 800deb6:	4606      	mov	r6, r0
 800deb8:	460f      	mov	r7, r1
 800deba:	464b      	mov	r3, r9
 800debc:	4640      	mov	r0, r8
 800debe:	4649      	mov	r1, r9
 800dec0:	f7f2 fb72 	bl	80005a8 <__aeabi_dmul>
 800dec4:	4b66      	ldr	r3, [pc, #408]	; (800e060 <__ieee754_pow+0x748>)
 800dec6:	2200      	movs	r2, #0
 800dec8:	4682      	mov	sl, r0
 800deca:	468b      	mov	fp, r1
 800decc:	f7f2 f9b6 	bl	800023c <__adddf3>
 800ded0:	4632      	mov	r2, r6
 800ded2:	463b      	mov	r3, r7
 800ded4:	f7f2 f9b2 	bl	800023c <__adddf3>
 800ded8:	2400      	movs	r4, #0
 800deda:	460d      	mov	r5, r1
 800dedc:	4622      	mov	r2, r4
 800dede:	460b      	mov	r3, r1
 800dee0:	4640      	mov	r0, r8
 800dee2:	4649      	mov	r1, r9
 800dee4:	f7f2 fb60 	bl	80005a8 <__aeabi_dmul>
 800dee8:	4b5d      	ldr	r3, [pc, #372]	; (800e060 <__ieee754_pow+0x748>)
 800deea:	4680      	mov	r8, r0
 800deec:	4689      	mov	r9, r1
 800deee:	2200      	movs	r2, #0
 800def0:	4620      	mov	r0, r4
 800def2:	4629      	mov	r1, r5
 800def4:	f7f2 f9a0 	bl	8000238 <__aeabi_dsub>
 800def8:	4652      	mov	r2, sl
 800defa:	465b      	mov	r3, fp
 800defc:	f7f2 f99c 	bl	8000238 <__aeabi_dsub>
 800df00:	4602      	mov	r2, r0
 800df02:	460b      	mov	r3, r1
 800df04:	4630      	mov	r0, r6
 800df06:	4639      	mov	r1, r7
 800df08:	f7f2 f996 	bl	8000238 <__aeabi_dsub>
 800df0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800df10:	f7f2 fb4a 	bl	80005a8 <__aeabi_dmul>
 800df14:	4622      	mov	r2, r4
 800df16:	4606      	mov	r6, r0
 800df18:	460f      	mov	r7, r1
 800df1a:	462b      	mov	r3, r5
 800df1c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800df20:	f7f2 fb42 	bl	80005a8 <__aeabi_dmul>
 800df24:	4602      	mov	r2, r0
 800df26:	460b      	mov	r3, r1
 800df28:	4630      	mov	r0, r6
 800df2a:	4639      	mov	r1, r7
 800df2c:	f7f2 f986 	bl	800023c <__adddf3>
 800df30:	4606      	mov	r6, r0
 800df32:	460f      	mov	r7, r1
 800df34:	4602      	mov	r2, r0
 800df36:	460b      	mov	r3, r1
 800df38:	4640      	mov	r0, r8
 800df3a:	4649      	mov	r1, r9
 800df3c:	f7f2 f97e 	bl	800023c <__adddf3>
 800df40:	2400      	movs	r4, #0
 800df42:	a33b      	add	r3, pc, #236	; (adr r3, 800e030 <__ieee754_pow+0x718>)
 800df44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df48:	4620      	mov	r0, r4
 800df4a:	460d      	mov	r5, r1
 800df4c:	f7f2 fb2c 	bl	80005a8 <__aeabi_dmul>
 800df50:	4642      	mov	r2, r8
 800df52:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800df56:	464b      	mov	r3, r9
 800df58:	4620      	mov	r0, r4
 800df5a:	4629      	mov	r1, r5
 800df5c:	f7f2 f96c 	bl	8000238 <__aeabi_dsub>
 800df60:	4602      	mov	r2, r0
 800df62:	460b      	mov	r3, r1
 800df64:	4630      	mov	r0, r6
 800df66:	4639      	mov	r1, r7
 800df68:	f7f2 f966 	bl	8000238 <__aeabi_dsub>
 800df6c:	a332      	add	r3, pc, #200	; (adr r3, 800e038 <__ieee754_pow+0x720>)
 800df6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df72:	f7f2 fb19 	bl	80005a8 <__aeabi_dmul>
 800df76:	a332      	add	r3, pc, #200	; (adr r3, 800e040 <__ieee754_pow+0x728>)
 800df78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df7c:	4606      	mov	r6, r0
 800df7e:	460f      	mov	r7, r1
 800df80:	4620      	mov	r0, r4
 800df82:	4629      	mov	r1, r5
 800df84:	f7f2 fb10 	bl	80005a8 <__aeabi_dmul>
 800df88:	4602      	mov	r2, r0
 800df8a:	460b      	mov	r3, r1
 800df8c:	4630      	mov	r0, r6
 800df8e:	4639      	mov	r1, r7
 800df90:	f7f2 f954 	bl	800023c <__adddf3>
 800df94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800df96:	4b33      	ldr	r3, [pc, #204]	; (800e064 <__ieee754_pow+0x74c>)
 800df98:	4413      	add	r3, r2
 800df9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df9e:	f7f2 f94d 	bl	800023c <__adddf3>
 800dfa2:	4680      	mov	r8, r0
 800dfa4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800dfa6:	4689      	mov	r9, r1
 800dfa8:	f7f2 fa94 	bl	80004d4 <__aeabi_i2d>
 800dfac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dfae:	4b2e      	ldr	r3, [pc, #184]	; (800e068 <__ieee754_pow+0x750>)
 800dfb0:	4413      	add	r3, r2
 800dfb2:	e9d3 6700 	ldrd	r6, r7, [r3]
 800dfb6:	4604      	mov	r4, r0
 800dfb8:	460d      	mov	r5, r1
 800dfba:	4642      	mov	r2, r8
 800dfbc:	464b      	mov	r3, r9
 800dfbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dfc2:	f7f2 f93b 	bl	800023c <__adddf3>
 800dfc6:	4632      	mov	r2, r6
 800dfc8:	463b      	mov	r3, r7
 800dfca:	f7f2 f937 	bl	800023c <__adddf3>
 800dfce:	4622      	mov	r2, r4
 800dfd0:	462b      	mov	r3, r5
 800dfd2:	f7f2 f933 	bl	800023c <__adddf3>
 800dfd6:	f04f 0a00 	mov.w	sl, #0
 800dfda:	4622      	mov	r2, r4
 800dfdc:	462b      	mov	r3, r5
 800dfde:	4650      	mov	r0, sl
 800dfe0:	468b      	mov	fp, r1
 800dfe2:	f7f2 f929 	bl	8000238 <__aeabi_dsub>
 800dfe6:	4632      	mov	r2, r6
 800dfe8:	463b      	mov	r3, r7
 800dfea:	f7f2 f925 	bl	8000238 <__aeabi_dsub>
 800dfee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dff2:	f7f2 f921 	bl	8000238 <__aeabi_dsub>
 800dff6:	4602      	mov	r2, r0
 800dff8:	460b      	mov	r3, r1
 800dffa:	4640      	mov	r0, r8
 800dffc:	4649      	mov	r1, r9
 800dffe:	e60d      	b.n	800dc1c <__ieee754_pow+0x304>
 800e000:	4a454eef 	.word	0x4a454eef
 800e004:	3fca7e28 	.word	0x3fca7e28
 800e008:	93c9db65 	.word	0x93c9db65
 800e00c:	3fcd864a 	.word	0x3fcd864a
 800e010:	a91d4101 	.word	0xa91d4101
 800e014:	3fd17460 	.word	0x3fd17460
 800e018:	518f264d 	.word	0x518f264d
 800e01c:	3fd55555 	.word	0x3fd55555
 800e020:	db6fabff 	.word	0xdb6fabff
 800e024:	3fdb6db6 	.word	0x3fdb6db6
 800e028:	33333303 	.word	0x33333303
 800e02c:	3fe33333 	.word	0x3fe33333
 800e030:	e0000000 	.word	0xe0000000
 800e034:	3feec709 	.word	0x3feec709
 800e038:	dc3a03fd 	.word	0xdc3a03fd
 800e03c:	3feec709 	.word	0x3feec709
 800e040:	145b01f5 	.word	0x145b01f5
 800e044:	be3e2fe0 	.word	0xbe3e2fe0
 800e048:	7ff00000 	.word	0x7ff00000
 800e04c:	43400000 	.word	0x43400000
 800e050:	0003988e 	.word	0x0003988e
 800e054:	000bb679 	.word	0x000bb679
 800e058:	0800ecf0 	.word	0x0800ecf0
 800e05c:	3ff00000 	.word	0x3ff00000
 800e060:	40080000 	.word	0x40080000
 800e064:	0800ed10 	.word	0x0800ed10
 800e068:	0800ed00 	.word	0x0800ed00
 800e06c:	2601      	movs	r6, #1
 800e06e:	e66a      	b.n	800dd46 <__ieee754_pow+0x42e>
 800e070:	a39d      	add	r3, pc, #628	; (adr r3, 800e2e8 <__ieee754_pow+0x9d0>)
 800e072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e076:	4640      	mov	r0, r8
 800e078:	4649      	mov	r1, r9
 800e07a:	f7f2 f8df 	bl	800023c <__adddf3>
 800e07e:	4622      	mov	r2, r4
 800e080:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e084:	462b      	mov	r3, r5
 800e086:	4650      	mov	r0, sl
 800e088:	4639      	mov	r1, r7
 800e08a:	f7f2 f8d5 	bl	8000238 <__aeabi_dsub>
 800e08e:	4602      	mov	r2, r0
 800e090:	460b      	mov	r3, r1
 800e092:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e096:	f7f2 fd17 	bl	8000ac8 <__aeabi_dcmpgt>
 800e09a:	2800      	cmp	r0, #0
 800e09c:	f47f ae07 	bne.w	800dcae <__ieee754_pow+0x396>
 800e0a0:	4aa3      	ldr	r2, [pc, #652]	; (800e330 <__ieee754_pow+0xa18>)
 800e0a2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800e0a6:	4293      	cmp	r3, r2
 800e0a8:	f340 8101 	ble.w	800e2ae <__ieee754_pow+0x996>
 800e0ac:	151b      	asrs	r3, r3, #20
 800e0ae:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e0b2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e0b6:	fa4a f303 	asr.w	r3, sl, r3
 800e0ba:	4433      	add	r3, r6
 800e0bc:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e0c0:	4f9c      	ldr	r7, [pc, #624]	; (800e334 <__ieee754_pow+0xa1c>)
 800e0c2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e0c6:	4117      	asrs	r7, r2
 800e0c8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800e0cc:	2000      	movs	r0, #0
 800e0ce:	ea23 0107 	bic.w	r1, r3, r7
 800e0d2:	f1c2 0214 	rsb	r2, r2, #20
 800e0d6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e0da:	fa4a fa02 	asr.w	sl, sl, r2
 800e0de:	2e00      	cmp	r6, #0
 800e0e0:	4602      	mov	r2, r0
 800e0e2:	460b      	mov	r3, r1
 800e0e4:	4620      	mov	r0, r4
 800e0e6:	4629      	mov	r1, r5
 800e0e8:	bfb8      	it	lt
 800e0ea:	f1ca 0a00 	rsblt	sl, sl, #0
 800e0ee:	f7f2 f8a3 	bl	8000238 <__aeabi_dsub>
 800e0f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e0f6:	4642      	mov	r2, r8
 800e0f8:	464b      	mov	r3, r9
 800e0fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0fe:	f7f2 f89d 	bl	800023c <__adddf3>
 800e102:	2400      	movs	r4, #0
 800e104:	a37a      	add	r3, pc, #488	; (adr r3, 800e2f0 <__ieee754_pow+0x9d8>)
 800e106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e10a:	4620      	mov	r0, r4
 800e10c:	460d      	mov	r5, r1
 800e10e:	f7f2 fa4b 	bl	80005a8 <__aeabi_dmul>
 800e112:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e116:	4606      	mov	r6, r0
 800e118:	460f      	mov	r7, r1
 800e11a:	4620      	mov	r0, r4
 800e11c:	4629      	mov	r1, r5
 800e11e:	f7f2 f88b 	bl	8000238 <__aeabi_dsub>
 800e122:	4602      	mov	r2, r0
 800e124:	460b      	mov	r3, r1
 800e126:	4640      	mov	r0, r8
 800e128:	4649      	mov	r1, r9
 800e12a:	f7f2 f885 	bl	8000238 <__aeabi_dsub>
 800e12e:	a372      	add	r3, pc, #456	; (adr r3, 800e2f8 <__ieee754_pow+0x9e0>)
 800e130:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e134:	f7f2 fa38 	bl	80005a8 <__aeabi_dmul>
 800e138:	a371      	add	r3, pc, #452	; (adr r3, 800e300 <__ieee754_pow+0x9e8>)
 800e13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e13e:	4680      	mov	r8, r0
 800e140:	4689      	mov	r9, r1
 800e142:	4620      	mov	r0, r4
 800e144:	4629      	mov	r1, r5
 800e146:	f7f2 fa2f 	bl	80005a8 <__aeabi_dmul>
 800e14a:	4602      	mov	r2, r0
 800e14c:	460b      	mov	r3, r1
 800e14e:	4640      	mov	r0, r8
 800e150:	4649      	mov	r1, r9
 800e152:	f7f2 f873 	bl	800023c <__adddf3>
 800e156:	4604      	mov	r4, r0
 800e158:	460d      	mov	r5, r1
 800e15a:	4602      	mov	r2, r0
 800e15c:	460b      	mov	r3, r1
 800e15e:	4630      	mov	r0, r6
 800e160:	4639      	mov	r1, r7
 800e162:	f7f2 f86b 	bl	800023c <__adddf3>
 800e166:	4632      	mov	r2, r6
 800e168:	463b      	mov	r3, r7
 800e16a:	4680      	mov	r8, r0
 800e16c:	4689      	mov	r9, r1
 800e16e:	f7f2 f863 	bl	8000238 <__aeabi_dsub>
 800e172:	4602      	mov	r2, r0
 800e174:	460b      	mov	r3, r1
 800e176:	4620      	mov	r0, r4
 800e178:	4629      	mov	r1, r5
 800e17a:	f7f2 f85d 	bl	8000238 <__aeabi_dsub>
 800e17e:	4642      	mov	r2, r8
 800e180:	4606      	mov	r6, r0
 800e182:	460f      	mov	r7, r1
 800e184:	464b      	mov	r3, r9
 800e186:	4640      	mov	r0, r8
 800e188:	4649      	mov	r1, r9
 800e18a:	f7f2 fa0d 	bl	80005a8 <__aeabi_dmul>
 800e18e:	a35e      	add	r3, pc, #376	; (adr r3, 800e308 <__ieee754_pow+0x9f0>)
 800e190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e194:	4604      	mov	r4, r0
 800e196:	460d      	mov	r5, r1
 800e198:	f7f2 fa06 	bl	80005a8 <__aeabi_dmul>
 800e19c:	a35c      	add	r3, pc, #368	; (adr r3, 800e310 <__ieee754_pow+0x9f8>)
 800e19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1a2:	f7f2 f849 	bl	8000238 <__aeabi_dsub>
 800e1a6:	4622      	mov	r2, r4
 800e1a8:	462b      	mov	r3, r5
 800e1aa:	f7f2 f9fd 	bl	80005a8 <__aeabi_dmul>
 800e1ae:	a35a      	add	r3, pc, #360	; (adr r3, 800e318 <__ieee754_pow+0xa00>)
 800e1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1b4:	f7f2 f842 	bl	800023c <__adddf3>
 800e1b8:	4622      	mov	r2, r4
 800e1ba:	462b      	mov	r3, r5
 800e1bc:	f7f2 f9f4 	bl	80005a8 <__aeabi_dmul>
 800e1c0:	a357      	add	r3, pc, #348	; (adr r3, 800e320 <__ieee754_pow+0xa08>)
 800e1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1c6:	f7f2 f837 	bl	8000238 <__aeabi_dsub>
 800e1ca:	4622      	mov	r2, r4
 800e1cc:	462b      	mov	r3, r5
 800e1ce:	f7f2 f9eb 	bl	80005a8 <__aeabi_dmul>
 800e1d2:	a355      	add	r3, pc, #340	; (adr r3, 800e328 <__ieee754_pow+0xa10>)
 800e1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1d8:	f7f2 f830 	bl	800023c <__adddf3>
 800e1dc:	4622      	mov	r2, r4
 800e1de:	462b      	mov	r3, r5
 800e1e0:	f7f2 f9e2 	bl	80005a8 <__aeabi_dmul>
 800e1e4:	4602      	mov	r2, r0
 800e1e6:	460b      	mov	r3, r1
 800e1e8:	4640      	mov	r0, r8
 800e1ea:	4649      	mov	r1, r9
 800e1ec:	f7f2 f824 	bl	8000238 <__aeabi_dsub>
 800e1f0:	4604      	mov	r4, r0
 800e1f2:	460d      	mov	r5, r1
 800e1f4:	4602      	mov	r2, r0
 800e1f6:	460b      	mov	r3, r1
 800e1f8:	4640      	mov	r0, r8
 800e1fa:	4649      	mov	r1, r9
 800e1fc:	f7f2 f9d4 	bl	80005a8 <__aeabi_dmul>
 800e200:	2200      	movs	r2, #0
 800e202:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e206:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e20a:	4620      	mov	r0, r4
 800e20c:	4629      	mov	r1, r5
 800e20e:	f7f2 f813 	bl	8000238 <__aeabi_dsub>
 800e212:	4602      	mov	r2, r0
 800e214:	460b      	mov	r3, r1
 800e216:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e21a:	f7f2 faef 	bl	80007fc <__aeabi_ddiv>
 800e21e:	4632      	mov	r2, r6
 800e220:	4604      	mov	r4, r0
 800e222:	460d      	mov	r5, r1
 800e224:	463b      	mov	r3, r7
 800e226:	4640      	mov	r0, r8
 800e228:	4649      	mov	r1, r9
 800e22a:	f7f2 f9bd 	bl	80005a8 <__aeabi_dmul>
 800e22e:	4632      	mov	r2, r6
 800e230:	463b      	mov	r3, r7
 800e232:	f7f2 f803 	bl	800023c <__adddf3>
 800e236:	4602      	mov	r2, r0
 800e238:	460b      	mov	r3, r1
 800e23a:	4620      	mov	r0, r4
 800e23c:	4629      	mov	r1, r5
 800e23e:	f7f1 fffb 	bl	8000238 <__aeabi_dsub>
 800e242:	4642      	mov	r2, r8
 800e244:	464b      	mov	r3, r9
 800e246:	f7f1 fff7 	bl	8000238 <__aeabi_dsub>
 800e24a:	4602      	mov	r2, r0
 800e24c:	460b      	mov	r3, r1
 800e24e:	2000      	movs	r0, #0
 800e250:	4939      	ldr	r1, [pc, #228]	; (800e338 <__ieee754_pow+0xa20>)
 800e252:	f7f1 fff1 	bl	8000238 <__aeabi_dsub>
 800e256:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800e25a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800e25e:	da29      	bge.n	800e2b4 <__ieee754_pow+0x99c>
 800e260:	4652      	mov	r2, sl
 800e262:	f000 f955 	bl	800e510 <scalbn>
 800e266:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e26a:	f7ff bbfe 	b.w	800da6a <__ieee754_pow+0x152>
 800e26e:	4b33      	ldr	r3, [pc, #204]	; (800e33c <__ieee754_pow+0xa24>)
 800e270:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800e274:	429f      	cmp	r7, r3
 800e276:	f77f af13 	ble.w	800e0a0 <__ieee754_pow+0x788>
 800e27a:	4b31      	ldr	r3, [pc, #196]	; (800e340 <__ieee754_pow+0xa28>)
 800e27c:	440b      	add	r3, r1
 800e27e:	4303      	orrs	r3, r0
 800e280:	d009      	beq.n	800e296 <__ieee754_pow+0x97e>
 800e282:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e286:	2200      	movs	r2, #0
 800e288:	2300      	movs	r3, #0
 800e28a:	f7f2 fbff 	bl	8000a8c <__aeabi_dcmplt>
 800e28e:	3800      	subs	r0, #0
 800e290:	bf18      	it	ne
 800e292:	2001      	movne	r0, #1
 800e294:	e453      	b.n	800db3e <__ieee754_pow+0x226>
 800e296:	4622      	mov	r2, r4
 800e298:	462b      	mov	r3, r5
 800e29a:	f7f1 ffcd 	bl	8000238 <__aeabi_dsub>
 800e29e:	4642      	mov	r2, r8
 800e2a0:	464b      	mov	r3, r9
 800e2a2:	f7f2 fc07 	bl	8000ab4 <__aeabi_dcmpge>
 800e2a6:	2800      	cmp	r0, #0
 800e2a8:	f43f aefa 	beq.w	800e0a0 <__ieee754_pow+0x788>
 800e2ac:	e7e9      	b.n	800e282 <__ieee754_pow+0x96a>
 800e2ae:	f04f 0a00 	mov.w	sl, #0
 800e2b2:	e720      	b.n	800e0f6 <__ieee754_pow+0x7de>
 800e2b4:	4621      	mov	r1, r4
 800e2b6:	e7d6      	b.n	800e266 <__ieee754_pow+0x94e>
 800e2b8:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e338 <__ieee754_pow+0xa20>
 800e2bc:	f04f 0b00 	mov.w	fp, #0
 800e2c0:	f7ff bbba 	b.w	800da38 <__ieee754_pow+0x120>
 800e2c4:	f04f 0b00 	mov.w	fp, #0
 800e2c8:	f04f 0c00 	mov.w	ip, #0
 800e2cc:	f7ff bbb4 	b.w	800da38 <__ieee754_pow+0x120>
 800e2d0:	4640      	mov	r0, r8
 800e2d2:	4649      	mov	r1, r9
 800e2d4:	f7ff bb3d 	b.w	800d952 <__ieee754_pow+0x3a>
 800e2d8:	9200      	str	r2, [sp, #0]
 800e2da:	f7ff bb89 	b.w	800d9f0 <__ieee754_pow+0xd8>
 800e2de:	2300      	movs	r3, #0
 800e2e0:	f7ff bb73 	b.w	800d9ca <__ieee754_pow+0xb2>
 800e2e4:	f3af 8000 	nop.w
 800e2e8:	652b82fe 	.word	0x652b82fe
 800e2ec:	3c971547 	.word	0x3c971547
 800e2f0:	00000000 	.word	0x00000000
 800e2f4:	3fe62e43 	.word	0x3fe62e43
 800e2f8:	fefa39ef 	.word	0xfefa39ef
 800e2fc:	3fe62e42 	.word	0x3fe62e42
 800e300:	0ca86c39 	.word	0x0ca86c39
 800e304:	be205c61 	.word	0xbe205c61
 800e308:	72bea4d0 	.word	0x72bea4d0
 800e30c:	3e663769 	.word	0x3e663769
 800e310:	c5d26bf1 	.word	0xc5d26bf1
 800e314:	3ebbbd41 	.word	0x3ebbbd41
 800e318:	af25de2c 	.word	0xaf25de2c
 800e31c:	3f11566a 	.word	0x3f11566a
 800e320:	16bebd93 	.word	0x16bebd93
 800e324:	3f66c16c 	.word	0x3f66c16c
 800e328:	5555553e 	.word	0x5555553e
 800e32c:	3fc55555 	.word	0x3fc55555
 800e330:	3fe00000 	.word	0x3fe00000
 800e334:	000fffff 	.word	0x000fffff
 800e338:	3ff00000 	.word	0x3ff00000
 800e33c:	4090cbff 	.word	0x4090cbff
 800e340:	3f6f3400 	.word	0x3f6f3400

0800e344 <__ieee754_sqrt>:
 800e344:	f8df c154 	ldr.w	ip, [pc, #340]	; 800e49c <__ieee754_sqrt+0x158>
 800e348:	ea3c 0c01 	bics.w	ip, ip, r1
 800e34c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e350:	460a      	mov	r2, r1
 800e352:	4606      	mov	r6, r0
 800e354:	460d      	mov	r5, r1
 800e356:	460c      	mov	r4, r1
 800e358:	4607      	mov	r7, r0
 800e35a:	4603      	mov	r3, r0
 800e35c:	d10f      	bne.n	800e37e <__ieee754_sqrt+0x3a>
 800e35e:	4602      	mov	r2, r0
 800e360:	460b      	mov	r3, r1
 800e362:	f7f2 f921 	bl	80005a8 <__aeabi_dmul>
 800e366:	4602      	mov	r2, r0
 800e368:	460b      	mov	r3, r1
 800e36a:	4630      	mov	r0, r6
 800e36c:	4629      	mov	r1, r5
 800e36e:	f7f1 ff65 	bl	800023c <__adddf3>
 800e372:	4606      	mov	r6, r0
 800e374:	460d      	mov	r5, r1
 800e376:	4630      	mov	r0, r6
 800e378:	4629      	mov	r1, r5
 800e37a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e37e:	2900      	cmp	r1, #0
 800e380:	dc0e      	bgt.n	800e3a0 <__ieee754_sqrt+0x5c>
 800e382:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800e386:	ea5c 0707 	orrs.w	r7, ip, r7
 800e38a:	d0f4      	beq.n	800e376 <__ieee754_sqrt+0x32>
 800e38c:	b141      	cbz	r1, 800e3a0 <__ieee754_sqrt+0x5c>
 800e38e:	4602      	mov	r2, r0
 800e390:	460b      	mov	r3, r1
 800e392:	f7f1 ff51 	bl	8000238 <__aeabi_dsub>
 800e396:	4602      	mov	r2, r0
 800e398:	460b      	mov	r3, r1
 800e39a:	f7f2 fa2f 	bl	80007fc <__aeabi_ddiv>
 800e39e:	e7e8      	b.n	800e372 <__ieee754_sqrt+0x2e>
 800e3a0:	1521      	asrs	r1, r4, #20
 800e3a2:	d074      	beq.n	800e48e <__ieee754_sqrt+0x14a>
 800e3a4:	07cc      	lsls	r4, r1, #31
 800e3a6:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800e3aa:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800e3ae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800e3b2:	bf5e      	ittt	pl
 800e3b4:	0fd9      	lsrpl	r1, r3, #31
 800e3b6:	005b      	lslpl	r3, r3, #1
 800e3b8:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800e3bc:	2400      	movs	r4, #0
 800e3be:	0fd9      	lsrs	r1, r3, #31
 800e3c0:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800e3c4:	107f      	asrs	r7, r7, #1
 800e3c6:	005b      	lsls	r3, r3, #1
 800e3c8:	2516      	movs	r5, #22
 800e3ca:	4620      	mov	r0, r4
 800e3cc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e3d0:	1846      	adds	r6, r0, r1
 800e3d2:	4296      	cmp	r6, r2
 800e3d4:	bfde      	ittt	le
 800e3d6:	1b92      	suble	r2, r2, r6
 800e3d8:	1870      	addle	r0, r6, r1
 800e3da:	1864      	addle	r4, r4, r1
 800e3dc:	0052      	lsls	r2, r2, #1
 800e3de:	3d01      	subs	r5, #1
 800e3e0:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800e3e4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e3e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e3ec:	d1f0      	bne.n	800e3d0 <__ieee754_sqrt+0x8c>
 800e3ee:	4629      	mov	r1, r5
 800e3f0:	f04f 0e20 	mov.w	lr, #32
 800e3f4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800e3f8:	4282      	cmp	r2, r0
 800e3fa:	eb06 0c05 	add.w	ip, r6, r5
 800e3fe:	dc02      	bgt.n	800e406 <__ieee754_sqrt+0xc2>
 800e400:	d113      	bne.n	800e42a <__ieee754_sqrt+0xe6>
 800e402:	459c      	cmp	ip, r3
 800e404:	d811      	bhi.n	800e42a <__ieee754_sqrt+0xe6>
 800e406:	f1bc 0f00 	cmp.w	ip, #0
 800e40a:	eb0c 0506 	add.w	r5, ip, r6
 800e40e:	da43      	bge.n	800e498 <__ieee754_sqrt+0x154>
 800e410:	2d00      	cmp	r5, #0
 800e412:	db41      	blt.n	800e498 <__ieee754_sqrt+0x154>
 800e414:	f100 0801 	add.w	r8, r0, #1
 800e418:	1a12      	subs	r2, r2, r0
 800e41a:	459c      	cmp	ip, r3
 800e41c:	bf88      	it	hi
 800e41e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800e422:	eba3 030c 	sub.w	r3, r3, ip
 800e426:	4431      	add	r1, r6
 800e428:	4640      	mov	r0, r8
 800e42a:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800e42e:	f1be 0e01 	subs.w	lr, lr, #1
 800e432:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800e436:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e43a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e43e:	d1db      	bne.n	800e3f8 <__ieee754_sqrt+0xb4>
 800e440:	4313      	orrs	r3, r2
 800e442:	d006      	beq.n	800e452 <__ieee754_sqrt+0x10e>
 800e444:	1c48      	adds	r0, r1, #1
 800e446:	bf13      	iteet	ne
 800e448:	3101      	addne	r1, #1
 800e44a:	3401      	addeq	r4, #1
 800e44c:	4671      	moveq	r1, lr
 800e44e:	f021 0101 	bicne.w	r1, r1, #1
 800e452:	1063      	asrs	r3, r4, #1
 800e454:	0849      	lsrs	r1, r1, #1
 800e456:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e45a:	07e2      	lsls	r2, r4, #31
 800e45c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e460:	bf48      	it	mi
 800e462:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800e466:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800e46a:	460e      	mov	r6, r1
 800e46c:	e783      	b.n	800e376 <__ieee754_sqrt+0x32>
 800e46e:	0ada      	lsrs	r2, r3, #11
 800e470:	3815      	subs	r0, #21
 800e472:	055b      	lsls	r3, r3, #21
 800e474:	2a00      	cmp	r2, #0
 800e476:	d0fa      	beq.n	800e46e <__ieee754_sqrt+0x12a>
 800e478:	02d5      	lsls	r5, r2, #11
 800e47a:	d50a      	bpl.n	800e492 <__ieee754_sqrt+0x14e>
 800e47c:	f1c1 0420 	rsb	r4, r1, #32
 800e480:	fa23 f404 	lsr.w	r4, r3, r4
 800e484:	1e4d      	subs	r5, r1, #1
 800e486:	408b      	lsls	r3, r1
 800e488:	4322      	orrs	r2, r4
 800e48a:	1b41      	subs	r1, r0, r5
 800e48c:	e78a      	b.n	800e3a4 <__ieee754_sqrt+0x60>
 800e48e:	4608      	mov	r0, r1
 800e490:	e7f0      	b.n	800e474 <__ieee754_sqrt+0x130>
 800e492:	0052      	lsls	r2, r2, #1
 800e494:	3101      	adds	r1, #1
 800e496:	e7ef      	b.n	800e478 <__ieee754_sqrt+0x134>
 800e498:	4680      	mov	r8, r0
 800e49a:	e7bd      	b.n	800e418 <__ieee754_sqrt+0xd4>
 800e49c:	7ff00000 	.word	0x7ff00000

0800e4a0 <with_errno>:
 800e4a0:	b570      	push	{r4, r5, r6, lr}
 800e4a2:	4604      	mov	r4, r0
 800e4a4:	460d      	mov	r5, r1
 800e4a6:	4616      	mov	r6, r2
 800e4a8:	f7fd ff5e 	bl	800c368 <__errno>
 800e4ac:	4629      	mov	r1, r5
 800e4ae:	6006      	str	r6, [r0, #0]
 800e4b0:	4620      	mov	r0, r4
 800e4b2:	bd70      	pop	{r4, r5, r6, pc}

0800e4b4 <xflow>:
 800e4b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e4b6:	4615      	mov	r5, r2
 800e4b8:	461c      	mov	r4, r3
 800e4ba:	b180      	cbz	r0, 800e4de <xflow+0x2a>
 800e4bc:	4610      	mov	r0, r2
 800e4be:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e4c2:	e9cd 0100 	strd	r0, r1, [sp]
 800e4c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e4ca:	4628      	mov	r0, r5
 800e4cc:	4621      	mov	r1, r4
 800e4ce:	f7f2 f86b 	bl	80005a8 <__aeabi_dmul>
 800e4d2:	2222      	movs	r2, #34	; 0x22
 800e4d4:	b003      	add	sp, #12
 800e4d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e4da:	f7ff bfe1 	b.w	800e4a0 <with_errno>
 800e4de:	4610      	mov	r0, r2
 800e4e0:	4619      	mov	r1, r3
 800e4e2:	e7ee      	b.n	800e4c2 <xflow+0xe>

0800e4e4 <__math_uflow>:
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e4ea:	f7ff bfe3 	b.w	800e4b4 <xflow>

0800e4ee <__math_oflow>:
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800e4f4:	f7ff bfde 	b.w	800e4b4 <xflow>

0800e4f8 <fabs>:
 800e4f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e4fc:	4770      	bx	lr

0800e4fe <finite>:
 800e4fe:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800e502:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e506:	0fc0      	lsrs	r0, r0, #31
 800e508:	4770      	bx	lr
 800e50a:	0000      	movs	r0, r0
 800e50c:	0000      	movs	r0, r0
	...

0800e510 <scalbn>:
 800e510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e512:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800e516:	4604      	mov	r4, r0
 800e518:	460d      	mov	r5, r1
 800e51a:	4617      	mov	r7, r2
 800e51c:	460b      	mov	r3, r1
 800e51e:	b996      	cbnz	r6, 800e546 <scalbn+0x36>
 800e520:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e524:	4303      	orrs	r3, r0
 800e526:	d039      	beq.n	800e59c <scalbn+0x8c>
 800e528:	4b33      	ldr	r3, [pc, #204]	; (800e5f8 <scalbn+0xe8>)
 800e52a:	2200      	movs	r2, #0
 800e52c:	f7f2 f83c 	bl	80005a8 <__aeabi_dmul>
 800e530:	4b32      	ldr	r3, [pc, #200]	; (800e5fc <scalbn+0xec>)
 800e532:	429f      	cmp	r7, r3
 800e534:	4604      	mov	r4, r0
 800e536:	460d      	mov	r5, r1
 800e538:	da0f      	bge.n	800e55a <scalbn+0x4a>
 800e53a:	a32b      	add	r3, pc, #172	; (adr r3, 800e5e8 <scalbn+0xd8>)
 800e53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e540:	f7f2 f832 	bl	80005a8 <__aeabi_dmul>
 800e544:	e006      	b.n	800e554 <scalbn+0x44>
 800e546:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e54a:	4296      	cmp	r6, r2
 800e54c:	d10a      	bne.n	800e564 <scalbn+0x54>
 800e54e:	4602      	mov	r2, r0
 800e550:	f7f1 fe74 	bl	800023c <__adddf3>
 800e554:	4604      	mov	r4, r0
 800e556:	460d      	mov	r5, r1
 800e558:	e020      	b.n	800e59c <scalbn+0x8c>
 800e55a:	460b      	mov	r3, r1
 800e55c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e560:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800e564:	19b9      	adds	r1, r7, r6
 800e566:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800e56a:	4291      	cmp	r1, r2
 800e56c:	dd0e      	ble.n	800e58c <scalbn+0x7c>
 800e56e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800e572:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800e576:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800e57a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800e57e:	a31c      	add	r3, pc, #112	; (adr r3, 800e5f0 <scalbn+0xe0>)
 800e580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e584:	481e      	ldr	r0, [pc, #120]	; (800e600 <scalbn+0xf0>)
 800e586:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800e58a:	e7d9      	b.n	800e540 <scalbn+0x30>
 800e58c:	2900      	cmp	r1, #0
 800e58e:	dd08      	ble.n	800e5a2 <scalbn+0x92>
 800e590:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e594:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e598:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800e59c:	4620      	mov	r0, r4
 800e59e:	4629      	mov	r1, r5
 800e5a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5a2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800e5a6:	da12      	bge.n	800e5ce <scalbn+0xbe>
 800e5a8:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e5ac:	429f      	cmp	r7, r3
 800e5ae:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800e5b2:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800e5b6:	dcdc      	bgt.n	800e572 <scalbn+0x62>
 800e5b8:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800e5bc:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800e5c0:	a309      	add	r3, pc, #36	; (adr r3, 800e5e8 <scalbn+0xd8>)
 800e5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5c6:	480f      	ldr	r0, [pc, #60]	; (800e604 <scalbn+0xf4>)
 800e5c8:	f041 011f 	orr.w	r1, r1, #31
 800e5cc:	e7b8      	b.n	800e540 <scalbn+0x30>
 800e5ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e5d2:	3136      	adds	r1, #54	; 0x36
 800e5d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e5d8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800e5dc:	4620      	mov	r0, r4
 800e5de:	4b0a      	ldr	r3, [pc, #40]	; (800e608 <scalbn+0xf8>)
 800e5e0:	4629      	mov	r1, r5
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	e7ac      	b.n	800e540 <scalbn+0x30>
 800e5e6:	bf00      	nop
 800e5e8:	c2f8f359 	.word	0xc2f8f359
 800e5ec:	01a56e1f 	.word	0x01a56e1f
 800e5f0:	8800759c 	.word	0x8800759c
 800e5f4:	7e37e43c 	.word	0x7e37e43c
 800e5f8:	43500000 	.word	0x43500000
 800e5fc:	ffff3cb0 	.word	0xffff3cb0
 800e600:	8800759c 	.word	0x8800759c
 800e604:	c2f8f359 	.word	0xc2f8f359
 800e608:	3c900000 	.word	0x3c900000

0800e60c <_init>:
 800e60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e60e:	bf00      	nop
 800e610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e612:	bc08      	pop	{r3}
 800e614:	469e      	mov	lr, r3
 800e616:	4770      	bx	lr

0800e618 <_fini>:
 800e618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e61a:	bf00      	nop
 800e61c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e61e:	bc08      	pop	{r3}
 800e620:	469e      	mov	lr, r3
 800e622:	4770      	bx	lr
