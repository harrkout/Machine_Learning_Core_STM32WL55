
SHUBv3_MLC_DataLogFusion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a3f8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000618  0801a538  0801a538  0002a538  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ab50  0801ab50  00030104  2**0
                  CONTENTS
  4 .ARM          00000008  0801ab50  0801ab50  0002ab50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ab58  0801ab58  00030104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ab58  0801ab58  0002ab58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ab5c  0801ab5c  0002ab5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  0801ab60  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001db0  20000108  0801ac64  00030108  2**3
                  ALLOC
 10 ._user_heap_stack 00000a00  20001eb8  0801ac64  00031eb8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00030104  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003a8fd  00000000  00000000  0003012e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000052f9  00000000  00000000  0006aa2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002f48  00000000  00000000  0006fd28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002d48  00000000  00000000  00072c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022de2  00000000  00000000  000759b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d523  00000000  00000000  0009879a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3b51  00000000  00000000  000c5cbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000a3  00000000  00000000  0019980e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d7b4  00000000  00000000  001998b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000108 	.word	0x20000108
 800015c:	00000000 	.word	0x00000000
 8000160:	0801a520 	.word	0x0801a520

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000010c 	.word	0x2000010c
 800017c:	0801a520 	.word	0x0801a520

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpun>:
 8000acc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x10>
 8000ad6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ada:	d10a      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000adc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x20>
 8000ae6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0001 	mov.w	r0, #1
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_frsub>:
 8000b98:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b9c:	e002      	b.n	8000ba4 <__addsf3>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_fsub>:
 8000ba0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ba4 <__addsf3>:
 8000ba4:	0042      	lsls	r2, r0, #1
 8000ba6:	bf1f      	itttt	ne
 8000ba8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bac:	ea92 0f03 	teqne	r2, r3
 8000bb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb8:	d06a      	beq.n	8000c90 <__addsf3+0xec>
 8000bba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bc2:	bfc1      	itttt	gt
 8000bc4:	18d2      	addgt	r2, r2, r3
 8000bc6:	4041      	eorgt	r1, r0
 8000bc8:	4048      	eorgt	r0, r1
 8000bca:	4041      	eorgt	r1, r0
 8000bcc:	bfb8      	it	lt
 8000bce:	425b      	neglt	r3, r3
 8000bd0:	2b19      	cmp	r3, #25
 8000bd2:	bf88      	it	hi
 8000bd4:	4770      	bxhi	lr
 8000bd6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4249      	negne	r1, r1
 8000bf6:	ea92 0f03 	teq	r2, r3
 8000bfa:	d03f      	beq.n	8000c7c <__addsf3+0xd8>
 8000bfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000c00:	fa41 fc03 	asr.w	ip, r1, r3
 8000c04:	eb10 000c 	adds.w	r0, r0, ip
 8000c08:	f1c3 0320 	rsb	r3, r3, #32
 8000c0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c14:	d502      	bpl.n	8000c1c <__addsf3+0x78>
 8000c16:	4249      	negs	r1, r1
 8000c18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c20:	d313      	bcc.n	8000c4a <__addsf3+0xa6>
 8000c22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c26:	d306      	bcc.n	8000c36 <__addsf3+0x92>
 8000c28:	0840      	lsrs	r0, r0, #1
 8000c2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c2e:	f102 0201 	add.w	r2, r2, #1
 8000c32:	2afe      	cmp	r2, #254	; 0xfe
 8000c34:	d251      	bcs.n	8000cda <__addsf3+0x136>
 8000c36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c3e:	bf08      	it	eq
 8000c40:	f020 0001 	biceq.w	r0, r0, #1
 8000c44:	ea40 0003 	orr.w	r0, r0, r3
 8000c48:	4770      	bx	lr
 8000c4a:	0049      	lsls	r1, r1, #1
 8000c4c:	eb40 0000 	adc.w	r0, r0, r0
 8000c50:	3a01      	subs	r2, #1
 8000c52:	bf28      	it	cs
 8000c54:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c58:	d2ed      	bcs.n	8000c36 <__addsf3+0x92>
 8000c5a:	fab0 fc80 	clz	ip, r0
 8000c5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c62:	ebb2 020c 	subs.w	r2, r2, ip
 8000c66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c6a:	bfaa      	itet	ge
 8000c6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c70:	4252      	neglt	r2, r2
 8000c72:	4318      	orrge	r0, r3
 8000c74:	bfbc      	itt	lt
 8000c76:	40d0      	lsrlt	r0, r2
 8000c78:	4318      	orrlt	r0, r3
 8000c7a:	4770      	bx	lr
 8000c7c:	f092 0f00 	teq	r2, #0
 8000c80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c84:	bf06      	itte	eq
 8000c86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c8a:	3201      	addeq	r2, #1
 8000c8c:	3b01      	subne	r3, #1
 8000c8e:	e7b5      	b.n	8000bfc <__addsf3+0x58>
 8000c90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c98:	bf18      	it	ne
 8000c9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c9e:	d021      	beq.n	8000ce4 <__addsf3+0x140>
 8000ca0:	ea92 0f03 	teq	r2, r3
 8000ca4:	d004      	beq.n	8000cb0 <__addsf3+0x10c>
 8000ca6:	f092 0f00 	teq	r2, #0
 8000caa:	bf08      	it	eq
 8000cac:	4608      	moveq	r0, r1
 8000cae:	4770      	bx	lr
 8000cb0:	ea90 0f01 	teq	r0, r1
 8000cb4:	bf1c      	itt	ne
 8000cb6:	2000      	movne	r0, #0
 8000cb8:	4770      	bxne	lr
 8000cba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cbe:	d104      	bne.n	8000cca <__addsf3+0x126>
 8000cc0:	0040      	lsls	r0, r0, #1
 8000cc2:	bf28      	it	cs
 8000cc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cc8:	4770      	bx	lr
 8000cca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cce:	bf3c      	itt	cc
 8000cd0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bxcc	lr
 8000cd6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cda:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce2:	4770      	bx	lr
 8000ce4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce8:	bf16      	itet	ne
 8000cea:	4608      	movne	r0, r1
 8000cec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf0:	4601      	movne	r1, r0
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	bf06      	itte	eq
 8000cf6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cfa:	ea90 0f01 	teqeq	r0, r1
 8000cfe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d02:	4770      	bx	lr

08000d04 <__aeabi_ui2f>:
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e004      	b.n	8000d14 <__aeabi_i2f+0x8>
 8000d0a:	bf00      	nop

08000d0c <__aeabi_i2f>:
 8000d0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d10:	bf48      	it	mi
 8000d12:	4240      	negmi	r0, r0
 8000d14:	ea5f 0c00 	movs.w	ip, r0
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d20:	4601      	mov	r1, r0
 8000d22:	f04f 0000 	mov.w	r0, #0
 8000d26:	e01c      	b.n	8000d62 <__aeabi_l2f+0x2a>

08000d28 <__aeabi_ul2f>:
 8000d28:	ea50 0201 	orrs.w	r2, r0, r1
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e00a      	b.n	8000d4c <__aeabi_l2f+0x14>
 8000d36:	bf00      	nop

08000d38 <__aeabi_l2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__aeabi_l2f+0x14>
 8000d46:	4240      	negs	r0, r0
 8000d48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4c:	ea5f 0c01 	movs.w	ip, r1
 8000d50:	bf02      	ittt	eq
 8000d52:	4684      	moveq	ip, r0
 8000d54:	4601      	moveq	r1, r0
 8000d56:	2000      	moveq	r0, #0
 8000d58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d5c:	bf08      	it	eq
 8000d5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d66:	fabc f28c 	clz	r2, ip
 8000d6a:	3a08      	subs	r2, #8
 8000d6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d70:	db10      	blt.n	8000d94 <__aeabi_l2f+0x5c>
 8000d72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d76:	4463      	add	r3, ip
 8000d78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d7c:	f1c2 0220 	rsb	r2, r2, #32
 8000d80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d84:	fa20 f202 	lsr.w	r2, r0, r2
 8000d88:	eb43 0002 	adc.w	r0, r3, r2
 8000d8c:	bf08      	it	eq
 8000d8e:	f020 0001 	biceq.w	r0, r0, #1
 8000d92:	4770      	bx	lr
 8000d94:	f102 0220 	add.w	r2, r2, #32
 8000d98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d9c:	f1c2 0220 	rsb	r2, r2, #32
 8000da0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000da4:	fa21 f202 	lsr.w	r2, r1, r2
 8000da8:	eb43 0002 	adc.w	r0, r3, r2
 8000dac:	bf08      	it	eq
 8000dae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_fmul>:
 8000db4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000db8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dbc:	bf1e      	ittt	ne
 8000dbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dc2:	ea92 0f0c 	teqne	r2, ip
 8000dc6:	ea93 0f0c 	teqne	r3, ip
 8000dca:	d06f      	beq.n	8000eac <__aeabi_fmul+0xf8>
 8000dcc:	441a      	add	r2, r3
 8000dce:	ea80 0c01 	eor.w	ip, r0, r1
 8000dd2:	0240      	lsls	r0, r0, #9
 8000dd4:	bf18      	it	ne
 8000dd6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dda:	d01e      	beq.n	8000e1a <__aeabi_fmul+0x66>
 8000ddc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000de4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000de8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000df4:	bf3e      	ittt	cc
 8000df6:	0049      	lslcc	r1, r1, #1
 8000df8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dfc:	005b      	lslcc	r3, r3, #1
 8000dfe:	ea40 0001 	orr.w	r0, r0, r1
 8000e02:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e06:	2afd      	cmp	r2, #253	; 0xfd
 8000e08:	d81d      	bhi.n	8000e46 <__aeabi_fmul+0x92>
 8000e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e12:	bf08      	it	eq
 8000e14:	f020 0001 	biceq.w	r0, r0, #1
 8000e18:	4770      	bx	lr
 8000e1a:	f090 0f00 	teq	r0, #0
 8000e1e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e22:	bf08      	it	eq
 8000e24:	0249      	lsleq	r1, r1, #9
 8000e26:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e2a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e2e:	3a7f      	subs	r2, #127	; 0x7f
 8000e30:	bfc2      	ittt	gt
 8000e32:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e36:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e3a:	4770      	bxgt	lr
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	3a01      	subs	r2, #1
 8000e46:	dc5d      	bgt.n	8000f04 <__aeabi_fmul+0x150>
 8000e48:	f112 0f19 	cmn.w	r2, #25
 8000e4c:	bfdc      	itt	le
 8000e4e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e52:	4770      	bxle	lr
 8000e54:	f1c2 0200 	rsb	r2, r2, #0
 8000e58:	0041      	lsls	r1, r0, #1
 8000e5a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e5e:	f1c2 0220 	rsb	r2, r2, #32
 8000e62:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e66:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e6a:	f140 0000 	adc.w	r0, r0, #0
 8000e6e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e72:	bf08      	it	eq
 8000e74:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e78:	4770      	bx	lr
 8000e7a:	f092 0f00 	teq	r2, #0
 8000e7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e82:	bf02      	ittt	eq
 8000e84:	0040      	lsleq	r0, r0, #1
 8000e86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e8a:	3a01      	subeq	r2, #1
 8000e8c:	d0f9      	beq.n	8000e82 <__aeabi_fmul+0xce>
 8000e8e:	ea40 000c 	orr.w	r0, r0, ip
 8000e92:	f093 0f00 	teq	r3, #0
 8000e96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e9a:	bf02      	ittt	eq
 8000e9c:	0049      	lsleq	r1, r1, #1
 8000e9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ea2:	3b01      	subeq	r3, #1
 8000ea4:	d0f9      	beq.n	8000e9a <__aeabi_fmul+0xe6>
 8000ea6:	ea41 010c 	orr.w	r1, r1, ip
 8000eaa:	e78f      	b.n	8000dcc <__aeabi_fmul+0x18>
 8000eac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	bf18      	it	ne
 8000eb6:	ea93 0f0c 	teqne	r3, ip
 8000eba:	d00a      	beq.n	8000ed2 <__aeabi_fmul+0x11e>
 8000ebc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec0:	bf18      	it	ne
 8000ec2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ec6:	d1d8      	bne.n	8000e7a <__aeabi_fmul+0xc6>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	4770      	bx	lr
 8000ed2:	f090 0f00 	teq	r0, #0
 8000ed6:	bf17      	itett	ne
 8000ed8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000edc:	4608      	moveq	r0, r1
 8000ede:	f091 0f00 	teqne	r1, #0
 8000ee2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ee6:	d014      	beq.n	8000f12 <__aeabi_fmul+0x15e>
 8000ee8:	ea92 0f0c 	teq	r2, ip
 8000eec:	d101      	bne.n	8000ef2 <__aeabi_fmul+0x13e>
 8000eee:	0242      	lsls	r2, r0, #9
 8000ef0:	d10f      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000ef2:	ea93 0f0c 	teq	r3, ip
 8000ef6:	d103      	bne.n	8000f00 <__aeabi_fmul+0x14c>
 8000ef8:	024b      	lsls	r3, r1, #9
 8000efa:	bf18      	it	ne
 8000efc:	4608      	movne	r0, r1
 8000efe:	d108      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000f00:	ea80 0001 	eor.w	r0, r0, r1
 8000f04:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f10:	4770      	bx	lr
 8000f12:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f16:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f1a:	4770      	bx	lr

08000f1c <__aeabi_fdiv>:
 8000f1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f24:	bf1e      	ittt	ne
 8000f26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f2a:	ea92 0f0c 	teqne	r2, ip
 8000f2e:	ea93 0f0c 	teqne	r3, ip
 8000f32:	d069      	beq.n	8001008 <__aeabi_fdiv+0xec>
 8000f34:	eba2 0203 	sub.w	r2, r2, r3
 8000f38:	ea80 0c01 	eor.w	ip, r0, r1
 8000f3c:	0249      	lsls	r1, r1, #9
 8000f3e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f42:	d037      	beq.n	8000fb4 <__aeabi_fdiv+0x98>
 8000f44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f48:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f4c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f54:	428b      	cmp	r3, r1
 8000f56:	bf38      	it	cc
 8000f58:	005b      	lslcc	r3, r3, #1
 8000f5a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f5e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f62:	428b      	cmp	r3, r1
 8000f64:	bf24      	itt	cs
 8000f66:	1a5b      	subcs	r3, r3, r1
 8000f68:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f6c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f76:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f7a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f7e:	bf24      	itt	cs
 8000f80:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f88:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f8c:	bf24      	itt	cs
 8000f8e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f92:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	bf18      	it	ne
 8000f9a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f9e:	d1e0      	bne.n	8000f62 <__aeabi_fdiv+0x46>
 8000fa0:	2afd      	cmp	r2, #253	; 0xfd
 8000fa2:	f63f af50 	bhi.w	8000e46 <__aeabi_fmul+0x92>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fac:	bf08      	it	eq
 8000fae:	f020 0001 	biceq.w	r0, r0, #1
 8000fb2:	4770      	bx	lr
 8000fb4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fb8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fbc:	327f      	adds	r2, #127	; 0x7f
 8000fbe:	bfc2      	ittt	gt
 8000fc0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fc4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fc8:	4770      	bxgt	lr
 8000fca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	3a01      	subs	r2, #1
 8000fd4:	e737      	b.n	8000e46 <__aeabi_fmul+0x92>
 8000fd6:	f092 0f00 	teq	r2, #0
 8000fda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fde:	bf02      	ittt	eq
 8000fe0:	0040      	lsleq	r0, r0, #1
 8000fe2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fe6:	3a01      	subeq	r2, #1
 8000fe8:	d0f9      	beq.n	8000fde <__aeabi_fdiv+0xc2>
 8000fea:	ea40 000c 	orr.w	r0, r0, ip
 8000fee:	f093 0f00 	teq	r3, #0
 8000ff2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ff6:	bf02      	ittt	eq
 8000ff8:	0049      	lsleq	r1, r1, #1
 8000ffa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ffe:	3b01      	subeq	r3, #1
 8001000:	d0f9      	beq.n	8000ff6 <__aeabi_fdiv+0xda>
 8001002:	ea41 010c 	orr.w	r1, r1, ip
 8001006:	e795      	b.n	8000f34 <__aeabi_fdiv+0x18>
 8001008:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800100c:	ea92 0f0c 	teq	r2, ip
 8001010:	d108      	bne.n	8001024 <__aeabi_fdiv+0x108>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	f47f af7d 	bne.w	8000f12 <__aeabi_fmul+0x15e>
 8001018:	ea93 0f0c 	teq	r3, ip
 800101c:	f47f af70 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001020:	4608      	mov	r0, r1
 8001022:	e776      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001024:	ea93 0f0c 	teq	r3, ip
 8001028:	d104      	bne.n	8001034 <__aeabi_fdiv+0x118>
 800102a:	024b      	lsls	r3, r1, #9
 800102c:	f43f af4c 	beq.w	8000ec8 <__aeabi_fmul+0x114>
 8001030:	4608      	mov	r0, r1
 8001032:	e76e      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001034:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001038:	bf18      	it	ne
 800103a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800103e:	d1ca      	bne.n	8000fd6 <__aeabi_fdiv+0xba>
 8001040:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001044:	f47f af5c 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001048:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800104c:	f47f af3c 	bne.w	8000ec8 <__aeabi_fmul+0x114>
 8001050:	e75f      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001052:	bf00      	nop

08001054 <__gesf2>:
 8001054:	f04f 3cff 	mov.w	ip, #4294967295
 8001058:	e006      	b.n	8001068 <__cmpsf2+0x4>
 800105a:	bf00      	nop

0800105c <__lesf2>:
 800105c:	f04f 0c01 	mov.w	ip, #1
 8001060:	e002      	b.n	8001068 <__cmpsf2+0x4>
 8001062:	bf00      	nop

08001064 <__cmpsf2>:
 8001064:	f04f 0c01 	mov.w	ip, #1
 8001068:	f84d cd04 	str.w	ip, [sp, #-4]!
 800106c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001070:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	bf18      	it	ne
 800107a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800107e:	d011      	beq.n	80010a4 <__cmpsf2+0x40>
 8001080:	b001      	add	sp, #4
 8001082:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001086:	bf18      	it	ne
 8001088:	ea90 0f01 	teqne	r0, r1
 800108c:	bf58      	it	pl
 800108e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001092:	bf88      	it	hi
 8001094:	17c8      	asrhi	r0, r1, #31
 8001096:	bf38      	it	cc
 8001098:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800109c:	bf18      	it	ne
 800109e:	f040 0001 	orrne.w	r0, r0, #1
 80010a2:	4770      	bx	lr
 80010a4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010a8:	d102      	bne.n	80010b0 <__cmpsf2+0x4c>
 80010aa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010ae:	d105      	bne.n	80010bc <__cmpsf2+0x58>
 80010b0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010b4:	d1e4      	bne.n	8001080 <__cmpsf2+0x1c>
 80010b6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ba:	d0e1      	beq.n	8001080 <__cmpsf2+0x1c>
 80010bc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <__aeabi_cfrcmple>:
 80010c4:	4684      	mov	ip, r0
 80010c6:	4608      	mov	r0, r1
 80010c8:	4661      	mov	r1, ip
 80010ca:	e7ff      	b.n	80010cc <__aeabi_cfcmpeq>

080010cc <__aeabi_cfcmpeq>:
 80010cc:	b50f      	push	{r0, r1, r2, r3, lr}
 80010ce:	f7ff ffc9 	bl	8001064 <__cmpsf2>
 80010d2:	2800      	cmp	r0, #0
 80010d4:	bf48      	it	mi
 80010d6:	f110 0f00 	cmnmi.w	r0, #0
 80010da:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010dc <__aeabi_fcmpeq>:
 80010dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e0:	f7ff fff4 	bl	80010cc <__aeabi_cfcmpeq>
 80010e4:	bf0c      	ite	eq
 80010e6:	2001      	moveq	r0, #1
 80010e8:	2000      	movne	r0, #0
 80010ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ee:	bf00      	nop

080010f0 <__aeabi_fcmplt>:
 80010f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f4:	f7ff ffea 	bl	80010cc <__aeabi_cfcmpeq>
 80010f8:	bf34      	ite	cc
 80010fa:	2001      	movcc	r0, #1
 80010fc:	2000      	movcs	r0, #0
 80010fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8001102:	bf00      	nop

08001104 <__aeabi_fcmple>:
 8001104:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001108:	f7ff ffe0 	bl	80010cc <__aeabi_cfcmpeq>
 800110c:	bf94      	ite	ls
 800110e:	2001      	movls	r0, #1
 8001110:	2000      	movhi	r0, #0
 8001112:	f85d fb08 	ldr.w	pc, [sp], #8
 8001116:	bf00      	nop

08001118 <__aeabi_fcmpge>:
 8001118:	f84d ed08 	str.w	lr, [sp, #-8]!
 800111c:	f7ff ffd2 	bl	80010c4 <__aeabi_cfrcmple>
 8001120:	bf94      	ite	ls
 8001122:	2001      	movls	r0, #1
 8001124:	2000      	movhi	r0, #0
 8001126:	f85d fb08 	ldr.w	pc, [sp], #8
 800112a:	bf00      	nop

0800112c <__aeabi_fcmpgt>:
 800112c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001130:	f7ff ffc8 	bl	80010c4 <__aeabi_cfrcmple>
 8001134:	bf34      	ite	cc
 8001136:	2001      	movcc	r0, #1
 8001138:	2000      	movcs	r0, #0
 800113a:	f85d fb08 	ldr.w	pc, [sp], #8
 800113e:	bf00      	nop

08001140 <__aeabi_fcmpun>:
 8001140:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001144:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001148:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800114c:	d102      	bne.n	8001154 <__aeabi_fcmpun+0x14>
 800114e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001152:	d108      	bne.n	8001166 <__aeabi_fcmpun+0x26>
 8001154:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001158:	d102      	bne.n	8001160 <__aeabi_fcmpun+0x20>
 800115a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800115e:	d102      	bne.n	8001166 <__aeabi_fcmpun+0x26>
 8001160:	f04f 0000 	mov.w	r0, #0
 8001164:	4770      	bx	lr
 8001166:	f04f 0001 	mov.w	r0, #1
 800116a:	4770      	bx	lr

0800116c <__aeabi_f2iz>:
 800116c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001170:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001174:	d30f      	bcc.n	8001196 <__aeabi_f2iz+0x2a>
 8001176:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800117a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800117e:	d90d      	bls.n	800119c <__aeabi_f2iz+0x30>
 8001180:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001184:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001188:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800118c:	fa23 f002 	lsr.w	r0, r3, r2
 8001190:	bf18      	it	ne
 8001192:	4240      	negne	r0, r0
 8001194:	4770      	bx	lr
 8001196:	f04f 0000 	mov.w	r0, #0
 800119a:	4770      	bx	lr
 800119c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011a0:	d101      	bne.n	80011a6 <__aeabi_f2iz+0x3a>
 80011a2:	0242      	lsls	r2, r0, #9
 80011a4:	d105      	bne.n	80011b2 <__aeabi_f2iz+0x46>
 80011a6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80011aa:	bf08      	it	eq
 80011ac:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80011b0:	4770      	bx	lr
 80011b2:	f04f 0000 	mov.w	r0, #0
 80011b6:	4770      	bx	lr

080011b8 <__aeabi_f2uiz>:
 80011b8:	0042      	lsls	r2, r0, #1
 80011ba:	d20e      	bcs.n	80011da <__aeabi_f2uiz+0x22>
 80011bc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011c0:	d30b      	bcc.n	80011da <__aeabi_f2uiz+0x22>
 80011c2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011c6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011ca:	d409      	bmi.n	80011e0 <__aeabi_f2uiz+0x28>
 80011cc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011d4:	fa23 f002 	lsr.w	r0, r3, r2
 80011d8:	4770      	bx	lr
 80011da:	f04f 0000 	mov.w	r0, #0
 80011de:	4770      	bx	lr
 80011e0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011e4:	d101      	bne.n	80011ea <__aeabi_f2uiz+0x32>
 80011e6:	0242      	lsls	r2, r0, #9
 80011e8:	d102      	bne.n	80011f0 <__aeabi_f2uiz+0x38>
 80011ea:	f04f 30ff 	mov.w	r0, #4294967295
 80011ee:	4770      	bx	lr
 80011f0:	f04f 0000 	mov.w	r0, #0
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop

080011f8 <__aeabi_uldivmod>:
 80011f8:	b953      	cbnz	r3, 8001210 <__aeabi_uldivmod+0x18>
 80011fa:	b94a      	cbnz	r2, 8001210 <__aeabi_uldivmod+0x18>
 80011fc:	2900      	cmp	r1, #0
 80011fe:	bf08      	it	eq
 8001200:	2800      	cmpeq	r0, #0
 8001202:	bf1c      	itt	ne
 8001204:	f04f 31ff 	movne.w	r1, #4294967295
 8001208:	f04f 30ff 	movne.w	r0, #4294967295
 800120c:	f000 b974 	b.w	80014f8 <__aeabi_idiv0>
 8001210:	f1ad 0c08 	sub.w	ip, sp, #8
 8001214:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001218:	f000 f806 	bl	8001228 <__udivmoddi4>
 800121c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001220:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001224:	b004      	add	sp, #16
 8001226:	4770      	bx	lr

08001228 <__udivmoddi4>:
 8001228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800122c:	9e08      	ldr	r6, [sp, #32]
 800122e:	460d      	mov	r5, r1
 8001230:	4604      	mov	r4, r0
 8001232:	4688      	mov	r8, r1
 8001234:	2b00      	cmp	r3, #0
 8001236:	d14d      	bne.n	80012d4 <__udivmoddi4+0xac>
 8001238:	428a      	cmp	r2, r1
 800123a:	4694      	mov	ip, r2
 800123c:	d968      	bls.n	8001310 <__udivmoddi4+0xe8>
 800123e:	fab2 f282 	clz	r2, r2
 8001242:	b152      	cbz	r2, 800125a <__udivmoddi4+0x32>
 8001244:	fa01 f302 	lsl.w	r3, r1, r2
 8001248:	f1c2 0120 	rsb	r1, r2, #32
 800124c:	fa20 f101 	lsr.w	r1, r0, r1
 8001250:	fa0c fc02 	lsl.w	ip, ip, r2
 8001254:	ea41 0803 	orr.w	r8, r1, r3
 8001258:	4094      	lsls	r4, r2
 800125a:	ea4f 451c 	mov.w	r5, ip, lsr #16
 800125e:	0c21      	lsrs	r1, r4, #16
 8001260:	fbb8 fef5 	udiv	lr, r8, r5
 8001264:	fa1f f78c 	uxth.w	r7, ip
 8001268:	fb05 831e 	mls	r3, r5, lr, r8
 800126c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001270:	fb0e f107 	mul.w	r1, lr, r7
 8001274:	4299      	cmp	r1, r3
 8001276:	d90b      	bls.n	8001290 <__udivmoddi4+0x68>
 8001278:	eb1c 0303 	adds.w	r3, ip, r3
 800127c:	f10e 30ff 	add.w	r0, lr, #4294967295
 8001280:	f080 811e 	bcs.w	80014c0 <__udivmoddi4+0x298>
 8001284:	4299      	cmp	r1, r3
 8001286:	f240 811b 	bls.w	80014c0 <__udivmoddi4+0x298>
 800128a:	f1ae 0e02 	sub.w	lr, lr, #2
 800128e:	4463      	add	r3, ip
 8001290:	1a5b      	subs	r3, r3, r1
 8001292:	b2a4      	uxth	r4, r4
 8001294:	fbb3 f0f5 	udiv	r0, r3, r5
 8001298:	fb05 3310 	mls	r3, r5, r0, r3
 800129c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80012a0:	fb00 f707 	mul.w	r7, r0, r7
 80012a4:	42a7      	cmp	r7, r4
 80012a6:	d90a      	bls.n	80012be <__udivmoddi4+0x96>
 80012a8:	eb1c 0404 	adds.w	r4, ip, r4
 80012ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80012b0:	f080 8108 	bcs.w	80014c4 <__udivmoddi4+0x29c>
 80012b4:	42a7      	cmp	r7, r4
 80012b6:	f240 8105 	bls.w	80014c4 <__udivmoddi4+0x29c>
 80012ba:	4464      	add	r4, ip
 80012bc:	3802      	subs	r0, #2
 80012be:	1be4      	subs	r4, r4, r7
 80012c0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80012c4:	2100      	movs	r1, #0
 80012c6:	b11e      	cbz	r6, 80012d0 <__udivmoddi4+0xa8>
 80012c8:	40d4      	lsrs	r4, r2
 80012ca:	2300      	movs	r3, #0
 80012cc:	e9c6 4300 	strd	r4, r3, [r6]
 80012d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012d4:	428b      	cmp	r3, r1
 80012d6:	d908      	bls.n	80012ea <__udivmoddi4+0xc2>
 80012d8:	2e00      	cmp	r6, #0
 80012da:	f000 80ee 	beq.w	80014ba <__udivmoddi4+0x292>
 80012de:	2100      	movs	r1, #0
 80012e0:	e9c6 0500 	strd	r0, r5, [r6]
 80012e4:	4608      	mov	r0, r1
 80012e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012ea:	fab3 f183 	clz	r1, r3
 80012ee:	2900      	cmp	r1, #0
 80012f0:	d14a      	bne.n	8001388 <__udivmoddi4+0x160>
 80012f2:	42ab      	cmp	r3, r5
 80012f4:	d302      	bcc.n	80012fc <__udivmoddi4+0xd4>
 80012f6:	4282      	cmp	r2, r0
 80012f8:	f200 80f9 	bhi.w	80014ee <__udivmoddi4+0x2c6>
 80012fc:	1a84      	subs	r4, r0, r2
 80012fe:	eb65 0303 	sbc.w	r3, r5, r3
 8001302:	2001      	movs	r0, #1
 8001304:	4698      	mov	r8, r3
 8001306:	2e00      	cmp	r6, #0
 8001308:	d0e2      	beq.n	80012d0 <__udivmoddi4+0xa8>
 800130a:	e9c6 4800 	strd	r4, r8, [r6]
 800130e:	e7df      	b.n	80012d0 <__udivmoddi4+0xa8>
 8001310:	b902      	cbnz	r2, 8001314 <__udivmoddi4+0xec>
 8001312:	deff      	udf	#255	; 0xff
 8001314:	fab2 f282 	clz	r2, r2
 8001318:	2a00      	cmp	r2, #0
 800131a:	f040 8091 	bne.w	8001440 <__udivmoddi4+0x218>
 800131e:	eba1 050c 	sub.w	r5, r1, ip
 8001322:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001326:	fa1f fe8c 	uxth.w	lr, ip
 800132a:	2101      	movs	r1, #1
 800132c:	fbb5 f3f7 	udiv	r3, r5, r7
 8001330:	fb07 5013 	mls	r0, r7, r3, r5
 8001334:	0c25      	lsrs	r5, r4, #16
 8001336:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800133a:	fb0e f003 	mul.w	r0, lr, r3
 800133e:	42a8      	cmp	r0, r5
 8001340:	d908      	bls.n	8001354 <__udivmoddi4+0x12c>
 8001342:	eb1c 0505 	adds.w	r5, ip, r5
 8001346:	f103 38ff 	add.w	r8, r3, #4294967295
 800134a:	d202      	bcs.n	8001352 <__udivmoddi4+0x12a>
 800134c:	42a8      	cmp	r0, r5
 800134e:	f200 80cb 	bhi.w	80014e8 <__udivmoddi4+0x2c0>
 8001352:	4643      	mov	r3, r8
 8001354:	1a2d      	subs	r5, r5, r0
 8001356:	b2a4      	uxth	r4, r4
 8001358:	fbb5 f0f7 	udiv	r0, r5, r7
 800135c:	fb07 5510 	mls	r5, r7, r0, r5
 8001360:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001364:	fb0e fe00 	mul.w	lr, lr, r0
 8001368:	45a6      	cmp	lr, r4
 800136a:	d908      	bls.n	800137e <__udivmoddi4+0x156>
 800136c:	eb1c 0404 	adds.w	r4, ip, r4
 8001370:	f100 35ff 	add.w	r5, r0, #4294967295
 8001374:	d202      	bcs.n	800137c <__udivmoddi4+0x154>
 8001376:	45a6      	cmp	lr, r4
 8001378:	f200 80bb 	bhi.w	80014f2 <__udivmoddi4+0x2ca>
 800137c:	4628      	mov	r0, r5
 800137e:	eba4 040e 	sub.w	r4, r4, lr
 8001382:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001386:	e79e      	b.n	80012c6 <__udivmoddi4+0x9e>
 8001388:	f1c1 0720 	rsb	r7, r1, #32
 800138c:	408b      	lsls	r3, r1
 800138e:	fa22 fc07 	lsr.w	ip, r2, r7
 8001392:	ea4c 0c03 	orr.w	ip, ip, r3
 8001396:	fa20 f407 	lsr.w	r4, r0, r7
 800139a:	fa05 f301 	lsl.w	r3, r5, r1
 800139e:	431c      	orrs	r4, r3
 80013a0:	40fd      	lsrs	r5, r7
 80013a2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80013a6:	fa00 f301 	lsl.w	r3, r0, r1
 80013aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80013ae:	0c20      	lsrs	r0, r4, #16
 80013b0:	fa1f fe8c 	uxth.w	lr, ip
 80013b4:	fb09 5518 	mls	r5, r9, r8, r5
 80013b8:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80013bc:	fb08 f00e 	mul.w	r0, r8, lr
 80013c0:	42a8      	cmp	r0, r5
 80013c2:	fa02 f201 	lsl.w	r2, r2, r1
 80013c6:	d90b      	bls.n	80013e0 <__udivmoddi4+0x1b8>
 80013c8:	eb1c 0505 	adds.w	r5, ip, r5
 80013cc:	f108 3aff 	add.w	sl, r8, #4294967295
 80013d0:	f080 8088 	bcs.w	80014e4 <__udivmoddi4+0x2bc>
 80013d4:	42a8      	cmp	r0, r5
 80013d6:	f240 8085 	bls.w	80014e4 <__udivmoddi4+0x2bc>
 80013da:	f1a8 0802 	sub.w	r8, r8, #2
 80013de:	4465      	add	r5, ip
 80013e0:	1a2d      	subs	r5, r5, r0
 80013e2:	b2a4      	uxth	r4, r4
 80013e4:	fbb5 f0f9 	udiv	r0, r5, r9
 80013e8:	fb09 5510 	mls	r5, r9, r0, r5
 80013ec:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80013f0:	fb00 fe0e 	mul.w	lr, r0, lr
 80013f4:	45ae      	cmp	lr, r5
 80013f6:	d908      	bls.n	800140a <__udivmoddi4+0x1e2>
 80013f8:	eb1c 0505 	adds.w	r5, ip, r5
 80013fc:	f100 34ff 	add.w	r4, r0, #4294967295
 8001400:	d26c      	bcs.n	80014dc <__udivmoddi4+0x2b4>
 8001402:	45ae      	cmp	lr, r5
 8001404:	d96a      	bls.n	80014dc <__udivmoddi4+0x2b4>
 8001406:	3802      	subs	r0, #2
 8001408:	4465      	add	r5, ip
 800140a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800140e:	fba0 9402 	umull	r9, r4, r0, r2
 8001412:	eba5 050e 	sub.w	r5, r5, lr
 8001416:	42a5      	cmp	r5, r4
 8001418:	46c8      	mov	r8, r9
 800141a:	46a6      	mov	lr, r4
 800141c:	d356      	bcc.n	80014cc <__udivmoddi4+0x2a4>
 800141e:	d053      	beq.n	80014c8 <__udivmoddi4+0x2a0>
 8001420:	b15e      	cbz	r6, 800143a <__udivmoddi4+0x212>
 8001422:	ebb3 0208 	subs.w	r2, r3, r8
 8001426:	eb65 050e 	sbc.w	r5, r5, lr
 800142a:	fa05 f707 	lsl.w	r7, r5, r7
 800142e:	fa22 f301 	lsr.w	r3, r2, r1
 8001432:	40cd      	lsrs	r5, r1
 8001434:	431f      	orrs	r7, r3
 8001436:	e9c6 7500 	strd	r7, r5, [r6]
 800143a:	2100      	movs	r1, #0
 800143c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001440:	f1c2 0320 	rsb	r3, r2, #32
 8001444:	fa20 f103 	lsr.w	r1, r0, r3
 8001448:	fa0c fc02 	lsl.w	ip, ip, r2
 800144c:	fa25 f303 	lsr.w	r3, r5, r3
 8001450:	4095      	lsls	r5, r2
 8001452:	430d      	orrs	r5, r1
 8001454:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001458:	fa1f fe8c 	uxth.w	lr, ip
 800145c:	fbb3 f1f7 	udiv	r1, r3, r7
 8001460:	fb07 3011 	mls	r0, r7, r1, r3
 8001464:	0c2b      	lsrs	r3, r5, #16
 8001466:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800146a:	fb01 f00e 	mul.w	r0, r1, lr
 800146e:	4298      	cmp	r0, r3
 8001470:	fa04 f402 	lsl.w	r4, r4, r2
 8001474:	d908      	bls.n	8001488 <__udivmoddi4+0x260>
 8001476:	eb1c 0303 	adds.w	r3, ip, r3
 800147a:	f101 38ff 	add.w	r8, r1, #4294967295
 800147e:	d22f      	bcs.n	80014e0 <__udivmoddi4+0x2b8>
 8001480:	4298      	cmp	r0, r3
 8001482:	d92d      	bls.n	80014e0 <__udivmoddi4+0x2b8>
 8001484:	3902      	subs	r1, #2
 8001486:	4463      	add	r3, ip
 8001488:	1a1b      	subs	r3, r3, r0
 800148a:	b2ad      	uxth	r5, r5
 800148c:	fbb3 f0f7 	udiv	r0, r3, r7
 8001490:	fb07 3310 	mls	r3, r7, r0, r3
 8001494:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8001498:	fb00 f30e 	mul.w	r3, r0, lr
 800149c:	42ab      	cmp	r3, r5
 800149e:	d908      	bls.n	80014b2 <__udivmoddi4+0x28a>
 80014a0:	eb1c 0505 	adds.w	r5, ip, r5
 80014a4:	f100 38ff 	add.w	r8, r0, #4294967295
 80014a8:	d216      	bcs.n	80014d8 <__udivmoddi4+0x2b0>
 80014aa:	42ab      	cmp	r3, r5
 80014ac:	d914      	bls.n	80014d8 <__udivmoddi4+0x2b0>
 80014ae:	3802      	subs	r0, #2
 80014b0:	4465      	add	r5, ip
 80014b2:	1aed      	subs	r5, r5, r3
 80014b4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80014b8:	e738      	b.n	800132c <__udivmoddi4+0x104>
 80014ba:	4631      	mov	r1, r6
 80014bc:	4630      	mov	r0, r6
 80014be:	e707      	b.n	80012d0 <__udivmoddi4+0xa8>
 80014c0:	4686      	mov	lr, r0
 80014c2:	e6e5      	b.n	8001290 <__udivmoddi4+0x68>
 80014c4:	4618      	mov	r0, r3
 80014c6:	e6fa      	b.n	80012be <__udivmoddi4+0x96>
 80014c8:	454b      	cmp	r3, r9
 80014ca:	d2a9      	bcs.n	8001420 <__udivmoddi4+0x1f8>
 80014cc:	ebb9 0802 	subs.w	r8, r9, r2
 80014d0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80014d4:	3801      	subs	r0, #1
 80014d6:	e7a3      	b.n	8001420 <__udivmoddi4+0x1f8>
 80014d8:	4640      	mov	r0, r8
 80014da:	e7ea      	b.n	80014b2 <__udivmoddi4+0x28a>
 80014dc:	4620      	mov	r0, r4
 80014de:	e794      	b.n	800140a <__udivmoddi4+0x1e2>
 80014e0:	4641      	mov	r1, r8
 80014e2:	e7d1      	b.n	8001488 <__udivmoddi4+0x260>
 80014e4:	46d0      	mov	r8, sl
 80014e6:	e77b      	b.n	80013e0 <__udivmoddi4+0x1b8>
 80014e8:	3b02      	subs	r3, #2
 80014ea:	4465      	add	r5, ip
 80014ec:	e732      	b.n	8001354 <__udivmoddi4+0x12c>
 80014ee:	4608      	mov	r0, r1
 80014f0:	e709      	b.n	8001306 <__udivmoddi4+0xde>
 80014f2:	4464      	add	r4, ip
 80014f4:	3802      	subs	r0, #2
 80014f6:	e742      	b.n	800137e <__udivmoddi4+0x156>

080014f8 <__aeabi_idiv0>:
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop

080014fc <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800150c:	f023 0218 	bic.w	r2, r3, #24
 8001510:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4313      	orrs	r3, r2
 8001518:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr

08001526 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001526:	b480      	push	{r7}
 8001528:	b085      	sub	sp, #20
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800152e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001532:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001534:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4313      	orrs	r3, r2
 800153c:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800153e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001542:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4013      	ands	r3, r2
 8001548:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800154a:	68fb      	ldr	r3, [r7, #12]
}
 800154c:	bf00      	nop
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	bc80      	pop	{r7}
 8001554:	4770      	bx	lr

08001556 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001556:	b480      	push	{r7}
 8001558:	b085      	sub	sp, #20
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800155e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001562:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001564:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4313      	orrs	r3, r2
 800156c:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800156e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001572:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4013      	ands	r3, r2
 8001578:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800157a:	68fb      	ldr	r3, [r7, #12]
}
 800157c:	bf00      	nop
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	bc80      	pop	{r7}
 8001584:	4770      	bx	lr

08001586 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800158a:	f003 fae1 	bl	8004b50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800158e:	f000 f817 	bl	80015c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001592:	f000 f9f7 	bl	8001984 <MX_GPIO_Init>
  MX_DMA_Init();
 8001596:	f000 f9e3 	bl	8001960 <MX_DMA_Init>
  MX_RTC_Init();
 800159a:	f000 f8db 	bl	8001754 <MX_RTC_Init>
  MX_TIM1_Init();
 800159e:	f000 f93d 	bl	800181c <MX_TIM1_Init>
  MX_CRC_Init();
 80015a2:	f000 f869 	bl	8001678 <MX_CRC_Init>
  MX_USART1_UART_Init();
 80015a6:	f000 f889 	bl	80016bc <MX_USART1_UART_Init>
  MX_MEMS_Init();
 80015aa:	f008 fcbd 	bl	8009f28 <MX_MEMS_Init>
  /* USER CODE BEGIN 2 */
  shub_init();
 80015ae:	f000 fac5 	bl	8001b3c <shub_init>
  shub_power_i2c_on();
 80015b2:	f000 faa2 	bl	8001afa <shub_power_i2c_on>
  shub_power_i2c_mlc_on();
 80015b6:	f000 fab0 	bl	8001b1a <shub_power_i2c_mlc_on>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_MEMS_Process();
 80015ba:	f008 fcbb 	bl	8009f34 <MX_MEMS_Process>
 80015be:	e7fc      	b.n	80015ba <main+0x34>

080015c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b09a      	sub	sp, #104	; 0x68
 80015c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015c6:	f107 0320 	add.w	r3, r7, #32
 80015ca:	2248      	movs	r2, #72	; 0x48
 80015cc:	2100      	movs	r1, #0
 80015ce:	4618      	mov	r0, r3
 80015d0:	f016 fa8c 	bl	8017aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015d4:	1d3b      	adds	r3, r7, #4
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	60da      	str	r2, [r3, #12]
 80015e0:	611a      	str	r2, [r3, #16]
 80015e2:	615a      	str	r2, [r3, #20]
 80015e4:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80015e6:	f005 f901 	bl	80067ec <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80015ea:	2000      	movs	r0, #0
 80015ec:	f7ff ff86 	bl	80014fc <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80015f0:	4b20      	ldr	r3, [pc, #128]	; (8001674 <SystemClock_Config+0xb4>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015f8:	4a1e      	ldr	r2, [pc, #120]	; (8001674 <SystemClock_Config+0xb4>)
 80015fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015fe:	6013      	str	r3, [r2, #0]
 8001600:	4b1c      	ldr	r3, [pc, #112]	; (8001674 <SystemClock_Config+0xb4>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001608:	603b      	str	r3, [r7, #0]
 800160a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 800160c:	232c      	movs	r3, #44	; 0x2c
 800160e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001610:	2381      	movs	r3, #129	; 0x81
 8001612:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001614:	2301      	movs	r3, #1
 8001616:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001618:	2300      	movs	r3, #0
 800161a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800161c:	2360      	movs	r3, #96	; 0x60
 800161e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8001620:	2300      	movs	r3, #0
 8001622:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001624:	2301      	movs	r3, #1
 8001626:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001628:	2300      	movs	r3, #0
 800162a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800162c:	f107 0320 	add.w	r3, r7, #32
 8001630:	4618      	mov	r0, r3
 8001632:	f005 fbad 	bl	8006d90 <HAL_RCC_OscConfig>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800163c:	f000 fa16 	bl	8001a6c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001640:	234f      	movs	r3, #79	; 0x4f
 8001642:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001644:	2300      	movs	r3, #0
 8001646:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001648:	2300      	movs	r3, #0
 800164a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800164c:	2300      	movs	r3, #0
 800164e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001654:	2300      	movs	r3, #0
 8001656:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001658:	1d3b      	adds	r3, r7, #4
 800165a:	2100      	movs	r1, #0
 800165c:	4618      	mov	r0, r3
 800165e:	f005 ff33 	bl	80074c8 <HAL_RCC_ClockConfig>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001668:	f000 fa00 	bl	8001a6c <Error_Handler>
  }
}
 800166c:	bf00      	nop
 800166e:	3768      	adds	r7, #104	; 0x68
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	58000400 	.word	0x58000400

08001678 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800167c:	4b0d      	ldr	r3, [pc, #52]	; (80016b4 <MX_CRC_Init+0x3c>)
 800167e:	4a0e      	ldr	r2, [pc, #56]	; (80016b8 <MX_CRC_Init+0x40>)
 8001680:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001682:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <MX_CRC_Init+0x3c>)
 8001684:	2200      	movs	r2, #0
 8001686:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001688:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <MX_CRC_Init+0x3c>)
 800168a:	2200      	movs	r2, #0
 800168c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800168e:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <MX_CRC_Init+0x3c>)
 8001690:	2200      	movs	r2, #0
 8001692:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001694:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <MX_CRC_Init+0x3c>)
 8001696:	2200      	movs	r2, #0
 8001698:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <MX_CRC_Init+0x3c>)
 800169c:	2201      	movs	r2, #1
 800169e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80016a0:	4804      	ldr	r0, [pc, #16]	; (80016b4 <MX_CRC_Init+0x3c>)
 80016a2:	f003 fbfb 	bl	8004e9c <HAL_CRC_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80016ac:	f000 f9de 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20000574 	.word	0x20000574
 80016b8:	40023000 	.word	0x40023000

080016bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016c0:	4b22      	ldr	r3, [pc, #136]	; (800174c <MX_USART1_UART_Init+0x90>)
 80016c2:	4a23      	ldr	r2, [pc, #140]	; (8001750 <MX_USART1_UART_Init+0x94>)
 80016c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016c6:	4b21      	ldr	r3, [pc, #132]	; (800174c <MX_USART1_UART_Init+0x90>)
 80016c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016ce:	4b1f      	ldr	r3, [pc, #124]	; (800174c <MX_USART1_UART_Init+0x90>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016d4:	4b1d      	ldr	r3, [pc, #116]	; (800174c <MX_USART1_UART_Init+0x90>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016da:	4b1c      	ldr	r3, [pc, #112]	; (800174c <MX_USART1_UART_Init+0x90>)
 80016dc:	2200      	movs	r2, #0
 80016de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016e0:	4b1a      	ldr	r3, [pc, #104]	; (800174c <MX_USART1_UART_Init+0x90>)
 80016e2:	220c      	movs	r2, #12
 80016e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016e6:	4b19      	ldr	r3, [pc, #100]	; (800174c <MX_USART1_UART_Init+0x90>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ec:	4b17      	ldr	r3, [pc, #92]	; (800174c <MX_USART1_UART_Init+0x90>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016f2:	4b16      	ldr	r3, [pc, #88]	; (800174c <MX_USART1_UART_Init+0x90>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016f8:	4b14      	ldr	r3, [pc, #80]	; (800174c <MX_USART1_UART_Init+0x90>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016fe:	4b13      	ldr	r3, [pc, #76]	; (800174c <MX_USART1_UART_Init+0x90>)
 8001700:	2200      	movs	r2, #0
 8001702:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001704:	4811      	ldr	r0, [pc, #68]	; (800174c <MX_USART1_UART_Init+0x90>)
 8001706:	f007 fb49 	bl	8008d9c <HAL_UART_Init>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001710:	f000 f9ac 	bl	8001a6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001714:	2100      	movs	r1, #0
 8001716:	480d      	ldr	r0, [pc, #52]	; (800174c <MX_USART1_UART_Init+0x90>)
 8001718:	f008 fb3e 	bl	8009d98 <HAL_UARTEx_SetTxFifoThreshold>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001722:	f000 f9a3 	bl	8001a6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001726:	2100      	movs	r1, #0
 8001728:	4808      	ldr	r0, [pc, #32]	; (800174c <MX_USART1_UART_Init+0x90>)
 800172a:	f008 fb73 	bl	8009e14 <HAL_UARTEx_SetRxFifoThreshold>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001734:	f000 f99a 	bl	8001a6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001738:	4804      	ldr	r0, [pc, #16]	; (800174c <MX_USART1_UART_Init+0x90>)
 800173a:	f008 faf5 	bl	8009d28 <HAL_UARTEx_DisableFifoMode>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001744:	f000 f992 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000598 	.word	0x20000598
 8001750:	40013800 	.word	0x40013800

08001754 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800175a:	1d3b      	adds	r3, r7, #4
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001768:	2300      	movs	r3, #0
 800176a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800176c:	4b29      	ldr	r3, [pc, #164]	; (8001814 <MX_RTC_Init+0xc0>)
 800176e:	4a2a      	ldr	r2, [pc, #168]	; (8001818 <MX_RTC_Init+0xc4>)
 8001770:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001772:	4b28      	ldr	r3, [pc, #160]	; (8001814 <MX_RTC_Init+0xc0>)
 8001774:	2200      	movs	r2, #0
 8001776:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001778:	4b26      	ldr	r3, [pc, #152]	; (8001814 <MX_RTC_Init+0xc0>)
 800177a:	227f      	movs	r2, #127	; 0x7f
 800177c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800177e:	4b25      	ldr	r3, [pc, #148]	; (8001814 <MX_RTC_Init+0xc0>)
 8001780:	22ff      	movs	r2, #255	; 0xff
 8001782:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001784:	4b23      	ldr	r3, [pc, #140]	; (8001814 <MX_RTC_Init+0xc0>)
 8001786:	2200      	movs	r2, #0
 8001788:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800178a:	4b22      	ldr	r3, [pc, #136]	; (8001814 <MX_RTC_Init+0xc0>)
 800178c:	2200      	movs	r2, #0
 800178e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001790:	4b20      	ldr	r3, [pc, #128]	; (8001814 <MX_RTC_Init+0xc0>)
 8001792:	2200      	movs	r2, #0
 8001794:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001796:	4b1f      	ldr	r3, [pc, #124]	; (8001814 <MX_RTC_Init+0xc0>)
 8001798:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800179c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800179e:	4b1d      	ldr	r3, [pc, #116]	; (8001814 <MX_RTC_Init+0xc0>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80017a4:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <MX_RTC_Init+0xc0>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80017aa:	481a      	ldr	r0, [pc, #104]	; (8001814 <MX_RTC_Init+0xc0>)
 80017ac:	f006 fb66 	bl	8007e7c <HAL_RTC_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80017b6:	f000 f959 	bl	8001a6c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80017be:	2300      	movs	r3, #0
 80017c0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80017ca:	2300      	movs	r3, #0
 80017cc:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80017ce:	1d3b      	adds	r3, r7, #4
 80017d0:	2201      	movs	r2, #1
 80017d2:	4619      	mov	r1, r3
 80017d4:	480f      	ldr	r0, [pc, #60]	; (8001814 <MX_RTC_Init+0xc0>)
 80017d6:	f006 fbcb 	bl	8007f70 <HAL_RTC_SetTime>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_RTC_Init+0x90>
  {
    Error_Handler();
 80017e0:	f000 f944 	bl	8001a6c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80017e4:	2301      	movs	r3, #1
 80017e6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80017e8:	2301      	movs	r3, #1
 80017ea:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80017ec:	2301      	movs	r3, #1
 80017ee:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80017f4:	463b      	mov	r3, r7
 80017f6:	2201      	movs	r2, #1
 80017f8:	4619      	mov	r1, r3
 80017fa:	4806      	ldr	r0, [pc, #24]	; (8001814 <MX_RTC_Init+0xc0>)
 80017fc:	f006 fcb6 	bl	800816c <HAL_RTC_SetDate>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_RTC_Init+0xb6>
  {
    Error_Handler();
 8001806:	f000 f931 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800180a:	bf00      	nop
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000628 	.word	0x20000628
 8001818:	40002800 	.word	0x40002800

0800181c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b088      	sub	sp, #32
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001822:	f107 0310 	add.w	r3, r7, #16
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001830:	1d3b      	adds	r3, r7, #4
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800183a:	4b20      	ldr	r3, [pc, #128]	; (80018bc <MX_TIM1_Init+0xa0>)
 800183c:	4a20      	ldr	r2, [pc, #128]	; (80018c0 <MX_TIM1_Init+0xa4>)
 800183e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001840:	4b1e      	ldr	r3, [pc, #120]	; (80018bc <MX_TIM1_Init+0xa0>)
 8001842:	2200      	movs	r2, #0
 8001844:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001846:	4b1d      	ldr	r3, [pc, #116]	; (80018bc <MX_TIM1_Init+0xa0>)
 8001848:	2200      	movs	r2, #0
 800184a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800184c:	4b1b      	ldr	r3, [pc, #108]	; (80018bc <MX_TIM1_Init+0xa0>)
 800184e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001852:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001854:	4b19      	ldr	r3, [pc, #100]	; (80018bc <MX_TIM1_Init+0xa0>)
 8001856:	2200      	movs	r2, #0
 8001858:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800185a:	4b18      	ldr	r3, [pc, #96]	; (80018bc <MX_TIM1_Init+0xa0>)
 800185c:	2200      	movs	r2, #0
 800185e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001860:	4b16      	ldr	r3, [pc, #88]	; (80018bc <MX_TIM1_Init+0xa0>)
 8001862:	2200      	movs	r2, #0
 8001864:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001866:	4815      	ldr	r0, [pc, #84]	; (80018bc <MX_TIM1_Init+0xa0>)
 8001868:	f006 fe26 	bl	80084b8 <HAL_TIM_Base_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001872:	f000 f8fb 	bl	8001a6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001876:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800187a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800187c:	f107 0310 	add.w	r3, r7, #16
 8001880:	4619      	mov	r1, r3
 8001882:	480e      	ldr	r0, [pc, #56]	; (80018bc <MX_TIM1_Init+0xa0>)
 8001884:	f007 f809 	bl	800889a <HAL_TIM_ConfigClockSource>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800188e:	f000 f8ed 	bl	8001a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001892:	2300      	movs	r3, #0
 8001894:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001896:	2300      	movs	r3, #0
 8001898:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800189e:	1d3b      	adds	r3, r7, #4
 80018a0:	4619      	mov	r1, r3
 80018a2:	4806      	ldr	r0, [pc, #24]	; (80018bc <MX_TIM1_Init+0xa0>)
 80018a4:	f007 f9e0 	bl	8008c68 <HAL_TIMEx_MasterConfigSynchronization>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80018ae:	f000 f8dd 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018b2:	bf00      	nop
 80018b4:	3720      	adds	r7, #32
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000660 	.word	0x20000660
 80018c0:	40012c00 	.word	0x40012c00

080018c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b088      	sub	sp, #32
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ca:	f107 0310 	add.w	r3, r7, #16
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	605a      	str	r2, [r3, #4]
 80018d4:	609a      	str	r2, [r3, #8]
 80018d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d8:	1d3b      	adds	r3, r7, #4
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018e2:	4b1e      	ldr	r3, [pc, #120]	; (800195c <MX_TIM2_Init+0x98>)
 80018e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80018ea:	4b1c      	ldr	r3, [pc, #112]	; (800195c <MX_TIM2_Init+0x98>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f0:	4b1a      	ldr	r3, [pc, #104]	; (800195c <MX_TIM2_Init+0x98>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80018f6:	4b19      	ldr	r3, [pc, #100]	; (800195c <MX_TIM2_Init+0x98>)
 80018f8:	f04f 32ff 	mov.w	r2, #4294967295
 80018fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018fe:	4b17      	ldr	r3, [pc, #92]	; (800195c <MX_TIM2_Init+0x98>)
 8001900:	2200      	movs	r2, #0
 8001902:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001904:	4b15      	ldr	r3, [pc, #84]	; (800195c <MX_TIM2_Init+0x98>)
 8001906:	2200      	movs	r2, #0
 8001908:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800190a:	4814      	ldr	r0, [pc, #80]	; (800195c <MX_TIM2_Init+0x98>)
 800190c:	f006 fdd4 	bl	80084b8 <HAL_TIM_Base_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001916:	f000 f8a9 	bl	8001a6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800191a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800191e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001920:	f107 0310 	add.w	r3, r7, #16
 8001924:	4619      	mov	r1, r3
 8001926:	480d      	ldr	r0, [pc, #52]	; (800195c <MX_TIM2_Init+0x98>)
 8001928:	f006 ffb7 	bl	800889a <HAL_TIM_ConfigClockSource>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001932:	f000 f89b 	bl	8001a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001936:	2300      	movs	r3, #0
 8001938:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800193e:	1d3b      	adds	r3, r7, #4
 8001940:	4619      	mov	r1, r3
 8001942:	4806      	ldr	r0, [pc, #24]	; (800195c <MX_TIM2_Init+0x98>)
 8001944:	f007 f990 	bl	8008c68 <HAL_TIMEx_MasterConfigSynchronization>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800194e:	f000 f88d 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001952:	bf00      	nop
 8001954:	3720      	adds	r7, #32
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	200006ac 	.word	0x200006ac

08001960 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001964:	2004      	movs	r0, #4
 8001966:	f7ff fdde 	bl	8001526 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800196a:	2001      	movs	r0, #1
 800196c:	f7ff fddb 	bl	8001526 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001970:	2200      	movs	r2, #0
 8001972:	2100      	movs	r1, #0
 8001974:	2010      	movs	r0, #16
 8001976:	f003 fa5c 	bl	8004e32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800197a:	2010      	movs	r0, #16
 800197c:	f003 fa73 	bl	8004e66 <HAL_NVIC_EnableIRQ>

}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}

08001984 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198a:	1d3b      	adds	r3, r7, #4
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001998:	2001      	movs	r0, #1
 800199a:	f7ff fddc 	bl	8001556 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800199e:	2002      	movs	r0, #2
 80019a0:	f7ff fdd9 	bl	8001556 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019a4:	2004      	movs	r0, #4
 80019a6:	f7ff fdd6 	bl	8001556 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80019aa:	2200      	movs	r2, #0
 80019ac:	f44f 4102 	mov.w	r1, #33280	; 0x8200
 80019b0:	482c      	ldr	r0, [pc, #176]	; (8001a64 <MX_GPIO_Init+0xe0>)
 80019b2:	f004 f892 	bl	8005ada <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2138      	movs	r1, #56	; 0x38
 80019ba:	482b      	ldr	r0, [pc, #172]	; (8001a68 <MX_GPIO_Init+0xe4>)
 80019bc:	f004 f88d 	bl	8005ada <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80019c0:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 80019c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c6:	2301      	movs	r3, #1
 80019c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019ce:	2302      	movs	r3, #2
 80019d0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d2:	1d3b      	adds	r3, r7, #4
 80019d4:	4619      	mov	r1, r3
 80019d6:	4823      	ldr	r0, [pc, #140]	; (8001a64 <MX_GPIO_Init+0xe0>)
 80019d8:	f003 fe3a 	bl	8005650 <HAL_GPIO_Init>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 80019dc:	2338      	movs	r3, #56	; 0x38
 80019de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e0:	2301      	movs	r3, #1
 80019e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e8:	2303      	movs	r3, #3
 80019ea:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ec:	1d3b      	adds	r3, r7, #4
 80019ee:	4619      	mov	r1, r3
 80019f0:	481d      	ldr	r0, [pc, #116]	; (8001a68 <MX_GPIO_Init+0xe4>)
 80019f2:	f003 fe2d 	bl	8005650 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80019f6:	2302      	movs	r3, #2
 80019f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a04:	1d3b      	adds	r3, r7, #4
 8001a06:	4619      	mov	r1, r3
 8001a08:	4816      	ldr	r0, [pc, #88]	; (8001a64 <MX_GPIO_Init+0xe0>)
 8001a0a:	f003 fe21 	bl	8005650 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a1a:	1d3b      	adds	r3, r7, #4
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4812      	ldr	r0, [pc, #72]	; (8001a68 <MX_GPIO_Init+0xe4>)
 8001a20:	f003 fe16 	bl	8005650 <HAL_GPIO_Init>

  /*Configure GPIO pin : B3_Pin */
  GPIO_InitStruct.Pin = B3_Pin;
 8001a24:	2340      	movs	r3, #64	; 0x40
 8001a26:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a28:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001a2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8001a32:	1d3b      	adds	r3, r7, #4
 8001a34:	4619      	mov	r1, r3
 8001a36:	480c      	ldr	r0, [pc, #48]	; (8001a68 <MX_GPIO_Init+0xe4>)
 8001a38:	f003 fe0a 	bl	8005650 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	2100      	movs	r1, #0
 8001a40:	2007      	movs	r0, #7
 8001a42:	f003 f9f6 	bl	8004e32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001a46:	2007      	movs	r0, #7
 8001a48:	f003 fa0d 	bl	8004e66 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	2100      	movs	r1, #0
 8001a50:	2016      	movs	r0, #22
 8001a52:	f003 f9ee 	bl	8004e32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a56:	2016      	movs	r0, #22
 8001a58:	f003 fa05 	bl	8004e66 <HAL_NVIC_EnableIRQ>

}
 8001a5c:	bf00      	nop
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	48000400 	.word	0x48000400
 8001a68:	48000800 	.word	0x48000800

08001a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a70:	b672      	cpsid	i
}
 8001a72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a74:	e7fe      	b.n	8001a74 <Error_Handler+0x8>

08001a76 <LL_AHB2_GRP1_EnableClock>:
{
 8001a76:	b480      	push	{r7}
 8001a78:	b085      	sub	sp, #20
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4013      	ands	r3, r2
 8001a98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
}
 8001a9c:	bf00      	nop
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr

08001aa6 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b085      	sub	sp, #20
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ab2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ab4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001aca:	68fb      	ldr	r3, [r7, #12]
}
 8001acc:	bf00      	nop
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr

08001ad6 <LL_APB1_GRP1_DisableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ae2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001aec:	4013      	ands	r3, r2
 8001aee:	658b      	str	r3, [r1, #88]	; 0x58
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr

08001afa <shub_power_i2c_on>:
/***** Global Variables  ******/


/***** Global Functions  ******/
void shub_power_i2c_on()
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afe:	2001      	movs	r0, #1
 8001b00:	f7ff ffb9 	bl	8001a76 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_WritePin(I2C_POW_ENA_GPIO_Port, I2C_POW_ENA_Pin, GPIO_PIN_SET);
 8001b04:	2201      	movs	r2, #1
 8001b06:	2120      	movs	r1, #32
 8001b08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b0c:	f003 ffe5 	bl	8005ada <HAL_GPIO_WritePin>
  /* Give some space for the switch to stabilize */
  HAL_Delay(5);
 8001b10:	2005      	movs	r0, #5
 8001b12:	f003 f893 	bl	8004c3c <HAL_Delay>
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <shub_power_i2c_mlc_on>:
  __HAL_RCC_GPIOA_CLK_ENABLE();
  HAL_GPIO_WritePin(I2C_POW_ENA_GPIO_Port, I2C_POW_ENA_Pin, GPIO_PIN_RESET);
}

void shub_power_i2c_mlc_on()
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1e:	2001      	movs	r0, #1
 8001b20:	f7ff ffa9 	bl	8001a76 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_WritePin(MLC_POW_ENA_GPIO_Port, MLC_POW_ENA_Pin, GPIO_PIN_SET);
 8001b24:	2201      	movs	r2, #1
 8001b26:	2180      	movs	r1, #128	; 0x80
 8001b28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b2c:	f003 ffd5 	bl	8005ada <HAL_GPIO_WritePin>
  /* Give some space for the switch to stabilize */
  HAL_Delay(5);
 8001b30:	2005      	movs	r0, #5
 8001b32:	f003 f883 	bl	8004c3c <HAL_Delay>
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <shub_init>:
  __HAL_RCC_GPIOA_CLK_ENABLE();
  HAL_GPIO_WritePin(MLC_POW_ENA_GPIO_Port, MLC_POW_ENA_Pin, GPIO_PIN_RESET);
}

void shub_init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
#if ( SHUB_INIT_I2C )
  GPIO_InitTypeDef GPIO_InitStruct_i2c = {0};
 8001b42:	1d3b      	adds	r3, r7, #4
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]

  if (hi2c2.Instance != I2C2) {
 8001b50:	4b22      	ldr	r3, [pc, #136]	; (8001bdc <shub_init+0xa0>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a22      	ldr	r2, [pc, #136]	; (8001be0 <shub_init+0xa4>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d039      	beq.n	8001bce <shub_init+0x92>
    hi2c2.Instance = I2C2;
 8001b5a:	4b20      	ldr	r3, [pc, #128]	; (8001bdc <shub_init+0xa0>)
 8001b5c:	4a20      	ldr	r2, [pc, #128]	; (8001be0 <shub_init+0xa4>)
 8001b5e:	601a      	str	r2, [r3, #0]
    hi2c2.Init.Timing = 0x20000209;
 8001b60:	4b1e      	ldr	r3, [pc, #120]	; (8001bdc <shub_init+0xa0>)
 8001b62:	4a20      	ldr	r2, [pc, #128]	; (8001be4 <shub_init+0xa8>)
 8001b64:	605a      	str	r2, [r3, #4]
    hi2c2.Init.OwnAddress1 = 0;
 8001b66:	4b1d      	ldr	r3, [pc, #116]	; (8001bdc <shub_init+0xa0>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	609a      	str	r2, [r3, #8]
    hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b6c:	4b1b      	ldr	r3, [pc, #108]	; (8001bdc <shub_init+0xa0>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	60da      	str	r2, [r3, #12]
    hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b72:	4b1a      	ldr	r3, [pc, #104]	; (8001bdc <shub_init+0xa0>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	611a      	str	r2, [r3, #16]
    hi2c2.Init.OwnAddress2 = 0;
 8001b78:	4b18      	ldr	r3, [pc, #96]	; (8001bdc <shub_init+0xa0>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	615a      	str	r2, [r3, #20]
    hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b7e:	4b17      	ldr	r3, [pc, #92]	; (8001bdc <shub_init+0xa0>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	619a      	str	r2, [r3, #24]
    hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b84:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <shub_init+0xa0>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	61da      	str	r2, [r3, #28]
    hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8001b8a:	4b14      	ldr	r3, [pc, #80]	; (8001bdc <shub_init+0xa0>)
 8001b8c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b90:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8001b92:	4812      	ldr	r0, [pc, #72]	; (8001bdc <shub_init+0xa0>)
 8001b94:	f003 ffda 	bl	8005b4c <HAL_I2C_Init>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <shub_init+0x66>
      Error_Handler();
 8001b9e:	f7ff ff65 	bl	8001a6c <Error_Handler>
    }
    /** Configure Analog filter */
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	480d      	ldr	r0, [pc, #52]	; (8001bdc <shub_init+0xa0>)
 8001ba6:	f004 fd79 	bl	800669c <HAL_I2CEx_ConfigAnalogFilter>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <shub_init+0x78>
      Error_Handler();
 8001bb0:	f7ff ff5c 	bl	8001a6c <Error_Handler>
    }
    /** Configure Digital filter */
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	4809      	ldr	r0, [pc, #36]	; (8001bdc <shub_init+0xa0>)
 8001bb8:	f004 fdba 	bl	8006730 <HAL_I2CEx_ConfigDigitalFilter>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <shub_init+0x8a>
      Error_Handler();
 8001bc2:	f7ff ff53 	bl	8001a6c <Error_Handler>
    }
    /** I2C Fast mode Plus enable */
    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C2);
 8001bc6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001bca:	f004 fdfd 	bl	80067c8 <HAL_I2CEx_EnableFastModePlus>
  }
#endif // ( SHUB_INIT_I2C )

  // initialize GPIOs (switches 'n' detection pins)
  io_init();
 8001bce:	f000 f80b 	bl	8001be8 <io_init>
}
 8001bd2:	bf00      	nop
 8001bd4:	3718      	adds	r7, #24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	200006f8 	.word	0x200006f8
 8001be0:	40005800 	.word	0x40005800
 8001be4:	20000209 	.word	0x20000209

08001be8 <io_init>:

/***** Priv Func  ******/
static void io_init( void )
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bee:	1d3b      	adds	r3, r7, #4
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]

  //Initialize GPIO ports
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfc:	2001      	movs	r0, #1
 8001bfe:	f7ff ff3a 	bl	8001a76 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c02:	2002      	movs	r0, #2
 8001c04:	f7ff ff37 	bl	8001a76 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c08:	2004      	movs	r0, #4
 8001c0a:	f7ff ff34 	bl	8001a76 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SW2_3_IN1_Pin|SW2_3_IN2_Pin, GPIO_PIN_RESET);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2106      	movs	r1, #6
 8001c12:	481d      	ldr	r0, [pc, #116]	; (8001c88 <io_init+0xa0>)
 8001c14:	f003 ff61 	bl	8005ada <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LD0_4V_EN_Pin|SW1_IN2_Pin|I2C_POW_ENA_Pin|MLC_POW_ENA_Pin, GPIO_PIN_RESET);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	21e1      	movs	r1, #225	; 0xe1
 8001c1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c20:	f003 ff5b 	bl	8005ada <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, SW1_IN1_Pin, GPIO_PIN_RESET);
 8001c24:	2200      	movs	r2, #0
 8001c26:	2110      	movs	r1, #16
 8001c28:	4818      	ldr	r0, [pc, #96]	; (8001c8c <io_init+0xa4>)
 8001c2a:	f003 ff56 	bl	8005ada <HAL_GPIO_WritePin>

  /*Configure GPIO B pins */
  GPIO_InitStruct.Pin = SW2_3_IN1_Pin|SW2_3_IN2_Pin;
 8001c2e:	2306      	movs	r3, #6
 8001c30:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c32:	2301      	movs	r3, #1
 8001c34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3e:	1d3b      	adds	r3, r7, #4
 8001c40:	4619      	mov	r1, r3
 8001c42:	4811      	ldr	r0, [pc, #68]	; (8001c88 <io_init+0xa0>)
 8001c44:	f003 fd04 	bl	8005650 <HAL_GPIO_Init>
  /* Insertion Detection PINS initialization moved to check port function
   * to overcome conflicts with USART2 TX (PA2)
   */

  /*Configure GPIO A pins */
  GPIO_InitStruct.Pin = LD0_4V_EN_Pin|SW1_IN2_Pin|I2C_POW_ENA_Pin|MLC_POW_ENA_Pin;
 8001c48:	23e1      	movs	r3, #225	; 0xe1
 8001c4a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c54:	2302      	movs	r3, #2
 8001c56:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c58:	1d3b      	adds	r3, r7, #4
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c60:	f003 fcf6 	bl	8005650 <HAL_GPIO_Init>

  /*Configure GPIO C pins */
  GPIO_InitStruct.Pin = SW1_IN1_Pin;
 8001c64:	2310      	movs	r3, #16
 8001c66:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c70:	2302      	movs	r3, #2
 8001c72:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SW1_IN1_GPIO_Port, &GPIO_InitStruct);
 8001c74:	1d3b      	adds	r3, r7, #4
 8001c76:	4619      	mov	r1, r3
 8001c78:	4804      	ldr	r0, [pc, #16]	; (8001c8c <io_init+0xa4>)
 8001c7a:	f003 fce9 	bl	8005650 <HAL_GPIO_Init>
}
 8001c7e:	bf00      	nop
 8001c80:	3718      	adds	r7, #24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	48000400 	.word	0x48000400
 8001c8c:	48000800 	.word	0x48000800

08001c90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b088      	sub	sp, #32
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c98:	f107 030c 	add.w	r3, r7, #12
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	611a      	str	r2, [r3, #16]

	if (hi2c->Instance == I2C2) {
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a0f      	ldr	r2, [pc, #60]	; (8001cec <HAL_I2C_MspInit+0x5c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d118      	bne.n	8001ce4 <HAL_I2C_MspInit+0x54>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb2:	2001      	movs	r0, #1
 8001cb4:	f7ff fedf 	bl	8001a76 <LL_AHB2_GRP1_EnableClock>
	    /**I2C2 GPIO Configuration
	    PA11     ------> I2C2_SDA
	    PA12     ------> I2C2_SCL
	    */
	    GPIO_InitStruct.Pin = SHUB_I2C_SDA|SHUB_I2C_SCL;
 8001cb8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001cbc:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cbe:	2312      	movs	r3, #18
 8001cc0:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001cca:	2304      	movs	r3, #4
 8001ccc:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(SHUB_I2C_SDA_Port, &GPIO_InitStruct);
 8001cce:	f107 030c 	add.w	r3, r7, #12
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cd8:	f003 fcba 	bl	8005650 <HAL_GPIO_Init>

		/* Peripheral clock enable */
		__HAL_RCC_I2C2_CLK_ENABLE();
 8001cdc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001ce0:	f7ff fee1 	bl	8001aa6 <LL_APB1_GRP1_EnableClock>
	}
}
 8001ce4:	bf00      	nop
 8001ce6:	3720      	adds	r7, #32
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40005800 	.word	0x40005800

08001cf0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a0c      	ldr	r2, [pc, #48]	; (8001d30 <HAL_I2C_MspDeInit+0x40>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d112      	bne.n	8001d28 <HAL_I2C_MspDeInit+0x38>
  {
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001d02:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001d06:	f7ff fee6 	bl	8001ad6 <LL_APB1_GRP1_DisableClock>

    /**I2C2 GPIO Configuration
    PA11     ------> I2C2_SDA
    PA12     ------> I2C2_SCL
    */
    HAL_GPIO_DeInit(SHUB_I2C_SDA_Port, SHUB_I2C_SDA);
 8001d0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d12:	f003 fdfd 	bl	8005910 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(SHUB_I2C_SCL_Port, SHUB_I2C_SCL);
 8001d16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d1e:	f003 fdf7 	bl	8005910 <HAL_GPIO_DeInit>

    hi2c->Instance = NULL;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
  }

}
 8001d28:	bf00      	nop
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40005800 	.word	0x40005800

08001d34 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr

08001d54 <LL_AHB1_GRP1_EnableClock>:
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001d62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4013      	ands	r3, r2
 8001d76:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d78:	68fb      	ldr	r3, [r7, #12]
}
 8001d7a:	bf00      	nop
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr

08001d84 <LL_AHB2_GRP1_EnableClock>:
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4013      	ands	r3, r2
 8001da6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001da8:	68fb      	ldr	r3, [r7, #12]
}
 8001daa:	bf00      	nop
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr

08001db4 <LL_APB1_GRP1_EnableClock>:
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001dc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dd0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
}
 8001dda:	bf00      	nop
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr

08001de4 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001df2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e00:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4013      	ands	r3, r2
 8001e06:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e08:	68fb      	ldr	r3, [r7, #12]
}
 8001e0a:	bf00      	nop
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr

08001e14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr

08001e20 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a05      	ldr	r2, [pc, #20]	; (8001e44 <HAL_CRC_MspInit+0x24>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d103      	bne.n	8001e3a <HAL_CRC_MspInit+0x1a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001e32:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001e36:	f7ff ff8d 	bl	8001d54 <LL_AHB1_GRP1_EnableClock>
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40023000 	.word	0x40023000

08001e48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b096      	sub	sp, #88	; 0x58
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e50:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e60:	f107 030c 	add.w	r3, r7, #12
 8001e64:	2238      	movs	r2, #56	; 0x38
 8001e66:	2100      	movs	r1, #0
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f015 fe3f 	bl	8017aec <memset>
  if(huart->Instance==USART1)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a17      	ldr	r2, [pc, #92]	; (8001ed0 <HAL_UART_MspInit+0x88>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d127      	bne.n	8001ec8 <HAL_UART_MspInit+0x80>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001e7c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001e80:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e82:	f107 030c 	add.w	r3, r7, #12
 8001e86:	4618      	mov	r0, r3
 8001e88:	f005 fede 	bl	8007c48 <HAL_RCCEx_PeriphCLKConfig>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001e92:	f7ff fdeb 	bl	8001a6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e96:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001e9a:	f7ff ffa3 	bl	8001de4 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9e:	2001      	movs	r0, #1
 8001ea0:	f7ff ff70 	bl	8001d84 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8001ea4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ea8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001eb6:	2307      	movs	r3, #7
 8001eb8:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ec4:	f003 fbc4 	bl	8005650 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ec8:	bf00      	nop
 8001eca:	3758      	adds	r7, #88	; 0x58
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40013800 	.word	0x40013800

08001ed4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b090      	sub	sp, #64	; 0x40
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001edc:	f107 0308 	add.w	r3, r7, #8
 8001ee0:	2238      	movs	r2, #56	; 0x38
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f015 fe01 	bl	8017aec <memset>
  if(hrtc->Instance==RTC)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a0e      	ldr	r2, [pc, #56]	; (8001f28 <HAL_RTC_MspInit+0x54>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d115      	bne.n	8001f20 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ef4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ef8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001efa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001efe:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f00:	f107 0308 	add.w	r3, r7, #8
 8001f04:	4618      	mov	r0, r3
 8001f06:	f005 fe9f 	bl	8007c48 <HAL_RCCEx_PeriphCLKConfig>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001f10:	f7ff fdac 	bl	8001a6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f14:	f7ff ff0e 	bl	8001d34 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001f18:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001f1c:	f7ff ff4a 	bl	8001db4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001f20:	bf00      	nop
 8001f22:	3740      	adds	r7, #64	; 0x40
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40002800 	.word	0x40002800

08001f2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b088      	sub	sp, #32
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f34:	f107 030c 	add.w	r3, r7, #12
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a17      	ldr	r2, [pc, #92]	; (8001fa8 <HAL_TIM_Base_MspInit+0x7c>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d104      	bne.n	8001f58 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f4e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001f52:	f7ff ff47 	bl	8001de4 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f56:	e023      	b.n	8001fa0 <HAL_TIM_Base_MspInit+0x74>
  else if(htim_base->Instance==TIM2)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f60:	d11e      	bne.n	8001fa0 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f62:	2001      	movs	r0, #1
 8001f64:	f7ff ff26 	bl	8001db4 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f68:	2001      	movs	r0, #1
 8001f6a:	f7ff ff0b 	bl	8001d84 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f6e:	2320      	movs	r3, #32
 8001f70:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f72:	2302      	movs	r3, #2
 8001f74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f82:	f107 030c 	add.w	r3, r7, #12
 8001f86:	4619      	mov	r1, r3
 8001f88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f8c:	f003 fb60 	bl	8005650 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f90:	2200      	movs	r2, #0
 8001f92:	2100      	movs	r1, #0
 8001f94:	201b      	movs	r0, #27
 8001f96:	f002 ff4c 	bl	8004e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f9a:	201b      	movs	r0, #27
 8001f9c:	f002 ff63 	bl	8004e66 <HAL_NVIC_EnableIRQ>
}
 8001fa0:	bf00      	nop
 8001fa2:	3720      	adds	r7, #32
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40012c00 	.word	0x40012c00

08001fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fb0:	e7fe      	b.n	8001fb0 <NMI_Handler+0x4>

08001fb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fb6:	e7fe      	b.n	8001fb6 <HardFault_Handler+0x4>

08001fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fbc:	e7fe      	b.n	8001fbc <MemManage_Handler+0x4>

08001fbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fc2:	e7fe      	b.n	8001fc2 <BusFault_Handler+0x4>

08001fc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fc8:	e7fe      	b.n	8001fc8 <UsageFault_Handler+0x4>

08001fca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bc80      	pop	{r7}
 8001fd4:	4770      	bx	lr

08001fd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bc80      	pop	{r7}
 8001fe0:	4770      	bx	lr

08001fe2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr

08001fee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ff2:	f002 fe07 	bl	8004c04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001ffe:	2002      	movs	r0, #2
 8002000:	f003 fd82 	bl	8005b08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}

08002008 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 6 Interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 800200c:	4802      	ldr	r0, [pc, #8]	; (8002018 <DMA1_Channel6_IRQHandler+0x10>)
 800200e:	f003 f955 	bl	80052bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	200007dc 	.word	0x200007dc

0800201c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 8002020:	2040      	movs	r0, #64	; 0x40
 8002022:	f003 fd71 	bl	8005b08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
	...

0800202c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 Global Interrupt.
  */
void TIM2_IRQHandler(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002030:	4802      	ldr	r0, [pc, #8]	; (800203c <TIM2_IRQHandler+0x10>)
 8002032:	f006 fb13 	bl	800865c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	200006ac 	.word	0x200006ac

08002040 <LL_AHB2_GRP1_EnableClock>:
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800204c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800204e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4313      	orrs	r3, r2
 8002056:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800205c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4013      	ands	r3, r2
 8002062:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002064:	68fb      	ldr	r3, [r7, #12]
}
 8002066:	bf00      	nop
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr

08002070 <LL_APB1_GRP1_EnableClock>:
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800207c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800207e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4313      	orrs	r3, r2
 8002086:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800208c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4013      	ands	r3, r2
 8002092:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002094:	68fb      	ldr	r3, [r7, #12]
}
 8002096:	bf00      	nop
 8002098:	3714      	adds	r7, #20
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr

080020a0 <LL_APB1_GRP1_DisableClock>:
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80020a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	43db      	mvns	r3, r3
 80020b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020b6:	4013      	ands	r3, r2
 80020b8:	658b      	str	r3, [r1, #88]	; 0x58
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr

080020c4 <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80020ca:	2300      	movs	r3, #0
 80020cc:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 80020ce:	4b19      	ldr	r3, [pc, #100]	; (8002134 <BSP_I2C2_Init+0x70>)
 80020d0:	4a19      	ldr	r2, [pc, #100]	; (8002138 <BSP_I2C2_Init+0x74>)
 80020d2:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 80020d4:	4b19      	ldr	r3, [pc, #100]	; (800213c <BSP_I2C2_Init+0x78>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	1c5a      	adds	r2, r3, #1
 80020da:	4918      	ldr	r1, [pc, #96]	; (800213c <BSP_I2C2_Init+0x78>)
 80020dc:	600a      	str	r2, [r1, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d122      	bne.n	8002128 <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 80020e2:	4814      	ldr	r0, [pc, #80]	; (8002134 <BSP_I2C2_Init+0x70>)
 80020e4:	f004 f81e 	bl	8006124 <HAL_I2C_GetState>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d11c      	bne.n	8002128 <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 80020ee:	4811      	ldr	r0, [pc, #68]	; (8002134 <BSP_I2C2_Init+0x70>)
 80020f0:	f000 f8fe 	bl	80022f0 <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d116      	bne.n	8002128 <BSP_I2C2_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 80020fa:	480e      	ldr	r0, [pc, #56]	; (8002134 <BSP_I2C2_Init+0x70>)
 80020fc:	f000 f8b4 	bl	8002268 <MX_I2C2_Init>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <BSP_I2C2_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002106:	f06f 0307 	mvn.w	r3, #7
 800210a:	607b      	str	r3, [r7, #4]
 800210c:	e00c      	b.n	8002128 <BSP_I2C2_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800210e:	2100      	movs	r1, #0
 8002110:	4808      	ldr	r0, [pc, #32]	; (8002134 <BSP_I2C2_Init+0x70>)
 8002112:	f004 fac3 	bl	800669c <HAL_I2CEx_ConfigAnalogFilter>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <BSP_I2C2_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800211c:	f06f 0307 	mvn.w	r3, #7
 8002120:	607b      	str	r3, [r7, #4]
 8002122:	e001      	b.n	8002128 <BSP_I2C2_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8002124:	2300      	movs	r3, #0
 8002126:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8002128:	687b      	ldr	r3, [r7, #4]
}
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	200006f8 	.word	0x200006f8
 8002138:	40005800 	.word	0x40005800
 800213c:	20000744 	.word	0x20000744

08002140 <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002146:	2300      	movs	r3, #0
 8002148:	607b      	str	r3, [r7, #4]

  if (I2C2InitCounter > 0)
 800214a:	4b0f      	ldr	r3, [pc, #60]	; (8002188 <BSP_I2C2_DeInit+0x48>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d014      	beq.n	800217c <BSP_I2C2_DeInit+0x3c>
  {
    if (--I2C2InitCounter == 0)
 8002152:	4b0d      	ldr	r3, [pc, #52]	; (8002188 <BSP_I2C2_DeInit+0x48>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	3b01      	subs	r3, #1
 8002158:	4a0b      	ldr	r2, [pc, #44]	; (8002188 <BSP_I2C2_DeInit+0x48>)
 800215a:	6013      	str	r3, [r2, #0]
 800215c:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <BSP_I2C2_DeInit+0x48>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d10b      	bne.n	800217c <BSP_I2C2_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C2_MspDeInit(&hi2c2);
 8002164:	4809      	ldr	r0, [pc, #36]	; (800218c <BSP_I2C2_DeInit+0x4c>)
 8002166:	f000 f907 	bl	8002378 <I2C2_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c2) != HAL_OK)
 800216a:	4808      	ldr	r0, [pc, #32]	; (800218c <BSP_I2C2_DeInit+0x4c>)
 800216c:	f003 fd7d 	bl	8005c6a <HAL_I2C_DeInit>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d002      	beq.n	800217c <BSP_I2C2_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8002176:	f06f 0307 	mvn.w	r3, #7
 800217a:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 800217c:	687b      	ldr	r3, [r7, #4]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	20000744 	.word	0x20000744
 800218c:	200006f8 	.word	0x200006f8

08002190 <BSP_I2C2_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08a      	sub	sp, #40	; 0x28
 8002194:	af04      	add	r7, sp, #16
 8002196:	60ba      	str	r2, [r7, #8]
 8002198:	461a      	mov	r2, r3
 800219a:	4603      	mov	r3, r0
 800219c:	81fb      	strh	r3, [r7, #14]
 800219e:	460b      	mov	r3, r1
 80021a0:	81bb      	strh	r3, [r7, #12]
 80021a2:	4613      	mov	r3, r2
 80021a4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80021a6:	2300      	movs	r3, #0
 80021a8:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c2, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 80021aa:	89ba      	ldrh	r2, [r7, #12]
 80021ac:	89f9      	ldrh	r1, [r7, #14]
 80021ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021b2:	9302      	str	r3, [sp, #8]
 80021b4:	88fb      	ldrh	r3, [r7, #6]
 80021b6:	9301      	str	r3, [sp, #4]
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	2301      	movs	r3, #1
 80021be:	480c      	ldr	r0, [pc, #48]	; (80021f0 <BSP_I2C2_WriteReg+0x60>)
 80021c0:	f003 fd82 	bl	8005cc8 <HAL_I2C_Mem_Write>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00c      	beq.n	80021e4 <BSP_I2C2_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 80021ca:	4809      	ldr	r0, [pc, #36]	; (80021f0 <BSP_I2C2_WriteReg+0x60>)
 80021cc:	f003 ffb7 	bl	800613e <HAL_I2C_GetError>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	d103      	bne.n	80021de <BSP_I2C2_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80021d6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80021da:	617b      	str	r3, [r7, #20]
 80021dc:	e002      	b.n	80021e4 <BSP_I2C2_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80021de:	f06f 0303 	mvn.w	r3, #3
 80021e2:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80021e4:	697b      	ldr	r3, [r7, #20]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	200006f8 	.word	0x200006f8

080021f4 <BSP_I2C2_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b08a      	sub	sp, #40	; 0x28
 80021f8:	af04      	add	r7, sp, #16
 80021fa:	60ba      	str	r2, [r7, #8]
 80021fc:	461a      	mov	r2, r3
 80021fe:	4603      	mov	r3, r0
 8002200:	81fb      	strh	r3, [r7, #14]
 8002202:	460b      	mov	r3, r1
 8002204:	81bb      	strh	r3, [r7, #12]
 8002206:	4613      	mov	r3, r2
 8002208:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c2, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 800220e:	89ba      	ldrh	r2, [r7, #12]
 8002210:	89f9      	ldrh	r1, [r7, #14]
 8002212:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002216:	9302      	str	r3, [sp, #8]
 8002218:	88fb      	ldrh	r3, [r7, #6]
 800221a:	9301      	str	r3, [sp, #4]
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	2301      	movs	r3, #1
 8002222:	480c      	ldr	r0, [pc, #48]	; (8002254 <BSP_I2C2_ReadReg+0x60>)
 8002224:	f003 fe64 	bl	8005ef0 <HAL_I2C_Mem_Read>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00c      	beq.n	8002248 <BSP_I2C2_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 800222e:	4809      	ldr	r0, [pc, #36]	; (8002254 <BSP_I2C2_ReadReg+0x60>)
 8002230:	f003 ff85 	bl	800613e <HAL_I2C_GetError>
 8002234:	4603      	mov	r3, r0
 8002236:	2b04      	cmp	r3, #4
 8002238:	d103      	bne.n	8002242 <BSP_I2C2_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800223a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800223e:	617b      	str	r3, [r7, #20]
 8002240:	e002      	b.n	8002248 <BSP_I2C2_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002242:	f06f 0303 	mvn.w	r3, #3
 8002246:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002248:	697b      	ldr	r3, [r7, #20]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	200006f8 	.word	0x200006f8

08002258 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800225c:	f002 fce4 	bl	8004c28 <HAL_GetTick>
 8002260:	4603      	mov	r3, r0
}
 8002262:	4618      	mov	r0, r3
 8002264:	bd80      	pop	{r7, pc}
	...

08002268 <MX_I2C2_Init>:

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002270:	2300      	movs	r3, #0
 8002272:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C2;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a1d      	ldr	r2, [pc, #116]	; (80022ec <MX_I2C2_Init+0x84>)
 8002278:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00000E14;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f640 6214 	movw	r2, #3604	; 0xe14
 8002280:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f003 fc4d 	bl	8005b4c <HAL_I2C_Init>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <MX_I2C2_Init+0x54>
  {
    ret = HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80022bc:	2100      	movs	r1, #0
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f004 f9ec 	bl	800669c <HAL_I2CEx_ConfigAnalogFilter>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_I2C2_Init+0x66>
  {
    ret = HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 80022ce:	2100      	movs	r1, #0
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f004 fa2d 	bl	8006730 <HAL_I2CEx_ConfigDigitalFilter>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <MX_I2C2_Init+0x78>
  {
    ret = HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40005800 	.word	0x40005800

080022f0 <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b096      	sub	sp, #88	; 0x58
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022f8:	f107 030c 	add.w	r3, r7, #12
 80022fc:	2238      	movs	r2, #56	; 0x38
 80022fe:	2100      	movs	r1, #0
 8002300:	4618      	mov	r0, r3
 8002302:	f015 fbf3 	bl	8017aec <memset>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002306:	2380      	movs	r3, #128	; 0x80
 8002308:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800230a:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800230e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8002310:	f107 030c 	add.w	r3, r7, #12
 8002314:	4618      	mov	r0, r3
 8002316:	f005 fc97 	bl	8007c48 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800231a:	2001      	movs	r0, #1
 800231c:	f7ff fe90 	bl	8002040 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA12     ------> I2C2_SCL
    PA11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 8002320:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002324:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002326:	2312      	movs	r3, #18
 8002328:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232a:	2300      	movs	r3, #0
 800232c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800232e:	2303      	movs	r3, #3
 8002330:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 8002332:	2304      	movs	r3, #4
 8002334:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002336:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800233a:	4619      	mov	r1, r3
 800233c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002340:	f003 f986 	bl	8005650 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 8002344:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002348:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800234a:	2312      	movs	r3, #18
 800234c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234e:	2300      	movs	r3, #0
 8002350:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002352:	2303      	movs	r3, #3
 8002354:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 8002356:	2304      	movs	r3, #4
 8002358:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 800235a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800235e:	4619      	mov	r1, r3
 8002360:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002364:	f003 f974 	bl	8005650 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002368:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800236c:	f7ff fe80 	bl	8002070 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 8002370:	bf00      	nop
 8002372:	3758      	adds	r7, #88	; 0x58
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <I2C2_MspDeInit>:

static void I2C2_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002380:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002384:	f7ff fe8c 	bl	80020a0 <LL_APB1_GRP1_DisableClock>

    /**I2C2 GPIO Configuration
    PA12     ------> I2C2_SCL
    PA11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_GPIO_PIN);
 8002388:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800238c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002390:	f003 fabe 	bl	8005910 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, BUS_I2C2_SDA_GPIO_PIN);
 8002394:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002398:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800239c:	f003 fab8 	bl	8005910 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
}
 80023a0:	bf00      	nop
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023b0:	4a14      	ldr	r2, [pc, #80]	; (8002404 <_sbrk+0x5c>)
 80023b2:	4b15      	ldr	r3, [pc, #84]	; (8002408 <_sbrk+0x60>)
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023bc:	4b13      	ldr	r3, [pc, #76]	; (800240c <_sbrk+0x64>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d102      	bne.n	80023ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023c4:	4b11      	ldr	r3, [pc, #68]	; (800240c <_sbrk+0x64>)
 80023c6:	4a12      	ldr	r2, [pc, #72]	; (8002410 <_sbrk+0x68>)
 80023c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023ca:	4b10      	ldr	r3, [pc, #64]	; (800240c <_sbrk+0x64>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4413      	add	r3, r2
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d207      	bcs.n	80023e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023d8:	f015 fb50 	bl	8017a7c <__errno>
 80023dc:	4603      	mov	r3, r0
 80023de:	220c      	movs	r2, #12
 80023e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023e2:	f04f 33ff 	mov.w	r3, #4294967295
 80023e6:	e009      	b.n	80023fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023e8:	4b08      	ldr	r3, [pc, #32]	; (800240c <_sbrk+0x64>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ee:	4b07      	ldr	r3, [pc, #28]	; (800240c <_sbrk+0x64>)
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4413      	add	r3, r2
 80023f6:	4a05      	ldr	r2, [pc, #20]	; (800240c <_sbrk+0x64>)
 80023f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023fa:	68fb      	ldr	r3, [r7, #12]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	20010000 	.word	0x20010000
 8002408:	00000800 	.word	0x00000800
 800240c:	20000748 	.word	0x20000748
 8002410:	20001eb8 	.word	0x20001eb8

08002414 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002418:	bf00      	nop
 800241a:	46bd      	mov	sp, r7
 800241c:	bc80      	pop	{r7}
 800241e:	4770      	bx	lr

08002420 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002420:	480d      	ldr	r0, [pc, #52]	; (8002458 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002422:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002424:	f7ff fff6 	bl	8002414 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002428:	480c      	ldr	r0, [pc, #48]	; (800245c <LoopForever+0x6>)
  ldr r1, =_edata
 800242a:	490d      	ldr	r1, [pc, #52]	; (8002460 <LoopForever+0xa>)
  ldr r2, =_sidata
 800242c:	4a0d      	ldr	r2, [pc, #52]	; (8002464 <LoopForever+0xe>)
  movs r3, #0
 800242e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002430:	e002      	b.n	8002438 <LoopCopyDataInit>

08002432 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002432:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002434:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002436:	3304      	adds	r3, #4

08002438 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002438:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800243a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800243c:	d3f9      	bcc.n	8002432 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800243e:	4a0a      	ldr	r2, [pc, #40]	; (8002468 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002440:	4c0a      	ldr	r4, [pc, #40]	; (800246c <LoopForever+0x16>)
  movs r3, #0
 8002442:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002444:	e001      	b.n	800244a <LoopFillZerobss>

08002446 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002446:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002448:	3204      	adds	r2, #4

0800244a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800244a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800244c:	d3fb      	bcc.n	8002446 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800244e:	f015 fb1b 	bl	8017a88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002452:	f7ff f898 	bl	8001586 <main>

08002456 <LoopForever>:

LoopForever:
    b LoopForever
 8002456:	e7fe      	b.n	8002456 <LoopForever>
  ldr   r0, =_estack
 8002458:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800245c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002460:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8002464:	0801ab60 	.word	0x0801ab60
  ldr r2, =_sbss
 8002468:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 800246c:	20001eb8 	.word	0x20001eb8

08002470 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002470:	e7fe      	b.n	8002470 <ADC_IRQHandler>
	...

08002474 <LSM6DSOX_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_RegisterBusIO(LSM6DSOX_Object_t *pObj, LSM6DSOX_IO_t *pIO)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSOX_OK;
 800247e:	2300      	movs	r3, #0
 8002480:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d103      	bne.n	8002490 <LSM6DSOX_RegisterBusIO+0x1c>
  {
    ret = LSM6DSOX_ERROR;
 8002488:	f04f 33ff 	mov.w	r3, #4294967295
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	e04d      	b.n	800252c <LSM6DSOX_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	7b1a      	ldrb	r2, [r3, #12]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	691a      	ldr	r2, [r3, #16]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	695a      	ldr	r2, [r3, #20]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	699a      	ldr	r2, [r3, #24]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a1b      	ldr	r2, [pc, #108]	; (8002538 <LSM6DSOX_RegisterBusIO+0xc4>)
 80024cc:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a1a      	ldr	r2, [pc, #104]	; (800253c <LSM6DSOX_RegisterBusIO+0xc8>)
 80024d2:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d103      	bne.n	80024ea <LSM6DSOX_RegisterBusIO+0x76>
    {
      ret = LSM6DSOX_ERROR;
 80024e2:	f04f 33ff 	mov.w	r3, #4294967295
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	e020      	b.n	800252c <LSM6DSOX_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSOX_OK)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4798      	blx	r3
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <LSM6DSOX_RegisterBusIO+0x8a>
    {
      ret = LSM6DSOX_ERROR;
 80024f6:	f04f 33ff 	mov.w	r3, #4294967295
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	e016      	b.n	800252c <LSM6DSOX_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSOX_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	2b02      	cmp	r3, #2
 8002504:	d112      	bne.n	800252c <LSM6DSOX_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800250c:	2b00      	cmp	r3, #0
 800250e:	d10d      	bne.n	800252c <LSM6DSOX_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8002510:	230c      	movs	r3, #12
 8002512:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSOX_Write_Reg(pObj, LSM6DSOX_CTRL3_C, data) != LSM6DSOX_OK)
 8002514:	7afb      	ldrb	r3, [r7, #11]
 8002516:	461a      	mov	r2, r3
 8002518:	2112      	movs	r1, #18
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 ff41 	bl	80033a2 <LSM6DSOX_Write_Reg>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d002      	beq.n	800252c <LSM6DSOX_RegisterBusIO+0xb8>
          {
            ret = LSM6DSOX_ERROR;
 8002526:	f04f 33ff 	mov.w	r3, #4294967295
 800252a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 800252c:	68fb      	ldr	r3, [r7, #12]
}
 800252e:	4618      	mov	r0, r3
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	080037bd 	.word	0x080037bd
 800253c:	080037f3 	.word	0x080037f3

08002540 <LSM6DSOX_Init>:
  * @brief  Initialize the LSM6DSOX sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_Init(LSM6DSOX_Object_t *pObj)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dsox_i3c_disable_set(&(pObj->Ctx), LSM6DSOX_I3C_DISABLE) != LSM6DSOX_OK)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	331c      	adds	r3, #28
 800254c:	2180      	movs	r1, #128	; 0x80
 800254e:	4618      	mov	r0, r3
 8002550:	f001 ff2b 	bl	80043aa <lsm6dsox_i3c_disable_set>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d002      	beq.n	8002560 <LSM6DSOX_Init+0x20>
  {
    return LSM6DSOX_ERROR;
 800255a:	f04f 33ff 	mov.w	r3, #4294967295
 800255e:	e060      	b.n	8002622 <LSM6DSOX_Init+0xe2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsox_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSOX_OK)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	331c      	adds	r3, #28
 8002564:	2101      	movs	r1, #1
 8002566:	4618      	mov	r0, r3
 8002568:	f001 fef9 	bl	800435e <lsm6dsox_auto_increment_set>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d002      	beq.n	8002578 <LSM6DSOX_Init+0x38>
  {
    return LSM6DSOX_ERROR;
 8002572:	f04f 33ff 	mov.w	r3, #4294967295
 8002576:	e054      	b.n	8002622 <LSM6DSOX_Init+0xe2>
  }

  /* Enable BDU */
  if (lsm6dsox_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSOX_OK)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	331c      	adds	r3, #28
 800257c:	2101      	movs	r1, #1
 800257e:	4618      	mov	r0, r3
 8002580:	f001 fdfa 	bl	8004178 <lsm6dsox_block_data_update_set>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d002      	beq.n	8002590 <LSM6DSOX_Init+0x50>
  {
    return LSM6DSOX_ERROR;
 800258a:	f04f 33ff 	mov.w	r3, #4294967295
 800258e:	e048      	b.n	8002622 <LSM6DSOX_Init+0xe2>
  }

  /* FIFO mode selection */
  if (lsm6dsox_fifo_mode_set(&(pObj->Ctx), LSM6DSOX_BYPASS_MODE) != LSM6DSOX_OK)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	331c      	adds	r3, #28
 8002594:	2100      	movs	r1, #0
 8002596:	4618      	mov	r0, r3
 8002598:	f001 ff4d 	bl	8004436 <lsm6dsox_fifo_mode_set>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d002      	beq.n	80025a8 <LSM6DSOX_Init+0x68>
  {
    return LSM6DSOX_ERROR;
 80025a2:	f04f 33ff 	mov.w	r3, #4294967295
 80025a6:	e03c      	b.n	8002622 <LSM6DSOX_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSOX_XL_ODR_104Hz;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2204      	movs	r2, #4
 80025ac:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsox_xl_data_rate_set(&(pObj->Ctx), LSM6DSOX_XL_ODR_OFF) != LSM6DSOX_OK)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	331c      	adds	r3, #28
 80025b4:	2100      	movs	r1, #0
 80025b6:	4618      	mov	r0, r3
 80025b8:	f001 f9c4 	bl	8003944 <lsm6dsox_xl_data_rate_set>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d002      	beq.n	80025c8 <LSM6DSOX_Init+0x88>
  {
    return LSM6DSOX_ERROR;
 80025c2:	f04f 33ff 	mov.w	r3, #4294967295
 80025c6:	e02c      	b.n	8002622 <LSM6DSOX_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dsox_xl_full_scale_set(&(pObj->Ctx), LSM6DSOX_2g) != LSM6DSOX_OK)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	331c      	adds	r3, #28
 80025cc:	2100      	movs	r1, #0
 80025ce:	4618      	mov	r0, r3
 80025d0:	f001 f95a 	bl	8003888 <lsm6dsox_xl_full_scale_set>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d002      	beq.n	80025e0 <LSM6DSOX_Init+0xa0>
  {
    return LSM6DSOX_ERROR;
 80025da:	f04f 33ff 	mov.w	r3, #4294967295
 80025de:	e020      	b.n	8002622 <LSM6DSOX_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSOX_GY_ODR_104Hz;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2204      	movs	r2, #4
 80025e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsox_gy_data_rate_set(&(pObj->Ctx), LSM6DSOX_GY_ODR_OFF) != LSM6DSOX_OK)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	331c      	adds	r3, #28
 80025ec:	2100      	movs	r1, #0
 80025ee:	4618      	mov	r0, r3
 80025f0:	f001 fbec 	bl	8003dcc <lsm6dsox_gy_data_rate_set>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d002      	beq.n	8002600 <LSM6DSOX_Init+0xc0>
  {
    return LSM6DSOX_ERROR;
 80025fa:	f04f 33ff 	mov.w	r3, #4294967295
 80025fe:	e010      	b.n	8002622 <LSM6DSOX_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dsox_gy_full_scale_set(&(pObj->Ctx), LSM6DSOX_2000dps) != LSM6DSOX_OK)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	331c      	adds	r3, #28
 8002604:	2106      	movs	r1, #6
 8002606:	4618      	mov	r0, r3
 8002608:	f001 fb78 	bl	8003cfc <lsm6dsox_gy_full_scale_set>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d002      	beq.n	8002618 <LSM6DSOX_Init+0xd8>
  {
    return LSM6DSOX_ERROR;
 8002612:	f04f 33ff 	mov.w	r3, #4294967295
 8002616:	e004      	b.n	8002622 <LSM6DSOX_Init+0xe2>
  }

  pObj->is_initialized = 1;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSOX_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <LSM6DSOX_DeInit>:
  * @brief  Deinitialize the LSM6DSOX sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_DeInit(LSM6DSOX_Object_t *pObj)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b082      	sub	sp, #8
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSOX_ACC_Disable(pObj) != LSM6DSOX_OK)
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f888 	bl	8002748 <LSM6DSOX_ACC_Disable>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d002      	beq.n	8002644 <LSM6DSOX_DeInit+0x1a>
  {
    return LSM6DSOX_ERROR;
 800263e:	f04f 33ff 	mov.w	r3, #4294967295
 8002642:	e015      	b.n	8002670 <LSM6DSOX_DeInit+0x46>
  }

  if (LSM6DSOX_GYRO_Disable(pObj) != LSM6DSOX_OK)
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 fc22 	bl	8002e8e <LSM6DSOX_GYRO_Disable>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d002      	beq.n	8002656 <LSM6DSOX_DeInit+0x2c>
  {
    return LSM6DSOX_ERROR;
 8002650:	f04f 33ff 	mov.w	r3, #4294967295
 8002654:	e00c      	b.n	8002670 <LSM6DSOX_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSOX_XL_ODR_OFF;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSOX_GY_ODR_OFF;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSOX_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <LSM6DSOX_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_ReadID(LSM6DSOX_Object_t *pObj, uint8_t *Id)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  if (lsm6dsox_device_id_get(&(pObj->Ctx), Id) != LSM6DSOX_OK)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	331c      	adds	r3, #28
 8002686:	6839      	ldr	r1, [r7, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f001 fe57 	bl	800433c <lsm6dsox_device_id_get>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d002      	beq.n	800269a <LSM6DSOX_ReadID+0x22>
  {
    return LSM6DSOX_ERROR;
 8002694:	f04f 33ff 	mov.w	r3, #4294967295
 8002698:	e000      	b.n	800269c <LSM6DSOX_ReadID+0x24>
  }

  return LSM6DSOX_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <LSM6DSOX_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSOX sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_GetCapabilities(LSM6DSOX_Object_t *pObj, LSM6DSOX_Capabilities_t *Capabilities)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	2201      	movs	r2, #1
 80026b2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	2201      	movs	r2, #1
 80026b8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	2200      	movs	r2, #0
 80026be:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	2200      	movs	r2, #0
 80026c4:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80026cc:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2210      	movs	r2, #16
 80026d2:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	2200      	movs	r2, #0
 80026d8:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	4a07      	ldr	r2, [pc, #28]	; (80026fc <LSM6DSOX_GetCapabilities+0x58>)
 80026de:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	4a06      	ldr	r2, [pc, #24]	; (80026fc <LSM6DSOX_GetCapabilities+0x58>)
 80026e4:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	f04f 0200 	mov.w	r2, #0
 80026ec:	619a      	str	r2, [r3, #24]
  return LSM6DSOX_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc80      	pop	{r7}
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	45d02000 	.word	0x45d02000

08002700 <LSM6DSOX_ACC_Enable>:
  * @brief  Enable the LSM6DSOX accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_ACC_Enable(LSM6DSOX_Object_t *pObj)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800270e:	2b01      	cmp	r3, #1
 8002710:	d101      	bne.n	8002716 <LSM6DSOX_ACC_Enable+0x16>
  {
    return LSM6DSOX_OK;
 8002712:	2300      	movs	r3, #0
 8002714:	e014      	b.n	8002740 <LSM6DSOX_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsox_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSOX_OK)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f103 021c 	add.w	r2, r3, #28
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002722:	4619      	mov	r1, r3
 8002724:	4610      	mov	r0, r2
 8002726:	f001 f90d 	bl	8003944 <lsm6dsox_xl_data_rate_set>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d002      	beq.n	8002736 <LSM6DSOX_ACC_Enable+0x36>
  {
    return LSM6DSOX_ERROR;
 8002730:	f04f 33ff 	mov.w	r3, #4294967295
 8002734:	e004      	b.n	8002740 <LSM6DSOX_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSOX_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <LSM6DSOX_ACC_Disable>:
  * @brief  Disable the LSM6DSOX accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_ACC_Disable(LSM6DSOX_Object_t *pObj)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <LSM6DSOX_ACC_Disable+0x16>
  {
    return LSM6DSOX_OK;
 800275a:	2300      	movs	r3, #0
 800275c:	e01f      	b.n	800279e <LSM6DSOX_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsox_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSOX_OK)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f103 021c 	add.w	r2, r3, #28
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	332b      	adds	r3, #43	; 0x2b
 8002768:	4619      	mov	r1, r3
 800276a:	4610      	mov	r0, r2
 800276c:	f001 fa5e 	bl	8003c2c <lsm6dsox_xl_data_rate_get>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d002      	beq.n	800277c <LSM6DSOX_ACC_Disable+0x34>
  {
    return LSM6DSOX_ERROR;
 8002776:	f04f 33ff 	mov.w	r3, #4294967295
 800277a:	e010      	b.n	800279e <LSM6DSOX_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsox_xl_data_rate_set(&(pObj->Ctx), LSM6DSOX_XL_ODR_OFF) != LSM6DSOX_OK)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	331c      	adds	r3, #28
 8002780:	2100      	movs	r1, #0
 8002782:	4618      	mov	r0, r3
 8002784:	f001 f8de 	bl	8003944 <lsm6dsox_xl_data_rate_set>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d002      	beq.n	8002794 <LSM6DSOX_ACC_Disable+0x4c>
  {
    return LSM6DSOX_ERROR;
 800278e:	f04f 33ff 	mov.w	r3, #4294967295
 8002792:	e004      	b.n	800279e <LSM6DSOX_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSOX_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
	...

080027a8 <LSM6DSOX_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_ACC_GetSensitivity(LSM6DSOX_Object_t *pObj, float *Sensitivity)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSOX_OK;
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]
  lsm6dsox_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsox_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSOX_OK)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	331c      	adds	r3, #28
 80027ba:	f107 020b 	add.w	r2, r7, #11
 80027be:	4611      	mov	r1, r2
 80027c0:	4618      	mov	r0, r3
 80027c2:	f001 f887 	bl	80038d4 <lsm6dsox_xl_full_scale_get>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d002      	beq.n	80027d2 <LSM6DSOX_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSOX_ERROR;
 80027cc:	f04f 33ff 	mov.w	r3, #4294967295
 80027d0:	e023      	b.n	800281a <LSM6DSOX_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 80027d2:	7afb      	ldrb	r3, [r7, #11]
 80027d4:	2b03      	cmp	r3, #3
 80027d6:	d81b      	bhi.n	8002810 <LSM6DSOX_ACC_GetSensitivity+0x68>
 80027d8:	a201      	add	r2, pc, #4	; (adr r2, 80027e0 <LSM6DSOX_ACC_GetSensitivity+0x38>)
 80027da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027de:	bf00      	nop
 80027e0:	080027f1 	.word	0x080027f1
 80027e4:	08002809 	.word	0x08002809
 80027e8:	080027f9 	.word	0x080027f9
 80027ec:	08002801 	.word	0x08002801
  {
    case LSM6DSOX_2g:
      *Sensitivity = LSM6DSOX_ACC_SENSITIVITY_FS_2G;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	4a0c      	ldr	r2, [pc, #48]	; (8002824 <LSM6DSOX_ACC_GetSensitivity+0x7c>)
 80027f4:	601a      	str	r2, [r3, #0]
      break;
 80027f6:	e00f      	b.n	8002818 <LSM6DSOX_ACC_GetSensitivity+0x70>

    case LSM6DSOX_4g:
      *Sensitivity = LSM6DSOX_ACC_SENSITIVITY_FS_4G;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	4a0b      	ldr	r2, [pc, #44]	; (8002828 <LSM6DSOX_ACC_GetSensitivity+0x80>)
 80027fc:	601a      	str	r2, [r3, #0]
      break;
 80027fe:	e00b      	b.n	8002818 <LSM6DSOX_ACC_GetSensitivity+0x70>

    case LSM6DSOX_8g:
      *Sensitivity = LSM6DSOX_ACC_SENSITIVITY_FS_8G;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	4a0a      	ldr	r2, [pc, #40]	; (800282c <LSM6DSOX_ACC_GetSensitivity+0x84>)
 8002804:	601a      	str	r2, [r3, #0]
      break;
 8002806:	e007      	b.n	8002818 <LSM6DSOX_ACC_GetSensitivity+0x70>

    case LSM6DSOX_16g:
      *Sensitivity = LSM6DSOX_ACC_SENSITIVITY_FS_16G;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	4a09      	ldr	r2, [pc, #36]	; (8002830 <LSM6DSOX_ACC_GetSensitivity+0x88>)
 800280c:	601a      	str	r2, [r3, #0]
      break;
 800280e:	e003      	b.n	8002818 <LSM6DSOX_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSOX_ERROR;
 8002810:	f04f 33ff 	mov.w	r3, #4294967295
 8002814:	60fb      	str	r3, [r7, #12]
      break;
 8002816:	bf00      	nop
  }

  return ret;
 8002818:	68fb      	ldr	r3, [r7, #12]
}
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	3d79db23 	.word	0x3d79db23
 8002828:	3df9db23 	.word	0x3df9db23
 800282c:	3e79db23 	.word	0x3e79db23
 8002830:	3ef9db23 	.word	0x3ef9db23

08002834 <LSM6DSOX_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_ACC_GetOutputDataRate(LSM6DSOX_Object_t *pObj, float *Odr)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSOX_OK;
 800283e:	2300      	movs	r3, #0
 8002840:	60fb      	str	r3, [r7, #12]
  lsm6dsox_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsox_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSOX_OK)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	331c      	adds	r3, #28
 8002846:	f107 020b 	add.w	r2, r7, #11
 800284a:	4611      	mov	r1, r2
 800284c:	4618      	mov	r0, r3
 800284e:	f001 f9ed 	bl	8003c2c <lsm6dsox_xl_data_rate_get>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d002      	beq.n	800285e <LSM6DSOX_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSOX_ERROR;
 8002858:	f04f 33ff 	mov.w	r3, #4294967295
 800285c:	e054      	b.n	8002908 <LSM6DSOX_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 800285e:	7afb      	ldrb	r3, [r7, #11]
 8002860:	2b0b      	cmp	r3, #11
 8002862:	d84c      	bhi.n	80028fe <LSM6DSOX_ACC_GetOutputDataRate+0xca>
 8002864:	a201      	add	r2, pc, #4	; (adr r2, 800286c <LSM6DSOX_ACC_GetOutputDataRate+0x38>)
 8002866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800286a:	bf00      	nop
 800286c:	0800289d 	.word	0x0800289d
 8002870:	080028af 	.word	0x080028af
 8002874:	080028b7 	.word	0x080028b7
 8002878:	080028bf 	.word	0x080028bf
 800287c:	080028c7 	.word	0x080028c7
 8002880:	080028cf 	.word	0x080028cf
 8002884:	080028d7 	.word	0x080028d7
 8002888:	080028df 	.word	0x080028df
 800288c:	080028e7 	.word	0x080028e7
 8002890:	080028ef 	.word	0x080028ef
 8002894:	080028f7 	.word	0x080028f7
 8002898:	080028a7 	.word	0x080028a7
  {
    case LSM6DSOX_XL_ODR_OFF:
      *Odr = 0.0f;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	f04f 0200 	mov.w	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
      break;
 80028a4:	e02f      	b.n	8002906 <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    case LSM6DSOX_XL_ODR_1Hz6:
      *Odr = 1.6f;
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	4a19      	ldr	r2, [pc, #100]	; (8002910 <LSM6DSOX_ACC_GetOutputDataRate+0xdc>)
 80028aa:	601a      	str	r2, [r3, #0]
      break;
 80028ac:	e02b      	b.n	8002906 <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    case LSM6DSOX_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	4a18      	ldr	r2, [pc, #96]	; (8002914 <LSM6DSOX_ACC_GetOutputDataRate+0xe0>)
 80028b2:	601a      	str	r2, [r3, #0]
      break;
 80028b4:	e027      	b.n	8002906 <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    case LSM6DSOX_XL_ODR_26Hz:
      *Odr = 26.0f;
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	4a17      	ldr	r2, [pc, #92]	; (8002918 <LSM6DSOX_ACC_GetOutputDataRate+0xe4>)
 80028ba:	601a      	str	r2, [r3, #0]
      break;
 80028bc:	e023      	b.n	8002906 <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    case LSM6DSOX_XL_ODR_52Hz:
      *Odr = 52.0f;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	4a16      	ldr	r2, [pc, #88]	; (800291c <LSM6DSOX_ACC_GetOutputDataRate+0xe8>)
 80028c2:	601a      	str	r2, [r3, #0]
      break;
 80028c4:	e01f      	b.n	8002906 <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    case LSM6DSOX_XL_ODR_104Hz:
      *Odr = 104.0f;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	4a15      	ldr	r2, [pc, #84]	; (8002920 <LSM6DSOX_ACC_GetOutputDataRate+0xec>)
 80028ca:	601a      	str	r2, [r3, #0]
      break;
 80028cc:	e01b      	b.n	8002906 <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    case LSM6DSOX_XL_ODR_208Hz:
      *Odr = 208.0f;
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	4a14      	ldr	r2, [pc, #80]	; (8002924 <LSM6DSOX_ACC_GetOutputDataRate+0xf0>)
 80028d2:	601a      	str	r2, [r3, #0]
      break;
 80028d4:	e017      	b.n	8002906 <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    case LSM6DSOX_XL_ODR_417Hz:
      *Odr = 417.0f;
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	4a13      	ldr	r2, [pc, #76]	; (8002928 <LSM6DSOX_ACC_GetOutputDataRate+0xf4>)
 80028da:	601a      	str	r2, [r3, #0]
      break;
 80028dc:	e013      	b.n	8002906 <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    case LSM6DSOX_XL_ODR_833Hz:
      *Odr = 833.0f;
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	4a12      	ldr	r2, [pc, #72]	; (800292c <LSM6DSOX_ACC_GetOutputDataRate+0xf8>)
 80028e2:	601a      	str	r2, [r3, #0]
      break;
 80028e4:	e00f      	b.n	8002906 <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    case LSM6DSOX_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	4a11      	ldr	r2, [pc, #68]	; (8002930 <LSM6DSOX_ACC_GetOutputDataRate+0xfc>)
 80028ea:	601a      	str	r2, [r3, #0]
      break;
 80028ec:	e00b      	b.n	8002906 <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    case LSM6DSOX_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	4a10      	ldr	r2, [pc, #64]	; (8002934 <LSM6DSOX_ACC_GetOutputDataRate+0x100>)
 80028f2:	601a      	str	r2, [r3, #0]
      break;
 80028f4:	e007      	b.n	8002906 <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    case LSM6DSOX_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	4a0f      	ldr	r2, [pc, #60]	; (8002938 <LSM6DSOX_ACC_GetOutputDataRate+0x104>)
 80028fa:	601a      	str	r2, [r3, #0]
      break;
 80028fc:	e003      	b.n	8002906 <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSOX_ERROR;
 80028fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002902:	60fb      	str	r3, [r7, #12]
      break;
 8002904:	bf00      	nop
  }

  return ret;
 8002906:	68fb      	ldr	r3, [r7, #12]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	3fcccccd 	.word	0x3fcccccd
 8002914:	41480000 	.word	0x41480000
 8002918:	41d00000 	.word	0x41d00000
 800291c:	42500000 	.word	0x42500000
 8002920:	42d00000 	.word	0x42d00000
 8002924:	43500000 	.word	0x43500000
 8002928:	43d08000 	.word	0x43d08000
 800292c:	44504000 	.word	0x44504000
 8002930:	44d06000 	.word	0x44d06000
 8002934:	45505000 	.word	0x45505000
 8002938:	45d05800 	.word	0x45d05800

0800293c <LSM6DSOX_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_ACC_SetOutputDataRate(LSM6DSOX_Object_t *pObj, float Odr)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  return LSM6DSOX_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSOX_ACC_HIGH_PERFORMANCE_MODE);
 8002946:	2200      	movs	r2, #0
 8002948:	6839      	ldr	r1, [r7, #0]
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f806 	bl	800295c <LSM6DSOX_ACC_SetOutputDataRate_With_Mode>
 8002950:	4603      	mov	r3, r0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
	...

0800295c <LSM6DSOX_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_ACC_SetOutputDataRate_With_Mode(LSM6DSOX_Object_t *pObj, float Odr, LSM6DSOX_ACC_Operating_Mode_t Mode)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b08c      	sub	sp, #48	; 0x30
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	4613      	mov	r3, r2
 8002968:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSOX_OK;
 800296a:	2300      	movs	r3, #0
 800296c:	62fb      	str	r3, [r7, #44]	; 0x2c

  switch (Mode)
 800296e:	79fb      	ldrb	r3, [r7, #7]
 8002970:	2b02      	cmp	r3, #2
 8002972:	f000 80e9 	beq.w	8002b48 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x1ec>
 8002976:	2b02      	cmp	r3, #2
 8002978:	f300 8160 	bgt.w	8002c3c <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2e0>
 800297c:	2b00      	cmp	r3, #0
 800297e:	d002      	beq.n	8002986 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2a>
 8002980:	2b01      	cmp	r3, #1
 8002982:	d072      	beq.n	8002a6a <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x10e>
 8002984:	e15a      	b.n	8002c3c <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2e0>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dsox_ctrl5_c_t val1;
      lsm6dsox_ctrl6_c_t val2;

      if (lsm6dsox_read_reg(&(pObj->Ctx), LSM6DSOX_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f103 001c 	add.w	r0, r3, #28
 800298c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002990:	2301      	movs	r3, #1
 8002992:	2114      	movs	r1, #20
 8002994:	f000 ff48 	bl	8003828 <lsm6dsox_read_reg>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d002      	beq.n	80029a4 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x48>
      {
        return LSM6DSOX_ERROR;
 800299e:	f04f 33ff 	mov.w	r3, #4294967295
 80029a2:	e160      	b.n	8002c66 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x30a>
      }

      if (val1.xl_ulp_en)
 80029a4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80029a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d025      	beq.n	80029fe <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0xa2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d10b      	bne.n	80029d4 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x78>
        {
          if (lsm6dsox_xl_data_rate_set(&(pObj->Ctx), LSM6DSOX_XL_ODR_OFF) != LSM6DSOX_OK)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	331c      	adds	r3, #28
 80029c0:	2100      	movs	r1, #0
 80029c2:	4618      	mov	r0, r3
 80029c4:	f000 ffbe 	bl	8003944 <lsm6dsox_xl_data_rate_set>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d002      	beq.n	80029d4 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x78>
          {
            return LSM6DSOX_ERROR;
 80029ce:	f04f 33ff 	mov.w	r3, #4294967295
 80029d2:	e148      	b.n	8002c66 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x30a>
          }
        }

        val1.xl_ulp_en = 0;
 80029d4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80029d8:	f36f 13c7 	bfc	r3, #7, #1
 80029dc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        if (lsm6dsox_write_reg(&(pObj->Ctx), LSM6DSOX_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f103 001c 	add.w	r0, r3, #28
 80029e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029ea:	2301      	movs	r3, #1
 80029ec:	2114      	movs	r1, #20
 80029ee:	f000 ff33 	bl	8003858 <lsm6dsox_write_reg>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d002      	beq.n	80029fe <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0xa2>
        {
          return LSM6DSOX_ERROR;
 80029f8:	f04f 33ff 	mov.w	r3, #4294967295
 80029fc:	e133      	b.n	8002c66 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x30a>
        }
      }

      if (lsm6dsox_read_reg(&(pObj->Ctx), LSM6DSOX_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSOX_OK)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f103 001c 	add.w	r0, r3, #28
 8002a04:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002a08:	2301      	movs	r3, #1
 8002a0a:	2115      	movs	r1, #21
 8002a0c:	f000 ff0c 	bl	8003828 <lsm6dsox_read_reg>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d002      	beq.n	8002a1c <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0xc0>
      {
        return LSM6DSOX_ERROR;
 8002a16:	f04f 33ff 	mov.w	r3, #4294967295
 8002a1a:	e124      	b.n	8002c66 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x30a>
      }

      if (val2.xl_hm_mode)
 8002a1c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002a20:	f003 0310 	and.w	r3, r3, #16
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d014      	beq.n	8002a54 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0xf8>
      {
        val2.xl_hm_mode = 0;
 8002a2a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002a2e:	f36f 1304 	bfc	r3, #4, #1
 8002a32:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dsox_write_reg(&(pObj->Ctx), LSM6DSOX_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSOX_OK)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f103 001c 	add.w	r0, r3, #28
 8002a3c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002a40:	2301      	movs	r3, #1
 8002a42:	2115      	movs	r1, #21
 8002a44:	f000 ff08 	bl	8003858 <lsm6dsox_write_reg>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d002      	beq.n	8002a54 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0xf8>
        {
          return LSM6DSOX_ERROR;
 8002a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a52:	e108      	b.n	8002c66 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x30a>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (Odr < 12.5f)
 8002a54:	4986      	ldr	r1, [pc, #536]	; (8002c70 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x314>)
 8002a56:	68b8      	ldr	r0, [r7, #8]
 8002a58:	f7fe fb4a 	bl	80010f0 <__aeabi_fcmplt>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d100      	bne.n	8002a64 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x108>
      {
        Odr = 12.5f;
      }
      break;
 8002a62:	e0ef      	b.n	8002c44 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2e8>
        Odr = 12.5f;
 8002a64:	4b82      	ldr	r3, [pc, #520]	; (8002c70 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x314>)
 8002a66:	60bb      	str	r3, [r7, #8]
 8002a68:	e0ec      	b.n	8002c44 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2e8>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dsox_ctrl5_c_t val1;
      lsm6dsox_ctrl6_c_t val2;

      if (lsm6dsox_read_reg(&(pObj->Ctx), LSM6DSOX_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f103 001c 	add.w	r0, r3, #28
 8002a70:	f107 0220 	add.w	r2, r7, #32
 8002a74:	2301      	movs	r3, #1
 8002a76:	2114      	movs	r1, #20
 8002a78:	f000 fed6 	bl	8003828 <lsm6dsox_read_reg>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d002      	beq.n	8002a88 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x12c>
      {
        return LSM6DSOX_ERROR;
 8002a82:	f04f 33ff 	mov.w	r3, #4294967295
 8002a86:	e0ee      	b.n	8002c66 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x30a>
      }

      if (val1.xl_ulp_en)
 8002a88:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a8c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d025      	beq.n	8002ae2 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x186>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d10b      	bne.n	8002ab8 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x15c>
        {
          if (lsm6dsox_xl_data_rate_set(&(pObj->Ctx), LSM6DSOX_XL_ODR_OFF) != LSM6DSOX_OK)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	331c      	adds	r3, #28
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 ff4c 	bl	8003944 <lsm6dsox_xl_data_rate_set>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d002      	beq.n	8002ab8 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x15c>
          {
            return LSM6DSOX_ERROR;
 8002ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab6:	e0d6      	b.n	8002c66 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x30a>
          }
        }

        val1.xl_ulp_en = 0;
 8002ab8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002abc:	f36f 13c7 	bfc	r3, #7, #1
 8002ac0:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dsox_write_reg(&(pObj->Ctx), LSM6DSOX_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f103 001c 	add.w	r0, r3, #28
 8002aca:	f107 0220 	add.w	r2, r7, #32
 8002ace:	2301      	movs	r3, #1
 8002ad0:	2114      	movs	r1, #20
 8002ad2:	f000 fec1 	bl	8003858 <lsm6dsox_write_reg>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d002      	beq.n	8002ae2 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x186>
        {
          return LSM6DSOX_ERROR;
 8002adc:	f04f 33ff 	mov.w	r3, #4294967295
 8002ae0:	e0c1      	b.n	8002c66 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x30a>
        }
      }

      if (lsm6dsox_read_reg(&(pObj->Ctx), LSM6DSOX_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSOX_OK)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f103 001c 	add.w	r0, r3, #28
 8002ae8:	f107 021c 	add.w	r2, r7, #28
 8002aec:	2301      	movs	r3, #1
 8002aee:	2115      	movs	r1, #21
 8002af0:	f000 fe9a 	bl	8003828 <lsm6dsox_read_reg>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d002      	beq.n	8002b00 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x1a4>
      {
        return LSM6DSOX_ERROR;
 8002afa:	f04f 33ff 	mov.w	r3, #4294967295
 8002afe:	e0b2      	b.n	8002c66 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x30a>
      }

      if (!val2.xl_hm_mode)
 8002b00:	7f3b      	ldrb	r3, [r7, #28]
 8002b02:	f003 0310 	and.w	r3, r3, #16
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d112      	bne.n	8002b32 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x1d6>
      {
        val2.xl_hm_mode = 1U;
 8002b0c:	7f3b      	ldrb	r3, [r7, #28]
 8002b0e:	f043 0310 	orr.w	r3, r3, #16
 8002b12:	773b      	strb	r3, [r7, #28]
        if (lsm6dsox_write_reg(&(pObj->Ctx), LSM6DSOX_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSOX_OK)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f103 001c 	add.w	r0, r3, #28
 8002b1a:	f107 021c 	add.w	r2, r7, #28
 8002b1e:	2301      	movs	r3, #1
 8002b20:	2115      	movs	r1, #21
 8002b22:	f000 fe99 	bl	8003858 <lsm6dsox_write_reg>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d002      	beq.n	8002b32 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x1d6>
        {
          return LSM6DSOX_ERROR;
 8002b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b30:	e099      	b.n	8002c66 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x30a>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (Odr > 208.0f)
 8002b32:	4950      	ldr	r1, [pc, #320]	; (8002c74 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x318>)
 8002b34:	68b8      	ldr	r0, [r7, #8]
 8002b36:	f7fe faf9 	bl	800112c <__aeabi_fcmpgt>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d100      	bne.n	8002b42 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x1e6>
      {
        Odr = 208.0f;
      }
      break;
 8002b40:	e080      	b.n	8002c44 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2e8>
        Odr = 208.0f;
 8002b42:	4b4c      	ldr	r3, [pc, #304]	; (8002c74 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x318>)
 8002b44:	60bb      	str	r3, [r7, #8]
 8002b46:	e07d      	b.n	8002c44 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2e8>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dsox_ctrl5_c_t val1;
      lsm6dsox_ctrl6_c_t val2;

      if (lsm6dsox_read_reg(&(pObj->Ctx), LSM6DSOX_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSOX_OK)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f103 001c 	add.w	r0, r3, #28
 8002b4e:	f107 0214 	add.w	r2, r7, #20
 8002b52:	2301      	movs	r3, #1
 8002b54:	2115      	movs	r1, #21
 8002b56:	f000 fe67 	bl	8003828 <lsm6dsox_read_reg>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d002      	beq.n	8002b66 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x20a>
      {
        return LSM6DSOX_ERROR;
 8002b60:	f04f 33ff 	mov.w	r3, #4294967295
 8002b64:	e07f      	b.n	8002c66 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x30a>
      }

      if (val2.xl_hm_mode)
 8002b66:	7d3b      	ldrb	r3, [r7, #20]
 8002b68:	f003 0310 	and.w	r3, r3, #16
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d012      	beq.n	8002b98 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x23c>
      {
        val2.xl_hm_mode = 0;
 8002b72:	7d3b      	ldrb	r3, [r7, #20]
 8002b74:	f36f 1304 	bfc	r3, #4, #1
 8002b78:	753b      	strb	r3, [r7, #20]
        if (lsm6dsox_write_reg(&(pObj->Ctx), LSM6DSOX_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSOX_OK)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f103 001c 	add.w	r0, r3, #28
 8002b80:	f107 0214 	add.w	r2, r7, #20
 8002b84:	2301      	movs	r3, #1
 8002b86:	2115      	movs	r1, #21
 8002b88:	f000 fe66 	bl	8003858 <lsm6dsox_write_reg>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d002      	beq.n	8002b98 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x23c>
        {
          return LSM6DSOX_ERROR;
 8002b92:	f04f 33ff 	mov.w	r3, #4294967295
 8002b96:	e066      	b.n	8002c66 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x30a>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d108      	bne.n	8002bb4 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x258>
      {
        if (LSM6DSOX_GYRO_Disable(pObj) != LSM6DSOX_OK)
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f000 f973 	bl	8002e8e <LSM6DSOX_GYRO_Disable>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d002      	beq.n	8002bb4 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x258>
        {
          return LSM6DSOX_ERROR;
 8002bae:	f04f 33ff 	mov.w	r3, #4294967295
 8002bb2:	e058      	b.n	8002c66 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x30a>
        }
      }

      if (lsm6dsox_read_reg(&(pObj->Ctx), LSM6DSOX_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f103 001c 	add.w	r0, r3, #28
 8002bba:	f107 0218 	add.w	r2, r7, #24
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	2114      	movs	r1, #20
 8002bc2:	f000 fe31 	bl	8003828 <lsm6dsox_read_reg>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d002      	beq.n	8002bd2 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x276>
      {
        return LSM6DSOX_ERROR;
 8002bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8002bd0:	e049      	b.n	8002c66 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x30a>
      }

      if (!val1.xl_ulp_en)
 8002bd2:	7e3b      	ldrb	r3, [r7, #24]
 8002bd4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d123      	bne.n	8002c26 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2ca>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d10b      	bne.n	8002c00 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2a4>
        {
          if (lsm6dsox_xl_data_rate_set(&(pObj->Ctx), LSM6DSOX_XL_ODR_OFF) != LSM6DSOX_OK)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	331c      	adds	r3, #28
 8002bec:	2100      	movs	r1, #0
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 fea8 	bl	8003944 <lsm6dsox_xl_data_rate_set>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d002      	beq.n	8002c00 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2a4>
          {
            return LSM6DSOX_ERROR;
 8002bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8002bfe:	e032      	b.n	8002c66 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x30a>
          }
        }

        val1.xl_ulp_en = 1U;
 8002c00:	7e3b      	ldrb	r3, [r7, #24]
 8002c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c06:	763b      	strb	r3, [r7, #24]
        if (lsm6dsox_write_reg(&(pObj->Ctx), LSM6DSOX_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f103 001c 	add.w	r0, r3, #28
 8002c0e:	f107 0218 	add.w	r2, r7, #24
 8002c12:	2301      	movs	r3, #1
 8002c14:	2114      	movs	r1, #20
 8002c16:	f000 fe1f 	bl	8003858 <lsm6dsox_write_reg>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d002      	beq.n	8002c26 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2ca>
        {
          return LSM6DSOX_ERROR;
 8002c20:	f04f 33ff 	mov.w	r3, #4294967295
 8002c24:	e01f      	b.n	8002c66 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x30a>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (Odr > 208.0f)
 8002c26:	4913      	ldr	r1, [pc, #76]	; (8002c74 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x318>)
 8002c28:	68b8      	ldr	r0, [r7, #8]
 8002c2a:	f7fe fa7f 	bl	800112c <__aeabi_fcmpgt>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d100      	bne.n	8002c36 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2da>
      {
        Odr = 208.0f;
      }
      break;
 8002c34:	e006      	b.n	8002c44 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2e8>
        Odr = 208.0f;
 8002c36:	4b0f      	ldr	r3, [pc, #60]	; (8002c74 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x318>)
 8002c38:	60bb      	str	r3, [r7, #8]
 8002c3a:	e003      	b.n	8002c44 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2e8>
    }
    default:
      ret = LSM6DSOX_ERROR;
 8002c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c40:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8002c42:	bf00      	nop
  }

  if (pObj->acc_is_enabled == 1U)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d105      	bne.n	8002c5a <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2fe>
  {
    ret = LSM6DSOX_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8002c4e:	68b9      	ldr	r1, [r7, #8]
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f000 fbc1 	bl	80033d8 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled>
 8002c56:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002c58:	e004      	b.n	8002c64 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x308>
  }
  else
  {
    ret = LSM6DSOX_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002c5a:	68b9      	ldr	r1, [r7, #8]
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f000 fc43 	bl	80034e8 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled>
 8002c62:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 8002c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3730      	adds	r7, #48	; 0x30
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	41480000 	.word	0x41480000
 8002c74:	43500000 	.word	0x43500000

08002c78 <LSM6DSOX_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_ACC_GetFullScale(LSM6DSOX_Object_t *pObj, int32_t *FullScale)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSOX_OK;
 8002c82:	2300      	movs	r3, #0
 8002c84:	60fb      	str	r3, [r7, #12]
  lsm6dsox_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsox_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSOX_OK)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	331c      	adds	r3, #28
 8002c8a:	f107 020b 	add.w	r2, r7, #11
 8002c8e:	4611      	mov	r1, r2
 8002c90:	4618      	mov	r0, r3
 8002c92:	f000 fe1f 	bl	80038d4 <lsm6dsox_xl_full_scale_get>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d002      	beq.n	8002ca2 <LSM6DSOX_ACC_GetFullScale+0x2a>
  {
    return LSM6DSOX_ERROR;
 8002c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8002ca0:	e023      	b.n	8002cea <LSM6DSOX_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8002ca2:	7afb      	ldrb	r3, [r7, #11]
 8002ca4:	2b03      	cmp	r3, #3
 8002ca6:	d81b      	bhi.n	8002ce0 <LSM6DSOX_ACC_GetFullScale+0x68>
 8002ca8:	a201      	add	r2, pc, #4	; (adr r2, 8002cb0 <LSM6DSOX_ACC_GetFullScale+0x38>)
 8002caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cae:	bf00      	nop
 8002cb0:	08002cc1 	.word	0x08002cc1
 8002cb4:	08002cd9 	.word	0x08002cd9
 8002cb8:	08002cc9 	.word	0x08002cc9
 8002cbc:	08002cd1 	.word	0x08002cd1
  {
    case LSM6DSOX_2g:
      *FullScale =  2;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	601a      	str	r2, [r3, #0]
      break;
 8002cc6:	e00f      	b.n	8002ce8 <LSM6DSOX_ACC_GetFullScale+0x70>

    case LSM6DSOX_4g:
      *FullScale =  4;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	2204      	movs	r2, #4
 8002ccc:	601a      	str	r2, [r3, #0]
      break;
 8002cce:	e00b      	b.n	8002ce8 <LSM6DSOX_ACC_GetFullScale+0x70>

    case LSM6DSOX_8g:
      *FullScale =  8;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	2208      	movs	r2, #8
 8002cd4:	601a      	str	r2, [r3, #0]
      break;
 8002cd6:	e007      	b.n	8002ce8 <LSM6DSOX_ACC_GetFullScale+0x70>

    case LSM6DSOX_16g:
      *FullScale = 16;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	2210      	movs	r2, #16
 8002cdc:	601a      	str	r2, [r3, #0]
      break;
 8002cde:	e003      	b.n	8002ce8 <LSM6DSOX_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSOX_ERROR;
 8002ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ce4:	60fb      	str	r3, [r7, #12]
      break;
 8002ce6:	bf00      	nop
  }

  return ret;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop

08002cf4 <LSM6DSOX_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_ACC_SetFullScale(LSM6DSOX_Object_t *pObj, int32_t FullScale)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  lsm6dsox_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSOX_2g
           : (FullScale <= 4) ? LSM6DSOX_4g
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	dd0b      	ble.n	8002d1c <LSM6DSOX_ACC_SetFullScale+0x28>
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	dd06      	ble.n	8002d18 <LSM6DSOX_ACC_SetFullScale+0x24>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	dc01      	bgt.n	8002d14 <LSM6DSOX_ACC_SetFullScale+0x20>
 8002d10:	2303      	movs	r3, #3
 8002d12:	e004      	b.n	8002d1e <LSM6DSOX_ACC_SetFullScale+0x2a>
 8002d14:	2301      	movs	r3, #1
 8002d16:	e002      	b.n	8002d1e <LSM6DSOX_ACC_SetFullScale+0x2a>
 8002d18:	2302      	movs	r3, #2
 8002d1a:	e000      	b.n	8002d1e <LSM6DSOX_ACC_SetFullScale+0x2a>
 8002d1c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSOX_2g
 8002d1e:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSOX_8g
           :                    LSM6DSOX_16g;

  if (lsm6dsox_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSOX_OK)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	331c      	adds	r3, #28
 8002d24:	7bfa      	ldrb	r2, [r7, #15]
 8002d26:	4611      	mov	r1, r2
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f000 fdad 	bl	8003888 <lsm6dsox_xl_full_scale_set>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d002      	beq.n	8002d3a <LSM6DSOX_ACC_SetFullScale+0x46>
  {
    return LSM6DSOX_ERROR;
 8002d34:	f04f 33ff 	mov.w	r3, #4294967295
 8002d38:	e000      	b.n	8002d3c <LSM6DSOX_ACC_SetFullScale+0x48>
  }

  return LSM6DSOX_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <LSM6DSOX_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_ACC_GetAxesRaw(LSM6DSOX_Object_t *pObj, LSM6DSOX_AxesRaw_t *Value)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  lsm6dsox_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsox_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSOX_OK)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	331c      	adds	r3, #28
 8002d52:	f107 0208 	add.w	r2, r7, #8
 8002d56:	4611      	mov	r1, r2
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f001 fa7e 	bl	800425a <lsm6dsox_acceleration_raw_get>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d002      	beq.n	8002d6a <LSM6DSOX_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSOX_ERROR;
 8002d64:	f04f 33ff 	mov.w	r3, #4294967295
 8002d68:	e00c      	b.n	8002d84 <LSM6DSOX_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8002d6a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8002d72:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8002d7a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	809a      	strh	r2, [r3, #4]

  return LSM6DSOX_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <LSM6DSOX_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_ACC_GetAxes(LSM6DSOX_Object_t *pObj, LSM6DSOX_Axes_t *Acceleration)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  lsm6dsox_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8002d96:	f04f 0300 	mov.w	r3, #0
 8002d9a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsox_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSOX_OK)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	331c      	adds	r3, #28
 8002da0:	f107 0210 	add.w	r2, r7, #16
 8002da4:	4611      	mov	r1, r2
 8002da6:	4618      	mov	r0, r3
 8002da8:	f001 fa57 	bl	800425a <lsm6dsox_acceleration_raw_get>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d002      	beq.n	8002db8 <LSM6DSOX_ACC_GetAxes+0x2c>
  {
    return LSM6DSOX_ERROR;
 8002db2:	f04f 33ff 	mov.w	r3, #4294967295
 8002db6:	e042      	b.n	8002e3e <LSM6DSOX_ACC_GetAxes+0xb2>
  }

  /* Get LSM6DSOX actual sensitivity. */
  if (LSM6DSOX_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSOX_OK)
 8002db8:	f107 030c 	add.w	r3, r7, #12
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7ff fcf2 	bl	80027a8 <LSM6DSOX_ACC_GetSensitivity>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d002      	beq.n	8002dd0 <LSM6DSOX_ACC_GetAxes+0x44>
  {
    return LSM6DSOX_ERROR;
 8002dca:	f04f 33ff 	mov.w	r3, #4294967295
 8002dce:	e036      	b.n	8002e3e <LSM6DSOX_ACC_GetAxes+0xb2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002dd0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7fd ff99 	bl	8000d0c <__aeabi_i2f>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4619      	mov	r1, r3
 8002de0:	4610      	mov	r0, r2
 8002de2:	f7fd ffe7 	bl	8000db4 <__aeabi_fmul>
 8002de6:	4603      	mov	r3, r0
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7fe f9bf 	bl	800116c <__aeabi_f2iz>
 8002dee:	4602      	mov	r2, r0
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002df4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7fd ff87 	bl	8000d0c <__aeabi_i2f>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4619      	mov	r1, r3
 8002e04:	4610      	mov	r0, r2
 8002e06:	f7fd ffd5 	bl	8000db4 <__aeabi_fmul>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7fe f9ad 	bl	800116c <__aeabi_f2iz>
 8002e12:	4602      	mov	r2, r0
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002e18:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7fd ff75 	bl	8000d0c <__aeabi_i2f>
 8002e22:	4602      	mov	r2, r0
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4619      	mov	r1, r3
 8002e28:	4610      	mov	r0, r2
 8002e2a:	f7fd ffc3 	bl	8000db4 <__aeabi_fmul>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fe f99b 	bl	800116c <__aeabi_f2iz>
 8002e36:	4602      	mov	r2, r0
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	609a      	str	r2, [r3, #8]

  return LSM6DSOX_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3718      	adds	r7, #24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <LSM6DSOX_GYRO_Enable>:
  * @brief  Enable the LSM6DSOX gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_GYRO_Enable(LSM6DSOX_Object_t *pObj)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b082      	sub	sp, #8
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <LSM6DSOX_GYRO_Enable+0x16>
  {
    return LSM6DSOX_OK;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	e014      	b.n	8002e86 <LSM6DSOX_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsox_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSOX_OK)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f103 021c 	add.w	r2, r3, #28
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4610      	mov	r0, r2
 8002e6c:	f000 ffae 	bl	8003dcc <lsm6dsox_gy_data_rate_set>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d002      	beq.n	8002e7c <LSM6DSOX_GYRO_Enable+0x36>
  {
    return LSM6DSOX_ERROR;
 8002e76:	f04f 33ff 	mov.w	r3, #4294967295
 8002e7a:	e004      	b.n	8002e86 <LSM6DSOX_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSOX_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <LSM6DSOX_GYRO_Disable>:
  * @brief  Disable the LSM6DSOX gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_GYRO_Disable(LSM6DSOX_Object_t *pObj)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b082      	sub	sp, #8
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d101      	bne.n	8002ea4 <LSM6DSOX_GYRO_Disable+0x16>
  {
    return LSM6DSOX_OK;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	e01f      	b.n	8002ee4 <LSM6DSOX_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsox_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSOX_OK)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f103 021c 	add.w	r2, r3, #28
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	332c      	adds	r3, #44	; 0x2c
 8002eae:	4619      	mov	r1, r3
 8002eb0:	4610      	mov	r0, r2
 8002eb2:	f001 f8ff 	bl	80040b4 <lsm6dsox_gy_data_rate_get>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d002      	beq.n	8002ec2 <LSM6DSOX_GYRO_Disable+0x34>
  {
    return LSM6DSOX_ERROR;
 8002ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8002ec0:	e010      	b.n	8002ee4 <LSM6DSOX_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsox_gy_data_rate_set(&(pObj->Ctx), LSM6DSOX_GY_ODR_OFF) != LSM6DSOX_OK)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	331c      	adds	r3, #28
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f000 ff7f 	bl	8003dcc <lsm6dsox_gy_data_rate_set>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d002      	beq.n	8002eda <LSM6DSOX_GYRO_Disable+0x4c>
  {
    return LSM6DSOX_ERROR;
 8002ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed8:	e004      	b.n	8002ee4 <LSM6DSOX_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSOX_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <LSM6DSOX_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_GYRO_GetSensitivity(LSM6DSOX_Object_t *pObj, float *Sensitivity)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSOX_OK;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60fb      	str	r3, [r7, #12]
  lsm6dsox_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsox_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSOX_OK)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	331c      	adds	r3, #28
 8002efe:	f107 020b 	add.w	r2, r7, #11
 8002f02:	4611      	mov	r1, r2
 8002f04:	4618      	mov	r0, r3
 8002f06:	f000 ff1f 	bl	8003d48 <lsm6dsox_gy_full_scale_get>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d002      	beq.n	8002f16 <LSM6DSOX_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSOX_ERROR;
 8002f10:	f04f 33ff 	mov.w	r3, #4294967295
 8002f14:	e02d      	b.n	8002f72 <LSM6DSOX_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8002f16:	7afb      	ldrb	r3, [r7, #11]
 8002f18:	2b06      	cmp	r3, #6
 8002f1a:	d825      	bhi.n	8002f68 <LSM6DSOX_GYRO_GetSensitivity+0x7c>
 8002f1c:	a201      	add	r2, pc, #4	; (adr r2, 8002f24 <LSM6DSOX_GYRO_GetSensitivity+0x38>)
 8002f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f22:	bf00      	nop
 8002f24:	08002f49 	.word	0x08002f49
 8002f28:	08002f41 	.word	0x08002f41
 8002f2c:	08002f51 	.word	0x08002f51
 8002f30:	08002f69 	.word	0x08002f69
 8002f34:	08002f59 	.word	0x08002f59
 8002f38:	08002f69 	.word	0x08002f69
 8002f3c:	08002f61 	.word	0x08002f61
  {
    case LSM6DSOX_125dps:
      *Sensitivity = LSM6DSOX_GYRO_SENSITIVITY_FS_125DPS;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	4a0e      	ldr	r2, [pc, #56]	; (8002f7c <LSM6DSOX_GYRO_GetSensitivity+0x90>)
 8002f44:	601a      	str	r2, [r3, #0]
      break;
 8002f46:	e013      	b.n	8002f70 <LSM6DSOX_GYRO_GetSensitivity+0x84>

    case LSM6DSOX_250dps:
      *Sensitivity = LSM6DSOX_GYRO_SENSITIVITY_FS_250DPS;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	4a0d      	ldr	r2, [pc, #52]	; (8002f80 <LSM6DSOX_GYRO_GetSensitivity+0x94>)
 8002f4c:	601a      	str	r2, [r3, #0]
      break;
 8002f4e:	e00f      	b.n	8002f70 <LSM6DSOX_GYRO_GetSensitivity+0x84>

    case LSM6DSOX_500dps:
      *Sensitivity = LSM6DSOX_GYRO_SENSITIVITY_FS_500DPS;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	4a0c      	ldr	r2, [pc, #48]	; (8002f84 <LSM6DSOX_GYRO_GetSensitivity+0x98>)
 8002f54:	601a      	str	r2, [r3, #0]
      break;
 8002f56:	e00b      	b.n	8002f70 <LSM6DSOX_GYRO_GetSensitivity+0x84>

    case LSM6DSOX_1000dps:
      *Sensitivity = LSM6DSOX_GYRO_SENSITIVITY_FS_1000DPS;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	4a0b      	ldr	r2, [pc, #44]	; (8002f88 <LSM6DSOX_GYRO_GetSensitivity+0x9c>)
 8002f5c:	601a      	str	r2, [r3, #0]
      break;
 8002f5e:	e007      	b.n	8002f70 <LSM6DSOX_GYRO_GetSensitivity+0x84>

    case LSM6DSOX_2000dps:
      *Sensitivity = LSM6DSOX_GYRO_SENSITIVITY_FS_2000DPS;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	4a0a      	ldr	r2, [pc, #40]	; (8002f8c <LSM6DSOX_GYRO_GetSensitivity+0xa0>)
 8002f64:	601a      	str	r2, [r3, #0]
      break;
 8002f66:	e003      	b.n	8002f70 <LSM6DSOX_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSOX_ERROR;
 8002f68:	f04f 33ff 	mov.w	r3, #4294967295
 8002f6c:	60fb      	str	r3, [r7, #12]
      break;
 8002f6e:	bf00      	nop
  }

  return ret;
 8002f70:	68fb      	ldr	r3, [r7, #12]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	408c0000 	.word	0x408c0000
 8002f80:	410c0000 	.word	0x410c0000
 8002f84:	418c0000 	.word	0x418c0000
 8002f88:	420c0000 	.word	0x420c0000
 8002f8c:	428c0000 	.word	0x428c0000

08002f90 <LSM6DSOX_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_GYRO_GetOutputDataRate(LSM6DSOX_Object_t *pObj, float *Odr)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSOX_OK;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60fb      	str	r3, [r7, #12]
  lsm6dsox_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsox_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSOX_OK)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	331c      	adds	r3, #28
 8002fa2:	f107 020b 	add.w	r2, r7, #11
 8002fa6:	4611      	mov	r1, r2
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f001 f883 	bl	80040b4 <lsm6dsox_gy_data_rate_get>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d002      	beq.n	8002fba <LSM6DSOX_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSOX_ERROR;
 8002fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8002fb8:	e04e      	b.n	8003058 <LSM6DSOX_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8002fba:	7afb      	ldrb	r3, [r7, #11]
 8002fbc:	2b0a      	cmp	r3, #10
 8002fbe:	d846      	bhi.n	800304e <LSM6DSOX_GYRO_GetOutputDataRate+0xbe>
 8002fc0:	a201      	add	r2, pc, #4	; (adr r2, 8002fc8 <LSM6DSOX_GYRO_GetOutputDataRate+0x38>)
 8002fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc6:	bf00      	nop
 8002fc8:	08002ff5 	.word	0x08002ff5
 8002fcc:	08002fff 	.word	0x08002fff
 8002fd0:	08003007 	.word	0x08003007
 8002fd4:	0800300f 	.word	0x0800300f
 8002fd8:	08003017 	.word	0x08003017
 8002fdc:	0800301f 	.word	0x0800301f
 8002fe0:	08003027 	.word	0x08003027
 8002fe4:	0800302f 	.word	0x0800302f
 8002fe8:	08003037 	.word	0x08003037
 8002fec:	0800303f 	.word	0x0800303f
 8002ff0:	08003047 	.word	0x08003047
  {
    case LSM6DSOX_GY_ODR_OFF:
      *Odr = 0.0f;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	f04f 0200 	mov.w	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]
      break;
 8002ffc:	e02b      	b.n	8003056 <LSM6DSOX_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSOX_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	4a17      	ldr	r2, [pc, #92]	; (8003060 <LSM6DSOX_GYRO_GetOutputDataRate+0xd0>)
 8003002:	601a      	str	r2, [r3, #0]
      break;
 8003004:	e027      	b.n	8003056 <LSM6DSOX_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSOX_GY_ODR_26Hz:
      *Odr = 26.0f;
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	4a16      	ldr	r2, [pc, #88]	; (8003064 <LSM6DSOX_GYRO_GetOutputDataRate+0xd4>)
 800300a:	601a      	str	r2, [r3, #0]
      break;
 800300c:	e023      	b.n	8003056 <LSM6DSOX_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSOX_GY_ODR_52Hz:
      *Odr = 52.0f;
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	4a15      	ldr	r2, [pc, #84]	; (8003068 <LSM6DSOX_GYRO_GetOutputDataRate+0xd8>)
 8003012:	601a      	str	r2, [r3, #0]
      break;
 8003014:	e01f      	b.n	8003056 <LSM6DSOX_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSOX_GY_ODR_104Hz:
      *Odr = 104.0f;
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	4a14      	ldr	r2, [pc, #80]	; (800306c <LSM6DSOX_GYRO_GetOutputDataRate+0xdc>)
 800301a:	601a      	str	r2, [r3, #0]
      break;
 800301c:	e01b      	b.n	8003056 <LSM6DSOX_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSOX_GY_ODR_208Hz:
      *Odr = 208.0f;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	4a13      	ldr	r2, [pc, #76]	; (8003070 <LSM6DSOX_GYRO_GetOutputDataRate+0xe0>)
 8003022:	601a      	str	r2, [r3, #0]
      break;
 8003024:	e017      	b.n	8003056 <LSM6DSOX_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSOX_GY_ODR_417Hz:
      *Odr = 417.0f;
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	4a12      	ldr	r2, [pc, #72]	; (8003074 <LSM6DSOX_GYRO_GetOutputDataRate+0xe4>)
 800302a:	601a      	str	r2, [r3, #0]
      break;
 800302c:	e013      	b.n	8003056 <LSM6DSOX_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSOX_GY_ODR_833Hz:
      *Odr = 833.0f;
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	4a11      	ldr	r2, [pc, #68]	; (8003078 <LSM6DSOX_GYRO_GetOutputDataRate+0xe8>)
 8003032:	601a      	str	r2, [r3, #0]
      break;
 8003034:	e00f      	b.n	8003056 <LSM6DSOX_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSOX_GY_ODR_1667Hz:
      *Odr =  1667.0f;
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	4a10      	ldr	r2, [pc, #64]	; (800307c <LSM6DSOX_GYRO_GetOutputDataRate+0xec>)
 800303a:	601a      	str	r2, [r3, #0]
      break;
 800303c:	e00b      	b.n	8003056 <LSM6DSOX_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSOX_GY_ODR_3333Hz:
      *Odr =  3333.0f;
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	4a0f      	ldr	r2, [pc, #60]	; (8003080 <LSM6DSOX_GYRO_GetOutputDataRate+0xf0>)
 8003042:	601a      	str	r2, [r3, #0]
      break;
 8003044:	e007      	b.n	8003056 <LSM6DSOX_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSOX_GY_ODR_6667Hz:
      *Odr =  6667.0f;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	4a0e      	ldr	r2, [pc, #56]	; (8003084 <LSM6DSOX_GYRO_GetOutputDataRate+0xf4>)
 800304a:	601a      	str	r2, [r3, #0]
      break;
 800304c:	e003      	b.n	8003056 <LSM6DSOX_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSOX_ERROR;
 800304e:	f04f 33ff 	mov.w	r3, #4294967295
 8003052:	60fb      	str	r3, [r7, #12]
      break;
 8003054:	bf00      	nop
  }

  return ret;
 8003056:	68fb      	ldr	r3, [r7, #12]
}
 8003058:	4618      	mov	r0, r3
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	41480000 	.word	0x41480000
 8003064:	41d00000 	.word	0x41d00000
 8003068:	42500000 	.word	0x42500000
 800306c:	42d00000 	.word	0x42d00000
 8003070:	43500000 	.word	0x43500000
 8003074:	43d08000 	.word	0x43d08000
 8003078:	44504000 	.word	0x44504000
 800307c:	44d06000 	.word	0x44d06000
 8003080:	45505000 	.word	0x45505000
 8003084:	45d05800 	.word	0x45d05800

08003088 <LSM6DSOX_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_GYRO_SetOutputDataRate(LSM6DSOX_Object_t *pObj, float Odr)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  return LSM6DSOX_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSOX_GYRO_HIGH_PERFORMANCE_MODE);
 8003092:	2200      	movs	r2, #0
 8003094:	6839      	ldr	r1, [r7, #0]
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f806 	bl	80030a8 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode>
 800309c:	4603      	mov	r3, r0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
	...

080030a8 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_GYRO_SetOutputDataRate_With_Mode(LSM6DSOX_Object_t *pObj, float Odr,
                                                  LSM6DSOX_GYRO_Operating_Mode_t Mode)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b088      	sub	sp, #32
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	4613      	mov	r3, r2
 80030b4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSOX_OK;
 80030b6:	2300      	movs	r3, #0
 80030b8:	61fb      	str	r3, [r7, #28]

  switch (Mode)
 80030ba:	79fb      	ldrb	r3, [r7, #7]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d002      	beq.n	80030c6 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x1e>
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d028      	beq.n	8003116 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x6e>
 80030c4:	e05a      	b.n	800317c <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0xd4>
    case LSM6DSOX_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dsox_ctrl7_g_t val1;

      if (lsm6dsox_read_reg(&(pObj->Ctx), LSM6DSOX_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f103 001c 	add.w	r0, r3, #28
 80030cc:	f107 0218 	add.w	r2, r7, #24
 80030d0:	2301      	movs	r3, #1
 80030d2:	2116      	movs	r1, #22
 80030d4:	f000 fba8 	bl	8003828 <lsm6dsox_read_reg>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x3c>
      {
        return LSM6DSOX_ERROR;
 80030de:	f04f 33ff 	mov.w	r3, #4294967295
 80030e2:	e061      	b.n	80031a8 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x100>
      }

      if (val1.g_hm_mode)
 80030e4:	7e3b      	ldrb	r3, [r7, #24]
 80030e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d049      	beq.n	8003184 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0xdc>
      {
        val1.g_hm_mode = 0;
 80030f0:	7e3b      	ldrb	r3, [r7, #24]
 80030f2:	f36f 13c7 	bfc	r3, #7, #1
 80030f6:	763b      	strb	r3, [r7, #24]
        if (lsm6dsox_write_reg(&(pObj->Ctx), LSM6DSOX_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f103 001c 	add.w	r0, r3, #28
 80030fe:	f107 0218 	add.w	r2, r7, #24
 8003102:	2301      	movs	r3, #1
 8003104:	2116      	movs	r1, #22
 8003106:	f000 fba7 	bl	8003858 <lsm6dsox_write_reg>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d039      	beq.n	8003184 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0xdc>
        {
          return LSM6DSOX_ERROR;
 8003110:	f04f 33ff 	mov.w	r3, #4294967295
 8003114:	e048      	b.n	80031a8 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x100>
    case LSM6DSOX_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dsox_ctrl7_g_t val1;

      if (lsm6dsox_read_reg(&(pObj->Ctx), LSM6DSOX_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f103 001c 	add.w	r0, r3, #28
 800311c:	f107 0214 	add.w	r2, r7, #20
 8003120:	2301      	movs	r3, #1
 8003122:	2116      	movs	r1, #22
 8003124:	f000 fb80 	bl	8003828 <lsm6dsox_read_reg>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d002      	beq.n	8003134 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x8c>
      {
        return LSM6DSOX_ERROR;
 800312e:	f04f 33ff 	mov.w	r3, #4294967295
 8003132:	e039      	b.n	80031a8 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x100>
      }

      if (!val1.g_hm_mode)
 8003134:	7d3b      	ldrb	r3, [r7, #20]
 8003136:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	d112      	bne.n	8003166 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0xbe>
      {
        val1.g_hm_mode = 1U;
 8003140:	7d3b      	ldrb	r3, [r7, #20]
 8003142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003146:	753b      	strb	r3, [r7, #20]
        if (lsm6dsox_write_reg(&(pObj->Ctx), LSM6DSOX_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f103 001c 	add.w	r0, r3, #28
 800314e:	f107 0214 	add.w	r2, r7, #20
 8003152:	2301      	movs	r3, #1
 8003154:	2116      	movs	r1, #22
 8003156:	f000 fb7f 	bl	8003858 <lsm6dsox_write_reg>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d002      	beq.n	8003166 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0xbe>
        {
          return LSM6DSOX_ERROR;
 8003160:	f04f 33ff 	mov.w	r3, #4294967295
 8003164:	e020      	b.n	80031a8 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x100>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (Odr > 208.0f)
 8003166:	4912      	ldr	r1, [pc, #72]	; (80031b0 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x108>)
 8003168:	68b8      	ldr	r0, [r7, #8]
 800316a:	f7fd ffdf 	bl	800112c <__aeabi_fcmpgt>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d100      	bne.n	8003176 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0xce>
      {
        Odr = 208.0f;
      }
      break;
 8003174:	e007      	b.n	8003186 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0xde>
        Odr = 208.0f;
 8003176:	4b0e      	ldr	r3, [pc, #56]	; (80031b0 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x108>)
 8003178:	60bb      	str	r3, [r7, #8]
 800317a:	e004      	b.n	8003186 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0xde>
    }
    default:
      ret = LSM6DSOX_ERROR;
 800317c:	f04f 33ff 	mov.w	r3, #4294967295
 8003180:	61fb      	str	r3, [r7, #28]
      break;
 8003182:	e000      	b.n	8003186 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0xde>
      break;
 8003184:	bf00      	nop
  }

  if (pObj->gyro_is_enabled == 1U)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800318c:	2b01      	cmp	r3, #1
 800318e:	d105      	bne.n	800319c <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0xf4>
  {
    ret = LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8003190:	68b9      	ldr	r1, [r7, #8]
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 fa24 	bl	80035e0 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled>
 8003198:	61f8      	str	r0, [r7, #28]
 800319a:	e004      	b.n	80031a6 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0xfe>
  }
  else
  {
    ret = LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 800319c:	68b9      	ldr	r1, [r7, #8]
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 fa9a 	bl	80036d8 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled>
 80031a4:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 80031a6:	69fb      	ldr	r3, [r7, #28]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3720      	adds	r7, #32
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	43500000 	.word	0x43500000

080031b4 <LSM6DSOX_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_GYRO_GetFullScale(LSM6DSOX_Object_t *pObj, int32_t  *FullScale)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSOX_OK;
 80031be:	2300      	movs	r3, #0
 80031c0:	60fb      	str	r3, [r7, #12]
  lsm6dsox_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsox_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSOX_OK)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	331c      	adds	r3, #28
 80031c6:	f107 020b 	add.w	r2, r7, #11
 80031ca:	4611      	mov	r1, r2
 80031cc:	4618      	mov	r0, r3
 80031ce:	f000 fdbb 	bl	8003d48 <lsm6dsox_gy_full_scale_get>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d002      	beq.n	80031de <LSM6DSOX_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSOX_ERROR;
 80031d8:	f04f 33ff 	mov.w	r3, #4294967295
 80031dc:	e030      	b.n	8003240 <LSM6DSOX_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 80031de:	7afb      	ldrb	r3, [r7, #11]
 80031e0:	2b06      	cmp	r3, #6
 80031e2:	d828      	bhi.n	8003236 <LSM6DSOX_GYRO_GetFullScale+0x82>
 80031e4:	a201      	add	r2, pc, #4	; (adr r2, 80031ec <LSM6DSOX_GYRO_GetFullScale+0x38>)
 80031e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ea:	bf00      	nop
 80031ec:	08003211 	.word	0x08003211
 80031f0:	08003209 	.word	0x08003209
 80031f4:	08003219 	.word	0x08003219
 80031f8:	08003237 	.word	0x08003237
 80031fc:	08003223 	.word	0x08003223
 8003200:	08003237 	.word	0x08003237
 8003204:	0800322d 	.word	0x0800322d
  {
    case LSM6DSOX_125dps:
      *FullScale =  125;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	227d      	movs	r2, #125	; 0x7d
 800320c:	601a      	str	r2, [r3, #0]
      break;
 800320e:	e016      	b.n	800323e <LSM6DSOX_GYRO_GetFullScale+0x8a>

    case LSM6DSOX_250dps:
      *FullScale =  250;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	22fa      	movs	r2, #250	; 0xfa
 8003214:	601a      	str	r2, [r3, #0]
      break;
 8003216:	e012      	b.n	800323e <LSM6DSOX_GYRO_GetFullScale+0x8a>

    case LSM6DSOX_500dps:
      *FullScale =  500;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800321e:	601a      	str	r2, [r3, #0]
      break;
 8003220:	e00d      	b.n	800323e <LSM6DSOX_GYRO_GetFullScale+0x8a>

    case LSM6DSOX_1000dps:
      *FullScale = 1000;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003228:	601a      	str	r2, [r3, #0]
      break;
 800322a:	e008      	b.n	800323e <LSM6DSOX_GYRO_GetFullScale+0x8a>

    case LSM6DSOX_2000dps:
      *FullScale = 2000;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003232:	601a      	str	r2, [r3, #0]
      break;
 8003234:	e003      	b.n	800323e <LSM6DSOX_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSOX_ERROR;
 8003236:	f04f 33ff 	mov.w	r3, #4294967295
 800323a:	60fb      	str	r3, [r7, #12]
      break;
 800323c:	bf00      	nop
  }

  return ret;
 800323e:	68fb      	ldr	r3, [r7, #12]
}
 8003240:	4618      	mov	r0, r3
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <LSM6DSOX_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_GYRO_SetFullScale(LSM6DSOX_Object_t *pObj, int32_t FullScale)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  lsm6dsox_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSOX_125dps
           : (FullScale <= 250)  ? LSM6DSOX_250dps
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	2b7d      	cmp	r3, #125	; 0x7d
 8003256:	dd12      	ble.n	800327e <LSM6DSOX_GYRO_SetFullScale+0x36>
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	2bfa      	cmp	r3, #250	; 0xfa
 800325c:	dd0d      	ble.n	800327a <LSM6DSOX_GYRO_SetFullScale+0x32>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003264:	dd07      	ble.n	8003276 <LSM6DSOX_GYRO_SetFullScale+0x2e>
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800326c:	dc01      	bgt.n	8003272 <LSM6DSOX_GYRO_SetFullScale+0x2a>
 800326e:	2304      	movs	r3, #4
 8003270:	e006      	b.n	8003280 <LSM6DSOX_GYRO_SetFullScale+0x38>
 8003272:	2306      	movs	r3, #6
 8003274:	e004      	b.n	8003280 <LSM6DSOX_GYRO_SetFullScale+0x38>
 8003276:	2302      	movs	r3, #2
 8003278:	e002      	b.n	8003280 <LSM6DSOX_GYRO_SetFullScale+0x38>
 800327a:	2300      	movs	r3, #0
 800327c:	e000      	b.n	8003280 <LSM6DSOX_GYRO_SetFullScale+0x38>
 800327e:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSOX_125dps
 8003280:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSOX_500dps
           : (FullScale <= 1000) ? LSM6DSOX_1000dps
           :                       LSM6DSOX_2000dps;

  if (lsm6dsox_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSOX_OK)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	331c      	adds	r3, #28
 8003286:	7bfa      	ldrb	r2, [r7, #15]
 8003288:	4611      	mov	r1, r2
 800328a:	4618      	mov	r0, r3
 800328c:	f000 fd36 	bl	8003cfc <lsm6dsox_gy_full_scale_set>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d002      	beq.n	800329c <LSM6DSOX_GYRO_SetFullScale+0x54>
  {
    return LSM6DSOX_ERROR;
 8003296:	f04f 33ff 	mov.w	r3, #4294967295
 800329a:	e000      	b.n	800329e <LSM6DSOX_GYRO_SetFullScale+0x56>
  }

  return LSM6DSOX_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <LSM6DSOX_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_GYRO_GetAxesRaw(LSM6DSOX_Object_t *pObj, LSM6DSOX_AxesRaw_t *Value)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b084      	sub	sp, #16
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
 80032ae:	6039      	str	r1, [r7, #0]
  lsm6dsox_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsox_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSOX_OK)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	331c      	adds	r3, #28
 80032b4:	f107 0208 	add.w	r2, r7, #8
 80032b8:	4611      	mov	r1, r2
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 ff82 	bl	80041c4 <lsm6dsox_angular_rate_raw_get>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d002      	beq.n	80032cc <LSM6DSOX_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSOX_ERROR;
 80032c6:	f04f 33ff 	mov.w	r3, #4294967295
 80032ca:	e00c      	b.n	80032e6 <LSM6DSOX_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80032cc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80032d4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80032dc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	809a      	strh	r2, [r3, #4]

  return LSM6DSOX_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <LSM6DSOX_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_GYRO_GetAxes(LSM6DSOX_Object_t *pObj, LSM6DSOX_Axes_t *AngularRate)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b086      	sub	sp, #24
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
 80032f6:	6039      	str	r1, [r7, #0]
  lsm6dsox_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsox_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSOX_OK)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	331c      	adds	r3, #28
 80032fc:	f107 0210 	add.w	r2, r7, #16
 8003300:	4611      	mov	r1, r2
 8003302:	4618      	mov	r0, r3
 8003304:	f000 ff5e 	bl	80041c4 <lsm6dsox_angular_rate_raw_get>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d002      	beq.n	8003314 <LSM6DSOX_GYRO_GetAxes+0x26>
  {
    return LSM6DSOX_ERROR;
 800330e:	f04f 33ff 	mov.w	r3, #4294967295
 8003312:	e042      	b.n	800339a <LSM6DSOX_GYRO_GetAxes+0xac>
  }

  /* Get LSM6DSOX actual sensitivity. */
  if (LSM6DSOX_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSOX_OK)
 8003314:	f107 030c 	add.w	r3, r7, #12
 8003318:	4619      	mov	r1, r3
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7ff fde6 	bl	8002eec <LSM6DSOX_GYRO_GetSensitivity>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d002      	beq.n	800332c <LSM6DSOX_GYRO_GetAxes+0x3e>
  {
    return LSM6DSOX_ERROR;
 8003326:	f04f 33ff 	mov.w	r3, #4294967295
 800332a:	e036      	b.n	800339a <LSM6DSOX_GYRO_GetAxes+0xac>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800332c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003330:	4618      	mov	r0, r3
 8003332:	f7fd fceb 	bl	8000d0c <__aeabi_i2f>
 8003336:	4602      	mov	r2, r0
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4619      	mov	r1, r3
 800333c:	4610      	mov	r0, r2
 800333e:	f7fd fd39 	bl	8000db4 <__aeabi_fmul>
 8003342:	4603      	mov	r3, r0
 8003344:	4618      	mov	r0, r3
 8003346:	f7fd ff11 	bl	800116c <__aeabi_f2iz>
 800334a:	4602      	mov	r2, r0
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003350:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003354:	4618      	mov	r0, r3
 8003356:	f7fd fcd9 	bl	8000d0c <__aeabi_i2f>
 800335a:	4602      	mov	r2, r0
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4619      	mov	r1, r3
 8003360:	4610      	mov	r0, r2
 8003362:	f7fd fd27 	bl	8000db4 <__aeabi_fmul>
 8003366:	4603      	mov	r3, r0
 8003368:	4618      	mov	r0, r3
 800336a:	f7fd feff 	bl	800116c <__aeabi_f2iz>
 800336e:	4602      	mov	r2, r0
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003374:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003378:	4618      	mov	r0, r3
 800337a:	f7fd fcc7 	bl	8000d0c <__aeabi_i2f>
 800337e:	4602      	mov	r2, r0
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4619      	mov	r1, r3
 8003384:	4610      	mov	r0, r2
 8003386:	f7fd fd15 	bl	8000db4 <__aeabi_fmul>
 800338a:	4603      	mov	r3, r0
 800338c:	4618      	mov	r0, r3
 800338e:	f7fd feed 	bl	800116c <__aeabi_f2iz>
 8003392:	4602      	mov	r2, r0
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	609a      	str	r2, [r3, #8]

  return LSM6DSOX_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3718      	adds	r7, #24
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <LSM6DSOX_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSOX_Write_Reg(LSM6DSOX_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b082      	sub	sp, #8
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
 80033aa:	460b      	mov	r3, r1
 80033ac:	70fb      	strb	r3, [r7, #3]
 80033ae:	4613      	mov	r3, r2
 80033b0:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsox_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSOX_OK)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f103 001c 	add.w	r0, r3, #28
 80033b8:	1cba      	adds	r2, r7, #2
 80033ba:	78f9      	ldrb	r1, [r7, #3]
 80033bc:	2301      	movs	r3, #1
 80033be:	f000 fa4b 	bl	8003858 <lsm6dsox_write_reg>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d002      	beq.n	80033ce <LSM6DSOX_Write_Reg+0x2c>
  {
    return LSM6DSOX_ERROR;
 80033c8:	f04f 33ff 	mov.w	r3, #4294967295
 80033cc:	e000      	b.n	80033d0 <LSM6DSOX_Write_Reg+0x2e>
  }

  return LSM6DSOX_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_ACC_SetOutputDataRate_When_Enabled(LSM6DSOX_Object_t *pObj, float Odr)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  lsm6dsox_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSOX_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSOX_XL_ODR_12Hz5
 80033e2:	4937      	ldr	r1, [pc, #220]	; (80034c0 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xe8>)
 80033e4:	6838      	ldr	r0, [r7, #0]
 80033e6:	f7fd fe8d 	bl	8001104 <__aeabi_fcmple>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x1c>
 80033f0:	230b      	movs	r3, #11
 80033f2:	e051      	b.n	8003498 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xc0>
 80033f4:	4933      	ldr	r1, [pc, #204]	; (80034c4 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xec>)
 80033f6:	6838      	ldr	r0, [r7, #0]
 80033f8:	f7fd fe84 	bl	8001104 <__aeabi_fcmple>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x2e>
 8003402:	2301      	movs	r3, #1
 8003404:	e048      	b.n	8003498 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8003406:	4930      	ldr	r1, [pc, #192]	; (80034c8 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xf0>)
 8003408:	6838      	ldr	r0, [r7, #0]
 800340a:	f7fd fe7b 	bl	8001104 <__aeabi_fcmple>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x40>
 8003414:	2302      	movs	r3, #2
 8003416:	e03f      	b.n	8003498 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8003418:	492c      	ldr	r1, [pc, #176]	; (80034cc <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xf4>)
 800341a:	6838      	ldr	r0, [r7, #0]
 800341c:	f7fd fe72 	bl	8001104 <__aeabi_fcmple>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x52>
 8003426:	2303      	movs	r3, #3
 8003428:	e036      	b.n	8003498 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xc0>
 800342a:	4929      	ldr	r1, [pc, #164]	; (80034d0 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xf8>)
 800342c:	6838      	ldr	r0, [r7, #0]
 800342e:	f7fd fe69 	bl	8001104 <__aeabi_fcmple>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d001      	beq.n	800343c <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x64>
 8003438:	2304      	movs	r3, #4
 800343a:	e02d      	b.n	8003498 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xc0>
 800343c:	4925      	ldr	r1, [pc, #148]	; (80034d4 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xfc>)
 800343e:	6838      	ldr	r0, [r7, #0]
 8003440:	f7fd fe60 	bl	8001104 <__aeabi_fcmple>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x76>
 800344a:	2305      	movs	r3, #5
 800344c:	e024      	b.n	8003498 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xc0>
 800344e:	4922      	ldr	r1, [pc, #136]	; (80034d8 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x100>)
 8003450:	6838      	ldr	r0, [r7, #0]
 8003452:	f7fd fe57 	bl	8001104 <__aeabi_fcmple>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x88>
 800345c:	2306      	movs	r3, #6
 800345e:	e01b      	b.n	8003498 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8003460:	491e      	ldr	r1, [pc, #120]	; (80034dc <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x104>)
 8003462:	6838      	ldr	r0, [r7, #0]
 8003464:	f7fd fe4e 	bl	8001104 <__aeabi_fcmple>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x9a>
 800346e:	2307      	movs	r3, #7
 8003470:	e012      	b.n	8003498 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8003472:	491b      	ldr	r1, [pc, #108]	; (80034e0 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x108>)
 8003474:	6838      	ldr	r0, [r7, #0]
 8003476:	f7fd fe45 	bl	8001104 <__aeabi_fcmple>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xac>
 8003480:	2308      	movs	r3, #8
 8003482:	e009      	b.n	8003498 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8003484:	4917      	ldr	r1, [pc, #92]	; (80034e4 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x10c>)
 8003486:	6838      	ldr	r0, [r7, #0]
 8003488:	f7fd fe3c 	bl	8001104 <__aeabi_fcmple>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xbe>
 8003492:	2309      	movs	r3, #9
 8003494:	e000      	b.n	8003498 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8003496:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSOX_XL_ODR_1Hz6
 8003498:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSOX_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSOX_XL_ODR_3333Hz
            :                    LSM6DSOX_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dsox_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSOX_OK)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	331c      	adds	r3, #28
 800349e:	7bfa      	ldrb	r2, [r7, #15]
 80034a0:	4611      	mov	r1, r2
 80034a2:	4618      	mov	r0, r3
 80034a4:	f000 fa4e 	bl	8003944 <lsm6dsox_xl_data_rate_set>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d002      	beq.n	80034b4 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xdc>
  {
    return LSM6DSOX_ERROR;
 80034ae:	f04f 33ff 	mov.w	r3, #4294967295
 80034b2:	e000      	b.n	80034b6 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xde>
  }

  return LSM6DSOX_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	3fcccccd 	.word	0x3fcccccd
 80034c4:	41480000 	.word	0x41480000
 80034c8:	41d00000 	.word	0x41d00000
 80034cc:	42500000 	.word	0x42500000
 80034d0:	42d00000 	.word	0x42d00000
 80034d4:	43500000 	.word	0x43500000
 80034d8:	43d08000 	.word	0x43d08000
 80034dc:	44504000 	.word	0x44504000
 80034e0:	44d06000 	.word	0x44d06000
 80034e4:	45505000 	.word	0x45505000

080034e8 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_ACC_SetOutputDataRate_When_Disabled(LSM6DSOX_Object_t *pObj, float Odr)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSOX_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSOX_XL_ODR_12Hz5
 80034f2:	4931      	ldr	r1, [pc, #196]	; (80035b8 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xd0>)
 80034f4:	6838      	ldr	r0, [r7, #0]
 80034f6:	f7fd fe05 	bl	8001104 <__aeabi_fcmple>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x1c>
 8003500:	230b      	movs	r3, #11
 8003502:	e051      	b.n	80035a8 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8003504:	492d      	ldr	r1, [pc, #180]	; (80035bc <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xd4>)
 8003506:	6838      	ldr	r0, [r7, #0]
 8003508:	f7fd fdfc 	bl	8001104 <__aeabi_fcmple>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x2e>
 8003512:	2301      	movs	r3, #1
 8003514:	e048      	b.n	80035a8 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8003516:	492a      	ldr	r1, [pc, #168]	; (80035c0 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xd8>)
 8003518:	6838      	ldr	r0, [r7, #0]
 800351a:	f7fd fdf3 	bl	8001104 <__aeabi_fcmple>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x40>
 8003524:	2302      	movs	r3, #2
 8003526:	e03f      	b.n	80035a8 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8003528:	4926      	ldr	r1, [pc, #152]	; (80035c4 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xdc>)
 800352a:	6838      	ldr	r0, [r7, #0]
 800352c:	f7fd fdea 	bl	8001104 <__aeabi_fcmple>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x52>
 8003536:	2303      	movs	r3, #3
 8003538:	e036      	b.n	80035a8 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xc0>
 800353a:	4923      	ldr	r1, [pc, #140]	; (80035c8 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xe0>)
 800353c:	6838      	ldr	r0, [r7, #0]
 800353e:	f7fd fde1 	bl	8001104 <__aeabi_fcmple>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d001      	beq.n	800354c <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x64>
 8003548:	2304      	movs	r3, #4
 800354a:	e02d      	b.n	80035a8 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xc0>
 800354c:	491f      	ldr	r1, [pc, #124]	; (80035cc <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xe4>)
 800354e:	6838      	ldr	r0, [r7, #0]
 8003550:	f7fd fdd8 	bl	8001104 <__aeabi_fcmple>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x76>
 800355a:	2305      	movs	r3, #5
 800355c:	e024      	b.n	80035a8 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xc0>
 800355e:	491c      	ldr	r1, [pc, #112]	; (80035d0 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xe8>)
 8003560:	6838      	ldr	r0, [r7, #0]
 8003562:	f7fd fdcf 	bl	8001104 <__aeabi_fcmple>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x88>
 800356c:	2306      	movs	r3, #6
 800356e:	e01b      	b.n	80035a8 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8003570:	4918      	ldr	r1, [pc, #96]	; (80035d4 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xec>)
 8003572:	6838      	ldr	r0, [r7, #0]
 8003574:	f7fd fdc6 	bl	8001104 <__aeabi_fcmple>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x9a>
 800357e:	2307      	movs	r3, #7
 8003580:	e012      	b.n	80035a8 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8003582:	4915      	ldr	r1, [pc, #84]	; (80035d8 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 8003584:	6838      	ldr	r0, [r7, #0]
 8003586:	f7fd fdbd 	bl	8001104 <__aeabi_fcmple>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xac>
 8003590:	2308      	movs	r3, #8
 8003592:	e009      	b.n	80035a8 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8003594:	4911      	ldr	r1, [pc, #68]	; (80035dc <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8003596:	6838      	ldr	r0, [r7, #0]
 8003598:	f7fd fdb4 	bl	8001104 <__aeabi_fcmple>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xbe>
 80035a2:	2309      	movs	r3, #9
 80035a4:	e000      	b.n	80035a8 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xc0>
 80035a6:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSOX_XL_ODR_1Hz6
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                  : (Odr <=  833.0f) ? LSM6DSOX_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSOX_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSOX_XL_ODR_3333Hz
                  :                    LSM6DSOX_XL_ODR_6667Hz;

  return LSM6DSOX_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	3fcccccd 	.word	0x3fcccccd
 80035bc:	41480000 	.word	0x41480000
 80035c0:	41d00000 	.word	0x41d00000
 80035c4:	42500000 	.word	0x42500000
 80035c8:	42d00000 	.word	0x42d00000
 80035cc:	43500000 	.word	0x43500000
 80035d0:	43d08000 	.word	0x43d08000
 80035d4:	44504000 	.word	0x44504000
 80035d8:	44d06000 	.word	0x44d06000
 80035dc:	45505000 	.word	0x45505000

080035e0 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled(LSM6DSOX_Object_t *pObj, float Odr)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  lsm6dsox_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSOX_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSOX_GY_ODR_26Hz
 80035ea:	4932      	ldr	r1, [pc, #200]	; (80036b4 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xd4>)
 80035ec:	6838      	ldr	r0, [r7, #0]
 80035ee:	f7fd fd89 	bl	8001104 <__aeabi_fcmple>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0x1c>
 80035f8:	2301      	movs	r3, #1
 80035fa:	e048      	b.n	800368e <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xae>
 80035fc:	492e      	ldr	r1, [pc, #184]	; (80036b8 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xd8>)
 80035fe:	6838      	ldr	r0, [r7, #0]
 8003600:	f7fd fd80 	bl	8001104 <__aeabi_fcmple>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0x2e>
 800360a:	2302      	movs	r3, #2
 800360c:	e03f      	b.n	800368e <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xae>
 800360e:	492b      	ldr	r1, [pc, #172]	; (80036bc <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xdc>)
 8003610:	6838      	ldr	r0, [r7, #0]
 8003612:	f7fd fd77 	bl	8001104 <__aeabi_fcmple>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0x40>
 800361c:	2303      	movs	r3, #3
 800361e:	e036      	b.n	800368e <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8003620:	4927      	ldr	r1, [pc, #156]	; (80036c0 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xe0>)
 8003622:	6838      	ldr	r0, [r7, #0]
 8003624:	f7fd fd6e 	bl	8001104 <__aeabi_fcmple>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0x52>
 800362e:	2304      	movs	r3, #4
 8003630:	e02d      	b.n	800368e <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8003632:	4924      	ldr	r1, [pc, #144]	; (80036c4 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xe4>)
 8003634:	6838      	ldr	r0, [r7, #0]
 8003636:	f7fd fd65 	bl	8001104 <__aeabi_fcmple>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8003640:	2305      	movs	r3, #5
 8003642:	e024      	b.n	800368e <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8003644:	4920      	ldr	r1, [pc, #128]	; (80036c8 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xe8>)
 8003646:	6838      	ldr	r0, [r7, #0]
 8003648:	f7fd fd5c 	bl	8001104 <__aeabi_fcmple>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0x76>
 8003652:	2306      	movs	r3, #6
 8003654:	e01b      	b.n	800368e <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8003656:	491d      	ldr	r1, [pc, #116]	; (80036cc <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xec>)
 8003658:	6838      	ldr	r0, [r7, #0]
 800365a:	f7fd fd53 	bl	8001104 <__aeabi_fcmple>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0x88>
 8003664:	2307      	movs	r3, #7
 8003666:	e012      	b.n	800368e <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8003668:	4919      	ldr	r1, [pc, #100]	; (80036d0 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xf0>)
 800366a:	6838      	ldr	r0, [r7, #0]
 800366c:	f7fd fd4a 	bl	8001104 <__aeabi_fcmple>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0x9a>
 8003676:	2308      	movs	r3, #8
 8003678:	e009      	b.n	800368e <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xae>
 800367a:	4916      	ldr	r1, [pc, #88]	; (80036d4 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xf4>)
 800367c:	6838      	ldr	r0, [r7, #0]
 800367e:	f7fd fd41 	bl	8001104 <__aeabi_fcmple>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xac>
 8003688:	2309      	movs	r3, #9
 800368a:	e000      	b.n	800368e <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xae>
 800368c:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSOX_GY_ODR_12Hz5
 800368e:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSOX_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSOX_GY_ODR_3333Hz
            :                    LSM6DSOX_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dsox_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSOX_OK)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	331c      	adds	r3, #28
 8003694:	7bfa      	ldrb	r2, [r7, #15]
 8003696:	4611      	mov	r1, r2
 8003698:	4618      	mov	r0, r3
 800369a:	f000 fb97 	bl	8003dcc <lsm6dsox_gy_data_rate_set>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d002      	beq.n	80036aa <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xca>
  {
    return LSM6DSOX_ERROR;
 80036a4:	f04f 33ff 	mov.w	r3, #4294967295
 80036a8:	e000      	b.n	80036ac <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xcc>
  }

  return LSM6DSOX_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	41480000 	.word	0x41480000
 80036b8:	41d00000 	.word	0x41d00000
 80036bc:	42500000 	.word	0x42500000
 80036c0:	42d00000 	.word	0x42d00000
 80036c4:	43500000 	.word	0x43500000
 80036c8:	43d08000 	.word	0x43d08000
 80036cc:	44504000 	.word	0x44504000
 80036d0:	44d06000 	.word	0x44d06000
 80036d4:	45505000 	.word	0x45505000

080036d8 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled(LSM6DSOX_Object_t *pObj, float Odr)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSOX_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSOX_GY_ODR_26Hz
 80036e2:	492d      	ldr	r1, [pc, #180]	; (8003798 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xc0>)
 80036e4:	6838      	ldr	r0, [r7, #0]
 80036e6:	f7fd fd0d 	bl	8001104 <__aeabi_fcmple>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0x1c>
 80036f0:	2301      	movs	r3, #1
 80036f2:	e048      	b.n	8003786 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xae>
 80036f4:	4929      	ldr	r1, [pc, #164]	; (800379c <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xc4>)
 80036f6:	6838      	ldr	r0, [r7, #0]
 80036f8:	f7fd fd04 	bl	8001104 <__aeabi_fcmple>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0x2e>
 8003702:	2302      	movs	r3, #2
 8003704:	e03f      	b.n	8003786 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8003706:	4926      	ldr	r1, [pc, #152]	; (80037a0 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xc8>)
 8003708:	6838      	ldr	r0, [r7, #0]
 800370a:	f7fd fcfb 	bl	8001104 <__aeabi_fcmple>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0x40>
 8003714:	2303      	movs	r3, #3
 8003716:	e036      	b.n	8003786 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8003718:	4922      	ldr	r1, [pc, #136]	; (80037a4 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xcc>)
 800371a:	6838      	ldr	r0, [r7, #0]
 800371c:	f7fd fcf2 	bl	8001104 <__aeabi_fcmple>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0x52>
 8003726:	2304      	movs	r3, #4
 8003728:	e02d      	b.n	8003786 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xae>
 800372a:	491f      	ldr	r1, [pc, #124]	; (80037a8 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xd0>)
 800372c:	6838      	ldr	r0, [r7, #0]
 800372e:	f7fd fce9 	bl	8001104 <__aeabi_fcmple>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8003738:	2305      	movs	r3, #5
 800373a:	e024      	b.n	8003786 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xae>
 800373c:	491b      	ldr	r1, [pc, #108]	; (80037ac <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xd4>)
 800373e:	6838      	ldr	r0, [r7, #0]
 8003740:	f7fd fce0 	bl	8001104 <__aeabi_fcmple>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0x76>
 800374a:	2306      	movs	r3, #6
 800374c:	e01b      	b.n	8003786 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xae>
 800374e:	4918      	ldr	r1, [pc, #96]	; (80037b0 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xd8>)
 8003750:	6838      	ldr	r0, [r7, #0]
 8003752:	f7fd fcd7 	bl	8001104 <__aeabi_fcmple>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0x88>
 800375c:	2307      	movs	r3, #7
 800375e:	e012      	b.n	8003786 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8003760:	4914      	ldr	r1, [pc, #80]	; (80037b4 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xdc>)
 8003762:	6838      	ldr	r0, [r7, #0]
 8003764:	f7fd fcce 	bl	8001104 <__aeabi_fcmple>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0x9a>
 800376e:	2308      	movs	r3, #8
 8003770:	e009      	b.n	8003786 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8003772:	4911      	ldr	r1, [pc, #68]	; (80037b8 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xe0>)
 8003774:	6838      	ldr	r0, [r7, #0]
 8003776:	f7fd fcc5 	bl	8001104 <__aeabi_fcmple>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xac>
 8003780:	2309      	movs	r3, #9
 8003782:	e000      	b.n	8003786 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8003784:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSOX_GY_ODR_12Hz5
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                   : (Odr <=  833.0f) ? LSM6DSOX_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSOX_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSOX_GY_ODR_3333Hz
                   :                    LSM6DSOX_GY_ODR_6667Hz;

  return LSM6DSOX_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	41480000 	.word	0x41480000
 800379c:	41d00000 	.word	0x41d00000
 80037a0:	42500000 	.word	0x42500000
 80037a4:	42d00000 	.word	0x42d00000
 80037a8:	43500000 	.word	0x43500000
 80037ac:	43d08000 	.word	0x43d08000
 80037b0:	44504000 	.word	0x44504000
 80037b4:	44d06000 	.word	0x44d06000
 80037b8:	45505000 	.word	0x45505000

080037bc <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80037bc:	b590      	push	{r4, r7, lr}
 80037be:	b087      	sub	sp, #28
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	607a      	str	r2, [r7, #4]
 80037c6:	461a      	mov	r2, r3
 80037c8:	460b      	mov	r3, r1
 80037ca:	72fb      	strb	r3, [r7, #11]
 80037cc:	4613      	mov	r3, r2
 80037ce:	813b      	strh	r3, [r7, #8]
  LSM6DSOX_Object_t *pObj = (LSM6DSOX_Object_t *)Handle;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	695c      	ldr	r4, [r3, #20]
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	7b1b      	ldrb	r3, [r3, #12]
 80037dc:	b298      	uxth	r0, r3
 80037de:	7afb      	ldrb	r3, [r7, #11]
 80037e0:	b299      	uxth	r1, r3
 80037e2:	893b      	ldrh	r3, [r7, #8]
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	47a0      	blx	r4
 80037e8:	4603      	mov	r3, r0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	371c      	adds	r7, #28
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd90      	pop	{r4, r7, pc}

080037f2 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80037f2:	b590      	push	{r4, r7, lr}
 80037f4:	b087      	sub	sp, #28
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	60f8      	str	r0, [r7, #12]
 80037fa:	607a      	str	r2, [r7, #4]
 80037fc:	461a      	mov	r2, r3
 80037fe:	460b      	mov	r3, r1
 8003800:	72fb      	strb	r3, [r7, #11]
 8003802:	4613      	mov	r3, r2
 8003804:	813b      	strh	r3, [r7, #8]
  LSM6DSOX_Object_t *pObj = (LSM6DSOX_Object_t *)Handle;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	691c      	ldr	r4, [r3, #16]
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	7b1b      	ldrb	r3, [r3, #12]
 8003812:	b298      	uxth	r0, r3
 8003814:	7afb      	ldrb	r3, [r7, #11]
 8003816:	b299      	uxth	r1, r3
 8003818:	893b      	ldrh	r3, [r7, #8]
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	47a0      	blx	r4
 800381e:	4603      	mov	r3, r0
}
 8003820:	4618      	mov	r0, r3
 8003822:	371c      	adds	r7, #28
 8003824:	46bd      	mov	sp, r7
 8003826:	bd90      	pop	{r4, r7, pc}

08003828 <lsm6dsox_read_reg>:
  *
  */
int32_t lsm6dsox_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8003828:	b590      	push	{r4, r7, lr}
 800382a:	b087      	sub	sp, #28
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	607a      	str	r2, [r7, #4]
 8003832:	461a      	mov	r2, r3
 8003834:	460b      	mov	r3, r1
 8003836:	72fb      	strb	r3, [r7, #11]
 8003838:	4613      	mov	r3, r2
 800383a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	685c      	ldr	r4, [r3, #4]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6898      	ldr	r0, [r3, #8]
 8003844:	893b      	ldrh	r3, [r7, #8]
 8003846:	7af9      	ldrb	r1, [r7, #11]
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	47a0      	blx	r4
 800384c:	6178      	str	r0, [r7, #20]

  return ret;
 800384e:	697b      	ldr	r3, [r7, #20]
}
 8003850:	4618      	mov	r0, r3
 8003852:	371c      	adds	r7, #28
 8003854:	46bd      	mov	sp, r7
 8003856:	bd90      	pop	{r4, r7, pc}

08003858 <lsm6dsox_write_reg>:
  *
  */
int32_t lsm6dsox_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8003858:	b590      	push	{r4, r7, lr}
 800385a:	b087      	sub	sp, #28
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	607a      	str	r2, [r7, #4]
 8003862:	461a      	mov	r2, r3
 8003864:	460b      	mov	r3, r1
 8003866:	72fb      	strb	r3, [r7, #11]
 8003868:	4613      	mov	r3, r2
 800386a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681c      	ldr	r4, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6898      	ldr	r0, [r3, #8]
 8003874:	893b      	ldrh	r3, [r7, #8]
 8003876:	7af9      	ldrb	r1, [r7, #11]
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	47a0      	blx	r4
 800387c:	6178      	str	r0, [r7, #20]

  return ret;
 800387e:	697b      	ldr	r3, [r7, #20]
}
 8003880:	4618      	mov	r0, r3
 8003882:	371c      	adds	r7, #28
 8003884:	46bd      	mov	sp, r7
 8003886:	bd90      	pop	{r4, r7, pc}

08003888 <lsm6dsox_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_xl_full_scale_set(stmdev_ctx_t *ctx,
                                   lsm6dsox_fs_xl_t val)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 8003894:	f107 0208 	add.w	r2, r7, #8
 8003898:	2301      	movs	r3, #1
 800389a:	2110      	movs	r1, #16
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f7ff ffc3 	bl	8003828 <lsm6dsox_read_reg>
 80038a2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10f      	bne.n	80038ca <lsm6dsox_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 80038aa:	78fb      	ldrb	r3, [r7, #3]
 80038ac:	f003 0303 	and.w	r3, r3, #3
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	7a3b      	ldrb	r3, [r7, #8]
 80038b4:	f362 0383 	bfi	r3, r2, #2, #2
 80038b8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 80038ba:	f107 0208 	add.w	r2, r7, #8
 80038be:	2301      	movs	r3, #1
 80038c0:	2110      	movs	r1, #16
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7ff ffc8 	bl	8003858 <lsm6dsox_write_reg>
 80038c8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80038ca:	68fb      	ldr	r3, [r7, #12]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <lsm6dsox_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_xl_full_scale_get(stmdev_ctx_t *ctx,
                                   lsm6dsox_fs_xl_t *val)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  lsm6dsox_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 80038de:	f107 0208 	add.w	r2, r7, #8
 80038e2:	2301      	movs	r3, #1
 80038e4:	2110      	movs	r1, #16
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7ff ff9e 	bl	8003828 <lsm6dsox_read_reg>
 80038ec:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 80038ee:	7a3b      	ldrb	r3, [r7, #8]
 80038f0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b03      	cmp	r3, #3
 80038f8:	d81a      	bhi.n	8003930 <lsm6dsox_xl_full_scale_get+0x5c>
 80038fa:	a201      	add	r2, pc, #4	; (adr r2, 8003900 <lsm6dsox_xl_full_scale_get+0x2c>)
 80038fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003900:	08003911 	.word	0x08003911
 8003904:	08003919 	.word	0x08003919
 8003908:	08003921 	.word	0x08003921
 800390c:	08003929 	.word	0x08003929
  {
    case LSM6DSOX_2g:
      *val = LSM6DSOX_2g;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	2200      	movs	r2, #0
 8003914:	701a      	strb	r2, [r3, #0]
      break;
 8003916:	e00f      	b.n	8003938 <lsm6dsox_xl_full_scale_get+0x64>

    case LSM6DSOX_16g:
      *val = LSM6DSOX_16g;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	2201      	movs	r2, #1
 800391c:	701a      	strb	r2, [r3, #0]
      break;
 800391e:	e00b      	b.n	8003938 <lsm6dsox_xl_full_scale_get+0x64>

    case LSM6DSOX_4g:
      *val = LSM6DSOX_4g;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	2202      	movs	r2, #2
 8003924:	701a      	strb	r2, [r3, #0]
      break;
 8003926:	e007      	b.n	8003938 <lsm6dsox_xl_full_scale_get+0x64>

    case LSM6DSOX_8g:
      *val = LSM6DSOX_8g;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	2203      	movs	r2, #3
 800392c:	701a      	strb	r2, [r3, #0]
      break;
 800392e:	e003      	b.n	8003938 <lsm6dsox_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSOX_2g;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	2200      	movs	r2, #0
 8003934:	701a      	strb	r2, [r3, #0]
      break;
 8003936:	bf00      	nop
  }

  return ret;
 8003938:	68fb      	ldr	r3, [r7, #12]
}
 800393a:	4618      	mov	r0, r3
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop

08003944 <lsm6dsox_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_xl_data_rate_set(stmdev_ctx_t *ctx,
                                  lsm6dsox_odr_xl_t val)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b088      	sub	sp, #32
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	460b      	mov	r3, r1
 800394e:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_odr_xl_t odr_xl =  val;
 8003950:	78fb      	ldrb	r3, [r7, #3]
 8003952:	77fb      	strb	r3, [r7, #31]
  lsm6dsox_mlc_odr_t mlc_odr;
  lsm6dsox_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsox_fsm_enable_get(ctx, &fsm_enable);
 8003954:	f107 0314 	add.w	r3, r7, #20
 8003958:	4619      	mov	r1, r3
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 fd91 	bl	8004482 <lsm6dsox_fsm_enable_get>
 8003960:	61b8      	str	r0, [r7, #24]

  if (ret == 0)
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	2b00      	cmp	r3, #0
 8003966:	f040 80c4 	bne.w	8003af2 <lsm6dsox_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800396a:	7d3b      	ldrb	r3, [r7, #20]
 800396c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003970:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8003972:	7d3b      	ldrb	r3, [r7, #20]
 8003974:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003978:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800397a:	4313      	orrs	r3, r2
 800397c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800397e:	7d3b      	ldrb	r3, [r7, #20]
 8003980:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003984:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8003986:	4313      	orrs	r3, r2
 8003988:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800398a:	7d3b      	ldrb	r3, [r7, #20]
 800398c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003990:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8003992:	4313      	orrs	r3, r2
 8003994:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8003996:	7d3b      	ldrb	r3, [r7, #20]
 8003998:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800399c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800399e:	4313      	orrs	r3, r2
 80039a0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80039a2:	7d3b      	ldrb	r3, [r7, #20]
 80039a4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80039a8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80039aa:	4313      	orrs	r3, r2
 80039ac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80039ae:	7d3b      	ldrb	r3, [r7, #20]
 80039b0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80039b4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80039b6:	4313      	orrs	r3, r2
 80039b8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80039ba:	7d3b      	ldrb	r3, [r7, #20]
 80039bc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80039c0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80039c2:	4313      	orrs	r3, r2
 80039c4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80039c6:	7d7b      	ldrb	r3, [r7, #21]
 80039c8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80039cc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80039ce:	4313      	orrs	r3, r2
 80039d0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80039d2:	7d7b      	ldrb	r3, [r7, #21]
 80039d4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80039d8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80039da:	4313      	orrs	r3, r2
 80039dc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80039de:	7d7b      	ldrb	r3, [r7, #21]
 80039e0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80039e4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80039e6:	4313      	orrs	r3, r2
 80039e8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80039ea:	7d7b      	ldrb	r3, [r7, #21]
 80039ec:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80039f0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80039f2:	4313      	orrs	r3, r2
 80039f4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80039f6:	7d7b      	ldrb	r3, [r7, #21]
 80039f8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80039fc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80039fe:	4313      	orrs	r3, r2
 8003a00:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8003a02:	7d7b      	ldrb	r3, [r7, #21]
 8003a04:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003a08:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8003a0e:	7d7b      	ldrb	r3, [r7, #21]
 8003a10:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003a14:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8003a16:	4313      	orrs	r3, r2
 8003a18:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8003a1a:	7d7b      	ldrb	r3, [r7, #21]
 8003a1c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003a20:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8003a22:	4313      	orrs	r3, r2
 8003a24:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d163      	bne.n	8003af2 <lsm6dsox_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsox_fsm_data_rate_get(ctx, &fsm_odr);
 8003a2a:	f107 0313 	add.w	r3, r7, #19
 8003a2e:	4619      	mov	r1, r3
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 fd47 	bl	80044c4 <lsm6dsox_fsm_data_rate_get>
 8003a36:	61b8      	str	r0, [r7, #24]

      if (ret == 0)
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d159      	bne.n	8003af2 <lsm6dsox_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8003a3e:	7cfb      	ldrb	r3, [r7, #19]
 8003a40:	2b03      	cmp	r3, #3
 8003a42:	d853      	bhi.n	8003aec <lsm6dsox_xl_data_rate_set+0x1a8>
 8003a44:	a201      	add	r2, pc, #4	; (adr r2, 8003a4c <lsm6dsox_xl_data_rate_set+0x108>)
 8003a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4a:	bf00      	nop
 8003a4c:	08003a5d 	.word	0x08003a5d
 8003a50:	08003a6f 	.word	0x08003a6f
 8003a54:	08003a8d 	.word	0x08003a8d
 8003a58:	08003ab7 	.word	0x08003ab7
        {
          case LSM6DSOX_ODR_FSM_12Hz5:
            if (val == LSM6DSOX_XL_ODR_OFF)
 8003a5c:	78fb      	ldrb	r3, [r7, #3]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d102      	bne.n	8003a68 <lsm6dsox_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSOX_XL_ODR_12Hz5;
 8003a62:	2301      	movs	r3, #1
 8003a64:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 8003a66:	e045      	b.n	8003af4 <lsm6dsox_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8003a68:	78fb      	ldrb	r3, [r7, #3]
 8003a6a:	77fb      	strb	r3, [r7, #31]
            break;
 8003a6c:	e042      	b.n	8003af4 <lsm6dsox_xl_data_rate_set+0x1b0>

          case LSM6DSOX_ODR_FSM_26Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 8003a6e:	78fb      	ldrb	r3, [r7, #3]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d102      	bne.n	8003a7a <lsm6dsox_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSOX_XL_ODR_26Hz;
 8003a74:	2302      	movs	r3, #2
 8003a76:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 8003a78:	e03c      	b.n	8003af4 <lsm6dsox_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 8003a7a:	78fb      	ldrb	r3, [r7, #3]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d102      	bne.n	8003a86 <lsm6dsox_xl_data_rate_set+0x142>
              odr_xl = LSM6DSOX_XL_ODR_26Hz;
 8003a80:	2302      	movs	r3, #2
 8003a82:	77fb      	strb	r3, [r7, #31]
            break;
 8003a84:	e036      	b.n	8003af4 <lsm6dsox_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8003a86:	78fb      	ldrb	r3, [r7, #3]
 8003a88:	77fb      	strb	r3, [r7, #31]
            break;
 8003a8a:	e033      	b.n	8003af4 <lsm6dsox_xl_data_rate_set+0x1b0>

          case LSM6DSOX_ODR_FSM_52Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 8003a8c:	78fb      	ldrb	r3, [r7, #3]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d102      	bne.n	8003a98 <lsm6dsox_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 8003a92:	2303      	movs	r3, #3
 8003a94:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 8003a96:	e02d      	b.n	8003af4 <lsm6dsox_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 8003a98:	78fb      	ldrb	r3, [r7, #3]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d102      	bne.n	8003aa4 <lsm6dsox_xl_data_rate_set+0x160>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	77fb      	strb	r3, [r7, #31]
            break;
 8003aa2:	e027      	b.n	8003af4 <lsm6dsox_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_XL_ODR_26Hz)
 8003aa4:	78fb      	ldrb	r3, [r7, #3]
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d102      	bne.n	8003ab0 <lsm6dsox_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	77fb      	strb	r3, [r7, #31]
            break;
 8003aae:	e021      	b.n	8003af4 <lsm6dsox_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8003ab0:	78fb      	ldrb	r3, [r7, #3]
 8003ab2:	77fb      	strb	r3, [r7, #31]
            break;
 8003ab4:	e01e      	b.n	8003af4 <lsm6dsox_xl_data_rate_set+0x1b0>

          case LSM6DSOX_ODR_FSM_104Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 8003ab6:	78fb      	ldrb	r3, [r7, #3]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d102      	bne.n	8003ac2 <lsm6dsox_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8003abc:	2304      	movs	r3, #4
 8003abe:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 8003ac0:	e018      	b.n	8003af4 <lsm6dsox_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 8003ac2:	78fb      	ldrb	r3, [r7, #3]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d102      	bne.n	8003ace <lsm6dsox_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8003ac8:	2304      	movs	r3, #4
 8003aca:	77fb      	strb	r3, [r7, #31]
            break;
 8003acc:	e012      	b.n	8003af4 <lsm6dsox_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_XL_ODR_26Hz)
 8003ace:	78fb      	ldrb	r3, [r7, #3]
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d102      	bne.n	8003ada <lsm6dsox_xl_data_rate_set+0x196>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8003ad4:	2304      	movs	r3, #4
 8003ad6:	77fb      	strb	r3, [r7, #31]
            break;
 8003ad8:	e00c      	b.n	8003af4 <lsm6dsox_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_XL_ODR_52Hz)
 8003ada:	78fb      	ldrb	r3, [r7, #3]
 8003adc:	2b03      	cmp	r3, #3
 8003ade:	d102      	bne.n	8003ae6 <lsm6dsox_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8003ae0:	2304      	movs	r3, #4
 8003ae2:	77fb      	strb	r3, [r7, #31]
            break;
 8003ae4:	e006      	b.n	8003af4 <lsm6dsox_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8003ae6:	78fb      	ldrb	r3, [r7, #3]
 8003ae8:	77fb      	strb	r3, [r7, #31]
            break;
 8003aea:	e003      	b.n	8003af4 <lsm6dsox_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8003aec:	78fb      	ldrb	r3, [r7, #3]
 8003aee:	77fb      	strb	r3, [r7, #31]
            break;
 8003af0:	e000      	b.n	8003af4 <lsm6dsox_xl_data_rate_set+0x1b0>
        }
      }
 8003af2:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  emb_sens.mlc = PROPERTY_DISABLE;
 8003af4:	7c3b      	ldrb	r3, [r7, #16]
 8003af6:	f36f 03c3 	bfc	r3, #3, #1
 8003afa:	743b      	strb	r3, [r7, #16]

  if (ret == 0)
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d16f      	bne.n	8003be2 <lsm6dsox_xl_data_rate_set+0x29e>
  {
    lsm6dsox_embedded_sens_get(ctx, &emb_sens);
 8003b02:	f107 0310 	add.w	r3, r7, #16
 8003b06:	4619      	mov	r1, r3
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 fd6b 	bl	80045e4 <lsm6dsox_embedded_sens_get>

    if (emb_sens.mlc == PROPERTY_ENABLE)
 8003b0e:	7c3b      	ldrb	r3, [r7, #16]
 8003b10:	f003 0308 	and.w	r3, r3, #8
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d063      	beq.n	8003be2 <lsm6dsox_xl_data_rate_set+0x29e>
    {
      ret =  lsm6dsox_mlc_data_rate_get(ctx, &mlc_odr);
 8003b1a:	f107 030f 	add.w	r3, r7, #15
 8003b1e:	4619      	mov	r1, r3
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 fd17 	bl	8004554 <lsm6dsox_mlc_data_rate_get>
 8003b26:	61b8      	str	r0, [r7, #24]

      if (ret == 0)
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d159      	bne.n	8003be2 <lsm6dsox_xl_data_rate_set+0x29e>
      {
        switch (mlc_odr)
 8003b2e:	7bfb      	ldrb	r3, [r7, #15]
 8003b30:	2b03      	cmp	r3, #3
 8003b32:	d853      	bhi.n	8003bdc <lsm6dsox_xl_data_rate_set+0x298>
 8003b34:	a201      	add	r2, pc, #4	; (adr r2, 8003b3c <lsm6dsox_xl_data_rate_set+0x1f8>)
 8003b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3a:	bf00      	nop
 8003b3c:	08003b4d 	.word	0x08003b4d
 8003b40:	08003b5f 	.word	0x08003b5f
 8003b44:	08003b7d 	.word	0x08003b7d
 8003b48:	08003ba7 	.word	0x08003ba7
        {
          case LSM6DSOX_ODR_PRGS_12Hz5:
            if (val == LSM6DSOX_XL_ODR_OFF)
 8003b4c:	78fb      	ldrb	r3, [r7, #3]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d102      	bne.n	8003b58 <lsm6dsox_xl_data_rate_set+0x214>
            {
              odr_xl = LSM6DSOX_XL_ODR_12Hz5;
 8003b52:	2301      	movs	r3, #1
 8003b54:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 8003b56:	e045      	b.n	8003be4 <lsm6dsox_xl_data_rate_set+0x2a0>
              odr_xl = val;
 8003b58:	78fb      	ldrb	r3, [r7, #3]
 8003b5a:	77fb      	strb	r3, [r7, #31]
            break;
 8003b5c:	e042      	b.n	8003be4 <lsm6dsox_xl_data_rate_set+0x2a0>

          case LSM6DSOX_ODR_PRGS_26Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 8003b5e:	78fb      	ldrb	r3, [r7, #3]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d102      	bne.n	8003b6a <lsm6dsox_xl_data_rate_set+0x226>
            {
              odr_xl = LSM6DSOX_XL_ODR_26Hz;
 8003b64:	2302      	movs	r3, #2
 8003b66:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 8003b68:	e03c      	b.n	8003be4 <lsm6dsox_xl_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 8003b6a:	78fb      	ldrb	r3, [r7, #3]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d102      	bne.n	8003b76 <lsm6dsox_xl_data_rate_set+0x232>
              odr_xl = LSM6DSOX_XL_ODR_26Hz;
 8003b70:	2302      	movs	r3, #2
 8003b72:	77fb      	strb	r3, [r7, #31]
            break;
 8003b74:	e036      	b.n	8003be4 <lsm6dsox_xl_data_rate_set+0x2a0>
              odr_xl = val;
 8003b76:	78fb      	ldrb	r3, [r7, #3]
 8003b78:	77fb      	strb	r3, [r7, #31]
            break;
 8003b7a:	e033      	b.n	8003be4 <lsm6dsox_xl_data_rate_set+0x2a0>

          case LSM6DSOX_ODR_PRGS_52Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 8003b7c:	78fb      	ldrb	r3, [r7, #3]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d102      	bne.n	8003b88 <lsm6dsox_xl_data_rate_set+0x244>
            {
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 8003b82:	2303      	movs	r3, #3
 8003b84:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 8003b86:	e02d      	b.n	8003be4 <lsm6dsox_xl_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 8003b88:	78fb      	ldrb	r3, [r7, #3]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d102      	bne.n	8003b94 <lsm6dsox_xl_data_rate_set+0x250>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	77fb      	strb	r3, [r7, #31]
            break;
 8003b92:	e027      	b.n	8003be4 <lsm6dsox_xl_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_XL_ODR_26Hz)
 8003b94:	78fb      	ldrb	r3, [r7, #3]
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d102      	bne.n	8003ba0 <lsm6dsox_xl_data_rate_set+0x25c>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	77fb      	strb	r3, [r7, #31]
            break;
 8003b9e:	e021      	b.n	8003be4 <lsm6dsox_xl_data_rate_set+0x2a0>
              odr_xl = val;
 8003ba0:	78fb      	ldrb	r3, [r7, #3]
 8003ba2:	77fb      	strb	r3, [r7, #31]
            break;
 8003ba4:	e01e      	b.n	8003be4 <lsm6dsox_xl_data_rate_set+0x2a0>

          case LSM6DSOX_ODR_PRGS_104Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 8003ba6:	78fb      	ldrb	r3, [r7, #3]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d102      	bne.n	8003bb2 <lsm6dsox_xl_data_rate_set+0x26e>
            {
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8003bac:	2304      	movs	r3, #4
 8003bae:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 8003bb0:	e018      	b.n	8003be4 <lsm6dsox_xl_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 8003bb2:	78fb      	ldrb	r3, [r7, #3]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d102      	bne.n	8003bbe <lsm6dsox_xl_data_rate_set+0x27a>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8003bb8:	2304      	movs	r3, #4
 8003bba:	77fb      	strb	r3, [r7, #31]
            break;
 8003bbc:	e012      	b.n	8003be4 <lsm6dsox_xl_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_XL_ODR_26Hz)
 8003bbe:	78fb      	ldrb	r3, [r7, #3]
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d102      	bne.n	8003bca <lsm6dsox_xl_data_rate_set+0x286>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8003bc4:	2304      	movs	r3, #4
 8003bc6:	77fb      	strb	r3, [r7, #31]
            break;
 8003bc8:	e00c      	b.n	8003be4 <lsm6dsox_xl_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_XL_ODR_52Hz)
 8003bca:	78fb      	ldrb	r3, [r7, #3]
 8003bcc:	2b03      	cmp	r3, #3
 8003bce:	d102      	bne.n	8003bd6 <lsm6dsox_xl_data_rate_set+0x292>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8003bd0:	2304      	movs	r3, #4
 8003bd2:	77fb      	strb	r3, [r7, #31]
            break;
 8003bd4:	e006      	b.n	8003be4 <lsm6dsox_xl_data_rate_set+0x2a0>
              odr_xl = val;
 8003bd6:	78fb      	ldrb	r3, [r7, #3]
 8003bd8:	77fb      	strb	r3, [r7, #31]
            break;
 8003bda:	e003      	b.n	8003be4 <lsm6dsox_xl_data_rate_set+0x2a0>

          default:
            odr_xl = val;
 8003bdc:	78fb      	ldrb	r3, [r7, #3]
 8003bde:	77fb      	strb	r3, [r7, #31]
            break;
 8003be0:	e000      	b.n	8003be4 <lsm6dsox_xl_data_rate_set+0x2a0>
        }
      }
 8003be2:	bf00      	nop
    }
  }

  if (ret == 0)
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d107      	bne.n	8003bfa <lsm6dsox_xl_data_rate_set+0x2b6>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 8003bea:	f107 020c 	add.w	r2, r7, #12
 8003bee:	2301      	movs	r3, #1
 8003bf0:	2110      	movs	r1, #16
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7ff fe18 	bl	8003828 <lsm6dsox_read_reg>
 8003bf8:	61b8      	str	r0, [r7, #24]
  }

  if (ret == 0)
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10f      	bne.n	8003c20 <lsm6dsox_xl_data_rate_set+0x2dc>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 8003c00:	7ffb      	ldrb	r3, [r7, #31]
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	7b3b      	ldrb	r3, [r7, #12]
 8003c0a:	f362 1307 	bfi	r3, r2, #4, #4
 8003c0e:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 8003c10:	f107 020c 	add.w	r2, r7, #12
 8003c14:	2301      	movs	r3, #1
 8003c16:	2110      	movs	r1, #16
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f7ff fe1d 	bl	8003858 <lsm6dsox_write_reg>
 8003c1e:	61b8      	str	r0, [r7, #24]
  }

  return ret;
 8003c20:	69bb      	ldr	r3, [r7, #24]
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3720      	adds	r7, #32
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop

08003c2c <lsm6dsox_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_xl_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsox_odr_xl_t *val)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  lsm6dsox_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 8003c36:	f107 0208 	add.w	r2, r7, #8
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	2110      	movs	r1, #16
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7ff fdf2 	bl	8003828 <lsm6dsox_read_reg>
 8003c44:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 8003c46:	7a3b      	ldrb	r3, [r7, #8]
 8003c48:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b0b      	cmp	r3, #11
 8003c50:	d84a      	bhi.n	8003ce8 <lsm6dsox_xl_data_rate_get+0xbc>
 8003c52:	a201      	add	r2, pc, #4	; (adr r2, 8003c58 <lsm6dsox_xl_data_rate_get+0x2c>)
 8003c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c58:	08003c89 	.word	0x08003c89
 8003c5c:	08003c91 	.word	0x08003c91
 8003c60:	08003c99 	.word	0x08003c99
 8003c64:	08003ca1 	.word	0x08003ca1
 8003c68:	08003ca9 	.word	0x08003ca9
 8003c6c:	08003cb1 	.word	0x08003cb1
 8003c70:	08003cb9 	.word	0x08003cb9
 8003c74:	08003cc1 	.word	0x08003cc1
 8003c78:	08003cc9 	.word	0x08003cc9
 8003c7c:	08003cd1 	.word	0x08003cd1
 8003c80:	08003cd9 	.word	0x08003cd9
 8003c84:	08003ce1 	.word	0x08003ce1
  {
    case LSM6DSOX_XL_ODR_OFF:
      *val = LSM6DSOX_XL_ODR_OFF;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	701a      	strb	r2, [r3, #0]
      break;
 8003c8e:	e02f      	b.n	8003cf0 <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_12Hz5:
      *val = LSM6DSOX_XL_ODR_12Hz5;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	2201      	movs	r2, #1
 8003c94:	701a      	strb	r2, [r3, #0]
      break;
 8003c96:	e02b      	b.n	8003cf0 <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_26Hz:
      *val = LSM6DSOX_XL_ODR_26Hz;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	701a      	strb	r2, [r3, #0]
      break;
 8003c9e:	e027      	b.n	8003cf0 <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_52Hz:
      *val = LSM6DSOX_XL_ODR_52Hz;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	2203      	movs	r2, #3
 8003ca4:	701a      	strb	r2, [r3, #0]
      break;
 8003ca6:	e023      	b.n	8003cf0 <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_104Hz:
      *val = LSM6DSOX_XL_ODR_104Hz;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	2204      	movs	r2, #4
 8003cac:	701a      	strb	r2, [r3, #0]
      break;
 8003cae:	e01f      	b.n	8003cf0 <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_208Hz:
      *val = LSM6DSOX_XL_ODR_208Hz;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	2205      	movs	r2, #5
 8003cb4:	701a      	strb	r2, [r3, #0]
      break;
 8003cb6:	e01b      	b.n	8003cf0 <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_417Hz:
      *val = LSM6DSOX_XL_ODR_417Hz;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	2206      	movs	r2, #6
 8003cbc:	701a      	strb	r2, [r3, #0]
      break;
 8003cbe:	e017      	b.n	8003cf0 <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_833Hz:
      *val = LSM6DSOX_XL_ODR_833Hz;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	2207      	movs	r2, #7
 8003cc4:	701a      	strb	r2, [r3, #0]
      break;
 8003cc6:	e013      	b.n	8003cf0 <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_1667Hz:
      *val = LSM6DSOX_XL_ODR_1667Hz;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	2208      	movs	r2, #8
 8003ccc:	701a      	strb	r2, [r3, #0]
      break;
 8003cce:	e00f      	b.n	8003cf0 <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_3333Hz:
      *val = LSM6DSOX_XL_ODR_3333Hz;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	2209      	movs	r2, #9
 8003cd4:	701a      	strb	r2, [r3, #0]
      break;
 8003cd6:	e00b      	b.n	8003cf0 <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_6667Hz:
      *val = LSM6DSOX_XL_ODR_6667Hz;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	220a      	movs	r2, #10
 8003cdc:	701a      	strb	r2, [r3, #0]
      break;
 8003cde:	e007      	b.n	8003cf0 <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_1Hz6:
      *val = LSM6DSOX_XL_ODR_1Hz6;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	220b      	movs	r2, #11
 8003ce4:	701a      	strb	r2, [r3, #0]
      break;
 8003ce6:	e003      	b.n	8003cf0 <lsm6dsox_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSOX_XL_ODR_OFF;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	2200      	movs	r2, #0
 8003cec:	701a      	strb	r2, [r3, #0]
      break;
 8003cee:	bf00      	nop
  }

  return ret;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop

08003cfc <lsm6dsox_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_gy_full_scale_set(stmdev_ctx_t *ctx,
                                   lsm6dsox_fs_g_t val)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	460b      	mov	r3, r1
 8003d06:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 8003d08:	f107 0208 	add.w	r2, r7, #8
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	2111      	movs	r1, #17
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f7ff fd89 	bl	8003828 <lsm6dsox_read_reg>
 8003d16:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10f      	bne.n	8003d3e <lsm6dsox_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 8003d1e:	78fb      	ldrb	r3, [r7, #3]
 8003d20:	f003 0307 	and.w	r3, r3, #7
 8003d24:	b2da      	uxtb	r2, r3
 8003d26:	7a3b      	ldrb	r3, [r7, #8]
 8003d28:	f362 0343 	bfi	r3, r2, #1, #3
 8003d2c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 8003d2e:	f107 0208 	add.w	r2, r7, #8
 8003d32:	2301      	movs	r3, #1
 8003d34:	2111      	movs	r1, #17
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7ff fd8e 	bl	8003858 <lsm6dsox_write_reg>
 8003d3c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <lsm6dsox_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_gy_full_scale_get(stmdev_ctx_t *ctx,
                                   lsm6dsox_fs_g_t *val)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  lsm6dsox_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 8003d52:	f107 0208 	add.w	r2, r7, #8
 8003d56:	2301      	movs	r3, #1
 8003d58:	2111      	movs	r1, #17
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7ff fd64 	bl	8003828 <lsm6dsox_read_reg>
 8003d60:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 8003d62:	7a3b      	ldrb	r3, [r7, #8]
 8003d64:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b06      	cmp	r3, #6
 8003d6c:	d824      	bhi.n	8003db8 <lsm6dsox_gy_full_scale_get+0x70>
 8003d6e:	a201      	add	r2, pc, #4	; (adr r2, 8003d74 <lsm6dsox_gy_full_scale_get+0x2c>)
 8003d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d74:	08003d91 	.word	0x08003d91
 8003d78:	08003d99 	.word	0x08003d99
 8003d7c:	08003da1 	.word	0x08003da1
 8003d80:	08003db9 	.word	0x08003db9
 8003d84:	08003da9 	.word	0x08003da9
 8003d88:	08003db9 	.word	0x08003db9
 8003d8c:	08003db1 	.word	0x08003db1
  {
    case LSM6DSOX_250dps:
      *val = LSM6DSOX_250dps;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	2200      	movs	r2, #0
 8003d94:	701a      	strb	r2, [r3, #0]
      break;
 8003d96:	e013      	b.n	8003dc0 <lsm6dsox_gy_full_scale_get+0x78>

    case LSM6DSOX_125dps:
      *val = LSM6DSOX_125dps;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	701a      	strb	r2, [r3, #0]
      break;
 8003d9e:	e00f      	b.n	8003dc0 <lsm6dsox_gy_full_scale_get+0x78>

    case LSM6DSOX_500dps:
      *val = LSM6DSOX_500dps;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	2202      	movs	r2, #2
 8003da4:	701a      	strb	r2, [r3, #0]
      break;
 8003da6:	e00b      	b.n	8003dc0 <lsm6dsox_gy_full_scale_get+0x78>

    case LSM6DSOX_1000dps:
      *val = LSM6DSOX_1000dps;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	2204      	movs	r2, #4
 8003dac:	701a      	strb	r2, [r3, #0]
      break;
 8003dae:	e007      	b.n	8003dc0 <lsm6dsox_gy_full_scale_get+0x78>

    case LSM6DSOX_2000dps:
      *val = LSM6DSOX_2000dps;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	2206      	movs	r2, #6
 8003db4:	701a      	strb	r2, [r3, #0]
      break;
 8003db6:	e003      	b.n	8003dc0 <lsm6dsox_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSOX_250dps;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	701a      	strb	r2, [r3, #0]
      break;
 8003dbe:	bf00      	nop
  }

  return ret;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop

08003dcc <lsm6dsox_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_gy_data_rate_set(stmdev_ctx_t *ctx,
                                  lsm6dsox_odr_g_t val)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b088      	sub	sp, #32
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_odr_g_t odr_gy =  val;
 8003dd8:	78fb      	ldrb	r3, [r7, #3]
 8003dda:	77fb      	strb	r3, [r7, #31]
  lsm6dsox_mlc_odr_t mlc_odr;
  lsm6dsox_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsox_fsm_enable_get(ctx, &fsm_enable);
 8003ddc:	f107 0314 	add.w	r3, r7, #20
 8003de0:	4619      	mov	r1, r3
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 fb4d 	bl	8004482 <lsm6dsox_fsm_enable_get>
 8003de8:	61b8      	str	r0, [r7, #24]

  if (ret == 0)
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f040 80c4 	bne.w	8003f7a <lsm6dsox_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8003df2:	7d3b      	ldrb	r3, [r7, #20]
 8003df4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003df8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8003dfa:	7d3b      	ldrb	r3, [r7, #20]
 8003dfc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003e00:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8003e02:	4313      	orrs	r3, r2
 8003e04:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8003e06:	7d3b      	ldrb	r3, [r7, #20]
 8003e08:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003e0c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8003e12:	7d3b      	ldrb	r3, [r7, #20]
 8003e14:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003e18:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8003e1e:	7d3b      	ldrb	r3, [r7, #20]
 8003e20:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003e24:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8003e26:	4313      	orrs	r3, r2
 8003e28:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8003e2a:	7d3b      	ldrb	r3, [r7, #20]
 8003e2c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003e30:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8003e32:	4313      	orrs	r3, r2
 8003e34:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8003e36:	7d3b      	ldrb	r3, [r7, #20]
 8003e38:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003e3c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8003e42:	7d3b      	ldrb	r3, [r7, #20]
 8003e44:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003e48:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8003e4e:	7d7b      	ldrb	r3, [r7, #21]
 8003e50:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003e54:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8003e56:	4313      	orrs	r3, r2
 8003e58:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8003e5a:	7d7b      	ldrb	r3, [r7, #21]
 8003e5c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003e60:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8003e62:	4313      	orrs	r3, r2
 8003e64:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8003e66:	7d7b      	ldrb	r3, [r7, #21]
 8003e68:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003e6c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8003e72:	7d7b      	ldrb	r3, [r7, #21]
 8003e74:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003e78:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8003e7e:	7d7b      	ldrb	r3, [r7, #21]
 8003e80:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003e84:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8003e86:	4313      	orrs	r3, r2
 8003e88:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8003e8a:	7d7b      	ldrb	r3, [r7, #21]
 8003e8c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003e90:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8003e92:	4313      	orrs	r3, r2
 8003e94:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8003e96:	7d7b      	ldrb	r3, [r7, #21]
 8003e98:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003e9c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8003ea2:	7d7b      	ldrb	r3, [r7, #21]
 8003ea4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003ea8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d163      	bne.n	8003f7a <lsm6dsox_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsox_fsm_data_rate_get(ctx, &fsm_odr);
 8003eb2:	f107 0313 	add.w	r3, r7, #19
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 fb03 	bl	80044c4 <lsm6dsox_fsm_data_rate_get>
 8003ebe:	61b8      	str	r0, [r7, #24]

      if (ret == 0)
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d159      	bne.n	8003f7a <lsm6dsox_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8003ec6:	7cfb      	ldrb	r3, [r7, #19]
 8003ec8:	2b03      	cmp	r3, #3
 8003eca:	d853      	bhi.n	8003f74 <lsm6dsox_gy_data_rate_set+0x1a8>
 8003ecc:	a201      	add	r2, pc, #4	; (adr r2, 8003ed4 <lsm6dsox_gy_data_rate_set+0x108>)
 8003ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed2:	bf00      	nop
 8003ed4:	08003ee5 	.word	0x08003ee5
 8003ed8:	08003ef7 	.word	0x08003ef7
 8003edc:	08003f15 	.word	0x08003f15
 8003ee0:	08003f3f 	.word	0x08003f3f
        {
          case LSM6DSOX_ODR_FSM_12Hz5:
            if (val == LSM6DSOX_GY_ODR_OFF)
 8003ee4:	78fb      	ldrb	r3, [r7, #3]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d102      	bne.n	8003ef0 <lsm6dsox_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSOX_GY_ODR_12Hz5;
 8003eea:	2301      	movs	r3, #1
 8003eec:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 8003eee:	e045      	b.n	8003f7c <lsm6dsox_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8003ef0:	78fb      	ldrb	r3, [r7, #3]
 8003ef2:	77fb      	strb	r3, [r7, #31]
            break;
 8003ef4:	e042      	b.n	8003f7c <lsm6dsox_gy_data_rate_set+0x1b0>

          case LSM6DSOX_ODR_FSM_26Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 8003ef6:	78fb      	ldrb	r3, [r7, #3]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d102      	bne.n	8003f02 <lsm6dsox_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSOX_GY_ODR_26Hz;
 8003efc:	2302      	movs	r3, #2
 8003efe:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 8003f00:	e03c      	b.n	8003f7c <lsm6dsox_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 8003f02:	78fb      	ldrb	r3, [r7, #3]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d102      	bne.n	8003f0e <lsm6dsox_gy_data_rate_set+0x142>
              odr_gy = LSM6DSOX_GY_ODR_26Hz;
 8003f08:	2302      	movs	r3, #2
 8003f0a:	77fb      	strb	r3, [r7, #31]
            break;
 8003f0c:	e036      	b.n	8003f7c <lsm6dsox_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8003f0e:	78fb      	ldrb	r3, [r7, #3]
 8003f10:	77fb      	strb	r3, [r7, #31]
            break;
 8003f12:	e033      	b.n	8003f7c <lsm6dsox_gy_data_rate_set+0x1b0>

          case LSM6DSOX_ODR_FSM_52Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 8003f14:	78fb      	ldrb	r3, [r7, #3]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d102      	bne.n	8003f20 <lsm6dsox_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 8003f1e:	e02d      	b.n	8003f7c <lsm6dsox_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 8003f20:	78fb      	ldrb	r3, [r7, #3]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d102      	bne.n	8003f2c <lsm6dsox_gy_data_rate_set+0x160>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 8003f26:	2303      	movs	r3, #3
 8003f28:	77fb      	strb	r3, [r7, #31]
            break;
 8003f2a:	e027      	b.n	8003f7c <lsm6dsox_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_GY_ODR_26Hz)
 8003f2c:	78fb      	ldrb	r3, [r7, #3]
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d102      	bne.n	8003f38 <lsm6dsox_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 8003f32:	2303      	movs	r3, #3
 8003f34:	77fb      	strb	r3, [r7, #31]
            break;
 8003f36:	e021      	b.n	8003f7c <lsm6dsox_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8003f38:	78fb      	ldrb	r3, [r7, #3]
 8003f3a:	77fb      	strb	r3, [r7, #31]
            break;
 8003f3c:	e01e      	b.n	8003f7c <lsm6dsox_gy_data_rate_set+0x1b0>

          case LSM6DSOX_ODR_FSM_104Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 8003f3e:	78fb      	ldrb	r3, [r7, #3]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d102      	bne.n	8003f4a <lsm6dsox_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 8003f44:	2304      	movs	r3, #4
 8003f46:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 8003f48:	e018      	b.n	8003f7c <lsm6dsox_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 8003f4a:	78fb      	ldrb	r3, [r7, #3]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d102      	bne.n	8003f56 <lsm6dsox_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 8003f50:	2304      	movs	r3, #4
 8003f52:	77fb      	strb	r3, [r7, #31]
            break;
 8003f54:	e012      	b.n	8003f7c <lsm6dsox_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_GY_ODR_26Hz)
 8003f56:	78fb      	ldrb	r3, [r7, #3]
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d102      	bne.n	8003f62 <lsm6dsox_gy_data_rate_set+0x196>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 8003f5c:	2304      	movs	r3, #4
 8003f5e:	77fb      	strb	r3, [r7, #31]
            break;
 8003f60:	e00c      	b.n	8003f7c <lsm6dsox_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_GY_ODR_52Hz)
 8003f62:	78fb      	ldrb	r3, [r7, #3]
 8003f64:	2b03      	cmp	r3, #3
 8003f66:	d102      	bne.n	8003f6e <lsm6dsox_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 8003f68:	2304      	movs	r3, #4
 8003f6a:	77fb      	strb	r3, [r7, #31]
            break;
 8003f6c:	e006      	b.n	8003f7c <lsm6dsox_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8003f6e:	78fb      	ldrb	r3, [r7, #3]
 8003f70:	77fb      	strb	r3, [r7, #31]
            break;
 8003f72:	e003      	b.n	8003f7c <lsm6dsox_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8003f74:	78fb      	ldrb	r3, [r7, #3]
 8003f76:	77fb      	strb	r3, [r7, #31]
            break;
 8003f78:	e000      	b.n	8003f7c <lsm6dsox_gy_data_rate_set+0x1b0>
        }
      }
 8003f7a:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  emb_sens.mlc = PROPERTY_DISABLE;
 8003f7c:	7c3b      	ldrb	r3, [r7, #16]
 8003f7e:	f36f 03c3 	bfc	r3, #3, #1
 8003f82:	743b      	strb	r3, [r7, #16]

  if (ret == 0)
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d16f      	bne.n	800406a <lsm6dsox_gy_data_rate_set+0x29e>
  {
    ret =  lsm6dsox_embedded_sens_get(ctx, &emb_sens);
 8003f8a:	f107 0310 	add.w	r3, r7, #16
 8003f8e:	4619      	mov	r1, r3
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 fb27 	bl	80045e4 <lsm6dsox_embedded_sens_get>
 8003f96:	61b8      	str	r0, [r7, #24]

    if (emb_sens.mlc == PROPERTY_ENABLE)
 8003f98:	7c3b      	ldrb	r3, [r7, #16]
 8003f9a:	f003 0308 	and.w	r3, r3, #8
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d062      	beq.n	800406a <lsm6dsox_gy_data_rate_set+0x29e>
    {
      ret =  lsm6dsox_mlc_data_rate_get(ctx, &mlc_odr);
 8003fa4:	f107 030f 	add.w	r3, r7, #15
 8003fa8:	4619      	mov	r1, r3
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 fad2 	bl	8004554 <lsm6dsox_mlc_data_rate_get>
 8003fb0:	61b8      	str	r0, [r7, #24]

      if (ret == 0)
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d158      	bne.n	800406a <lsm6dsox_gy_data_rate_set+0x29e>
      {
        switch (mlc_odr)
 8003fb8:	7bfb      	ldrb	r3, [r7, #15]
 8003fba:	2b03      	cmp	r3, #3
 8003fbc:	d852      	bhi.n	8004064 <lsm6dsox_gy_data_rate_set+0x298>
 8003fbe:	a201      	add	r2, pc, #4	; (adr r2, 8003fc4 <lsm6dsox_gy_data_rate_set+0x1f8>)
 8003fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc4:	08003fd5 	.word	0x08003fd5
 8003fc8:	08003fe7 	.word	0x08003fe7
 8003fcc:	08004005 	.word	0x08004005
 8003fd0:	0800402f 	.word	0x0800402f
        {
          case LSM6DSOX_ODR_PRGS_12Hz5:
            if (val == LSM6DSOX_GY_ODR_OFF)
 8003fd4:	78fb      	ldrb	r3, [r7, #3]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d102      	bne.n	8003fe0 <lsm6dsox_gy_data_rate_set+0x214>
            {
              odr_gy = LSM6DSOX_GY_ODR_12Hz5;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 8003fde:	e045      	b.n	800406c <lsm6dsox_gy_data_rate_set+0x2a0>
              odr_gy = val;
 8003fe0:	78fb      	ldrb	r3, [r7, #3]
 8003fe2:	77fb      	strb	r3, [r7, #31]
            break;
 8003fe4:	e042      	b.n	800406c <lsm6dsox_gy_data_rate_set+0x2a0>

          case LSM6DSOX_ODR_PRGS_26Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 8003fe6:	78fb      	ldrb	r3, [r7, #3]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d102      	bne.n	8003ff2 <lsm6dsox_gy_data_rate_set+0x226>
            {
              odr_gy = LSM6DSOX_GY_ODR_26Hz;
 8003fec:	2302      	movs	r3, #2
 8003fee:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 8003ff0:	e03c      	b.n	800406c <lsm6dsox_gy_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 8003ff2:	78fb      	ldrb	r3, [r7, #3]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d102      	bne.n	8003ffe <lsm6dsox_gy_data_rate_set+0x232>
              odr_gy = LSM6DSOX_GY_ODR_26Hz;
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	77fb      	strb	r3, [r7, #31]
            break;
 8003ffc:	e036      	b.n	800406c <lsm6dsox_gy_data_rate_set+0x2a0>
              odr_gy = val;
 8003ffe:	78fb      	ldrb	r3, [r7, #3]
 8004000:	77fb      	strb	r3, [r7, #31]
            break;
 8004002:	e033      	b.n	800406c <lsm6dsox_gy_data_rate_set+0x2a0>

          case LSM6DSOX_ODR_PRGS_52Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 8004004:	78fb      	ldrb	r3, [r7, #3]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d102      	bne.n	8004010 <lsm6dsox_gy_data_rate_set+0x244>
            {
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 800400a:	2303      	movs	r3, #3
 800400c:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 800400e:	e02d      	b.n	800406c <lsm6dsox_gy_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 8004010:	78fb      	ldrb	r3, [r7, #3]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d102      	bne.n	800401c <lsm6dsox_gy_data_rate_set+0x250>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 8004016:	2303      	movs	r3, #3
 8004018:	77fb      	strb	r3, [r7, #31]
            break;
 800401a:	e027      	b.n	800406c <lsm6dsox_gy_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_GY_ODR_26Hz)
 800401c:	78fb      	ldrb	r3, [r7, #3]
 800401e:	2b02      	cmp	r3, #2
 8004020:	d102      	bne.n	8004028 <lsm6dsox_gy_data_rate_set+0x25c>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 8004022:	2303      	movs	r3, #3
 8004024:	77fb      	strb	r3, [r7, #31]
            break;
 8004026:	e021      	b.n	800406c <lsm6dsox_gy_data_rate_set+0x2a0>
              odr_gy = val;
 8004028:	78fb      	ldrb	r3, [r7, #3]
 800402a:	77fb      	strb	r3, [r7, #31]
            break;
 800402c:	e01e      	b.n	800406c <lsm6dsox_gy_data_rate_set+0x2a0>

          case LSM6DSOX_ODR_PRGS_104Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 800402e:	78fb      	ldrb	r3, [r7, #3]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d102      	bne.n	800403a <lsm6dsox_gy_data_rate_set+0x26e>
            {
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 8004034:	2304      	movs	r3, #4
 8004036:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 8004038:	e018      	b.n	800406c <lsm6dsox_gy_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 800403a:	78fb      	ldrb	r3, [r7, #3]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d102      	bne.n	8004046 <lsm6dsox_gy_data_rate_set+0x27a>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 8004040:	2304      	movs	r3, #4
 8004042:	77fb      	strb	r3, [r7, #31]
            break;
 8004044:	e012      	b.n	800406c <lsm6dsox_gy_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_GY_ODR_26Hz)
 8004046:	78fb      	ldrb	r3, [r7, #3]
 8004048:	2b02      	cmp	r3, #2
 800404a:	d102      	bne.n	8004052 <lsm6dsox_gy_data_rate_set+0x286>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 800404c:	2304      	movs	r3, #4
 800404e:	77fb      	strb	r3, [r7, #31]
            break;
 8004050:	e00c      	b.n	800406c <lsm6dsox_gy_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_GY_ODR_52Hz)
 8004052:	78fb      	ldrb	r3, [r7, #3]
 8004054:	2b03      	cmp	r3, #3
 8004056:	d102      	bne.n	800405e <lsm6dsox_gy_data_rate_set+0x292>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 8004058:	2304      	movs	r3, #4
 800405a:	77fb      	strb	r3, [r7, #31]
            break;
 800405c:	e006      	b.n	800406c <lsm6dsox_gy_data_rate_set+0x2a0>
              odr_gy = val;
 800405e:	78fb      	ldrb	r3, [r7, #3]
 8004060:	77fb      	strb	r3, [r7, #31]
            break;
 8004062:	e003      	b.n	800406c <lsm6dsox_gy_data_rate_set+0x2a0>

          default:
            odr_gy = val;
 8004064:	78fb      	ldrb	r3, [r7, #3]
 8004066:	77fb      	strb	r3, [r7, #31]
            break;
 8004068:	e000      	b.n	800406c <lsm6dsox_gy_data_rate_set+0x2a0>
        }
      }
 800406a:	bf00      	nop
    }
  }

  if (ret == 0)
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d107      	bne.n	8004082 <lsm6dsox_gy_data_rate_set+0x2b6>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 8004072:	f107 020c 	add.w	r2, r7, #12
 8004076:	2301      	movs	r3, #1
 8004078:	2111      	movs	r1, #17
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7ff fbd4 	bl	8003828 <lsm6dsox_read_reg>
 8004080:	61b8      	str	r0, [r7, #24]
  }

  if (ret == 0)
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d10f      	bne.n	80040a8 <lsm6dsox_gy_data_rate_set+0x2dc>
  {
    reg.odr_g = (uint8_t) odr_gy;
 8004088:	7ffb      	ldrb	r3, [r7, #31]
 800408a:	f003 030f 	and.w	r3, r3, #15
 800408e:	b2da      	uxtb	r2, r3
 8004090:	7b3b      	ldrb	r3, [r7, #12]
 8004092:	f362 1307 	bfi	r3, r2, #4, #4
 8004096:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 8004098:	f107 020c 	add.w	r2, r7, #12
 800409c:	2301      	movs	r3, #1
 800409e:	2111      	movs	r1, #17
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f7ff fbd9 	bl	8003858 <lsm6dsox_write_reg>
 80040a6:	61b8      	str	r0, [r7, #24]
  }

  return ret;
 80040a8:	69bb      	ldr	r3, [r7, #24]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3720      	adds	r7, #32
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop

080040b4 <lsm6dsox_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_gy_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsox_odr_g_t *val)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  lsm6dsox_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 80040be:	f107 0208 	add.w	r2, r7, #8
 80040c2:	2301      	movs	r3, #1
 80040c4:	2111      	movs	r1, #17
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7ff fbae 	bl	8003828 <lsm6dsox_read_reg>
 80040cc:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 80040ce:	7a3b      	ldrb	r3, [r7, #8]
 80040d0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b0a      	cmp	r3, #10
 80040d8:	d844      	bhi.n	8004164 <lsm6dsox_gy_data_rate_get+0xb0>
 80040da:	a201      	add	r2, pc, #4	; (adr r2, 80040e0 <lsm6dsox_gy_data_rate_get+0x2c>)
 80040dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e0:	0800410d 	.word	0x0800410d
 80040e4:	08004115 	.word	0x08004115
 80040e8:	0800411d 	.word	0x0800411d
 80040ec:	08004125 	.word	0x08004125
 80040f0:	0800412d 	.word	0x0800412d
 80040f4:	08004135 	.word	0x08004135
 80040f8:	0800413d 	.word	0x0800413d
 80040fc:	08004145 	.word	0x08004145
 8004100:	0800414d 	.word	0x0800414d
 8004104:	08004155 	.word	0x08004155
 8004108:	0800415d 	.word	0x0800415d
  {
    case LSM6DSOX_GY_ODR_OFF:
      *val = LSM6DSOX_GY_ODR_OFF;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	2200      	movs	r2, #0
 8004110:	701a      	strb	r2, [r3, #0]
      break;
 8004112:	e02b      	b.n	800416c <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_12Hz5:
      *val = LSM6DSOX_GY_ODR_12Hz5;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	2201      	movs	r2, #1
 8004118:	701a      	strb	r2, [r3, #0]
      break;
 800411a:	e027      	b.n	800416c <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_26Hz:
      *val = LSM6DSOX_GY_ODR_26Hz;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	2202      	movs	r2, #2
 8004120:	701a      	strb	r2, [r3, #0]
      break;
 8004122:	e023      	b.n	800416c <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_52Hz:
      *val = LSM6DSOX_GY_ODR_52Hz;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	2203      	movs	r2, #3
 8004128:	701a      	strb	r2, [r3, #0]
      break;
 800412a:	e01f      	b.n	800416c <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_104Hz:
      *val = LSM6DSOX_GY_ODR_104Hz;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	2204      	movs	r2, #4
 8004130:	701a      	strb	r2, [r3, #0]
      break;
 8004132:	e01b      	b.n	800416c <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_208Hz:
      *val = LSM6DSOX_GY_ODR_208Hz;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	2205      	movs	r2, #5
 8004138:	701a      	strb	r2, [r3, #0]
      break;
 800413a:	e017      	b.n	800416c <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_417Hz:
      *val = LSM6DSOX_GY_ODR_417Hz;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	2206      	movs	r2, #6
 8004140:	701a      	strb	r2, [r3, #0]
      break;
 8004142:	e013      	b.n	800416c <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_833Hz:
      *val = LSM6DSOX_GY_ODR_833Hz;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	2207      	movs	r2, #7
 8004148:	701a      	strb	r2, [r3, #0]
      break;
 800414a:	e00f      	b.n	800416c <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_1667Hz:
      *val = LSM6DSOX_GY_ODR_1667Hz;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	2208      	movs	r2, #8
 8004150:	701a      	strb	r2, [r3, #0]
      break;
 8004152:	e00b      	b.n	800416c <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_3333Hz:
      *val = LSM6DSOX_GY_ODR_3333Hz;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	2209      	movs	r2, #9
 8004158:	701a      	strb	r2, [r3, #0]
      break;
 800415a:	e007      	b.n	800416c <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_6667Hz:
      *val = LSM6DSOX_GY_ODR_6667Hz;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	220a      	movs	r2, #10
 8004160:	701a      	strb	r2, [r3, #0]
      break;
 8004162:	e003      	b.n	800416c <lsm6dsox_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSOX_GY_ODR_OFF;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	2200      	movs	r2, #0
 8004168:	701a      	strb	r2, [r3, #0]
      break;
 800416a:	bf00      	nop
  }

  return ret;
 800416c:	68fb      	ldr	r3, [r7, #12]
}
 800416e:	4618      	mov	r0, r3
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop

08004178 <lsm6dsox_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	460b      	mov	r3, r1
 8004182:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 8004184:	f107 0208 	add.w	r2, r7, #8
 8004188:	2301      	movs	r3, #1
 800418a:	2112      	movs	r1, #18
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f7ff fb4b 	bl	8003828 <lsm6dsox_read_reg>
 8004192:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10f      	bne.n	80041ba <lsm6dsox_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800419a:	78fb      	ldrb	r3, [r7, #3]
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	b2da      	uxtb	r2, r3
 80041a2:	7a3b      	ldrb	r3, [r7, #8]
 80041a4:	f362 1386 	bfi	r3, r2, #6, #1
 80041a8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 80041aa:	f107 0208 	add.w	r2, r7, #8
 80041ae:	2301      	movs	r3, #1
 80041b0:	2112      	movs	r1, #18
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7ff fb50 	bl	8003858 <lsm6dsox_write_reg>
 80041b8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80041ba:	68fb      	ldr	r3, [r7, #12]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <lsm6dsox_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_OUTX_L_G, buff, 6);
 80041ce:	f107 020c 	add.w	r2, r7, #12
 80041d2:	2306      	movs	r3, #6
 80041d4:	2122      	movs	r1, #34	; 0x22
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7ff fb26 	bl	8003828 <lsm6dsox_read_reg>
 80041dc:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80041de:	7b7b      	ldrb	r3, [r7, #13]
 80041e0:	b21a      	sxth	r2, r3
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	021b      	lsls	r3, r3, #8
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	7b3b      	ldrb	r3, [r7, #12]
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	4413      	add	r3, r2
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	b21a      	sxth	r2, r3
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004200:	7bfa      	ldrb	r2, [r7, #15]
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	3302      	adds	r3, #2
 8004206:	b212      	sxth	r2, r2
 8004208:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	3302      	adds	r3, #2
 800420e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004212:	b29b      	uxth	r3, r3
 8004214:	021b      	lsls	r3, r3, #8
 8004216:	b29a      	uxth	r2, r3
 8004218:	7bbb      	ldrb	r3, [r7, #14]
 800421a:	b29b      	uxth	r3, r3
 800421c:	4413      	add	r3, r2
 800421e:	b29a      	uxth	r2, r3
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	3302      	adds	r3, #2
 8004224:	b212      	sxth	r2, r2
 8004226:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004228:	7c7a      	ldrb	r2, [r7, #17]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	3304      	adds	r3, #4
 800422e:	b212      	sxth	r2, r2
 8004230:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	3304      	adds	r3, #4
 8004236:	f9b3 3000 	ldrsh.w	r3, [r3]
 800423a:	b29b      	uxth	r3, r3
 800423c:	021b      	lsls	r3, r3, #8
 800423e:	b29a      	uxth	r2, r3
 8004240:	7c3b      	ldrb	r3, [r7, #16]
 8004242:	b29b      	uxth	r3, r3
 8004244:	4413      	add	r3, r2
 8004246:	b29a      	uxth	r2, r3
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	3304      	adds	r3, #4
 800424c:	b212      	sxth	r2, r2
 800424e:	801a      	strh	r2, [r3, #0]

  return ret;
 8004250:	697b      	ldr	r3, [r7, #20]
}
 8004252:	4618      	mov	r0, r3
 8004254:	3718      	adds	r7, #24
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <lsm6dsox_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b086      	sub	sp, #24
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
 8004262:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_OUTX_L_A, buff, 6);
 8004264:	f107 020c 	add.w	r2, r7, #12
 8004268:	2306      	movs	r3, #6
 800426a:	2128      	movs	r1, #40	; 0x28
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f7ff fadb 	bl	8003828 <lsm6dsox_read_reg>
 8004272:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004274:	7b7b      	ldrb	r3, [r7, #13]
 8004276:	b21a      	sxth	r2, r3
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004282:	b29b      	uxth	r3, r3
 8004284:	021b      	lsls	r3, r3, #8
 8004286:	b29a      	uxth	r2, r3
 8004288:	7b3b      	ldrb	r3, [r7, #12]
 800428a:	b29b      	uxth	r3, r3
 800428c:	4413      	add	r3, r2
 800428e:	b29b      	uxth	r3, r3
 8004290:	b21a      	sxth	r2, r3
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004296:	7bfa      	ldrb	r2, [r7, #15]
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	3302      	adds	r3, #2
 800429c:	b212      	sxth	r2, r2
 800429e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	3302      	adds	r3, #2
 80042a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	021b      	lsls	r3, r3, #8
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	7bbb      	ldrb	r3, [r7, #14]
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	4413      	add	r3, r2
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	3302      	adds	r3, #2
 80042ba:	b212      	sxth	r2, r2
 80042bc:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80042be:	7c7a      	ldrb	r2, [r7, #17]
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	3304      	adds	r3, #4
 80042c4:	b212      	sxth	r2, r2
 80042c6:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	3304      	adds	r3, #4
 80042cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	021b      	lsls	r3, r3, #8
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	7c3b      	ldrb	r3, [r7, #16]
 80042d8:	b29b      	uxth	r3, r3
 80042da:	4413      	add	r3, r2
 80042dc:	b29a      	uxth	r2, r3
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	3304      	adds	r3, #4
 80042e2:	b212      	sxth	r2, r2
 80042e4:	801a      	strh	r2, [r3, #0]

  return ret;
 80042e6:	697b      	ldr	r3, [r7, #20]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3718      	adds	r7, #24
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <lsm6dsox_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_mem_bank_set(stmdev_ctx_t *ctx,
                              lsm6dsox_reg_access_t val)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	460b      	mov	r3, r1
 80042fa:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FUNC_CFG_ACCESS,
 80042fc:	f107 0208 	add.w	r2, r7, #8
 8004300:	2301      	movs	r3, #1
 8004302:	2101      	movs	r1, #1
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f7ff fa8f 	bl	8003828 <lsm6dsox_read_reg>
 800430a:	60f8      	str	r0, [r7, #12]
                          (uint8_t *)&reg, 1);

  if (ret == 0)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10f      	bne.n	8004332 <lsm6dsox_mem_bank_set+0x42>
  {
    reg.reg_access = (uint8_t)val;
 8004312:	78fb      	ldrb	r3, [r7, #3]
 8004314:	f003 0303 	and.w	r3, r3, #3
 8004318:	b2da      	uxtb	r2, r3
 800431a:	7a3b      	ldrb	r3, [r7, #8]
 800431c:	f362 1387 	bfi	r3, r2, #6, #2
 8004320:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_FUNC_CFG_ACCESS,
 8004322:	f107 0208 	add.w	r2, r7, #8
 8004326:	2301      	movs	r3, #1
 8004328:	2101      	movs	r1, #1
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7ff fa94 	bl	8003858 <lsm6dsox_write_reg>
 8004330:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&reg, 1);
  }

  return ret;
 8004332:	68fb      	ldr	r3, [r7, #12]
}
 8004334:	4618      	mov	r0, r3
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <lsm6dsox_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_WHO_AM_I, buff, 1);
 8004346:	2301      	movs	r3, #1
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	210f      	movs	r1, #15
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f7ff fa6b 	bl	8003828 <lsm6dsox_read_reg>
 8004352:	60f8      	str	r0, [r7, #12]

  return ret;
 8004354:	68fb      	ldr	r3, [r7, #12]
}
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <lsm6dsox_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b084      	sub	sp, #16
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
 8004366:	460b      	mov	r3, r1
 8004368:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 800436a:	f107 0208 	add.w	r2, r7, #8
 800436e:	2301      	movs	r3, #1
 8004370:	2112      	movs	r1, #18
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7ff fa58 	bl	8003828 <lsm6dsox_read_reg>
 8004378:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10f      	bne.n	80043a0 <lsm6dsox_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 8004380:	78fb      	ldrb	r3, [r7, #3]
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	b2da      	uxtb	r2, r3
 8004388:	7a3b      	ldrb	r3, [r7, #8]
 800438a:	f362 0382 	bfi	r3, r2, #2, #1
 800438e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 8004390:	f107 0208 	add.w	r2, r7, #8
 8004394:	2301      	movs	r3, #1
 8004396:	2112      	movs	r1, #18
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f7ff fa5d 	bl	8003858 <lsm6dsox_write_reg>
 800439e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80043a0:	68fb      	ldr	r3, [r7, #12]
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <lsm6dsox_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_i3c_disable_set(stmdev_ctx_t *ctx,
                                 lsm6dsox_i3c_disable_t val)
{
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b086      	sub	sp, #24
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
 80043b2:	460b      	mov	r3, r1
 80043b4:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_i3c_bus_avb_t i3c_bus_avb;
  lsm6dsox_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 80043b6:	f107 020c 	add.w	r2, r7, #12
 80043ba:	2301      	movs	r3, #1
 80043bc:	2118      	movs	r1, #24
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f7ff fa32 	bl	8003828 <lsm6dsox_read_reg>
 80043c4:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d111      	bne.n	80043f0 <lsm6dsox_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 80043cc:	78fb      	ldrb	r3, [r7, #3]
 80043ce:	09db      	lsrs	r3, r3, #7
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	b2da      	uxtb	r2, r3
 80043d8:	7b3b      	ldrb	r3, [r7, #12]
 80043da:	f362 0341 	bfi	r3, r2, #1, #1
 80043de:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 80043e0:	f107 020c 	add.w	r2, r7, #12
 80043e4:	2301      	movs	r3, #1
 80043e6:	2118      	movs	r1, #24
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f7ff fa35 	bl	8003858 <lsm6dsox_write_reg>
 80043ee:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d107      	bne.n	8004406 <lsm6dsox_i3c_disable_set+0x5c>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_I3C_BUS_AVB,
 80043f6:	f107 0210 	add.w	r2, r7, #16
 80043fa:	2301      	movs	r3, #1
 80043fc:	2162      	movs	r1, #98	; 0x62
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f7ff fa12 	bl	8003828 <lsm6dsox_read_reg>
 8004404:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d10f      	bne.n	800442c <lsm6dsox_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 800440c:	78fb      	ldrb	r3, [r7, #3]
 800440e:	f003 0303 	and.w	r3, r3, #3
 8004412:	b2da      	uxtb	r2, r3
 8004414:	7c3b      	ldrb	r3, [r7, #16]
 8004416:	f362 03c4 	bfi	r3, r2, #3, #2
 800441a:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_I3C_BUS_AVB,
 800441c:	f107 0210 	add.w	r2, r7, #16
 8004420:	2301      	movs	r3, #1
 8004422:	2162      	movs	r1, #98	; 0x62
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f7ff fa17 	bl	8003858 <lsm6dsox_write_reg>
 800442a:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 800442c:	697b      	ldr	r3, [r7, #20]
}
 800442e:	4618      	mov	r0, r3
 8004430:	3718      	adds	r7, #24
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <lsm6dsox_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_fifo_mode_set(stmdev_ctx_t *ctx,
                               lsm6dsox_fifo_mode_t val)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b084      	sub	sp, #16
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
 800443e:	460b      	mov	r3, r1
 8004440:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8004442:	f107 0208 	add.w	r2, r7, #8
 8004446:	2301      	movs	r3, #1
 8004448:	210a      	movs	r1, #10
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7ff f9ec 	bl	8003828 <lsm6dsox_read_reg>
 8004450:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d10f      	bne.n	8004478 <lsm6dsox_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8004458:	78fb      	ldrb	r3, [r7, #3]
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	b2da      	uxtb	r2, r3
 8004460:	7a3b      	ldrb	r3, [r7, #8]
 8004462:	f362 0302 	bfi	r3, r2, #0, #3
 8004466:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8004468:	f107 0208 	add.w	r2, r7, #8
 800446c:	2301      	movs	r3, #1
 800446e:	210a      	movs	r1, #10
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f7ff f9f1 	bl	8003858 <lsm6dsox_write_reg>
 8004476:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004478:	68fb      	ldr	r3, [r7, #12]
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <lsm6dsox_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_fsm_enable_get(stmdev_ctx_t *ctx,
                                lsm6dsox_emb_fsm_enable_t *val)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b084      	sub	sp, #16
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
 800448a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 800448c:	2102      	movs	r1, #2
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7ff ff2e 	bl	80042f0 <lsm6dsox_mem_bank_set>
 8004494:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d106      	bne.n	80044aa <lsm6dsox_fsm_enable_get+0x28>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FSM_ENABLE_A, (uint8_t *) val,
 800449c:	2302      	movs	r3, #2
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	2146      	movs	r1, #70	; 0x46
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f7ff f9c0 	bl	8003828 <lsm6dsox_read_reg>
 80044a8:	60f8      	str	r0, [r7, #12]
                            2);
  }

  if (ret == 0)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d104      	bne.n	80044ba <lsm6dsox_fsm_enable_get+0x38>
  {
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 80044b0:	2100      	movs	r1, #0
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f7ff ff1c 	bl	80042f0 <lsm6dsox_mem_bank_set>
 80044b8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80044ba:	68fb      	ldr	r3, [r7, #12]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <lsm6dsox_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm6dsox_fsm_odr_t *val)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  lsm6dsox_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 80044ce:	2102      	movs	r1, #2
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f7ff ff0d 	bl	80042f0 <lsm6dsox_mem_bank_set>
 80044d6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d107      	bne.n	80044ee <lsm6dsox_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_ODR_CFG_B,
 80044de:	f107 0208 	add.w	r2, r7, #8
 80044e2:	2301      	movs	r3, #1
 80044e4:	215f      	movs	r1, #95	; 0x5f
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f7ff f99e 	bl	8003828 <lsm6dsox_read_reg>
 80044ec:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d12a      	bne.n	800454a <lsm6dsox_fsm_data_rate_get+0x86>
  {
    switch (reg.fsm_odr)
 80044f4:	7a3b      	ldrb	r3, [r7, #8]
 80044f6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b03      	cmp	r3, #3
 80044fe:	d81b      	bhi.n	8004538 <lsm6dsox_fsm_data_rate_get+0x74>
 8004500:	a201      	add	r2, pc, #4	; (adr r2, 8004508 <lsm6dsox_fsm_data_rate_get+0x44>)
 8004502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004506:	bf00      	nop
 8004508:	08004519 	.word	0x08004519
 800450c:	08004521 	.word	0x08004521
 8004510:	08004529 	.word	0x08004529
 8004514:	08004531 	.word	0x08004531
    {
      case LSM6DSOX_ODR_FSM_12Hz5:
        *val = LSM6DSOX_ODR_FSM_12Hz5;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	2200      	movs	r2, #0
 800451c:	701a      	strb	r2, [r3, #0]
        break;
 800451e:	e00f      	b.n	8004540 <lsm6dsox_fsm_data_rate_get+0x7c>

      case LSM6DSOX_ODR_FSM_26Hz:
        *val = LSM6DSOX_ODR_FSM_26Hz;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	2201      	movs	r2, #1
 8004524:	701a      	strb	r2, [r3, #0]
        break;
 8004526:	e00b      	b.n	8004540 <lsm6dsox_fsm_data_rate_get+0x7c>

      case LSM6DSOX_ODR_FSM_52Hz:
        *val = LSM6DSOX_ODR_FSM_52Hz;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	2202      	movs	r2, #2
 800452c:	701a      	strb	r2, [r3, #0]
        break;
 800452e:	e007      	b.n	8004540 <lsm6dsox_fsm_data_rate_get+0x7c>

      case LSM6DSOX_ODR_FSM_104Hz:
        *val = LSM6DSOX_ODR_FSM_104Hz;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	2203      	movs	r2, #3
 8004534:	701a      	strb	r2, [r3, #0]
        break;
 8004536:	e003      	b.n	8004540 <lsm6dsox_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSOX_ODR_FSM_12Hz5;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	2200      	movs	r2, #0
 800453c:	701a      	strb	r2, [r3, #0]
        break;
 800453e:	bf00      	nop
    }

    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8004540:	2100      	movs	r1, #0
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f7ff fed4 	bl	80042f0 <lsm6dsox_mem_bank_set>
 8004548:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800454a:	68fb      	ldr	r3, [r7, #12]
}
 800454c:	4618      	mov	r0, r3
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <lsm6dsox_mlc_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_mlc_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm6dsox_mlc_odr_t *val)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  lsm6dsox_emb_func_odr_cfg_c_t reg;
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 800455e:	2102      	movs	r1, #2
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f7ff fec5 	bl	80042f0 <lsm6dsox_mem_bank_set>
 8004566:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d107      	bne.n	800457e <lsm6dsox_mlc_data_rate_get+0x2a>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_ODR_CFG_C,
 800456e:	f107 0208 	add.w	r2, r7, #8
 8004572:	2301      	movs	r3, #1
 8004574:	2160      	movs	r1, #96	; 0x60
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7ff f956 	bl	8003828 <lsm6dsox_read_reg>
 800457c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d12a      	bne.n	80045da <lsm6dsox_mlc_data_rate_get+0x86>
  {
    switch (reg.mlc_odr)
 8004584:	7a3b      	ldrb	r3, [r7, #8]
 8004586:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b03      	cmp	r3, #3
 800458e:	d81b      	bhi.n	80045c8 <lsm6dsox_mlc_data_rate_get+0x74>
 8004590:	a201      	add	r2, pc, #4	; (adr r2, 8004598 <lsm6dsox_mlc_data_rate_get+0x44>)
 8004592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004596:	bf00      	nop
 8004598:	080045a9 	.word	0x080045a9
 800459c:	080045b1 	.word	0x080045b1
 80045a0:	080045b9 	.word	0x080045b9
 80045a4:	080045c1 	.word	0x080045c1
    {
      case LSM6DSOX_ODR_PRGS_12Hz5:
        *val = LSM6DSOX_ODR_PRGS_12Hz5;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	2200      	movs	r2, #0
 80045ac:	701a      	strb	r2, [r3, #0]
        break;
 80045ae:	e00f      	b.n	80045d0 <lsm6dsox_mlc_data_rate_get+0x7c>

      case LSM6DSOX_ODR_PRGS_26Hz:
        *val = LSM6DSOX_ODR_PRGS_26Hz;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	2201      	movs	r2, #1
 80045b4:	701a      	strb	r2, [r3, #0]
        break;
 80045b6:	e00b      	b.n	80045d0 <lsm6dsox_mlc_data_rate_get+0x7c>

      case LSM6DSOX_ODR_PRGS_52Hz:
        *val = LSM6DSOX_ODR_PRGS_52Hz;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	2202      	movs	r2, #2
 80045bc:	701a      	strb	r2, [r3, #0]
        break;
 80045be:	e007      	b.n	80045d0 <lsm6dsox_mlc_data_rate_get+0x7c>

      case LSM6DSOX_ODR_PRGS_104Hz:
        *val = LSM6DSOX_ODR_PRGS_104Hz;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	2203      	movs	r2, #3
 80045c4:	701a      	strb	r2, [r3, #0]
        break;
 80045c6:	e003      	b.n	80045d0 <lsm6dsox_mlc_data_rate_get+0x7c>

      default:
        *val = LSM6DSOX_ODR_PRGS_12Hz5;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	2200      	movs	r2, #0
 80045cc:	701a      	strb	r2, [r3, #0]
        break;
 80045ce:	bf00      	nop
    }

    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 80045d0:	2100      	movs	r1, #0
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f7ff fe8c 	bl	80042f0 <lsm6dsox_mem_bank_set>
 80045d8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80045da:	68fb      	ldr	r3, [r7, #12]
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <lsm6dsox_embedded_sens_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_embedded_sens_get(stmdev_ctx_t *ctx,
                                   lsm6dsox_emb_sens_t *emb_sens)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b086      	sub	sp, #24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  lsm6dsox_emb_func_en_a_t emb_func_en_a;
  lsm6dsox_emb_func_en_b_t emb_func_en_b;
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 80045ee:	2102      	movs	r1, #2
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f7ff fe7d 	bl	80042f0 <lsm6dsox_mem_bank_set>
 80045f6:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d107      	bne.n	800460e <lsm6dsox_embedded_sens_get+0x2a>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_EN_A,
 80045fe:	f107 0210 	add.w	r2, r7, #16
 8004602:	2301      	movs	r3, #1
 8004604:	2104      	movs	r1, #4
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7ff f90e 	bl	8003828 <lsm6dsox_read_reg>
 800460c:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&emb_func_en_a, 1);
  }

  if (ret == 0)
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d13d      	bne.n	8004690 <lsm6dsox_embedded_sens_get+0xac>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_EN_B,
 8004614:	f107 020c 	add.w	r2, r7, #12
 8004618:	2301      	movs	r3, #1
 800461a:	2105      	movs	r1, #5
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f7ff f903 	bl	8003828 <lsm6dsox_read_reg>
 8004622:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&emb_func_en_b, 1);
    emb_sens->mlc = emb_func_en_b.mlc_en;
 8004624:	7b3b      	ldrb	r3, [r7, #12]
 8004626:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800462a:	b2d9      	uxtb	r1, r3
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	7813      	ldrb	r3, [r2, #0]
 8004630:	f361 03c3 	bfi	r3, r1, #3, #1
 8004634:	7013      	strb	r3, [r2, #0]
    emb_sens->fsm = emb_func_en_b.fsm_en;
 8004636:	7b3b      	ldrb	r3, [r7, #12]
 8004638:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800463c:	b2d9      	uxtb	r1, r3
 800463e:	683a      	ldr	r2, [r7, #0]
 8004640:	7813      	ldrb	r3, [r2, #0]
 8004642:	f361 1304 	bfi	r3, r1, #4, #1
 8004646:	7013      	strb	r3, [r2, #0]
    emb_sens->tilt = emb_func_en_a.tilt_en;
 8004648:	7c3b      	ldrb	r3, [r7, #16]
 800464a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800464e:	b2d9      	uxtb	r1, r3
 8004650:	683a      	ldr	r2, [r7, #0]
 8004652:	7813      	ldrb	r3, [r2, #0]
 8004654:	f361 0341 	bfi	r3, r1, #1, #1
 8004658:	7013      	strb	r3, [r2, #0]
    emb_sens->step = emb_func_en_a.pedo_en;
 800465a:	7c3b      	ldrb	r3, [r7, #16]
 800465c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004660:	b2d9      	uxtb	r1, r3
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	7813      	ldrb	r3, [r2, #0]
 8004666:	f361 0382 	bfi	r3, r1, #2, #1
 800466a:	7013      	strb	r3, [r2, #0]
    emb_sens->sig_mot = emb_func_en_a.sign_motion_en;
 800466c:	7c3b      	ldrb	r3, [r7, #16]
 800466e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004672:	b2d9      	uxtb	r1, r3
 8004674:	683a      	ldr	r2, [r7, #0]
 8004676:	7813      	ldrb	r3, [r2, #0]
 8004678:	f361 0300 	bfi	r3, r1, #0, #1
 800467c:	7013      	strb	r3, [r2, #0]
    emb_sens->fifo_compr = emb_func_en_b.fifo_compr_en;
 800467e:	7b3b      	ldrb	r3, [r7, #12]
 8004680:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004684:	b2d9      	uxtb	r1, r3
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	7813      	ldrb	r3, [r2, #0]
 800468a:	f361 1345 	bfi	r3, r1, #5, #1
 800468e:	7013      	strb	r3, [r2, #0]
  }

  if (ret == 0)
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d104      	bne.n	80046a0 <lsm6dsox_embedded_sens_get+0xbc>
  {
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8004696:	2100      	movs	r1, #0
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f7ff fe29 	bl	80042f0 <lsm6dsox_mem_bank_set>
 800469e:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80046a0:	697b      	ldr	r3, [r7, #20]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3718      	adds	r7, #24
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <LL_AHB2_GRP1_EnableClock>:
{
 80046aa:	b480      	push	{r7}
 80046ac:	b085      	sub	sp, #20
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80046b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4313      	orrs	r3, r2
 80046c0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80046c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4013      	ands	r3, r2
 80046cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80046ce:	68fb      	ldr	r3, [r7, #12]
}
 80046d0:	bf00      	nop
 80046d2:	3714      	adds	r7, #20
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bc80      	pop	{r7}
 80046d8:	4770      	bx	lr

080046da <LL_APB1_GRP2_EnableClock>:
{
 80046da:	b480      	push	{r7}
 80046dc:	b085      	sub	sp, #20
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 80046e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80046e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80046f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4013      	ands	r3, r2
 80046fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80046fe:	68fb      	ldr	r3, [r7, #12]
}
 8004700:	bf00      	nop
 8004702:	3714      	adds	r7, #20
 8004704:	46bd      	mov	sp, r7
 8004706:	bc80      	pop	{r7}
 8004708:	4770      	bx	lr
	...

0800470c <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	4603      	mov	r3, r0
 8004714:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8004716:	79fb      	ldrb	r3, [r7, #7]
 8004718:	4a04      	ldr	r2, [pc, #16]	; (800472c <BSP_LED_Init+0x20>)
 800471a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800471e:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	0801a664 	.word	0x0801a664

08004730 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	4603      	mov	r3, r0
 8004738:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 800473a:	79fb      	ldrb	r3, [r7, #7]
 800473c:	4a06      	ldr	r2, [pc, #24]	; (8004758 <BSP_LED_On+0x28>)
 800473e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004742:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004746:	2201      	movs	r2, #1
 8004748:	4618      	mov	r0, r3
 800474a:	f001 f9c6 	bl	8005ada <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3708      	adds	r7, #8
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	20000060 	.word	0x20000060

0800475c <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	4603      	mov	r3, r0
 8004764:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8004766:	79fb      	ldrb	r3, [r7, #7]
 8004768:	4a06      	ldr	r2, [pc, #24]	; (8004784 <BSP_LED_Off+0x28>)
 800476a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800476e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004772:	2200      	movs	r2, #0
 8004774:	4618      	mov	r0, r3
 8004776:	f001 f9b0 	bl	8005ada <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3708      	adds	r7, #8
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	20000060 	.word	0x20000060

08004788 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800478e:	2002      	movs	r0, #2
 8004790:	f7ff ff8b 	bl	80046aa <LL_AHB2_GRP1_EnableClock>

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004794:	1d3b      	adds	r3, r7, #4
 8004796:	2200      	movs	r2, #0
 8004798:	601a      	str	r2, [r3, #0]
 800479a:	605a      	str	r2, [r3, #4]
 800479c:	609a      	str	r2, [r3, #8]
 800479e:	60da      	str	r2, [r3, #12]
 80047a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80047a2:	2002      	movs	r0, #2
 80047a4:	f7ff ff81 	bl	80046aa <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 80047a8:	2200      	movs	r2, #0
 80047aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80047ae:	480a      	ldr	r0, [pc, #40]	; (80047d8 <LED_USER_GPIO_Init+0x50>)
 80047b0:	f001 f993 	bl	8005ada <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 80047b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80047b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047ba:	2301      	movs	r3, #1
 80047bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047be:	2300      	movs	r3, #0
 80047c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047c2:	2302      	movs	r3, #2
 80047c4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 80047c6:	1d3b      	adds	r3, r7, #4
 80047c8:	4619      	mov	r1, r3
 80047ca:	4803      	ldr	r0, [pc, #12]	; (80047d8 <LED_USER_GPIO_Init+0x50>)
 80047cc:	f000 ff40 	bl	8005650 <HAL_GPIO_Init>

}
 80047d0:	bf00      	nop
 80047d2:	3718      	adds	r7, #24
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	48000400 	.word	0x48000400

080047dc <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	4603      	mov	r3, r0
 80047e4:	460a      	mov	r2, r1
 80047e6:	71fb      	strb	r3, [r7, #7]
 80047e8:	4613      	mov	r3, r2
 80047ea:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80047ec:	2300      	movs	r3, #0
 80047ee:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 80047f0:	79fb      	ldrb	r3, [r7, #7]
 80047f2:	4a1f      	ldr	r2, [pc, #124]	; (8004870 <BSP_PB_Init+0x94>)
 80047f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047f8:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 80047fa:	79bb      	ldrb	r3, [r7, #6]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d132      	bne.n	8004866 <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8004800:	79fb      	ldrb	r3, [r7, #7]
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	4a1b      	ldr	r2, [pc, #108]	; (8004874 <BSP_PB_Init+0x98>)
 8004806:	441a      	add	r2, r3
 8004808:	79fb      	ldrb	r3, [r7, #7]
 800480a:	491b      	ldr	r1, [pc, #108]	; (8004878 <BSP_PB_Init+0x9c>)
 800480c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004810:	4619      	mov	r1, r3
 8004812:	4610      	mov	r0, r2
 8004814:	f000 ff09 	bl	800562a <HAL_EXTI_GetHandle>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800481e:	f06f 0303 	mvn.w	r3, #3
 8004822:	60fb      	str	r3, [r7, #12]
 8004824:	e01f      	b.n	8004866 <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8004826:	79fb      	ldrb	r3, [r7, #7]
 8004828:	00db      	lsls	r3, r3, #3
 800482a:	4a12      	ldr	r2, [pc, #72]	; (8004874 <BSP_PB_Init+0x98>)
 800482c:	1898      	adds	r0, r3, r2
 800482e:	79fb      	ldrb	r3, [r7, #7]
 8004830:	4a12      	ldr	r2, [pc, #72]	; (800487c <BSP_PB_Init+0xa0>)
 8004832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004836:	461a      	mov	r2, r3
 8004838:	2100      	movs	r1, #0
 800483a:	f000 fedd 	bl	80055f8 <HAL_EXTI_RegisterCallback>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d003      	beq.n	800484c <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004844:	f06f 0303 	mvn.w	r3, #3
 8004848:	60fb      	str	r3, [r7, #12]
 800484a:	e00c      	b.n	8004866 <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800484c:	2006      	movs	r0, #6
 800484e:	79fb      	ldrb	r3, [r7, #7]
 8004850:	4a0b      	ldr	r2, [pc, #44]	; (8004880 <BSP_PB_Init+0xa4>)
 8004852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004856:	2200      	movs	r2, #0
 8004858:	4619      	mov	r1, r3
 800485a:	f000 faea 	bl	8004e32 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800485e:	2306      	movs	r3, #6
 8004860:	4618      	mov	r0, r3
 8004862:	f000 fb00 	bl	8004e66 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8004866:	68fb      	ldr	r3, [r7, #12]
}
 8004868:	4618      	mov	r0, r3
 800486a:	3710      	adds	r7, #16
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	0801a668 	.word	0x0801a668
 8004874:	20000068 	.word	0x20000068
 8004878:	0801a66c 	.word	0x0801a66c
 800487c:	0801a670 	.word	0x0801a670
 8004880:	0801a674 	.word	0x0801a674

08004884 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	4603      	mov	r3, r0
 800488c:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 800488e:	79fb      	ldrb	r3, [r7, #7]
 8004890:	4a08      	ldr	r2, [pc, #32]	; (80048b4 <BSP_PB_GetState+0x30>)
 8004892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004896:	2201      	movs	r2, #1
 8004898:	4611      	mov	r1, r2
 800489a:	4618      	mov	r0, r3
 800489c:	f001 f906 	bl	8005aac <HAL_GPIO_ReadPin>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	bf0c      	ite	eq
 80048a6:	2301      	moveq	r3, #1
 80048a8:	2300      	movne	r3, #0
 80048aa:	b2db      	uxtb	r3, r3
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3708      	adds	r7, #8
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	20000064 	.word	0x20000064

080048b8 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80048bc:	2000      	movs	r0, #0
 80048be:	f005 fdd9 	bl	800a474 <BSP_PB_Callback>
}
 80048c2:	bf00      	nop
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b086      	sub	sp, #24
 80048ca:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80048cc:	2001      	movs	r0, #1
 80048ce:	f7ff feec 	bl	80046aa <LL_AHB2_GRP1_EnableClock>

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048d2:	1d3b      	adds	r3, r7, #4
 80048d4:	2200      	movs	r2, #0
 80048d6:	601a      	str	r2, [r3, #0]
 80048d8:	605a      	str	r2, [r3, #4]
 80048da:	609a      	str	r2, [r3, #8]
 80048dc:	60da      	str	r2, [r3, #12]
 80048de:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80048e0:	2001      	movs	r0, #1
 80048e2:	f7ff fee2 	bl	80046aa <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 80048e6:	2301      	movs	r3, #1
 80048e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80048ea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80048ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048f0:	2300      	movs	r3, #0
 80048f2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 80048f4:	1d3b      	adds	r3, r7, #4
 80048f6:	4619      	mov	r1, r3
 80048f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80048fc:	f000 fea8 	bl	8005650 <HAL_GPIO_Init>

}
 8004900:	bf00      	nop
 8004902:	3718      	adds	r7, #24
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	4603      	mov	r3, r0
 8004910:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8004912:	2300      	movs	r3, #0
 8004914:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8004916:	79fb      	ldrb	r3, [r7, #7]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d903      	bls.n	8004924 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800491c:	f06f 0301 	mvn.w	r3, #1
 8004920:	60fb      	str	r3, [r7, #12]
 8004922:	e025      	b.n	8004970 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8004924:	79fb      	ldrb	r3, [r7, #7]
 8004926:	79fa      	ldrb	r2, [r7, #7]
 8004928:	4914      	ldr	r1, [pc, #80]	; (800497c <BSP_COM_Init+0x74>)
 800492a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800492e:	4814      	ldr	r0, [pc, #80]	; (8004980 <BSP_COM_Init+0x78>)
 8004930:	4613      	mov	r3, r2
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	4413      	add	r3, r2
 8004936:	011b      	lsls	r3, r3, #4
 8004938:	4403      	add	r3, r0
 800493a:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    LPUART1_MspInit(&hcom_uart[COM]);
 800493c:	79fa      	ldrb	r2, [r7, #7]
 800493e:	4613      	mov	r3, r2
 8004940:	00db      	lsls	r3, r3, #3
 8004942:	4413      	add	r3, r2
 8004944:	011b      	lsls	r3, r3, #4
 8004946:	4a0e      	ldr	r2, [pc, #56]	; (8004980 <BSP_COM_Init+0x78>)
 8004948:	4413      	add	r3, r2
 800494a:	4618      	mov	r0, r3
 800494c:	f000 f86c 	bl	8004a28 <LPUART1_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_LPUART1_UART_Init(&hcom_uart[COM]))
 8004950:	79fa      	ldrb	r2, [r7, #7]
 8004952:	4613      	mov	r3, r2
 8004954:	00db      	lsls	r3, r3, #3
 8004956:	4413      	add	r3, r2
 8004958:	011b      	lsls	r3, r3, #4
 800495a:	4a09      	ldr	r2, [pc, #36]	; (8004980 <BSP_COM_Init+0x78>)
 800495c:	4413      	add	r3, r2
 800495e:	4618      	mov	r0, r3
 8004960:	f000 f810 	bl	8004984 <MX_LPUART1_UART_Init>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d002      	beq.n	8004970 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800496a:	f06f 0303 	mvn.w	r3, #3
 800496e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8004970:	68fb      	ldr	r3, [r7, #12]
}
 8004972:	4618      	mov	r0, r3
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	20000070 	.word	0x20000070
 8004980:	2000074c 	.word	0x2000074c

08004984 <MX_LPUART1_UART_Init>:
 */

/* LPUART1 init function */

__weak HAL_StatusTypeDef MX_LPUART1_UART_Init(UART_HandleTypeDef* hlpuart)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800498c:	2300      	movs	r3, #0
 800498e:	73fb      	strb	r3, [r7, #15]

  hlpuart->Instance = LPUART1;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a24      	ldr	r2, [pc, #144]	; (8004a24 <MX_LPUART1_UART_Init+0xa0>)
 8004994:	601a      	str	r2, [r3, #0]
  hlpuart->Init.BaudRate = 921600;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800499c:	605a      	str	r2, [r3, #4]
  hlpuart->Init.WordLength = UART_WORDLENGTH_8B;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	609a      	str	r2, [r3, #8]
  hlpuart->Init.StopBits = UART_STOPBITS_1;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	60da      	str	r2, [r3, #12]
  hlpuart->Init.Parity = UART_PARITY_NONE;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	611a      	str	r2, [r3, #16]
  hlpuart->Init.Mode = UART_MODE_TX_RX;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	220c      	movs	r2, #12
 80049b4:	615a      	str	r2, [r3, #20]
  hlpuart->Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80049bc:	619a      	str	r2, [r3, #24]
  hlpuart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	621a      	str	r2, [r3, #32]
  hlpuart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart->FifoMode = UART_FIFOMODE_DISABLE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(hlpuart) != HAL_OK)
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f004 f9e0 	bl	8008d9c <HAL_UART_Init>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <MX_LPUART1_UART_Init+0x62>
  {
    ret = HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetTxFifoThreshold(hlpuart, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80049e6:	2100      	movs	r1, #0
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f005 f9d5 	bl	8009d98 <HAL_UARTEx_SetTxFifoThreshold>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d001      	beq.n	80049f8 <MX_LPUART1_UART_Init+0x74>
  {
    ret = HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetRxFifoThreshold(hlpuart, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80049f8:	2100      	movs	r1, #0
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f005 fa0a 	bl	8009e14 <HAL_UARTEx_SetRxFifoThreshold>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <MX_LPUART1_UART_Init+0x86>
  {
    ret = HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_DisableFifoMode(hlpuart) != HAL_OK)
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f005 f98c 	bl	8009d28 <HAL_UARTEx_DisableFifoMode>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d001      	beq.n	8004a1a <MX_LPUART1_UART_Init+0x96>
  {
    ret = HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3710      	adds	r7, #16
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	40008000 	.word	0x40008000

08004a28 <LPUART1_MspInit>:
 * @retval None
 */
DMA_HandleTypeDef hdma_lpuart1_rx;

static void LPUART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b096      	sub	sp, #88	; 0x58
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004a30:	f107 030c 	add.w	r3, r7, #12
 8004a34:	2238      	movs	r2, #56	; 0x38
 8004a36:	2100      	movs	r1, #0
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f013 f857 	bl	8017aec <memset>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8004a3e:	2320      	movs	r3, #32
 8004a40:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8004a42:	2300      	movs	r3, #0
 8004a44:	61fb      	str	r3, [r7, #28]
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8004a46:	f107 030c 	add.w	r3, r7, #12
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f003 f8fc 	bl	8007c48 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8004a50:	2001      	movs	r0, #1
 8004a52:	f7ff fe42 	bl	80046da <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a56:	2002      	movs	r0, #2
 8004a58:	f7ff fe27 	bl	80046aa <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a5c:	2001      	movs	r0, #1
 8004a5e:	f7ff fe24 	bl	80046aa <LL_AHB2_GRP1_EnableClock>
    PB13     ------> LPUART1_CTS
    PB12     ------> LPUART1_RTS
    PA3     ------> LPUART1_RX
    PA2     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = BUS_LPUART1_CTS_GPIO_PIN;
 8004a62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a66:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a68:	2302      	movs	r3, #2
 8004a6a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a70:	2300      	movs	r3, #0
 8004a72:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = BUS_LPUART1_CTS_GPIO_AF;
 8004a74:	2308      	movs	r3, #8
 8004a76:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(BUS_LPUART1_CTS_GPIO_PORT, &GPIO_InitStruct);
 8004a78:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	4831      	ldr	r0, [pc, #196]	; (8004b44 <LPUART1_MspInit+0x11c>)
 8004a80:	f000 fde6 	bl	8005650 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_LPUART1_RTS_GPIO_PIN;
 8004a84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a88:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a92:	2300      	movs	r3, #0
 8004a94:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = BUS_LPUART1_RTS_GPIO_AF;
 8004a96:	2308      	movs	r3, #8
 8004a98:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(BUS_LPUART1_RTS_GPIO_PORT, &GPIO_InitStruct);
 8004a9a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	4828      	ldr	r0, [pc, #160]	; (8004b44 <LPUART1_MspInit+0x11c>)
 8004aa2:	f000 fdd5 	bl	8005650 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_LPUART1_RX_GPIO_PIN;
 8004aa6:	2308      	movs	r3, #8
 8004aa8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aaa:	2302      	movs	r3, #2
 8004aac:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = BUS_LPUART1_RX_GPIO_AF;
 8004ab6:	2308      	movs	r3, #8
 8004ab8:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(BUS_LPUART1_RX_GPIO_PORT, &GPIO_InitStruct);
 8004aba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004abe:	4619      	mov	r1, r3
 8004ac0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ac4:	f000 fdc4 	bl	8005650 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_LPUART1_TX_GPIO_PIN;
 8004ac8:	2304      	movs	r3, #4
 8004aca:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004acc:	2302      	movs	r3, #2
 8004ace:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = BUS_LPUART1_TX_GPIO_AF;
 8004ad8:	2308      	movs	r3, #8
 8004ada:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(BUS_LPUART1_TX_GPIO_PORT, &GPIO_InitStruct);
 8004adc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ae6:	f000 fdb3 	bl	8005650 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_lpuart1_rx.Instance = DMA1_Channel6;
 8004aea:	4b17      	ldr	r3, [pc, #92]	; (8004b48 <LPUART1_MspInit+0x120>)
 8004aec:	4a17      	ldr	r2, [pc, #92]	; (8004b4c <LPUART1_MspInit+0x124>)
 8004aee:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8004af0:	4b15      	ldr	r3, [pc, #84]	; (8004b48 <LPUART1_MspInit+0x120>)
 8004af2:	2215      	movs	r2, #21
 8004af4:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004af6:	4b14      	ldr	r3, [pc, #80]	; (8004b48 <LPUART1_MspInit+0x120>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004afc:	4b12      	ldr	r3, [pc, #72]	; (8004b48 <LPUART1_MspInit+0x120>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004b02:	4b11      	ldr	r3, [pc, #68]	; (8004b48 <LPUART1_MspInit+0x120>)
 8004b04:	2280      	movs	r2, #128	; 0x80
 8004b06:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b08:	4b0f      	ldr	r3, [pc, #60]	; (8004b48 <LPUART1_MspInit+0x120>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b0e:	4b0e      	ldr	r3, [pc, #56]	; (8004b48 <LPUART1_MspInit+0x120>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8004b14:	4b0c      	ldr	r3, [pc, #48]	; (8004b48 <LPUART1_MspInit+0x120>)
 8004b16:	2220      	movs	r2, #32
 8004b18:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004b1a:	4b0b      	ldr	r3, [pc, #44]	; (8004b48 <LPUART1_MspInit+0x120>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_lpuart1_rx);
 8004b20:	4809      	ldr	r0, [pc, #36]	; (8004b48 <LPUART1_MspInit+0x120>)
 8004b22:	f000 faa5 	bl	8005070 <HAL_DMA_Init>

    HAL_DMA_ConfigChannelAttributes(&hdma_lpuart1_rx, DMA_CHANNEL_NPRIV);
 8004b26:	2110      	movs	r1, #16
 8004b28:	4807      	ldr	r0, [pc, #28]	; (8004b48 <LPUART1_MspInit+0x120>)
 8004b2a:	f000 fc8d 	bl	8005448 <HAL_DMA_ConfigChannelAttributes>

  __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a05      	ldr	r2, [pc, #20]	; (8004b48 <LPUART1_MspInit+0x120>)
 8004b32:	67da      	str	r2, [r3, #124]	; 0x7c
 8004b34:	4a04      	ldr	r2, [pc, #16]	; (8004b48 <LPUART1_MspInit+0x120>)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
}
 8004b3a:	bf00      	nop
 8004b3c:	3758      	adds	r7, #88	; 0x58
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	48000400 	.word	0x48000400
 8004b48:	200007dc 	.word	0x200007dc
 8004b4c:	4002006c 	.word	0x4002006c

08004b50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004b56:	2300      	movs	r3, #0
 8004b58:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b5a:	2003      	movs	r0, #3
 8004b5c:	f000 f95e 	bl	8004e1c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004b60:	f002 fe94 	bl	800788c <HAL_RCC_GetHCLKFreq>
 8004b64:	4603      	mov	r3, r0
 8004b66:	4a09      	ldr	r2, [pc, #36]	; (8004b8c <HAL_Init+0x3c>)
 8004b68:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004b6a:	2000      	movs	r0, #0
 8004b6c:	f000 f810 	bl	8004b90 <HAL_InitTick>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d002      	beq.n	8004b7c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	71fb      	strb	r3, [r7, #7]
 8004b7a:	e001      	b.n	8004b80 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004b7c:	f7fd f94a 	bl	8001e14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004b80:	79fb      	ldrb	r3, [r7, #7]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	20000004 	.word	0x20000004

08004b90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004b9c:	4b17      	ldr	r3, [pc, #92]	; (8004bfc <HAL_InitTick+0x6c>)
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d024      	beq.n	8004bee <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004ba4:	f002 fe72 	bl	800788c <HAL_RCC_GetHCLKFreq>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	4b14      	ldr	r3, [pc, #80]	; (8004bfc <HAL_InitTick+0x6c>)
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	4619      	mov	r1, r3
 8004bb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bb4:	fbb3 f3f1 	udiv	r3, r3, r1
 8004bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f000 f960 	bl	8004e82 <HAL_SYSTICK_Config>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10f      	bne.n	8004be8 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b0f      	cmp	r3, #15
 8004bcc:	d809      	bhi.n	8004be2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004bce:	2200      	movs	r2, #0
 8004bd0:	6879      	ldr	r1, [r7, #4]
 8004bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd6:	f000 f92c 	bl	8004e32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004bda:	4a09      	ldr	r2, [pc, #36]	; (8004c00 <HAL_InitTick+0x70>)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6013      	str	r3, [r2, #0]
 8004be0:	e007      	b.n	8004bf2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	73fb      	strb	r3, [r7, #15]
 8004be6:	e004      	b.n	8004bf2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	73fb      	strb	r3, [r7, #15]
 8004bec:	e001      	b.n	8004bf2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	20000078 	.word	0x20000078
 8004c00:	20000074 	.word	0x20000074

08004c04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c04:	b480      	push	{r7}
 8004c06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004c08:	4b05      	ldr	r3, [pc, #20]	; (8004c20 <HAL_IncTick+0x1c>)
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	4b05      	ldr	r3, [pc, #20]	; (8004c24 <HAL_IncTick+0x20>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4413      	add	r3, r2
 8004c14:	4a03      	ldr	r2, [pc, #12]	; (8004c24 <HAL_IncTick+0x20>)
 8004c16:	6013      	str	r3, [r2, #0]
}
 8004c18:	bf00      	nop
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bc80      	pop	{r7}
 8004c1e:	4770      	bx	lr
 8004c20:	20000078 	.word	0x20000078
 8004c24:	2000083c 	.word	0x2000083c

08004c28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8004c2c:	4b02      	ldr	r3, [pc, #8]	; (8004c38 <HAL_GetTick+0x10>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bc80      	pop	{r7}
 8004c36:	4770      	bx	lr
 8004c38:	2000083c 	.word	0x2000083c

08004c3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c44:	f7ff fff0 	bl	8004c28 <HAL_GetTick>
 8004c48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c54:	d005      	beq.n	8004c62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c56:	4b0a      	ldr	r3, [pc, #40]	; (8004c80 <HAL_Delay+0x44>)
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	4413      	add	r3, r2
 8004c60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004c62:	bf00      	nop
 8004c64:	f7ff ffe0 	bl	8004c28 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d8f7      	bhi.n	8004c64 <HAL_Delay+0x28>
  {
  }
}
 8004c74:	bf00      	nop
 8004c76:	bf00      	nop
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	20000078 	.word	0x20000078

08004c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f003 0307 	and.w	r3, r3, #7
 8004c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c94:	4b0c      	ldr	r3, [pc, #48]	; (8004cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004cac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004cb6:	4a04      	ldr	r2, [pc, #16]	; (8004cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	60d3      	str	r3, [r2, #12]
}
 8004cbc:	bf00      	nop
 8004cbe:	3714      	adds	r7, #20
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bc80      	pop	{r7}
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	e000ed00 	.word	0xe000ed00

08004ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004cd0:	4b04      	ldr	r3, [pc, #16]	; (8004ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	0a1b      	lsrs	r3, r3, #8
 8004cd6:	f003 0307 	and.w	r3, r3, #7
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bc80      	pop	{r7}
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	e000ed00 	.word	0xe000ed00

08004ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	4603      	mov	r3, r0
 8004cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	db0b      	blt.n	8004d12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cfa:	79fb      	ldrb	r3, [r7, #7]
 8004cfc:	f003 021f 	and.w	r2, r3, #31
 8004d00:	4906      	ldr	r1, [pc, #24]	; (8004d1c <__NVIC_EnableIRQ+0x34>)
 8004d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d06:	095b      	lsrs	r3, r3, #5
 8004d08:	2001      	movs	r0, #1
 8004d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8004d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004d12:	bf00      	nop
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bc80      	pop	{r7}
 8004d1a:	4770      	bx	lr
 8004d1c:	e000e100 	.word	0xe000e100

08004d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	4603      	mov	r3, r0
 8004d28:	6039      	str	r1, [r7, #0]
 8004d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	db0a      	blt.n	8004d4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	b2da      	uxtb	r2, r3
 8004d38:	490c      	ldr	r1, [pc, #48]	; (8004d6c <__NVIC_SetPriority+0x4c>)
 8004d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d3e:	0112      	lsls	r2, r2, #4
 8004d40:	b2d2      	uxtb	r2, r2
 8004d42:	440b      	add	r3, r1
 8004d44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d48:	e00a      	b.n	8004d60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	b2da      	uxtb	r2, r3
 8004d4e:	4908      	ldr	r1, [pc, #32]	; (8004d70 <__NVIC_SetPriority+0x50>)
 8004d50:	79fb      	ldrb	r3, [r7, #7]
 8004d52:	f003 030f 	and.w	r3, r3, #15
 8004d56:	3b04      	subs	r3, #4
 8004d58:	0112      	lsls	r2, r2, #4
 8004d5a:	b2d2      	uxtb	r2, r2
 8004d5c:	440b      	add	r3, r1
 8004d5e:	761a      	strb	r2, [r3, #24]
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bc80      	pop	{r7}
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	e000e100 	.word	0xe000e100
 8004d70:	e000ed00 	.word	0xe000ed00

08004d74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b089      	sub	sp, #36	; 0x24
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f003 0307 	and.w	r3, r3, #7
 8004d86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	f1c3 0307 	rsb	r3, r3, #7
 8004d8e:	2b04      	cmp	r3, #4
 8004d90:	bf28      	it	cs
 8004d92:	2304      	movcs	r3, #4
 8004d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	3304      	adds	r3, #4
 8004d9a:	2b06      	cmp	r3, #6
 8004d9c:	d902      	bls.n	8004da4 <NVIC_EncodePriority+0x30>
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	3b03      	subs	r3, #3
 8004da2:	e000      	b.n	8004da6 <NVIC_EncodePriority+0x32>
 8004da4:	2300      	movs	r3, #0
 8004da6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004da8:	f04f 32ff 	mov.w	r2, #4294967295
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	fa02 f303 	lsl.w	r3, r2, r3
 8004db2:	43da      	mvns	r2, r3
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	401a      	ands	r2, r3
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8004dc6:	43d9      	mvns	r1, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dcc:	4313      	orrs	r3, r2
         );
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3724      	adds	r7, #36	; 0x24
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bc80      	pop	{r7}
 8004dd6:	4770      	bx	lr

08004dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	3b01      	subs	r3, #1
 8004de4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004de8:	d301      	bcc.n	8004dee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004dea:	2301      	movs	r3, #1
 8004dec:	e00f      	b.n	8004e0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004dee:	4a0a      	ldr	r2, [pc, #40]	; (8004e18 <SysTick_Config+0x40>)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	3b01      	subs	r3, #1
 8004df4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004df6:	210f      	movs	r1, #15
 8004df8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dfc:	f7ff ff90 	bl	8004d20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e00:	4b05      	ldr	r3, [pc, #20]	; (8004e18 <SysTick_Config+0x40>)
 8004e02:	2200      	movs	r2, #0
 8004e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e06:	4b04      	ldr	r3, [pc, #16]	; (8004e18 <SysTick_Config+0x40>)
 8004e08:	2207      	movs	r2, #7
 8004e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3708      	adds	r7, #8
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	e000e010 	.word	0xe000e010

08004e1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f7ff ff2d 	bl	8004c84 <__NVIC_SetPriorityGrouping>
}
 8004e2a:	bf00      	nop
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b086      	sub	sp, #24
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	4603      	mov	r3, r0
 8004e3a:	60b9      	str	r1, [r7, #8]
 8004e3c:	607a      	str	r2, [r7, #4]
 8004e3e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004e40:	f7ff ff44 	bl	8004ccc <__NVIC_GetPriorityGrouping>
 8004e44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	68b9      	ldr	r1, [r7, #8]
 8004e4a:	6978      	ldr	r0, [r7, #20]
 8004e4c:	f7ff ff92 	bl	8004d74 <NVIC_EncodePriority>
 8004e50:	4602      	mov	r2, r0
 8004e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e56:	4611      	mov	r1, r2
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7ff ff61 	bl	8004d20 <__NVIC_SetPriority>
}
 8004e5e:	bf00      	nop
 8004e60:	3718      	adds	r7, #24
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b082      	sub	sp, #8
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7ff ff37 	bl	8004ce8 <__NVIC_EnableIRQ>
}
 8004e7a:	bf00      	nop
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b082      	sub	sp, #8
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f7ff ffa4 	bl	8004dd8 <SysTick_Config>
 8004e90:	4603      	mov	r3, r0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
	...

08004e9c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e054      	b.n	8004f58 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	7f5b      	ldrb	r3, [r3, #29]
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d105      	bne.n	8004ec4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f7fc ffae 	bl	8001e20 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	791b      	ldrb	r3, [r3, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10c      	bne.n	8004eec <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a22      	ldr	r2, [pc, #136]	; (8004f60 <HAL_CRC_Init+0xc4>)
 8004ed8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	689a      	ldr	r2, [r3, #8]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f022 0218 	bic.w	r2, r2, #24
 8004ee8:	609a      	str	r2, [r3, #8]
 8004eea:	e00c      	b.n	8004f06 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6899      	ldr	r1, [r3, #8]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f834 	bl	8004f64 <HAL_CRCEx_Polynomial_Set>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e028      	b.n	8004f58 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	795b      	ldrb	r3, [r3, #5]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d105      	bne.n	8004f1a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f04f 32ff 	mov.w	r2, #4294967295
 8004f16:	611a      	str	r2, [r3, #16]
 8004f18:	e004      	b.n	8004f24 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	6912      	ldr	r2, [r2, #16]
 8004f22:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	695a      	ldr	r2, [r3, #20]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	430a      	orrs	r2, r1
 8004f38:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	699a      	ldr	r2, [r3, #24]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3708      	adds	r7, #8
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	04c11db7 	.word	0x04c11db7

08004f64 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b087      	sub	sp, #28
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f70:	2300      	movs	r3, #0
 8004f72:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004f74:	231f      	movs	r3, #31
 8004f76:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004f78:	bf00      	nop
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	1e5a      	subs	r2, r3, #1
 8004f7e:	613a      	str	r2, [r7, #16]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d009      	beq.n	8004f98 <HAL_CRCEx_Polynomial_Set+0x34>
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	f003 031f 	and.w	r3, r3, #31
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d0f0      	beq.n	8004f7a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b18      	cmp	r3, #24
 8004f9c:	d846      	bhi.n	800502c <HAL_CRCEx_Polynomial_Set+0xc8>
 8004f9e:	a201      	add	r2, pc, #4	; (adr r2, 8004fa4 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa4:	08005033 	.word	0x08005033
 8004fa8:	0800502d 	.word	0x0800502d
 8004fac:	0800502d 	.word	0x0800502d
 8004fb0:	0800502d 	.word	0x0800502d
 8004fb4:	0800502d 	.word	0x0800502d
 8004fb8:	0800502d 	.word	0x0800502d
 8004fbc:	0800502d 	.word	0x0800502d
 8004fc0:	0800502d 	.word	0x0800502d
 8004fc4:	08005021 	.word	0x08005021
 8004fc8:	0800502d 	.word	0x0800502d
 8004fcc:	0800502d 	.word	0x0800502d
 8004fd0:	0800502d 	.word	0x0800502d
 8004fd4:	0800502d 	.word	0x0800502d
 8004fd8:	0800502d 	.word	0x0800502d
 8004fdc:	0800502d 	.word	0x0800502d
 8004fe0:	0800502d 	.word	0x0800502d
 8004fe4:	08005015 	.word	0x08005015
 8004fe8:	0800502d 	.word	0x0800502d
 8004fec:	0800502d 	.word	0x0800502d
 8004ff0:	0800502d 	.word	0x0800502d
 8004ff4:	0800502d 	.word	0x0800502d
 8004ff8:	0800502d 	.word	0x0800502d
 8004ffc:	0800502d 	.word	0x0800502d
 8005000:	0800502d 	.word	0x0800502d
 8005004:	08005009 	.word	0x08005009
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	2b06      	cmp	r3, #6
 800500c:	d913      	bls.n	8005036 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005012:	e010      	b.n	8005036 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	2b07      	cmp	r3, #7
 8005018:	d90f      	bls.n	800503a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800501e:	e00c      	b.n	800503a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	2b0f      	cmp	r3, #15
 8005024:	d90b      	bls.n	800503e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800502a:	e008      	b.n	800503e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	75fb      	strb	r3, [r7, #23]
      break;
 8005030:	e006      	b.n	8005040 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005032:	bf00      	nop
 8005034:	e004      	b.n	8005040 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005036:	bf00      	nop
 8005038:	e002      	b.n	8005040 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800503a:	bf00      	nop
 800503c:	e000      	b.n	8005040 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800503e:	bf00      	nop
  }
  if (status == HAL_OK)
 8005040:	7dfb      	ldrb	r3, [r7, #23]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10d      	bne.n	8005062 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f023 0118 	bic.w	r1, r3, #24
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	430a      	orrs	r2, r1
 8005060:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8005062:	7dfb      	ldrb	r3, [r7, #23]
}
 8005064:	4618      	mov	r0, r3
 8005066:	371c      	adds	r7, #28
 8005068:	46bd      	mov	sp, r7
 800506a:	bc80      	pop	{r7}
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop

08005070 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e08e      	b.n	80051a0 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	461a      	mov	r2, r3
 8005088:	4b47      	ldr	r3, [pc, #284]	; (80051a8 <HAL_DMA_Init+0x138>)
 800508a:	429a      	cmp	r2, r3
 800508c:	d80f      	bhi.n	80050ae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	461a      	mov	r2, r3
 8005094:	4b45      	ldr	r3, [pc, #276]	; (80051ac <HAL_DMA_Init+0x13c>)
 8005096:	4413      	add	r3, r2
 8005098:	4a45      	ldr	r2, [pc, #276]	; (80051b0 <HAL_DMA_Init+0x140>)
 800509a:	fba2 2303 	umull	r2, r3, r2, r3
 800509e:	091b      	lsrs	r3, r3, #4
 80050a0:	009a      	lsls	r2, r3, #2
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a42      	ldr	r2, [pc, #264]	; (80051b4 <HAL_DMA_Init+0x144>)
 80050aa:	641a      	str	r2, [r3, #64]	; 0x40
 80050ac:	e00e      	b.n	80050cc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	461a      	mov	r2, r3
 80050b4:	4b40      	ldr	r3, [pc, #256]	; (80051b8 <HAL_DMA_Init+0x148>)
 80050b6:	4413      	add	r3, r2
 80050b8:	4a3d      	ldr	r2, [pc, #244]	; (80051b0 <HAL_DMA_Init+0x140>)
 80050ba:	fba2 2303 	umull	r2, r3, r2, r3
 80050be:	091b      	lsrs	r3, r3, #4
 80050c0:	009a      	lsls	r2, r3, #2
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a3c      	ldr	r2, [pc, #240]	; (80051bc <HAL_DMA_Init+0x14c>)
 80050ca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2202      	movs	r2, #2
 80050d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	6812      	ldr	r2, [r2, #0]
 80050de:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80050e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e6:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	6819      	ldr	r1, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	689a      	ldr	r2, [r3, #8]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	431a      	orrs	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	431a      	orrs	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	431a      	orrs	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	699b      	ldr	r3, [r3, #24]
 8005108:	431a      	orrs	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	69db      	ldr	r3, [r3, #28]
 800510e:	431a      	orrs	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a1b      	ldr	r3, [r3, #32]
 8005114:	431a      	orrs	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	430a      	orrs	r2, r1
 800511c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f9fe 	bl	8005520 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800512c:	d102      	bne.n	8005134 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685a      	ldr	r2, [r3, #4]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800513c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005140:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800514a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d010      	beq.n	8005176 <HAL_DMA_Init+0x106>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	2b04      	cmp	r3, #4
 800515a:	d80c      	bhi.n	8005176 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 fa27 	bl	80055b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005166:	2200      	movs	r2, #0
 8005168:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005172:	605a      	str	r2, [r3, #4]
 8005174:	e008      	b.n	8005188 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3708      	adds	r7, #8
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	40020407 	.word	0x40020407
 80051ac:	bffdfff8 	.word	0xbffdfff8
 80051b0:	cccccccd 	.word	0xcccccccd
 80051b4:	40020000 	.word	0x40020000
 80051b8:	bffdfbf8 	.word	0xbffdfbf8
 80051bc:	40020400 	.word	0x40020400

080051c0 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b086      	sub	sp, #24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
 80051cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051ce:	2300      	movs	r3, #0
 80051d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d101      	bne.n	80051e0 <HAL_DMA_Start_IT+0x20>
 80051dc:	2302      	movs	r3, #2
 80051de:	e069      	b.n	80052b4 <HAL_DMA_Start_IT+0xf4>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d155      	bne.n	80052a0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2202      	movs	r2, #2
 80051f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f022 0201 	bic.w	r2, r2, #1
 8005210:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	68b9      	ldr	r1, [r7, #8]
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f000 f944 	bl	80054a6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005222:	2b00      	cmp	r3, #0
 8005224:	d008      	beq.n	8005238 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f042 020e 	orr.w	r2, r2, #14
 8005234:	601a      	str	r2, [r3, #0]
 8005236:	e00f      	b.n	8005258 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f022 0204 	bic.w	r2, r2, #4
 8005246:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f042 020a 	orr.w	r2, r2, #10
 8005256:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d007      	beq.n	8005276 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005270:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005274:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800527a:	2b00      	cmp	r3, #0
 800527c:	d007      	beq.n	800528e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005288:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800528c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f042 0201 	orr.w	r2, r2, #1
 800529c:	601a      	str	r2, [r3, #0]
 800529e:	e008      	b.n	80052b2 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2280      	movs	r2, #128	; 0x80
 80052a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80052b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3718      	adds	r7, #24
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d8:	f003 031c 	and.w	r3, r3, #28
 80052dc:	2204      	movs	r2, #4
 80052de:	409a      	lsls	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	4013      	ands	r3, r2
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d027      	beq.n	8005338 <HAL_DMA_IRQHandler+0x7c>
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	f003 0304 	and.w	r3, r3, #4
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d022      	beq.n	8005338 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0320 	and.w	r3, r3, #32
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d107      	bne.n	8005310 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f022 0204 	bic.w	r2, r2, #4
 800530e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005314:	f003 021c 	and.w	r2, r3, #28
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531c:	2104      	movs	r1, #4
 800531e:	fa01 f202 	lsl.w	r2, r1, r2
 8005322:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005328:	2b00      	cmp	r3, #0
 800532a:	f000 8081 	beq.w	8005430 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8005336:	e07b      	b.n	8005430 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800533c:	f003 031c 	and.w	r3, r3, #28
 8005340:	2202      	movs	r2, #2
 8005342:	409a      	lsls	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	4013      	ands	r3, r2
 8005348:	2b00      	cmp	r3, #0
 800534a:	d03d      	beq.n	80053c8 <HAL_DMA_IRQHandler+0x10c>
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b00      	cmp	r3, #0
 8005354:	d038      	beq.n	80053c8 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0320 	and.w	r3, r3, #32
 8005360:	2b00      	cmp	r3, #0
 8005362:	d10b      	bne.n	800537c <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f022 020a 	bic.w	r2, r2, #10
 8005372:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	461a      	mov	r2, r3
 8005382:	4b2e      	ldr	r3, [pc, #184]	; (800543c <HAL_DMA_IRQHandler+0x180>)
 8005384:	429a      	cmp	r2, r3
 8005386:	d909      	bls.n	800539c <HAL_DMA_IRQHandler+0xe0>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800538c:	f003 031c 	and.w	r3, r3, #28
 8005390:	4a2b      	ldr	r2, [pc, #172]	; (8005440 <HAL_DMA_IRQHandler+0x184>)
 8005392:	2102      	movs	r1, #2
 8005394:	fa01 f303 	lsl.w	r3, r1, r3
 8005398:	6053      	str	r3, [r2, #4]
 800539a:	e008      	b.n	80053ae <HAL_DMA_IRQHandler+0xf2>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a0:	f003 031c 	and.w	r3, r3, #28
 80053a4:	4a27      	ldr	r2, [pc, #156]	; (8005444 <HAL_DMA_IRQHandler+0x188>)
 80053a6:	2102      	movs	r1, #2
 80053a8:	fa01 f303 	lsl.w	r3, r1, r3
 80053ac:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d038      	beq.n	8005430 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80053c6:	e033      	b.n	8005430 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053cc:	f003 031c 	and.w	r3, r3, #28
 80053d0:	2208      	movs	r2, #8
 80053d2:	409a      	lsls	r2, r3
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	4013      	ands	r3, r2
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d02a      	beq.n	8005432 <HAL_DMA_IRQHandler+0x176>
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	f003 0308 	and.w	r3, r3, #8
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d025      	beq.n	8005432 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f022 020e 	bic.w	r2, r2, #14
 80053f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053fa:	f003 021c 	and.w	r2, r3, #28
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005402:	2101      	movs	r1, #1
 8005404:	fa01 f202 	lsl.w	r2, r1, r2
 8005408:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005424:	2b00      	cmp	r3, #0
 8005426:	d004      	beq.n	8005432 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005430:	bf00      	nop
 8005432:	bf00      	nop
}
 8005434:	3710      	adds	r7, #16
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	40020080 	.word	0x40020080
 8005440:	40020400 	.word	0x40020400
 8005444:	40020000 	.word	0x40020000

08005448 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005452:	2300      	movs	r3, #0
 8005454:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d103      	bne.n	8005464 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	72fb      	strb	r3, [r7, #11]
    return status;
 8005460:	7afb      	ldrb	r3, [r7, #11]
 8005462:	e01b      	b.n	800549c <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	f003 0310 	and.w	r3, r3, #16
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00d      	beq.n	8005492 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d004      	beq.n	800548a <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005486:	60fb      	str	r3, [r7, #12]
 8005488:	e003      	b.n	8005492 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005490:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	601a      	str	r2, [r3, #0]

  return status;
 800549a:	7afb      	ldrb	r3, [r7, #11]
}
 800549c:	4618      	mov	r0, r3
 800549e:	3714      	adds	r7, #20
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bc80      	pop	{r7}
 80054a4:	4770      	bx	lr

080054a6 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054a6:	b480      	push	{r7}
 80054a8:	b085      	sub	sp, #20
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	60f8      	str	r0, [r7, #12]
 80054ae:	60b9      	str	r1, [r7, #8]
 80054b0:	607a      	str	r2, [r7, #4]
 80054b2:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80054bc:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d004      	beq.n	80054d0 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80054ce:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d4:	f003 021c 	and.w	r2, r3, #28
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054dc:	2101      	movs	r1, #1
 80054de:	fa01 f202 	lsl.w	r2, r1, r2
 80054e2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	683a      	ldr	r2, [r7, #0]
 80054ea:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	2b10      	cmp	r3, #16
 80054f2:	d108      	bne.n	8005506 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68ba      	ldr	r2, [r7, #8]
 8005502:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005504:	e007      	b.n	8005516 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	60da      	str	r2, [r3, #12]
}
 8005516:	bf00      	nop
 8005518:	3714      	adds	r7, #20
 800551a:	46bd      	mov	sp, r7
 800551c:	bc80      	pop	{r7}
 800551e:	4770      	bx	lr

08005520 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	461a      	mov	r2, r3
 800552e:	4b1c      	ldr	r3, [pc, #112]	; (80055a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8005530:	429a      	cmp	r2, r3
 8005532:	d813      	bhi.n	800555c <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005538:	089b      	lsrs	r3, r3, #2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005540:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	b2db      	uxtb	r3, r3
 800554e:	3b08      	subs	r3, #8
 8005550:	4a14      	ldr	r2, [pc, #80]	; (80055a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8005552:	fba2 2303 	umull	r2, r3, r2, r3
 8005556:	091b      	lsrs	r3, r3, #4
 8005558:	60fb      	str	r3, [r7, #12]
 800555a:	e011      	b.n	8005580 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005560:	089b      	lsrs	r3, r3, #2
 8005562:	009a      	lsls	r2, r3, #2
 8005564:	4b10      	ldr	r3, [pc, #64]	; (80055a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8005566:	4413      	add	r3, r2
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	b2db      	uxtb	r3, r3
 8005572:	3b08      	subs	r3, #8
 8005574:	4a0b      	ldr	r2, [pc, #44]	; (80055a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8005576:	fba2 2303 	umull	r2, r3, r2, r3
 800557a:	091b      	lsrs	r3, r3, #4
 800557c:	3307      	adds	r3, #7
 800557e:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a0a      	ldr	r2, [pc, #40]	; (80055ac <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8005584:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f003 031f 	and.w	r3, r3, #31
 800558c:	2201      	movs	r2, #1
 800558e:	409a      	lsls	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005594:	bf00      	nop
 8005596:	3714      	adds	r7, #20
 8005598:	46bd      	mov	sp, r7
 800559a:	bc80      	pop	{r7}
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	40020407 	.word	0x40020407
 80055a4:	cccccccd 	.word	0xcccccccd
 80055a8:	4002081c 	.word	0x4002081c
 80055ac:	40020880 	.word	0x40020880

080055b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055c0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	4b0a      	ldr	r3, [pc, #40]	; (80055f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80055c6:	4413      	add	r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	461a      	mov	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a08      	ldr	r2, [pc, #32]	; (80055f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80055d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	3b01      	subs	r3, #1
 80055da:	f003 0303 	and.w	r3, r3, #3
 80055de:	2201      	movs	r2, #1
 80055e0:	409a      	lsls	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80055e6:	bf00      	nop
 80055e8:	3714      	adds	r7, #20
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bc80      	pop	{r7}
 80055ee:	4770      	bx	lr
 80055f0:	1000823f 	.word	0x1000823f
 80055f4:	40020940 	.word	0x40020940

080055f8 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80055f8:	b480      	push	{r7}
 80055fa:	b087      	sub	sp, #28
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	460b      	mov	r3, r1
 8005602:	607a      	str	r2, [r7, #4]
 8005604:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005606:	2300      	movs	r3, #0
 8005608:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800560a:	7afb      	ldrb	r3, [r7, #11]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d103      	bne.n	8005618 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	605a      	str	r2, [r3, #4]
      break;
 8005616:	e002      	b.n	800561e <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	75fb      	strb	r3, [r7, #23]
      break;
 800561c:	bf00      	nop
  }

  return status;
 800561e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005620:	4618      	mov	r0, r3
 8005622:	371c      	adds	r7, #28
 8005624:	46bd      	mov	sp, r7
 8005626:	bc80      	pop	{r7}
 8005628:	4770      	bx	lr

0800562a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800562a:	b480      	push	{r7}
 800562c:	b083      	sub	sp, #12
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
 8005632:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d101      	bne.n	800563e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e003      	b.n	8005646 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	683a      	ldr	r2, [r7, #0]
 8005642:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005644:	2300      	movs	r3, #0
  }
}
 8005646:	4618      	mov	r0, r3
 8005648:	370c      	adds	r7, #12
 800564a:	46bd      	mov	sp, r7
 800564c:	bc80      	pop	{r7}
 800564e:	4770      	bx	lr

08005650 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005650:	b480      	push	{r7}
 8005652:	b087      	sub	sp, #28
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800565a:	2300      	movs	r3, #0
 800565c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800565e:	e140      	b.n	80058e2 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	2101      	movs	r1, #1
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	fa01 f303 	lsl.w	r3, r1, r3
 800566c:	4013      	ands	r3, r2
 800566e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2b00      	cmp	r3, #0
 8005674:	f000 8132 	beq.w	80058dc <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f003 0303 	and.w	r3, r3, #3
 8005680:	2b01      	cmp	r3, #1
 8005682:	d005      	beq.n	8005690 <HAL_GPIO_Init+0x40>
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f003 0303 	and.w	r3, r3, #3
 800568c:	2b02      	cmp	r3, #2
 800568e:	d130      	bne.n	80056f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	005b      	lsls	r3, r3, #1
 800569a:	2203      	movs	r2, #3
 800569c:	fa02 f303 	lsl.w	r3, r2, r3
 80056a0:	43db      	mvns	r3, r3
 80056a2:	693a      	ldr	r2, [r7, #16]
 80056a4:	4013      	ands	r3, r2
 80056a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	68da      	ldr	r2, [r3, #12]
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	005b      	lsls	r3, r3, #1
 80056b0:	fa02 f303 	lsl.w	r3, r2, r3
 80056b4:	693a      	ldr	r2, [r7, #16]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	693a      	ldr	r2, [r7, #16]
 80056be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80056c6:	2201      	movs	r2, #1
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	fa02 f303 	lsl.w	r3, r2, r3
 80056ce:	43db      	mvns	r3, r3
 80056d0:	693a      	ldr	r2, [r7, #16]
 80056d2:	4013      	ands	r3, r2
 80056d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	091b      	lsrs	r3, r3, #4
 80056dc:	f003 0201 	and.w	r2, r3, #1
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	fa02 f303 	lsl.w	r3, r2, r3
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f003 0303 	and.w	r3, r3, #3
 80056fa:	2b03      	cmp	r3, #3
 80056fc:	d017      	beq.n	800572e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	005b      	lsls	r3, r3, #1
 8005708:	2203      	movs	r2, #3
 800570a:	fa02 f303 	lsl.w	r3, r2, r3
 800570e:	43db      	mvns	r3, r3
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	4013      	ands	r3, r2
 8005714:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	689a      	ldr	r2, [r3, #8]
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	005b      	lsls	r3, r3, #1
 800571e:	fa02 f303 	lsl.w	r3, r2, r3
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	4313      	orrs	r3, r2
 8005726:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	693a      	ldr	r2, [r7, #16]
 800572c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f003 0303 	and.w	r3, r3, #3
 8005736:	2b02      	cmp	r3, #2
 8005738:	d123      	bne.n	8005782 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	08da      	lsrs	r2, r3, #3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	3208      	adds	r2, #8
 8005742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005746:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	f003 0307 	and.w	r3, r3, #7
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	220f      	movs	r2, #15
 8005752:	fa02 f303 	lsl.w	r3, r2, r3
 8005756:	43db      	mvns	r3, r3
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	4013      	ands	r3, r2
 800575c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	691a      	ldr	r2, [r3, #16]
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f003 0307 	and.w	r3, r3, #7
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	fa02 f303 	lsl.w	r3, r2, r3
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	4313      	orrs	r3, r2
 8005772:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	08da      	lsrs	r2, r3, #3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	3208      	adds	r2, #8
 800577c:	6939      	ldr	r1, [r7, #16]
 800577e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	005b      	lsls	r3, r3, #1
 800578c:	2203      	movs	r2, #3
 800578e:	fa02 f303 	lsl.w	r3, r2, r3
 8005792:	43db      	mvns	r3, r3
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	4013      	ands	r3, r2
 8005798:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f003 0203 	and.w	r2, r3, #3
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	005b      	lsls	r3, r3, #1
 80057a6:	fa02 f303 	lsl.w	r3, r2, r3
 80057aa:	693a      	ldr	r2, [r7, #16]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	f000 808c 	beq.w	80058dc <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80057c4:	4a4e      	ldr	r2, [pc, #312]	; (8005900 <HAL_GPIO_Init+0x2b0>)
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	089b      	lsrs	r3, r3, #2
 80057ca:	3302      	adds	r3, #2
 80057cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f003 0303 	and.w	r3, r3, #3
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	2207      	movs	r2, #7
 80057dc:	fa02 f303 	lsl.w	r3, r2, r3
 80057e0:	43db      	mvns	r3, r3
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	4013      	ands	r3, r2
 80057e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80057ee:	d00d      	beq.n	800580c <HAL_GPIO_Init+0x1bc>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a44      	ldr	r2, [pc, #272]	; (8005904 <HAL_GPIO_Init+0x2b4>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d007      	beq.n	8005808 <HAL_GPIO_Init+0x1b8>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a43      	ldr	r2, [pc, #268]	; (8005908 <HAL_GPIO_Init+0x2b8>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d101      	bne.n	8005804 <HAL_GPIO_Init+0x1b4>
 8005800:	2302      	movs	r3, #2
 8005802:	e004      	b.n	800580e <HAL_GPIO_Init+0x1be>
 8005804:	2307      	movs	r3, #7
 8005806:	e002      	b.n	800580e <HAL_GPIO_Init+0x1be>
 8005808:	2301      	movs	r3, #1
 800580a:	e000      	b.n	800580e <HAL_GPIO_Init+0x1be>
 800580c:	2300      	movs	r3, #0
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	f002 0203 	and.w	r2, r2, #3
 8005814:	0092      	lsls	r2, r2, #2
 8005816:	4093      	lsls	r3, r2
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	4313      	orrs	r3, r2
 800581c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800581e:	4938      	ldr	r1, [pc, #224]	; (8005900 <HAL_GPIO_Init+0x2b0>)
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	089b      	lsrs	r3, r3, #2
 8005824:	3302      	adds	r3, #2
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800582c:	4b37      	ldr	r3, [pc, #220]	; (800590c <HAL_GPIO_Init+0x2bc>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	43db      	mvns	r3, r3
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	4013      	ands	r3, r2
 800583a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d003      	beq.n	8005850 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	4313      	orrs	r3, r2
 800584e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005850:	4a2e      	ldr	r2, [pc, #184]	; (800590c <HAL_GPIO_Init+0x2bc>)
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005856:	4b2d      	ldr	r3, [pc, #180]	; (800590c <HAL_GPIO_Init+0x2bc>)
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	43db      	mvns	r3, r3
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	4013      	ands	r3, r2
 8005864:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	4313      	orrs	r3, r2
 8005878:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800587a:	4a24      	ldr	r2, [pc, #144]	; (800590c <HAL_GPIO_Init+0x2bc>)
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8005880:	4b22      	ldr	r3, [pc, #136]	; (800590c <HAL_GPIO_Init+0x2bc>)
 8005882:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005886:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	43db      	mvns	r3, r3
 800588c:	693a      	ldr	r2, [r7, #16]
 800588e:	4013      	ands	r3, r2
 8005890:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d003      	beq.n	80058a6 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800589e:	693a      	ldr	r2, [r7, #16]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80058a6:	4a19      	ldr	r2, [pc, #100]	; (800590c <HAL_GPIO_Init+0x2bc>)
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80058ae:	4b17      	ldr	r3, [pc, #92]	; (800590c <HAL_GPIO_Init+0x2bc>)
 80058b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058b4:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	43db      	mvns	r3, r3
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	4013      	ands	r3, r2
 80058be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d003      	beq.n	80058d4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80058d4:	4a0d      	ldr	r2, [pc, #52]	; (800590c <HAL_GPIO_Init+0x2bc>)
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	3301      	adds	r3, #1
 80058e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	fa22 f303 	lsr.w	r3, r2, r3
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f47f aeb7 	bne.w	8005660 <HAL_GPIO_Init+0x10>
  }
}
 80058f2:	bf00      	nop
 80058f4:	bf00      	nop
 80058f6:	371c      	adds	r7, #28
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bc80      	pop	{r7}
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	40010000 	.word	0x40010000
 8005904:	48000400 	.word	0x48000400
 8005908:	48000800 	.word	0x48000800
 800590c:	58000800 	.word	0x58000800

08005910 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005910:	b480      	push	{r7}
 8005912:	b087      	sub	sp, #28
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800591a:	2300      	movs	r3, #0
 800591c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800591e:	e0af      	b.n	8005a80 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005920:	2201      	movs	r2, #1
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	fa02 f303 	lsl.w	r3, r2, r3
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	4013      	ands	r3, r2
 800592c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	2b00      	cmp	r3, #0
 8005932:	f000 80a2 	beq.w	8005a7a <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005936:	4a59      	ldr	r2, [pc, #356]	; (8005a9c <HAL_GPIO_DeInit+0x18c>)
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	089b      	lsrs	r3, r3, #2
 800593c:	3302      	adds	r3, #2
 800593e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005942:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	f003 0303 	and.w	r3, r3, #3
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	2207      	movs	r2, #7
 800594e:	fa02 f303 	lsl.w	r3, r2, r3
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	4013      	ands	r3, r2
 8005956:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800595e:	d00d      	beq.n	800597c <HAL_GPIO_DeInit+0x6c>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a4f      	ldr	r2, [pc, #316]	; (8005aa0 <HAL_GPIO_DeInit+0x190>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d007      	beq.n	8005978 <HAL_GPIO_DeInit+0x68>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a4e      	ldr	r2, [pc, #312]	; (8005aa4 <HAL_GPIO_DeInit+0x194>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d101      	bne.n	8005974 <HAL_GPIO_DeInit+0x64>
 8005970:	2302      	movs	r3, #2
 8005972:	e004      	b.n	800597e <HAL_GPIO_DeInit+0x6e>
 8005974:	2307      	movs	r3, #7
 8005976:	e002      	b.n	800597e <HAL_GPIO_DeInit+0x6e>
 8005978:	2301      	movs	r3, #1
 800597a:	e000      	b.n	800597e <HAL_GPIO_DeInit+0x6e>
 800597c:	2300      	movs	r3, #0
 800597e:	697a      	ldr	r2, [r7, #20]
 8005980:	f002 0203 	and.w	r2, r2, #3
 8005984:	0092      	lsls	r2, r2, #2
 8005986:	4093      	lsls	r3, r2
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	429a      	cmp	r2, r3
 800598c:	d136      	bne.n	80059fc <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 800598e:	4b46      	ldr	r3, [pc, #280]	; (8005aa8 <HAL_GPIO_DeInit+0x198>)
 8005990:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	43db      	mvns	r3, r3
 8005998:	4943      	ldr	r1, [pc, #268]	; (8005aa8 <HAL_GPIO_DeInit+0x198>)
 800599a:	4013      	ands	r3, r2
 800599c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80059a0:	4b41      	ldr	r3, [pc, #260]	; (8005aa8 <HAL_GPIO_DeInit+0x198>)
 80059a2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	43db      	mvns	r3, r3
 80059aa:	493f      	ldr	r1, [pc, #252]	; (8005aa8 <HAL_GPIO_DeInit+0x198>)
 80059ac:	4013      	ands	r3, r2
 80059ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80059b2:	4b3d      	ldr	r3, [pc, #244]	; (8005aa8 <HAL_GPIO_DeInit+0x198>)
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	43db      	mvns	r3, r3
 80059ba:	493b      	ldr	r1, [pc, #236]	; (8005aa8 <HAL_GPIO_DeInit+0x198>)
 80059bc:	4013      	ands	r3, r2
 80059be:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80059c0:	4b39      	ldr	r3, [pc, #228]	; (8005aa8 <HAL_GPIO_DeInit+0x198>)
 80059c2:	685a      	ldr	r2, [r3, #4]
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	43db      	mvns	r3, r3
 80059c8:	4937      	ldr	r1, [pc, #220]	; (8005aa8 <HAL_GPIO_DeInit+0x198>)
 80059ca:	4013      	ands	r3, r2
 80059cc:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	f003 0303 	and.w	r3, r3, #3
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	2207      	movs	r2, #7
 80059d8:	fa02 f303 	lsl.w	r3, r2, r3
 80059dc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80059de:	4a2f      	ldr	r2, [pc, #188]	; (8005a9c <HAL_GPIO_DeInit+0x18c>)
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	089b      	lsrs	r3, r3, #2
 80059e4:	3302      	adds	r3, #2
 80059e6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	43da      	mvns	r2, r3
 80059ee:	482b      	ldr	r0, [pc, #172]	; (8005a9c <HAL_GPIO_DeInit+0x18c>)
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	089b      	lsrs	r3, r3, #2
 80059f4:	400a      	ands	r2, r1
 80059f6:	3302      	adds	r3, #2
 80059f8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	005b      	lsls	r3, r3, #1
 8005a04:	2103      	movs	r1, #3
 8005a06:	fa01 f303 	lsl.w	r3, r1, r3
 8005a0a:	431a      	orrs	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	08da      	lsrs	r2, r3, #3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	3208      	adds	r2, #8
 8005a18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	f003 0307 	and.w	r3, r3, #7
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	220f      	movs	r2, #15
 8005a26:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2a:	43db      	mvns	r3, r3
 8005a2c:	697a      	ldr	r2, [r7, #20]
 8005a2e:	08d2      	lsrs	r2, r2, #3
 8005a30:	4019      	ands	r1, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	3208      	adds	r2, #8
 8005a36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	689a      	ldr	r2, [r3, #8]
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	005b      	lsls	r3, r3, #1
 8005a42:	2103      	movs	r1, #3
 8005a44:	fa01 f303 	lsl.w	r3, r1, r3
 8005a48:	43db      	mvns	r3, r3
 8005a4a:	401a      	ands	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685a      	ldr	r2, [r3, #4]
 8005a54:	2101      	movs	r1, #1
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	fa01 f303 	lsl.w	r3, r1, r3
 8005a5c:	43db      	mvns	r3, r3
 8005a5e:	401a      	ands	r2, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	68da      	ldr	r2, [r3, #12]
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	005b      	lsls	r3, r3, #1
 8005a6c:	2103      	movs	r1, #3
 8005a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a72:	43db      	mvns	r3, r3
 8005a74:	401a      	ands	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	60da      	str	r2, [r3, #12]
    }

    position++;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005a80:	683a      	ldr	r2, [r7, #0]
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	fa22 f303 	lsr.w	r3, r2, r3
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f47f af49 	bne.w	8005920 <HAL_GPIO_DeInit+0x10>
  }
}
 8005a8e:	bf00      	nop
 8005a90:	bf00      	nop
 8005a92:	371c      	adds	r7, #28
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bc80      	pop	{r7}
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	40010000 	.word	0x40010000
 8005aa0:	48000400 	.word	0x48000400
 8005aa4:	48000800 	.word	0x48000800
 8005aa8:	58000800 	.word	0x58000800

08005aac <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	691a      	ldr	r2, [r3, #16]
 8005abc:	887b      	ldrh	r3, [r7, #2]
 8005abe:	4013      	ands	r3, r2
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d002      	beq.n	8005aca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	73fb      	strb	r3, [r7, #15]
 8005ac8:	e001      	b.n	8005ace <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005aca:	2300      	movs	r3, #0
 8005acc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3714      	adds	r7, #20
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bc80      	pop	{r7}
 8005ad8:	4770      	bx	lr

08005ada <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ada:	b480      	push	{r7}
 8005adc:	b083      	sub	sp, #12
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	807b      	strh	r3, [r7, #2]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005aea:	787b      	ldrb	r3, [r7, #1]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d003      	beq.n	8005af8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005af0:	887a      	ldrh	r2, [r7, #2]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005af6:	e002      	b.n	8005afe <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005af8:	887a      	ldrh	r2, [r7, #2]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005afe:	bf00      	nop
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bc80      	pop	{r7}
 8005b06:	4770      	bx	lr

08005b08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	4603      	mov	r3, r0
 8005b10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005b12:	4b08      	ldr	r3, [pc, #32]	; (8005b34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b14:	68da      	ldr	r2, [r3, #12]
 8005b16:	88fb      	ldrh	r3, [r7, #6]
 8005b18:	4013      	ands	r3, r2
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d006      	beq.n	8005b2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005b1e:	4a05      	ldr	r2, [pc, #20]	; (8005b34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b20:	88fb      	ldrh	r3, [r7, #6]
 8005b22:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005b24:	88fb      	ldrh	r3, [r7, #6]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f000 f806 	bl	8005b38 <HAL_GPIO_EXTI_Callback>
  }
}
 8005b2c:	bf00      	nop
 8005b2e:	3708      	adds	r7, #8
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	58000800 	.word	0x58000800

08005b38 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	4603      	mov	r3, r0
 8005b40:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005b42:	bf00      	nop
 8005b44:	370c      	adds	r7, #12
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bc80      	pop	{r7}
 8005b4a:	4770      	bx	lr

08005b4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d101      	bne.n	8005b5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e081      	b.n	8005c62 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d106      	bne.n	8005b78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f7fc f88c 	bl	8001c90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2224      	movs	r2, #36	; 0x24
 8005b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f022 0201 	bic.w	r2, r2, #1
 8005b8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685a      	ldr	r2, [r3, #4]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005b9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	689a      	ldr	r2, [r3, #8]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005bac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d107      	bne.n	8005bc6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	689a      	ldr	r2, [r3, #8]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005bc2:	609a      	str	r2, [r3, #8]
 8005bc4:	e006      	b.n	8005bd4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	689a      	ldr	r2, [r3, #8]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005bd2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d104      	bne.n	8005be6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005be4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	6812      	ldr	r2, [r2, #0]
 8005bf0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005bf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bf8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68da      	ldr	r2, [r3, #12]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c08:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	691a      	ldr	r2, [r3, #16]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	430a      	orrs	r2, r1
 8005c22:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	69d9      	ldr	r1, [r3, #28]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6a1a      	ldr	r2, [r3, #32]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	430a      	orrs	r2, r1
 8005c32:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f042 0201 	orr.w	r2, r2, #1
 8005c42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2220      	movs	r2, #32
 8005c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3708      	adds	r7, #8
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b082      	sub	sp, #8
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d101      	bne.n	8005c7c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e021      	b.n	8005cc0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2224      	movs	r2, #36	; 0x24
 8005c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f022 0201 	bic.w	r2, r2, #1
 8005c92:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f7fc f82b 	bl	8001cf0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3708      	adds	r7, #8
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b088      	sub	sp, #32
 8005ccc:	af02      	add	r7, sp, #8
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	4608      	mov	r0, r1
 8005cd2:	4611      	mov	r1, r2
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	817b      	strh	r3, [r7, #10]
 8005cda:	460b      	mov	r3, r1
 8005cdc:	813b      	strh	r3, [r7, #8]
 8005cde:	4613      	mov	r3, r2
 8005ce0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b20      	cmp	r3, #32
 8005cec:	f040 80f9 	bne.w	8005ee2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cf0:	6a3b      	ldr	r3, [r7, #32]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d002      	beq.n	8005cfc <HAL_I2C_Mem_Write+0x34>
 8005cf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d105      	bne.n	8005d08 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d02:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e0ed      	b.n	8005ee4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d101      	bne.n	8005d16 <HAL_I2C_Mem_Write+0x4e>
 8005d12:	2302      	movs	r3, #2
 8005d14:	e0e6      	b.n	8005ee4 <HAL_I2C_Mem_Write+0x21c>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005d1e:	f7fe ff83 	bl	8004c28 <HAL_GetTick>
 8005d22:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	9300      	str	r3, [sp, #0]
 8005d28:	2319      	movs	r3, #25
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f000 fada 	bl	80062ea <I2C_WaitOnFlagUntilTimeout>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d001      	beq.n	8005d40 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e0d1      	b.n	8005ee4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2221      	movs	r2, #33	; 0x21
 8005d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2240      	movs	r2, #64	; 0x40
 8005d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6a3a      	ldr	r2, [r7, #32]
 8005d5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005d60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2200      	movs	r2, #0
 8005d66:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d68:	88f8      	ldrh	r0, [r7, #6]
 8005d6a:	893a      	ldrh	r2, [r7, #8]
 8005d6c:	8979      	ldrh	r1, [r7, #10]
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	9301      	str	r3, [sp, #4]
 8005d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d74:	9300      	str	r3, [sp, #0]
 8005d76:	4603      	mov	r3, r0
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f000 f9eb 	bl	8006154 <I2C_RequestMemoryWrite>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d005      	beq.n	8005d90 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e0a9      	b.n	8005ee4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	2bff      	cmp	r3, #255	; 0xff
 8005d98:	d90e      	bls.n	8005db8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	22ff      	movs	r2, #255	; 0xff
 8005d9e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005da4:	b2da      	uxtb	r2, r3
 8005da6:	8979      	ldrh	r1, [r7, #10]
 8005da8:	2300      	movs	r3, #0
 8005daa:	9300      	str	r3, [sp, #0]
 8005dac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f000 fc43 	bl	800663c <I2C_TransferConfig>
 8005db6:	e00f      	b.n	8005dd8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dc6:	b2da      	uxtb	r2, r3
 8005dc8:	8979      	ldrh	r1, [r7, #10]
 8005dca:	2300      	movs	r3, #0
 8005dcc:	9300      	str	r3, [sp, #0]
 8005dce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005dd2:	68f8      	ldr	r0, [r7, #12]
 8005dd4:	f000 fc32 	bl	800663c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f000 fac4 	bl	800636a <I2C_WaitOnTXISFlagUntilTimeout>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d001      	beq.n	8005dec <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e07b      	b.n	8005ee4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df0:	781a      	ldrb	r2, [r3, #0]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfc:	1c5a      	adds	r2, r3, #1
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e14:	3b01      	subs	r3, #1
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d034      	beq.n	8005e90 <HAL_I2C_Mem_Write+0x1c8>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d130      	bne.n	8005e90 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	9300      	str	r3, [sp, #0]
 8005e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e34:	2200      	movs	r2, #0
 8005e36:	2180      	movs	r1, #128	; 0x80
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	f000 fa56 	bl	80062ea <I2C_WaitOnFlagUntilTimeout>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d001      	beq.n	8005e48 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e04d      	b.n	8005ee4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	2bff      	cmp	r3, #255	; 0xff
 8005e50:	d90e      	bls.n	8005e70 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	22ff      	movs	r2, #255	; 0xff
 8005e56:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e5c:	b2da      	uxtb	r2, r3
 8005e5e:	8979      	ldrh	r1, [r7, #10]
 8005e60:	2300      	movs	r3, #0
 8005e62:	9300      	str	r3, [sp, #0]
 8005e64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f000 fbe7 	bl	800663c <I2C_TransferConfig>
 8005e6e:	e00f      	b.n	8005e90 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e74:	b29a      	uxth	r2, r3
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	8979      	ldrh	r1, [r7, #10]
 8005e82:	2300      	movs	r3, #0
 8005e84:	9300      	str	r3, [sp, #0]
 8005e86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e8a:	68f8      	ldr	r0, [r7, #12]
 8005e8c:	f000 fbd6 	bl	800663c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d19e      	bne.n	8005dd8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f000 faa3 	bl	80063ea <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d001      	beq.n	8005eae <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e01a      	b.n	8005ee4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2220      	movs	r2, #32
 8005eb4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	6859      	ldr	r1, [r3, #4]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	4b0a      	ldr	r3, [pc, #40]	; (8005eec <HAL_I2C_Mem_Write+0x224>)
 8005ec2:	400b      	ands	r3, r1
 8005ec4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2220      	movs	r2, #32
 8005eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	e000      	b.n	8005ee4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005ee2:	2302      	movs	r3, #2
  }
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3718      	adds	r7, #24
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	fe00e800 	.word	0xfe00e800

08005ef0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b088      	sub	sp, #32
 8005ef4:	af02      	add	r7, sp, #8
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	4608      	mov	r0, r1
 8005efa:	4611      	mov	r1, r2
 8005efc:	461a      	mov	r2, r3
 8005efe:	4603      	mov	r3, r0
 8005f00:	817b      	strh	r3, [r7, #10]
 8005f02:	460b      	mov	r3, r1
 8005f04:	813b      	strh	r3, [r7, #8]
 8005f06:	4613      	mov	r3, r2
 8005f08:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	2b20      	cmp	r3, #32
 8005f14:	f040 80fd 	bne.w	8006112 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f18:	6a3b      	ldr	r3, [r7, #32]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d002      	beq.n	8005f24 <HAL_I2C_Mem_Read+0x34>
 8005f1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d105      	bne.n	8005f30 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f2a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e0f1      	b.n	8006114 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d101      	bne.n	8005f3e <HAL_I2C_Mem_Read+0x4e>
 8005f3a:	2302      	movs	r3, #2
 8005f3c:	e0ea      	b.n	8006114 <HAL_I2C_Mem_Read+0x224>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2201      	movs	r2, #1
 8005f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005f46:	f7fe fe6f 	bl	8004c28 <HAL_GetTick>
 8005f4a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	9300      	str	r3, [sp, #0]
 8005f50:	2319      	movs	r3, #25
 8005f52:	2201      	movs	r2, #1
 8005f54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f000 f9c6 	bl	80062ea <I2C_WaitOnFlagUntilTimeout>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d001      	beq.n	8005f68 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e0d5      	b.n	8006114 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2222      	movs	r2, #34	; 0x22
 8005f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2240      	movs	r2, #64	; 0x40
 8005f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6a3a      	ldr	r2, [r7, #32]
 8005f82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005f88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f90:	88f8      	ldrh	r0, [r7, #6]
 8005f92:	893a      	ldrh	r2, [r7, #8]
 8005f94:	8979      	ldrh	r1, [r7, #10]
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	9301      	str	r3, [sp, #4]
 8005f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9c:	9300      	str	r3, [sp, #0]
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f000 f92b 	bl	80061fc <I2C_RequestMemoryRead>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d005      	beq.n	8005fb8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e0ad      	b.n	8006114 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	2bff      	cmp	r3, #255	; 0xff
 8005fc0:	d90e      	bls.n	8005fe0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	22ff      	movs	r2, #255	; 0xff
 8005fc6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fcc:	b2da      	uxtb	r2, r3
 8005fce:	8979      	ldrh	r1, [r7, #10]
 8005fd0:	4b52      	ldr	r3, [pc, #328]	; (800611c <HAL_I2C_Mem_Read+0x22c>)
 8005fd2:	9300      	str	r3, [sp, #0]
 8005fd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	f000 fb2f 	bl	800663c <I2C_TransferConfig>
 8005fde:	e00f      	b.n	8006000 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fee:	b2da      	uxtb	r2, r3
 8005ff0:	8979      	ldrh	r1, [r7, #10]
 8005ff2:	4b4a      	ldr	r3, [pc, #296]	; (800611c <HAL_I2C_Mem_Read+0x22c>)
 8005ff4:	9300      	str	r3, [sp, #0]
 8005ff6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	f000 fb1e 	bl	800663c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	9300      	str	r3, [sp, #0]
 8006004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006006:	2200      	movs	r2, #0
 8006008:	2104      	movs	r1, #4
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	f000 f96d 	bl	80062ea <I2C_WaitOnFlagUntilTimeout>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d001      	beq.n	800601a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e07c      	b.n	8006114 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006024:	b2d2      	uxtb	r2, r2
 8006026:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602c:	1c5a      	adds	r2, r3, #1
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006036:	3b01      	subs	r3, #1
 8006038:	b29a      	uxth	r2, r3
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006042:	b29b      	uxth	r3, r3
 8006044:	3b01      	subs	r3, #1
 8006046:	b29a      	uxth	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006050:	b29b      	uxth	r3, r3
 8006052:	2b00      	cmp	r3, #0
 8006054:	d034      	beq.n	80060c0 <HAL_I2C_Mem_Read+0x1d0>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800605a:	2b00      	cmp	r3, #0
 800605c:	d130      	bne.n	80060c0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	9300      	str	r3, [sp, #0]
 8006062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006064:	2200      	movs	r2, #0
 8006066:	2180      	movs	r1, #128	; 0x80
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f000 f93e 	bl	80062ea <I2C_WaitOnFlagUntilTimeout>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d001      	beq.n	8006078 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e04d      	b.n	8006114 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800607c:	b29b      	uxth	r3, r3
 800607e:	2bff      	cmp	r3, #255	; 0xff
 8006080:	d90e      	bls.n	80060a0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	22ff      	movs	r2, #255	; 0xff
 8006086:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800608c:	b2da      	uxtb	r2, r3
 800608e:	8979      	ldrh	r1, [r7, #10]
 8006090:	2300      	movs	r3, #0
 8006092:	9300      	str	r3, [sp, #0]
 8006094:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006098:	68f8      	ldr	r0, [r7, #12]
 800609a:	f000 facf 	bl	800663c <I2C_TransferConfig>
 800609e:	e00f      	b.n	80060c0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ae:	b2da      	uxtb	r2, r3
 80060b0:	8979      	ldrh	r1, [r7, #10]
 80060b2:	2300      	movs	r3, #0
 80060b4:	9300      	str	r3, [sp, #0]
 80060b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	f000 fabe 	bl	800663c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d19a      	bne.n	8006000 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060ca:	697a      	ldr	r2, [r7, #20]
 80060cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060ce:	68f8      	ldr	r0, [r7, #12]
 80060d0:	f000 f98b 	bl	80063ea <I2C_WaitOnSTOPFlagUntilTimeout>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d001      	beq.n	80060de <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e01a      	b.n	8006114 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2220      	movs	r2, #32
 80060e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	6859      	ldr	r1, [r3, #4]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	4b0b      	ldr	r3, [pc, #44]	; (8006120 <HAL_I2C_Mem_Read+0x230>)
 80060f2:	400b      	ands	r3, r1
 80060f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2220      	movs	r2, #32
 80060fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800610e:	2300      	movs	r3, #0
 8006110:	e000      	b.n	8006114 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006112:	2302      	movs	r3, #2
  }
}
 8006114:	4618      	mov	r0, r3
 8006116:	3718      	adds	r7, #24
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}
 800611c:	80002400 	.word	0x80002400
 8006120:	fe00e800 	.word	0xfe00e800

08006124 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006132:	b2db      	uxtb	r3, r3
}
 8006134:	4618      	mov	r0, r3
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	bc80      	pop	{r7}
 800613c:	4770      	bx	lr

0800613e <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800613e:	b480      	push	{r7}
 8006140:	b083      	sub	sp, #12
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800614a:	4618      	mov	r0, r3
 800614c:	370c      	adds	r7, #12
 800614e:	46bd      	mov	sp, r7
 8006150:	bc80      	pop	{r7}
 8006152:	4770      	bx	lr

08006154 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b086      	sub	sp, #24
 8006158:	af02      	add	r7, sp, #8
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	4608      	mov	r0, r1
 800615e:	4611      	mov	r1, r2
 8006160:	461a      	mov	r2, r3
 8006162:	4603      	mov	r3, r0
 8006164:	817b      	strh	r3, [r7, #10]
 8006166:	460b      	mov	r3, r1
 8006168:	813b      	strh	r3, [r7, #8]
 800616a:	4613      	mov	r3, r2
 800616c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800616e:	88fb      	ldrh	r3, [r7, #6]
 8006170:	b2da      	uxtb	r2, r3
 8006172:	8979      	ldrh	r1, [r7, #10]
 8006174:	4b20      	ldr	r3, [pc, #128]	; (80061f8 <I2C_RequestMemoryWrite+0xa4>)
 8006176:	9300      	str	r3, [sp, #0]
 8006178:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	f000 fa5d 	bl	800663c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006182:	69fa      	ldr	r2, [r7, #28]
 8006184:	69b9      	ldr	r1, [r7, #24]
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f000 f8ef 	bl	800636a <I2C_WaitOnTXISFlagUntilTimeout>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d001      	beq.n	8006196 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e02c      	b.n	80061f0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006196:	88fb      	ldrh	r3, [r7, #6]
 8006198:	2b01      	cmp	r3, #1
 800619a:	d105      	bne.n	80061a8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800619c:	893b      	ldrh	r3, [r7, #8]
 800619e:	b2da      	uxtb	r2, r3
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	629a      	str	r2, [r3, #40]	; 0x28
 80061a6:	e015      	b.n	80061d4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80061a8:	893b      	ldrh	r3, [r7, #8]
 80061aa:	0a1b      	lsrs	r3, r3, #8
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	b2da      	uxtb	r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061b6:	69fa      	ldr	r2, [r7, #28]
 80061b8:	69b9      	ldr	r1, [r7, #24]
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f000 f8d5 	bl	800636a <I2C_WaitOnTXISFlagUntilTimeout>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d001      	beq.n	80061ca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e012      	b.n	80061f0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80061ca:	893b      	ldrh	r3, [r7, #8]
 80061cc:	b2da      	uxtb	r2, r3
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	9300      	str	r3, [sp, #0]
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	2200      	movs	r2, #0
 80061dc:	2180      	movs	r1, #128	; 0x80
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f000 f883 	bl	80062ea <I2C_WaitOnFlagUntilTimeout>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d001      	beq.n	80061ee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e000      	b.n	80061f0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3710      	adds	r7, #16
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	80002000 	.word	0x80002000

080061fc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b086      	sub	sp, #24
 8006200:	af02      	add	r7, sp, #8
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	4608      	mov	r0, r1
 8006206:	4611      	mov	r1, r2
 8006208:	461a      	mov	r2, r3
 800620a:	4603      	mov	r3, r0
 800620c:	817b      	strh	r3, [r7, #10]
 800620e:	460b      	mov	r3, r1
 8006210:	813b      	strh	r3, [r7, #8]
 8006212:	4613      	mov	r3, r2
 8006214:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006216:	88fb      	ldrh	r3, [r7, #6]
 8006218:	b2da      	uxtb	r2, r3
 800621a:	8979      	ldrh	r1, [r7, #10]
 800621c:	4b20      	ldr	r3, [pc, #128]	; (80062a0 <I2C_RequestMemoryRead+0xa4>)
 800621e:	9300      	str	r3, [sp, #0]
 8006220:	2300      	movs	r3, #0
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f000 fa0a 	bl	800663c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006228:	69fa      	ldr	r2, [r7, #28]
 800622a:	69b9      	ldr	r1, [r7, #24]
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f000 f89c 	bl	800636a <I2C_WaitOnTXISFlagUntilTimeout>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d001      	beq.n	800623c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e02c      	b.n	8006296 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800623c:	88fb      	ldrh	r3, [r7, #6]
 800623e:	2b01      	cmp	r3, #1
 8006240:	d105      	bne.n	800624e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006242:	893b      	ldrh	r3, [r7, #8]
 8006244:	b2da      	uxtb	r2, r3
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	629a      	str	r2, [r3, #40]	; 0x28
 800624c:	e015      	b.n	800627a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800624e:	893b      	ldrh	r3, [r7, #8]
 8006250:	0a1b      	lsrs	r3, r3, #8
 8006252:	b29b      	uxth	r3, r3
 8006254:	b2da      	uxtb	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800625c:	69fa      	ldr	r2, [r7, #28]
 800625e:	69b9      	ldr	r1, [r7, #24]
 8006260:	68f8      	ldr	r0, [r7, #12]
 8006262:	f000 f882 	bl	800636a <I2C_WaitOnTXISFlagUntilTimeout>
 8006266:	4603      	mov	r3, r0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d001      	beq.n	8006270 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e012      	b.n	8006296 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006270:	893b      	ldrh	r3, [r7, #8]
 8006272:	b2da      	uxtb	r2, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	9300      	str	r3, [sp, #0]
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	2200      	movs	r2, #0
 8006282:	2140      	movs	r1, #64	; 0x40
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f000 f830 	bl	80062ea <I2C_WaitOnFlagUntilTimeout>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d001      	beq.n	8006294 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e000      	b.n	8006296 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	80002000 	.word	0x80002000

080062a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	f003 0302 	and.w	r3, r3, #2
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d103      	bne.n	80062c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2200      	movs	r2, #0
 80062c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	699b      	ldr	r3, [r3, #24]
 80062c8:	f003 0301 	and.w	r3, r3, #1
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d007      	beq.n	80062e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	699a      	ldr	r2, [r3, #24]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f042 0201 	orr.w	r2, r2, #1
 80062de:	619a      	str	r2, [r3, #24]
  }
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bc80      	pop	{r7}
 80062e8:	4770      	bx	lr

080062ea <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80062ea:	b580      	push	{r7, lr}
 80062ec:	b084      	sub	sp, #16
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	60f8      	str	r0, [r7, #12]
 80062f2:	60b9      	str	r1, [r7, #8]
 80062f4:	603b      	str	r3, [r7, #0]
 80062f6:	4613      	mov	r3, r2
 80062f8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062fa:	e022      	b.n	8006342 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006302:	d01e      	beq.n	8006342 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006304:	f7fe fc90 	bl	8004c28 <HAL_GetTick>
 8006308:	4602      	mov	r2, r0
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	683a      	ldr	r2, [r7, #0]
 8006310:	429a      	cmp	r2, r3
 8006312:	d302      	bcc.n	800631a <I2C_WaitOnFlagUntilTimeout+0x30>
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d113      	bne.n	8006342 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800631e:	f043 0220 	orr.w	r2, r3, #32
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2220      	movs	r2, #32
 800632a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e00f      	b.n	8006362 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	699a      	ldr	r2, [r3, #24]
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	4013      	ands	r3, r2
 800634c:	68ba      	ldr	r2, [r7, #8]
 800634e:	429a      	cmp	r2, r3
 8006350:	bf0c      	ite	eq
 8006352:	2301      	moveq	r3, #1
 8006354:	2300      	movne	r3, #0
 8006356:	b2db      	uxtb	r3, r3
 8006358:	461a      	mov	r2, r3
 800635a:	79fb      	ldrb	r3, [r7, #7]
 800635c:	429a      	cmp	r2, r3
 800635e:	d0cd      	beq.n	80062fc <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3710      	adds	r7, #16
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800636a:	b580      	push	{r7, lr}
 800636c:	b084      	sub	sp, #16
 800636e:	af00      	add	r7, sp, #0
 8006370:	60f8      	str	r0, [r7, #12]
 8006372:	60b9      	str	r1, [r7, #8]
 8006374:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006376:	e02c      	b.n	80063d2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	68b9      	ldr	r1, [r7, #8]
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	f000 f871 	bl	8006464 <I2C_IsErrorOccurred>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d001      	beq.n	800638c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	e02a      	b.n	80063e2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006392:	d01e      	beq.n	80063d2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006394:	f7fe fc48 	bl	8004c28 <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	68ba      	ldr	r2, [r7, #8]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d302      	bcc.n	80063aa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d113      	bne.n	80063d2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ae:	f043 0220 	orr.w	r2, r3, #32
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2220      	movs	r2, #32
 80063ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e007      	b.n	80063e2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	f003 0302 	and.w	r3, r3, #2
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d1cb      	bne.n	8006378 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b084      	sub	sp, #16
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	60f8      	str	r0, [r7, #12]
 80063f2:	60b9      	str	r1, [r7, #8]
 80063f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063f6:	e028      	b.n	800644a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	68b9      	ldr	r1, [r7, #8]
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f000 f831 	bl	8006464 <I2C_IsErrorOccurred>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d001      	beq.n	800640c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e026      	b.n	800645a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800640c:	f7fe fc0c 	bl	8004c28 <HAL_GetTick>
 8006410:	4602      	mov	r2, r0
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	429a      	cmp	r2, r3
 800641a:	d302      	bcc.n	8006422 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d113      	bne.n	800644a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006426:	f043 0220 	orr.w	r2, r3, #32
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2220      	movs	r2, #32
 8006432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e007      	b.n	800645a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	f003 0320 	and.w	r3, r3, #32
 8006454:	2b20      	cmp	r3, #32
 8006456:	d1cf      	bne.n	80063f8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3710      	adds	r7, #16
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
	...

08006464 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b08a      	sub	sp, #40	; 0x28
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006470:	2300      	movs	r3, #0
 8006472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800647e:	2300      	movs	r3, #0
 8006480:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	f003 0310 	and.w	r3, r3, #16
 800648c:	2b00      	cmp	r3, #0
 800648e:	d075      	beq.n	800657c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2210      	movs	r2, #16
 8006496:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006498:	e056      	b.n	8006548 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a0:	d052      	beq.n	8006548 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80064a2:	f7fe fbc1 	bl	8004c28 <HAL_GetTick>
 80064a6:	4602      	mov	r2, r0
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	68ba      	ldr	r2, [r7, #8]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d302      	bcc.n	80064b8 <I2C_IsErrorOccurred+0x54>
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d147      	bne.n	8006548 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80064ca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064da:	d12e      	bne.n	800653a <I2C_IsErrorOccurred+0xd6>
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064e2:	d02a      	beq.n	800653a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80064e4:	7cfb      	ldrb	r3, [r7, #19]
 80064e6:	2b20      	cmp	r3, #32
 80064e8:	d027      	beq.n	800653a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	685a      	ldr	r2, [r3, #4]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064f8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80064fa:	f7fe fb95 	bl	8004c28 <HAL_GetTick>
 80064fe:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006500:	e01b      	b.n	800653a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006502:	f7fe fb91 	bl	8004c28 <HAL_GetTick>
 8006506:	4602      	mov	r2, r0
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	2b19      	cmp	r3, #25
 800650e:	d914      	bls.n	800653a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006514:	f043 0220 	orr.w	r2, r3, #32
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2220      	movs	r2, #32
 8006520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	699b      	ldr	r3, [r3, #24]
 8006540:	f003 0320 	and.w	r3, r3, #32
 8006544:	2b20      	cmp	r3, #32
 8006546:	d1dc      	bne.n	8006502 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	f003 0320 	and.w	r3, r3, #32
 8006552:	2b20      	cmp	r3, #32
 8006554:	d003      	beq.n	800655e <I2C_IsErrorOccurred+0xfa>
 8006556:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800655a:	2b00      	cmp	r3, #0
 800655c:	d09d      	beq.n	800649a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800655e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006562:	2b00      	cmp	r3, #0
 8006564:	d103      	bne.n	800656e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2220      	movs	r2, #32
 800656c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800656e:	6a3b      	ldr	r3, [r7, #32]
 8006570:	f043 0304 	orr.w	r3, r3, #4
 8006574:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00b      	beq.n	80065a6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800658e:	6a3b      	ldr	r3, [r7, #32]
 8006590:	f043 0301 	orr.w	r3, r3, #1
 8006594:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800659e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00b      	beq.n	80065c8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80065b0:	6a3b      	ldr	r3, [r7, #32]
 80065b2:	f043 0308 	orr.w	r3, r3, #8
 80065b6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80065c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00b      	beq.n	80065ea <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80065d2:	6a3b      	ldr	r3, [r7, #32]
 80065d4:	f043 0302 	orr.w	r3, r3, #2
 80065d8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80065ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d01c      	beq.n	800662c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f7ff fe56 	bl	80062a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	6859      	ldr	r1, [r3, #4]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	4b0d      	ldr	r3, [pc, #52]	; (8006638 <I2C_IsErrorOccurred+0x1d4>)
 8006604:	400b      	ands	r3, r1
 8006606:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800660c:	6a3b      	ldr	r3, [r7, #32]
 800660e:	431a      	orrs	r2, r3
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2220      	movs	r2, #32
 8006618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2200      	movs	r2, #0
 8006620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800662c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006630:	4618      	mov	r0, r3
 8006632:	3728      	adds	r7, #40	; 0x28
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	fe00e800 	.word	0xfe00e800

0800663c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800663c:	b480      	push	{r7}
 800663e:	b087      	sub	sp, #28
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	607b      	str	r3, [r7, #4]
 8006646:	460b      	mov	r3, r1
 8006648:	817b      	strh	r3, [r7, #10]
 800664a:	4613      	mov	r3, r2
 800664c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800664e:	897b      	ldrh	r3, [r7, #10]
 8006650:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006654:	7a7b      	ldrb	r3, [r7, #9]
 8006656:	041b      	lsls	r3, r3, #16
 8006658:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800665c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006662:	6a3b      	ldr	r3, [r7, #32]
 8006664:	4313      	orrs	r3, r2
 8006666:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800666a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	685a      	ldr	r2, [r3, #4]
 8006672:	6a3b      	ldr	r3, [r7, #32]
 8006674:	0d5b      	lsrs	r3, r3, #21
 8006676:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800667a:	4b07      	ldr	r3, [pc, #28]	; (8006698 <I2C_TransferConfig+0x5c>)
 800667c:	430b      	orrs	r3, r1
 800667e:	43db      	mvns	r3, r3
 8006680:	ea02 0103 	and.w	r1, r2, r3
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	697a      	ldr	r2, [r7, #20]
 800668a:	430a      	orrs	r2, r1
 800668c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800668e:	bf00      	nop
 8006690:	371c      	adds	r7, #28
 8006692:	46bd      	mov	sp, r7
 8006694:	bc80      	pop	{r7}
 8006696:	4770      	bx	lr
 8006698:	03ff63ff 	.word	0x03ff63ff

0800669c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	2b20      	cmp	r3, #32
 80066b0:	d138      	bne.n	8006724 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d101      	bne.n	80066c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80066bc:	2302      	movs	r3, #2
 80066be:	e032      	b.n	8006726 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2224      	movs	r2, #36	; 0x24
 80066cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f022 0201 	bic.w	r2, r2, #1
 80066de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80066ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6819      	ldr	r1, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	683a      	ldr	r2, [r7, #0]
 80066fc:	430a      	orrs	r2, r1
 80066fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f042 0201 	orr.w	r2, r2, #1
 800670e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2220      	movs	r2, #32
 8006714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006720:	2300      	movs	r3, #0
 8006722:	e000      	b.n	8006726 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006724:	2302      	movs	r3, #2
  }
}
 8006726:	4618      	mov	r0, r3
 8006728:	370c      	adds	r7, #12
 800672a:	46bd      	mov	sp, r7
 800672c:	bc80      	pop	{r7}
 800672e:	4770      	bx	lr

08006730 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006730:	b480      	push	{r7}
 8006732:	b085      	sub	sp, #20
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006740:	b2db      	uxtb	r3, r3
 8006742:	2b20      	cmp	r3, #32
 8006744:	d139      	bne.n	80067ba <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800674c:	2b01      	cmp	r3, #1
 800674e:	d101      	bne.n	8006754 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006750:	2302      	movs	r3, #2
 8006752:	e033      	b.n	80067bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2224      	movs	r2, #36	; 0x24
 8006760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f022 0201 	bic.w	r2, r2, #1
 8006772:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006782:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	021b      	lsls	r3, r3, #8
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	4313      	orrs	r3, r2
 800678c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f042 0201 	orr.w	r2, r2, #1
 80067a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2220      	movs	r2, #32
 80067aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80067b6:	2300      	movs	r3, #0
 80067b8:	e000      	b.n	80067bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80067ba:	2302      	movs	r3, #2
  }
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3714      	adds	r7, #20
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bc80      	pop	{r7}
 80067c4:	4770      	bx	lr
	...

080067c8 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 80067d0:	4b05      	ldr	r3, [pc, #20]	; (80067e8 <HAL_I2CEx_EnableFastModePlus+0x20>)
 80067d2:	685a      	ldr	r2, [r3, #4]
 80067d4:	4904      	ldr	r1, [pc, #16]	; (80067e8 <HAL_I2CEx_EnableFastModePlus+0x20>)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4313      	orrs	r3, r2
 80067da:	604b      	str	r3, [r1, #4]
}
 80067dc:	bf00      	nop
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bc80      	pop	{r7}
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	40010000 	.word	0x40010000

080067ec <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80067ec:	b480      	push	{r7}
 80067ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067f0:	4b04      	ldr	r3, [pc, #16]	; (8006804 <HAL_PWR_EnableBkUpAccess+0x18>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a03      	ldr	r2, [pc, #12]	; (8006804 <HAL_PWR_EnableBkUpAccess+0x18>)
 80067f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067fa:	6013      	str	r3, [r2, #0]
}
 80067fc:	bf00      	nop
 80067fe:	46bd      	mov	sp, r7
 8006800:	bc80      	pop	{r7}
 8006802:	4770      	bx	lr
 8006804:	58000400 	.word	0x58000400

08006808 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006808:	b480      	push	{r7}
 800680a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800680c:	4b03      	ldr	r3, [pc, #12]	; (800681c <HAL_PWREx_GetVoltageRange+0x14>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8006814:	4618      	mov	r0, r3
 8006816:	46bd      	mov	sp, r7
 8006818:	bc80      	pop	{r7}
 800681a:	4770      	bx	lr
 800681c:	58000400 	.word	0x58000400

08006820 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8006820:	b480      	push	{r7}
 8006822:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8006824:	4b06      	ldr	r3, [pc, #24]	; (8006840 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800682c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006830:	d101      	bne.n	8006836 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8006832:	2301      	movs	r3, #1
 8006834:	e000      	b.n	8006838 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	46bd      	mov	sp, r7
 800683c:	bc80      	pop	{r7}
 800683e:	4770      	bx	lr
 8006840:	58000400 	.word	0x58000400

08006844 <LL_RCC_HSE_EnableTcxo>:
{
 8006844:	b480      	push	{r7}
 8006846:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8006848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006852:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006856:	6013      	str	r3, [r2, #0]
}
 8006858:	bf00      	nop
 800685a:	46bd      	mov	sp, r7
 800685c:	bc80      	pop	{r7}
 800685e:	4770      	bx	lr

08006860 <LL_RCC_HSE_DisableTcxo>:
{
 8006860:	b480      	push	{r7}
 8006862:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8006864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800686e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006872:	6013      	str	r3, [r2, #0]
}
 8006874:	bf00      	nop
 8006876:	46bd      	mov	sp, r7
 8006878:	bc80      	pop	{r7}
 800687a:	4770      	bx	lr

0800687c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800687c:	b480      	push	{r7}
 800687e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800688a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800688e:	d101      	bne.n	8006894 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8006890:	2301      	movs	r3, #1
 8006892:	e000      	b.n	8006896 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	46bd      	mov	sp, r7
 800689a:	bc80      	pop	{r7}
 800689c:	4770      	bx	lr

0800689e <LL_RCC_HSE_Enable>:
{
 800689e:	b480      	push	{r7}
 80068a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80068a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80068ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068b0:	6013      	str	r3, [r2, #0]
}
 80068b2:	bf00      	nop
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bc80      	pop	{r7}
 80068b8:	4770      	bx	lr

080068ba <LL_RCC_HSE_Disable>:
{
 80068ba:	b480      	push	{r7}
 80068bc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80068be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80068c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068cc:	6013      	str	r3, [r2, #0]
}
 80068ce:	bf00      	nop
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bc80      	pop	{r7}
 80068d4:	4770      	bx	lr

080068d6 <LL_RCC_HSE_IsReady>:
{
 80068d6:	b480      	push	{r7}
 80068d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80068da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068e8:	d101      	bne.n	80068ee <LL_RCC_HSE_IsReady+0x18>
 80068ea:	2301      	movs	r3, #1
 80068ec:	e000      	b.n	80068f0 <LL_RCC_HSE_IsReady+0x1a>
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bc80      	pop	{r7}
 80068f6:	4770      	bx	lr

080068f8 <LL_RCC_HSI_Enable>:
{
 80068f8:	b480      	push	{r7}
 80068fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80068fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800690a:	6013      	str	r3, [r2, #0]
}
 800690c:	bf00      	nop
 800690e:	46bd      	mov	sp, r7
 8006910:	bc80      	pop	{r7}
 8006912:	4770      	bx	lr

08006914 <LL_RCC_HSI_Disable>:
{
 8006914:	b480      	push	{r7}
 8006916:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8006918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006922:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006926:	6013      	str	r3, [r2, #0]
}
 8006928:	bf00      	nop
 800692a:	46bd      	mov	sp, r7
 800692c:	bc80      	pop	{r7}
 800692e:	4770      	bx	lr

08006930 <LL_RCC_HSI_IsReady>:
{
 8006930:	b480      	push	{r7}
 8006932:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006934:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800693e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006942:	d101      	bne.n	8006948 <LL_RCC_HSI_IsReady+0x18>
 8006944:	2301      	movs	r3, #1
 8006946:	e000      	b.n	800694a <LL_RCC_HSI_IsReady+0x1a>
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	46bd      	mov	sp, r7
 800694e:	bc80      	pop	{r7}
 8006950:	4770      	bx	lr

08006952 <LL_RCC_HSI_SetCalibTrimming>:
{
 8006952:	b480      	push	{r7}
 8006954:	b083      	sub	sp, #12
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800695a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	061b      	lsls	r3, r3, #24
 8006968:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800696c:	4313      	orrs	r3, r2
 800696e:	604b      	str	r3, [r1, #4]
}
 8006970:	bf00      	nop
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	bc80      	pop	{r7}
 8006978:	4770      	bx	lr

0800697a <LL_RCC_LSE_IsReady>:
{
 800697a:	b480      	push	{r7}
 800697c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800697e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006986:	f003 0302 	and.w	r3, r3, #2
 800698a:	2b02      	cmp	r3, #2
 800698c:	d101      	bne.n	8006992 <LL_RCC_LSE_IsReady+0x18>
 800698e:	2301      	movs	r3, #1
 8006990:	e000      	b.n	8006994 <LL_RCC_LSE_IsReady+0x1a>
 8006992:	2300      	movs	r3, #0
}
 8006994:	4618      	mov	r0, r3
 8006996:	46bd      	mov	sp, r7
 8006998:	bc80      	pop	{r7}
 800699a:	4770      	bx	lr

0800699c <LL_RCC_LSI_Enable>:
{
 800699c:	b480      	push	{r7}
 800699e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80069a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069ac:	f043 0301 	orr.w	r3, r3, #1
 80069b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80069b4:	bf00      	nop
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bc80      	pop	{r7}
 80069ba:	4770      	bx	lr

080069bc <LL_RCC_LSI_Disable>:
{
 80069bc:	b480      	push	{r7}
 80069be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80069c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069cc:	f023 0301 	bic.w	r3, r3, #1
 80069d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80069d4:	bf00      	nop
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bc80      	pop	{r7}
 80069da:	4770      	bx	lr

080069dc <LL_RCC_LSI_IsReady>:
{
 80069dc:	b480      	push	{r7}
 80069de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80069e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069e8:	f003 0302 	and.w	r3, r3, #2
 80069ec:	2b02      	cmp	r3, #2
 80069ee:	d101      	bne.n	80069f4 <LL_RCC_LSI_IsReady+0x18>
 80069f0:	2301      	movs	r3, #1
 80069f2:	e000      	b.n	80069f6 <LL_RCC_LSI_IsReady+0x1a>
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bc80      	pop	{r7}
 80069fc:	4770      	bx	lr

080069fe <LL_RCC_MSI_Enable>:
{
 80069fe:	b480      	push	{r7}
 8006a00:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006a02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a0c:	f043 0301 	orr.w	r3, r3, #1
 8006a10:	6013      	str	r3, [r2, #0]
}
 8006a12:	bf00      	nop
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bc80      	pop	{r7}
 8006a18:	4770      	bx	lr

08006a1a <LL_RCC_MSI_Disable>:
{
 8006a1a:	b480      	push	{r7}
 8006a1c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8006a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a28:	f023 0301 	bic.w	r3, r3, #1
 8006a2c:	6013      	str	r3, [r2, #0]
}
 8006a2e:	bf00      	nop
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bc80      	pop	{r7}
 8006a34:	4770      	bx	lr

08006a36 <LL_RCC_MSI_IsReady>:
{
 8006a36:	b480      	push	{r7}
 8006a38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0302 	and.w	r3, r3, #2
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	d101      	bne.n	8006a4c <LL_RCC_MSI_IsReady+0x16>
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e000      	b.n	8006a4e <LL_RCC_MSI_IsReady+0x18>
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bc80      	pop	{r7}
 8006a54:	4770      	bx	lr

08006a56 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8006a56:	b480      	push	{r7}
 8006a58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8006a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 0308 	and.w	r3, r3, #8
 8006a64:	2b08      	cmp	r3, #8
 8006a66:	d101      	bne.n	8006a6c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e000      	b.n	8006a6e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bc80      	pop	{r7}
 8006a74:	4770      	bx	lr

08006a76 <LL_RCC_MSI_GetRange>:
{
 8006a76:	b480      	push	{r7}
 8006a78:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8006a7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bc80      	pop	{r7}
 8006a8a:	4770      	bx	lr

08006a8c <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8006a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a98:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bc80      	pop	{r7}
 8006aa2:	4770      	bx	lr

08006aa4 <LL_RCC_MSI_SetCalibTrimming>:
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	021b      	lsls	r3, r3, #8
 8006aba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	604b      	str	r3, [r1, #4]
}
 8006ac2:	bf00      	nop
 8006ac4:	370c      	adds	r7, #12
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bc80      	pop	{r7}
 8006aca:	4770      	bx	lr

08006acc <LL_RCC_SetSysClkSource>:
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006ad4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	f023 0203 	bic.w	r2, r3, #3
 8006ade:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	608b      	str	r3, [r1, #8]
}
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bc80      	pop	{r7}
 8006af0:	4770      	bx	lr

08006af2 <LL_RCC_GetSysClkSource>:
{
 8006af2:	b480      	push	{r7}
 8006af4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006af6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	f003 030c 	and.w	r3, r3, #12
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bc80      	pop	{r7}
 8006b06:	4770      	bx	lr

08006b08 <LL_RCC_SetAHBPrescaler>:
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006b10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	608b      	str	r3, [r1, #8]
}
 8006b24:	bf00      	nop
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bc80      	pop	{r7}
 8006b2c:	4770      	bx	lr

08006b2e <LL_C2_RCC_SetAHBPrescaler>:
{
 8006b2e:	b480      	push	{r7}
 8006b30:	b083      	sub	sp, #12
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8006b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b3a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006b3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006b4e:	bf00      	nop
 8006b50:	370c      	adds	r7, #12
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bc80      	pop	{r7}
 8006b56:	4770      	bx	lr

08006b58 <LL_RCC_SetAHB3Prescaler>:
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b64:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006b68:	f023 020f 	bic.w	r2, r3, #15
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	091b      	lsrs	r3, r3, #4
 8006b70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b74:	4313      	orrs	r3, r2
 8006b76:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006b7a:	bf00      	nop
 8006b7c:	370c      	adds	r7, #12
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bc80      	pop	{r7}
 8006b82:	4770      	bx	lr

08006b84 <LL_RCC_SetAPB1Prescaler>:
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006b96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	608b      	str	r3, [r1, #8]
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bc80      	pop	{r7}
 8006ba8:	4770      	bx	lr

08006baa <LL_RCC_SetAPB2Prescaler>:
{
 8006baa:	b480      	push	{r7}
 8006bac:	b083      	sub	sp, #12
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006bbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	608b      	str	r3, [r1, #8]
}
 8006bc6:	bf00      	nop
 8006bc8:	370c      	adds	r7, #12
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bc80      	pop	{r7}
 8006bce:	4770      	bx	lr

08006bd0 <LL_RCC_GetAHBPrescaler>:
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bc80      	pop	{r7}
 8006be4:	4770      	bx	lr

08006be6 <LL_RCC_GetAHB3Prescaler>:
{
 8006be6:	b480      	push	{r7}
 8006be8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006bea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006bf2:	011b      	lsls	r3, r3, #4
 8006bf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bc80      	pop	{r7}
 8006bfe:	4770      	bx	lr

08006c00 <LL_RCC_GetAPB1Prescaler>:
{
 8006c00:	b480      	push	{r7}
 8006c02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006c04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bc80      	pop	{r7}
 8006c14:	4770      	bx	lr

08006c16 <LL_RCC_GetAPB2Prescaler>:
{
 8006c16:	b480      	push	{r7}
 8006c18:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bc80      	pop	{r7}
 8006c2a:	4770      	bx	lr

08006c2c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c3e:	6013      	str	r3, [r2, #0]
}
 8006c40:	bf00      	nop
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bc80      	pop	{r7}
 8006c46:	4770      	bx	lr

08006c48 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c5a:	6013      	str	r3, [r2, #0]
}
 8006c5c:	bf00      	nop
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bc80      	pop	{r7}
 8006c62:	4770      	bx	lr

08006c64 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8006c64:	b480      	push	{r7}
 8006c66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c76:	d101      	bne.n	8006c7c <LL_RCC_PLL_IsReady+0x18>
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e000      	b.n	8006c7e <LL_RCC_PLL_IsReady+0x1a>
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bc80      	pop	{r7}
 8006c84:	4770      	bx	lr

08006c86 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006c86:	b480      	push	{r7}
 8006c88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006c8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	0a1b      	lsrs	r3, r3, #8
 8006c92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bc80      	pop	{r7}
 8006c9c:	4770      	bx	lr

08006c9e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8006c9e:	b480      	push	{r7}
 8006ca0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006ca2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bc80      	pop	{r7}
 8006cb2:	4770      	bx	lr

08006cb4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bc80      	pop	{r7}
 8006cc8:	4770      	bx	lr

08006cca <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006cca:	b480      	push	{r7}
 8006ccc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	f003 0303 	and.w	r3, r3, #3
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bc80      	pop	{r7}
 8006cde:	4770      	bx	lr

08006ce0 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cf2:	d101      	bne.n	8006cf8 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e000      	b.n	8006cfa <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bc80      	pop	{r7}
 8006d00:	4770      	bx	lr

08006d02 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8006d02:	b480      	push	{r7}
 8006d04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8006d06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d0a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d16:	d101      	bne.n	8006d1c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e000      	b.n	8006d1e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bc80      	pop	{r7}
 8006d24:	4770      	bx	lr

08006d26 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8006d26:	b480      	push	{r7}
 8006d28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d2e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006d32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d3a:	d101      	bne.n	8006d40 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e000      	b.n	8006d42 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bc80      	pop	{r7}
 8006d48:	4770      	bx	lr

08006d4a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8006d4a:	b480      	push	{r7}
 8006d4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d5c:	d101      	bne.n	8006d62 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e000      	b.n	8006d64 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bc80      	pop	{r7}
 8006d6a:	4770      	bx	lr

08006d6c <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d7e:	d101      	bne.n	8006d84 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006d80:	2301      	movs	r3, #1
 8006d82:	e000      	b.n	8006d86 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bc80      	pop	{r7}
 8006d8c:	4770      	bx	lr
	...

08006d90 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b088      	sub	sp, #32
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d101      	bne.n	8006da2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e38b      	b.n	80074ba <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006da2:	f7ff fea6 	bl	8006af2 <LL_RCC_GetSysClkSource>
 8006da6:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006da8:	f7ff ff8f 	bl	8006cca <LL_RCC_PLL_GetMainSource>
 8006dac:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f003 0320 	and.w	r3, r3, #32
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	f000 80c9 	beq.w	8006f4e <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d005      	beq.n	8006dce <HAL_RCC_OscConfig+0x3e>
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	2b0c      	cmp	r3, #12
 8006dc6:	d17b      	bne.n	8006ec0 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d178      	bne.n	8006ec0 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006dce:	f7ff fe32 	bl	8006a36 <LL_RCC_MSI_IsReady>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d005      	beq.n	8006de4 <HAL_RCC_OscConfig+0x54>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a1b      	ldr	r3, [r3, #32]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d101      	bne.n	8006de4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	e36a      	b.n	80074ba <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 0308 	and.w	r3, r3, #8
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d005      	beq.n	8006e02 <HAL_RCC_OscConfig+0x72>
 8006df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e00:	e006      	b.n	8006e10 <HAL_RCC_OscConfig+0x80>
 8006e02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e0a:	091b      	lsrs	r3, r3, #4
 8006e0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d222      	bcs.n	8006e5a <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f000 fd6f 	bl	80078fc <RCC_SetFlashLatencyFromMSIRange>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d001      	beq.n	8006e28 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e348      	b.n	80074ba <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e32:	f043 0308 	orr.w	r3, r3, #8
 8006e36:	6013      	str	r3, [r2, #0]
 8006e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e52:	4618      	mov	r0, r3
 8006e54:	f7ff fe26 	bl	8006aa4 <LL_RCC_MSI_SetCalibTrimming>
 8006e58:	e021      	b.n	8006e9e <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006e5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e64:	f043 0308 	orr.w	r3, r3, #8
 8006e68:	6013      	str	r3, [r2, #0]
 8006e6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e84:	4618      	mov	r0, r3
 8006e86:	f7ff fe0d 	bl	8006aa4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f000 fd34 	bl	80078fc <RCC_SetFlashLatencyFromMSIRange>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d001      	beq.n	8006e9e <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e30d      	b.n	80074ba <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006e9e:	f000 fcf5 	bl	800788c <HAL_RCC_GetHCLKFreq>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	4aa1      	ldr	r2, [pc, #644]	; (800712c <HAL_RCC_OscConfig+0x39c>)
 8006ea6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006ea8:	4ba1      	ldr	r3, [pc, #644]	; (8007130 <HAL_RCC_OscConfig+0x3a0>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4618      	mov	r0, r3
 8006eae:	f7fd fe6f 	bl	8004b90 <HAL_InitTick>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8006eb6:	7cfb      	ldrb	r3, [r7, #19]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d047      	beq.n	8006f4c <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8006ebc:	7cfb      	ldrb	r3, [r7, #19]
 8006ebe:	e2fc      	b.n	80074ba <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6a1b      	ldr	r3, [r3, #32]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d02c      	beq.n	8006f22 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006ec8:	f7ff fd99 	bl	80069fe <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006ecc:	f7fd feac 	bl	8004c28 <HAL_GetTick>
 8006ed0:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8006ed2:	e008      	b.n	8006ee6 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006ed4:	f7fd fea8 	bl	8004c28 <HAL_GetTick>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	2b02      	cmp	r3, #2
 8006ee0:	d901      	bls.n	8006ee6 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	e2e9      	b.n	80074ba <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8006ee6:	f7ff fda6 	bl	8006a36 <LL_RCC_MSI_IsReady>
 8006eea:	4603      	mov	r3, r0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d0f1      	beq.n	8006ed4 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006efa:	f043 0308 	orr.w	r3, r3, #8
 8006efe:	6013      	str	r3, [r2, #0]
 8006f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f12:	4313      	orrs	r3, r2
 8006f14:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7ff fdc2 	bl	8006aa4 <LL_RCC_MSI_SetCalibTrimming>
 8006f20:	e015      	b.n	8006f4e <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006f22:	f7ff fd7a 	bl	8006a1a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006f26:	f7fd fe7f 	bl	8004c28 <HAL_GetTick>
 8006f2a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8006f2c:	e008      	b.n	8006f40 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006f2e:	f7fd fe7b 	bl	8004c28 <HAL_GetTick>
 8006f32:	4602      	mov	r2, r0
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	1ad3      	subs	r3, r2, r3
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d901      	bls.n	8006f40 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	e2bc      	b.n	80074ba <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8006f40:	f7ff fd79 	bl	8006a36 <LL_RCC_MSI_IsReady>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d1f1      	bne.n	8006f2e <HAL_RCC_OscConfig+0x19e>
 8006f4a:	e000      	b.n	8006f4e <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006f4c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d05f      	beq.n	800701a <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	2b08      	cmp	r3, #8
 8006f5e:	d005      	beq.n	8006f6c <HAL_RCC_OscConfig+0x1dc>
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	2b0c      	cmp	r3, #12
 8006f64:	d10d      	bne.n	8006f82 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	2b03      	cmp	r3, #3
 8006f6a:	d10a      	bne.n	8006f82 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f6c:	f7ff fcb3 	bl	80068d6 <LL_RCC_HSE_IsReady>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d050      	beq.n	8007018 <HAL_RCC_OscConfig+0x288>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d14c      	bne.n	8007018 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e29b      	b.n	80074ba <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8006f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f94:	4313      	orrs	r3, r2
 8006f96:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fa0:	d102      	bne.n	8006fa8 <HAL_RCC_OscConfig+0x218>
 8006fa2:	f7ff fc7c 	bl	800689e <LL_RCC_HSE_Enable>
 8006fa6:	e00d      	b.n	8006fc4 <HAL_RCC_OscConfig+0x234>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8006fb0:	d104      	bne.n	8006fbc <HAL_RCC_OscConfig+0x22c>
 8006fb2:	f7ff fc47 	bl	8006844 <LL_RCC_HSE_EnableTcxo>
 8006fb6:	f7ff fc72 	bl	800689e <LL_RCC_HSE_Enable>
 8006fba:	e003      	b.n	8006fc4 <HAL_RCC_OscConfig+0x234>
 8006fbc:	f7ff fc7d 	bl	80068ba <LL_RCC_HSE_Disable>
 8006fc0:	f7ff fc4e 	bl	8006860 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d012      	beq.n	8006ff2 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fcc:	f7fd fe2c 	bl	8004c28 <HAL_GetTick>
 8006fd0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8006fd2:	e008      	b.n	8006fe6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fd4:	f7fd fe28 	bl	8004c28 <HAL_GetTick>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	2b64      	cmp	r3, #100	; 0x64
 8006fe0:	d901      	bls.n	8006fe6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	e269      	b.n	80074ba <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8006fe6:	f7ff fc76 	bl	80068d6 <LL_RCC_HSE_IsReady>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d0f1      	beq.n	8006fd4 <HAL_RCC_OscConfig+0x244>
 8006ff0:	e013      	b.n	800701a <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ff2:	f7fd fe19 	bl	8004c28 <HAL_GetTick>
 8006ff6:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006ff8:	e008      	b.n	800700c <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ffa:	f7fd fe15 	bl	8004c28 <HAL_GetTick>
 8006ffe:	4602      	mov	r2, r0
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	2b64      	cmp	r3, #100	; 0x64
 8007006:	d901      	bls.n	800700c <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8007008:	2303      	movs	r3, #3
 800700a:	e256      	b.n	80074ba <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 800700c:	f7ff fc63 	bl	80068d6 <LL_RCC_HSE_IsReady>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d1f1      	bne.n	8006ffa <HAL_RCC_OscConfig+0x26a>
 8007016:	e000      	b.n	800701a <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007018:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 0302 	and.w	r3, r3, #2
 8007022:	2b00      	cmp	r3, #0
 8007024:	d04b      	beq.n	80070be <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	2b04      	cmp	r3, #4
 800702a:	d005      	beq.n	8007038 <HAL_RCC_OscConfig+0x2a8>
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	2b0c      	cmp	r3, #12
 8007030:	d113      	bne.n	800705a <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	2b02      	cmp	r3, #2
 8007036:	d110      	bne.n	800705a <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007038:	f7ff fc7a 	bl	8006930 <LL_RCC_HSI_IsReady>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d005      	beq.n	800704e <HAL_RCC_OscConfig+0x2be>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d101      	bne.n	800704e <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	e235      	b.n	80074ba <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	695b      	ldr	r3, [r3, #20]
 8007052:	4618      	mov	r0, r3
 8007054:	f7ff fc7d 	bl	8006952 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007058:	e031      	b.n	80070be <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d019      	beq.n	8007096 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007062:	f7ff fc49 	bl	80068f8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007066:	f7fd fddf 	bl	8004c28 <HAL_GetTick>
 800706a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800706c:	e008      	b.n	8007080 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800706e:	f7fd fddb 	bl	8004c28 <HAL_GetTick>
 8007072:	4602      	mov	r2, r0
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	1ad3      	subs	r3, r2, r3
 8007078:	2b02      	cmp	r3, #2
 800707a:	d901      	bls.n	8007080 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 800707c:	2303      	movs	r3, #3
 800707e:	e21c      	b.n	80074ba <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 8007080:	f7ff fc56 	bl	8006930 <LL_RCC_HSI_IsReady>
 8007084:	4603      	mov	r3, r0
 8007086:	2b00      	cmp	r3, #0
 8007088:	d0f1      	beq.n	800706e <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	695b      	ldr	r3, [r3, #20]
 800708e:	4618      	mov	r0, r3
 8007090:	f7ff fc5f 	bl	8006952 <LL_RCC_HSI_SetCalibTrimming>
 8007094:	e013      	b.n	80070be <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007096:	f7ff fc3d 	bl	8006914 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800709a:	f7fd fdc5 	bl	8004c28 <HAL_GetTick>
 800709e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80070a0:	e008      	b.n	80070b4 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070a2:	f7fd fdc1 	bl	8004c28 <HAL_GetTick>
 80070a6:	4602      	mov	r2, r0
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	1ad3      	subs	r3, r2, r3
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	d901      	bls.n	80070b4 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 80070b0:	2303      	movs	r3, #3
 80070b2:	e202      	b.n	80074ba <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 80070b4:	f7ff fc3c 	bl	8006930 <LL_RCC_HSI_IsReady>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d1f1      	bne.n	80070a2 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 0308 	and.w	r3, r3, #8
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d06f      	beq.n	80071aa <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d057      	beq.n	8007182 <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 80070d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070da:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	69da      	ldr	r2, [r3, #28]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f003 0310 	and.w	r3, r3, #16
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d036      	beq.n	8007158 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f003 0302 	and.w	r3, r3, #2
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d006      	beq.n	8007102 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d101      	bne.n	8007102 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e1db      	b.n	80074ba <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f003 0301 	and.w	r3, r3, #1
 8007108:	2b00      	cmp	r3, #0
 800710a:	d018      	beq.n	800713e <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 800710c:	f7ff fc56 	bl	80069bc <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007110:	f7fd fd8a 	bl	8004c28 <HAL_GetTick>
 8007114:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8007116:	e00d      	b.n	8007134 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007118:	f7fd fd86 	bl	8004c28 <HAL_GetTick>
 800711c:	4602      	mov	r2, r0
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	1ad3      	subs	r3, r2, r3
 8007122:	2b11      	cmp	r3, #17
 8007124:	d906      	bls.n	8007134 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 8007126:	2303      	movs	r3, #3
 8007128:	e1c7      	b.n	80074ba <HAL_RCC_OscConfig+0x72a>
 800712a:	bf00      	nop
 800712c:	20000004 	.word	0x20000004
 8007130:	20000074 	.word	0x20000074
          while (LL_RCC_LSI_IsReady() != 0U)
 8007134:	f7ff fc52 	bl	80069dc <LL_RCC_LSI_IsReady>
 8007138:	4603      	mov	r3, r0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d1ec      	bne.n	8007118 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800713e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007142:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007146:	f023 0210 	bic.w	r2, r3, #16
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	69db      	ldr	r3, [r3, #28]
 800714e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007152:	4313      	orrs	r3, r2
 8007154:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007158:	f7ff fc20 	bl	800699c <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800715c:	f7fd fd64 	bl	8004c28 <HAL_GetTick>
 8007160:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8007162:	e008      	b.n	8007176 <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007164:	f7fd fd60 	bl	8004c28 <HAL_GetTick>
 8007168:	4602      	mov	r2, r0
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	1ad3      	subs	r3, r2, r3
 800716e:	2b11      	cmp	r3, #17
 8007170:	d901      	bls.n	8007176 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 8007172:	2303      	movs	r3, #3
 8007174:	e1a1      	b.n	80074ba <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 8007176:	f7ff fc31 	bl	80069dc <LL_RCC_LSI_IsReady>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d0f1      	beq.n	8007164 <HAL_RCC_OscConfig+0x3d4>
 8007180:	e013      	b.n	80071aa <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007182:	f7ff fc1b 	bl	80069bc <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007186:	f7fd fd4f 	bl	8004c28 <HAL_GetTick>
 800718a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 800718c:	e008      	b.n	80071a0 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800718e:	f7fd fd4b 	bl	8004c28 <HAL_GetTick>
 8007192:	4602      	mov	r2, r0
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	2b11      	cmp	r3, #17
 800719a:	d901      	bls.n	80071a0 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 800719c:	2303      	movs	r3, #3
 800719e:	e18c      	b.n	80074ba <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 80071a0:	f7ff fc1c 	bl	80069dc <LL_RCC_LSI_IsReady>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d1f1      	bne.n	800718e <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 0304 	and.w	r3, r3, #4
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	f000 80d8 	beq.w	8007368 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80071b8:	f7ff fb32 	bl	8006820 <LL_PWR_IsEnabledBkUpAccess>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d113      	bne.n	80071ea <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80071c2:	f7ff fb13 	bl	80067ec <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071c6:	f7fd fd2f 	bl	8004c28 <HAL_GetTick>
 80071ca:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80071cc:	e008      	b.n	80071e0 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071ce:	f7fd fd2b 	bl	8004c28 <HAL_GetTick>
 80071d2:	4602      	mov	r2, r0
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	1ad3      	subs	r3, r2, r3
 80071d8:	2b02      	cmp	r3, #2
 80071da:	d901      	bls.n	80071e0 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 80071dc:	2303      	movs	r3, #3
 80071de:	e16c      	b.n	80074ba <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80071e0:	f7ff fb1e 	bl	8006820 <LL_PWR_IsEnabledBkUpAccess>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d0f1      	beq.n	80071ce <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d07b      	beq.n	80072ea <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	2b85      	cmp	r3, #133	; 0x85
 80071f8:	d003      	beq.n	8007202 <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	2b05      	cmp	r3, #5
 8007200:	d109      	bne.n	8007216 <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800720a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800720e:	f043 0304 	orr.w	r3, r3, #4
 8007212:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007216:	f7fd fd07 	bl	8004c28 <HAL_GetTick>
 800721a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800721c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007224:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007228:	f043 0301 	orr.w	r3, r3, #1
 800722c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8007230:	e00a      	b.n	8007248 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007232:	f7fd fcf9 	bl	8004c28 <HAL_GetTick>
 8007236:	4602      	mov	r2, r0
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007240:	4293      	cmp	r3, r2
 8007242:	d901      	bls.n	8007248 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8007244:	2303      	movs	r3, #3
 8007246:	e138      	b.n	80074ba <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8007248:	f7ff fb97 	bl	800697a <LL_RCC_LSE_IsReady>
 800724c:	4603      	mov	r3, r0
 800724e:	2b00      	cmp	r3, #0
 8007250:	d0ef      	beq.n	8007232 <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	2b81      	cmp	r3, #129	; 0x81
 8007258:	d003      	beq.n	8007262 <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	68db      	ldr	r3, [r3, #12]
 800725e:	2b85      	cmp	r3, #133	; 0x85
 8007260:	d121      	bne.n	80072a6 <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007262:	f7fd fce1 	bl	8004c28 <HAL_GetTick>
 8007266:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800726c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007270:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007278:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800727c:	e00a      	b.n	8007294 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800727e:	f7fd fcd3 	bl	8004c28 <HAL_GetTick>
 8007282:	4602      	mov	r2, r0
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	f241 3288 	movw	r2, #5000	; 0x1388
 800728c:	4293      	cmp	r3, r2
 800728e:	d901      	bls.n	8007294 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8007290:	2303      	movs	r3, #3
 8007292:	e112      	b.n	80074ba <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007294:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800729c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d0ec      	beq.n	800727e <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80072a4:	e060      	b.n	8007368 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072a6:	f7fd fcbf 	bl	8004c28 <HAL_GetTick>
 80072aa:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80072ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80072b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80072c0:	e00a      	b.n	80072d8 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072c2:	f7fd fcb1 	bl	8004c28 <HAL_GetTick>
 80072c6:	4602      	mov	r2, r0
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	1ad3      	subs	r3, r2, r3
 80072cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d901      	bls.n	80072d8 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 80072d4:	2303      	movs	r3, #3
 80072d6:	e0f0      	b.n	80074ba <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80072d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d1ec      	bne.n	80072c2 <HAL_RCC_OscConfig+0x532>
 80072e8:	e03e      	b.n	8007368 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072ea:	f7fd fc9d 	bl	8004c28 <HAL_GetTick>
 80072ee:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80072f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80072fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007300:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007304:	e00a      	b.n	800731c <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007306:	f7fd fc8f 	bl	8004c28 <HAL_GetTick>
 800730a:	4602      	mov	r2, r0
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	1ad3      	subs	r3, r2, r3
 8007310:	f241 3288 	movw	r2, #5000	; 0x1388
 8007314:	4293      	cmp	r3, r2
 8007316:	d901      	bls.n	800731c <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8007318:	2303      	movs	r3, #3
 800731a:	e0ce      	b.n	80074ba <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800731c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007324:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007328:	2b00      	cmp	r3, #0
 800732a:	d1ec      	bne.n	8007306 <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800732c:	f7fd fc7c 	bl	8004c28 <HAL_GetTick>
 8007330:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007332:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800733a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800733e:	f023 0301 	bic.w	r3, r3, #1
 8007342:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8007346:	e00a      	b.n	800735e <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007348:	f7fd fc6e 	bl	8004c28 <HAL_GetTick>
 800734c:	4602      	mov	r2, r0
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	1ad3      	subs	r3, r2, r3
 8007352:	f241 3288 	movw	r2, #5000	; 0x1388
 8007356:	4293      	cmp	r3, r2
 8007358:	d901      	bls.n	800735e <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 800735a:	2303      	movs	r3, #3
 800735c:	e0ad      	b.n	80074ba <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 800735e:	f7ff fb0c 	bl	800697a <LL_RCC_LSE_IsReady>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1ef      	bne.n	8007348 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800736c:	2b00      	cmp	r3, #0
 800736e:	f000 80a3 	beq.w	80074b8 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	2b0c      	cmp	r3, #12
 8007376:	d076      	beq.n	8007466 <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737c:	2b02      	cmp	r3, #2
 800737e:	d14b      	bne.n	8007418 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007380:	f7ff fc62 	bl	8006c48 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007384:	f7fd fc50 	bl	8004c28 <HAL_GetTick>
 8007388:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800738a:	e008      	b.n	800739e <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800738c:	f7fd fc4c 	bl	8004c28 <HAL_GetTick>
 8007390:	4602      	mov	r2, r0
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	2b0a      	cmp	r3, #10
 8007398:	d901      	bls.n	800739e <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 800739a:	2303      	movs	r3, #3
 800739c:	e08d      	b.n	80074ba <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 800739e:	f7ff fc61 	bl	8006c64 <LL_RCC_PLL_IsReady>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d1f1      	bne.n	800738c <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80073a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073ac:	68da      	ldr	r2, [r3, #12]
 80073ae:	4b45      	ldr	r3, [pc, #276]	; (80074c4 <HAL_RCC_OscConfig+0x734>)
 80073b0:	4013      	ands	r3, r2
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80073ba:	4311      	orrs	r1, r2
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80073c0:	0212      	lsls	r2, r2, #8
 80073c2:	4311      	orrs	r1, r2
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80073c8:	4311      	orrs	r1, r2
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80073ce:	4311      	orrs	r1, r2
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80073d4:	430a      	orrs	r2, r1
 80073d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80073da:	4313      	orrs	r3, r2
 80073dc:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073de:	f7ff fc25 	bl	8006c2c <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80073e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073f0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073f2:	f7fd fc19 	bl	8004c28 <HAL_GetTick>
 80073f6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80073f8:	e008      	b.n	800740c <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073fa:	f7fd fc15 	bl	8004c28 <HAL_GetTick>
 80073fe:	4602      	mov	r2, r0
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	2b0a      	cmp	r3, #10
 8007406:	d901      	bls.n	800740c <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8007408:	2303      	movs	r3, #3
 800740a:	e056      	b.n	80074ba <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 800740c:	f7ff fc2a 	bl	8006c64 <LL_RCC_PLL_IsReady>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d0f1      	beq.n	80073fa <HAL_RCC_OscConfig+0x66a>
 8007416:	e04f      	b.n	80074b8 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007418:	f7ff fc16 	bl	8006c48 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800741c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007426:	f023 0303 	bic.w	r3, r3, #3
 800742a:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 800742c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007436:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800743a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800743e:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007440:	f7fd fbf2 	bl	8004c28 <HAL_GetTick>
 8007444:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8007446:	e008      	b.n	800745a <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007448:	f7fd fbee 	bl	8004c28 <HAL_GetTick>
 800744c:	4602      	mov	r2, r0
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	1ad3      	subs	r3, r2, r3
 8007452:	2b0a      	cmp	r3, #10
 8007454:	d901      	bls.n	800745a <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 8007456:	2303      	movs	r3, #3
 8007458:	e02f      	b.n	80074ba <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 800745a:	f7ff fc03 	bl	8006c64 <LL_RCC_PLL_IsReady>
 800745e:	4603      	mov	r3, r0
 8007460:	2b00      	cmp	r3, #0
 8007462:	d1f1      	bne.n	8007448 <HAL_RCC_OscConfig+0x6b8>
 8007464:	e028      	b.n	80074b8 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746a:	2b01      	cmp	r3, #1
 800746c:	d101      	bne.n	8007472 <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e023      	b.n	80074ba <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007472:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	f003 0203 	and.w	r2, r3, #3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007484:	429a      	cmp	r2, r3
 8007486:	d115      	bne.n	80074b4 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007492:	429a      	cmp	r2, r3
 8007494:	d10e      	bne.n	80074b4 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a0:	021b      	lsls	r3, r3, #8
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d106      	bne.n	80074b4 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d001      	beq.n	80074b8 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	e000      	b.n	80074ba <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3720      	adds	r7, #32
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	11c1808c 	.word	0x11c1808c

080074c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d101      	bne.n	80074dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	e12c      	b.n	8007736 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80074dc:	4b98      	ldr	r3, [pc, #608]	; (8007740 <HAL_RCC_ClockConfig+0x278>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 0307 	and.w	r3, r3, #7
 80074e4:	683a      	ldr	r2, [r7, #0]
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d91b      	bls.n	8007522 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074ea:	4b95      	ldr	r3, [pc, #596]	; (8007740 <HAL_RCC_ClockConfig+0x278>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f023 0207 	bic.w	r2, r3, #7
 80074f2:	4993      	ldr	r1, [pc, #588]	; (8007740 <HAL_RCC_ClockConfig+0x278>)
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074fa:	f7fd fb95 	bl	8004c28 <HAL_GetTick>
 80074fe:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007500:	e008      	b.n	8007514 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007502:	f7fd fb91 	bl	8004c28 <HAL_GetTick>
 8007506:	4602      	mov	r2, r0
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	1ad3      	subs	r3, r2, r3
 800750c:	2b02      	cmp	r3, #2
 800750e:	d901      	bls.n	8007514 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8007510:	2303      	movs	r3, #3
 8007512:	e110      	b.n	8007736 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007514:	4b8a      	ldr	r3, [pc, #552]	; (8007740 <HAL_RCC_ClockConfig+0x278>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 0307 	and.w	r3, r3, #7
 800751c:	683a      	ldr	r2, [r7, #0]
 800751e:	429a      	cmp	r2, r3
 8007520:	d1ef      	bne.n	8007502 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f003 0302 	and.w	r3, r3, #2
 800752a:	2b00      	cmp	r3, #0
 800752c:	d016      	beq.n	800755c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	4618      	mov	r0, r3
 8007534:	f7ff fae8 	bl	8006b08 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007538:	f7fd fb76 	bl	8004c28 <HAL_GetTick>
 800753c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800753e:	e008      	b.n	8007552 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007540:	f7fd fb72 	bl	8004c28 <HAL_GetTick>
 8007544:	4602      	mov	r2, r0
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	2b02      	cmp	r3, #2
 800754c:	d901      	bls.n	8007552 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800754e:	2303      	movs	r3, #3
 8007550:	e0f1      	b.n	8007736 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007552:	f7ff fbc5 	bl	8006ce0 <LL_RCC_IsActiveFlag_HPRE>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d0f1      	beq.n	8007540 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 0320 	and.w	r3, r3, #32
 8007564:	2b00      	cmp	r3, #0
 8007566:	d016      	beq.n	8007596 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	695b      	ldr	r3, [r3, #20]
 800756c:	4618      	mov	r0, r3
 800756e:	f7ff fade 	bl	8006b2e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007572:	f7fd fb59 	bl	8004c28 <HAL_GetTick>
 8007576:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007578:	e008      	b.n	800758c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800757a:	f7fd fb55 	bl	8004c28 <HAL_GetTick>
 800757e:	4602      	mov	r2, r0
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	1ad3      	subs	r3, r2, r3
 8007584:	2b02      	cmp	r3, #2
 8007586:	d901      	bls.n	800758c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8007588:	2303      	movs	r3, #3
 800758a:	e0d4      	b.n	8007736 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800758c:	f7ff fbb9 	bl	8006d02 <LL_RCC_IsActiveFlag_C2HPRE>
 8007590:	4603      	mov	r3, r0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d0f1      	beq.n	800757a <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d016      	beq.n	80075d0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	699b      	ldr	r3, [r3, #24]
 80075a6:	4618      	mov	r0, r3
 80075a8:	f7ff fad6 	bl	8006b58 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80075ac:	f7fd fb3c 	bl	8004c28 <HAL_GetTick>
 80075b0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80075b2:	e008      	b.n	80075c6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80075b4:	f7fd fb38 	bl	8004c28 <HAL_GetTick>
 80075b8:	4602      	mov	r2, r0
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	1ad3      	subs	r3, r2, r3
 80075be:	2b02      	cmp	r3, #2
 80075c0:	d901      	bls.n	80075c6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80075c2:	2303      	movs	r3, #3
 80075c4:	e0b7      	b.n	8007736 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80075c6:	f7ff fbae 	bl	8006d26 <LL_RCC_IsActiveFlag_SHDHPRE>
 80075ca:	4603      	mov	r3, r0
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d0f1      	beq.n	80075b4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 0304 	and.w	r3, r3, #4
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d016      	beq.n	800760a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	4618      	mov	r0, r3
 80075e2:	f7ff facf 	bl	8006b84 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80075e6:	f7fd fb1f 	bl	8004c28 <HAL_GetTick>
 80075ea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80075ec:	e008      	b.n	8007600 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80075ee:	f7fd fb1b 	bl	8004c28 <HAL_GetTick>
 80075f2:	4602      	mov	r2, r0
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	1ad3      	subs	r3, r2, r3
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	d901      	bls.n	8007600 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80075fc:	2303      	movs	r3, #3
 80075fe:	e09a      	b.n	8007736 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007600:	f7ff fba3 	bl	8006d4a <LL_RCC_IsActiveFlag_PPRE1>
 8007604:	4603      	mov	r3, r0
 8007606:	2b00      	cmp	r3, #0
 8007608:	d0f1      	beq.n	80075ee <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f003 0308 	and.w	r3, r3, #8
 8007612:	2b00      	cmp	r3, #0
 8007614:	d017      	beq.n	8007646 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	00db      	lsls	r3, r3, #3
 800761c:	4618      	mov	r0, r3
 800761e:	f7ff fac4 	bl	8006baa <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007622:	f7fd fb01 	bl	8004c28 <HAL_GetTick>
 8007626:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007628:	e008      	b.n	800763c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800762a:	f7fd fafd 	bl	8004c28 <HAL_GetTick>
 800762e:	4602      	mov	r2, r0
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	1ad3      	subs	r3, r2, r3
 8007634:	2b02      	cmp	r3, #2
 8007636:	d901      	bls.n	800763c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8007638:	2303      	movs	r3, #3
 800763a:	e07c      	b.n	8007736 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800763c:	f7ff fb96 	bl	8006d6c <LL_RCC_IsActiveFlag_PPRE2>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d0f1      	beq.n	800762a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f003 0301 	and.w	r3, r3, #1
 800764e:	2b00      	cmp	r3, #0
 8007650:	d043      	beq.n	80076da <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	2b02      	cmp	r3, #2
 8007658:	d106      	bne.n	8007668 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800765a:	f7ff f93c 	bl	80068d6 <LL_RCC_HSE_IsReady>
 800765e:	4603      	mov	r3, r0
 8007660:	2b00      	cmp	r3, #0
 8007662:	d11e      	bne.n	80076a2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	e066      	b.n	8007736 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	2b03      	cmp	r3, #3
 800766e:	d106      	bne.n	800767e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8007670:	f7ff faf8 	bl	8006c64 <LL_RCC_PLL_IsReady>
 8007674:	4603      	mov	r3, r0
 8007676:	2b00      	cmp	r3, #0
 8007678:	d113      	bne.n	80076a2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	e05b      	b.n	8007736 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d106      	bne.n	8007694 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8007686:	f7ff f9d6 	bl	8006a36 <LL_RCC_MSI_IsReady>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d108      	bne.n	80076a2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007690:	2301      	movs	r3, #1
 8007692:	e050      	b.n	8007736 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8007694:	f7ff f94c 	bl	8006930 <LL_RCC_HSI_IsReady>
 8007698:	4603      	mov	r3, r0
 800769a:	2b00      	cmp	r3, #0
 800769c:	d101      	bne.n	80076a2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	e049      	b.n	8007736 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7ff fa10 	bl	8006acc <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076ac:	f7fd fabc 	bl	8004c28 <HAL_GetTick>
 80076b0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076b2:	e00a      	b.n	80076ca <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076b4:	f7fd fab8 	bl	8004c28 <HAL_GetTick>
 80076b8:	4602      	mov	r2, r0
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	f241 3288 	movw	r2, #5000	; 0x1388
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d901      	bls.n	80076ca <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80076c6:	2303      	movs	r3, #3
 80076c8:	e035      	b.n	8007736 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076ca:	f7ff fa12 	bl	8006af2 <LL_RCC_GetSysClkSource>
 80076ce:	4602      	mov	r2, r0
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d1ec      	bne.n	80076b4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80076da:	4b19      	ldr	r3, [pc, #100]	; (8007740 <HAL_RCC_ClockConfig+0x278>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 0307 	and.w	r3, r3, #7
 80076e2:	683a      	ldr	r2, [r7, #0]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d21b      	bcs.n	8007720 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076e8:	4b15      	ldr	r3, [pc, #84]	; (8007740 <HAL_RCC_ClockConfig+0x278>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f023 0207 	bic.w	r2, r3, #7
 80076f0:	4913      	ldr	r1, [pc, #76]	; (8007740 <HAL_RCC_ClockConfig+0x278>)
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076f8:	f7fd fa96 	bl	8004c28 <HAL_GetTick>
 80076fc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076fe:	e008      	b.n	8007712 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007700:	f7fd fa92 	bl	8004c28 <HAL_GetTick>
 8007704:	4602      	mov	r2, r0
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	2b02      	cmp	r3, #2
 800770c:	d901      	bls.n	8007712 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800770e:	2303      	movs	r3, #3
 8007710:	e011      	b.n	8007736 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007712:	4b0b      	ldr	r3, [pc, #44]	; (8007740 <HAL_RCC_ClockConfig+0x278>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f003 0307 	and.w	r3, r3, #7
 800771a:	683a      	ldr	r2, [r7, #0]
 800771c:	429a      	cmp	r2, r3
 800771e:	d1ef      	bne.n	8007700 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007720:	f000 f8b4 	bl	800788c <HAL_RCC_GetHCLKFreq>
 8007724:	4603      	mov	r3, r0
 8007726:	4a07      	ldr	r2, [pc, #28]	; (8007744 <HAL_RCC_ClockConfig+0x27c>)
 8007728:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800772a:	4b07      	ldr	r3, [pc, #28]	; (8007748 <HAL_RCC_ClockConfig+0x280>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4618      	mov	r0, r3
 8007730:	f7fd fa2e 	bl	8004b90 <HAL_InitTick>
 8007734:	4603      	mov	r3, r0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	58004000 	.word	0x58004000
 8007744:	20000004 	.word	0x20000004
 8007748:	20000074 	.word	0x20000074

0800774c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800774c:	b590      	push	{r4, r7, lr}
 800774e:	b087      	sub	sp, #28
 8007750:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8007752:	2300      	movs	r3, #0
 8007754:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8007756:	2300      	movs	r3, #0
 8007758:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800775a:	f7ff f9ca 	bl	8006af2 <LL_RCC_GetSysClkSource>
 800775e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007760:	f7ff fab3 	bl	8006cca <LL_RCC_PLL_GetMainSource>
 8007764:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d005      	beq.n	8007778 <HAL_RCC_GetSysClockFreq+0x2c>
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	2b0c      	cmp	r3, #12
 8007770:	d139      	bne.n	80077e6 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2b01      	cmp	r3, #1
 8007776:	d136      	bne.n	80077e6 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8007778:	f7ff f96d 	bl	8006a56 <LL_RCC_MSI_IsEnabledRangeSelect>
 800777c:	4603      	mov	r3, r0
 800777e:	2b00      	cmp	r3, #0
 8007780:	d115      	bne.n	80077ae <HAL_RCC_GetSysClockFreq+0x62>
 8007782:	f7ff f968 	bl	8006a56 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007786:	4603      	mov	r3, r0
 8007788:	2b01      	cmp	r3, #1
 800778a:	d106      	bne.n	800779a <HAL_RCC_GetSysClockFreq+0x4e>
 800778c:	f7ff f973 	bl	8006a76 <LL_RCC_MSI_GetRange>
 8007790:	4603      	mov	r3, r0
 8007792:	0a1b      	lsrs	r3, r3, #8
 8007794:	f003 030f 	and.w	r3, r3, #15
 8007798:	e005      	b.n	80077a6 <HAL_RCC_GetSysClockFreq+0x5a>
 800779a:	f7ff f977 	bl	8006a8c <LL_RCC_MSI_GetRangeAfterStandby>
 800779e:	4603      	mov	r3, r0
 80077a0:	0a1b      	lsrs	r3, r3, #8
 80077a2:	f003 030f 	and.w	r3, r3, #15
 80077a6:	4a36      	ldr	r2, [pc, #216]	; (8007880 <HAL_RCC_GetSysClockFreq+0x134>)
 80077a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077ac:	e014      	b.n	80077d8 <HAL_RCC_GetSysClockFreq+0x8c>
 80077ae:	f7ff f952 	bl	8006a56 <LL_RCC_MSI_IsEnabledRangeSelect>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d106      	bne.n	80077c6 <HAL_RCC_GetSysClockFreq+0x7a>
 80077b8:	f7ff f95d 	bl	8006a76 <LL_RCC_MSI_GetRange>
 80077bc:	4603      	mov	r3, r0
 80077be:	091b      	lsrs	r3, r3, #4
 80077c0:	f003 030f 	and.w	r3, r3, #15
 80077c4:	e005      	b.n	80077d2 <HAL_RCC_GetSysClockFreq+0x86>
 80077c6:	f7ff f961 	bl	8006a8c <LL_RCC_MSI_GetRangeAfterStandby>
 80077ca:	4603      	mov	r3, r0
 80077cc:	091b      	lsrs	r3, r3, #4
 80077ce:	f003 030f 	and.w	r3, r3, #15
 80077d2:	4a2b      	ldr	r2, [pc, #172]	; (8007880 <HAL_RCC_GetSysClockFreq+0x134>)
 80077d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077d8:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d115      	bne.n	800780c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80077e4:	e012      	b.n	800780c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	2b04      	cmp	r3, #4
 80077ea:	d102      	bne.n	80077f2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80077ec:	4b25      	ldr	r3, [pc, #148]	; (8007884 <HAL_RCC_GetSysClockFreq+0x138>)
 80077ee:	617b      	str	r3, [r7, #20]
 80077f0:	e00c      	b.n	800780c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	2b08      	cmp	r3, #8
 80077f6:	d109      	bne.n	800780c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80077f8:	f7ff f840 	bl	800687c <LL_RCC_HSE_IsEnabledDiv2>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d102      	bne.n	8007808 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8007802:	4b20      	ldr	r3, [pc, #128]	; (8007884 <HAL_RCC_GetSysClockFreq+0x138>)
 8007804:	617b      	str	r3, [r7, #20]
 8007806:	e001      	b.n	800780c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8007808:	4b1f      	ldr	r3, [pc, #124]	; (8007888 <HAL_RCC_GetSysClockFreq+0x13c>)
 800780a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800780c:	f7ff f971 	bl	8006af2 <LL_RCC_GetSysClkSource>
 8007810:	4603      	mov	r3, r0
 8007812:	2b0c      	cmp	r3, #12
 8007814:	d12f      	bne.n	8007876 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8007816:	f7ff fa58 	bl	8006cca <LL_RCC_PLL_GetMainSource>
 800781a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2b02      	cmp	r3, #2
 8007820:	d003      	beq.n	800782a <HAL_RCC_GetSysClockFreq+0xde>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2b03      	cmp	r3, #3
 8007826:	d003      	beq.n	8007830 <HAL_RCC_GetSysClockFreq+0xe4>
 8007828:	e00d      	b.n	8007846 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800782a:	4b16      	ldr	r3, [pc, #88]	; (8007884 <HAL_RCC_GetSysClockFreq+0x138>)
 800782c:	60fb      	str	r3, [r7, #12]
        break;
 800782e:	e00d      	b.n	800784c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007830:	f7ff f824 	bl	800687c <LL_RCC_HSE_IsEnabledDiv2>
 8007834:	4603      	mov	r3, r0
 8007836:	2b01      	cmp	r3, #1
 8007838:	d102      	bne.n	8007840 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800783a:	4b12      	ldr	r3, [pc, #72]	; (8007884 <HAL_RCC_GetSysClockFreq+0x138>)
 800783c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800783e:	e005      	b.n	800784c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8007840:	4b11      	ldr	r3, [pc, #68]	; (8007888 <HAL_RCC_GetSysClockFreq+0x13c>)
 8007842:	60fb      	str	r3, [r7, #12]
        break;
 8007844:	e002      	b.n	800784c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	60fb      	str	r3, [r7, #12]
        break;
 800784a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800784c:	f7ff fa1b 	bl	8006c86 <LL_RCC_PLL_GetN>
 8007850:	4602      	mov	r2, r0
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	fb03 f402 	mul.w	r4, r3, r2
 8007858:	f7ff fa2c 	bl	8006cb4 <LL_RCC_PLL_GetDivider>
 800785c:	4603      	mov	r3, r0
 800785e:	091b      	lsrs	r3, r3, #4
 8007860:	3301      	adds	r3, #1
 8007862:	fbb4 f4f3 	udiv	r4, r4, r3
 8007866:	f7ff fa1a 	bl	8006c9e <LL_RCC_PLL_GetR>
 800786a:	4603      	mov	r3, r0
 800786c:	0f5b      	lsrs	r3, r3, #29
 800786e:	3301      	adds	r3, #1
 8007870:	fbb4 f3f3 	udiv	r3, r4, r3
 8007874:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8007876:	697b      	ldr	r3, [r7, #20]
}
 8007878:	4618      	mov	r0, r3
 800787a:	371c      	adds	r7, #28
 800787c:	46bd      	mov	sp, r7
 800787e:	bd90      	pop	{r4, r7, pc}
 8007880:	0801a624 	.word	0x0801a624
 8007884:	00f42400 	.word	0x00f42400
 8007888:	01e84800 	.word	0x01e84800

0800788c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800788c:	b598      	push	{r3, r4, r7, lr}
 800788e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007890:	f7ff ff5c 	bl	800774c <HAL_RCC_GetSysClockFreq>
 8007894:	4604      	mov	r4, r0
 8007896:	f7ff f99b 	bl	8006bd0 <LL_RCC_GetAHBPrescaler>
 800789a:	4603      	mov	r3, r0
 800789c:	091b      	lsrs	r3, r3, #4
 800789e:	f003 030f 	and.w	r3, r3, #15
 80078a2:	4a03      	ldr	r2, [pc, #12]	; (80078b0 <HAL_RCC_GetHCLKFreq+0x24>)
 80078a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078a8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	bd98      	pop	{r3, r4, r7, pc}
 80078b0:	0801a5c4 	.word	0x0801a5c4

080078b4 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078b4:	b598      	push	{r3, r4, r7, lr}
 80078b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80078b8:	f7ff ffe8 	bl	800788c <HAL_RCC_GetHCLKFreq>
 80078bc:	4604      	mov	r4, r0
 80078be:	f7ff f99f 	bl	8006c00 <LL_RCC_GetAPB1Prescaler>
 80078c2:	4603      	mov	r3, r0
 80078c4:	0a1b      	lsrs	r3, r3, #8
 80078c6:	4a03      	ldr	r2, [pc, #12]	; (80078d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80078c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078cc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	bd98      	pop	{r3, r4, r7, pc}
 80078d4:	0801a604 	.word	0x0801a604

080078d8 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80078d8:	b598      	push	{r3, r4, r7, lr}
 80078da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80078dc:	f7ff ffd6 	bl	800788c <HAL_RCC_GetHCLKFreq>
 80078e0:	4604      	mov	r4, r0
 80078e2:	f7ff f998 	bl	8006c16 <LL_RCC_GetAPB2Prescaler>
 80078e6:	4603      	mov	r3, r0
 80078e8:	0adb      	lsrs	r3, r3, #11
 80078ea:	4a03      	ldr	r2, [pc, #12]	; (80078f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80078ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078f0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	bd98      	pop	{r3, r4, r7, pc}
 80078f8:	0801a604 	.word	0x0801a604

080078fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80078fc:	b590      	push	{r4, r7, lr}
 80078fe:	b085      	sub	sp, #20
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	091b      	lsrs	r3, r3, #4
 8007908:	f003 030f 	and.w	r3, r3, #15
 800790c:	4a10      	ldr	r2, [pc, #64]	; (8007950 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800790e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007912:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8007914:	f7ff f967 	bl	8006be6 <LL_RCC_GetAHB3Prescaler>
 8007918:	4603      	mov	r3, r0
 800791a:	091b      	lsrs	r3, r3, #4
 800791c:	f003 030f 	and.w	r3, r3, #15
 8007920:	4a0c      	ldr	r2, [pc, #48]	; (8007954 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8007922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007926:	68fa      	ldr	r2, [r7, #12]
 8007928:	fbb2 f3f3 	udiv	r3, r2, r3
 800792c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	4a09      	ldr	r2, [pc, #36]	; (8007958 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8007932:	fba2 2303 	umull	r2, r3, r2, r3
 8007936:	0c9c      	lsrs	r4, r3, #18
 8007938:	f7fe ff66 	bl	8006808 <HAL_PWREx_GetVoltageRange>
 800793c:	4603      	mov	r3, r0
 800793e:	4619      	mov	r1, r3
 8007940:	4620      	mov	r0, r4
 8007942:	f000 f80b 	bl	800795c <RCC_SetFlashLatency>
 8007946:	4603      	mov	r3, r0
}
 8007948:	4618      	mov	r0, r3
 800794a:	3714      	adds	r7, #20
 800794c:	46bd      	mov	sp, r7
 800794e:	bd90      	pop	{r4, r7, pc}
 8007950:	0801a624 	.word	0x0801a624
 8007954:	0801a5c4 	.word	0x0801a5c4
 8007958:	431bde83 	.word	0x431bde83

0800795c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b08e      	sub	sp, #56	; 0x38
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8007966:	4a3a      	ldr	r2, [pc, #232]	; (8007a50 <RCC_SetFlashLatency+0xf4>)
 8007968:	f107 0320 	add.w	r3, r7, #32
 800796c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007970:	6018      	str	r0, [r3, #0]
 8007972:	3304      	adds	r3, #4
 8007974:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8007976:	4a37      	ldr	r2, [pc, #220]	; (8007a54 <RCC_SetFlashLatency+0xf8>)
 8007978:	f107 0318 	add.w	r3, r7, #24
 800797c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007980:	6018      	str	r0, [r3, #0]
 8007982:	3304      	adds	r3, #4
 8007984:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8007986:	4a34      	ldr	r2, [pc, #208]	; (8007a58 <RCC_SetFlashLatency+0xfc>)
 8007988:	f107 030c 	add.w	r3, r7, #12
 800798c:	ca07      	ldmia	r2, {r0, r1, r2}
 800798e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007992:	2300      	movs	r3, #0
 8007994:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800799c:	d11b      	bne.n	80079d6 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800799e:	2300      	movs	r3, #0
 80079a0:	633b      	str	r3, [r7, #48]	; 0x30
 80079a2:	e014      	b.n	80079ce <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80079a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a6:	005b      	lsls	r3, r3, #1
 80079a8:	3338      	adds	r3, #56	; 0x38
 80079aa:	443b      	add	r3, r7
 80079ac:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80079b0:	461a      	mov	r2, r3
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d807      	bhi.n	80079c8 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80079b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	3338      	adds	r3, #56	; 0x38
 80079be:	443b      	add	r3, r7
 80079c0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80079c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079c6:	e021      	b.n	8007a0c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80079c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ca:	3301      	adds	r3, #1
 80079cc:	633b      	str	r3, [r7, #48]	; 0x30
 80079ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d0:	2b02      	cmp	r3, #2
 80079d2:	d9e7      	bls.n	80079a4 <RCC_SetFlashLatency+0x48>
 80079d4:	e01a      	b.n	8007a0c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80079d6:	2300      	movs	r3, #0
 80079d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079da:	e014      	b.n	8007a06 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80079dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079de:	005b      	lsls	r3, r3, #1
 80079e0:	3338      	adds	r3, #56	; 0x38
 80079e2:	443b      	add	r3, r7
 80079e4:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80079e8:	461a      	mov	r2, r3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d807      	bhi.n	8007a00 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80079f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	3338      	adds	r3, #56	; 0x38
 80079f6:	443b      	add	r3, r7
 80079f8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80079fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079fe:	e005      	b.n	8007a0c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a02:	3301      	adds	r3, #1
 8007a04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	d9e7      	bls.n	80079dc <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007a0c:	4b13      	ldr	r3, [pc, #76]	; (8007a5c <RCC_SetFlashLatency+0x100>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f023 0207 	bic.w	r2, r3, #7
 8007a14:	4911      	ldr	r1, [pc, #68]	; (8007a5c <RCC_SetFlashLatency+0x100>)
 8007a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007a1c:	f7fd f904 	bl	8004c28 <HAL_GetTick>
 8007a20:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007a22:	e008      	b.n	8007a36 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007a24:	f7fd f900 	bl	8004c28 <HAL_GetTick>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2c:	1ad3      	subs	r3, r2, r3
 8007a2e:	2b02      	cmp	r3, #2
 8007a30:	d901      	bls.n	8007a36 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8007a32:	2303      	movs	r3, #3
 8007a34:	e007      	b.n	8007a46 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007a36:	4b09      	ldr	r3, [pc, #36]	; (8007a5c <RCC_SetFlashLatency+0x100>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f003 0307 	and.w	r3, r3, #7
 8007a3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d1ef      	bne.n	8007a24 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3738      	adds	r7, #56	; 0x38
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	0801a538 	.word	0x0801a538
 8007a54:	0801a540 	.word	0x0801a540
 8007a58:	0801a548 	.word	0x0801a548
 8007a5c:	58004000 	.word	0x58004000

08007a60 <LL_RCC_LSE_IsReady>:
{
 8007a60:	b480      	push	{r7}
 8007a62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007a64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a6c:	f003 0302 	and.w	r3, r3, #2
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	d101      	bne.n	8007a78 <LL_RCC_LSE_IsReady+0x18>
 8007a74:	2301      	movs	r3, #1
 8007a76:	e000      	b.n	8007a7a <LL_RCC_LSE_IsReady+0x1a>
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bc80      	pop	{r7}
 8007a80:	4770      	bx	lr

08007a82 <LL_RCC_SetUSARTClockSource>:
{
 8007a82:	b480      	push	{r7}
 8007a84:	b083      	sub	sp, #12
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8007a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a8e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	0c1b      	lsrs	r3, r3, #16
 8007a96:	43db      	mvns	r3, r3
 8007a98:	401a      	ands	r2, r3
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007aa8:	bf00      	nop
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bc80      	pop	{r7}
 8007ab0:	4770      	bx	lr

08007ab2 <LL_RCC_SetI2SClockSource>:
{
 8007ab2:	b480      	push	{r7}
 8007ab4:	b083      	sub	sp, #12
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8007aba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ac2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ac6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007ad2:	bf00      	nop
 8007ad4:	370c      	adds	r7, #12
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bc80      	pop	{r7}
 8007ada:	4770      	bx	lr

08007adc <LL_RCC_SetLPUARTClockSource>:
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007af0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007afc:	bf00      	nop
 8007afe:	370c      	adds	r7, #12
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bc80      	pop	{r7}
 8007b04:	4770      	bx	lr

08007b06 <LL_RCC_SetI2CClockSource>:
{
 8007b06:	b480      	push	{r7}
 8007b08:	b083      	sub	sp, #12
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b12:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	091b      	lsrs	r3, r3, #4
 8007b1a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007b1e:	43db      	mvns	r3, r3
 8007b20:	401a      	ands	r2, r3
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	011b      	lsls	r3, r3, #4
 8007b26:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007b2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007b34:	bf00      	nop
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bc80      	pop	{r7}
 8007b3c:	4770      	bx	lr

08007b3e <LL_RCC_SetLPTIMClockSource>:
{
 8007b3e:	b480      	push	{r7}
 8007b40:	b083      	sub	sp, #12
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b4a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	0c1b      	lsrs	r3, r3, #16
 8007b52:	041b      	lsls	r3, r3, #16
 8007b54:	43db      	mvns	r3, r3
 8007b56:	401a      	ands	r2, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	041b      	lsls	r3, r3, #16
 8007b5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b60:	4313      	orrs	r3, r2
 8007b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007b66:	bf00      	nop
 8007b68:	370c      	adds	r7, #12
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bc80      	pop	{r7}
 8007b6e:	4770      	bx	lr

08007b70 <LL_RCC_SetRNGClockSource>:
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8007b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b80:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007b84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007b90:	bf00      	nop
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bc80      	pop	{r7}
 8007b98:	4770      	bx	lr

08007b9a <LL_RCC_SetADCClockSource>:
{
 8007b9a:	b480      	push	{r7}
 8007b9c:	b083      	sub	sp, #12
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007baa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007bae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007bba:	bf00      	nop
 8007bbc:	370c      	adds	r7, #12
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bc80      	pop	{r7}
 8007bc2:	4770      	bx	lr

08007bc4 <LL_RCC_SetRTCClockSource>:
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007bd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8007be4:	bf00      	nop
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bc80      	pop	{r7}
 8007bec:	4770      	bx	lr

08007bee <LL_RCC_GetRTCClockSource>:
{
 8007bee:	b480      	push	{r7}
 8007bf0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8007bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bc80      	pop	{r7}
 8007c04:	4770      	bx	lr

08007c06 <LL_RCC_ForceBackupDomainReset>:
{
 8007c06:	b480      	push	{r7}
 8007c08:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007c1e:	bf00      	nop
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bc80      	pop	{r7}
 8007c24:	4770      	bx	lr

08007c26 <LL_RCC_ReleaseBackupDomainReset>:
{
 8007c26:	b480      	push	{r7}
 8007c28:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007c3e:	bf00      	nop
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bc80      	pop	{r7}
 8007c44:	4770      	bx	lr
	...

08007c48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b086      	sub	sp, #24
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8007c50:	2300      	movs	r3, #0
 8007c52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8007c54:	2300      	movs	r3, #0
 8007c56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007c58:	2300      	movs	r3, #0
 8007c5a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d058      	beq.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8007c68:	f7fe fdc0 	bl	80067ec <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007c6c:	f7fc ffdc 	bl	8004c28 <HAL_GetTick>
 8007c70:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8007c72:	e009      	b.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c74:	f7fc ffd8 	bl	8004c28 <HAL_GetTick>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	1ad3      	subs	r3, r2, r3
 8007c7e:	2b02      	cmp	r3, #2
 8007c80:	d902      	bls.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8007c82:	2303      	movs	r3, #3
 8007c84:	74fb      	strb	r3, [r7, #19]
        break;
 8007c86:	e006      	b.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8007c88:	4b7b      	ldr	r3, [pc, #492]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c94:	d1ee      	bne.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8007c96:	7cfb      	ldrb	r3, [r7, #19]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d13c      	bne.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8007c9c:	f7ff ffa7 	bl	8007bee <LL_RCC_GetRTCClockSource>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d00f      	beq.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cb6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007cb8:	f7ff ffa5 	bl	8007c06 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007cbc:	f7ff ffb3 	bl	8007c26 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007cc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	f003 0302 	and.w	r3, r3, #2
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d014      	beq.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cd4:	f7fc ffa8 	bl	8004c28 <HAL_GetTick>
 8007cd8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8007cda:	e00b      	b.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cdc:	f7fc ffa4 	bl	8004c28 <HAL_GetTick>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	1ad3      	subs	r3, r2, r3
 8007ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d902      	bls.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8007cee:	2303      	movs	r3, #3
 8007cf0:	74fb      	strb	r3, [r7, #19]
            break;
 8007cf2:	e004      	b.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8007cf4:	f7ff feb4 	bl	8007a60 <LL_RCC_LSE_IsReady>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d1ee      	bne.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8007cfe:	7cfb      	ldrb	r3, [r7, #19]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d105      	bne.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f7ff ff5b 	bl	8007bc4 <LL_RCC_SetRTCClockSource>
 8007d0e:	e004      	b.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007d10:	7cfb      	ldrb	r3, [r7, #19]
 8007d12:	74bb      	strb	r3, [r7, #18]
 8007d14:	e001      	b.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d16:	7cfb      	ldrb	r3, [r7, #19]
 8007d18:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f003 0301 	and.w	r3, r3, #1
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d004      	beq.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7ff fea9 	bl	8007a82 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f003 0302 	and.w	r3, r3, #2
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d004      	beq.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	4618      	mov	r0, r3
 8007d42:	f7ff fe9e 	bl	8007a82 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f003 0320 	and.w	r3, r3, #32
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d004      	beq.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	691b      	ldr	r3, [r3, #16]
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7ff fec0 	bl	8007adc <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d004      	beq.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6a1b      	ldr	r3, [r3, #32]
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f7ff fee6 	bl	8007b3e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d004      	beq.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d82:	4618      	mov	r0, r3
 8007d84:	f7ff fedb 	bl	8007b3e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d004      	beq.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f7ff fed0 	bl	8007b3e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d004      	beq.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	695b      	ldr	r3, [r3, #20]
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7ff fea9 	bl	8007b06 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d004      	beq.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	699b      	ldr	r3, [r3, #24]
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7ff fe9e 	bl	8007b06 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d004      	beq.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	69db      	ldr	r3, [r3, #28]
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7ff fe93 	bl	8007b06 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f003 0310 	and.w	r3, r3, #16
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d011      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	4618      	mov	r0, r3
 8007df2:	f7ff fe5e 	bl	8007ab2 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dfe:	d107      	bne.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8007e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e0e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d010      	beq.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e20:	4618      	mov	r0, r3
 8007e22:	f7ff fea5 	bl	8007b70 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d107      	bne.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e3c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d011      	beq.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f7ff fea3 	bl	8007b9a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e5c:	d107      	bne.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e6c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8007e6e:	7cbb      	ldrb	r3, [r7, #18]
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3718      	adds	r7, #24
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	58000400 	.word	0x58000400

08007e7c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d068      	beq.n	8007f60 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d106      	bne.n	8007ea8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f7fa f816 	bl	8001ed4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2202      	movs	r2, #2
 8007eac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007eb0:	4b2e      	ldr	r3, [pc, #184]	; (8007f6c <HAL_RTC_Init+0xf0>)
 8007eb2:	22ca      	movs	r2, #202	; 0xca
 8007eb4:	625a      	str	r2, [r3, #36]	; 0x24
 8007eb6:	4b2d      	ldr	r3, [pc, #180]	; (8007f6c <HAL_RTC_Init+0xf0>)
 8007eb8:	2253      	movs	r2, #83	; 0x53
 8007eba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 fa4f 	bl	8008360 <RTC_EnterInitMode>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8007ec6:	7bfb      	ldrb	r3, [r7, #15]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d13f      	bne.n	8007f4c <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8007ecc:	4b27      	ldr	r3, [pc, #156]	; (8007f6c <HAL_RTC_Init+0xf0>)
 8007ece:	699b      	ldr	r3, [r3, #24]
 8007ed0:	4a26      	ldr	r2, [pc, #152]	; (8007f6c <HAL_RTC_Init+0xf0>)
 8007ed2:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8007ed6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007eda:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8007edc:	4b23      	ldr	r3, [pc, #140]	; (8007f6c <HAL_RTC_Init+0xf0>)
 8007ede:	699a      	ldr	r2, [r3, #24]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6859      	ldr	r1, [r3, #4]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	4319      	orrs	r1, r3
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	699b      	ldr	r3, [r3, #24]
 8007eee:	430b      	orrs	r3, r1
 8007ef0:	491e      	ldr	r1, [pc, #120]	; (8007f6c <HAL_RTC_Init+0xf0>)
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	68da      	ldr	r2, [r3, #12]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	041b      	lsls	r3, r3, #16
 8007f00:	491a      	ldr	r1, [pc, #104]	; (8007f6c <HAL_RTC_Init+0xf0>)
 8007f02:	4313      	orrs	r3, r2
 8007f04:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8007f06:	4b19      	ldr	r3, [pc, #100]	; (8007f6c <HAL_RTC_Init+0xf0>)
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f16:	430b      	orrs	r3, r1
 8007f18:	4914      	ldr	r1, [pc, #80]	; (8007f6c <HAL_RTC_Init+0xf0>)
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 fa52 	bl	80083c8 <RTC_ExitInitMode>
 8007f24:	4603      	mov	r3, r0
 8007f26:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8007f28:	7bfb      	ldrb	r3, [r7, #15]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d10e      	bne.n	8007f4c <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 8007f2e:	4b0f      	ldr	r3, [pc, #60]	; (8007f6c <HAL_RTC_Init+0xf0>)
 8007f30:	699b      	ldr	r3, [r3, #24]
 8007f32:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a19      	ldr	r1, [r3, #32]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	69db      	ldr	r3, [r3, #28]
 8007f3e:	4319      	orrs	r1, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	695b      	ldr	r3, [r3, #20]
 8007f44:	430b      	orrs	r3, r1
 8007f46:	4909      	ldr	r1, [pc, #36]	; (8007f6c <HAL_RTC_Init+0xf0>)
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f4c:	4b07      	ldr	r3, [pc, #28]	; (8007f6c <HAL_RTC_Init+0xf0>)
 8007f4e:	22ff      	movs	r2, #255	; 0xff
 8007f50:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8007f52:	7bfb      	ldrb	r3, [r7, #15]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d103      	bne.n	8007f60 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8007f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3710      	adds	r7, #16
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	40002800 	.word	0x40002800

08007f70 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007f70:	b590      	push	{r4, r7, lr}
 8007f72:	b087      	sub	sp, #28
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d101      	bne.n	8007f8a <HAL_RTC_SetTime+0x1a>
 8007f86:	2302      	movs	r3, #2
 8007f88:	e088      	b.n	800809c <HAL_RTC_SetTime+0x12c>
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2202      	movs	r2, #2
 8007f96:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007f9a:	4b42      	ldr	r3, [pc, #264]	; (80080a4 <HAL_RTC_SetTime+0x134>)
 8007f9c:	22ca      	movs	r2, #202	; 0xca
 8007f9e:	625a      	str	r2, [r3, #36]	; 0x24
 8007fa0:	4b40      	ldr	r3, [pc, #256]	; (80080a4 <HAL_RTC_SetTime+0x134>)
 8007fa2:	2253      	movs	r2, #83	; 0x53
 8007fa4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007fa6:	68f8      	ldr	r0, [r7, #12]
 8007fa8:	f000 f9da 	bl	8008360 <RTC_EnterInitMode>
 8007fac:	4603      	mov	r3, r0
 8007fae:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007fb0:	7cfb      	ldrb	r3, [r7, #19]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d15e      	bne.n	8008074 <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8007fb6:	4b3b      	ldr	r3, [pc, #236]	; (80080a4 <HAL_RTC_SetTime+0x134>)
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fc2:	d057      	beq.n	8008074 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d125      	bne.n	8008016 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8007fca:	4b36      	ldr	r3, [pc, #216]	; (80080a4 <HAL_RTC_SetTime+0x134>)
 8007fcc:	699b      	ldr	r3, [r3, #24]
 8007fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d102      	bne.n	8007fdc <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f000 fa2f 	bl	8008444 <RTC_ByteToBcd2>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	785b      	ldrb	r3, [r3, #1]
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f000 fa28 	bl	8008444 <RTC_ByteToBcd2>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007ff8:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	789b      	ldrb	r3, [r3, #2]
 8007ffe:	4618      	mov	r0, r3
 8008000:	f000 fa20 	bl	8008444 <RTC_ByteToBcd2>
 8008004:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008006:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	78db      	ldrb	r3, [r3, #3]
 800800e:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008010:	4313      	orrs	r3, r2
 8008012:	617b      	str	r3, [r7, #20]
 8008014:	e017      	b.n	8008046 <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8008016:	4b23      	ldr	r3, [pc, #140]	; (80080a4 <HAL_RTC_SetTime+0x134>)
 8008018:	699b      	ldr	r3, [r3, #24]
 800801a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800801e:	2b00      	cmp	r3, #0
 8008020:	d102      	bne.n	8008028 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	2200      	movs	r2, #0
 8008026:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	785b      	ldrb	r3, [r3, #1]
 8008032:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008034:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008036:	68ba      	ldr	r2, [r7, #8]
 8008038:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800803a:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	78db      	ldrb	r3, [r3, #3]
 8008040:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008042:	4313      	orrs	r3, r2
 8008044:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8008046:	4a17      	ldr	r2, [pc, #92]	; (80080a4 <HAL_RTC_SetTime+0x134>)
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800804e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008052:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8008054:	4b13      	ldr	r3, [pc, #76]	; (80080a4 <HAL_RTC_SetTime+0x134>)
 8008056:	699b      	ldr	r3, [r3, #24]
 8008058:	4a12      	ldr	r2, [pc, #72]	; (80080a4 <HAL_RTC_SetTime+0x134>)
 800805a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800805e:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8008060:	4b10      	ldr	r3, [pc, #64]	; (80080a4 <HAL_RTC_SetTime+0x134>)
 8008062:	699a      	ldr	r2, [r3, #24]
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	68d9      	ldr	r1, [r3, #12]
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	430b      	orrs	r3, r1
 800806e:	490d      	ldr	r1, [pc, #52]	; (80080a4 <HAL_RTC_SetTime+0x134>)
 8008070:	4313      	orrs	r3, r2
 8008072:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	f000 f9a7 	bl	80083c8 <RTC_ExitInitMode>
 800807a:	4603      	mov	r3, r0
 800807c:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800807e:	4b09      	ldr	r3, [pc, #36]	; (80080a4 <HAL_RTC_SetTime+0x134>)
 8008080:	22ff      	movs	r2, #255	; 0xff
 8008082:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8008084:	7cfb      	ldrb	r3, [r7, #19]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d103      	bne.n	8008092 <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2201      	movs	r2, #1
 800808e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2200      	movs	r2, #0
 8008096:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 800809a:	7cfb      	ldrb	r3, [r7, #19]
}
 800809c:	4618      	mov	r0, r3
 800809e:	371c      	adds	r7, #28
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd90      	pop	{r4, r7, pc}
 80080a4:	40002800 	.word	0x40002800

080080a8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b086      	sub	sp, #24
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 80080b4:	4b2c      	ldr	r3, [pc, #176]	; (8008168 <HAL_RTC_GetTime+0xc0>)
 80080b6:	689a      	ldr	r2, [r3, #8]
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 80080bc:	4b2a      	ldr	r3, [pc, #168]	; (8008168 <HAL_RTC_GetTime+0xc0>)
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080c8:	d049      	beq.n	800815e <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 80080ca:	4b27      	ldr	r3, [pc, #156]	; (8008168 <HAL_RTC_GetTime+0xc0>)
 80080cc:	691b      	ldr	r3, [r3, #16]
 80080ce:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 80080d6:	4b24      	ldr	r3, [pc, #144]	; (8008168 <HAL_RTC_GetTime+0xc0>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80080de:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80080e2:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	0c1b      	lsrs	r3, r3, #16
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080ee:	b2da      	uxtb	r2, r3
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	0a1b      	lsrs	r3, r3, #8
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080fe:	b2da      	uxtb	r2, r3
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	b2db      	uxtb	r3, r3
 8008108:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800810c:	b2da      	uxtb	r2, r3
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	0d9b      	lsrs	r3, r3, #22
 8008116:	b2db      	uxtb	r3, r3
 8008118:	f003 0301 	and.w	r3, r3, #1
 800811c:	b2da      	uxtb	r2, r3
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d11a      	bne.n	800815e <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	4618      	mov	r0, r3
 800812e:	f000 f9a8 	bl	8008482 <RTC_Bcd2ToByte>
 8008132:	4603      	mov	r3, r0
 8008134:	461a      	mov	r2, r3
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	785b      	ldrb	r3, [r3, #1]
 800813e:	4618      	mov	r0, r3
 8008140:	f000 f99f 	bl	8008482 <RTC_Bcd2ToByte>
 8008144:	4603      	mov	r3, r0
 8008146:	461a      	mov	r2, r3
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	789b      	ldrb	r3, [r3, #2]
 8008150:	4618      	mov	r0, r3
 8008152:	f000 f996 	bl	8008482 <RTC_Bcd2ToByte>
 8008156:	4603      	mov	r3, r0
 8008158:	461a      	mov	r2, r3
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 800815e:	2300      	movs	r3, #0
}
 8008160:	4618      	mov	r0, r3
 8008162:	3718      	adds	r7, #24
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}
 8008168:	40002800 	.word	0x40002800

0800816c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800816c:	b590      	push	{r4, r7, lr}
 800816e:	b087      	sub	sp, #28
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800817e:	2b01      	cmp	r3, #1
 8008180:	d101      	bne.n	8008186 <HAL_RTC_SetDate+0x1a>
 8008182:	2302      	movs	r3, #2
 8008184:	e071      	b.n	800826a <HAL_RTC_SetDate+0xfe>
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2201      	movs	r2, #1
 800818a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2202      	movs	r2, #2
 8008192:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d10e      	bne.n	80081ba <HAL_RTC_SetDate+0x4e>
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	785b      	ldrb	r3, [r3, #1]
 80081a0:	f003 0310 	and.w	r3, r3, #16
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d008      	beq.n	80081ba <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	785b      	ldrb	r3, [r3, #1]
 80081ac:	f023 0310 	bic.w	r3, r3, #16
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	330a      	adds	r3, #10
 80081b4:	b2da      	uxtb	r2, r3
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d11c      	bne.n	80081fa <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	78db      	ldrb	r3, [r3, #3]
 80081c4:	4618      	mov	r0, r3
 80081c6:	f000 f93d 	bl	8008444 <RTC_ByteToBcd2>
 80081ca:	4603      	mov	r3, r0
 80081cc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	785b      	ldrb	r3, [r3, #1]
 80081d2:	4618      	mov	r0, r3
 80081d4:	f000 f936 	bl	8008444 <RTC_ByteToBcd2>
 80081d8:	4603      	mov	r3, r0
 80081da:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80081dc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	789b      	ldrb	r3, [r3, #2]
 80081e2:	4618      	mov	r0, r3
 80081e4:	f000 f92e 	bl	8008444 <RTC_ByteToBcd2>
 80081e8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80081ea:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80081f4:	4313      	orrs	r3, r2
 80081f6:	617b      	str	r3, [r7, #20]
 80081f8:	e00e      	b.n	8008218 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	78db      	ldrb	r3, [r3, #3]
 80081fe:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	785b      	ldrb	r3, [r3, #1]
 8008204:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008206:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8008208:	68ba      	ldr	r2, [r7, #8]
 800820a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800820c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008214:	4313      	orrs	r3, r2
 8008216:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008218:	4b16      	ldr	r3, [pc, #88]	; (8008274 <HAL_RTC_SetDate+0x108>)
 800821a:	22ca      	movs	r2, #202	; 0xca
 800821c:	625a      	str	r2, [r3, #36]	; 0x24
 800821e:	4b15      	ldr	r3, [pc, #84]	; (8008274 <HAL_RTC_SetDate+0x108>)
 8008220:	2253      	movs	r2, #83	; 0x53
 8008222:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008224:	68f8      	ldr	r0, [r7, #12]
 8008226:	f000 f89b 	bl	8008360 <RTC_EnterInitMode>
 800822a:	4603      	mov	r3, r0
 800822c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800822e:	7cfb      	ldrb	r3, [r7, #19]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d10b      	bne.n	800824c <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8008234:	4a0f      	ldr	r2, [pc, #60]	; (8008274 <HAL_RTC_SetDate+0x108>)
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800823c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008240:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008242:	68f8      	ldr	r0, [r7, #12]
 8008244:	f000 f8c0 	bl	80083c8 <RTC_ExitInitMode>
 8008248:	4603      	mov	r3, r0
 800824a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800824c:	4b09      	ldr	r3, [pc, #36]	; (8008274 <HAL_RTC_SetDate+0x108>)
 800824e:	22ff      	movs	r2, #255	; 0xff
 8008250:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8008252:	7cfb      	ldrb	r3, [r7, #19]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d103      	bne.n	8008260 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2201      	movs	r2, #1
 800825c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2200      	movs	r2, #0
 8008264:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8008268:	7cfb      	ldrb	r3, [r7, #19]
}
 800826a:	4618      	mov	r0, r3
 800826c:	371c      	adds	r7, #28
 800826e:	46bd      	mov	sp, r7
 8008270:	bd90      	pop	{r4, r7, pc}
 8008272:	bf00      	nop
 8008274:	40002800 	.word	0x40002800

08008278 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b086      	sub	sp, #24
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8008284:	4b22      	ldr	r3, [pc, #136]	; (8008310 <HAL_RTC_GetDate+0x98>)
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800828c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008290:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	0c1b      	lsrs	r3, r3, #16
 8008296:	b2da      	uxtb	r2, r3
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	0a1b      	lsrs	r3, r3, #8
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	f003 031f 	and.w	r3, r3, #31
 80082a6:	b2da      	uxtb	r2, r3
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082b4:	b2da      	uxtb	r2, r3
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	0b5b      	lsrs	r3, r3, #13
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	f003 0307 	and.w	r3, r3, #7
 80082c4:	b2da      	uxtb	r2, r3
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d11a      	bne.n	8008306 <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	78db      	ldrb	r3, [r3, #3]
 80082d4:	4618      	mov	r0, r3
 80082d6:	f000 f8d4 	bl	8008482 <RTC_Bcd2ToByte>
 80082da:	4603      	mov	r3, r0
 80082dc:	461a      	mov	r2, r3
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	785b      	ldrb	r3, [r3, #1]
 80082e6:	4618      	mov	r0, r3
 80082e8:	f000 f8cb 	bl	8008482 <RTC_Bcd2ToByte>
 80082ec:	4603      	mov	r3, r0
 80082ee:	461a      	mov	r2, r3
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	789b      	ldrb	r3, [r3, #2]
 80082f8:	4618      	mov	r0, r3
 80082fa:	f000 f8c2 	bl	8008482 <RTC_Bcd2ToByte>
 80082fe:	4603      	mov	r3, r0
 8008300:	461a      	mov	r2, r3
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008306:	2300      	movs	r3, #0
}
 8008308:	4618      	mov	r0, r3
 800830a:	3718      	adds	r7, #24
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}
 8008310:	40002800 	.word	0x40002800

08008314 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800831c:	4b0f      	ldr	r3, [pc, #60]	; (800835c <HAL_RTC_WaitForSynchro+0x48>)
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	4a0e      	ldr	r2, [pc, #56]	; (800835c <HAL_RTC_WaitForSynchro+0x48>)
 8008322:	f023 0320 	bic.w	r3, r3, #32
 8008326:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8008328:	f7fc fc7e 	bl	8004c28 <HAL_GetTick>
 800832c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800832e:	e009      	b.n	8008344 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008330:	f7fc fc7a 	bl	8004c28 <HAL_GetTick>
 8008334:	4602      	mov	r2, r0
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	1ad3      	subs	r3, r2, r3
 800833a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800833e:	d901      	bls.n	8008344 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8008340:	2303      	movs	r3, #3
 8008342:	e006      	b.n	8008352 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008344:	4b05      	ldr	r3, [pc, #20]	; (800835c <HAL_RTC_WaitForSynchro+0x48>)
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	f003 0320 	and.w	r3, r3, #32
 800834c:	2b00      	cmp	r3, #0
 800834e:	d0ef      	beq.n	8008330 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	40002800 	.word	0x40002800

08008360 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008368:	2300      	movs	r3, #0
 800836a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800836c:	4b15      	ldr	r3, [pc, #84]	; (80083c4 <RTC_EnterInitMode+0x64>)
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008374:	2b00      	cmp	r3, #0
 8008376:	d120      	bne.n	80083ba <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008378:	4b12      	ldr	r3, [pc, #72]	; (80083c4 <RTC_EnterInitMode+0x64>)
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	4a11      	ldr	r2, [pc, #68]	; (80083c4 <RTC_EnterInitMode+0x64>)
 800837e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008382:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8008384:	f7fc fc50 	bl	8004c28 <HAL_GetTick>
 8008388:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800838a:	e00d      	b.n	80083a8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800838c:	f7fc fc4c 	bl	8004c28 <HAL_GetTick>
 8008390:	4602      	mov	r2, r0
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	1ad3      	subs	r3, r2, r3
 8008396:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800839a:	d905      	bls.n	80083a8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800839c:	2303      	movs	r3, #3
 800839e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2203      	movs	r2, #3
 80083a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80083a8:	4b06      	ldr	r3, [pc, #24]	; (80083c4 <RTC_EnterInitMode+0x64>)
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d102      	bne.n	80083ba <RTC_EnterInitMode+0x5a>
 80083b4:	7bfb      	ldrb	r3, [r7, #15]
 80083b6:	2b03      	cmp	r3, #3
 80083b8:	d1e8      	bne.n	800838c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80083ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3710      	adds	r7, #16
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}
 80083c4:	40002800 	.word	0x40002800

080083c8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083d0:	2300      	movs	r3, #0
 80083d2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80083d4:	4b1a      	ldr	r3, [pc, #104]	; (8008440 <RTC_ExitInitMode+0x78>)
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	4a19      	ldr	r2, [pc, #100]	; (8008440 <RTC_ExitInitMode+0x78>)
 80083da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083de:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80083e0:	4b17      	ldr	r3, [pc, #92]	; (8008440 <RTC_ExitInitMode+0x78>)
 80083e2:	699b      	ldr	r3, [r3, #24]
 80083e4:	f003 0320 	and.w	r3, r3, #32
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d10c      	bne.n	8008406 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f7ff ff91 	bl	8008314 <HAL_RTC_WaitForSynchro>
 80083f2:	4603      	mov	r3, r0
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d01e      	beq.n	8008436 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2203      	movs	r2, #3
 80083fc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8008400:	2303      	movs	r3, #3
 8008402:	73fb      	strb	r3, [r7, #15]
 8008404:	e017      	b.n	8008436 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008406:	4b0e      	ldr	r3, [pc, #56]	; (8008440 <RTC_ExitInitMode+0x78>)
 8008408:	699b      	ldr	r3, [r3, #24]
 800840a:	4a0d      	ldr	r2, [pc, #52]	; (8008440 <RTC_ExitInitMode+0x78>)
 800840c:	f023 0320 	bic.w	r3, r3, #32
 8008410:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f7ff ff7e 	bl	8008314 <HAL_RTC_WaitForSynchro>
 8008418:	4603      	mov	r3, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	d005      	beq.n	800842a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2203      	movs	r2, #3
 8008422:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8008426:	2303      	movs	r3, #3
 8008428:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800842a:	4b05      	ldr	r3, [pc, #20]	; (8008440 <RTC_ExitInitMode+0x78>)
 800842c:	699b      	ldr	r3, [r3, #24]
 800842e:	4a04      	ldr	r2, [pc, #16]	; (8008440 <RTC_ExitInitMode+0x78>)
 8008430:	f043 0320 	orr.w	r3, r3, #32
 8008434:	6193      	str	r3, [r2, #24]
  }

  return status;
 8008436:	7bfb      	ldrb	r3, [r7, #15]
}
 8008438:	4618      	mov	r0, r3
 800843a:	3710      	adds	r7, #16
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}
 8008440:	40002800 	.word	0x40002800

08008444 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008444:	b480      	push	{r7}
 8008446:	b085      	sub	sp, #20
 8008448:	af00      	add	r7, sp, #0
 800844a:	4603      	mov	r3, r0
 800844c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800844e:	2300      	movs	r3, #0
 8008450:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8008452:	79fb      	ldrb	r3, [r7, #7]
 8008454:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8008456:	e005      	b.n	8008464 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	3301      	adds	r3, #1
 800845c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800845e:	7afb      	ldrb	r3, [r7, #11]
 8008460:	3b0a      	subs	r3, #10
 8008462:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8008464:	7afb      	ldrb	r3, [r7, #11]
 8008466:	2b09      	cmp	r3, #9
 8008468:	d8f6      	bhi.n	8008458 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	b2db      	uxtb	r3, r3
 800846e:	011b      	lsls	r3, r3, #4
 8008470:	b2da      	uxtb	r2, r3
 8008472:	7afb      	ldrb	r3, [r7, #11]
 8008474:	4313      	orrs	r3, r2
 8008476:	b2db      	uxtb	r3, r3
}
 8008478:	4618      	mov	r0, r3
 800847a:	3714      	adds	r7, #20
 800847c:	46bd      	mov	sp, r7
 800847e:	bc80      	pop	{r7}
 8008480:	4770      	bx	lr

08008482 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008482:	b480      	push	{r7}
 8008484:	b085      	sub	sp, #20
 8008486:	af00      	add	r7, sp, #0
 8008488:	4603      	mov	r3, r0
 800848a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 800848c:	79fb      	ldrb	r3, [r7, #7]
 800848e:	091b      	lsrs	r3, r3, #4
 8008490:	b2db      	uxtb	r3, r3
 8008492:	461a      	mov	r2, r3
 8008494:	4613      	mov	r3, r2
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	4413      	add	r3, r2
 800849a:	005b      	lsls	r3, r3, #1
 800849c:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	b2da      	uxtb	r2, r3
 80084a2:	79fb      	ldrb	r3, [r7, #7]
 80084a4:	f003 030f 	and.w	r3, r3, #15
 80084a8:	b2db      	uxtb	r3, r3
 80084aa:	4413      	add	r3, r2
 80084ac:	b2db      	uxtb	r3, r3
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3714      	adds	r7, #20
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bc80      	pop	{r7}
 80084b6:	4770      	bx	lr

080084b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d101      	bne.n	80084ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	e049      	b.n	800855e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d106      	bne.n	80084e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2200      	movs	r2, #0
 80084da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f7f9 fd24 	bl	8001f2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2202      	movs	r2, #2
 80084e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	3304      	adds	r3, #4
 80084f4:	4619      	mov	r1, r3
 80084f6:	4610      	mov	r0, r2
 80084f8:	f000 fabc 	bl	8008a74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2201      	movs	r2, #1
 8008500:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2201      	movs	r2, #1
 8008508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2201      	movs	r2, #1
 8008510:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2201      	movs	r2, #1
 8008518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2201      	movs	r2, #1
 8008520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2201      	movs	r2, #1
 8008528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2201      	movs	r2, #1
 8008530:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2201      	movs	r2, #1
 8008538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2201      	movs	r2, #1
 8008540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2201      	movs	r2, #1
 8008548:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2201      	movs	r2, #1
 8008550:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2201      	movs	r2, #1
 8008558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800855c:	2300      	movs	r3, #0
}
 800855e:	4618      	mov	r0, r3
 8008560:	3708      	adds	r7, #8
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
	...

08008568 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008568:	b480      	push	{r7}
 800856a:	b085      	sub	sp, #20
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008576:	b2db      	uxtb	r3, r3
 8008578:	2b01      	cmp	r3, #1
 800857a:	d001      	beq.n	8008580 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800857c:	2301      	movs	r3, #1
 800857e:	e036      	b.n	80085ee <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2202      	movs	r2, #2
 8008584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	68da      	ldr	r2, [r3, #12]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f042 0201 	orr.w	r2, r2, #1
 8008596:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a16      	ldr	r2, [pc, #88]	; (80085f8 <HAL_TIM_Base_Start_IT+0x90>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d004      	beq.n	80085ac <HAL_TIM_Base_Start_IT+0x44>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085aa:	d115      	bne.n	80085d8 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	689a      	ldr	r2, [r3, #8]
 80085b2:	4b12      	ldr	r3, [pc, #72]	; (80085fc <HAL_TIM_Base_Start_IT+0x94>)
 80085b4:	4013      	ands	r3, r2
 80085b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2b06      	cmp	r3, #6
 80085bc:	d015      	beq.n	80085ea <HAL_TIM_Base_Start_IT+0x82>
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085c4:	d011      	beq.n	80085ea <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f042 0201 	orr.w	r2, r2, #1
 80085d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085d6:	e008      	b.n	80085ea <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f042 0201 	orr.w	r2, r2, #1
 80085e6:	601a      	str	r2, [r3, #0]
 80085e8:	e000      	b.n	80085ec <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3714      	adds	r7, #20
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bc80      	pop	{r7}
 80085f6:	4770      	bx	lr
 80085f8:	40012c00 	.word	0x40012c00
 80085fc:	00010007 	.word	0x00010007

08008600 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008600:	b480      	push	{r7}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	68da      	ldr	r2, [r3, #12]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f022 0201 	bic.w	r2, r2, #1
 8008616:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	6a1a      	ldr	r2, [r3, #32]
 800861e:	f241 1311 	movw	r3, #4369	; 0x1111
 8008622:	4013      	ands	r3, r2
 8008624:	2b00      	cmp	r3, #0
 8008626:	d10f      	bne.n	8008648 <HAL_TIM_Base_Stop_IT+0x48>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	6a1a      	ldr	r2, [r3, #32]
 800862e:	f240 4344 	movw	r3, #1092	; 0x444
 8008632:	4013      	ands	r3, r2
 8008634:	2b00      	cmp	r3, #0
 8008636:	d107      	bne.n	8008648 <HAL_TIM_Base_Stop_IT+0x48>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f022 0201 	bic.w	r2, r2, #1
 8008646:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2201      	movs	r2, #1
 800864c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	370c      	adds	r7, #12
 8008656:	46bd      	mov	sp, r7
 8008658:	bc80      	pop	{r7}
 800865a:	4770      	bx	lr

0800865c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	f003 0302 	and.w	r3, r3, #2
 800866e:	2b02      	cmp	r3, #2
 8008670:	d122      	bne.n	80086b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	68db      	ldr	r3, [r3, #12]
 8008678:	f003 0302 	and.w	r3, r3, #2
 800867c:	2b02      	cmp	r3, #2
 800867e:	d11b      	bne.n	80086b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f06f 0202 	mvn.w	r2, #2
 8008688:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2201      	movs	r2, #1
 800868e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	699b      	ldr	r3, [r3, #24]
 8008696:	f003 0303 	and.w	r3, r3, #3
 800869a:	2b00      	cmp	r3, #0
 800869c:	d003      	beq.n	80086a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 f9cd 	bl	8008a3e <HAL_TIM_IC_CaptureCallback>
 80086a4:	e005      	b.n	80086b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 f9c0 	bl	8008a2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 f9cf 	bl	8008a50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2200      	movs	r2, #0
 80086b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	691b      	ldr	r3, [r3, #16]
 80086be:	f003 0304 	and.w	r3, r3, #4
 80086c2:	2b04      	cmp	r3, #4
 80086c4:	d122      	bne.n	800870c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	f003 0304 	and.w	r3, r3, #4
 80086d0:	2b04      	cmp	r3, #4
 80086d2:	d11b      	bne.n	800870c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f06f 0204 	mvn.w	r2, #4
 80086dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2202      	movs	r2, #2
 80086e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	699b      	ldr	r3, [r3, #24]
 80086ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d003      	beq.n	80086fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 f9a3 	bl	8008a3e <HAL_TIM_IC_CaptureCallback>
 80086f8:	e005      	b.n	8008706 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 f996 	bl	8008a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 f9a5 	bl	8008a50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2200      	movs	r2, #0
 800870a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	691b      	ldr	r3, [r3, #16]
 8008712:	f003 0308 	and.w	r3, r3, #8
 8008716:	2b08      	cmp	r3, #8
 8008718:	d122      	bne.n	8008760 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	f003 0308 	and.w	r3, r3, #8
 8008724:	2b08      	cmp	r3, #8
 8008726:	d11b      	bne.n	8008760 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f06f 0208 	mvn.w	r2, #8
 8008730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2204      	movs	r2, #4
 8008736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	69db      	ldr	r3, [r3, #28]
 800873e:	f003 0303 	and.w	r3, r3, #3
 8008742:	2b00      	cmp	r3, #0
 8008744:	d003      	beq.n	800874e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 f979 	bl	8008a3e <HAL_TIM_IC_CaptureCallback>
 800874c:	e005      	b.n	800875a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 f96c 	bl	8008a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 f97b 	bl	8008a50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	691b      	ldr	r3, [r3, #16]
 8008766:	f003 0310 	and.w	r3, r3, #16
 800876a:	2b10      	cmp	r3, #16
 800876c:	d122      	bne.n	80087b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	f003 0310 	and.w	r3, r3, #16
 8008778:	2b10      	cmp	r3, #16
 800877a:	d11b      	bne.n	80087b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f06f 0210 	mvn.w	r2, #16
 8008784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2208      	movs	r2, #8
 800878a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	69db      	ldr	r3, [r3, #28]
 8008792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008796:	2b00      	cmp	r3, #0
 8008798:	d003      	beq.n	80087a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 f94f 	bl	8008a3e <HAL_TIM_IC_CaptureCallback>
 80087a0:	e005      	b.n	80087ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 f942 	bl	8008a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 f951 	bl	8008a50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	691b      	ldr	r3, [r3, #16]
 80087ba:	f003 0301 	and.w	r3, r3, #1
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d10e      	bne.n	80087e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	f003 0301 	and.w	r3, r3, #1
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d107      	bne.n	80087e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f06f 0201 	mvn.w	r2, #1
 80087d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f001 fbb0 	bl	8009f40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	691b      	ldr	r3, [r3, #16]
 80087e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087ea:	2b80      	cmp	r3, #128	; 0x80
 80087ec:	d10e      	bne.n	800880c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	68db      	ldr	r3, [r3, #12]
 80087f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087f8:	2b80      	cmp	r3, #128	; 0x80
 80087fa:	d107      	bne.n	800880c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 fa95 	bl	8008d36 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	691b      	ldr	r3, [r3, #16]
 8008812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008816:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800881a:	d10e      	bne.n	800883a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	68db      	ldr	r3, [r3, #12]
 8008822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008826:	2b80      	cmp	r3, #128	; 0x80
 8008828:	d107      	bne.n	800883a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008832:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f000 fa87 	bl	8008d48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	691b      	ldr	r3, [r3, #16]
 8008840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008844:	2b40      	cmp	r3, #64	; 0x40
 8008846:	d10e      	bne.n	8008866 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	68db      	ldr	r3, [r3, #12]
 800884e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008852:	2b40      	cmp	r3, #64	; 0x40
 8008854:	d107      	bne.n	8008866 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800885e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 f8fe 	bl	8008a62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	691b      	ldr	r3, [r3, #16]
 800886c:	f003 0320 	and.w	r3, r3, #32
 8008870:	2b20      	cmp	r3, #32
 8008872:	d10e      	bne.n	8008892 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	f003 0320 	and.w	r3, r3, #32
 800887e:	2b20      	cmp	r3, #32
 8008880:	d107      	bne.n	8008892 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f06f 0220 	mvn.w	r2, #32
 800888a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 fa49 	bl	8008d24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008892:	bf00      	nop
 8008894:	3708      	adds	r7, #8
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}

0800889a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800889a:	b580      	push	{r7, lr}
 800889c:	b084      	sub	sp, #16
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
 80088a2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80088a4:	2300      	movs	r3, #0
 80088a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	d101      	bne.n	80088b6 <HAL_TIM_ConfigClockSource+0x1c>
 80088b2:	2302      	movs	r3, #2
 80088b4:	e0b6      	b.n	8008a24 <HAL_TIM_ConfigClockSource+0x18a>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2201      	movs	r2, #1
 80088ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2202      	movs	r2, #2
 80088c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80088d4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80088d8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80088e0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	68ba      	ldr	r2, [r7, #8]
 80088e8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088f2:	d03e      	beq.n	8008972 <HAL_TIM_ConfigClockSource+0xd8>
 80088f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088f8:	f200 8087 	bhi.w	8008a0a <HAL_TIM_ConfigClockSource+0x170>
 80088fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008900:	f000 8086 	beq.w	8008a10 <HAL_TIM_ConfigClockSource+0x176>
 8008904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008908:	d87f      	bhi.n	8008a0a <HAL_TIM_ConfigClockSource+0x170>
 800890a:	2b70      	cmp	r3, #112	; 0x70
 800890c:	d01a      	beq.n	8008944 <HAL_TIM_ConfigClockSource+0xaa>
 800890e:	2b70      	cmp	r3, #112	; 0x70
 8008910:	d87b      	bhi.n	8008a0a <HAL_TIM_ConfigClockSource+0x170>
 8008912:	2b60      	cmp	r3, #96	; 0x60
 8008914:	d050      	beq.n	80089b8 <HAL_TIM_ConfigClockSource+0x11e>
 8008916:	2b60      	cmp	r3, #96	; 0x60
 8008918:	d877      	bhi.n	8008a0a <HAL_TIM_ConfigClockSource+0x170>
 800891a:	2b50      	cmp	r3, #80	; 0x50
 800891c:	d03c      	beq.n	8008998 <HAL_TIM_ConfigClockSource+0xfe>
 800891e:	2b50      	cmp	r3, #80	; 0x50
 8008920:	d873      	bhi.n	8008a0a <HAL_TIM_ConfigClockSource+0x170>
 8008922:	2b40      	cmp	r3, #64	; 0x40
 8008924:	d058      	beq.n	80089d8 <HAL_TIM_ConfigClockSource+0x13e>
 8008926:	2b40      	cmp	r3, #64	; 0x40
 8008928:	d86f      	bhi.n	8008a0a <HAL_TIM_ConfigClockSource+0x170>
 800892a:	2b30      	cmp	r3, #48	; 0x30
 800892c:	d064      	beq.n	80089f8 <HAL_TIM_ConfigClockSource+0x15e>
 800892e:	2b30      	cmp	r3, #48	; 0x30
 8008930:	d86b      	bhi.n	8008a0a <HAL_TIM_ConfigClockSource+0x170>
 8008932:	2b20      	cmp	r3, #32
 8008934:	d060      	beq.n	80089f8 <HAL_TIM_ConfigClockSource+0x15e>
 8008936:	2b20      	cmp	r3, #32
 8008938:	d867      	bhi.n	8008a0a <HAL_TIM_ConfigClockSource+0x170>
 800893a:	2b00      	cmp	r3, #0
 800893c:	d05c      	beq.n	80089f8 <HAL_TIM_ConfigClockSource+0x15e>
 800893e:	2b10      	cmp	r3, #16
 8008940:	d05a      	beq.n	80089f8 <HAL_TIM_ConfigClockSource+0x15e>
 8008942:	e062      	b.n	8008a0a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6818      	ldr	r0, [r3, #0]
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	6899      	ldr	r1, [r3, #8]
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	685a      	ldr	r2, [r3, #4]
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	68db      	ldr	r3, [r3, #12]
 8008954:	f000 f969 	bl	8008c2a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008966:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	68ba      	ldr	r2, [r7, #8]
 800896e:	609a      	str	r2, [r3, #8]
      break;
 8008970:	e04f      	b.n	8008a12 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6818      	ldr	r0, [r3, #0]
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	6899      	ldr	r1, [r3, #8]
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	685a      	ldr	r2, [r3, #4]
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	68db      	ldr	r3, [r3, #12]
 8008982:	f000 f952 	bl	8008c2a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	689a      	ldr	r2, [r3, #8]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008994:	609a      	str	r2, [r3, #8]
      break;
 8008996:	e03c      	b.n	8008a12 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6818      	ldr	r0, [r3, #0]
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	6859      	ldr	r1, [r3, #4]
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	461a      	mov	r2, r3
 80089a6:	f000 f8c7 	bl	8008b38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	2150      	movs	r1, #80	; 0x50
 80089b0:	4618      	mov	r0, r3
 80089b2:	f000 f91e 	bl	8008bf2 <TIM_ITRx_SetConfig>
      break;
 80089b6:	e02c      	b.n	8008a12 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6818      	ldr	r0, [r3, #0]
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	6859      	ldr	r1, [r3, #4]
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	461a      	mov	r2, r3
 80089c6:	f000 f8e5 	bl	8008b94 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2160      	movs	r1, #96	; 0x60
 80089d0:	4618      	mov	r0, r3
 80089d2:	f000 f90e 	bl	8008bf2 <TIM_ITRx_SetConfig>
      break;
 80089d6:	e01c      	b.n	8008a12 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6818      	ldr	r0, [r3, #0]
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	6859      	ldr	r1, [r3, #4]
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	461a      	mov	r2, r3
 80089e6:	f000 f8a7 	bl	8008b38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	2140      	movs	r1, #64	; 0x40
 80089f0:	4618      	mov	r0, r3
 80089f2:	f000 f8fe 	bl	8008bf2 <TIM_ITRx_SetConfig>
      break;
 80089f6:	e00c      	b.n	8008a12 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4619      	mov	r1, r3
 8008a02:	4610      	mov	r0, r2
 8008a04:	f000 f8f5 	bl	8008bf2 <TIM_ITRx_SetConfig>
      break;
 8008a08:	e003      	b.n	8008a12 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	73fb      	strb	r3, [r7, #15]
      break;
 8008a0e:	e000      	b.n	8008a12 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008a10:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2201      	movs	r2, #1
 8008a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3710      	adds	r7, #16
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008a34:	bf00      	nop
 8008a36:	370c      	adds	r7, #12
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bc80      	pop	{r7}
 8008a3c:	4770      	bx	lr

08008a3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008a3e:	b480      	push	{r7}
 8008a40:	b083      	sub	sp, #12
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008a46:	bf00      	nop
 8008a48:	370c      	adds	r7, #12
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bc80      	pop	{r7}
 8008a4e:	4770      	bx	lr

08008a50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b083      	sub	sp, #12
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008a58:	bf00      	nop
 8008a5a:	370c      	adds	r7, #12
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bc80      	pop	{r7}
 8008a60:	4770      	bx	lr

08008a62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008a62:	b480      	push	{r7}
 8008a64:	b083      	sub	sp, #12
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008a6a:	bf00      	nop
 8008a6c:	370c      	adds	r7, #12
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bc80      	pop	{r7}
 8008a72:	4770      	bx	lr

08008a74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b085      	sub	sp, #20
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	4a29      	ldr	r2, [pc, #164]	; (8008b2c <TIM_Base_SetConfig+0xb8>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d003      	beq.n	8008a94 <TIM_Base_SetConfig+0x20>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a92:	d108      	bne.n	8008aa6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	68fa      	ldr	r2, [r7, #12]
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	4a20      	ldr	r2, [pc, #128]	; (8008b2c <TIM_Base_SetConfig+0xb8>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d00b      	beq.n	8008ac6 <TIM_Base_SetConfig+0x52>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ab4:	d007      	beq.n	8008ac6 <TIM_Base_SetConfig+0x52>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	4a1d      	ldr	r2, [pc, #116]	; (8008b30 <TIM_Base_SetConfig+0xbc>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d003      	beq.n	8008ac6 <TIM_Base_SetConfig+0x52>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	4a1c      	ldr	r2, [pc, #112]	; (8008b34 <TIM_Base_SetConfig+0xc0>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d108      	bne.n	8008ad8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008acc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	68db      	ldr	r3, [r3, #12]
 8008ad2:	68fa      	ldr	r2, [r7, #12]
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	695b      	ldr	r3, [r3, #20]
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	68fa      	ldr	r2, [r7, #12]
 8008aea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	689a      	ldr	r2, [r3, #8]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	4a0b      	ldr	r2, [pc, #44]	; (8008b2c <TIM_Base_SetConfig+0xb8>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d007      	beq.n	8008b14 <TIM_Base_SetConfig+0xa0>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	4a0a      	ldr	r2, [pc, #40]	; (8008b30 <TIM_Base_SetConfig+0xbc>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d003      	beq.n	8008b14 <TIM_Base_SetConfig+0xa0>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	4a09      	ldr	r2, [pc, #36]	; (8008b34 <TIM_Base_SetConfig+0xc0>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d103      	bne.n	8008b1c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	691a      	ldr	r2, [r3, #16]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	615a      	str	r2, [r3, #20]
}
 8008b22:	bf00      	nop
 8008b24:	3714      	adds	r7, #20
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bc80      	pop	{r7}
 8008b2a:	4770      	bx	lr
 8008b2c:	40012c00 	.word	0x40012c00
 8008b30:	40014400 	.word	0x40014400
 8008b34:	40014800 	.word	0x40014800

08008b38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b087      	sub	sp, #28
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	60b9      	str	r1, [r7, #8]
 8008b42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6a1b      	ldr	r3, [r3, #32]
 8008b48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	6a1b      	ldr	r3, [r3, #32]
 8008b4e:	f023 0201 	bic.w	r2, r3, #1
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	699b      	ldr	r3, [r3, #24]
 8008b5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	011b      	lsls	r3, r3, #4
 8008b68:	693a      	ldr	r2, [r7, #16]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	f023 030a 	bic.w	r3, r3, #10
 8008b74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008b76:	697a      	ldr	r2, [r7, #20]
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	693a      	ldr	r2, [r7, #16]
 8008b82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	697a      	ldr	r2, [r7, #20]
 8008b88:	621a      	str	r2, [r3, #32]
}
 8008b8a:	bf00      	nop
 8008b8c:	371c      	adds	r7, #28
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bc80      	pop	{r7}
 8008b92:	4770      	bx	lr

08008b94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b087      	sub	sp, #28
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	6a1b      	ldr	r3, [r3, #32]
 8008ba4:	f023 0210 	bic.w	r2, r3, #16
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	699b      	ldr	r3, [r3, #24]
 8008bb0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	6a1b      	ldr	r3, [r3, #32]
 8008bb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008bbe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	031b      	lsls	r3, r3, #12
 8008bc4:	697a      	ldr	r2, [r7, #20]
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008bd0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	011b      	lsls	r3, r3, #4
 8008bd6:	693a      	ldr	r2, [r7, #16]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	697a      	ldr	r2, [r7, #20]
 8008be0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	693a      	ldr	r2, [r7, #16]
 8008be6:	621a      	str	r2, [r3, #32]
}
 8008be8:	bf00      	nop
 8008bea:	371c      	adds	r7, #28
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bc80      	pop	{r7}
 8008bf0:	4770      	bx	lr

08008bf2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008bf2:	b480      	push	{r7}
 8008bf4:	b085      	sub	sp, #20
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
 8008bfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	689b      	ldr	r3, [r3, #8]
 8008c00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c0e:	683a      	ldr	r2, [r7, #0]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	f043 0307 	orr.w	r3, r3, #7
 8008c18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	68fa      	ldr	r2, [r7, #12]
 8008c1e:	609a      	str	r2, [r3, #8]
}
 8008c20:	bf00      	nop
 8008c22:	3714      	adds	r7, #20
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bc80      	pop	{r7}
 8008c28:	4770      	bx	lr

08008c2a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008c2a:	b480      	push	{r7}
 8008c2c:	b087      	sub	sp, #28
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	60f8      	str	r0, [r7, #12]
 8008c32:	60b9      	str	r1, [r7, #8]
 8008c34:	607a      	str	r2, [r7, #4]
 8008c36:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	689b      	ldr	r3, [r3, #8]
 8008c3c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c44:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	021a      	lsls	r2, r3, #8
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	431a      	orrs	r2, r3
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	4313      	orrs	r3, r2
 8008c52:	697a      	ldr	r2, [r7, #20]
 8008c54:	4313      	orrs	r3, r2
 8008c56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	697a      	ldr	r2, [r7, #20]
 8008c5c:	609a      	str	r2, [r3, #8]
}
 8008c5e:	bf00      	nop
 8008c60:	371c      	adds	r7, #28
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bc80      	pop	{r7}
 8008c66:	4770      	bx	lr

08008c68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b085      	sub	sp, #20
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d101      	bne.n	8008c80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c7c:	2302      	movs	r3, #2
 8008c7e:	e04a      	b.n	8008d16 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2201      	movs	r2, #1
 8008c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2202      	movs	r2, #2
 8008c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	689b      	ldr	r3, [r3, #8]
 8008c9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a1e      	ldr	r2, [pc, #120]	; (8008d20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d108      	bne.n	8008cbc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008cb0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	68fa      	ldr	r2, [r7, #12]
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	68fa      	ldr	r2, [r7, #12]
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	68fa      	ldr	r2, [r7, #12]
 8008cd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a11      	ldr	r2, [pc, #68]	; (8008d20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d004      	beq.n	8008cea <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ce8:	d10c      	bne.n	8008d04 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008cf0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	68ba      	ldr	r2, [r7, #8]
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	68ba      	ldr	r2, [r7, #8]
 8008d02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d14:	2300      	movs	r3, #0
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3714      	adds	r7, #20
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bc80      	pop	{r7}
 8008d1e:	4770      	bx	lr
 8008d20:	40012c00 	.word	0x40012c00

08008d24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d2c:	bf00      	nop
 8008d2e:	370c      	adds	r7, #12
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bc80      	pop	{r7}
 8008d34:	4770      	bx	lr

08008d36 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d36:	b480      	push	{r7}
 8008d38:	b083      	sub	sp, #12
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d3e:	bf00      	nop
 8008d40:	370c      	adds	r7, #12
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bc80      	pop	{r7}
 8008d46:	4770      	bx	lr

08008d48 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008d50:	bf00      	nop
 8008d52:	370c      	adds	r7, #12
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bc80      	pop	{r7}
 8008d58:	4770      	bx	lr

08008d5a <LL_RCC_GetUSARTClockSource>:
{
 8008d5a:	b480      	push	{r7}
 8008d5c:	b083      	sub	sp, #12
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8008d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d66:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	401a      	ands	r2, r3
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	041b      	lsls	r3, r3, #16
 8008d72:	4313      	orrs	r3, r2
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	370c      	adds	r7, #12
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bc80      	pop	{r7}
 8008d7c:	4770      	bx	lr

08008d7e <LL_RCC_GetLPUARTClockSource>:
{
 8008d7e:	b480      	push	{r7}
 8008d80:	b083      	sub	sp, #12
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8008d86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d8a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	4013      	ands	r3, r2
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	370c      	adds	r7, #12
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bc80      	pop	{r7}
 8008d9a:	4770      	bx	lr

08008d9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b082      	sub	sp, #8
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d101      	bne.n	8008dae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
 8008dac:	e042      	b.n	8008e34 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d106      	bne.n	8008dc6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f7f9 f841 	bl	8001e48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2224      	movs	r2, #36	; 0x24
 8008dca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f022 0201 	bic.w	r2, r2, #1
 8008ddc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 f93e 	bl	8009060 <UART_SetConfig>
 8008de4:	4603      	mov	r3, r0
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d101      	bne.n	8008dee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	e022      	b.n	8008e34 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d002      	beq.n	8008dfc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 fba6 	bl	8009548 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	685a      	ldr	r2, [r3, #4]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	689a      	ldr	r2, [r3, #8]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f042 0201 	orr.w	r2, r2, #1
 8008e2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 fc2c 	bl	800968a <UART_CheckIdleState>
 8008e32:	4603      	mov	r3, r0
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3708      	adds	r7, #8
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b08a      	sub	sp, #40	; 0x28
 8008e40:	af02      	add	r7, sp, #8
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	60b9      	str	r1, [r7, #8]
 8008e46:	603b      	str	r3, [r7, #0]
 8008e48:	4613      	mov	r3, r2
 8008e4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e52:	2b20      	cmp	r3, #32
 8008e54:	f040 8083 	bne.w	8008f5e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d002      	beq.n	8008e64 <HAL_UART_Transmit+0x28>
 8008e5e:	88fb      	ldrh	r3, [r7, #6]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d101      	bne.n	8008e68 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008e64:	2301      	movs	r3, #1
 8008e66:	e07b      	b.n	8008f60 <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008e6e:	2b01      	cmp	r3, #1
 8008e70:	d101      	bne.n	8008e76 <HAL_UART_Transmit+0x3a>
 8008e72:	2302      	movs	r3, #2
 8008e74:	e074      	b.n	8008f60 <HAL_UART_Transmit+0x124>
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2201      	movs	r2, #1
 8008e7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2200      	movs	r2, #0
 8008e82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2221      	movs	r2, #33	; 0x21
 8008e8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008e8e:	f7fb fecb 	bl	8004c28 <HAL_GetTick>
 8008e92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	88fa      	ldrh	r2, [r7, #6]
 8008e98:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	88fa      	ldrh	r2, [r7, #6]
 8008ea0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008eac:	d108      	bne.n	8008ec0 <HAL_UART_Transmit+0x84>
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	691b      	ldr	r3, [r3, #16]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d104      	bne.n	8008ec0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	61bb      	str	r3, [r7, #24]
 8008ebe:	e003      	b.n	8008ec8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8008ed0:	e02c      	b.n	8008f2c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	9300      	str	r3, [sp, #0]
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	2180      	movs	r1, #128	; 0x80
 8008edc:	68f8      	ldr	r0, [r7, #12]
 8008ede:	f000 fc1f 	bl	8009720 <UART_WaitOnFlagUntilTimeout>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d001      	beq.n	8008eec <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008ee8:	2303      	movs	r3, #3
 8008eea:	e039      	b.n	8008f60 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008eec:	69fb      	ldr	r3, [r7, #28]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d10b      	bne.n	8008f0a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	881b      	ldrh	r3, [r3, #0]
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f00:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008f02:	69bb      	ldr	r3, [r7, #24]
 8008f04:	3302      	adds	r3, #2
 8008f06:	61bb      	str	r3, [r7, #24]
 8008f08:	e007      	b.n	8008f1a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008f0a:	69fb      	ldr	r3, [r7, #28]
 8008f0c:	781a      	ldrb	r2, [r3, #0]
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008f14:	69fb      	ldr	r3, [r7, #28]
 8008f16:	3301      	adds	r3, #1
 8008f18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	3b01      	subs	r3, #1
 8008f24:	b29a      	uxth	r2, r3
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d1cc      	bne.n	8008ed2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	9300      	str	r3, [sp, #0]
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	2140      	movs	r1, #64	; 0x40
 8008f42:	68f8      	ldr	r0, [r7, #12]
 8008f44:	f000 fbec 	bl	8009720 <UART_WaitOnFlagUntilTimeout>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d001      	beq.n	8008f52 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008f4e:	2303      	movs	r3, #3
 8008f50:	e006      	b.n	8008f60 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2220      	movs	r2, #32
 8008f56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	e000      	b.n	8008f60 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008f5e:	2302      	movs	r3, #2
  }
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3720      	adds	r7, #32
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b08a      	sub	sp, #40	; 0x28
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	60b9      	str	r1, [r7, #8]
 8008f72:	4613      	mov	r3, r2
 8008f74:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f7c:	2b20      	cmp	r3, #32
 8008f7e:	d142      	bne.n	8009006 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d002      	beq.n	8008f8c <HAL_UART_Receive_DMA+0x24>
 8008f86:	88fb      	ldrh	r3, [r7, #6]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d101      	bne.n	8008f90 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	e03b      	b.n	8009008 <HAL_UART_Receive_DMA+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d101      	bne.n	8008f9e <HAL_UART_Receive_DMA+0x36>
 8008f9a:	2302      	movs	r3, #2
 8008f9c:	e034      	b.n	8009008 <HAL_UART_Receive_DMA+0xa0>
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a17      	ldr	r2, [pc, #92]	; (8009010 <HAL_UART_Receive_DMA+0xa8>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d01f      	beq.n	8008ff6 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d018      	beq.n	8008ff6 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	e853 3f00 	ldrex	r3, [r3]
 8008fd0:	613b      	str	r3, [r7, #16]
   return(result);
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	461a      	mov	r2, r3
 8008fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe2:	623b      	str	r3, [r7, #32]
 8008fe4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe6:	69f9      	ldr	r1, [r7, #28]
 8008fe8:	6a3a      	ldr	r2, [r7, #32]
 8008fea:	e841 2300 	strex	r3, r2, [r1]
 8008fee:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d1e6      	bne.n	8008fc4 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8008ff6:	88fb      	ldrh	r3, [r7, #6]
 8008ff8:	461a      	mov	r2, r3
 8008ffa:	68b9      	ldr	r1, [r7, #8]
 8008ffc:	68f8      	ldr	r0, [r7, #12]
 8008ffe:	f000 fc57 	bl	80098b0 <UART_Start_Receive_DMA>
 8009002:	4603      	mov	r3, r0
 8009004:	e000      	b.n	8009008 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009006:	2302      	movs	r3, #2
  }
}
 8009008:	4618      	mov	r0, r3
 800900a:	3728      	adds	r7, #40	; 0x28
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}
 8009010:	40008000 	.word	0x40008000

08009014 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800901c:	bf00      	nop
 800901e:	370c      	adds	r7, #12
 8009020:	46bd      	mov	sp, r7
 8009022:	bc80      	pop	{r7}
 8009024:	4770      	bx	lr

08009026 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009026:	b480      	push	{r7}
 8009028:	b083      	sub	sp, #12
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800902e:	bf00      	nop
 8009030:	370c      	adds	r7, #12
 8009032:	46bd      	mov	sp, r7
 8009034:	bc80      	pop	{r7}
 8009036:	4770      	bx	lr

08009038 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009038:	b480      	push	{r7}
 800903a:	b083      	sub	sp, #12
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009040:	bf00      	nop
 8009042:	370c      	adds	r7, #12
 8009044:	46bd      	mov	sp, r7
 8009046:	bc80      	pop	{r7}
 8009048:	4770      	bx	lr

0800904a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800904a:	b480      	push	{r7}
 800904c:	b083      	sub	sp, #12
 800904e:	af00      	add	r7, sp, #0
 8009050:	6078      	str	r0, [r7, #4]
 8009052:	460b      	mov	r3, r1
 8009054:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009056:	bf00      	nop
 8009058:	370c      	adds	r7, #12
 800905a:	46bd      	mov	sp, r7
 800905c:	bc80      	pop	{r7}
 800905e:	4770      	bx	lr

08009060 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009064:	b08c      	sub	sp, #48	; 0x30
 8009066:	af00      	add	r7, sp, #0
 8009068:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800906a:	2300      	movs	r3, #0
 800906c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	689a      	ldr	r2, [r3, #8]
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	691b      	ldr	r3, [r3, #16]
 8009078:	431a      	orrs	r2, r3
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	695b      	ldr	r3, [r3, #20]
 800907e:	431a      	orrs	r2, r3
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	69db      	ldr	r3, [r3, #28]
 8009084:	4313      	orrs	r3, r2
 8009086:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	4b94      	ldr	r3, [pc, #592]	; (80092e0 <UART_SetConfig+0x280>)
 8009090:	4013      	ands	r3, r2
 8009092:	697a      	ldr	r2, [r7, #20]
 8009094:	6812      	ldr	r2, [r2, #0]
 8009096:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009098:	430b      	orrs	r3, r1
 800909a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	68da      	ldr	r2, [r3, #12]
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	430a      	orrs	r2, r1
 80090b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	699b      	ldr	r3, [r3, #24]
 80090b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a89      	ldr	r2, [pc, #548]	; (80092e4 <UART_SetConfig+0x284>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d004      	beq.n	80090cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	6a1b      	ldr	r3, [r3, #32]
 80090c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090c8:	4313      	orrs	r3, r2
 80090ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80090d6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80090da:	697a      	ldr	r2, [r7, #20]
 80090dc:	6812      	ldr	r2, [r2, #0]
 80090de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80090e0:	430b      	orrs	r3, r1
 80090e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ea:	f023 010f 	bic.w	r1, r3, #15
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	430a      	orrs	r2, r1
 80090f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a7a      	ldr	r2, [pc, #488]	; (80092e8 <UART_SetConfig+0x288>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d127      	bne.n	8009154 <UART_SetConfig+0xf4>
 8009104:	2003      	movs	r0, #3
 8009106:	f7ff fe28 	bl	8008d5a <LL_RCC_GetUSARTClockSource>
 800910a:	4603      	mov	r3, r0
 800910c:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8009110:	2b03      	cmp	r3, #3
 8009112:	d81b      	bhi.n	800914c <UART_SetConfig+0xec>
 8009114:	a201      	add	r2, pc, #4	; (adr r2, 800911c <UART_SetConfig+0xbc>)
 8009116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800911a:	bf00      	nop
 800911c:	0800912d 	.word	0x0800912d
 8009120:	0800913d 	.word	0x0800913d
 8009124:	08009135 	.word	0x08009135
 8009128:	08009145 	.word	0x08009145
 800912c:	2301      	movs	r3, #1
 800912e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009132:	e080      	b.n	8009236 <UART_SetConfig+0x1d6>
 8009134:	2302      	movs	r3, #2
 8009136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800913a:	e07c      	b.n	8009236 <UART_SetConfig+0x1d6>
 800913c:	2304      	movs	r3, #4
 800913e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009142:	e078      	b.n	8009236 <UART_SetConfig+0x1d6>
 8009144:	2308      	movs	r3, #8
 8009146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800914a:	e074      	b.n	8009236 <UART_SetConfig+0x1d6>
 800914c:	2310      	movs	r3, #16
 800914e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009152:	e070      	b.n	8009236 <UART_SetConfig+0x1d6>
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a64      	ldr	r2, [pc, #400]	; (80092ec <UART_SetConfig+0x28c>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d138      	bne.n	80091d0 <UART_SetConfig+0x170>
 800915e:	200c      	movs	r0, #12
 8009160:	f7ff fdfb 	bl	8008d5a <LL_RCC_GetUSARTClockSource>
 8009164:	4603      	mov	r3, r0
 8009166:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800916a:	2b0c      	cmp	r3, #12
 800916c:	d82c      	bhi.n	80091c8 <UART_SetConfig+0x168>
 800916e:	a201      	add	r2, pc, #4	; (adr r2, 8009174 <UART_SetConfig+0x114>)
 8009170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009174:	080091a9 	.word	0x080091a9
 8009178:	080091c9 	.word	0x080091c9
 800917c:	080091c9 	.word	0x080091c9
 8009180:	080091c9 	.word	0x080091c9
 8009184:	080091b9 	.word	0x080091b9
 8009188:	080091c9 	.word	0x080091c9
 800918c:	080091c9 	.word	0x080091c9
 8009190:	080091c9 	.word	0x080091c9
 8009194:	080091b1 	.word	0x080091b1
 8009198:	080091c9 	.word	0x080091c9
 800919c:	080091c9 	.word	0x080091c9
 80091a0:	080091c9 	.word	0x080091c9
 80091a4:	080091c1 	.word	0x080091c1
 80091a8:	2300      	movs	r3, #0
 80091aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80091ae:	e042      	b.n	8009236 <UART_SetConfig+0x1d6>
 80091b0:	2302      	movs	r3, #2
 80091b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80091b6:	e03e      	b.n	8009236 <UART_SetConfig+0x1d6>
 80091b8:	2304      	movs	r3, #4
 80091ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80091be:	e03a      	b.n	8009236 <UART_SetConfig+0x1d6>
 80091c0:	2308      	movs	r3, #8
 80091c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80091c6:	e036      	b.n	8009236 <UART_SetConfig+0x1d6>
 80091c8:	2310      	movs	r3, #16
 80091ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80091ce:	e032      	b.n	8009236 <UART_SetConfig+0x1d6>
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a43      	ldr	r2, [pc, #268]	; (80092e4 <UART_SetConfig+0x284>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d12a      	bne.n	8009230 <UART_SetConfig+0x1d0>
 80091da:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80091de:	f7ff fdce 	bl	8008d7e <LL_RCC_GetLPUARTClockSource>
 80091e2:	4603      	mov	r3, r0
 80091e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80091e8:	d01a      	beq.n	8009220 <UART_SetConfig+0x1c0>
 80091ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80091ee:	d81b      	bhi.n	8009228 <UART_SetConfig+0x1c8>
 80091f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091f4:	d00c      	beq.n	8009210 <UART_SetConfig+0x1b0>
 80091f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091fa:	d815      	bhi.n	8009228 <UART_SetConfig+0x1c8>
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d003      	beq.n	8009208 <UART_SetConfig+0x1a8>
 8009200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009204:	d008      	beq.n	8009218 <UART_SetConfig+0x1b8>
 8009206:	e00f      	b.n	8009228 <UART_SetConfig+0x1c8>
 8009208:	2300      	movs	r3, #0
 800920a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800920e:	e012      	b.n	8009236 <UART_SetConfig+0x1d6>
 8009210:	2302      	movs	r3, #2
 8009212:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009216:	e00e      	b.n	8009236 <UART_SetConfig+0x1d6>
 8009218:	2304      	movs	r3, #4
 800921a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800921e:	e00a      	b.n	8009236 <UART_SetConfig+0x1d6>
 8009220:	2308      	movs	r3, #8
 8009222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009226:	e006      	b.n	8009236 <UART_SetConfig+0x1d6>
 8009228:	2310      	movs	r3, #16
 800922a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800922e:	e002      	b.n	8009236 <UART_SetConfig+0x1d6>
 8009230:	2310      	movs	r3, #16
 8009232:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a2a      	ldr	r2, [pc, #168]	; (80092e4 <UART_SetConfig+0x284>)
 800923c:	4293      	cmp	r3, r2
 800923e:	f040 80a4 	bne.w	800938a <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009242:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009246:	2b08      	cmp	r3, #8
 8009248:	d823      	bhi.n	8009292 <UART_SetConfig+0x232>
 800924a:	a201      	add	r2, pc, #4	; (adr r2, 8009250 <UART_SetConfig+0x1f0>)
 800924c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009250:	08009275 	.word	0x08009275
 8009254:	08009293 	.word	0x08009293
 8009258:	0800927d 	.word	0x0800927d
 800925c:	08009293 	.word	0x08009293
 8009260:	08009283 	.word	0x08009283
 8009264:	08009293 	.word	0x08009293
 8009268:	08009293 	.word	0x08009293
 800926c:	08009293 	.word	0x08009293
 8009270:	0800928b 	.word	0x0800928b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009274:	f7fe fb1e 	bl	80078b4 <HAL_RCC_GetPCLK1Freq>
 8009278:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800927a:	e010      	b.n	800929e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800927c:	4b1c      	ldr	r3, [pc, #112]	; (80092f0 <UART_SetConfig+0x290>)
 800927e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009280:	e00d      	b.n	800929e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009282:	f7fe fa63 	bl	800774c <HAL_RCC_GetSysClockFreq>
 8009286:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009288:	e009      	b.n	800929e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800928a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800928e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009290:	e005      	b.n	800929e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8009292:	2300      	movs	r3, #0
 8009294:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009296:	2301      	movs	r3, #1
 8009298:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800929c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800929e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	f000 8137 	beq.w	8009514 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092aa:	4a12      	ldr	r2, [pc, #72]	; (80092f4 <UART_SetConfig+0x294>)
 80092ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092b0:	461a      	mov	r2, r3
 80092b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80092b8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	685a      	ldr	r2, [r3, #4]
 80092be:	4613      	mov	r3, r2
 80092c0:	005b      	lsls	r3, r3, #1
 80092c2:	4413      	add	r3, r2
 80092c4:	69ba      	ldr	r2, [r7, #24]
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d305      	bcc.n	80092d6 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80092d0:	69ba      	ldr	r2, [r7, #24]
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d910      	bls.n	80092f8 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80092d6:	2301      	movs	r3, #1
 80092d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80092dc:	e11a      	b.n	8009514 <UART_SetConfig+0x4b4>
 80092de:	bf00      	nop
 80092e0:	cfff69f3 	.word	0xcfff69f3
 80092e4:	40008000 	.word	0x40008000
 80092e8:	40013800 	.word	0x40013800
 80092ec:	40004400 	.word	0x40004400
 80092f0:	00f42400 	.word	0x00f42400
 80092f4:	0801a678 	.word	0x0801a678
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fa:	2200      	movs	r2, #0
 80092fc:	60bb      	str	r3, [r7, #8]
 80092fe:	60fa      	str	r2, [r7, #12]
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009304:	4a8e      	ldr	r2, [pc, #568]	; (8009540 <UART_SetConfig+0x4e0>)
 8009306:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800930a:	b29b      	uxth	r3, r3
 800930c:	2200      	movs	r2, #0
 800930e:	603b      	str	r3, [r7, #0]
 8009310:	607a      	str	r2, [r7, #4]
 8009312:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009316:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800931a:	f7f7 ff6d 	bl	80011f8 <__aeabi_uldivmod>
 800931e:	4602      	mov	r2, r0
 8009320:	460b      	mov	r3, r1
 8009322:	4610      	mov	r0, r2
 8009324:	4619      	mov	r1, r3
 8009326:	f04f 0200 	mov.w	r2, #0
 800932a:	f04f 0300 	mov.w	r3, #0
 800932e:	020b      	lsls	r3, r1, #8
 8009330:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009334:	0202      	lsls	r2, r0, #8
 8009336:	6979      	ldr	r1, [r7, #20]
 8009338:	6849      	ldr	r1, [r1, #4]
 800933a:	0849      	lsrs	r1, r1, #1
 800933c:	2000      	movs	r0, #0
 800933e:	460c      	mov	r4, r1
 8009340:	4605      	mov	r5, r0
 8009342:	eb12 0804 	adds.w	r8, r2, r4
 8009346:	eb43 0905 	adc.w	r9, r3, r5
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	469a      	mov	sl, r3
 8009352:	4693      	mov	fp, r2
 8009354:	4652      	mov	r2, sl
 8009356:	465b      	mov	r3, fp
 8009358:	4640      	mov	r0, r8
 800935a:	4649      	mov	r1, r9
 800935c:	f7f7 ff4c 	bl	80011f8 <__aeabi_uldivmod>
 8009360:	4602      	mov	r2, r0
 8009362:	460b      	mov	r3, r1
 8009364:	4613      	mov	r3, r2
 8009366:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009368:	6a3b      	ldr	r3, [r7, #32]
 800936a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800936e:	d308      	bcc.n	8009382 <UART_SetConfig+0x322>
 8009370:	6a3b      	ldr	r3, [r7, #32]
 8009372:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009376:	d204      	bcs.n	8009382 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	6a3a      	ldr	r2, [r7, #32]
 800937e:	60da      	str	r2, [r3, #12]
 8009380:	e0c8      	b.n	8009514 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8009382:	2301      	movs	r3, #1
 8009384:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009388:	e0c4      	b.n	8009514 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	69db      	ldr	r3, [r3, #28]
 800938e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009392:	d168      	bne.n	8009466 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8009394:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009398:	2b08      	cmp	r3, #8
 800939a:	d828      	bhi.n	80093ee <UART_SetConfig+0x38e>
 800939c:	a201      	add	r2, pc, #4	; (adr r2, 80093a4 <UART_SetConfig+0x344>)
 800939e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093a2:	bf00      	nop
 80093a4:	080093c9 	.word	0x080093c9
 80093a8:	080093d1 	.word	0x080093d1
 80093ac:	080093d9 	.word	0x080093d9
 80093b0:	080093ef 	.word	0x080093ef
 80093b4:	080093df 	.word	0x080093df
 80093b8:	080093ef 	.word	0x080093ef
 80093bc:	080093ef 	.word	0x080093ef
 80093c0:	080093ef 	.word	0x080093ef
 80093c4:	080093e7 	.word	0x080093e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093c8:	f7fe fa74 	bl	80078b4 <HAL_RCC_GetPCLK1Freq>
 80093cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80093ce:	e014      	b.n	80093fa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093d0:	f7fe fa82 	bl	80078d8 <HAL_RCC_GetPCLK2Freq>
 80093d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80093d6:	e010      	b.n	80093fa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80093d8:	4b5a      	ldr	r3, [pc, #360]	; (8009544 <UART_SetConfig+0x4e4>)
 80093da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80093dc:	e00d      	b.n	80093fa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80093de:	f7fe f9b5 	bl	800774c <HAL_RCC_GetSysClockFreq>
 80093e2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80093e4:	e009      	b.n	80093fa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80093ec:	e005      	b.n	80093fa <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80093ee:	2300      	movs	r3, #0
 80093f0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80093f2:	2301      	movs	r3, #1
 80093f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80093f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80093fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	f000 8089 	beq.w	8009514 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009406:	4a4e      	ldr	r2, [pc, #312]	; (8009540 <UART_SetConfig+0x4e0>)
 8009408:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800940c:	461a      	mov	r2, r3
 800940e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009410:	fbb3 f3f2 	udiv	r3, r3, r2
 8009414:	005a      	lsls	r2, r3, #1
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	085b      	lsrs	r3, r3, #1
 800941c:	441a      	add	r2, r3
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	fbb2 f3f3 	udiv	r3, r2, r3
 8009426:	b29b      	uxth	r3, r3
 8009428:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800942a:	6a3b      	ldr	r3, [r7, #32]
 800942c:	2b0f      	cmp	r3, #15
 800942e:	d916      	bls.n	800945e <UART_SetConfig+0x3fe>
 8009430:	6a3b      	ldr	r3, [r7, #32]
 8009432:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009436:	d212      	bcs.n	800945e <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009438:	6a3b      	ldr	r3, [r7, #32]
 800943a:	b29b      	uxth	r3, r3
 800943c:	f023 030f 	bic.w	r3, r3, #15
 8009440:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009442:	6a3b      	ldr	r3, [r7, #32]
 8009444:	085b      	lsrs	r3, r3, #1
 8009446:	b29b      	uxth	r3, r3
 8009448:	f003 0307 	and.w	r3, r3, #7
 800944c:	b29a      	uxth	r2, r3
 800944e:	8bfb      	ldrh	r3, [r7, #30]
 8009450:	4313      	orrs	r3, r2
 8009452:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	8bfa      	ldrh	r2, [r7, #30]
 800945a:	60da      	str	r2, [r3, #12]
 800945c:	e05a      	b.n	8009514 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800945e:	2301      	movs	r3, #1
 8009460:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009464:	e056      	b.n	8009514 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009466:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800946a:	2b08      	cmp	r3, #8
 800946c:	d827      	bhi.n	80094be <UART_SetConfig+0x45e>
 800946e:	a201      	add	r2, pc, #4	; (adr r2, 8009474 <UART_SetConfig+0x414>)
 8009470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009474:	08009499 	.word	0x08009499
 8009478:	080094a1 	.word	0x080094a1
 800947c:	080094a9 	.word	0x080094a9
 8009480:	080094bf 	.word	0x080094bf
 8009484:	080094af 	.word	0x080094af
 8009488:	080094bf 	.word	0x080094bf
 800948c:	080094bf 	.word	0x080094bf
 8009490:	080094bf 	.word	0x080094bf
 8009494:	080094b7 	.word	0x080094b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009498:	f7fe fa0c 	bl	80078b4 <HAL_RCC_GetPCLK1Freq>
 800949c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800949e:	e014      	b.n	80094ca <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80094a0:	f7fe fa1a 	bl	80078d8 <HAL_RCC_GetPCLK2Freq>
 80094a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80094a6:	e010      	b.n	80094ca <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80094a8:	4b26      	ldr	r3, [pc, #152]	; (8009544 <UART_SetConfig+0x4e4>)
 80094aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80094ac:	e00d      	b.n	80094ca <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80094ae:	f7fe f94d 	bl	800774c <HAL_RCC_GetSysClockFreq>
 80094b2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80094b4:	e009      	b.n	80094ca <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80094bc:	e005      	b.n	80094ca <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80094be:	2300      	movs	r3, #0
 80094c0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80094c2:	2301      	movs	r3, #1
 80094c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80094c8:	bf00      	nop
    }

    if (pclk != 0U)
 80094ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d021      	beq.n	8009514 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d4:	4a1a      	ldr	r2, [pc, #104]	; (8009540 <UART_SetConfig+0x4e0>)
 80094d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094da:	461a      	mov	r2, r3
 80094dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094de:	fbb3 f2f2 	udiv	r2, r3, r2
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	085b      	lsrs	r3, r3, #1
 80094e8:	441a      	add	r2, r3
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094f6:	6a3b      	ldr	r3, [r7, #32]
 80094f8:	2b0f      	cmp	r3, #15
 80094fa:	d908      	bls.n	800950e <UART_SetConfig+0x4ae>
 80094fc:	6a3b      	ldr	r3, [r7, #32]
 80094fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009502:	d204      	bcs.n	800950e <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	6a3a      	ldr	r2, [r7, #32]
 800950a:	60da      	str	r2, [r3, #12]
 800950c:	e002      	b.n	8009514 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800950e:	2301      	movs	r3, #1
 8009510:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	2201      	movs	r2, #1
 8009518:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	2201      	movs	r2, #1
 8009520:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	2200      	movs	r2, #0
 8009528:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	2200      	movs	r2, #0
 800952e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009530:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8009534:	4618      	mov	r0, r3
 8009536:	3730      	adds	r7, #48	; 0x30
 8009538:	46bd      	mov	sp, r7
 800953a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800953e:	bf00      	nop
 8009540:	0801a678 	.word	0x0801a678
 8009544:	00f42400 	.word	0x00f42400

08009548 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009548:	b480      	push	{r7}
 800954a:	b083      	sub	sp, #12
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009554:	f003 0301 	and.w	r3, r3, #1
 8009558:	2b00      	cmp	r3, #0
 800955a:	d00a      	beq.n	8009572 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	430a      	orrs	r2, r1
 8009570:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009576:	f003 0302 	and.w	r3, r3, #2
 800957a:	2b00      	cmp	r3, #0
 800957c:	d00a      	beq.n	8009594 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	430a      	orrs	r2, r1
 8009592:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009598:	f003 0304 	and.w	r3, r3, #4
 800959c:	2b00      	cmp	r3, #0
 800959e:	d00a      	beq.n	80095b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	685b      	ldr	r3, [r3, #4]
 80095a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	430a      	orrs	r2, r1
 80095b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ba:	f003 0308 	and.w	r3, r3, #8
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d00a      	beq.n	80095d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	430a      	orrs	r2, r1
 80095d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095dc:	f003 0310 	and.w	r3, r3, #16
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d00a      	beq.n	80095fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	430a      	orrs	r2, r1
 80095f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095fe:	f003 0320 	and.w	r3, r3, #32
 8009602:	2b00      	cmp	r3, #0
 8009604:	d00a      	beq.n	800961c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	689b      	ldr	r3, [r3, #8]
 800960c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	430a      	orrs	r2, r1
 800961a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009624:	2b00      	cmp	r3, #0
 8009626:	d01a      	beq.n	800965e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	430a      	orrs	r2, r1
 800963c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009642:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009646:	d10a      	bne.n	800965e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	685b      	ldr	r3, [r3, #4]
 800964e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	430a      	orrs	r2, r1
 800965c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009666:	2b00      	cmp	r3, #0
 8009668:	d00a      	beq.n	8009680 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	430a      	orrs	r2, r1
 800967e:	605a      	str	r2, [r3, #4]
  }
}
 8009680:	bf00      	nop
 8009682:	370c      	adds	r7, #12
 8009684:	46bd      	mov	sp, r7
 8009686:	bc80      	pop	{r7}
 8009688:	4770      	bx	lr

0800968a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800968a:	b580      	push	{r7, lr}
 800968c:	b086      	sub	sp, #24
 800968e:	af02      	add	r7, sp, #8
 8009690:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2200      	movs	r2, #0
 8009696:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800969a:	f7fb fac5 	bl	8004c28 <HAL_GetTick>
 800969e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f003 0308 	and.w	r3, r3, #8
 80096aa:	2b08      	cmp	r3, #8
 80096ac:	d10e      	bne.n	80096cc <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80096b2:	9300      	str	r3, [sp, #0]
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2200      	movs	r2, #0
 80096b8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f000 f82f 	bl	8009720 <UART_WaitOnFlagUntilTimeout>
 80096c2:	4603      	mov	r3, r0
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d001      	beq.n	80096cc <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096c8:	2303      	movs	r3, #3
 80096ca:	e025      	b.n	8009718 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f003 0304 	and.w	r3, r3, #4
 80096d6:	2b04      	cmp	r3, #4
 80096d8:	d10e      	bne.n	80096f8 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80096de:	9300      	str	r3, [sp, #0]
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2200      	movs	r2, #0
 80096e4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f000 f819 	bl	8009720 <UART_WaitOnFlagUntilTimeout>
 80096ee:	4603      	mov	r3, r0
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d001      	beq.n	80096f8 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096f4:	2303      	movs	r3, #3
 80096f6:	e00f      	b.n	8009718 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2220      	movs	r2, #32
 80096fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2220      	movs	r2, #32
 8009704:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2200      	movs	r2, #0
 800970c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2200      	movs	r2, #0
 8009712:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009716:	2300      	movs	r3, #0
}
 8009718:	4618      	mov	r0, r3
 800971a:	3710      	adds	r7, #16
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b09c      	sub	sp, #112	; 0x70
 8009724:	af00      	add	r7, sp, #0
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	603b      	str	r3, [r7, #0]
 800972c:	4613      	mov	r3, r2
 800972e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009730:	e0a9      	b.n	8009886 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009732:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009738:	f000 80a5 	beq.w	8009886 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800973c:	f7fb fa74 	bl	8004c28 <HAL_GetTick>
 8009740:	4602      	mov	r2, r0
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	1ad3      	subs	r3, r2, r3
 8009746:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009748:	429a      	cmp	r2, r3
 800974a:	d302      	bcc.n	8009752 <UART_WaitOnFlagUntilTimeout+0x32>
 800974c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800974e:	2b00      	cmp	r3, #0
 8009750:	d140      	bne.n	80097d4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009758:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800975a:	e853 3f00 	ldrex	r3, [r3]
 800975e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009762:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009766:	667b      	str	r3, [r7, #100]	; 0x64
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	461a      	mov	r2, r3
 800976e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009770:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009772:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009774:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009776:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009778:	e841 2300 	strex	r3, r2, [r1]
 800977c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800977e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009780:	2b00      	cmp	r3, #0
 8009782:	d1e6      	bne.n	8009752 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	3308      	adds	r3, #8
 800978a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800978c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800978e:	e853 3f00 	ldrex	r3, [r3]
 8009792:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009796:	f023 0301 	bic.w	r3, r3, #1
 800979a:	663b      	str	r3, [r7, #96]	; 0x60
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	3308      	adds	r3, #8
 80097a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80097a4:	64ba      	str	r2, [r7, #72]	; 0x48
 80097a6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80097aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097ac:	e841 2300 	strex	r3, r2, [r1]
 80097b0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80097b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d1e5      	bne.n	8009784 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2220      	movs	r2, #32
 80097bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2220      	movs	r2, #32
 80097c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2200      	movs	r2, #0
 80097cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80097d0:	2303      	movs	r3, #3
 80097d2:	e069      	b.n	80098a8 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f003 0304 	and.w	r3, r3, #4
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d051      	beq.n	8009886 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	69db      	ldr	r3, [r3, #28]
 80097e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097f0:	d149      	bne.n	8009886 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80097fa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009804:	e853 3f00 	ldrex	r3, [r3]
 8009808:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800980a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800980c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009810:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	461a      	mov	r2, r3
 8009818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800981a:	637b      	str	r3, [r7, #52]	; 0x34
 800981c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800981e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009820:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009822:	e841 2300 	strex	r3, r2, [r1]
 8009826:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800982a:	2b00      	cmp	r3, #0
 800982c:	d1e6      	bne.n	80097fc <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	3308      	adds	r3, #8
 8009834:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	e853 3f00 	ldrex	r3, [r3]
 800983c:	613b      	str	r3, [r7, #16]
   return(result);
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	f023 0301 	bic.w	r3, r3, #1
 8009844:	66bb      	str	r3, [r7, #104]	; 0x68
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	3308      	adds	r3, #8
 800984c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800984e:	623a      	str	r2, [r7, #32]
 8009850:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009852:	69f9      	ldr	r1, [r7, #28]
 8009854:	6a3a      	ldr	r2, [r7, #32]
 8009856:	e841 2300 	strex	r3, r2, [r1]
 800985a:	61bb      	str	r3, [r7, #24]
   return(result);
 800985c:	69bb      	ldr	r3, [r7, #24]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d1e5      	bne.n	800982e <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	2220      	movs	r2, #32
 8009866:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2220      	movs	r2, #32
 800986e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2220      	movs	r2, #32
 8009876:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2200      	movs	r2, #0
 800987e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009882:	2303      	movs	r3, #3
 8009884:	e010      	b.n	80098a8 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	69da      	ldr	r2, [r3, #28]
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	4013      	ands	r3, r2
 8009890:	68ba      	ldr	r2, [r7, #8]
 8009892:	429a      	cmp	r2, r3
 8009894:	bf0c      	ite	eq
 8009896:	2301      	moveq	r3, #1
 8009898:	2300      	movne	r3, #0
 800989a:	b2db      	uxtb	r3, r3
 800989c:	461a      	mov	r2, r3
 800989e:	79fb      	ldrb	r3, [r7, #7]
 80098a0:	429a      	cmp	r2, r3
 80098a2:	f43f af46 	beq.w	8009732 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80098a6:	2300      	movs	r3, #0
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3770      	adds	r7, #112	; 0x70
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b096      	sub	sp, #88	; 0x58
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	60b9      	str	r1, [r7, #8]
 80098ba:	4613      	mov	r3, r2
 80098bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	68ba      	ldr	r2, [r7, #8]
 80098c2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	88fa      	ldrh	r2, [r7, #6]
 80098c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2200      	movs	r2, #0
 80098d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2222      	movs	r2, #34	; 0x22
 80098d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d02c      	beq.n	800993e <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098e8:	4a42      	ldr	r2, [pc, #264]	; (80099f4 <UART_Start_Receive_DMA+0x144>)
 80098ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098f0:	4a41      	ldr	r2, [pc, #260]	; (80099f8 <UART_Start_Receive_DMA+0x148>)
 80098f2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098f8:	4a40      	ldr	r2, [pc, #256]	; (80099fc <UART_Start_Receive_DMA+0x14c>)
 80098fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009900:	2200      	movs	r2, #0
 8009902:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	3324      	adds	r3, #36	; 0x24
 800990e:	4619      	mov	r1, r3
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009914:	461a      	mov	r2, r3
 8009916:	88fb      	ldrh	r3, [r7, #6]
 8009918:	f7fb fc52 	bl	80051c0 <HAL_DMA_Start_IT>
 800991c:	4603      	mov	r3, r0
 800991e:	2b00      	cmp	r3, #0
 8009920:	d00d      	beq.n	800993e <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2210      	movs	r2, #16
 8009926:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2200      	movs	r2, #0
 800992e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2220      	movs	r2, #32
 8009936:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800993a:	2301      	movs	r3, #1
 800993c:	e055      	b.n	80099ea <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2200      	movs	r2, #0
 8009942:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	691b      	ldr	r3, [r3, #16]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d018      	beq.n	8009980 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009956:	e853 3f00 	ldrex	r3, [r3]
 800995a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800995c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800995e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009962:	657b      	str	r3, [r7, #84]	; 0x54
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	461a      	mov	r2, r3
 800996a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800996c:	64bb      	str	r3, [r7, #72]	; 0x48
 800996e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009970:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009972:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009974:	e841 2300 	strex	r3, r2, [r1]
 8009978:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800997a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800997c:	2b00      	cmp	r3, #0
 800997e:	d1e6      	bne.n	800994e <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	3308      	adds	r3, #8
 8009986:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800998a:	e853 3f00 	ldrex	r3, [r3]
 800998e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009992:	f043 0301 	orr.w	r3, r3, #1
 8009996:	653b      	str	r3, [r7, #80]	; 0x50
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	3308      	adds	r3, #8
 800999e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80099a0:	637a      	str	r2, [r7, #52]	; 0x34
 80099a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80099a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80099a8:	e841 2300 	strex	r3, r2, [r1]
 80099ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80099ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d1e5      	bne.n	8009980 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	3308      	adds	r3, #8
 80099ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	e853 3f00 	ldrex	r3, [r3]
 80099c2:	613b      	str	r3, [r7, #16]
   return(result);
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	3308      	adds	r3, #8
 80099d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80099d4:	623a      	str	r2, [r7, #32]
 80099d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d8:	69f9      	ldr	r1, [r7, #28]
 80099da:	6a3a      	ldr	r2, [r7, #32]
 80099dc:	e841 2300 	strex	r3, r2, [r1]
 80099e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80099e2:	69bb      	ldr	r3, [r7, #24]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d1e5      	bne.n	80099b4 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 80099e8:	2300      	movs	r3, #0
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3758      	adds	r7, #88	; 0x58
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
 80099f2:	bf00      	nop
 80099f4:	08009b4b 	.word	0x08009b4b
 80099f8:	08009c71 	.word	0x08009c71
 80099fc:	08009ca9 	.word	0x08009ca9

08009a00 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b08f      	sub	sp, #60	; 0x3c
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a0e:	6a3b      	ldr	r3, [r7, #32]
 8009a10:	e853 3f00 	ldrex	r3, [r3]
 8009a14:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a16:	69fb      	ldr	r3, [r7, #28]
 8009a18:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009a1c:	637b      	str	r3, [r7, #52]	; 0x34
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	461a      	mov	r2, r3
 8009a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a28:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a2e:	e841 2300 	strex	r3, r2, [r1]
 8009a32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d1e6      	bne.n	8009a08 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	3308      	adds	r3, #8
 8009a40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	e853 3f00 	ldrex	r3, [r3]
 8009a48:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009a50:	633b      	str	r3, [r7, #48]	; 0x30
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	3308      	adds	r3, #8
 8009a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a5a:	61ba      	str	r2, [r7, #24]
 8009a5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a5e:	6979      	ldr	r1, [r7, #20]
 8009a60:	69ba      	ldr	r2, [r7, #24]
 8009a62:	e841 2300 	strex	r3, r2, [r1]
 8009a66:	613b      	str	r3, [r7, #16]
   return(result);
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d1e5      	bne.n	8009a3a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2220      	movs	r2, #32
 8009a72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8009a76:	bf00      	nop
 8009a78:	373c      	adds	r7, #60	; 0x3c
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bc80      	pop	{r7}
 8009a7e:	4770      	bx	lr

08009a80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b095      	sub	sp, #84	; 0x54
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a90:	e853 3f00 	ldrex	r3, [r3]
 8009a94:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009aa6:	643b      	str	r3, [r7, #64]	; 0x40
 8009aa8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aaa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009aac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009aae:	e841 2300 	strex	r3, r2, [r1]
 8009ab2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d1e6      	bne.n	8009a88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	3308      	adds	r3, #8
 8009ac0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac2:	6a3b      	ldr	r3, [r7, #32]
 8009ac4:	e853 3f00 	ldrex	r3, [r3]
 8009ac8:	61fb      	str	r3, [r7, #28]
   return(result);
 8009aca:	69fb      	ldr	r3, [r7, #28]
 8009acc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ad0:	f023 0301 	bic.w	r3, r3, #1
 8009ad4:	64bb      	str	r3, [r7, #72]	; 0x48
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	3308      	adds	r3, #8
 8009adc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ade:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009ae0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ae4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ae6:	e841 2300 	strex	r3, r2, [r1]
 8009aea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d1e3      	bne.n	8009aba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d118      	bne.n	8009b2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	e853 3f00 	ldrex	r3, [r3]
 8009b06:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	f023 0310 	bic.w	r3, r3, #16
 8009b0e:	647b      	str	r3, [r7, #68]	; 0x44
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	461a      	mov	r2, r3
 8009b16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b18:	61bb      	str	r3, [r7, #24]
 8009b1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b1c:	6979      	ldr	r1, [r7, #20]
 8009b1e:	69ba      	ldr	r2, [r7, #24]
 8009b20:	e841 2300 	strex	r3, r2, [r1]
 8009b24:	613b      	str	r3, [r7, #16]
   return(result);
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d1e6      	bne.n	8009afa <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2220      	movs	r2, #32
 8009b30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2200      	movs	r2, #0
 8009b38:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009b40:	bf00      	nop
 8009b42:	3754      	adds	r7, #84	; 0x54
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bc80      	pop	{r7}
 8009b48:	4770      	bx	lr

08009b4a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009b4a:	b580      	push	{r7, lr}
 8009b4c:	b09c      	sub	sp, #112	; 0x70
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b56:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f003 0320 	and.w	r3, r3, #32
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d171      	bne.n	8009c4a <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8009b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b76:	e853 3f00 	ldrex	r3, [r3]
 8009b7a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b82:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	461a      	mov	r2, r3
 8009b8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b8c:	65bb      	str	r3, [r7, #88]	; 0x58
 8009b8e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009b92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009b94:	e841 2300 	strex	r3, r2, [r1]
 8009b98:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009b9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d1e6      	bne.n	8009b6e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	3308      	adds	r3, #8
 8009ba6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009baa:	e853 3f00 	ldrex	r3, [r3]
 8009bae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bb2:	f023 0301 	bic.w	r3, r3, #1
 8009bb6:	667b      	str	r3, [r7, #100]	; 0x64
 8009bb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	3308      	adds	r3, #8
 8009bbe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009bc0:	647a      	str	r2, [r7, #68]	; 0x44
 8009bc2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009bc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009bc8:	e841 2300 	strex	r3, r2, [r1]
 8009bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d1e5      	bne.n	8009ba0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009bd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	3308      	adds	r3, #8
 8009bda:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bde:	e853 3f00 	ldrex	r3, [r3]
 8009be2:	623b      	str	r3, [r7, #32]
   return(result);
 8009be4:	6a3b      	ldr	r3, [r7, #32]
 8009be6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bea:	663b      	str	r3, [r7, #96]	; 0x60
 8009bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	3308      	adds	r3, #8
 8009bf2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009bf4:	633a      	str	r2, [r7, #48]	; 0x30
 8009bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009bfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bfc:	e841 2300 	strex	r3, r2, [r1]
 8009c00:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d1e5      	bne.n	8009bd4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c0a:	2220      	movs	r2, #32
 8009c0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d118      	bne.n	8009c4a <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	e853 3f00 	ldrex	r3, [r3]
 8009c24:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	f023 0310 	bic.w	r3, r3, #16
 8009c2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	461a      	mov	r2, r3
 8009c34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c36:	61fb      	str	r3, [r7, #28]
 8009c38:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c3a:	69b9      	ldr	r1, [r7, #24]
 8009c3c:	69fa      	ldr	r2, [r7, #28]
 8009c3e:	e841 2300 	strex	r3, r2, [r1]
 8009c42:	617b      	str	r3, [r7, #20]
   return(result);
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d1e6      	bne.n	8009c18 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c4e:	2b01      	cmp	r3, #1
 8009c50:	d107      	bne.n	8009c62 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009c58:	4619      	mov	r1, r3
 8009c5a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009c5c:	f7ff f9f5 	bl	800904a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009c60:	e002      	b.n	8009c68 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8009c62:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009c64:	f7ff f9d6 	bl	8009014 <HAL_UART_RxCpltCallback>
}
 8009c68:	bf00      	nop
 8009c6a:	3770      	adds	r7, #112	; 0x70
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b084      	sub	sp, #16
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c7c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c82:	2b01      	cmp	r3, #1
 8009c84:	d109      	bne.n	8009c9a <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009c8c:	085b      	lsrs	r3, r3, #1
 8009c8e:	b29b      	uxth	r3, r3
 8009c90:	4619      	mov	r1, r3
 8009c92:	68f8      	ldr	r0, [r7, #12]
 8009c94:	f7ff f9d9 	bl	800904a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009c98:	e002      	b.n	8009ca0 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8009c9a:	68f8      	ldr	r0, [r7, #12]
 8009c9c:	f7ff f9c3 	bl	8009026 <HAL_UART_RxHalfCpltCallback>
}
 8009ca0:	bf00      	nop
 8009ca2:	3710      	adds	r7, #16
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b086      	sub	sp, #24
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cb4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009cbc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cc4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	689b      	ldr	r3, [r3, #8]
 8009ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cd0:	2b80      	cmp	r3, #128	; 0x80
 8009cd2:	d109      	bne.n	8009ce8 <UART_DMAError+0x40>
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	2b21      	cmp	r3, #33	; 0x21
 8009cd8:	d106      	bne.n	8009ce8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8009ce2:	6978      	ldr	r0, [r7, #20]
 8009ce4:	f7ff fe8c 	bl	8009a00 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	689b      	ldr	r3, [r3, #8]
 8009cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cf2:	2b40      	cmp	r3, #64	; 0x40
 8009cf4:	d109      	bne.n	8009d0a <UART_DMAError+0x62>
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2b22      	cmp	r3, #34	; 0x22
 8009cfa:	d106      	bne.n	8009d0a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009d04:	6978      	ldr	r0, [r7, #20]
 8009d06:	f7ff febb 	bl	8009a80 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d10:	f043 0210 	orr.w	r2, r3, #16
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009d1a:	6978      	ldr	r0, [r7, #20]
 8009d1c:	f7ff f98c 	bl	8009038 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d20:	bf00      	nop
 8009d22:	3718      	adds	r7, #24
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b085      	sub	sp, #20
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	d101      	bne.n	8009d3e <HAL_UARTEx_DisableFifoMode+0x16>
 8009d3a:	2302      	movs	r3, #2
 8009d3c:	e027      	b.n	8009d8e <HAL_UARTEx_DisableFifoMode+0x66>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2201      	movs	r2, #1
 8009d42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2224      	movs	r2, #36	; 0x24
 8009d4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	681a      	ldr	r2, [r3, #0]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f022 0201 	bic.w	r2, r2, #1
 8009d64:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009d6c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2200      	movs	r2, #0
 8009d72:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	68fa      	ldr	r2, [r7, #12]
 8009d7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2220      	movs	r2, #32
 8009d80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2200      	movs	r2, #0
 8009d88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009d8c:	2300      	movs	r3, #0
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3714      	adds	r7, #20
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bc80      	pop	{r7}
 8009d96:	4770      	bx	lr

08009d98 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d101      	bne.n	8009db0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009dac:	2302      	movs	r3, #2
 8009dae:	e02d      	b.n	8009e0c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2201      	movs	r2, #1
 8009db4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2224      	movs	r2, #36	; 0x24
 8009dbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	681a      	ldr	r2, [r3, #0]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f022 0201 	bic.w	r2, r2, #1
 8009dd6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	689b      	ldr	r3, [r3, #8]
 8009dde:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	683a      	ldr	r2, [r7, #0]
 8009de8:	430a      	orrs	r2, r1
 8009dea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f000 f84f 	bl	8009e90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	68fa      	ldr	r2, [r7, #12]
 8009df8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2220      	movs	r2, #32
 8009dfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2200      	movs	r2, #0
 8009e06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009e0a:	2300      	movs	r3, #0
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3710      	adds	r7, #16
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
 8009e1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009e24:	2b01      	cmp	r3, #1
 8009e26:	d101      	bne.n	8009e2c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009e28:	2302      	movs	r3, #2
 8009e2a:	e02d      	b.n	8009e88 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2201      	movs	r2, #1
 8009e30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2224      	movs	r2, #36	; 0x24
 8009e38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	681a      	ldr	r2, [r3, #0]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f022 0201 	bic.w	r2, r2, #1
 8009e52:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	689b      	ldr	r3, [r3, #8]
 8009e5a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	683a      	ldr	r2, [r7, #0]
 8009e64:	430a      	orrs	r2, r1
 8009e66:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f000 f811 	bl	8009e90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	68fa      	ldr	r2, [r7, #12]
 8009e74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2220      	movs	r2, #32
 8009e7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2200      	movs	r2, #0
 8009e82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009e86:	2300      	movs	r3, #0
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3710      	adds	r7, #16
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b085      	sub	sp, #20
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d108      	bne.n	8009eb2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2201      	movs	r2, #1
 8009eac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009eb0:	e031      	b.n	8009f16 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009eb2:	2308      	movs	r3, #8
 8009eb4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009eb6:	2308      	movs	r3, #8
 8009eb8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	689b      	ldr	r3, [r3, #8]
 8009ec0:	0e5b      	lsrs	r3, r3, #25
 8009ec2:	b2db      	uxtb	r3, r3
 8009ec4:	f003 0307 	and.w	r3, r3, #7
 8009ec8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	689b      	ldr	r3, [r3, #8]
 8009ed0:	0f5b      	lsrs	r3, r3, #29
 8009ed2:	b2db      	uxtb	r3, r3
 8009ed4:	f003 0307 	and.w	r3, r3, #7
 8009ed8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009eda:	7bbb      	ldrb	r3, [r7, #14]
 8009edc:	7b3a      	ldrb	r2, [r7, #12]
 8009ede:	4910      	ldr	r1, [pc, #64]	; (8009f20 <UARTEx_SetNbDataToProcess+0x90>)
 8009ee0:	5c8a      	ldrb	r2, [r1, r2]
 8009ee2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009ee6:	7b3a      	ldrb	r2, [r7, #12]
 8009ee8:	490e      	ldr	r1, [pc, #56]	; (8009f24 <UARTEx_SetNbDataToProcess+0x94>)
 8009eea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009eec:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ef0:	b29a      	uxth	r2, r3
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ef8:	7bfb      	ldrb	r3, [r7, #15]
 8009efa:	7b7a      	ldrb	r2, [r7, #13]
 8009efc:	4908      	ldr	r1, [pc, #32]	; (8009f20 <UARTEx_SetNbDataToProcess+0x90>)
 8009efe:	5c8a      	ldrb	r2, [r1, r2]
 8009f00:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009f04:	7b7a      	ldrb	r2, [r7, #13]
 8009f06:	4907      	ldr	r1, [pc, #28]	; (8009f24 <UARTEx_SetNbDataToProcess+0x94>)
 8009f08:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f0a:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f0e:	b29a      	uxth	r2, r3
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009f16:	bf00      	nop
 8009f18:	3714      	adds	r7, #20
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bc80      	pop	{r7}
 8009f1e:	4770      	bx	lr
 8009f20:	0801a690 	.word	0x0801a690
 8009f24:	0801a698 	.word	0x0801a698

08009f28 <MX_MEMS_Init>:
static void MEMS_INT1_Force_Low(void);
static void MEMS_INT1_Init(void);
#endif

void MX_MEMS_Init(void)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	af00      	add	r7, sp, #0

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */

  MX_DataLogFusion_Init();
 8009f2c:	f000 f81e 	bl	8009f6c <MX_DataLogFusion_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 8009f30:	bf00      	nop
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <MX_MEMS_Process>:

/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Process_PreTreatment */

  /* USER CODE END MEMS_Process_PreTreatment */

  MX_DataLogFusion_Process();
 8009f38:	f000 f894 	bl	800a064 <MX_DataLogFusion_Process>

  /* USER CODE BEGIN MEMS_Process_PostTreatment */

  /* USER CODE END MEMS_Process_PostTreatment */
}
 8009f3c:	bf00      	nop
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <HAL_TIM_PeriodElapsedCallback>:
 * @param  htim pointer to a TIM_HandleTypeDef structure that contains
 *              the configuration information for TIM module.
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b083      	sub	sp, #12
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  if (htim->Instance == BSP_IP_TIM_Handle.Instance)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	4b05      	ldr	r3, [pc, #20]	; (8009f64 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d102      	bne.n	8009f5a <HAL_TIM_PeriodElapsedCallback+0x1a>
  {
    SensorReadRequest = 1;
 8009f54:	4b04      	ldr	r3, [pc, #16]	; (8009f68 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8009f56:	2201      	movs	r2, #1
 8009f58:	701a      	strb	r2, [r3, #0]
  }
}
 8009f5a:	bf00      	nop
 8009f5c:	370c      	adds	r7, #12
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bc80      	pop	{r7}
 8009f62:	4770      	bx	lr
 8009f64:	200006ac 	.word	0x200006ac
 8009f68:	20000870 	.word	0x20000870

08009f6c <MX_DataLogFusion_Init>:
/**
  * @brief  Initialize the application
  * @retval None
  */
static void MX_DataLogFusion_Init(void)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b086      	sub	sp, #24
 8009f70:	af00      	add	r7, sp, #0
  /* Force MEMS INT1 pin of the sensor low during startup in order to disable I3C and enable I2C. This function needs
   * to be called only if user wants to disable I3C / enable I2C and didn't put the pull-down resistor to MEMS INT1 pin
   * on his HW setup. This is also the case of usage X-NUCLEO-IKS01A2 or X-NUCLEO-IKS01A3 expansion board together with
   * sensor in DIL24 adapter board where the LDO with internal pull-up is used.
   */
  MEMS_INT1_Force_Low();
 8009f72:	f000 fce9 	bl	800a948 <MEMS_INT1_Force_Low>
#endif

  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8009f76:	2101      	movs	r1, #1
 8009f78:	2000      	movs	r0, #0
 8009f7a:	f7fa fc2f 	bl	80047dc <BSP_PB_Init>

  /* Check what is the Push Button State when the button is not pressed. It can change across families */
  PushButtonState = (BSP_PB_GetState(BUTTON_KEY)) ?  0 : 1;
 8009f7e:	2000      	movs	r0, #0
 8009f80:	f7fa fc80 	bl	8004884 <BSP_PB_GetState>
 8009f84:	4603      	mov	r3, r0
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	bf0c      	ite	eq
 8009f8a:	2301      	moveq	r3, #1
 8009f8c:	2300      	movne	r3, #0
 8009f8e:	b2db      	uxtb	r3, r3
 8009f90:	461a      	mov	r2, r3
 8009f92:	4b2e      	ldr	r3, [pc, #184]	; (800a04c <MX_DataLogFusion_Init+0xe0>)
 8009f94:	601a      	str	r2, [r3, #0]

  /* Initialize LED */
  BSP_LED_Init(LED2);
 8009f96:	2000      	movs	r0, #0
 8009f98:	f7fa fbb8 	bl	800470c <BSP_LED_Init>

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 8009f9c:	2000      	movs	r0, #0
 8009f9e:	f7fa fcb3 	bl	8004908 <BSP_COM_Init>

  /* Initialize Timer */
  BSP_IP_TIM_Init();
 8009fa2:	f7f7 fc8f 	bl	80018c4 <MX_TIM2_Init>

  /* Configure Timer to run with desired algorithm frequency */
  TIM_Config(ALGO_FREQ);
 8009fa6:	2064      	movs	r0, #100	; 0x64
 8009fa8:	f000 fc9a 	bl	800a8e0 <TIM_Config>

  /* Initialize (disabled) sensors */
  Init_Sensors();
 8009fac:	f000 f8f2 	bl	800a194 <Init_Sensors>

#ifdef BSP_IP_MEMS_INT1_PIN_NUM
  /* Initialize MEMS INT1 pin back to it's default state after I3C disable / I2C enable */
  MEMS_INT1_Init();
 8009fb0:	f000 fcea 	bl	800a988 <MEMS_INT1_Init>
#endif

  /* Sensor Fusion API initialization function */
  MotionFX_manager_init();
 8009fb4:	f001 ff22 	bl	800bdfc <MotionFX_manager_init>

  /* OPTIONAL */
  /* Get library version */
  MotionFX_manager_get_version(LibVersion, &LibVersionLen);
 8009fb8:	4925      	ldr	r1, [pc, #148]	; (800a050 <MX_DataLogFusion_Init+0xe4>)
 8009fba:	4826      	ldr	r0, [pc, #152]	; (800a054 <MX_DataLogFusion_Init+0xe8>)
 8009fbc:	f001 ffc8 	bl	800bf50 <MotionFX_manager_get_version>

  /* Enable magnetometer calibration */
  MotionFX_manager_MagCal_start(ALGO_PERIOD);
 8009fc0:	200a      	movs	r0, #10
 8009fc2:	f001 ffe4 	bl	800bf8e <MotionFX_manager_MagCal_start>

  /* Test if calibration data are available */
  MFX_MagCal_output_t mag_cal_test;
  MotionFX_MagCal_getParams(&mag_cal_test);
 8009fc6:	1d3b      	adds	r3, r7, #4
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f00d fcf1 	bl	80179b0 <MotionFX_MagCal_getParams>

  /* If calibration data are available load HI coefficients */
  if (mag_cal_test.cal_quality == MFX_MAGCALGOOD)
 8009fce:	7c3b      	ldrb	r3, [r7, #16]
 8009fd0:	2b03      	cmp	r3, #3
 8009fd2:	d129      	bne.n	800a028 <MX_DataLogFusion_Init+0xbc>
  {
    ans_float = (mag_cal_test.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	4920      	ldr	r1, [pc, #128]	; (800a058 <MX_DataLogFusion_Init+0xec>)
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f7f6 feeb 	bl	8000db4 <__aeabi_fmul>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	617b      	str	r3, [r7, #20]
    MagOffset.x = (int32_t)ans_float;
 8009fe2:	6978      	ldr	r0, [r7, #20]
 8009fe4:	f7f7 f8c2 	bl	800116c <__aeabi_f2iz>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	4a1c      	ldr	r2, [pc, #112]	; (800a05c <MX_DataLogFusion_Init+0xf0>)
 8009fec:	6013      	str	r3, [r2, #0]
    ans_float = (mag_cal_test.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	4919      	ldr	r1, [pc, #100]	; (800a058 <MX_DataLogFusion_Init+0xec>)
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f7f6 fede 	bl	8000db4 <__aeabi_fmul>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	617b      	str	r3, [r7, #20]
    MagOffset.y = (int32_t)ans_float;
 8009ffc:	6978      	ldr	r0, [r7, #20]
 8009ffe:	f7f7 f8b5 	bl	800116c <__aeabi_f2iz>
 800a002:	4603      	mov	r3, r0
 800a004:	4a15      	ldr	r2, [pc, #84]	; (800a05c <MX_DataLogFusion_Init+0xf0>)
 800a006:	6053      	str	r3, [r2, #4]
    ans_float = (mag_cal_test.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	4913      	ldr	r1, [pc, #76]	; (800a058 <MX_DataLogFusion_Init+0xec>)
 800a00c:	4618      	mov	r0, r3
 800a00e:	f7f6 fed1 	bl	8000db4 <__aeabi_fmul>
 800a012:	4603      	mov	r3, r0
 800a014:	617b      	str	r3, [r7, #20]
    MagOffset.z = (int32_t)ans_float;
 800a016:	6978      	ldr	r0, [r7, #20]
 800a018:	f7f7 f8a8 	bl	800116c <__aeabi_f2iz>
 800a01c:	4603      	mov	r3, r0
 800a01e:	4a0f      	ldr	r2, [pc, #60]	; (800a05c <MX_DataLogFusion_Init+0xf0>)
 800a020:	6093      	str	r3, [r2, #8]

    MagCalStatus = 1;
 800a022:	4b0f      	ldr	r3, [pc, #60]	; (800a060 <MX_DataLogFusion_Init+0xf4>)
 800a024:	2201      	movs	r2, #1
 800a026:	701a      	strb	r2, [r3, #0]
  }

  DWT_Init();
 800a028:	f000 fcca 	bl	800a9c0 <DWT_Init>

  BSP_LED_On(LED2);
 800a02c:	2000      	movs	r0, #0
 800a02e:	f7fa fb7f 	bl	8004730 <BSP_LED_On>
  HAL_Delay(500);
 800a032:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a036:	f7fa fe01 	bl	8004c3c <HAL_Delay>
  BSP_LED_Off(LED2);
 800a03a:	2000      	movs	r0, #0
 800a03c:	f7fa fb8e 	bl	800475c <BSP_LED_Off>

  /* Start receiving messages via DMA */
  UART_StartReceiveMsg();
 800a040:	f000 fdde 	bl	800ac00 <UART_StartReceiveMsg>
}
 800a044:	bf00      	nop
 800a046:	3718      	adds	r7, #24
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}
 800a04c:	20000a24 	.word	0x20000a24
 800a050:	2000086c 	.word	0x2000086c
 800a054:	20000848 	.word	0x20000848
 800a058:	43fa0000 	.word	0x43fa0000
 800a05c:	20000a60 	.word	0x20000a60
 800a060:	20000a6c 	.word	0x20000a6c

0800a064 <MX_DataLogFusion_Process>:
/**
  * @brief  Process of the application
  * @retval None
  */
static void MX_DataLogFusion_Process(void)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	af00      	add	r7, sp, #0
  static TMsg msg_dat;
  static TMsg msg_cmd;

  if (UART_ReceivedMSG((TMsg *)&msg_cmd) == 1)
 800a068:	4840      	ldr	r0, [pc, #256]	; (800a16c <MX_DataLogFusion_Process+0x108>)
 800a06a:	f000 fcf7 	bl	800aa5c <UART_ReceivedMSG>
 800a06e:	4603      	mov	r3, r0
 800a070:	2b01      	cmp	r3, #1
 800a072:	d106      	bne.n	800a082 <MX_DataLogFusion_Process+0x1e>
  {
    if (msg_cmd.Data[0] == DEV_ADDR)
 800a074:	4b3d      	ldr	r3, [pc, #244]	; (800a16c <MX_DataLogFusion_Process+0x108>)
 800a076:	791b      	ldrb	r3, [r3, #4]
 800a078:	2b32      	cmp	r3, #50	; 0x32
 800a07a:	d102      	bne.n	800a082 <MX_DataLogFusion_Process+0x1e>
    {
      (void)HandleMSG((TMsg *)&msg_cmd);
 800a07c:	483b      	ldr	r0, [pc, #236]	; (800a16c <MX_DataLogFusion_Process+0x108>)
 800a07e:	f001 faa3 	bl	800b5c8 <HandleMSG>
    }
  }

  if (MagCalRequest == 1U)
 800a082:	4b3b      	ldr	r3, [pc, #236]	; (800a170 <MX_DataLogFusion_Process+0x10c>)
 800a084:	781b      	ldrb	r3, [r3, #0]
 800a086:	b2db      	uxtb	r3, r3
 800a088:	2b01      	cmp	r3, #1
 800a08a:	d120      	bne.n	800a0ce <MX_DataLogFusion_Process+0x6a>
  {
    /* Debouncing */
    HAL_Delay(50);
 800a08c:	2032      	movs	r0, #50	; 0x32
 800a08e:	f7fa fdd5 	bl	8004c3c <HAL_Delay>

    /* Wait until the button is released */
    while ((BSP_PB_GetState( BUTTON_KEY ) == PushButtonState));
 800a092:	bf00      	nop
 800a094:	2000      	movs	r0, #0
 800a096:	f7fa fbf5 	bl	8004884 <BSP_PB_GetState>
 800a09a:	4602      	mov	r2, r0
 800a09c:	4b35      	ldr	r3, [pc, #212]	; (800a174 <MX_DataLogFusion_Process+0x110>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d0f7      	beq.n	800a094 <MX_DataLogFusion_Process+0x30>

    /* Debouncing */
    HAL_Delay(50);
 800a0a4:	2032      	movs	r0, #50	; 0x32
 800a0a6:	f7fa fdc9 	bl	8004c3c <HAL_Delay>

    MagCalRequest = 0;
 800a0aa:	4b31      	ldr	r3, [pc, #196]	; (800a170 <MX_DataLogFusion_Process+0x10c>)
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	701a      	strb	r2, [r3, #0]

    /* Reset magnetometer calibration value*/
    MagCalStatus = 0;
 800a0b0:	4b31      	ldr	r3, [pc, #196]	; (800a178 <MX_DataLogFusion_Process+0x114>)
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	701a      	strb	r2, [r3, #0]
    MagOffset.x = 0;
 800a0b6:	4b31      	ldr	r3, [pc, #196]	; (800a17c <MX_DataLogFusion_Process+0x118>)
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	601a      	str	r2, [r3, #0]
    MagOffset.y = 0;
 800a0bc:	4b2f      	ldr	r3, [pc, #188]	; (800a17c <MX_DataLogFusion_Process+0x118>)
 800a0be:	2200      	movs	r2, #0
 800a0c0:	605a      	str	r2, [r3, #4]
    MagOffset.z = 0;
 800a0c2:	4b2e      	ldr	r3, [pc, #184]	; (800a17c <MX_DataLogFusion_Process+0x118>)
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	609a      	str	r2, [r3, #8]

    /* Enable magnetometer calibration */
    MotionFX_manager_MagCal_start(ALGO_PERIOD);
 800a0c8:	200a      	movs	r0, #10
 800a0ca:	f001 ff60 	bl	800bf8e <MotionFX_manager_MagCal_start>
  }

  if (SensorReadRequest == 1U)
 800a0ce:	4b2c      	ldr	r3, [pc, #176]	; (800a180 <MX_DataLogFusion_Process+0x11c>)
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	b2db      	uxtb	r3, r3
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d146      	bne.n	800a166 <MX_DataLogFusion_Process+0x102>
  {
    SensorReadRequest = 0;
 800a0d8:	4b29      	ldr	r3, [pc, #164]	; (800a180 <MX_DataLogFusion_Process+0x11c>)
 800a0da:	2200      	movs	r2, #0
 800a0dc:	701a      	strb	r2, [r3, #0]

    /* Acquire data from enabled sensors and fill Msg stream */
    RTC_Handler(&msg_dat);
 800a0de:	4829      	ldr	r0, [pc, #164]	; (800a184 <MX_DataLogFusion_Process+0x120>)
 800a0e0:	f000 f870 	bl	800a1c4 <RTC_Handler>
    Accelero_Sensor_Handler(&msg_dat);
 800a0e4:	4827      	ldr	r0, [pc, #156]	; (800a184 <MX_DataLogFusion_Process+0x120>)
 800a0e6:	f000 f9d5 	bl	800a494 <Accelero_Sensor_Handler>
    Gyro_Sensor_Handler(&msg_dat);
 800a0ea:	4826      	ldr	r0, [pc, #152]	; (800a184 <MX_DataLogFusion_Process+0x120>)
 800a0ec:	f000 fa2c 	bl	800a548 <Gyro_Sensor_Handler>
    Magneto_Sensor_Handler(&msg_dat);
 800a0f0:	4824      	ldr	r0, [pc, #144]	; (800a184 <MX_DataLogFusion_Process+0x120>)
 800a0f2:	f000 fa83 	bl	800a5fc <Magneto_Sensor_Handler>
    Humidity_Sensor_Handler(&msg_dat);
 800a0f6:	4823      	ldr	r0, [pc, #140]	; (800a184 <MX_DataLogFusion_Process+0x120>)
 800a0f8:	f000 fbc2 	bl	800a880 <Humidity_Sensor_Handler>
    Temperature_Sensor_Handler(&msg_dat);
 800a0fc:	4821      	ldr	r0, [pc, #132]	; (800a184 <MX_DataLogFusion_Process+0x120>)
 800a0fe:	f000 fb8f 	bl	800a820 <Temperature_Sensor_Handler>
    Pressure_Sensor_Handler(&msg_dat);
 800a102:	4820      	ldr	r0, [pc, #128]	; (800a184 <MX_DataLogFusion_Process+0x120>)
 800a104:	f000 fb5c 	bl	800a7c0 <Pressure_Sensor_Handler>

    /* Sensor Fusion specific part */
    FX_Data_Handler(&msg_dat);
 800a108:	481e      	ldr	r0, [pc, #120]	; (800a184 <MX_DataLogFusion_Process+0x120>)
 800a10a:	f000 f8cf 	bl	800a2ac <FX_Data_Handler>

    /* Send data stream */
    INIT_STREAMING_HEADER(&msg_dat);
 800a10e:	481d      	ldr	r0, [pc, #116]	; (800a184 <MX_DataLogFusion_Process+0x120>)
 800a110:	f001 fa40 	bl	800b594 <INIT_STREAMING_HEADER>
    msg_dat.Len = STREAMING_MSG_LENGTH;
 800a114:	4b1b      	ldr	r3, [pc, #108]	; (800a184 <MX_DataLogFusion_Process+0x120>)
 800a116:	2277      	movs	r2, #119	; 0x77
 800a118:	601a      	str	r2, [r3, #0]

    if (UseOfflineData == 1U)
 800a11a:	4b1b      	ldr	r3, [pc, #108]	; (800a188 <MX_DataLogFusion_Process+0x124>)
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d11e      	bne.n	800a160 <MX_DataLogFusion_Process+0xfc>
    {
      OfflineDataCount--;
 800a122:	4b1a      	ldr	r3, [pc, #104]	; (800a18c <MX_DataLogFusion_Process+0x128>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	3b01      	subs	r3, #1
 800a128:	4a18      	ldr	r2, [pc, #96]	; (800a18c <MX_DataLogFusion_Process+0x128>)
 800a12a:	6013      	str	r3, [r2, #0]
      if (OfflineDataCount < 0)
 800a12c:	4b17      	ldr	r3, [pc, #92]	; (800a18c <MX_DataLogFusion_Process+0x128>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2b00      	cmp	r3, #0
 800a132:	da02      	bge.n	800a13a <MX_DataLogFusion_Process+0xd6>
      {
        OfflineDataCount = 0;
 800a134:	4b15      	ldr	r3, [pc, #84]	; (800a18c <MX_DataLogFusion_Process+0x128>)
 800a136:	2200      	movs	r2, #0
 800a138:	601a      	str	r2, [r3, #0]
      }

      OfflineDataReadIndex++;
 800a13a:	4b15      	ldr	r3, [pc, #84]	; (800a190 <MX_DataLogFusion_Process+0x12c>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	3301      	adds	r3, #1
 800a140:	4a13      	ldr	r2, [pc, #76]	; (800a190 <MX_DataLogFusion_Process+0x12c>)
 800a142:	6013      	str	r3, [r2, #0]
      if (OfflineDataReadIndex >= OFFLINE_DATA_SIZE)
 800a144:	4b12      	ldr	r3, [pc, #72]	; (800a190 <MX_DataLogFusion_Process+0x12c>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	2b07      	cmp	r3, #7
 800a14a:	dd02      	ble.n	800a152 <MX_DataLogFusion_Process+0xee>
      {
        OfflineDataReadIndex = 0;
 800a14c:	4b10      	ldr	r3, [pc, #64]	; (800a190 <MX_DataLogFusion_Process+0x12c>)
 800a14e:	2200      	movs	r2, #0
 800a150:	601a      	str	r2, [r3, #0]
      }

      if (OfflineDataCount > 0)
 800a152:	4b0e      	ldr	r3, [pc, #56]	; (800a18c <MX_DataLogFusion_Process+0x128>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	2b00      	cmp	r3, #0
 800a158:	dd02      	ble.n	800a160 <MX_DataLogFusion_Process+0xfc>
      {
        SensorReadRequest = 1;
 800a15a:	4b09      	ldr	r3, [pc, #36]	; (800a180 <MX_DataLogFusion_Process+0x11c>)
 800a15c:	2201      	movs	r2, #1
 800a15e:	701a      	strb	r2, [r3, #0]
      }
    }
    UART_SendMsg(&msg_dat);
 800a160:	4808      	ldr	r0, [pc, #32]	; (800a184 <MX_DataLogFusion_Process+0x120>)
 800a162:	f000 fd31 	bl	800abc8 <UART_SendMsg>
  }
}
 800a166:	bf00      	nop
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	20000a70 	.word	0x20000a70
 800a170:	20000a5c 	.word	0x20000a5c
 800a174:	20000a24 	.word	0x20000a24
 800a178:	20000a6c 	.word	0x20000a6c
 800a17c:	20000a60 	.word	0x20000a60
 800a180:	20000870 	.word	0x20000870
 800a184:	20000b74 	.word	0x20000b74
 800a188:	20000871 	.word	0x20000871
 800a18c:	20000a1c 	.word	0x20000a1c
 800a190:	20000a14 	.word	0x20000a14

0800a194 <Init_Sensors>:
 * @brief  Initialize all sensors
 * @param  None
 * @retval None
 */
static void Init_Sensors(void)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	af00      	add	r7, sp, #0
  BSP_SENSOR_ACC_Init();
 800a198:	f000 fe48 	bl	800ae2c <BSP_SENSOR_ACC_Init>
  BSP_SENSOR_GYR_Init();
 800a19c:	f000 fe4e 	bl	800ae3c <BSP_SENSOR_GYR_Init>
  BSP_SENSOR_MAG_Init();
 800a1a0:	f000 fe54 	bl	800ae4c <BSP_SENSOR_MAG_Init>
  BSP_SENSOR_PRESS_Init();
 800a1a4:	f000 fe58 	bl	800ae58 <BSP_SENSOR_PRESS_Init>
  BSP_SENSOR_TEMP_Init();
 800a1a8:	f000 fe5c 	bl	800ae64 <BSP_SENSOR_TEMP_Init>
  BSP_SENSOR_HUM_Init();
 800a1ac:	f000 fe60 	bl	800ae70 <BSP_SENSOR_HUM_Init>

  BSP_SENSOR_ACC_SetOutputDataRate(ACC_ODR);
 800a1b0:	4803      	ldr	r0, [pc, #12]	; (800a1c0 <Init_Sensors+0x2c>)
 800a1b2:	f000 fefa 	bl	800afaa <BSP_SENSOR_ACC_SetOutputDataRate>
  BSP_SENSOR_ACC_SetFullScale(ACC_FS);
 800a1b6:	2004      	movs	r0, #4
 800a1b8:	f000 ff04 	bl	800afc4 <BSP_SENSOR_ACC_SetFullScale>
}
 800a1bc:	bf00      	nop
 800a1be:	bd80      	pop	{r7, pc}
 800a1c0:	42c80000 	.word	0x42c80000

0800a1c4 <RTC_Handler>:
 * @brief  Handles the time+date getting/sending
 * @param  Msg the time+date part of the stream
 * @retval None
 */
static void RTC_Handler(TMsg *Msg)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b08c      	sub	sp, #48	; 0x30
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  uint8_t sub_sec = 0;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructure;
  uint32_t ans_uint32;
  int32_t ans_int32;
  uint32_t RtcSynchPrediv = hrtc.Init.SynchPrediv;
 800a1d2:	4b32      	ldr	r3, [pc, #200]	; (800a29c <RTC_Handler+0xd8>)
 800a1d4:	68db      	ldr	r3, [r3, #12]
 800a1d6:	62bb      	str	r3, [r7, #40]	; 0x28

  if (UseOfflineData == 1)
 800a1d8:	4b31      	ldr	r3, [pc, #196]	; (800a2a0 <RTC_Handler+0xdc>)
 800a1da:	781b      	ldrb	r3, [r3, #0]
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	d12b      	bne.n	800a238 <RTC_Handler+0x74>
  {
    Msg->Data[3] = (uint8_t)OfflineData[OfflineDataReadIndex].hours;
 800a1e0:	4b30      	ldr	r3, [pc, #192]	; (800a2a4 <RTC_Handler+0xe0>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4a30      	ldr	r2, [pc, #192]	; (800a2a8 <RTC_Handler+0xe4>)
 800a1e6:	2134      	movs	r1, #52	; 0x34
 800a1e8:	fb01 f303 	mul.w	r3, r1, r3
 800a1ec:	4413      	add	r3, r2
 800a1ee:	781a      	ldrb	r2, [r3, #0]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	71da      	strb	r2, [r3, #7]
    Msg->Data[4] = (uint8_t)OfflineData[OfflineDataReadIndex].minutes;
 800a1f4:	4b2b      	ldr	r3, [pc, #172]	; (800a2a4 <RTC_Handler+0xe0>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4a2b      	ldr	r2, [pc, #172]	; (800a2a8 <RTC_Handler+0xe4>)
 800a1fa:	2134      	movs	r1, #52	; 0x34
 800a1fc:	fb01 f303 	mul.w	r3, r1, r3
 800a200:	4413      	add	r3, r2
 800a202:	3301      	adds	r3, #1
 800a204:	781a      	ldrb	r2, [r3, #0]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	721a      	strb	r2, [r3, #8]
    Msg->Data[5] = (uint8_t)OfflineData[OfflineDataReadIndex].seconds;
 800a20a:	4b26      	ldr	r3, [pc, #152]	; (800a2a4 <RTC_Handler+0xe0>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	4a26      	ldr	r2, [pc, #152]	; (800a2a8 <RTC_Handler+0xe4>)
 800a210:	2134      	movs	r1, #52	; 0x34
 800a212:	fb01 f303 	mul.w	r3, r1, r3
 800a216:	4413      	add	r3, r2
 800a218:	3302      	adds	r3, #2
 800a21a:	781a      	ldrb	r2, [r3, #0]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	725a      	strb	r2, [r3, #9]
    Msg->Data[6] = (uint8_t)OfflineData[OfflineDataReadIndex].subsec;
 800a220:	4b20      	ldr	r3, [pc, #128]	; (800a2a4 <RTC_Handler+0xe0>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4a20      	ldr	r2, [pc, #128]	; (800a2a8 <RTC_Handler+0xe4>)
 800a226:	2134      	movs	r1, #52	; 0x34
 800a228:	fb01 f303 	mul.w	r3, r1, r3
 800a22c:	4413      	add	r3, r2
 800a22e:	3303      	adds	r3, #3
 800a230:	781a      	ldrb	r2, [r3, #0]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	729a      	strb	r2, [r3, #10]
    Msg->Data[3] = (uint8_t)stimestructure.Hours;
    Msg->Data[4] = (uint8_t)stimestructure.Minutes;
    Msg->Data[5] = (uint8_t)stimestructure.Seconds;
    Msg->Data[6] = sub_sec;
  }
}
 800a236:	e02d      	b.n	800a294 <RTC_Handler+0xd0>
    (void)HAL_RTC_GetTime(&hrtc, &stimestructure, FORMAT_BIN);
 800a238:	f107 0308 	add.w	r3, r7, #8
 800a23c:	2200      	movs	r2, #0
 800a23e:	4619      	mov	r1, r3
 800a240:	4816      	ldr	r0, [pc, #88]	; (800a29c <RTC_Handler+0xd8>)
 800a242:	f7fd ff31 	bl	80080a8 <HAL_RTC_GetTime>
    (void)HAL_RTC_GetDate(&hrtc, &sdatestructureget, FORMAT_BIN);
 800a246:	f107 031c 	add.w	r3, r7, #28
 800a24a:	2200      	movs	r2, #0
 800a24c:	4619      	mov	r1, r3
 800a24e:	4813      	ldr	r0, [pc, #76]	; (800a29c <RTC_Handler+0xd8>)
 800a250:	f7fe f812 	bl	8008278 <HAL_RTC_GetDate>
    ans_int32 = (RtcSynchPrediv - (int32_t)stimestructure.SubSeconds) * 100;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a258:	1ad3      	subs	r3, r2, r3
 800a25a:	2264      	movs	r2, #100	; 0x64
 800a25c:	fb02 f303 	mul.w	r3, r2, r3
 800a260:	627b      	str	r3, [r7, #36]	; 0x24
    ans_int32 /= RtcSynchPrediv + 1;
 800a262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a266:	3301      	adds	r3, #1
 800a268:	fbb2 f3f3 	udiv	r3, r2, r3
 800a26c:	627b      	str	r3, [r7, #36]	; 0x24
    ans_uint32 = (uint32_t)ans_int32 & 0xFFU;
 800a26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a270:	b2db      	uxtb	r3, r3
 800a272:	623b      	str	r3, [r7, #32]
    sub_sec = (uint8_t)ans_uint32;
 800a274:	6a3b      	ldr	r3, [r7, #32]
 800a276:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    Msg->Data[3] = (uint8_t)stimestructure.Hours;
 800a27a:	7a3a      	ldrb	r2, [r7, #8]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	71da      	strb	r2, [r3, #7]
    Msg->Data[4] = (uint8_t)stimestructure.Minutes;
 800a280:	7a7a      	ldrb	r2, [r7, #9]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	721a      	strb	r2, [r3, #8]
    Msg->Data[5] = (uint8_t)stimestructure.Seconds;
 800a286:	7aba      	ldrb	r2, [r7, #10]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	725a      	strb	r2, [r3, #9]
    Msg->Data[6] = sub_sec;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a292:	729a      	strb	r2, [r3, #10]
}
 800a294:	bf00      	nop
 800a296:	3730      	adds	r7, #48	; 0x30
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}
 800a29c:	20000628 	.word	0x20000628
 800a2a0:	20000871 	.word	0x20000871
 800a2a4:	20000a14 	.word	0x20000a14
 800a2a8:	20000874 	.word	0x20000874

0800a2ac <FX_Data_Handler>:
 * @brief  Sensor Fusion data handler
 * @param  Msg the Sensor Fusion data part of the stream
 * @retval None
 */
static void FX_Data_Handler(TMsg *Msg)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b09e      	sub	sp, #120	; 0x78
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  uint32_t elapsed_time_us = 0U;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	677b      	str	r3, [r7, #116]	; 0x74
  MFX_input_t data_in;
  MFX_input_t *pdata_in = &data_in;
 800a2b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a2bc:	673b      	str	r3, [r7, #112]	; 0x70
  MFX_output_t data_out;
  MFX_output_t *pdata_out = &data_out;
 800a2be:	f107 030c 	add.w	r3, r7, #12
 800a2c2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 800a2c4:	4b64      	ldr	r3, [pc, #400]	; (800a458 <FX_Data_Handler+0x1ac>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f003 0310 	and.w	r3, r3, #16
 800a2cc:	2b10      	cmp	r3, #16
 800a2ce:	f040 80bf 	bne.w	800a450 <FX_Data_Handler+0x1a4>
  {
    if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
 800a2d2:	4b61      	ldr	r3, [pc, #388]	; (800a458 <FX_Data_Handler+0x1ac>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f003 0320 	and.w	r3, r3, #32
 800a2da:	2b20      	cmp	r3, #32
 800a2dc:	f040 80b8 	bne.w	800a450 <FX_Data_Handler+0x1a4>
    {
      if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
 800a2e0:	4b5d      	ldr	r3, [pc, #372]	; (800a458 <FX_Data_Handler+0x1ac>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2e8:	2b40      	cmp	r3, #64	; 0x40
 800a2ea:	f040 80b1 	bne.w	800a450 <FX_Data_Handler+0x1a4>
      {
        /* Convert angular velocity from [mdps] to [dps] */
        data_in.gyro[0] = (float)GyrValue.x * FROM_MDPS_TO_DPS;
 800a2ee:	4b5b      	ldr	r3, [pc, #364]	; (800a45c <FX_Data_Handler+0x1b0>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f7f6 fd0a 	bl	8000d0c <__aeabi_i2f>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	4959      	ldr	r1, [pc, #356]	; (800a460 <FX_Data_Handler+0x1b4>)
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f7f6 fd59 	bl	8000db4 <__aeabi_fmul>
 800a302:	4603      	mov	r3, r0
 800a304:	663b      	str	r3, [r7, #96]	; 0x60
        data_in.gyro[1] = (float)GyrValue.y * FROM_MDPS_TO_DPS;
 800a306:	4b55      	ldr	r3, [pc, #340]	; (800a45c <FX_Data_Handler+0x1b0>)
 800a308:	685b      	ldr	r3, [r3, #4]
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7f6 fcfe 	bl	8000d0c <__aeabi_i2f>
 800a310:	4603      	mov	r3, r0
 800a312:	4953      	ldr	r1, [pc, #332]	; (800a460 <FX_Data_Handler+0x1b4>)
 800a314:	4618      	mov	r0, r3
 800a316:	f7f6 fd4d 	bl	8000db4 <__aeabi_fmul>
 800a31a:	4603      	mov	r3, r0
 800a31c:	667b      	str	r3, [r7, #100]	; 0x64
        data_in.gyro[2] = (float)GyrValue.z * FROM_MDPS_TO_DPS;
 800a31e:	4b4f      	ldr	r3, [pc, #316]	; (800a45c <FX_Data_Handler+0x1b0>)
 800a320:	689b      	ldr	r3, [r3, #8]
 800a322:	4618      	mov	r0, r3
 800a324:	f7f6 fcf2 	bl	8000d0c <__aeabi_i2f>
 800a328:	4603      	mov	r3, r0
 800a32a:	494d      	ldr	r1, [pc, #308]	; (800a460 <FX_Data_Handler+0x1b4>)
 800a32c:	4618      	mov	r0, r3
 800a32e:	f7f6 fd41 	bl	8000db4 <__aeabi_fmul>
 800a332:	4603      	mov	r3, r0
 800a334:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Convert acceleration from [mg] to [g] */
        data_in.acc[0] = (float)AccValue.x * FROM_MG_TO_G;
 800a336:	4b4b      	ldr	r3, [pc, #300]	; (800a464 <FX_Data_Handler+0x1b8>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4618      	mov	r0, r3
 800a33c:	f7f6 fce6 	bl	8000d0c <__aeabi_i2f>
 800a340:	4603      	mov	r3, r0
 800a342:	4947      	ldr	r1, [pc, #284]	; (800a460 <FX_Data_Handler+0x1b4>)
 800a344:	4618      	mov	r0, r3
 800a346:	f7f6 fd35 	bl	8000db4 <__aeabi_fmul>
 800a34a:	4603      	mov	r3, r0
 800a34c:	657b      	str	r3, [r7, #84]	; 0x54
        data_in.acc[1] = (float)AccValue.y * FROM_MG_TO_G;
 800a34e:	4b45      	ldr	r3, [pc, #276]	; (800a464 <FX_Data_Handler+0x1b8>)
 800a350:	685b      	ldr	r3, [r3, #4]
 800a352:	4618      	mov	r0, r3
 800a354:	f7f6 fcda 	bl	8000d0c <__aeabi_i2f>
 800a358:	4603      	mov	r3, r0
 800a35a:	4941      	ldr	r1, [pc, #260]	; (800a460 <FX_Data_Handler+0x1b4>)
 800a35c:	4618      	mov	r0, r3
 800a35e:	f7f6 fd29 	bl	8000db4 <__aeabi_fmul>
 800a362:	4603      	mov	r3, r0
 800a364:	65bb      	str	r3, [r7, #88]	; 0x58
        data_in.acc[2] = (float)AccValue.z * FROM_MG_TO_G;
 800a366:	4b3f      	ldr	r3, [pc, #252]	; (800a464 <FX_Data_Handler+0x1b8>)
 800a368:	689b      	ldr	r3, [r3, #8]
 800a36a:	4618      	mov	r0, r3
 800a36c:	f7f6 fcce 	bl	8000d0c <__aeabi_i2f>
 800a370:	4603      	mov	r3, r0
 800a372:	493b      	ldr	r1, [pc, #236]	; (800a460 <FX_Data_Handler+0x1b4>)
 800a374:	4618      	mov	r0, r3
 800a376:	f7f6 fd1d 	bl	8000db4 <__aeabi_fmul>
 800a37a:	4603      	mov	r3, r0
 800a37c:	65fb      	str	r3, [r7, #92]	; 0x5c

        /* Convert magnetic field intensity from [mGauss] to [uT / 50] */
        data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 800a37e:	4b3a      	ldr	r3, [pc, #232]	; (800a468 <FX_Data_Handler+0x1bc>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	4618      	mov	r0, r3
 800a384:	f7f6 fcc2 	bl	8000d0c <__aeabi_i2f>
 800a388:	4603      	mov	r3, r0
 800a38a:	4938      	ldr	r1, [pc, #224]	; (800a46c <FX_Data_Handler+0x1c0>)
 800a38c:	4618      	mov	r0, r3
 800a38e:	f7f6 fd11 	bl	8000db4 <__aeabi_fmul>
 800a392:	4603      	mov	r3, r0
 800a394:	64bb      	str	r3, [r7, #72]	; 0x48
        data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 800a396:	4b34      	ldr	r3, [pc, #208]	; (800a468 <FX_Data_Handler+0x1bc>)
 800a398:	685b      	ldr	r3, [r3, #4]
 800a39a:	4618      	mov	r0, r3
 800a39c:	f7f6 fcb6 	bl	8000d0c <__aeabi_i2f>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	4932      	ldr	r1, [pc, #200]	; (800a46c <FX_Data_Handler+0x1c0>)
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f7f6 fd05 	bl	8000db4 <__aeabi_fmul>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	64fb      	str	r3, [r7, #76]	; 0x4c
        data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 800a3ae:	4b2e      	ldr	r3, [pc, #184]	; (800a468 <FX_Data_Handler+0x1bc>)
 800a3b0:	689b      	ldr	r3, [r3, #8]
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f7f6 fcaa 	bl	8000d0c <__aeabi_i2f>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	492c      	ldr	r1, [pc, #176]	; (800a46c <FX_Data_Handler+0x1c0>)
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f7f6 fcf9 	bl	8000db4 <__aeabi_fmul>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	653b      	str	r3, [r7, #80]	; 0x50

        /* Run Sensor Fusion algorithm */
        BSP_LED_On(LED2);
 800a3c6:	2000      	movs	r0, #0
 800a3c8:	f7fa f9b2 	bl	8004730 <BSP_LED_On>
        DWT_Start();
 800a3cc:	f000 fb0e 	bl	800a9ec <DWT_Start>
        MotionFX_manager_run(pdata_in, pdata_out, MOTION_FX_ENGINE_DELTATIME);
 800a3d0:	4a27      	ldr	r2, [pc, #156]	; (800a470 <FX_Data_Handler+0x1c4>)
 800a3d2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800a3d4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800a3d6:	f001 fd69 	bl	800beac <MotionFX_manager_run>
        elapsed_time_us = DWT_Stop();
 800a3da:	f000 fb19 	bl	800aa10 <DWT_Stop>
 800a3de:	6778      	str	r0, [r7, #116]	; 0x74
        BSP_LED_Off(LED2);
 800a3e0:	2000      	movs	r0, #0
 800a3e2:	f7fa f9bb 	bl	800475c <BSP_LED_Off>

        (void)memcpy(&Msg->Data[55], (void *)pdata_out->quaternion, 4U * sizeof(float));
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f103 003b 	add.w	r0, r3, #59	; 0x3b
 800a3ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3ee:	330c      	adds	r3, #12
 800a3f0:	2210      	movs	r2, #16
 800a3f2:	4619      	mov	r1, r3
 800a3f4:	f00d fb6c 	bl	8017ad0 <memcpy>
        (void)memcpy(&Msg->Data[71], (void *)pdata_out->rotation, 3U * sizeof(float));
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	334b      	adds	r3, #75	; 0x4b
 800a3fc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800a3fe:	220c      	movs	r2, #12
 800a400:	4618      	mov	r0, r3
 800a402:	f00d fb65 	bl	8017ad0 <memcpy>
        (void)memcpy(&Msg->Data[83], (void *)pdata_out->gravity, 3U * sizeof(float));
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f103 0057 	add.w	r0, r3, #87	; 0x57
 800a40c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a40e:	331c      	adds	r3, #28
 800a410:	220c      	movs	r2, #12
 800a412:	4619      	mov	r1, r3
 800a414:	f00d fb5c 	bl	8017ad0 <memcpy>
        (void)memcpy(&Msg->Data[95], (void *)pdata_out->linear_acceleration, 3U * sizeof(float));
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f103 0063 	add.w	r0, r3, #99	; 0x63
 800a41e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a420:	3328      	adds	r3, #40	; 0x28
 800a422:	220c      	movs	r2, #12
 800a424:	4619      	mov	r1, r3
 800a426:	f00d fb53 	bl	8017ad0 <memcpy>

        (void)memcpy(&Msg->Data[107], (void *) & (pdata_out->heading), sizeof(float));
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	336f      	adds	r3, #111	; 0x6f
 800a42e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a430:	3234      	adds	r2, #52	; 0x34
 800a432:	6812      	ldr	r2, [r2, #0]
 800a434:	601a      	str	r2, [r3, #0]
        (void)memcpy(&Msg->Data[111], (void *) & (pdata_out->headingErr), sizeof(float));
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	3373      	adds	r3, #115	; 0x73
 800a43a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a43c:	3238      	adds	r2, #56	; 0x38
 800a43e:	6812      	ldr	r2, [r2, #0]
 800a440:	601a      	str	r2, [r3, #0]

        Serialize_s32(&Msg->Data[115], (int32_t)elapsed_time_us, 4);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	3377      	adds	r3, #119	; 0x77
 800a446:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800a448:	2204      	movs	r2, #4
 800a44a:	4618      	mov	r0, r3
 800a44c:	f001 feac 	bl	800c1a8 <Serialize_s32>
      }
    }
  }
}
 800a450:	bf00      	nop
 800a452:	3778      	adds	r7, #120	; 0x78
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}
 800a458:	20000844 	.word	0x20000844
 800a45c:	20000a34 	.word	0x20000a34
 800a460:	3a83126f 	.word	0x3a83126f
 800a464:	20000a28 	.word	0x20000a28
 800a468:	20000a40 	.word	0x20000a40
 800a46c:	3b03126f 	.word	0x3b03126f
 800a470:	3c23d70a 	.word	0x3c23d70a

0800a474 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
 800a47a:	4603      	mov	r3, r0
 800a47c:	71fb      	strb	r3, [r7, #7]
  MagCalRequest = 1U;
 800a47e:	4b04      	ldr	r3, [pc, #16]	; (800a490 <BSP_PB_Callback+0x1c>)
 800a480:	2201      	movs	r2, #1
 800a482:	701a      	strb	r2, [r3, #0]
}
 800a484:	bf00      	nop
 800a486:	370c      	adds	r7, #12
 800a488:	46bd      	mov	sp, r7
 800a48a:	bc80      	pop	{r7}
 800a48c:	4770      	bx	lr
 800a48e:	bf00      	nop
 800a490:	20000a5c 	.word	0x20000a5c

0800a494 <Accelero_Sensor_Handler>:
 * @brief  Handles the ACC axes data getting/sending
 * @param  Msg the ACC part of the stream
 * @retval None
 */
static void Accelero_Sensor_Handler(TMsg *Msg)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b082      	sub	sp, #8
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 800a49c:	4b25      	ldr	r3, [pc, #148]	; (800a534 <Accelero_Sensor_Handler+0xa0>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f003 0310 	and.w	r3, r3, #16
 800a4a4:	2b10      	cmp	r3, #16
 800a4a6:	d140      	bne.n	800a52a <Accelero_Sensor_Handler+0x96>
  {
    if (UseOfflineData == 1)
 800a4a8:	4b23      	ldr	r3, [pc, #140]	; (800a538 <Accelero_Sensor_Handler+0xa4>)
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d121      	bne.n	800a4f4 <Accelero_Sensor_Handler+0x60>
    {
      AccValue.x = OfflineData[OfflineDataReadIndex].acceleration_x_mg;
 800a4b0:	4b22      	ldr	r3, [pc, #136]	; (800a53c <Accelero_Sensor_Handler+0xa8>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4a22      	ldr	r2, [pc, #136]	; (800a540 <Accelero_Sensor_Handler+0xac>)
 800a4b6:	2134      	movs	r1, #52	; 0x34
 800a4b8:	fb01 f303 	mul.w	r3, r1, r3
 800a4bc:	4413      	add	r3, r2
 800a4be:	3310      	adds	r3, #16
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	4a20      	ldr	r2, [pc, #128]	; (800a544 <Accelero_Sensor_Handler+0xb0>)
 800a4c4:	6013      	str	r3, [r2, #0]
      AccValue.y = OfflineData[OfflineDataReadIndex].acceleration_y_mg;
 800a4c6:	4b1d      	ldr	r3, [pc, #116]	; (800a53c <Accelero_Sensor_Handler+0xa8>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	4a1d      	ldr	r2, [pc, #116]	; (800a540 <Accelero_Sensor_Handler+0xac>)
 800a4cc:	2134      	movs	r1, #52	; 0x34
 800a4ce:	fb01 f303 	mul.w	r3, r1, r3
 800a4d2:	4413      	add	r3, r2
 800a4d4:	3314      	adds	r3, #20
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	4a1a      	ldr	r2, [pc, #104]	; (800a544 <Accelero_Sensor_Handler+0xb0>)
 800a4da:	6053      	str	r3, [r2, #4]
      AccValue.z = OfflineData[OfflineDataReadIndex].acceleration_z_mg;
 800a4dc:	4b17      	ldr	r3, [pc, #92]	; (800a53c <Accelero_Sensor_Handler+0xa8>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	4a17      	ldr	r2, [pc, #92]	; (800a540 <Accelero_Sensor_Handler+0xac>)
 800a4e2:	2134      	movs	r1, #52	; 0x34
 800a4e4:	fb01 f303 	mul.w	r3, r1, r3
 800a4e8:	4413      	add	r3, r2
 800a4ea:	3318      	adds	r3, #24
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	4a15      	ldr	r2, [pc, #84]	; (800a544 <Accelero_Sensor_Handler+0xb0>)
 800a4f0:	6093      	str	r3, [r2, #8]
 800a4f2:	e002      	b.n	800a4fa <Accelero_Sensor_Handler+0x66>
    }
    else
    {
      BSP_SENSOR_ACC_GetAxes(&AccValue);
 800a4f4:	4813      	ldr	r0, [pc, #76]	; (800a544 <Accelero_Sensor_Handler+0xb0>)
 800a4f6:	f000 fd11 	bl	800af1c <BSP_SENSOR_ACC_GetAxes>
    }

    Serialize_s32(&Msg->Data[19], (int32_t)AccValue.x, 4);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	3317      	adds	r3, #23
 800a4fe:	4a11      	ldr	r2, [pc, #68]	; (800a544 <Accelero_Sensor_Handler+0xb0>)
 800a500:	6811      	ldr	r1, [r2, #0]
 800a502:	2204      	movs	r2, #4
 800a504:	4618      	mov	r0, r3
 800a506:	f001 fe4f 	bl	800c1a8 <Serialize_s32>
    Serialize_s32(&Msg->Data[23], (int32_t)AccValue.y, 4);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	331b      	adds	r3, #27
 800a50e:	4a0d      	ldr	r2, [pc, #52]	; (800a544 <Accelero_Sensor_Handler+0xb0>)
 800a510:	6851      	ldr	r1, [r2, #4]
 800a512:	2204      	movs	r2, #4
 800a514:	4618      	mov	r0, r3
 800a516:	f001 fe47 	bl	800c1a8 <Serialize_s32>
    Serialize_s32(&Msg->Data[27], (int32_t)AccValue.z, 4);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	331f      	adds	r3, #31
 800a51e:	4a09      	ldr	r2, [pc, #36]	; (800a544 <Accelero_Sensor_Handler+0xb0>)
 800a520:	6891      	ldr	r1, [r2, #8]
 800a522:	2204      	movs	r2, #4
 800a524:	4618      	mov	r0, r3
 800a526:	f001 fe3f 	bl	800c1a8 <Serialize_s32>
  }
}
 800a52a:	bf00      	nop
 800a52c:	3708      	adds	r7, #8
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}
 800a532:	bf00      	nop
 800a534:	20000844 	.word	0x20000844
 800a538:	20000871 	.word	0x20000871
 800a53c:	20000a14 	.word	0x20000a14
 800a540:	20000874 	.word	0x20000874
 800a544:	20000a28 	.word	0x20000a28

0800a548 <Gyro_Sensor_Handler>:
 * @brief  Handles the GYR axes data getting/sending
 * @param  Msg the GYR part of the stream
 * @retval None
 */
static void Gyro_Sensor_Handler(TMsg *Msg)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b082      	sub	sp, #8
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
 800a550:	4b25      	ldr	r3, [pc, #148]	; (800a5e8 <Gyro_Sensor_Handler+0xa0>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f003 0320 	and.w	r3, r3, #32
 800a558:	2b20      	cmp	r3, #32
 800a55a:	d140      	bne.n	800a5de <Gyro_Sensor_Handler+0x96>
  {
    if (UseOfflineData == 1)
 800a55c:	4b23      	ldr	r3, [pc, #140]	; (800a5ec <Gyro_Sensor_Handler+0xa4>)
 800a55e:	781b      	ldrb	r3, [r3, #0]
 800a560:	2b01      	cmp	r3, #1
 800a562:	d121      	bne.n	800a5a8 <Gyro_Sensor_Handler+0x60>
    {
      GyrValue.x = OfflineData[OfflineDataReadIndex].angular_rate_x_mdps;
 800a564:	4b22      	ldr	r3, [pc, #136]	; (800a5f0 <Gyro_Sensor_Handler+0xa8>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4a22      	ldr	r2, [pc, #136]	; (800a5f4 <Gyro_Sensor_Handler+0xac>)
 800a56a:	2134      	movs	r1, #52	; 0x34
 800a56c:	fb01 f303 	mul.w	r3, r1, r3
 800a570:	4413      	add	r3, r2
 800a572:	331c      	adds	r3, #28
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	4a20      	ldr	r2, [pc, #128]	; (800a5f8 <Gyro_Sensor_Handler+0xb0>)
 800a578:	6013      	str	r3, [r2, #0]
      GyrValue.y = OfflineData[OfflineDataReadIndex].angular_rate_y_mdps;
 800a57a:	4b1d      	ldr	r3, [pc, #116]	; (800a5f0 <Gyro_Sensor_Handler+0xa8>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4a1d      	ldr	r2, [pc, #116]	; (800a5f4 <Gyro_Sensor_Handler+0xac>)
 800a580:	2134      	movs	r1, #52	; 0x34
 800a582:	fb01 f303 	mul.w	r3, r1, r3
 800a586:	4413      	add	r3, r2
 800a588:	3320      	adds	r3, #32
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4a1a      	ldr	r2, [pc, #104]	; (800a5f8 <Gyro_Sensor_Handler+0xb0>)
 800a58e:	6053      	str	r3, [r2, #4]
      GyrValue.z = OfflineData[OfflineDataReadIndex].angular_rate_z_mdps;
 800a590:	4b17      	ldr	r3, [pc, #92]	; (800a5f0 <Gyro_Sensor_Handler+0xa8>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	4a17      	ldr	r2, [pc, #92]	; (800a5f4 <Gyro_Sensor_Handler+0xac>)
 800a596:	2134      	movs	r1, #52	; 0x34
 800a598:	fb01 f303 	mul.w	r3, r1, r3
 800a59c:	4413      	add	r3, r2
 800a59e:	3324      	adds	r3, #36	; 0x24
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	4a15      	ldr	r2, [pc, #84]	; (800a5f8 <Gyro_Sensor_Handler+0xb0>)
 800a5a4:	6093      	str	r3, [r2, #8]
 800a5a6:	e002      	b.n	800a5ae <Gyro_Sensor_Handler+0x66>
    }
    else
    {
      BSP_SENSOR_GYR_GetAxes(&GyrValue);
 800a5a8:	4813      	ldr	r0, [pc, #76]	; (800a5f8 <Gyro_Sensor_Handler+0xb0>)
 800a5aa:	f000 fcc4 	bl	800af36 <BSP_SENSOR_GYR_GetAxes>
    }

    Serialize_s32(&Msg->Data[31], GyrValue.x, 4);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	3323      	adds	r3, #35	; 0x23
 800a5b2:	4a11      	ldr	r2, [pc, #68]	; (800a5f8 <Gyro_Sensor_Handler+0xb0>)
 800a5b4:	6811      	ldr	r1, [r2, #0]
 800a5b6:	2204      	movs	r2, #4
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f001 fdf5 	bl	800c1a8 <Serialize_s32>
    Serialize_s32(&Msg->Data[35], GyrValue.y, 4);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	3327      	adds	r3, #39	; 0x27
 800a5c2:	4a0d      	ldr	r2, [pc, #52]	; (800a5f8 <Gyro_Sensor_Handler+0xb0>)
 800a5c4:	6851      	ldr	r1, [r2, #4]
 800a5c6:	2204      	movs	r2, #4
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f001 fded 	bl	800c1a8 <Serialize_s32>
    Serialize_s32(&Msg->Data[39], GyrValue.z, 4);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	332b      	adds	r3, #43	; 0x2b
 800a5d2:	4a09      	ldr	r2, [pc, #36]	; (800a5f8 <Gyro_Sensor_Handler+0xb0>)
 800a5d4:	6891      	ldr	r1, [r2, #8]
 800a5d6:	2204      	movs	r2, #4
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f001 fde5 	bl	800c1a8 <Serialize_s32>
  }
}
 800a5de:	bf00      	nop
 800a5e0:	3708      	adds	r7, #8
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
 800a5e6:	bf00      	nop
 800a5e8:	20000844 	.word	0x20000844
 800a5ec:	20000871 	.word	0x20000871
 800a5f0:	20000a14 	.word	0x20000a14
 800a5f4:	20000874 	.word	0x20000874
 800a5f8:	20000a34 	.word	0x20000a34

0800a5fc <Magneto_Sensor_Handler>:
 * @brief  Handles the MAG axes data getting/sending
 * @param  Msg the MAG part of the stream
 * @retval None
 */
static void Magneto_Sensor_Handler(TMsg *Msg)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b08c      	sub	sp, #48	; 0x30
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  float ans_float;
  MFX_MagCal_input_t mag_data_in;
  MFX_MagCal_output_t mag_data_out;

  if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
 800a604:	4b64      	ldr	r3, [pc, #400]	; (800a798 <Magneto_Sensor_Handler+0x19c>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a60c:	2b40      	cmp	r3, #64	; 0x40
 800a60e:	f040 80be 	bne.w	800a78e <Magneto_Sensor_Handler+0x192>
  {
    if (UseOfflineData == 1)
 800a612:	4b62      	ldr	r3, [pc, #392]	; (800a79c <Magneto_Sensor_Handler+0x1a0>)
 800a614:	781b      	ldrb	r3, [r3, #0]
 800a616:	2b01      	cmp	r3, #1
 800a618:	d121      	bne.n	800a65e <Magneto_Sensor_Handler+0x62>
    {
     MagValue.x = OfflineData[OfflineDataReadIndex].magnetic_field_x_mgauss;
 800a61a:	4b61      	ldr	r3, [pc, #388]	; (800a7a0 <Magneto_Sensor_Handler+0x1a4>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	4a61      	ldr	r2, [pc, #388]	; (800a7a4 <Magneto_Sensor_Handler+0x1a8>)
 800a620:	2134      	movs	r1, #52	; 0x34
 800a622:	fb01 f303 	mul.w	r3, r1, r3
 800a626:	4413      	add	r3, r2
 800a628:	3328      	adds	r3, #40	; 0x28
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4a5e      	ldr	r2, [pc, #376]	; (800a7a8 <Magneto_Sensor_Handler+0x1ac>)
 800a62e:	6013      	str	r3, [r2, #0]
     MagValue.y = OfflineData[OfflineDataReadIndex].magnetic_field_y_mgauss;
 800a630:	4b5b      	ldr	r3, [pc, #364]	; (800a7a0 <Magneto_Sensor_Handler+0x1a4>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4a5b      	ldr	r2, [pc, #364]	; (800a7a4 <Magneto_Sensor_Handler+0x1a8>)
 800a636:	2134      	movs	r1, #52	; 0x34
 800a638:	fb01 f303 	mul.w	r3, r1, r3
 800a63c:	4413      	add	r3, r2
 800a63e:	332c      	adds	r3, #44	; 0x2c
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	4a59      	ldr	r2, [pc, #356]	; (800a7a8 <Magneto_Sensor_Handler+0x1ac>)
 800a644:	6053      	str	r3, [r2, #4]
     MagValue.z = OfflineData[OfflineDataReadIndex].magnetic_field_z_mgauss;
 800a646:	4b56      	ldr	r3, [pc, #344]	; (800a7a0 <Magneto_Sensor_Handler+0x1a4>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	4a56      	ldr	r2, [pc, #344]	; (800a7a4 <Magneto_Sensor_Handler+0x1a8>)
 800a64c:	2134      	movs	r1, #52	; 0x34
 800a64e:	fb01 f303 	mul.w	r3, r1, r3
 800a652:	4413      	add	r3, r2
 800a654:	3330      	adds	r3, #48	; 0x30
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	4a53      	ldr	r2, [pc, #332]	; (800a7a8 <Magneto_Sensor_Handler+0x1ac>)
 800a65a:	6093      	str	r3, [r2, #8]
 800a65c:	e07f      	b.n	800a75e <Magneto_Sensor_Handler+0x162>
    }
    else
    {
      BSP_SENSOR_MAG_GetAxes(&MagValue);
 800a65e:	4852      	ldr	r0, [pc, #328]	; (800a7a8 <Magneto_Sensor_Handler+0x1ac>)
 800a660:	f000 fc76 	bl	800af50 <BSP_SENSOR_MAG_GetAxes>

      if (MagCalStatus == 0U)
 800a664:	4b51      	ldr	r3, [pc, #324]	; (800a7ac <Magneto_Sensor_Handler+0x1b0>)
 800a666:	781b      	ldrb	r3, [r3, #0]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d163      	bne.n	800a734 <Magneto_Sensor_Handler+0x138>
      {
        mag_data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 800a66c:	4b4e      	ldr	r3, [pc, #312]	; (800a7a8 <Magneto_Sensor_Handler+0x1ac>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	4618      	mov	r0, r3
 800a672:	f7f6 fb4b 	bl	8000d0c <__aeabi_i2f>
 800a676:	4603      	mov	r3, r0
 800a678:	494d      	ldr	r1, [pc, #308]	; (800a7b0 <Magneto_Sensor_Handler+0x1b4>)
 800a67a:	4618      	mov	r0, r3
 800a67c:	f7f6 fb9a 	bl	8000db4 <__aeabi_fmul>
 800a680:	4603      	mov	r3, r0
 800a682:	61fb      	str	r3, [r7, #28]
        mag_data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 800a684:	4b48      	ldr	r3, [pc, #288]	; (800a7a8 <Magneto_Sensor_Handler+0x1ac>)
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	4618      	mov	r0, r3
 800a68a:	f7f6 fb3f 	bl	8000d0c <__aeabi_i2f>
 800a68e:	4603      	mov	r3, r0
 800a690:	4947      	ldr	r1, [pc, #284]	; (800a7b0 <Magneto_Sensor_Handler+0x1b4>)
 800a692:	4618      	mov	r0, r3
 800a694:	f7f6 fb8e 	bl	8000db4 <__aeabi_fmul>
 800a698:	4603      	mov	r3, r0
 800a69a:	623b      	str	r3, [r7, #32]
        mag_data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 800a69c:	4b42      	ldr	r3, [pc, #264]	; (800a7a8 <Magneto_Sensor_Handler+0x1ac>)
 800a69e:	689b      	ldr	r3, [r3, #8]
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f7f6 fb33 	bl	8000d0c <__aeabi_i2f>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	4941      	ldr	r1, [pc, #260]	; (800a7b0 <Magneto_Sensor_Handler+0x1b4>)
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f7f6 fb82 	bl	8000db4 <__aeabi_fmul>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	627b      	str	r3, [r7, #36]	; 0x24

        mag_data_in.time_stamp = (int)TimeStamp;
 800a6b4:	4b3f      	ldr	r3, [pc, #252]	; (800a7b4 <Magneto_Sensor_Handler+0x1b8>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	62bb      	str	r3, [r7, #40]	; 0x28
        TimeStamp += (uint32_t)ALGO_PERIOD;
 800a6ba:	4b3e      	ldr	r3, [pc, #248]	; (800a7b4 <Magneto_Sensor_Handler+0x1b8>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	330a      	adds	r3, #10
 800a6c0:	4a3c      	ldr	r2, [pc, #240]	; (800a7b4 <Magneto_Sensor_Handler+0x1b8>)
 800a6c2:	6013      	str	r3, [r2, #0]

        MotionFX_manager_MagCal_run(&mag_data_in, &mag_data_out);
 800a6c4:	f107 020c 	add.w	r2, r7, #12
 800a6c8:	f107 031c 	add.w	r3, r7, #28
 800a6cc:	4611      	mov	r1, r2
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f001 fc4e 	bl	800bf70 <MotionFX_manager_MagCal_run>

        if (mag_data_out.cal_quality == MFX_MAGCALGOOD)
 800a6d4:	7e3b      	ldrb	r3, [r7, #24]
 800a6d6:	2b03      	cmp	r3, #3
 800a6d8:	d12c      	bne.n	800a734 <Magneto_Sensor_Handler+0x138>
        {
          MagCalStatus = 1;
 800a6da:	4b34      	ldr	r3, [pc, #208]	; (800a7ac <Magneto_Sensor_Handler+0x1b0>)
 800a6dc:	2201      	movs	r2, #1
 800a6de:	701a      	strb	r2, [r3, #0]

          ans_float = (mag_data_out.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	4935      	ldr	r1, [pc, #212]	; (800a7b8 <Magneto_Sensor_Handler+0x1bc>)
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f7f6 fb65 	bl	8000db4 <__aeabi_fmul>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	62fb      	str	r3, [r7, #44]	; 0x2c
          MagOffset.x = (int32_t)ans_float;
 800a6ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a6f0:	f7f6 fd3c 	bl	800116c <__aeabi_f2iz>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	4a31      	ldr	r2, [pc, #196]	; (800a7bc <Magneto_Sensor_Handler+0x1c0>)
 800a6f8:	6013      	str	r3, [r2, #0]
          ans_float = (mag_data_out.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	492e      	ldr	r1, [pc, #184]	; (800a7b8 <Magneto_Sensor_Handler+0x1bc>)
 800a6fe:	4618      	mov	r0, r3
 800a700:	f7f6 fb58 	bl	8000db4 <__aeabi_fmul>
 800a704:	4603      	mov	r3, r0
 800a706:	62fb      	str	r3, [r7, #44]	; 0x2c
          MagOffset.y = (int32_t)ans_float;
 800a708:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a70a:	f7f6 fd2f 	bl	800116c <__aeabi_f2iz>
 800a70e:	4603      	mov	r3, r0
 800a710:	4a2a      	ldr	r2, [pc, #168]	; (800a7bc <Magneto_Sensor_Handler+0x1c0>)
 800a712:	6053      	str	r3, [r2, #4]
          ans_float = (mag_data_out.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	4928      	ldr	r1, [pc, #160]	; (800a7b8 <Magneto_Sensor_Handler+0x1bc>)
 800a718:	4618      	mov	r0, r3
 800a71a:	f7f6 fb4b 	bl	8000db4 <__aeabi_fmul>
 800a71e:	4603      	mov	r3, r0
 800a720:	62fb      	str	r3, [r7, #44]	; 0x2c
          MagOffset.z = (int32_t)ans_float;
 800a722:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a724:	f7f6 fd22 	bl	800116c <__aeabi_f2iz>
 800a728:	4603      	mov	r3, r0
 800a72a:	4a24      	ldr	r2, [pc, #144]	; (800a7bc <Magneto_Sensor_Handler+0x1c0>)
 800a72c:	6093      	str	r3, [r2, #8]

          /* Disable magnetometer calibration */
          MotionFX_manager_MagCal_stop(ALGO_PERIOD);
 800a72e:	200a      	movs	r0, #10
 800a730:	f001 fc39 	bl	800bfa6 <MotionFX_manager_MagCal_stop>
        }
      }

      MagValue.x = (int32_t)(MagValue.x - MagOffset.x);
 800a734:	4b1c      	ldr	r3, [pc, #112]	; (800a7a8 <Magneto_Sensor_Handler+0x1ac>)
 800a736:	681a      	ldr	r2, [r3, #0]
 800a738:	4b20      	ldr	r3, [pc, #128]	; (800a7bc <Magneto_Sensor_Handler+0x1c0>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	1ad3      	subs	r3, r2, r3
 800a73e:	4a1a      	ldr	r2, [pc, #104]	; (800a7a8 <Magneto_Sensor_Handler+0x1ac>)
 800a740:	6013      	str	r3, [r2, #0]
      MagValue.y = (int32_t)(MagValue.y - MagOffset.y);
 800a742:	4b19      	ldr	r3, [pc, #100]	; (800a7a8 <Magneto_Sensor_Handler+0x1ac>)
 800a744:	685a      	ldr	r2, [r3, #4]
 800a746:	4b1d      	ldr	r3, [pc, #116]	; (800a7bc <Magneto_Sensor_Handler+0x1c0>)
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	1ad3      	subs	r3, r2, r3
 800a74c:	4a16      	ldr	r2, [pc, #88]	; (800a7a8 <Magneto_Sensor_Handler+0x1ac>)
 800a74e:	6053      	str	r3, [r2, #4]
      MagValue.z = (int32_t)(MagValue.z - MagOffset.z);
 800a750:	4b15      	ldr	r3, [pc, #84]	; (800a7a8 <Magneto_Sensor_Handler+0x1ac>)
 800a752:	689a      	ldr	r2, [r3, #8]
 800a754:	4b19      	ldr	r3, [pc, #100]	; (800a7bc <Magneto_Sensor_Handler+0x1c0>)
 800a756:	689b      	ldr	r3, [r3, #8]
 800a758:	1ad3      	subs	r3, r2, r3
 800a75a:	4a13      	ldr	r2, [pc, #76]	; (800a7a8 <Magneto_Sensor_Handler+0x1ac>)
 800a75c:	6093      	str	r3, [r2, #8]
    }

    Serialize_s32(&Msg->Data[43], MagValue.x, 4);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	332f      	adds	r3, #47	; 0x2f
 800a762:	4a11      	ldr	r2, [pc, #68]	; (800a7a8 <Magneto_Sensor_Handler+0x1ac>)
 800a764:	6811      	ldr	r1, [r2, #0]
 800a766:	2204      	movs	r2, #4
 800a768:	4618      	mov	r0, r3
 800a76a:	f001 fd1d 	bl	800c1a8 <Serialize_s32>
    Serialize_s32(&Msg->Data[47], MagValue.y, 4);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	3333      	adds	r3, #51	; 0x33
 800a772:	4a0d      	ldr	r2, [pc, #52]	; (800a7a8 <Magneto_Sensor_Handler+0x1ac>)
 800a774:	6851      	ldr	r1, [r2, #4]
 800a776:	2204      	movs	r2, #4
 800a778:	4618      	mov	r0, r3
 800a77a:	f001 fd15 	bl	800c1a8 <Serialize_s32>
    Serialize_s32(&Msg->Data[51], MagValue.z, 4);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	3337      	adds	r3, #55	; 0x37
 800a782:	4a09      	ldr	r2, [pc, #36]	; (800a7a8 <Magneto_Sensor_Handler+0x1ac>)
 800a784:	6891      	ldr	r1, [r2, #8]
 800a786:	2204      	movs	r2, #4
 800a788:	4618      	mov	r0, r3
 800a78a:	f001 fd0d 	bl	800c1a8 <Serialize_s32>
  }
}
 800a78e:	bf00      	nop
 800a790:	3730      	adds	r7, #48	; 0x30
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
 800a796:	bf00      	nop
 800a798:	20000844 	.word	0x20000844
 800a79c:	20000871 	.word	0x20000871
 800a7a0:	20000a14 	.word	0x20000a14
 800a7a4:	20000874 	.word	0x20000874
 800a7a8:	20000a40 	.word	0x20000a40
 800a7ac:	20000a6c 	.word	0x20000a6c
 800a7b0:	3b03126f 	.word	0x3b03126f
 800a7b4:	20000a58 	.word	0x20000a58
 800a7b8:	43fa0000 	.word	0x43fa0000
 800a7bc:	20000a60 	.word	0x20000a60

0800a7c0 <Pressure_Sensor_Handler>:
 * @brief  Handles the PRESS sensor data getting/sending.
 * @param  Msg the PRESS part of the stream
 * @retval None
 */
static void Pressure_Sensor_Handler(TMsg *Msg)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b082      	sub	sp, #8
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & PRESSURE_SENSOR) == PRESSURE_SENSOR)
 800a7c8:	4b10      	ldr	r3, [pc, #64]	; (800a80c <Pressure_Sensor_Handler+0x4c>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f003 0301 	and.w	r3, r3, #1
 800a7d0:	2b01      	cmp	r3, #1
 800a7d2:	d117      	bne.n	800a804 <Pressure_Sensor_Handler+0x44>
  {
    if (UseOfflineData == 1)
 800a7d4:	4b0e      	ldr	r3, [pc, #56]	; (800a810 <Pressure_Sensor_Handler+0x50>)
 800a7d6:	781b      	ldrb	r3, [r3, #0]
 800a7d8:	2b01      	cmp	r3, #1
 800a7da:	d10b      	bne.n	800a7f4 <Pressure_Sensor_Handler+0x34>
    {
      PressValue = OfflineData[OfflineDataReadIndex].pressure;
 800a7dc:	4b0d      	ldr	r3, [pc, #52]	; (800a814 <Pressure_Sensor_Handler+0x54>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	4a0d      	ldr	r2, [pc, #52]	; (800a818 <Pressure_Sensor_Handler+0x58>)
 800a7e2:	2134      	movs	r1, #52	; 0x34
 800a7e4:	fb01 f303 	mul.w	r3, r1, r3
 800a7e8:	4413      	add	r3, r2
 800a7ea:	3304      	adds	r3, #4
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	4a0b      	ldr	r2, [pc, #44]	; (800a81c <Pressure_Sensor_Handler+0x5c>)
 800a7f0:	6013      	str	r3, [r2, #0]
 800a7f2:	e002      	b.n	800a7fa <Pressure_Sensor_Handler+0x3a>
    }
    else
    {
      BSP_SENSOR_PRESS_GetValue(&PressValue);
 800a7f4:	4809      	ldr	r0, [pc, #36]	; (800a81c <Pressure_Sensor_Handler+0x5c>)
 800a7f6:	f000 fbbd 	bl	800af74 <BSP_SENSOR_PRESS_GetValue>
    }

    (void)memcpy(&Msg->Data[7], (void *)&PressValue, sizeof(float));
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	330b      	adds	r3, #11
 800a7fe:	4a07      	ldr	r2, [pc, #28]	; (800a81c <Pressure_Sensor_Handler+0x5c>)
 800a800:	6812      	ldr	r2, [r2, #0]
 800a802:	601a      	str	r2, [r3, #0]
  }
}
 800a804:	bf00      	nop
 800a806:	3708      	adds	r7, #8
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}
 800a80c:	20000844 	.word	0x20000844
 800a810:	20000871 	.word	0x20000871
 800a814:	20000a14 	.word	0x20000a14
 800a818:	20000874 	.word	0x20000874
 800a81c:	20000a4c 	.word	0x20000a4c

0800a820 <Temperature_Sensor_Handler>:
 * @brief  Handles the TEMP axes data getting/sending
 * @param  Msg the TEMP part of the stream
 * @retval None
 */
static void Temperature_Sensor_Handler(TMsg *Msg)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b082      	sub	sp, #8
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & TEMPERATURE_SENSOR) == TEMPERATURE_SENSOR)
 800a828:	4b10      	ldr	r3, [pc, #64]	; (800a86c <Temperature_Sensor_Handler+0x4c>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f003 0302 	and.w	r3, r3, #2
 800a830:	2b02      	cmp	r3, #2
 800a832:	d117      	bne.n	800a864 <Temperature_Sensor_Handler+0x44>
  {
    if (UseOfflineData == 1)
 800a834:	4b0e      	ldr	r3, [pc, #56]	; (800a870 <Temperature_Sensor_Handler+0x50>)
 800a836:	781b      	ldrb	r3, [r3, #0]
 800a838:	2b01      	cmp	r3, #1
 800a83a:	d10b      	bne.n	800a854 <Temperature_Sensor_Handler+0x34>
    {
      TempValue = OfflineData[OfflineDataReadIndex].temperature;
 800a83c:	4b0d      	ldr	r3, [pc, #52]	; (800a874 <Temperature_Sensor_Handler+0x54>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4a0d      	ldr	r2, [pc, #52]	; (800a878 <Temperature_Sensor_Handler+0x58>)
 800a842:	2134      	movs	r1, #52	; 0x34
 800a844:	fb01 f303 	mul.w	r3, r1, r3
 800a848:	4413      	add	r3, r2
 800a84a:	330c      	adds	r3, #12
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	4a0b      	ldr	r2, [pc, #44]	; (800a87c <Temperature_Sensor_Handler+0x5c>)
 800a850:	6013      	str	r3, [r2, #0]
 800a852:	e002      	b.n	800a85a <Temperature_Sensor_Handler+0x3a>
    }
    else
    {
      BSP_SENSOR_TEMP_GetValue(&TempValue);
 800a854:	4809      	ldr	r0, [pc, #36]	; (800a87c <Temperature_Sensor_Handler+0x5c>)
 800a856:	f000 fb96 	bl	800af86 <BSP_SENSOR_TEMP_GetValue>
    }

    (void)memcpy(&Msg->Data[11], (void *)&TempValue, sizeof(float));
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	330f      	adds	r3, #15
 800a85e:	4a07      	ldr	r2, [pc, #28]	; (800a87c <Temperature_Sensor_Handler+0x5c>)
 800a860:	6812      	ldr	r2, [r2, #0]
 800a862:	601a      	str	r2, [r3, #0]
  }
}
 800a864:	bf00      	nop
 800a866:	3708      	adds	r7, #8
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}
 800a86c:	20000844 	.word	0x20000844
 800a870:	20000871 	.word	0x20000871
 800a874:	20000a14 	.word	0x20000a14
 800a878:	20000874 	.word	0x20000874
 800a87c:	20000a50 	.word	0x20000a50

0800a880 <Humidity_Sensor_Handler>:
 * @brief  Handles the HUM axes data getting/sending
 * @param  Msg the HUM part of the stream
 * @retval None
 */
static void Humidity_Sensor_Handler(TMsg *Msg)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b082      	sub	sp, #8
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & HUMIDITY_SENSOR) == HUMIDITY_SENSOR)
 800a888:	4b10      	ldr	r3, [pc, #64]	; (800a8cc <Humidity_Sensor_Handler+0x4c>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f003 0304 	and.w	r3, r3, #4
 800a890:	2b04      	cmp	r3, #4
 800a892:	d117      	bne.n	800a8c4 <Humidity_Sensor_Handler+0x44>
  {
    if (UseOfflineData == 1)
 800a894:	4b0e      	ldr	r3, [pc, #56]	; (800a8d0 <Humidity_Sensor_Handler+0x50>)
 800a896:	781b      	ldrb	r3, [r3, #0]
 800a898:	2b01      	cmp	r3, #1
 800a89a:	d10b      	bne.n	800a8b4 <Humidity_Sensor_Handler+0x34>
    {
      HumValue = OfflineData[OfflineDataReadIndex].humidity;
 800a89c:	4b0d      	ldr	r3, [pc, #52]	; (800a8d4 <Humidity_Sensor_Handler+0x54>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4a0d      	ldr	r2, [pc, #52]	; (800a8d8 <Humidity_Sensor_Handler+0x58>)
 800a8a2:	2134      	movs	r1, #52	; 0x34
 800a8a4:	fb01 f303 	mul.w	r3, r1, r3
 800a8a8:	4413      	add	r3, r2
 800a8aa:	3308      	adds	r3, #8
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	4a0b      	ldr	r2, [pc, #44]	; (800a8dc <Humidity_Sensor_Handler+0x5c>)
 800a8b0:	6013      	str	r3, [r2, #0]
 800a8b2:	e002      	b.n	800a8ba <Humidity_Sensor_Handler+0x3a>
    }
    else
    {
      BSP_SENSOR_HUM_GetValue(&HumValue);
 800a8b4:	4809      	ldr	r0, [pc, #36]	; (800a8dc <Humidity_Sensor_Handler+0x5c>)
 800a8b6:	f000 fb6f 	bl	800af98 <BSP_SENSOR_HUM_GetValue>
    }

    (void)memcpy(&Msg->Data[15], (void *)&HumValue, sizeof(float));;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	3313      	adds	r3, #19
 800a8be:	4a07      	ldr	r2, [pc, #28]	; (800a8dc <Humidity_Sensor_Handler+0x5c>)
 800a8c0:	6812      	ldr	r2, [r2, #0]
 800a8c2:	601a      	str	r2, [r3, #0]
  }
}
 800a8c4:	bf00      	nop
 800a8c6:	3708      	adds	r7, #8
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}
 800a8cc:	20000844 	.word	0x20000844
 800a8d0:	20000871 	.word	0x20000871
 800a8d4:	20000a14 	.word	0x20000a14
 800a8d8:	20000874 	.word	0x20000874
 800a8dc:	20000a54 	.word	0x20000a54

0800a8e0 <TIM_Config>:
 * @brief  Timer configuration
 * @param  Freq the desired Timer frequency
 * @retval None
 */
static void TIM_Config(uint32_t Freq)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b086      	sub	sp, #24
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  const uint32_t tim_counter_clock = 2000; /* TIM counter clock 2 kHz */
 800a8e8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a8ec:	617b      	str	r3, [r7, #20]
  uint32_t prescaler_value = (uint32_t)((SystemCoreClock / tim_counter_clock) - 1);
 800a8ee:	4b14      	ldr	r3, [pc, #80]	; (800a940 <TIM_Config+0x60>)
 800a8f0:	681a      	ldr	r2, [r3, #0]
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8f8:	3b01      	subs	r3, #1
 800a8fa:	613b      	str	r3, [r7, #16]
  uint32_t period = (tim_counter_clock / Freq) - 1;
 800a8fc:	697a      	ldr	r2, [r7, #20]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	fbb2 f3f3 	udiv	r3, r2, r3
 800a904:	3b01      	subs	r3, #1
 800a906:	60fb      	str	r3, [r7, #12]

  BSP_IP_TIM_Handle.Init.Prescaler = prescaler_value;
 800a908:	4a0e      	ldr	r2, [pc, #56]	; (800a944 <TIM_Config+0x64>)
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	6053      	str	r3, [r2, #4]
  BSP_IP_TIM_Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a90e:	4b0d      	ldr	r3, [pc, #52]	; (800a944 <TIM_Config+0x64>)
 800a910:	2200      	movs	r2, #0
 800a912:	609a      	str	r2, [r3, #8]
  BSP_IP_TIM_Handle.Init.Period = period;
 800a914:	4a0b      	ldr	r2, [pc, #44]	; (800a944 <TIM_Config+0x64>)
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	60d3      	str	r3, [r2, #12]
  BSP_IP_TIM_Handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a91a:	4b0a      	ldr	r3, [pc, #40]	; (800a944 <TIM_Config+0x64>)
 800a91c:	2200      	movs	r2, #0
 800a91e:	611a      	str	r2, [r3, #16]
  BSP_IP_TIM_Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a920:	4b08      	ldr	r3, [pc, #32]	; (800a944 <TIM_Config+0x64>)
 800a922:	2200      	movs	r2, #0
 800a924:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&BSP_IP_TIM_Handle) != HAL_OK)
 800a926:	4807      	ldr	r0, [pc, #28]	; (800a944 <TIM_Config+0x64>)
 800a928:	f7fd fdc6 	bl	80084b8 <HAL_TIM_Base_Init>
 800a92c:	4603      	mov	r3, r0
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d001      	beq.n	800a936 <TIM_Config+0x56>
  {
    Error_Handler();
 800a932:	f7f7 f89b 	bl	8001a6c <Error_Handler>
  }
}
 800a936:	bf00      	nop
 800a938:	3718      	adds	r7, #24
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}
 800a93e:	bf00      	nop
 800a940:	20000004 	.word	0x20000004
 800a944:	200006ac 	.word	0x200006ac

0800a948 <MEMS_INT1_Force_Low>:
 * @brief  Force MEMS INT1 pin low
 * @param  None
 * @retval None
 */
static void MEMS_INT1_Force_Low(void)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b086      	sub	sp, #24
 800a94c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a94e:	1d3b      	adds	r3, r7, #4
 800a950:	2200      	movs	r2, #0
 800a952:	601a      	str	r2, [r3, #0]
 800a954:	605a      	str	r2, [r3, #4]
 800a956:	609a      	str	r2, [r3, #8]
 800a958:	60da      	str	r2, [r3, #12]
 800a95a:	611a      	str	r2, [r3, #16]

  GPIO_InitStruct.Pin = BSP_IP_MEMS_INT1_PIN_NUM;
 800a95c:	2301      	movs	r3, #1
 800a95e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a960:	2301      	movs	r3, #1
 800a962:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a964:	2300      	movs	r3, #0
 800a966:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BSP_IP_MEMS_INT1_GPIOX, &GPIO_InitStruct);
 800a968:	1d3b      	adds	r3, r7, #4
 800a96a:	4619      	mov	r1, r3
 800a96c:	4805      	ldr	r0, [pc, #20]	; (800a984 <MEMS_INT1_Force_Low+0x3c>)
 800a96e:	f7fa fe6f 	bl	8005650 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(BSP_IP_MEMS_INT1_GPIOX, BSP_IP_MEMS_INT1_PIN_NUM, GPIO_PIN_RESET);
 800a972:	2200      	movs	r2, #0
 800a974:	2101      	movs	r1, #1
 800a976:	4803      	ldr	r0, [pc, #12]	; (800a984 <MEMS_INT1_Force_Low+0x3c>)
 800a978:	f7fb f8af 	bl	8005ada <HAL_GPIO_WritePin>
}
 800a97c:	bf00      	nop
 800a97e:	3718      	adds	r7, #24
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}
 800a984:	48000800 	.word	0x48000800

0800a988 <MEMS_INT1_Init>:
 * @brief  Configure MEMS INT1 pin to the default state
 * @param  None
 * @retval None
 */
static void MEMS_INT1_Init(void)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b086      	sub	sp, #24
 800a98c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a98e:	1d3b      	adds	r3, r7, #4
 800a990:	2200      	movs	r2, #0
 800a992:	601a      	str	r2, [r3, #0]
 800a994:	605a      	str	r2, [r3, #4]
 800a996:	609a      	str	r2, [r3, #8]
 800a998:	60da      	str	r2, [r3, #12]
 800a99a:	611a      	str	r2, [r3, #16]

  GPIO_InitStruct.Pin = BSP_IP_MEMS_INT1_PIN_NUM;
 800a99c:	2301      	movs	r3, #1
 800a99e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BSP_IP_MEMS_INT1_GPIOX, &GPIO_InitStruct);
 800a9a8:	1d3b      	adds	r3, r7, #4
 800a9aa:	4619      	mov	r1, r3
 800a9ac:	4803      	ldr	r0, [pc, #12]	; (800a9bc <MEMS_INT1_Init+0x34>)
 800a9ae:	f7fa fe4f 	bl	8005650 <HAL_GPIO_Init>
}
 800a9b2:	bf00      	nop
 800a9b4:	3718      	adds	r7, #24
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}
 800a9ba:	bf00      	nop
 800a9bc:	48000800 	.word	0x48000800

0800a9c0 <DWT_Init>:
 * @brief  Initialize DWT register for counting clock cycles purpose
 * @param  None
 * @retval None
 */
static void DWT_Init(void)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800a9c4:	4b07      	ldr	r3, [pc, #28]	; (800a9e4 <DWT_Init+0x24>)
 800a9c6:	68db      	ldr	r3, [r3, #12]
 800a9c8:	4a06      	ldr	r2, [pc, #24]	; (800a9e4 <DWT_Init+0x24>)
 800a9ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a9ce:	60d3      	str	r3, [r2, #12]
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 800a9d0:	4b05      	ldr	r3, [pc, #20]	; (800a9e8 <DWT_Init+0x28>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4a04      	ldr	r2, [pc, #16]	; (800a9e8 <DWT_Init+0x28>)
 800a9d6:	f023 0301 	bic.w	r3, r3, #1
 800a9da:	6013      	str	r3, [r2, #0]
}
 800a9dc:	bf00      	nop
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bc80      	pop	{r7}
 800a9e2:	4770      	bx	lr
 800a9e4:	e000edf0 	.word	0xe000edf0
 800a9e8:	e0001000 	.word	0xe0001000

0800a9ec <DWT_Start>:
 * @brief  Start counting clock cycles
 * @param  None
 * @retval None
 */
static void DWT_Start(void)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	af00      	add	r7, sp, #0
  DWT->CYCCNT = 0; /* Clear count of clock cycles */
 800a9f0:	4b06      	ldr	r3, [pc, #24]	; (800aa0c <DWT_Start+0x20>)
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; /* Enable counter */
 800a9f6:	4b05      	ldr	r3, [pc, #20]	; (800aa0c <DWT_Start+0x20>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	4a04      	ldr	r2, [pc, #16]	; (800aa0c <DWT_Start+0x20>)
 800a9fc:	f043 0301 	orr.w	r3, r3, #1
 800aa00:	6013      	str	r3, [r2, #0]
}
 800aa02:	bf00      	nop
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bc80      	pop	{r7}
 800aa08:	4770      	bx	lr
 800aa0a:	bf00      	nop
 800aa0c:	e0001000 	.word	0xe0001000

0800aa10 <DWT_Stop>:
 * @brief  Stop counting clock cycles and calculate elapsed time in [us]
 * @param  None
 * @retval Elapsed time in [us]
 */
static uint32_t DWT_Stop(void)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b083      	sub	sp, #12
 800aa14:	af00      	add	r7, sp, #0
  volatile uint32_t cycles_count = 0U;
 800aa16:	2300      	movs	r3, #0
 800aa18:	603b      	str	r3, [r7, #0]
  uint32_t system_core_clock_mhz = 0U;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	607b      	str	r3, [r7, #4]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 800aa1e:	4b0c      	ldr	r3, [pc, #48]	; (800aa50 <DWT_Stop+0x40>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	4a0b      	ldr	r2, [pc, #44]	; (800aa50 <DWT_Stop+0x40>)
 800aa24:	f023 0301 	bic.w	r3, r3, #1
 800aa28:	6013      	str	r3, [r2, #0]
  cycles_count = DWT->CYCCNT; /* Read count of clock cycles */
 800aa2a:	4b09      	ldr	r3, [pc, #36]	; (800aa50 <DWT_Stop+0x40>)
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	603b      	str	r3, [r7, #0]

  /* Calculate elapsed time in [us] */
  system_core_clock_mhz = SystemCoreClock / 1000000U;
 800aa30:	4b08      	ldr	r3, [pc, #32]	; (800aa54 <DWT_Stop+0x44>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4a08      	ldr	r2, [pc, #32]	; (800aa58 <DWT_Stop+0x48>)
 800aa36:	fba2 2303 	umull	r2, r3, r2, r3
 800aa3a:	0c9b      	lsrs	r3, r3, #18
 800aa3c:	607b      	str	r3, [r7, #4]
  return cycles_count / system_core_clock_mhz;
 800aa3e:	683a      	ldr	r2, [r7, #0]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	370c      	adds	r7, #12
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bc80      	pop	{r7}
 800aa4e:	4770      	bx	lr
 800aa50:	e0001000 	.word	0xe0001000
 800aa54:	20000004 	.word	0x20000004
 800aa58:	431bde83 	.word	0x431bde83

0800aa5c <UART_ReceivedMSG>:
 * @brief  Check if a message is received via UART
 * @param  Msg the pointer to the message to be received
 * @retval 1 if a complete message is found, 0 otherwise
 */
int UART_ReceivedMSG(TMsg *Msg)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b08a      	sub	sp, #40	; 0x28
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  uint16_t i, j, k, j2;
  uint16_t dma_counter, length;
  uint8_t data;
  uint16_t source = 0;
 800aa64:	2300      	movs	r3, #0
 800aa66:	83fb      	strh	r3, [r7, #30]
  uint8_t inc;

  if (Get_DMA_Flag_Status(hcom_uart[COM1].hdmarx) == (uint32_t)RESET)
 800aa68:	4b54      	ldr	r3, [pc, #336]	; (800abbc <UART_ReceivedMSG+0x160>)
 800aa6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f000 f8e1 	bl	800ac34 <Get_DMA_Flag_Status>
 800aa72:	4603      	mov	r3, r0
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	f040 809c 	bne.w	800abb2 <UART_ReceivedMSG+0x156>
  {
    dma_counter = (uint16_t)UART_RxBufferSize - (uint16_t)Get_DMA_Counter(hcom_uart[COM1].hdmarx);
 800aa7a:	4b50      	ldr	r3, [pc, #320]	; (800abbc <UART_ReceivedMSG+0x160>)
 800aa7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f000 f9c8 	bl	800ae14 <Get_DMA_Counter>
 800aa84:	4603      	mov	r3, r0
 800aa86:	b29b      	uxth	r3, r3
 800aa88:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800aa8c:	83bb      	strh	r3, [r7, #28]

    if (dma_counter >= UartEngine.StartOfMsg)
 800aa8e:	4b4c      	ldr	r3, [pc, #304]	; (800abc0 <UART_ReceivedMSG+0x164>)
 800aa90:	889b      	ldrh	r3, [r3, #4]
 800aa92:	8bba      	ldrh	r2, [r7, #28]
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d305      	bcc.n	800aaa4 <UART_ReceivedMSG+0x48>
    {
      length = dma_counter - UartEngine.StartOfMsg;
 800aa98:	4b49      	ldr	r3, [pc, #292]	; (800abc0 <UART_ReceivedMSG+0x164>)
 800aa9a:	889b      	ldrh	r3, [r3, #4]
 800aa9c:	8bba      	ldrh	r2, [r7, #28]
 800aa9e:	1ad3      	subs	r3, r2, r3
 800aaa0:	843b      	strh	r3, [r7, #32]
 800aaa2:	e007      	b.n	800aab4 <UART_ReceivedMSG+0x58>
    }
    else
    {
      length = (uint16_t)UART_RxBufferSize + dma_counter - UartEngine.StartOfMsg;
 800aaa4:	4b46      	ldr	r3, [pc, #280]	; (800abc0 <UART_ReceivedMSG+0x164>)
 800aaa6:	889b      	ldrh	r3, [r3, #4]
 800aaa8:	8bba      	ldrh	r2, [r7, #28]
 800aaaa:	1ad3      	subs	r3, r2, r3
 800aaac:	b29b      	uxth	r3, r3
 800aaae:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800aab2:	843b      	strh	r3, [r7, #32]
    }

    j = UartEngine.StartOfMsg;
 800aab4:	4b42      	ldr	r3, [pc, #264]	; (800abc0 <UART_ReceivedMSG+0x164>)
 800aab6:	889b      	ldrh	r3, [r3, #4]
 800aab8:	84bb      	strh	r3, [r7, #36]	; 0x24

    for (k = 0; k < length; k++)
 800aaba:	2300      	movs	r3, #0
 800aabc:	847b      	strh	r3, [r7, #34]	; 0x22
 800aabe:	e06d      	b.n	800ab9c <UART_ReceivedMSG+0x140>
    {
      data = UartRxBuffer[j];
 800aac0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aac2:	4a40      	ldr	r2, [pc, #256]	; (800abc4 <UART_ReceivedMSG+0x168>)
 800aac4:	5cd3      	ldrb	r3, [r2, r3]
 800aac6:	76fb      	strb	r3, [r7, #27]
      j++;
 800aac8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aaca:	3301      	adds	r3, #1
 800aacc:	84bb      	strh	r3, [r7, #36]	; 0x24

      if (j >= (uint16_t)UART_RxBufferSize)
 800aace:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aad4:	d301      	bcc.n	800aada <UART_ReceivedMSG+0x7e>
      {
        j = 0;
 800aad6:	2300      	movs	r3, #0
 800aad8:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      if (data == (uint8_t)TMsg_EOF)
 800aada:	7efb      	ldrb	r3, [r7, #27]
 800aadc:	2bf0      	cmp	r3, #240	; 0xf0
 800aade:	d15a      	bne.n	800ab96 <UART_ReceivedMSG+0x13a>
      {
        j = UartEngine.StartOfMsg;
 800aae0:	4b37      	ldr	r3, [pc, #220]	; (800abc0 <UART_ReceivedMSG+0x164>)
 800aae2:	889b      	ldrh	r3, [r3, #4]
 800aae4:	84bb      	strh	r3, [r7, #36]	; 0x24

        for (i = 0; i < k; i += inc)
 800aae6:	2300      	movs	r3, #0
 800aae8:	84fb      	strh	r3, [r7, #38]	; 0x26
 800aaea:	e03a      	b.n	800ab62 <UART_ReceivedMSG+0x106>
        {
          uint8_t  Source0;
          uint8_t  Source1;
          uint8_t *Dest;

          j2 = (j + 1U) % (uint16_t)UART_RxBufferSize;
 800aaec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aaee:	3301      	adds	r3, #1
 800aaf0:	b29b      	uxth	r3, r3
 800aaf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaf6:	833b      	strh	r3, [r7, #24]

          if (source >= TMsg_MaxLen)
 800aaf8:	8bfb      	ldrh	r3, [r7, #30]
 800aafa:	2bff      	cmp	r3, #255	; 0xff
 800aafc:	d904      	bls.n	800ab08 <UART_ReceivedMSG+0xac>
          {
            UartEngine.StartOfMsg = j;
 800aafe:	4a30      	ldr	r2, [pc, #192]	; (800abc0 <UART_ReceivedMSG+0x164>)
 800ab00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ab02:	8093      	strh	r3, [r2, #4]
            return 0;
 800ab04:	2300      	movs	r3, #0
 800ab06:	e055      	b.n	800abb4 <UART_ReceivedMSG+0x158>
          }

          Source0 = UartRxBuffer[j];
 800ab08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ab0a:	4a2e      	ldr	r2, [pc, #184]	; (800abc4 <UART_ReceivedMSG+0x168>)
 800ab0c:	5cd3      	ldrb	r3, [r2, r3]
 800ab0e:	75fb      	strb	r3, [r7, #23]
          Source1 = UartRxBuffer[j2];
 800ab10:	8b3b      	ldrh	r3, [r7, #24]
 800ab12:	4a2c      	ldr	r2, [pc, #176]	; (800abc4 <UART_ReceivedMSG+0x168>)
 800ab14:	5cd3      	ldrb	r3, [r2, r3]
 800ab16:	75bb      	strb	r3, [r7, #22]
          Dest    = &Msg->Data[source];
 800ab18:	8bfb      	ldrh	r3, [r7, #30]
 800ab1a:	687a      	ldr	r2, [r7, #4]
 800ab1c:	4413      	add	r3, r2
 800ab1e:	3304      	adds	r3, #4
 800ab20:	613b      	str	r3, [r7, #16]

          inc = (uint8_t)ReverseByteStuffCopyByte2(Source0, Source1, Dest);
 800ab22:	7db9      	ldrb	r1, [r7, #22]
 800ab24:	7dfb      	ldrb	r3, [r7, #23]
 800ab26:	693a      	ldr	r2, [r7, #16]
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f001 faa0 	bl	800c06e <ReverseByteStuffCopyByte2>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	73fb      	strb	r3, [r7, #15]

          if (inc == 0U)
 800ab32:	7bfb      	ldrb	r3, [r7, #15]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d104      	bne.n	800ab42 <UART_ReceivedMSG+0xe6>
          {
            UartEngine.StartOfMsg = j2;
 800ab38:	4a21      	ldr	r2, [pc, #132]	; (800abc0 <UART_ReceivedMSG+0x164>)
 800ab3a:	8b3b      	ldrh	r3, [r7, #24]
 800ab3c:	8093      	strh	r3, [r2, #4]
            return 0;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	e038      	b.n	800abb4 <UART_ReceivedMSG+0x158>
          }

          j = (j + inc) % (uint16_t)UART_RxBufferSize;
 800ab42:	7bfb      	ldrb	r3, [r7, #15]
 800ab44:	b29a      	uxth	r2, r3
 800ab46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ab48:	4413      	add	r3, r2
 800ab4a:	b29b      	uxth	r3, r3
 800ab4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab50:	84bb      	strh	r3, [r7, #36]	; 0x24
          source++;
 800ab52:	8bfb      	ldrh	r3, [r7, #30]
 800ab54:	3301      	adds	r3, #1
 800ab56:	83fb      	strh	r3, [r7, #30]
        for (i = 0; i < k; i += inc)
 800ab58:	7bfb      	ldrb	r3, [r7, #15]
 800ab5a:	b29a      	uxth	r2, r3
 800ab5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ab5e:	4413      	add	r3, r2
 800ab60:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ab62:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ab64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ab66:	429a      	cmp	r2, r3
 800ab68:	d3c0      	bcc.n	800aaec <UART_ReceivedMSG+0x90>
        }

        Msg->Len = source;
 800ab6a:	8bfa      	ldrh	r2, [r7, #30]
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	601a      	str	r2, [r3, #0]
        j = (j + 1U) % (uint16_t)UART_RxBufferSize; /* skip TMsg_EOF */
 800ab70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ab72:	3301      	adds	r3, #1
 800ab74:	b29b      	uxth	r3, r3
 800ab76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab7a:	84bb      	strh	r3, [r7, #36]	; 0x24
        UartEngine.StartOfMsg = j;
 800ab7c:	4a10      	ldr	r2, [pc, #64]	; (800abc0 <UART_ReceivedMSG+0x164>)
 800ab7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ab80:	8093      	strh	r3, [r2, #4]

        /* check message integrity */
        return (CHK_CheckAndRemove(Msg) != 0) ? 1 : 0;
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f001 fac2 	bl	800c10c <CHK_CheckAndRemove>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	bf14      	ite	ne
 800ab8e:	2301      	movne	r3, #1
 800ab90:	2300      	moveq	r3, #0
 800ab92:	b2db      	uxtb	r3, r3
 800ab94:	e00e      	b.n	800abb4 <UART_ReceivedMSG+0x158>
    for (k = 0; k < length; k++)
 800ab96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ab98:	3301      	adds	r3, #1
 800ab9a:	847b      	strh	r3, [r7, #34]	; 0x22
 800ab9c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ab9e:	8c3b      	ldrh	r3, [r7, #32]
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d38d      	bcc.n	800aac0 <UART_ReceivedMSG+0x64>
      }
    }

    if (length > (uint16_t)Uart_Msg_Max_Size)
 800aba4:	8c3b      	ldrh	r3, [r7, #32]
 800aba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abaa:	d902      	bls.n	800abb2 <UART_ReceivedMSG+0x156>
    {
      UartEngine.StartOfMsg = dma_counter;
 800abac:	4a04      	ldr	r2, [pc, #16]	; (800abc0 <UART_ReceivedMSG+0x164>)
 800abae:	8bbb      	ldrh	r3, [r7, #28]
 800abb0:	8093      	strh	r3, [r2, #4]
    }
  }

  return 0;
 800abb2:	2300      	movs	r3, #0
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3728      	adds	r7, #40	; 0x28
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}
 800abbc:	2000074c 	.word	0x2000074c
 800abc0:	20000e78 	.word	0x20000e78
 800abc4:	20000c78 	.word	0x20000c78

0800abc8 <UART_SendMsg>:
 * @brief  Send a message via UART
 * @param  Msg the pointer to the message to be sent
 * @retval None
 */
void UART_SendMsg(TMsg *Msg)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b084      	sub	sp, #16
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  uint16_t count_out;

  CHK_ComputeAndAdd(Msg);
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f001 fa72 	bl	800c0ba <CHK_ComputeAndAdd>

  /* MISRA C-2012 rule 11.8 violation for purpose */
  count_out = (uint16_t)ByteStuffCopy((uint8_t *)UartTxBuffer, Msg);
 800abd6:	6879      	ldr	r1, [r7, #4]
 800abd8:	4807      	ldr	r0, [pc, #28]	; (800abf8 <UART_SendMsg+0x30>)
 800abda:	f001 fa1a 	bl	800c012 <ByteStuffCopy>
 800abde:	4603      	mov	r3, r0
 800abe0:	81fb      	strh	r3, [r7, #14]

  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)UartTxBuffer, count_out, 5000);
 800abe2:	89fa      	ldrh	r2, [r7, #14]
 800abe4:	f241 3388 	movw	r3, #5000	; 0x1388
 800abe8:	4903      	ldr	r1, [pc, #12]	; (800abf8 <UART_SendMsg+0x30>)
 800abea:	4804      	ldr	r0, [pc, #16]	; (800abfc <UART_SendMsg+0x34>)
 800abec:	f7fe f926 	bl	8008e3c <HAL_UART_Transmit>
}
 800abf0:	bf00      	nop
 800abf2:	3710      	adds	r7, #16
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}
 800abf8:	20000e80 	.word	0x20000e80
 800abfc:	2000074c 	.word	0x2000074c

0800ac00 <UART_StartReceiveMsg>:
 * @brief  Start receiving messages via DMA
 * @param  None
 * @retval None
 */
void UART_StartReceiveMsg(void)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	af00      	add	r7, sp, #0
  hcom_uart[COM1].pRxBuffPtr = (uint8_t *)UartRxBuffer; /* MISRA C-2012 rule 11.8 violation for purpose */
 800ac04:	4b09      	ldr	r3, [pc, #36]	; (800ac2c <UART_StartReceiveMsg+0x2c>)
 800ac06:	4a0a      	ldr	r2, [pc, #40]	; (800ac30 <UART_StartReceiveMsg+0x30>)
 800ac08:	659a      	str	r2, [r3, #88]	; 0x58
  hcom_uart[COM1].RxXferSize = UART_RxBufferSize;
 800ac0a:	4b08      	ldr	r3, [pc, #32]	; (800ac2c <UART_StartReceiveMsg+0x2c>)
 800ac0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  hcom_uart[COM1].ErrorCode = (uint32_t)HAL_UART_ERROR_NONE;
 800ac14:	4b05      	ldr	r3, [pc, #20]	; (800ac2c <UART_StartReceiveMsg+0x2c>)
 800ac16:	2200      	movs	r2, #0
 800ac18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
     in the UART CR3 register */
  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Receive_DMA(&hcom_uart[COM1], (uint8_t *)UartRxBuffer, UART_RxBufferSize);
 800ac1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac20:	4903      	ldr	r1, [pc, #12]	; (800ac30 <UART_StartReceiveMsg+0x30>)
 800ac22:	4802      	ldr	r0, [pc, #8]	; (800ac2c <UART_StartReceiveMsg+0x2c>)
 800ac24:	f7fe f9a0 	bl	8008f68 <HAL_UART_Receive_DMA>
}
 800ac28:	bf00      	nop
 800ac2a:	bd80      	pop	{r7, pc}
 800ac2c:	2000074c 	.word	0x2000074c
 800ac30:	20000c78 	.word	0x20000c78

0800ac34 <Get_DMA_Flag_Status>:
 * @brief  Get the DMA Stream pending flags
 * @param  handle_dma DMA handle
 * @retval The state of FLAG (SET or RESET)
 */
static uint32_t Get_DMA_Flag_Status(DMA_HandleTypeDef *handle_dma)
{
 800ac34:	b480      	push	{r7}
 800ac36:	b083      	sub	sp, #12
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
  return (__HAL_DMA_GET_FLAG(handle_dma, __HAL_DMA_GET_TE_FLAG_INDEX(handle_dma)));
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	461a      	mov	r2, r3
 800ac42:	4b65      	ldr	r3, [pc, #404]	; (800add8 <Get_DMA_Flag_Status+0x1a4>)
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d961      	bls.n	800ad0c <Get_DMA_Flag_Status+0xd8>
 800ac48:	4b64      	ldr	r3, [pc, #400]	; (800addc <Get_DMA_Flag_Status+0x1a8>)
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	4963      	ldr	r1, [pc, #396]	; (800ade0 <Get_DMA_Flag_Status+0x1ac>)
 800ac52:	428b      	cmp	r3, r1
 800ac54:	d057      	beq.n	800ad06 <Get_DMA_Flag_Status+0xd2>
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	4962      	ldr	r1, [pc, #392]	; (800ade4 <Get_DMA_Flag_Status+0x1b0>)
 800ac5c:	428b      	cmp	r3, r1
 800ac5e:	d050      	beq.n	800ad02 <Get_DMA_Flag_Status+0xce>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	4960      	ldr	r1, [pc, #384]	; (800ade8 <Get_DMA_Flag_Status+0x1b4>)
 800ac66:	428b      	cmp	r3, r1
 800ac68:	d049      	beq.n	800acfe <Get_DMA_Flag_Status+0xca>
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	495f      	ldr	r1, [pc, #380]	; (800adec <Get_DMA_Flag_Status+0x1b8>)
 800ac70:	428b      	cmp	r3, r1
 800ac72:	d042      	beq.n	800acfa <Get_DMA_Flag_Status+0xc6>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	495d      	ldr	r1, [pc, #372]	; (800adf0 <Get_DMA_Flag_Status+0x1bc>)
 800ac7a:	428b      	cmp	r3, r1
 800ac7c:	d03a      	beq.n	800acf4 <Get_DMA_Flag_Status+0xc0>
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	495c      	ldr	r1, [pc, #368]	; (800adf4 <Get_DMA_Flag_Status+0x1c0>)
 800ac84:	428b      	cmp	r3, r1
 800ac86:	d032      	beq.n	800acee <Get_DMA_Flag_Status+0xba>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	495a      	ldr	r1, [pc, #360]	; (800adf8 <Get_DMA_Flag_Status+0x1c4>)
 800ac8e:	428b      	cmp	r3, r1
 800ac90:	d02a      	beq.n	800ace8 <Get_DMA_Flag_Status+0xb4>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	4959      	ldr	r1, [pc, #356]	; (800adfc <Get_DMA_Flag_Status+0x1c8>)
 800ac98:	428b      	cmp	r3, r1
 800ac9a:	d022      	beq.n	800ace2 <Get_DMA_Flag_Status+0xae>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	4957      	ldr	r1, [pc, #348]	; (800ae00 <Get_DMA_Flag_Status+0x1cc>)
 800aca2:	428b      	cmp	r3, r1
 800aca4:	d01a      	beq.n	800acdc <Get_DMA_Flag_Status+0xa8>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4956      	ldr	r1, [pc, #344]	; (800ae04 <Get_DMA_Flag_Status+0x1d0>)
 800acac:	428b      	cmp	r3, r1
 800acae:	d012      	beq.n	800acd6 <Get_DMA_Flag_Status+0xa2>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4954      	ldr	r1, [pc, #336]	; (800ae08 <Get_DMA_Flag_Status+0x1d4>)
 800acb6:	428b      	cmp	r3, r1
 800acb8:	d00a      	beq.n	800acd0 <Get_DMA_Flag_Status+0x9c>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4953      	ldr	r1, [pc, #332]	; (800ae0c <Get_DMA_Flag_Status+0x1d8>)
 800acc0:	428b      	cmp	r3, r1
 800acc2:	d102      	bne.n	800acca <Get_DMA_Flag_Status+0x96>
 800acc4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800acc8:	e01e      	b.n	800ad08 <Get_DMA_Flag_Status+0xd4>
 800acca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800acce:	e01b      	b.n	800ad08 <Get_DMA_Flag_Status+0xd4>
 800acd0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800acd4:	e018      	b.n	800ad08 <Get_DMA_Flag_Status+0xd4>
 800acd6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800acda:	e015      	b.n	800ad08 <Get_DMA_Flag_Status+0xd4>
 800acdc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ace0:	e012      	b.n	800ad08 <Get_DMA_Flag_Status+0xd4>
 800ace2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ace6:	e00f      	b.n	800ad08 <Get_DMA_Flag_Status+0xd4>
 800ace8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800acec:	e00c      	b.n	800ad08 <Get_DMA_Flag_Status+0xd4>
 800acee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800acf2:	e009      	b.n	800ad08 <Get_DMA_Flag_Status+0xd4>
 800acf4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800acf8:	e006      	b.n	800ad08 <Get_DMA_Flag_Status+0xd4>
 800acfa:	2380      	movs	r3, #128	; 0x80
 800acfc:	e004      	b.n	800ad08 <Get_DMA_Flag_Status+0xd4>
 800acfe:	2380      	movs	r3, #128	; 0x80
 800ad00:	e002      	b.n	800ad08 <Get_DMA_Flag_Status+0xd4>
 800ad02:	2308      	movs	r3, #8
 800ad04:	e000      	b.n	800ad08 <Get_DMA_Flag_Status+0xd4>
 800ad06:	2308      	movs	r3, #8
 800ad08:	4013      	ands	r3, r2
 800ad0a:	e060      	b.n	800adce <Get_DMA_Flag_Status+0x19a>
 800ad0c:	4b40      	ldr	r3, [pc, #256]	; (800ae10 <Get_DMA_Flag_Status+0x1dc>)
 800ad0e:	681a      	ldr	r2, [r3, #0]
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	4932      	ldr	r1, [pc, #200]	; (800ade0 <Get_DMA_Flag_Status+0x1ac>)
 800ad16:	428b      	cmp	r3, r1
 800ad18:	d057      	beq.n	800adca <Get_DMA_Flag_Status+0x196>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	4931      	ldr	r1, [pc, #196]	; (800ade4 <Get_DMA_Flag_Status+0x1b0>)
 800ad20:	428b      	cmp	r3, r1
 800ad22:	d050      	beq.n	800adc6 <Get_DMA_Flag_Status+0x192>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	492f      	ldr	r1, [pc, #188]	; (800ade8 <Get_DMA_Flag_Status+0x1b4>)
 800ad2a:	428b      	cmp	r3, r1
 800ad2c:	d049      	beq.n	800adc2 <Get_DMA_Flag_Status+0x18e>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	492e      	ldr	r1, [pc, #184]	; (800adec <Get_DMA_Flag_Status+0x1b8>)
 800ad34:	428b      	cmp	r3, r1
 800ad36:	d042      	beq.n	800adbe <Get_DMA_Flag_Status+0x18a>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	492c      	ldr	r1, [pc, #176]	; (800adf0 <Get_DMA_Flag_Status+0x1bc>)
 800ad3e:	428b      	cmp	r3, r1
 800ad40:	d03a      	beq.n	800adb8 <Get_DMA_Flag_Status+0x184>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	492b      	ldr	r1, [pc, #172]	; (800adf4 <Get_DMA_Flag_Status+0x1c0>)
 800ad48:	428b      	cmp	r3, r1
 800ad4a:	d032      	beq.n	800adb2 <Get_DMA_Flag_Status+0x17e>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4929      	ldr	r1, [pc, #164]	; (800adf8 <Get_DMA_Flag_Status+0x1c4>)
 800ad52:	428b      	cmp	r3, r1
 800ad54:	d02a      	beq.n	800adac <Get_DMA_Flag_Status+0x178>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4928      	ldr	r1, [pc, #160]	; (800adfc <Get_DMA_Flag_Status+0x1c8>)
 800ad5c:	428b      	cmp	r3, r1
 800ad5e:	d022      	beq.n	800ada6 <Get_DMA_Flag_Status+0x172>
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	4926      	ldr	r1, [pc, #152]	; (800ae00 <Get_DMA_Flag_Status+0x1cc>)
 800ad66:	428b      	cmp	r3, r1
 800ad68:	d01a      	beq.n	800ada0 <Get_DMA_Flag_Status+0x16c>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	4925      	ldr	r1, [pc, #148]	; (800ae04 <Get_DMA_Flag_Status+0x1d0>)
 800ad70:	428b      	cmp	r3, r1
 800ad72:	d012      	beq.n	800ad9a <Get_DMA_Flag_Status+0x166>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4923      	ldr	r1, [pc, #140]	; (800ae08 <Get_DMA_Flag_Status+0x1d4>)
 800ad7a:	428b      	cmp	r3, r1
 800ad7c:	d00a      	beq.n	800ad94 <Get_DMA_Flag_Status+0x160>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	4922      	ldr	r1, [pc, #136]	; (800ae0c <Get_DMA_Flag_Status+0x1d8>)
 800ad84:	428b      	cmp	r3, r1
 800ad86:	d102      	bne.n	800ad8e <Get_DMA_Flag_Status+0x15a>
 800ad88:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ad8c:	e01e      	b.n	800adcc <Get_DMA_Flag_Status+0x198>
 800ad8e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ad92:	e01b      	b.n	800adcc <Get_DMA_Flag_Status+0x198>
 800ad94:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ad98:	e018      	b.n	800adcc <Get_DMA_Flag_Status+0x198>
 800ad9a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ad9e:	e015      	b.n	800adcc <Get_DMA_Flag_Status+0x198>
 800ada0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ada4:	e012      	b.n	800adcc <Get_DMA_Flag_Status+0x198>
 800ada6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800adaa:	e00f      	b.n	800adcc <Get_DMA_Flag_Status+0x198>
 800adac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800adb0:	e00c      	b.n	800adcc <Get_DMA_Flag_Status+0x198>
 800adb2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800adb6:	e009      	b.n	800adcc <Get_DMA_Flag_Status+0x198>
 800adb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800adbc:	e006      	b.n	800adcc <Get_DMA_Flag_Status+0x198>
 800adbe:	2380      	movs	r3, #128	; 0x80
 800adc0:	e004      	b.n	800adcc <Get_DMA_Flag_Status+0x198>
 800adc2:	2380      	movs	r3, #128	; 0x80
 800adc4:	e002      	b.n	800adcc <Get_DMA_Flag_Status+0x198>
 800adc6:	2308      	movs	r3, #8
 800adc8:	e000      	b.n	800adcc <Get_DMA_Flag_Status+0x198>
 800adca:	2308      	movs	r3, #8
 800adcc:	4013      	ands	r3, r2
}
 800adce:	4618      	mov	r0, r3
 800add0:	370c      	adds	r7, #12
 800add2:	46bd      	mov	sp, r7
 800add4:	bc80      	pop	{r7}
 800add6:	4770      	bx	lr
 800add8:	40020080 	.word	0x40020080
 800addc:	40020400 	.word	0x40020400
 800ade0:	40020008 	.word	0x40020008
 800ade4:	40020408 	.word	0x40020408
 800ade8:	4002001c 	.word	0x4002001c
 800adec:	4002041c 	.word	0x4002041c
 800adf0:	40020030 	.word	0x40020030
 800adf4:	40020430 	.word	0x40020430
 800adf8:	40020044 	.word	0x40020044
 800adfc:	40020444 	.word	0x40020444
 800ae00:	40020058 	.word	0x40020058
 800ae04:	40020458 	.word	0x40020458
 800ae08:	4002006c 	.word	0x4002006c
 800ae0c:	4002046c 	.word	0x4002046c
 800ae10:	40020000 	.word	0x40020000

0800ae14 <Get_DMA_Counter>:
 * @brief  Returns the number of remaining data units in the current DMAy Streamx transfer
 * @param  handle_dma DMA handle
 * @retval The number of remaining data units in the current DMA Stream transfer
 */
static uint32_t Get_DMA_Counter(DMA_HandleTypeDef *handle_dma)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b083      	sub	sp, #12
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
  return (__HAL_DMA_GET_COUNTER(handle_dma));
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	685b      	ldr	r3, [r3, #4]
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	370c      	adds	r7, #12
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bc80      	pop	{r7}
 800ae2a:	4770      	bx	lr

0800ae2c <BSP_SENSOR_ACC_Init>:
  * @brief  Initializes accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Init(void)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	af00      	add	r7, sp, #0
  (void)CUSTOM_HYBRID_SENSOR_Init(CUSTOM_ACC_INSTANCE_0, HYBRID_ACCELERO);
  #endif
#else
#if (defined BSP_MOTION_SENSORS)
  #ifdef CUSTOM_ACC_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Init(CUSTOM_ACC_INSTANCE_0, MOTION_ACCELERO);
 800ae30:	2102      	movs	r1, #2
 800ae32:	2000      	movs	r0, #0
 800ae34:	f000 f904 	bl	800b040 <CUSTOM_MOTION_SENSOR_Init>
  #endif
#endif
#endif
}
 800ae38:	bf00      	nop
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <BSP_SENSOR_GYR_Init>:
  * @brief  Initializes gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Init(void)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	af00      	add	r7, sp, #0
#if (defined BSP_MOTION_SENSORS)
  #ifdef CUSTOM_GYR_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Init(CUSTOM_GYR_INSTANCE_0, MOTION_GYRO);
 800ae40:	2101      	movs	r1, #1
 800ae42:	2000      	movs	r0, #0
 800ae44:	f000 f8fc 	bl	800b040 <CUSTOM_MOTION_SENSOR_Init>
  #endif
#endif
}
 800ae48:	bf00      	nop
 800ae4a:	bd80      	pop	{r7, pc}

0800ae4c <BSP_SENSOR_MAG_Init>:
  * @brief  Initializes magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Init(void)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	af00      	add	r7, sp, #0
#if (defined BSP_MOTION_SENSORS)
  #ifdef CUSTOM_MAG_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Init(CUSTOM_MAG_INSTANCE_0, MOTION_MAGNETO);
  #endif
#endif
}
 800ae50:	bf00      	nop
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bc80      	pop	{r7}
 800ae56:	4770      	bx	lr

0800ae58 <BSP_SENSOR_PRESS_Init>:
  * @brief  Initializes pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Init(void)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	af00      	add	r7, sp, #0
#if (defined BSP_ENV_SENSORS)
  #ifdef CUSTOM_PRESS_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Init(CUSTOM_PRESS_INSTANCE_0, ENV_PRESSURE);
  #endif
#endif
}
 800ae5c:	bf00      	nop
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bc80      	pop	{r7}
 800ae62:	4770      	bx	lr

0800ae64 <BSP_SENSOR_TEMP_Init>:
  * @brief  Initializes temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Init(void)
{
 800ae64:	b480      	push	{r7}
 800ae66:	af00      	add	r7, sp, #0
  #ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Init(CUSTOM_TEMP_INSTANCE_0, ENV_TEMPERATURE);
  #endif
#endif
#endif
}
 800ae68:	bf00      	nop
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bc80      	pop	{r7}
 800ae6e:	4770      	bx	lr

0800ae70 <BSP_SENSOR_HUM_Init>:
  * @brief  Initializes humidity sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Init(void)
{
 800ae70:	b480      	push	{r7}
 800ae72:	af00      	add	r7, sp, #0
#if (defined BSP_ENV_SENSORS)
  #ifdef CUSTOM_HUM_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Init(CUSTOM_HUM_INSTANCE_0, ENV_HUMIDITY);
  #endif
#endif
}
 800ae74:	bf00      	nop
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bc80      	pop	{r7}
 800ae7a:	4770      	bx	lr

0800ae7c <BSP_SENSOR_ACC_Enable>:
  * @brief  Enables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Enable(void)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	af00      	add	r7, sp, #0
  (void)CUSTOM_HYBRID_MOTION_SENSOR_Enable(CUSTOM_ACC_INSTANCE_0, HYBRID_ACCELERO);
  #endif
#else
#if (defined BSP_MOTION_SENSORS)
  #ifdef CUSTOM_ACC_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Enable(CUSTOM_ACC_INSTANCE_0, MOTION_ACCELERO);
 800ae80:	2102      	movs	r1, #2
 800ae82:	2000      	movs	r0, #0
 800ae84:	f000 f964 	bl	800b150 <CUSTOM_MOTION_SENSOR_Enable>
  #endif
#endif
#endif
}
 800ae88:	bf00      	nop
 800ae8a:	bd80      	pop	{r7, pc}

0800ae8c <BSP_SENSOR_GYR_Enable>:
  * @brief  Enables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Enable(void)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	af00      	add	r7, sp, #0
#if (defined BSP_MOTION_SENSORS)
  #ifdef CUSTOM_GYR_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Enable(CUSTOM_GYR_INSTANCE_0, MOTION_GYRO);
 800ae90:	2101      	movs	r1, #1
 800ae92:	2000      	movs	r0, #0
 800ae94:	f000 f95c 	bl	800b150 <CUSTOM_MOTION_SENSOR_Enable>
  #endif
#endif
}
 800ae98:	bf00      	nop
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <BSP_SENSOR_MAG_Enable>:
  * @brief  Enables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Enable(void)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	af00      	add	r7, sp, #0
#if (defined BSP_MOTION_SENSORS)
  #ifdef CUSTOM_MAG_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Enable(CUSTOM_MAG_INSTANCE_0, MOTION_MAGNETO);
  #endif
#endif
}
 800aea0:	bf00      	nop
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bc80      	pop	{r7}
 800aea6:	4770      	bx	lr

0800aea8 <BSP_SENSOR_PRESS_Enable>:
  * @brief  Enables pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Enable(void)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	af00      	add	r7, sp, #0
#if (defined BSP_ENV_SENSORS)
  #ifdef CUSTOM_PRESS_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Enable(CUSTOM_PRESS_INSTANCE_0, ENV_PRESSURE);
  #endif
#endif
}
 800aeac:	bf00      	nop
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bc80      	pop	{r7}
 800aeb2:	4770      	bx	lr

0800aeb4 <BSP_SENSOR_TEMP_Enable>:
  * @brief  Enables temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Enable(void)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	af00      	add	r7, sp, #0
  #ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Enable(CUSTOM_TEMP_INSTANCE_0, ENV_TEMPERATURE);
  #endif
#endif
#endif
}
 800aeb8:	bf00      	nop
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bc80      	pop	{r7}
 800aebe:	4770      	bx	lr

0800aec0 <BSP_SENSOR_HUM_Enable>:
  * @brief  Enables humidity sensors
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Enable(void)
{
 800aec0:	b480      	push	{r7}
 800aec2:	af00      	add	r7, sp, #0
#if (defined BSP_ENV_SENSORS)
  #ifdef CUSTOM_HUM_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Enable(CUSTOM_HUM_INSTANCE_0, ENV_HUMIDITY);
  #endif
#endif
}
 800aec4:	bf00      	nop
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bc80      	pop	{r7}
 800aeca:	4770      	bx	lr

0800aecc <BSP_SENSOR_ACC_Disable>:
  * @brief  Disables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Disable(void)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	af00      	add	r7, sp, #0
  (void)CUSTOM_HYBRID_MOTION_SENSOR_Disable(CUSTOM_ACC_INSTANCE_0, HYBRID_ACCELERO);
  #endif
#else
#if (defined BSP_MOTION_SENSORS)
  #ifdef CUSTOM_ACC_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Disable(CUSTOM_ACC_INSTANCE_0, MOTION_ACCELERO);
 800aed0:	2102      	movs	r1, #2
 800aed2:	2000      	movs	r0, #0
 800aed4:	f000 f97e 	bl	800b1d4 <CUSTOM_MOTION_SENSOR_Disable>
  #endif
#endif
#endif
}
 800aed8:	bf00      	nop
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <BSP_SENSOR_GYR_Disable>:
  * @brief  Disables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Disable(void)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	af00      	add	r7, sp, #0
#if (defined BSP_MOTION_SENSORS)
  #ifdef CUSTOM_GYR_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Disable(CUSTOM_GYR_INSTANCE_0, MOTION_GYRO);
 800aee0:	2101      	movs	r1, #1
 800aee2:	2000      	movs	r0, #0
 800aee4:	f000 f976 	bl	800b1d4 <CUSTOM_MOTION_SENSOR_Disable>
  #endif
#endif
}
 800aee8:	bf00      	nop
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <BSP_SENSOR_MAG_Disable>:
  * @brief  Disables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Disable(void)
{
 800aeec:	b480      	push	{r7}
 800aeee:	af00      	add	r7, sp, #0
#if (defined BSP_MOTION_SENSORS)
  #ifdef CUSTOM_MAG_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Disable(CUSTOM_MAG_INSTANCE_0, MOTION_MAGNETO);
  #endif
#endif
}
 800aef0:	bf00      	nop
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bc80      	pop	{r7}
 800aef6:	4770      	bx	lr

0800aef8 <BSP_SENSOR_PRESS_Disable>:
  * @brief  Disables pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Disable(void)
{
 800aef8:	b480      	push	{r7}
 800aefa:	af00      	add	r7, sp, #0
#if (defined BSP_ENV_SENSORS)
  #ifdef CUSTOM_PRESS_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Disable(CUSTOM_PRESS_INSTANCE_0, ENV_PRESSURE);
  #endif
#endif
}
 800aefc:	bf00      	nop
 800aefe:	46bd      	mov	sp, r7
 800af00:	bc80      	pop	{r7}
 800af02:	4770      	bx	lr

0800af04 <BSP_SENSOR_TEMP_Disable>:
  * @brief  Disables temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Disable(void)
{
 800af04:	b480      	push	{r7}
 800af06:	af00      	add	r7, sp, #0
  #ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Disable(CUSTOM_TEMP_INSTANCE_0, ENV_TEMPERATURE);
  #endif
#endif
#endif
}
 800af08:	bf00      	nop
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bc80      	pop	{r7}
 800af0e:	4770      	bx	lr

0800af10 <BSP_SENSOR_HUM_Disable>:
  * @brief  Disables humidity sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Disable(void)
{
 800af10:	b480      	push	{r7}
 800af12:	af00      	add	r7, sp, #0
#if (defined BSP_ENV_SENSORS)
  #ifdef CUSTOM_HUM_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Disable(CUSTOM_HUM_INSTANCE_0, ENV_HUMIDITY);
  #endif
#endif
}
 800af14:	bf00      	nop
 800af16:	46bd      	mov	sp, r7
 800af18:	bc80      	pop	{r7}
 800af1a:	4770      	bx	lr

0800af1c <BSP_SENSOR_ACC_GetAxes>:
  * @brief  Get accelerometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_ACC_GetAxes(MOTION_SENSOR_Axes_t *Axes)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b082      	sub	sp, #8
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  Axes->z = 0;
  #endif
#else
#if (defined BSP_MOTION_SENSORS)
  #ifdef CUSTOM_ACC_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_GetAxes(CUSTOM_ACC_INSTANCE_0, MOTION_ACCELERO, (CUSTOM_MOTION_SENSOR_Axes_t *)Axes);
 800af24:	687a      	ldr	r2, [r7, #4]
 800af26:	2102      	movs	r1, #2
 800af28:	2000      	movs	r0, #0
 800af2a:	f000 f995 	bl	800b258 <CUSTOM_MOTION_SENSOR_GetAxes>
  Axes->y = 0;
  Axes->z = 0;
  #endif
#endif
#endif
}
 800af2e:	bf00      	nop
 800af30:	3708      	adds	r7, #8
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}

0800af36 <BSP_SENSOR_GYR_GetAxes>:
  * @brief  Get gyroscope data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_GYR_GetAxes(MOTION_SENSOR_Axes_t *Axes)
{
 800af36:	b580      	push	{r7, lr}
 800af38:	b082      	sub	sp, #8
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	6078      	str	r0, [r7, #4]
#if (defined BSP_MOTION_SENSORS)
  #ifdef CUSTOM_GYR_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_GetAxes(CUSTOM_GYR_INSTANCE_0, MOTION_GYRO, (CUSTOM_MOTION_SENSOR_Axes_t *)Axes);
 800af3e:	687a      	ldr	r2, [r7, #4]
 800af40:	2101      	movs	r1, #1
 800af42:	2000      	movs	r0, #0
 800af44:	f000 f988 	bl	800b258 <CUSTOM_MOTION_SENSOR_GetAxes>
  Axes->x = 0;
  Axes->y = 0;
  Axes->z = 0;
  #endif
#endif
}
 800af48:	bf00      	nop
 800af4a:	3708      	adds	r7, #8
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <BSP_SENSOR_MAG_GetAxes>:
  * @brief  Get magnetometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_MAG_GetAxes(MOTION_SENSOR_Axes_t *Axes)
{
 800af50:	b480      	push	{r7}
 800af52:	b083      	sub	sp, #12
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
#if (defined BSP_MOTION_SENSORS)
  #ifdef CUSTOM_MAG_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_GetAxes(CUSTOM_MAG_INSTANCE_0, MOTION_MAGNETO, (CUSTOM_MOTION_SENSOR_Axes_t *)Axes);
  #else
  Axes->x = 0;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2200      	movs	r2, #0
 800af5c:	601a      	str	r2, [r3, #0]
  Axes->y = 0;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2200      	movs	r2, #0
 800af62:	605a      	str	r2, [r3, #4]
  Axes->z = 0;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2200      	movs	r2, #0
 800af68:	609a      	str	r2, [r3, #8]
  #endif
#endif
}
 800af6a:	bf00      	nop
 800af6c:	370c      	adds	r7, #12
 800af6e:	46bd      	mov	sp, r7
 800af70:	bc80      	pop	{r7}
 800af72:	4770      	bx	lr

0800af74 <BSP_SENSOR_PRESS_GetValue>:
  * @brief  Get pressure sensor data
  * @param  Value pointer to pressure value
  * @retval None
  */
void BSP_SENSOR_PRESS_GetValue(float *Value)
{
 800af74:	b480      	push	{r7}
 800af76:	b083      	sub	sp, #12
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  (void)CUSTOM_ENV_SENSOR_GetValue(CUSTOM_PRESS_INSTANCE_0, ENV_PRESSURE, Value);
  #else
  *Value = 0.0f;
  #endif
#endif
}
 800af7c:	bf00      	nop
 800af7e:	370c      	adds	r7, #12
 800af80:	46bd      	mov	sp, r7
 800af82:	bc80      	pop	{r7}
 800af84:	4770      	bx	lr

0800af86 <BSP_SENSOR_TEMP_GetValue>:
  * @brief  Get temperature sensor data
  * @param  Value pointer to temperature value
  * @retval None
  */
void BSP_SENSOR_TEMP_GetValue(float *Value)
{
 800af86:	b480      	push	{r7}
 800af88:	b083      	sub	sp, #12
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	6078      	str	r0, [r7, #4]
  #else
  *Value = 0.0f;
  #endif
#endif
#endif
}
 800af8e:	bf00      	nop
 800af90:	370c      	adds	r7, #12
 800af92:	46bd      	mov	sp, r7
 800af94:	bc80      	pop	{r7}
 800af96:	4770      	bx	lr

0800af98 <BSP_SENSOR_HUM_GetValue>:
  * @brief  Get humidity sensor data
  * @param  Value pointer to humidity value
  * @retval None
  */
void BSP_SENSOR_HUM_GetValue(float *Value)
{
 800af98:	b480      	push	{r7}
 800af9a:	b083      	sub	sp, #12
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  (void)CUSTOM_ENV_SENSOR_GetValue(CUSTOM_HUM_INSTANCE_0, ENV_HUMIDITY, Value);
  #else
  *Value = 0.0f;
  #endif
#endif
}
 800afa0:	bf00      	nop
 800afa2:	370c      	adds	r7, #12
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bc80      	pop	{r7}
 800afa8:	4770      	bx	lr

0800afaa <BSP_SENSOR_ACC_SetOutputDataRate>:
  * @brief  Set output data rate for accelerometer
  * @param  Odr Output Data Rate value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetOutputDataRate(float Odr)
{
 800afaa:	b580      	push	{r7, lr}
 800afac:	b082      	sub	sp, #8
 800afae:	af00      	add	r7, sp, #0
 800afb0:	6078      	str	r0, [r7, #4]
  (void)CUSTOM_HYBRID_MOTION_SENSOR_SetOutputDataRate(CUSTOM_ACC_INSTANCE_0, HYBRID_ACCELERO, Odr);
  #endif
#else
#if (defined BSP_MOTION_SENSORS)
  #ifdef CUSTOM_ACC_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_SetOutputDataRate(CUSTOM_ACC_INSTANCE_0, MOTION_ACCELERO, Odr);
 800afb2:	687a      	ldr	r2, [r7, #4]
 800afb4:	2102      	movs	r1, #2
 800afb6:	2000      	movs	r0, #0
 800afb8:	f000 f992 	bl	800b2e0 <CUSTOM_MOTION_SENSOR_SetOutputDataRate>
  #endif
#endif
#endif
}
 800afbc:	bf00      	nop
 800afbe:	3708      	adds	r7, #8
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}

0800afc4 <BSP_SENSOR_ACC_SetFullScale>:
  * @brief  Set full scale for acclerometer
  * @param  Fullscale Fullscale value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetFullScale(int32_t Fullscale)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b082      	sub	sp, #8
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
  (void)CUSTOM_HYBRID_MOTION_SENSOR_SetFullScale(CUSTOM_ACC_INSTANCE_0, HYBRID_ACCELERO, Fullscale);
  #endif
#else
#if (defined BSP_MOTION_SENSORS)
  #ifdef CUSTOM_ACC_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_SetFullScale(CUSTOM_ACC_INSTANCE_0, MOTION_ACCELERO, Fullscale);
 800afcc:	687a      	ldr	r2, [r7, #4]
 800afce:	2102      	movs	r1, #2
 800afd0:	2000      	movs	r0, #0
 800afd2:	f000 f9c9 	bl	800b368 <CUSTOM_MOTION_SENSOR_SetFullScale>
  #endif
#endif
#endif
}
 800afd6:	bf00      	nop
 800afd8:	3708      	adds	r7, #8
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}

0800afde <BSP_SENSOR_ACC_GetOrientation>:
  * @brief  Get accelerometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_ACC_GetOrientation(char *Orientation)
{
 800afde:	b480      	push	{r7}
 800afe0:	b083      	sub	sp, #12
 800afe2:	af00      	add	r7, sp, #0
 800afe4:	6078      	str	r0, [r7, #4]
#if (defined BSP_MOTION_SENSORS || defined BSP_HYBRID_SENSORS)
  #ifdef CUSTOM_ACC_INSTANCE_0
    Orientation[0] = 's';
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2273      	movs	r2, #115	; 0x73
 800afea:	701a      	strb	r2, [r3, #0]
    Orientation[1] = 'e';
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	3301      	adds	r3, #1
 800aff0:	2265      	movs	r2, #101	; 0x65
 800aff2:	701a      	strb	r2, [r3, #0]
    Orientation[2] = 'u';
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	3302      	adds	r3, #2
 800aff8:	2275      	movs	r2, #117	; 0x75
 800affa:	701a      	strb	r2, [r3, #0]
  #endif
#endif
}
 800affc:	bf00      	nop
 800affe:	370c      	adds	r7, #12
 800b000:	46bd      	mov	sp, r7
 800b002:	bc80      	pop	{r7}
 800b004:	4770      	bx	lr

0800b006 <BSP_SENSOR_GYR_GetOrientation>:
  * @brief  Get gyroscope sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_GYR_GetOrientation(char *Orientation)
{
 800b006:	b480      	push	{r7}
 800b008:	b083      	sub	sp, #12
 800b00a:	af00      	add	r7, sp, #0
 800b00c:	6078      	str	r0, [r7, #4]
#if (defined BSP_MOTION_SENSORS)
  #ifdef CUSTOM_GYR_INSTANCE_0
    Orientation[0] = 's';
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2273      	movs	r2, #115	; 0x73
 800b012:	701a      	strb	r2, [r3, #0]
    Orientation[1] = 'e';
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	3301      	adds	r3, #1
 800b018:	2265      	movs	r2, #101	; 0x65
 800b01a:	701a      	strb	r2, [r3, #0]
    Orientation[2] = 'u';
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	3302      	adds	r3, #2
 800b020:	2275      	movs	r2, #117	; 0x75
 800b022:	701a      	strb	r2, [r3, #0]
  #endif
#endif
}
 800b024:	bf00      	nop
 800b026:	370c      	adds	r7, #12
 800b028:	46bd      	mov	sp, r7
 800b02a:	bc80      	pop	{r7}
 800b02c:	4770      	bx	lr

0800b02e <BSP_SENSOR_MAG_GetOrientation>:
  * @brief  Get magnetometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_MAG_GetOrientation(char *Orientation)
{
 800b02e:	b480      	push	{r7}
 800b030:	b083      	sub	sp, #12
 800b032:	af00      	add	r7, sp, #0
 800b034:	6078      	str	r0, [r7, #4]
    Orientation[0] = 'n';
    Orientation[1] = 'e';
    Orientation[2] = 'u';
  #endif
#endif
}
 800b036:	bf00      	nop
 800b038:	370c      	adds	r7, #12
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bc80      	pop	{r7}
 800b03e:	4770      	bx	lr

0800b040 <CUSTOM_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
int32_t CUSTOM_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b08e      	sub	sp, #56	; 0x38
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
 800b048:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b04a:	2300      	movs	r3, #0
 800b04c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 800b04e:	2301      	movs	r3, #1
 800b050:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800b052:	2300      	movs	r3, #0
 800b054:	62bb      	str	r3, [r7, #40]	; 0x28
  CUSTOM_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d131      	bne.n	800b0c0 <CUSTOM_MOTION_SENSOR_Init+0x80>
  {
#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSOX_0 == 1)
    case CUSTOM_LSM6DSOX_0:
      if (LSM6DSOX_0_Probe(Functions) != BSP_ERROR_NONE)
 800b05c:	6838      	ldr	r0, [r7, #0]
 800b05e:	f000 f9c7 	bl	800b3f0 <LSM6DSOX_0_Probe>
 800b062:	4603      	mov	r3, r0
 800b064:	2b00      	cmp	r3, #0
 800b066:	d002      	beq.n	800b06e <CUSTOM_MOTION_SENSOR_Init+0x2e>
      {
        return BSP_ERROR_NO_INIT;
 800b068:	f04f 33ff 	mov.w	r3, #4294967295
 800b06c:	e064      	b.n	800b138 <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b06e:	4a34      	ldr	r2, [pc, #208]	; (800b140 <CUSTOM_MOTION_SENSOR_Init+0x100>)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b076:	68db      	ldr	r3, [r3, #12]
 800b078:	4932      	ldr	r1, [pc, #200]	; (800b144 <CUSTOM_MOTION_SENSOR_Init+0x104>)
 800b07a:	687a      	ldr	r2, [r7, #4]
 800b07c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b080:	f107 010c 	add.w	r1, r7, #12
 800b084:	4610      	mov	r0, r2
 800b086:	4798      	blx	r3
 800b088:	4603      	mov	r3, r0
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d002      	beq.n	800b094 <CUSTOM_MOTION_SENSOR_Init+0x54>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b08e:	f06f 0306 	mvn.w	r3, #6
 800b092:	e051      	b.n	800b138 <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
      if (cap.Acc == 1U)
 800b094:	7b3b      	ldrb	r3, [r7, #12]
 800b096:	2b01      	cmp	r3, #1
 800b098:	d103      	bne.n	800b0a2 <CUSTOM_MOTION_SENSOR_Init+0x62>
      {
        component_functions |= MOTION_ACCELERO;
 800b09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b09c:	f043 0302 	orr.w	r3, r3, #2
 800b0a0:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800b0a2:	7b7b      	ldrb	r3, [r7, #13]
 800b0a4:	2b01      	cmp	r3, #1
 800b0a6:	d103      	bne.n	800b0b0 <CUSTOM_MOTION_SENSOR_Init+0x70>
      {
        component_functions |= MOTION_GYRO;
 800b0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0aa:	f043 0301 	orr.w	r3, r3, #1
 800b0ae:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800b0b0:	7bbb      	ldrb	r3, [r7, #14]
 800b0b2:	2b01      	cmp	r3, #1
 800b0b4:	d108      	bne.n	800b0c8 <CUSTOM_MOTION_SENSOR_Init+0x88>
      {
        component_functions |= MOTION_MAGNETO;
 800b0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0b8:	f043 0304 	orr.w	r3, r3, #4
 800b0bc:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800b0be:	e003      	b.n	800b0c8 <CUSTOM_MOTION_SENSOR_Init+0x88>
#endif
    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800b0c0:	f06f 0301 	mvn.w	r3, #1
 800b0c4:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 800b0c6:	e000      	b.n	800b0ca <CUSTOM_MOTION_SENSOR_Init+0x8a>
      break;
 800b0c8:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800b0ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d001      	beq.n	800b0d4 <CUSTOM_MOTION_SENSOR_Init+0x94>
  {
    return ret;
 800b0d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0d2:	e031      	b.n	800b138 <CUSTOM_MOTION_SENSOR_Init+0xf8>
  }

  for (i = 0; i < CUSTOM_MOTION_FUNCTIONS_NBR; i++)
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b0d8:	e02a      	b.n	800b130 <CUSTOM_MOTION_SENSOR_Init+0xf0>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800b0da:	683a      	ldr	r2, [r7, #0]
 800b0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0de:	4013      	ands	r3, r2
 800b0e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d11e      	bne.n	800b124 <CUSTOM_MOTION_SENSOR_Init+0xe4>
 800b0e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ea:	4013      	ands	r3, r2
 800b0ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	d118      	bne.n	800b124 <CUSTOM_MOTION_SENSOR_Init+0xe4>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800b0f2:	4a15      	ldr	r2, [pc, #84]	; (800b148 <CUSTOM_MOTION_SENSOR_Init+0x108>)
 800b0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b0fa:	4814      	ldr	r0, [pc, #80]	; (800b14c <CUSTOM_MOTION_SENSOR_Init+0x10c>)
 800b0fc:	687a      	ldr	r2, [r7, #4]
 800b0fe:	4613      	mov	r3, r2
 800b100:	005b      	lsls	r3, r3, #1
 800b102:	4413      	add	r3, r2
 800b104:	440b      	add	r3, r1
 800b106:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	490d      	ldr	r1, [pc, #52]	; (800b144 <CUSTOM_MOTION_SENSOR_Init+0x104>)
 800b10e:	687a      	ldr	r2, [r7, #4]
 800b110:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b114:	4610      	mov	r0, r2
 800b116:	4798      	blx	r3
 800b118:	4603      	mov	r3, r0
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d002      	beq.n	800b124 <CUSTOM_MOTION_SENSOR_Init+0xe4>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800b11e:	f06f 0304 	mvn.w	r3, #4
 800b122:	e009      	b.n	800b138 <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
    }
    function = function << 1;
 800b124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b126:	005b      	lsls	r3, r3, #1
 800b128:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < CUSTOM_MOTION_FUNCTIONS_NBR; i++)
 800b12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b12c:	3301      	adds	r3, #1
 800b12e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b132:	2b02      	cmp	r3, #2
 800b134:	d9d1      	bls.n	800b0da <CUSTOM_MOTION_SENSOR_Init+0x9a>
  }

  return ret;
 800b136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3738      	adds	r7, #56	; 0x38
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}
 800b140:	20001090 	.word	0x20001090
 800b144:	20001080 	.word	0x20001080
 800b148:	20000080 	.word	0x20000080
 800b14c:	20001084 	.word	0x20001084

0800b150 <CUSTOM_MOTION_SENSOR_Enable>:
 *         - MOTION_ACCELERO
 *         - MOTION_MAGNETO
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b084      	sub	sp, #16
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d003      	beq.n	800b168 <CUSTOM_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b160:	f06f 0301 	mvn.w	r3, #1
 800b164:	60fb      	str	r3, [r7, #12]
 800b166:	e028      	b.n	800b1ba <CUSTOM_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800b168:	4a16      	ldr	r2, [pc, #88]	; (800b1c4 <CUSTOM_MOTION_SENSOR_Enable+0x74>)
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	4013      	ands	r3, r2
 800b174:	683a      	ldr	r2, [r7, #0]
 800b176:	429a      	cmp	r2, r3
 800b178:	d11c      	bne.n	800b1b4 <CUSTOM_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800b17a:	4a13      	ldr	r2, [pc, #76]	; (800b1c8 <CUSTOM_MOTION_SENSOR_Enable+0x78>)
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b182:	4812      	ldr	r0, [pc, #72]	; (800b1cc <CUSTOM_MOTION_SENSOR_Enable+0x7c>)
 800b184:	687a      	ldr	r2, [r7, #4]
 800b186:	4613      	mov	r3, r2
 800b188:	005b      	lsls	r3, r3, #1
 800b18a:	4413      	add	r3, r2
 800b18c:	440b      	add	r3, r1
 800b18e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	490e      	ldr	r1, [pc, #56]	; (800b1d0 <CUSTOM_MOTION_SENSOR_Enable+0x80>)
 800b196:	687a      	ldr	r2, [r7, #4]
 800b198:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b19c:	4610      	mov	r0, r2
 800b19e:	4798      	blx	r3
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d003      	beq.n	800b1ae <CUSTOM_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b1a6:	f06f 0304 	mvn.w	r3, #4
 800b1aa:	60fb      	str	r3, [r7, #12]
 800b1ac:	e005      	b.n	800b1ba <CUSTOM_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	60fb      	str	r3, [r7, #12]
 800b1b2:	e002      	b.n	800b1ba <CUSTOM_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b1b4:	f06f 0301 	mvn.w	r3, #1
 800b1b8:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3710      	adds	r7, #16
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}
 800b1c4:	20001094 	.word	0x20001094
 800b1c8:	20000080 	.word	0x20000080
 800b1cc:	20001084 	.word	0x20001084
 800b1d0:	20001080 	.word	0x20001080

0800b1d4 <CUSTOM_MOTION_SENSOR_Disable>:
 *         - MOTION_ACCELERO
 *         - MOTION_MAGNETO
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_Disable(uint32_t Instance, uint32_t Function)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b084      	sub	sp, #16
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d003      	beq.n	800b1ec <CUSTOM_MOTION_SENSOR_Disable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b1e4:	f06f 0301 	mvn.w	r3, #1
 800b1e8:	60fb      	str	r3, [r7, #12]
 800b1ea:	e028      	b.n	800b23e <CUSTOM_MOTION_SENSOR_Disable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800b1ec:	4a16      	ldr	r2, [pc, #88]	; (800b248 <CUSTOM_MOTION_SENSOR_Disable+0x74>)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	4013      	ands	r3, r2
 800b1f8:	683a      	ldr	r2, [r7, #0]
 800b1fa:	429a      	cmp	r2, r3
 800b1fc:	d11c      	bne.n	800b238 <CUSTOM_MOTION_SENSOR_Disable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Disable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800b1fe:	4a13      	ldr	r2, [pc, #76]	; (800b24c <CUSTOM_MOTION_SENSOR_Disable+0x78>)
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b206:	4812      	ldr	r0, [pc, #72]	; (800b250 <CUSTOM_MOTION_SENSOR_Disable+0x7c>)
 800b208:	687a      	ldr	r2, [r7, #4]
 800b20a:	4613      	mov	r3, r2
 800b20c:	005b      	lsls	r3, r3, #1
 800b20e:	4413      	add	r3, r2
 800b210:	440b      	add	r3, r1
 800b212:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	490e      	ldr	r1, [pc, #56]	; (800b254 <CUSTOM_MOTION_SENSOR_Disable+0x80>)
 800b21a:	687a      	ldr	r2, [r7, #4]
 800b21c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b220:	4610      	mov	r0, r2
 800b222:	4798      	blx	r3
 800b224:	4603      	mov	r3, r0
 800b226:	2b00      	cmp	r3, #0
 800b228:	d003      	beq.n	800b232 <CUSTOM_MOTION_SENSOR_Disable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b22a:	f06f 0304 	mvn.w	r3, #4
 800b22e:	60fb      	str	r3, [r7, #12]
 800b230:	e005      	b.n	800b23e <CUSTOM_MOTION_SENSOR_Disable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b232:	2300      	movs	r3, #0
 800b234:	60fb      	str	r3, [r7, #12]
 800b236:	e002      	b.n	800b23e <CUSTOM_MOTION_SENSOR_Disable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b238:	f06f 0301 	mvn.w	r3, #1
 800b23c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800b23e:	68fb      	ldr	r3, [r7, #12]
}
 800b240:	4618      	mov	r0, r3
 800b242:	3710      	adds	r7, #16
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}
 800b248:	20001094 	.word	0x20001094
 800b24c:	20000080 	.word	0x20000080
 800b250:	20001084 	.word	0x20001084
 800b254:	20001080 	.word	0x20001080

0800b258 <CUSTOM_MOTION_SENSOR_GetAxes>:
 *         - MOTION_MAGNETO
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, CUSTOM_MOTION_SENSOR_Axes_t *Axes)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b086      	sub	sp, #24
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	60f8      	str	r0, [r7, #12]
 800b260:	60b9      	str	r1, [r7, #8]
 800b262:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d003      	beq.n	800b272 <CUSTOM_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b26a:	f06f 0301 	mvn.w	r3, #1
 800b26e:	617b      	str	r3, [r7, #20]
 800b270:	e029      	b.n	800b2c6 <CUSTOM_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800b272:	4a17      	ldr	r2, [pc, #92]	; (800b2d0 <CUSTOM_MOTION_SENSOR_GetAxes+0x78>)
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b27a:	68bb      	ldr	r3, [r7, #8]
 800b27c:	4013      	ands	r3, r2
 800b27e:	68ba      	ldr	r2, [r7, #8]
 800b280:	429a      	cmp	r2, r3
 800b282:	d11d      	bne.n	800b2c0 <CUSTOM_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 800b284:	4a13      	ldr	r2, [pc, #76]	; (800b2d4 <CUSTOM_MOTION_SENSOR_GetAxes+0x7c>)
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b28c:	4812      	ldr	r0, [pc, #72]	; (800b2d8 <CUSTOM_MOTION_SENSOR_GetAxes+0x80>)
 800b28e:	68fa      	ldr	r2, [r7, #12]
 800b290:	4613      	mov	r3, r2
 800b292:	005b      	lsls	r3, r3, #1
 800b294:	4413      	add	r3, r2
 800b296:	440b      	add	r3, r1
 800b298:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b29c:	69db      	ldr	r3, [r3, #28]
 800b29e:	490f      	ldr	r1, [pc, #60]	; (800b2dc <CUSTOM_MOTION_SENSOR_GetAxes+0x84>)
 800b2a0:	68fa      	ldr	r2, [r7, #12]
 800b2a2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b2a6:	6879      	ldr	r1, [r7, #4]
 800b2a8:	4610      	mov	r0, r2
 800b2aa:	4798      	blx	r3
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d003      	beq.n	800b2ba <CUSTOM_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b2b2:	f06f 0304 	mvn.w	r3, #4
 800b2b6:	617b      	str	r3, [r7, #20]
 800b2b8:	e005      	b.n	800b2c6 <CUSTOM_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	617b      	str	r3, [r7, #20]
 800b2be:	e002      	b.n	800b2c6 <CUSTOM_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b2c0:	f06f 0301 	mvn.w	r3, #1
 800b2c4:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b2c6:	697b      	ldr	r3, [r7, #20]
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3718      	adds	r7, #24
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}
 800b2d0:	20001094 	.word	0x20001094
 800b2d4:	20000080 	.word	0x20000080
 800b2d8:	20001084 	.word	0x20001084
 800b2dc:	20001080 	.word	0x20001080

0800b2e0 <CUSTOM_MOTION_SENSOR_SetOutputDataRate>:
 *         - MOTION_MAGNETO
 * @param  Odr Output Data Rate value to be set
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b086      	sub	sp, #24
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	60f8      	str	r0, [r7, #12]
 800b2e8:	60b9      	str	r1, [r7, #8]
 800b2ea:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d003      	beq.n	800b2fa <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b2f2:	f06f 0301 	mvn.w	r3, #1
 800b2f6:	617b      	str	r3, [r7, #20]
 800b2f8:	e029      	b.n	800b34e <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800b2fa:	4a17      	ldr	r2, [pc, #92]	; (800b358 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x78>)
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	4013      	ands	r3, r2
 800b306:	68ba      	ldr	r2, [r7, #8]
 800b308:	429a      	cmp	r2, r3
 800b30a:	d11d      	bne.n	800b348 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800b30c:	4a13      	ldr	r2, [pc, #76]	; (800b35c <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b314:	4812      	ldr	r0, [pc, #72]	; (800b360 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x80>)
 800b316:	68fa      	ldr	r2, [r7, #12]
 800b318:	4613      	mov	r3, r2
 800b31a:	005b      	lsls	r3, r3, #1
 800b31c:	4413      	add	r3, r2
 800b31e:	440b      	add	r3, r1
 800b320:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b324:	691b      	ldr	r3, [r3, #16]
 800b326:	490f      	ldr	r1, [pc, #60]	; (800b364 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x84>)
 800b328:	68fa      	ldr	r2, [r7, #12]
 800b32a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b32e:	6879      	ldr	r1, [r7, #4]
 800b330:	4610      	mov	r0, r2
 800b332:	4798      	blx	r3
 800b334:	4603      	mov	r3, r0
 800b336:	2b00      	cmp	r3, #0
 800b338:	d003      	beq.n	800b342 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b33a:	f06f 0304 	mvn.w	r3, #4
 800b33e:	617b      	str	r3, [r7, #20]
 800b340:	e005      	b.n	800b34e <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b342:	2300      	movs	r3, #0
 800b344:	617b      	str	r3, [r7, #20]
 800b346:	e002      	b.n	800b34e <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b348:	f06f 0301 	mvn.w	r3, #1
 800b34c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b34e:	697b      	ldr	r3, [r7, #20]
}
 800b350:	4618      	mov	r0, r3
 800b352:	3718      	adds	r7, #24
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}
 800b358:	20001094 	.word	0x20001094
 800b35c:	20000080 	.word	0x20000080
 800b360:	20001084 	.word	0x20001084
 800b364:	20001080 	.word	0x20001080

0800b368 <CUSTOM_MOTION_SENSOR_SetFullScale>:
 *         - MOTION_MAGNETO
 * @param  Fullscale Fullscale value to be set
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b086      	sub	sp, #24
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	60f8      	str	r0, [r7, #12]
 800b370:	60b9      	str	r1, [r7, #8]
 800b372:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d003      	beq.n	800b382 <CUSTOM_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b37a:	f06f 0301 	mvn.w	r3, #1
 800b37e:	617b      	str	r3, [r7, #20]
 800b380:	e029      	b.n	800b3d6 <CUSTOM_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800b382:	4a17      	ldr	r2, [pc, #92]	; (800b3e0 <CUSTOM_MOTION_SENSOR_SetFullScale+0x78>)
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	4013      	ands	r3, r2
 800b38e:	68ba      	ldr	r2, [r7, #8]
 800b390:	429a      	cmp	r2, r3
 800b392:	d11d      	bne.n	800b3d0 <CUSTOM_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance], Fullscale) != BSP_ERROR_NONE)
 800b394:	4a13      	ldr	r2, [pc, #76]	; (800b3e4 <CUSTOM_MOTION_SENSOR_SetFullScale+0x7c>)
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b39c:	4812      	ldr	r0, [pc, #72]	; (800b3e8 <CUSTOM_MOTION_SENSOR_SetFullScale+0x80>)
 800b39e:	68fa      	ldr	r2, [r7, #12]
 800b3a0:	4613      	mov	r3, r2
 800b3a2:	005b      	lsls	r3, r3, #1
 800b3a4:	4413      	add	r3, r2
 800b3a6:	440b      	add	r3, r1
 800b3a8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b3ac:	699b      	ldr	r3, [r3, #24]
 800b3ae:	490f      	ldr	r1, [pc, #60]	; (800b3ec <CUSTOM_MOTION_SENSOR_SetFullScale+0x84>)
 800b3b0:	68fa      	ldr	r2, [r7, #12]
 800b3b2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b3b6:	6879      	ldr	r1, [r7, #4]
 800b3b8:	4610      	mov	r0, r2
 800b3ba:	4798      	blx	r3
 800b3bc:	4603      	mov	r3, r0
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d003      	beq.n	800b3ca <CUSTOM_MOTION_SENSOR_SetFullScale+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b3c2:	f06f 0304 	mvn.w	r3, #4
 800b3c6:	617b      	str	r3, [r7, #20]
 800b3c8:	e005      	b.n	800b3d6 <CUSTOM_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	617b      	str	r3, [r7, #20]
 800b3ce:	e002      	b.n	800b3d6 <CUSTOM_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b3d0:	f06f 0301 	mvn.w	r3, #1
 800b3d4:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b3d6:	697b      	ldr	r3, [r7, #20]
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3718      	adds	r7, #24
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}
 800b3e0:	20001094 	.word	0x20001094
 800b3e4:	20000080 	.word	0x20000080
 800b3e8:	20001084 	.word	0x20001084
 800b3ec:	20001080 	.word	0x20001080

0800b3f0 <LSM6DSOX_0_Probe>:
 * @param  Functions Motion sensor functions. Could be :
 *         - MOTION_GYRO and/or MOTION_ACCELERO
 * @retval BSP status
 */
static int32_t LSM6DSOX_0_Probe(uint32_t Functions)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b092      	sub	sp, #72	; 0x48
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
  LSM6DSOX_IO_t            io_ctx;
  uint8_t                  id;
  static LSM6DSOX_Object_t lsm6dsox_obj_0;
  LSM6DSOX_Capabilities_t  cap;
  int32_t                  ret = BSP_ERROR_NONE;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the driver */
  io_ctx.BusType     = LSM6DSOX_I2C_BUS; /* I2C */
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSOX_I2C_ADD_L; /* SA0 = GND */
 800b400:	23d5      	movs	r3, #213	; 0xd5
 800b402:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = CUSTOM_LSM6DSOX_0_I2C_Init;
 800b406:	4b4a      	ldr	r3, [pc, #296]	; (800b530 <LSM6DSOX_0_Probe+0x140>)
 800b408:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = CUSTOM_LSM6DSOX_0_I2C_DeInit;
 800b40a:	4b4a      	ldr	r3, [pc, #296]	; (800b534 <LSM6DSOX_0_Probe+0x144>)
 800b40c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = CUSTOM_LSM6DSOX_0_I2C_ReadReg;
 800b40e:	4b4a      	ldr	r3, [pc, #296]	; (800b538 <LSM6DSOX_0_Probe+0x148>)
 800b410:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = CUSTOM_LSM6DSOX_0_I2C_WriteReg;
 800b412:	4b4a      	ldr	r3, [pc, #296]	; (800b53c <LSM6DSOX_0_Probe+0x14c>)
 800b414:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = BSP_GetTick;
 800b416:	4b4a      	ldr	r3, [pc, #296]	; (800b540 <LSM6DSOX_0_Probe+0x150>)
 800b418:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSOX_RegisterBusIO(&lsm6dsox_obj_0, &io_ctx) != LSM6DSOX_OK)
 800b41a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b41e:	4619      	mov	r1, r3
 800b420:	4848      	ldr	r0, [pc, #288]	; (800b544 <LSM6DSOX_0_Probe+0x154>)
 800b422:	f7f7 f827 	bl	8002474 <LSM6DSOX_RegisterBusIO>
 800b426:	4603      	mov	r3, r0
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d003      	beq.n	800b434 <LSM6DSOX_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b42c:	f06f 0306 	mvn.w	r3, #6
 800b430:	647b      	str	r3, [r7, #68]	; 0x44
 800b432:	e077      	b.n	800b524 <LSM6DSOX_0_Probe+0x134>
  }
  else if (LSM6DSOX_ReadID(&lsm6dsox_obj_0, &id) != LSM6DSOX_OK)
 800b434:	f107 0327 	add.w	r3, r7, #39	; 0x27
 800b438:	4619      	mov	r1, r3
 800b43a:	4842      	ldr	r0, [pc, #264]	; (800b544 <LSM6DSOX_0_Probe+0x154>)
 800b43c:	f7f7 f91c 	bl	8002678 <LSM6DSOX_ReadID>
 800b440:	4603      	mov	r3, r0
 800b442:	2b00      	cmp	r3, #0
 800b444:	d003      	beq.n	800b44e <LSM6DSOX_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b446:	f06f 0306 	mvn.w	r3, #6
 800b44a:	647b      	str	r3, [r7, #68]	; 0x44
 800b44c:	e06a      	b.n	800b524 <LSM6DSOX_0_Probe+0x134>
  }
  else if (id != (uint8_t)LSM6DSOX_ID)
 800b44e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b452:	2b6c      	cmp	r3, #108	; 0x6c
 800b454:	d003      	beq.n	800b45e <LSM6DSOX_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b456:	f06f 0306 	mvn.w	r3, #6
 800b45a:	647b      	str	r3, [r7, #68]	; 0x44
 800b45c:	e062      	b.n	800b524 <LSM6DSOX_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSOX_GetCapabilities(&lsm6dsox_obj_0, &cap);
 800b45e:	f107 0308 	add.w	r3, r7, #8
 800b462:	4619      	mov	r1, r3
 800b464:	4837      	ldr	r0, [pc, #220]	; (800b544 <LSM6DSOX_0_Probe+0x154>)
 800b466:	f7f7 f91d 	bl	80026a4 <LSM6DSOX_GetCapabilities>
    MotionCtx[CUSTOM_LSM6DSOX_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800b46a:	7a7b      	ldrb	r3, [r7, #9]
 800b46c:	461a      	mov	r2, r3
 800b46e:	7a3b      	ldrb	r3, [r7, #8]
 800b470:	005b      	lsls	r3, r3, #1
 800b472:	431a      	orrs	r2, r3
 800b474:	7abb      	ldrb	r3, [r7, #10]
 800b476:	009b      	lsls	r3, r3, #2
 800b478:	4313      	orrs	r3, r2
 800b47a:	4a33      	ldr	r2, [pc, #204]	; (800b548 <LSM6DSOX_0_Probe+0x158>)
 800b47c:	6013      	str	r3, [r2, #0]

    MotionCompObj[CUSTOM_LSM6DSOX_0] = &lsm6dsox_obj_0;
 800b47e:	4b33      	ldr	r3, [pc, #204]	; (800b54c <LSM6DSOX_0_Probe+0x15c>)
 800b480:	4a30      	ldr	r2, [pc, #192]	; (800b544 <LSM6DSOX_0_Probe+0x154>)
 800b482:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[CUSTOM_LSM6DSOX_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSOX_COMMON_Driver;
 800b484:	4b32      	ldr	r3, [pc, #200]	; (800b550 <LSM6DSOX_0_Probe+0x160>)
 800b486:	4a33      	ldr	r2, [pc, #204]	; (800b554 <LSM6DSOX_0_Probe+0x164>)
 800b488:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800b48a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d11d      	bne.n	800b4cc <LSM6DSOX_0_Probe+0xdc>
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f003 0301 	and.w	r3, r3, #1
 800b496:	2b00      	cmp	r3, #0
 800b498:	d018      	beq.n	800b4cc <LSM6DSOX_0_Probe+0xdc>
 800b49a:	7a7b      	ldrb	r3, [r7, #9]
 800b49c:	2b01      	cmp	r3, #1
 800b49e:	d115      	bne.n	800b4cc <LSM6DSOX_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[CUSTOM_LSM6DSOX_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSOX_GYRO_Driver;
 800b4a0:	4b2d      	ldr	r3, [pc, #180]	; (800b558 <LSM6DSOX_0_Probe+0x168>)
 800b4a2:	685b      	ldr	r3, [r3, #4]
 800b4a4:	4a2d      	ldr	r2, [pc, #180]	; (800b55c <LSM6DSOX_0_Probe+0x16c>)
 800b4a6:	492e      	ldr	r1, [pc, #184]	; (800b560 <LSM6DSOX_0_Probe+0x170>)
 800b4a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[CUSTOM_LSM6DSOX_0]->Init(MotionCompObj[CUSTOM_LSM6DSOX_0]) != LSM6DSOX_OK)
 800b4ac:	4b28      	ldr	r3, [pc, #160]	; (800b550 <LSM6DSOX_0_Probe+0x160>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	4a26      	ldr	r2, [pc, #152]	; (800b54c <LSM6DSOX_0_Probe+0x15c>)
 800b4b4:	6812      	ldr	r2, [r2, #0]
 800b4b6:	4610      	mov	r0, r2
 800b4b8:	4798      	blx	r3
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d003      	beq.n	800b4c8 <LSM6DSOX_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b4c0:	f06f 0304 	mvn.w	r3, #4
 800b4c4:	647b      	str	r3, [r7, #68]	; 0x44
 800b4c6:	e001      	b.n	800b4cc <LSM6DSOX_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800b4cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d11d      	bne.n	800b50e <LSM6DSOX_0_Probe+0x11e>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f003 0302 	and.w	r3, r3, #2
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d018      	beq.n	800b50e <LSM6DSOX_0_Probe+0x11e>
 800b4dc:	7a3b      	ldrb	r3, [r7, #8]
 800b4de:	2b01      	cmp	r3, #1
 800b4e0:	d115      	bne.n	800b50e <LSM6DSOX_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[CUSTOM_LSM6DSOX_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSOX_ACC_Driver;
 800b4e2:	4b1d      	ldr	r3, [pc, #116]	; (800b558 <LSM6DSOX_0_Probe+0x168>)
 800b4e4:	689b      	ldr	r3, [r3, #8]
 800b4e6:	4a1d      	ldr	r2, [pc, #116]	; (800b55c <LSM6DSOX_0_Probe+0x16c>)
 800b4e8:	491e      	ldr	r1, [pc, #120]	; (800b564 <LSM6DSOX_0_Probe+0x174>)
 800b4ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[CUSTOM_LSM6DSOX_0]->Init(MotionCompObj[CUSTOM_LSM6DSOX_0]) != LSM6DSOX_OK)
 800b4ee:	4b18      	ldr	r3, [pc, #96]	; (800b550 <LSM6DSOX_0_Probe+0x160>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	4a15      	ldr	r2, [pc, #84]	; (800b54c <LSM6DSOX_0_Probe+0x15c>)
 800b4f6:	6812      	ldr	r2, [r2, #0]
 800b4f8:	4610      	mov	r0, r2
 800b4fa:	4798      	blx	r3
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d003      	beq.n	800b50a <LSM6DSOX_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b502:	f06f 0304 	mvn.w	r3, #4
 800b506:	647b      	str	r3, [r7, #68]	; 0x44
 800b508:	e001      	b.n	800b50e <LSM6DSOX_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b50a:	2300      	movs	r3, #0
 800b50c:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800b50e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b510:	2b00      	cmp	r3, #0
 800b512:	d107      	bne.n	800b524 <LSM6DSOX_0_Probe+0x134>
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f003 0304 	and.w	r3, r3, #4
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d002      	beq.n	800b524 <LSM6DSOX_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b51e:	f06f 0304 	mvn.w	r3, #4
 800b522:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 800b524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800b526:	4618      	mov	r0, r3
 800b528:	3748      	adds	r7, #72	; 0x48
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}
 800b52e:	bf00      	nop
 800b530:	080020c5 	.word	0x080020c5
 800b534:	08002141 	.word	0x08002141
 800b538:	080021f5 	.word	0x080021f5
 800b53c:	08002191 	.word	0x08002191
 800b540:	08002259 	.word	0x08002259
 800b544:	20001098 	.word	0x20001098
 800b548:	20001094 	.word	0x20001094
 800b54c:	20001080 	.word	0x20001080
 800b550:	20001090 	.word	0x20001090
 800b554:	20000008 	.word	0x20000008
 800b558:	20000080 	.word	0x20000080
 800b55c:	20001084 	.word	0x20001084
 800b560:	2000003c 	.word	0x2000003c
 800b564:	20000018 	.word	0x20000018

0800b568 <BUILD_REPLY_HEADER>:
 * @brief  Build the reply header
 * @param  Msg the pointer to the message to be built
 * @retval None
 */
void BUILD_REPLY_HEADER(TMsg *Msg)
{
 800b568:	b480      	push	{r7}
 800b56a:	b083      	sub	sp, #12
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  Msg->Data[0] = Msg->Data[1];
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	795a      	ldrb	r2, [r3, #5]
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	711a      	strb	r2, [r3, #4]
  Msg->Data[1] = DEV_ADDR;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2232      	movs	r2, #50	; 0x32
 800b57c:	715a      	strb	r2, [r3, #5]
  Msg->Data[2] += CMD_Reply_Add;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	799b      	ldrb	r3, [r3, #6]
 800b582:	3b80      	subs	r3, #128	; 0x80
 800b584:	b2da      	uxtb	r2, r3
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	719a      	strb	r2, [r3, #6]
}
 800b58a:	bf00      	nop
 800b58c:	370c      	adds	r7, #12
 800b58e:	46bd      	mov	sp, r7
 800b590:	bc80      	pop	{r7}
 800b592:	4770      	bx	lr

0800b594 <INIT_STREAMING_HEADER>:
 * @brief  Initialize the streaming header
 * @param  Msg the pointer to the header to be initialized
 * @retval None
 */
void INIT_STREAMING_HEADER(TMsg *Msg)
{
 800b594:	b480      	push	{r7}
 800b596:	b083      	sub	sp, #12
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
  Msg->Data[0] = DataStreamingDest;
 800b59c:	4b09      	ldr	r3, [pc, #36]	; (800b5c4 <INIT_STREAMING_HEADER+0x30>)
 800b59e:	781b      	ldrb	r3, [r3, #0]
 800b5a0:	b2da      	uxtb	r2, r3
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	711a      	strb	r2, [r3, #4]
  Msg->Data[1] = DEV_ADDR;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2232      	movs	r2, #50	; 0x32
 800b5aa:	715a      	strb	r2, [r3, #5]
  Msg->Data[2] = CMD_Start_Data_Streaming;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2208      	movs	r2, #8
 800b5b0:	719a      	strb	r2, [r3, #6]
  Msg->Len = 3;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2203      	movs	r2, #3
 800b5b6:	601a      	str	r2, [r3, #0]
}
 800b5b8:	bf00      	nop
 800b5ba:	370c      	adds	r7, #12
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bc80      	pop	{r7}
 800b5c0:	4770      	bx	lr
 800b5c2:	bf00      	nop
 800b5c4:	20000094 	.word	0x20000094

0800b5c8 <HandleMSG>:
 */
int HandleMSG(TMsg *Msg)
/*  DestAddr | SourceAddr | CMD | PAYLOAD
 *      1          1         1       N
 */
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b098      	sub	sp, #96	; 0x60
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
  int ret = 1;
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t i;
  char ps[64];
  uint32_t ps_len = 0;
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	60fb      	str	r3, [r7, #12]
  static uint32_t sensors_enabled_prev = 0;
  int32_t msg_offset;
  uint32_t msg_count;

  if (Msg->Len < 2U)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	2b01      	cmp	r3, #1
 800b5de:	d801      	bhi.n	800b5e4 <HandleMSG+0x1c>
  {
    return 0;
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	e36f      	b.n	800bcc4 <HandleMSG+0x6fc>
  }

  if (Msg->Data[0] != DEV_ADDR)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	791b      	ldrb	r3, [r3, #4]
 800b5e8:	2b32      	cmp	r3, #50	; 0x32
 800b5ea:	d001      	beq.n	800b5f0 <HandleMSG+0x28>
  {
    return 0;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	e369      	b.n	800bcc4 <HandleMSG+0x6fc>
  }

  switch (Msg->Data[2])   /* CMD */
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	799b      	ldrb	r3, [r3, #6]
 800b5f4:	2b12      	cmp	r3, #18
 800b5f6:	dc6b      	bgt.n	800b6d0 <HandleMSG+0x108>
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	dc3d      	bgt.n	800b678 <HandleMSG+0xb0>
 800b5fc:	e35e      	b.n	800bcbc <HandleMSG+0x6f4>
 800b5fe:	3b60      	subs	r3, #96	; 0x60
 800b600:	2b1a      	cmp	r3, #26
 800b602:	f200 835b 	bhi.w	800bcbc <HandleMSG+0x6f4>
 800b606:	a201      	add	r2, pc, #4	; (adr r2, 800b60c <HandleMSG+0x44>)
 800b608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b60c:	0800b773 	.word	0x0800b773
 800b610:	0800bcbd 	.word	0x0800bcbd
 800b614:	0800b7a1 	.word	0x0800b7a1
 800b618:	0800bcbd 	.word	0x0800bcbd
 800b61c:	0800bcbd 	.word	0x0800bcbd
 800b620:	0800bcbd 	.word	0x0800bcbd
 800b624:	0800bcbd 	.word	0x0800bcbd
 800b628:	0800bcbd 	.word	0x0800bcbd
 800b62c:	0800bcbd 	.word	0x0800bcbd
 800b630:	0800bcbd 	.word	0x0800bcbd
 800b634:	0800bcbd 	.word	0x0800bcbd
 800b638:	0800bcbd 	.word	0x0800bcbd
 800b63c:	0800bcbd 	.word	0x0800bcbd
 800b640:	0800bcbd 	.word	0x0800bcbd
 800b644:	0800bcbd 	.word	0x0800bcbd
 800b648:	0800bcbd 	.word	0x0800bcbd
 800b64c:	0800bcbd 	.word	0x0800bcbd
 800b650:	0800bcbd 	.word	0x0800bcbd
 800b654:	0800bcbd 	.word	0x0800bcbd
 800b658:	0800bcbd 	.word	0x0800bcbd
 800b65c:	0800bcbd 	.word	0x0800bcbd
 800b660:	0800bcbd 	.word	0x0800bcbd
 800b664:	0800b7cf 	.word	0x0800b7cf
 800b668:	0800bcbd 	.word	0x0800bcbd
 800b66c:	0800bcbd 	.word	0x0800bcbd
 800b670:	0800bcbd 	.word	0x0800bcbd
 800b674:	0800b7fd 	.word	0x0800b7fd
 800b678:	3b01      	subs	r3, #1
 800b67a:	2b11      	cmp	r3, #17
 800b67c:	f200 831e 	bhi.w	800bcbc <HandleMSG+0x6f4>
 800b680:	a201      	add	r2, pc, #4	; (adr r2, 800b688 <HandleMSG+0xc0>)
 800b682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b686:	bf00      	nop
 800b688:	0800b6dd 	.word	0x0800b6dd
 800b68c:	0800b717 	.word	0x0800b717
 800b690:	0800bcbd 	.word	0x0800bcbd
 800b694:	0800bcbd 	.word	0x0800bcbd
 800b698:	0800bcbd 	.word	0x0800bcbd
 800b69c:	0800bcbd 	.word	0x0800bcbd
 800b6a0:	0800bc81 	.word	0x0800bc81
 800b6a4:	0800b82b 	.word	0x0800b82b
 800b6a8:	0800b8d1 	.word	0x0800b8d1
 800b6ac:	0800bcbd 	.word	0x0800bcbd
 800b6b0:	0800bcbd 	.word	0x0800bcbd
 800b6b4:	0800b91b 	.word	0x0800b91b
 800b6b8:	0800bcbd 	.word	0x0800bcbd
 800b6bc:	0800b6fd 	.word	0x0800b6fd
 800b6c0:	0800bcbd 	.word	0x0800bcbd
 800b6c4:	0800b961 	.word	0x0800b961
 800b6c8:	0800bbd1 	.word	0x0800bbd1
 800b6cc:	0800bc1f 	.word	0x0800bc1f
 800b6d0:	2b7a      	cmp	r3, #122	; 0x7a
 800b6d2:	f300 82f3 	bgt.w	800bcbc <HandleMSG+0x6f4>
 800b6d6:	2b60      	cmp	r3, #96	; 0x60
 800b6d8:	da91      	bge.n	800b5fe <HandleMSG+0x36>
 800b6da:	e2ef      	b.n	800bcbc <HandleMSG+0x6f4>
  {
    case CMD_Ping:
      if (Msg->Len != 3U)
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	2b03      	cmp	r3, #3
 800b6e2:	d001      	beq.n	800b6e8 <HandleMSG+0x120>
      {
        return 0;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	e2ed      	b.n	800bcc4 <HandleMSG+0x6fc>
      }

      BUILD_REPLY_HEADER(Msg);
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f7ff ff3d 	bl	800b568 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2203      	movs	r2, #3
 800b6f2:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f7ff fa67 	bl	800abc8 <UART_SendMsg>
      break;
 800b6fa:	e2e2      	b.n	800bcc2 <HandleMSG+0x6fa>

    case CMD_Enter_DFU_Mode:
      if (Msg->Len != 3U)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	2b03      	cmp	r3, #3
 800b702:	d001      	beq.n	800b708 <HandleMSG+0x140>
      {
        return 0;
 800b704:	2300      	movs	r3, #0
 800b706:	e2dd      	b.n	800bcc4 <HandleMSG+0x6fc>
      }

      BUILD_REPLY_HEADER(Msg);
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f7ff ff2d 	bl	800b568 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2203      	movs	r2, #3
 800b712:	601a      	str	r2, [r3, #0]
      break;
 800b714:	e2d5      	b.n	800bcc2 <HandleMSG+0x6fa>

    case CMD_Read_PresString:
      if (Msg->Len != 3U)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	2b03      	cmp	r3, #3
 800b71c:	d001      	beq.n	800b722 <HandleMSG+0x15a>
      {
        return 0;
 800b71e:	2300      	movs	r3, #0
 800b720:	e2d0      	b.n	800bcc4 <HandleMSG+0x6fc>
      }

      BUILD_REPLY_HEADER(Msg);
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f7ff ff20 	bl	800b568 <BUILD_REPLY_HEADER>

      Get_PresentationString(ps, &ps_len);
 800b728:	f107 020c 	add.w	r2, r7, #12
 800b72c:	f107 0310 	add.w	r3, r7, #16
 800b730:	4611      	mov	r1, r2
 800b732:	4618      	mov	r0, r3
 800b734:	f000 fb22 	bl	800bd7c <Get_PresentationString>

      i = 0;
 800b738:	2300      	movs	r3, #0
 800b73a:	65bb      	str	r3, [r7, #88]	; 0x58
      while (i < ps_len)
 800b73c:	e00d      	b.n	800b75a <HandleMSG+0x192>
      {
        Msg->Data[3U + i] = ps[i];
 800b73e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b740:	3303      	adds	r3, #3
 800b742:	f107 0110 	add.w	r1, r7, #16
 800b746:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b748:	440a      	add	r2, r1
 800b74a:	7811      	ldrb	r1, [r2, #0]
 800b74c:	687a      	ldr	r2, [r7, #4]
 800b74e:	4413      	add	r3, r2
 800b750:	460a      	mov	r2, r1
 800b752:	711a      	strb	r2, [r3, #4]
        i++;
 800b754:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b756:	3301      	adds	r3, #1
 800b758:	65bb      	str	r3, [r7, #88]	; 0x58
      while (i < ps_len)
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b75e:	429a      	cmp	r2, r3
 800b760:	d3ed      	bcc.n	800b73e <HandleMSG+0x176>
      }

      Msg->Len = 3U + i;
 800b762:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b764:	1cda      	adds	r2, r3, #3
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f7ff fa2c 	bl	800abc8 <UART_SendMsg>
      break;
 800b770:	e2a7      	b.n	800bcc2 <HandleMSG+0x6fa>

    case CMD_PRESSURE_Init:
      if (Msg->Len < 3U)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	2b02      	cmp	r3, #2
 800b778:	d801      	bhi.n	800b77e <HandleMSG+0x1b6>
      {
        return 0;
 800b77a:	2300      	movs	r3, #0
 800b77c:	e2a2      	b.n	800bcc4 <HandleMSG+0x6fc>
      }

      BUILD_REPLY_HEADER(Msg);
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f7ff fef2 	bl	800b568 <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], PRESS_UNICLEO_ID, 4);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	3307      	adds	r3, #7
 800b788:	2204      	movs	r2, #4
 800b78a:	21ff      	movs	r1, #255	; 0xff
 800b78c:	4618      	mov	r0, r3
 800b78e:	f000 fd0b 	bl	800c1a8 <Serialize_s32>
      Msg->Len = 3 + 4;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2207      	movs	r2, #7
 800b796:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f7ff fa15 	bl	800abc8 <UART_SendMsg>
      break;
 800b79e:	e290      	b.n	800bcc2 <HandleMSG+0x6fa>

    case CMD_HUMIDITY_TEMPERATURE_Init:
      if (Msg->Len < 3U)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	2b02      	cmp	r3, #2
 800b7a6:	d801      	bhi.n	800b7ac <HandleMSG+0x1e4>
      {
        return 0;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	e28b      	b.n	800bcc4 <HandleMSG+0x6fc>
      }

      BUILD_REPLY_HEADER(Msg);
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f7ff fedb 	bl	800b568 <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], HUM_TEMP_UNICLEO_ID, 4);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	3307      	adds	r3, #7
 800b7b6:	2204      	movs	r2, #4
 800b7b8:	21ff      	movs	r1, #255	; 0xff
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f000 fcf4 	bl	800c1a8 <Serialize_s32>
      Msg->Len = 3 + 4;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2207      	movs	r2, #7
 800b7c4:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f7ff f9fe 	bl	800abc8 <UART_SendMsg>
      break;
 800b7cc:	e279      	b.n	800bcc2 <HandleMSG+0x6fa>

    case CMD_ACCELERO_GYRO_Init:
      if (Msg->Len < 3U)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	2b02      	cmp	r3, #2
 800b7d4:	d801      	bhi.n	800b7da <HandleMSG+0x212>
      {
        return 0;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	e274      	b.n	800bcc4 <HandleMSG+0x6fc>
      }

      BUILD_REPLY_HEADER(Msg);
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f7ff fec4 	bl	800b568 <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], ACC_GYR_UNICLEO_ID, 4);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	3307      	adds	r3, #7
 800b7e4:	2204      	movs	r2, #4
 800b7e6:	210a      	movs	r1, #10
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f000 fcdd 	bl	800c1a8 <Serialize_s32>
      Msg->Len = 3 + 4;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2207      	movs	r2, #7
 800b7f2:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f7ff f9e7 	bl	800abc8 <UART_SendMsg>
      break;
 800b7fa:	e262      	b.n	800bcc2 <HandleMSG+0x6fa>

    case CMD_MAGNETO_Init:
      if (Msg->Len < 3U)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	2b02      	cmp	r3, #2
 800b802:	d801      	bhi.n	800b808 <HandleMSG+0x240>
      {
        return 0;
 800b804:	2300      	movs	r3, #0
 800b806:	e25d      	b.n	800bcc4 <HandleMSG+0x6fc>
      }

      BUILD_REPLY_HEADER(Msg);
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f7ff fead 	bl	800b568 <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], MAG_UNICLEO_ID, 4);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	3307      	adds	r3, #7
 800b812:	2204      	movs	r2, #4
 800b814:	21ff      	movs	r1, #255	; 0xff
 800b816:	4618      	mov	r0, r3
 800b818:	f000 fcc6 	bl	800c1a8 <Serialize_s32>
      Msg->Len = 3 + 4;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2207      	movs	r2, #7
 800b820:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f7ff f9d0 	bl	800abc8 <UART_SendMsg>
      break;
 800b828:	e24b      	b.n	800bcc2 <HandleMSG+0x6fa>

    case CMD_Start_Data_Streaming:
      if (Msg->Len < 3U)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	2b02      	cmp	r3, #2
 800b830:	d801      	bhi.n	800b836 <HandleMSG+0x26e>
      {
        return 0;
 800b832:	2300      	movs	r3, #0
 800b834:	e246      	b.n	800bcc4 <HandleMSG+0x6fc>
      }

      SensorsEnabled = Deserialize(&Msg->Data[3], 4);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	3307      	adds	r3, #7
 800b83a:	2104      	movs	r1, #4
 800b83c:	4618      	mov	r0, r3
 800b83e:	f000 fc8e 	bl	800c15e <Deserialize>
 800b842:	4603      	mov	r3, r0
 800b844:	4a4d      	ldr	r2, [pc, #308]	; (800b97c <HandleMSG+0x3b4>)
 800b846:	6013      	str	r3, [r2, #0]

      /* Start enabled sensors */
      if ((SensorsEnabled & PRESSURE_SENSOR) == PRESSURE_SENSOR)
 800b848:	4b4c      	ldr	r3, [pc, #304]	; (800b97c <HandleMSG+0x3b4>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f003 0301 	and.w	r3, r3, #1
 800b850:	2b01      	cmp	r3, #1
 800b852:	d101      	bne.n	800b858 <HandleMSG+0x290>
      {
        BSP_SENSOR_PRESS_Enable();
 800b854:	f7ff fb28 	bl	800aea8 <BSP_SENSOR_PRESS_Enable>
      }

      if ((SensorsEnabled & TEMPERATURE_SENSOR) == TEMPERATURE_SENSOR)
 800b858:	4b48      	ldr	r3, [pc, #288]	; (800b97c <HandleMSG+0x3b4>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f003 0302 	and.w	r3, r3, #2
 800b860:	2b02      	cmp	r3, #2
 800b862:	d101      	bne.n	800b868 <HandleMSG+0x2a0>
      {
        BSP_SENSOR_TEMP_Enable();
 800b864:	f7ff fb26 	bl	800aeb4 <BSP_SENSOR_TEMP_Enable>
      }

      if ((SensorsEnabled & HUMIDITY_SENSOR) == HUMIDITY_SENSOR)
 800b868:	4b44      	ldr	r3, [pc, #272]	; (800b97c <HandleMSG+0x3b4>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f003 0304 	and.w	r3, r3, #4
 800b870:	2b04      	cmp	r3, #4
 800b872:	d101      	bne.n	800b878 <HandleMSG+0x2b0>
      {
        BSP_SENSOR_HUM_Enable();
 800b874:	f7ff fb24 	bl	800aec0 <BSP_SENSOR_HUM_Enable>
      }

      if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 800b878:	4b40      	ldr	r3, [pc, #256]	; (800b97c <HandleMSG+0x3b4>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f003 0310 	and.w	r3, r3, #16
 800b880:	2b10      	cmp	r3, #16
 800b882:	d101      	bne.n	800b888 <HandleMSG+0x2c0>
      {
        BSP_SENSOR_ACC_Enable();
 800b884:	f7ff fafa 	bl	800ae7c <BSP_SENSOR_ACC_Enable>
      }

      if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
 800b888:	4b3c      	ldr	r3, [pc, #240]	; (800b97c <HandleMSG+0x3b4>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f003 0320 	and.w	r3, r3, #32
 800b890:	2b20      	cmp	r3, #32
 800b892:	d101      	bne.n	800b898 <HandleMSG+0x2d0>
      {
        BSP_SENSOR_GYR_Enable();
 800b894:	f7ff fafa 	bl	800ae8c <BSP_SENSOR_GYR_Enable>
      }

      if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
 800b898:	4b38      	ldr	r3, [pc, #224]	; (800b97c <HandleMSG+0x3b4>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8a0:	2b40      	cmp	r3, #64	; 0x40
 800b8a2:	d101      	bne.n	800b8a8 <HandleMSG+0x2e0>
      {
        BSP_SENSOR_MAG_Enable();
 800b8a4:	f7ff fafa 	bl	800ae9c <BSP_SENSOR_MAG_Enable>
      }

      (void)HAL_TIM_Base_Start_IT(&BSP_IP_TIM_Handle);
 800b8a8:	4835      	ldr	r0, [pc, #212]	; (800b980 <HandleMSG+0x3b8>)
 800b8aa:	f7fc fe5d 	bl	8008568 <HAL_TIM_Base_Start_IT>
      DataLoggerActive = 1;
 800b8ae:	4b35      	ldr	r3, [pc, #212]	; (800b984 <HandleMSG+0x3bc>)
 800b8b0:	2201      	movs	r2, #1
 800b8b2:	701a      	strb	r2, [r3, #0]

      DataStreamingDest = Msg->Data[1];
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	795a      	ldrb	r2, [r3, #5]
 800b8b8:	4b33      	ldr	r3, [pc, #204]	; (800b988 <HandleMSG+0x3c0>)
 800b8ba:	701a      	strb	r2, [r3, #0]
      BUILD_REPLY_HEADER(Msg);
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	f7ff fe53 	bl	800b568 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2203      	movs	r2, #3
 800b8c6:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f7ff f97d 	bl	800abc8 <UART_SendMsg>
      break;
 800b8ce:	e1f8      	b.n	800bcc2 <HandleMSG+0x6fa>

    case CMD_Stop_Data_Streaming:
      if (Msg->Len < 3U)
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	2b02      	cmp	r3, #2
 800b8d6:	d801      	bhi.n	800b8dc <HandleMSG+0x314>
      {
        return 0;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	e1f3      	b.n	800bcc4 <HandleMSG+0x6fc>
      }

      DataLoggerActive = 0;
 800b8dc:	4b29      	ldr	r3, [pc, #164]	; (800b984 <HandleMSG+0x3bc>)
 800b8de:	2200      	movs	r2, #0
 800b8e0:	701a      	strb	r2, [r3, #0]
      (void)HAL_TIM_Base_Stop_IT(&BSP_IP_TIM_Handle);
 800b8e2:	4827      	ldr	r0, [pc, #156]	; (800b980 <HandleMSG+0x3b8>)
 800b8e4:	f7fc fe8c 	bl	8008600 <HAL_TIM_Base_Stop_IT>

      /* Disable all sensors */
      BSP_SENSOR_ACC_Disable();
 800b8e8:	f7ff faf0 	bl	800aecc <BSP_SENSOR_ACC_Disable>
      BSP_SENSOR_GYR_Disable();
 800b8ec:	f7ff faf6 	bl	800aedc <BSP_SENSOR_GYR_Disable>
      BSP_SENSOR_MAG_Disable();
 800b8f0:	f7ff fafc 	bl	800aeec <BSP_SENSOR_MAG_Disable>
      BSP_SENSOR_PRESS_Disable();
 800b8f4:	f7ff fb00 	bl	800aef8 <BSP_SENSOR_PRESS_Disable>
      BSP_SENSOR_TEMP_Disable();
 800b8f8:	f7ff fb04 	bl	800af04 <BSP_SENSOR_TEMP_Disable>
      BSP_SENSOR_HUM_Disable();
 800b8fc:	f7ff fb08 	bl	800af10 <BSP_SENSOR_HUM_Disable>

      SensorsEnabled = 0;
 800b900:	4b1e      	ldr	r3, [pc, #120]	; (800b97c <HandleMSG+0x3b4>)
 800b902:	2200      	movs	r2, #0
 800b904:	601a      	str	r2, [r3, #0]
      UseOfflineData = 0;
 800b906:	4b21      	ldr	r3, [pc, #132]	; (800b98c <HandleMSG+0x3c4>)
 800b908:	2200      	movs	r2, #0
 800b90a:	701a      	strb	r2, [r3, #0]

      BUILD_REPLY_HEADER(Msg);
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f7ff fe2b 	bl	800b568 <BUILD_REPLY_HEADER>
      UART_SendMsg(Msg);
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f7ff f958 	bl	800abc8 <UART_SendMsg>
      break;
 800b918:	e1d3      	b.n	800bcc2 <HandleMSG+0x6fa>

    case CMD_Set_DateTime:
      if (Msg->Len < 3U)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	2b02      	cmp	r3, #2
 800b920:	d801      	bhi.n	800b926 <HandleMSG+0x35e>
      {
        return 0;
 800b922:	2300      	movs	r3, #0
 800b924:	e1ce      	b.n	800bcc4 <HandleMSG+0x6fc>
      }

      BUILD_REPLY_HEADER(Msg);
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f7ff fe1e 	bl	800b568 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2203      	movs	r2, #3
 800b930:	601a      	str	r2, [r3, #0]
      RTC_TimeRegulate(Msg->Data[3], Msg->Data[4], Msg->Data[5]);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	79d8      	ldrb	r0, [r3, #7]
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	7a19      	ldrb	r1, [r3, #8]
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	7a5b      	ldrb	r3, [r3, #9]
 800b93e:	461a      	mov	r2, r3
 800b940:	f000 f9f2 	bl	800bd28 <RTC_TimeRegulate>
      RTC_DateRegulate(Msg->Data[6], Msg->Data[7], Msg->Data[8], Msg->Data[9]);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	7a98      	ldrb	r0, [r3, #10]
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	7ad9      	ldrb	r1, [r3, #11]
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	7b1a      	ldrb	r2, [r3, #12]
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	7b5b      	ldrb	r3, [r3, #13]
 800b954:	f000 f9be 	bl	800bcd4 <RTC_DateRegulate>
      UART_SendMsg(Msg);
 800b958:	6878      	ldr	r0, [r7, #4]
 800b95a:	f7ff f935 	bl	800abc8 <UART_SendMsg>
      break;
 800b95e:	e1b0      	b.n	800bcc2 <HandleMSG+0x6fa>

    case CMD_Offline_Data:
      if (Msg->Len < 55U)
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	2b36      	cmp	r3, #54	; 0x36
 800b966:	d801      	bhi.n	800b96c <HandleMSG+0x3a4>
      {
        return 0;
 800b968:	2300      	movs	r3, #0
 800b96a:	e1ab      	b.n	800bcc4 <HandleMSG+0x6fc>
      }

      msg_offset = 4;
 800b96c:	2304      	movs	r3, #4
 800b96e:	657b      	str	r3, [r7, #84]	; 0x54
      msg_count = (uint32_t)Msg->Data[3];
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	79db      	ldrb	r3, [r3, #7]
 800b974:	653b      	str	r3, [r7, #80]	; 0x50

      for (i = 0; i < msg_count; i++)
 800b976:	2300      	movs	r3, #0
 800b978:	65bb      	str	r3, [r7, #88]	; 0x58
 800b97a:	e11a      	b.n	800bbb2 <HandleMSG+0x5ea>
 800b97c:	20000844 	.word	0x20000844
 800b980:	200006ac 	.word	0x200006ac
 800b984:	20000840 	.word	0x20000840
 800b988:	20000094 	.word	0x20000094
 800b98c:	20000871 	.word	0x20000871
      {
        memcpy(&OfflineData[OfflineDataWriteIndex].hours, &Msg->Data[msg_offset], 1);
 800b990:	4ba6      	ldr	r3, [pc, #664]	; (800bc2c <HandleMSG+0x664>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	2234      	movs	r2, #52	; 0x34
 800b996:	fb02 f303 	mul.w	r3, r2, r3
 800b99a:	4aa5      	ldr	r2, [pc, #660]	; (800bc30 <HandleMSG+0x668>)
 800b99c:	4413      	add	r3, r2
 800b99e:	6879      	ldr	r1, [r7, #4]
 800b9a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b9a2:	440a      	add	r2, r1
 800b9a4:	3204      	adds	r2, #4
 800b9a6:	7812      	ldrb	r2, [r2, #0]
 800b9a8:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].minutes, &Msg->Data[msg_offset + 1], 1);
 800b9aa:	4ba0      	ldr	r3, [pc, #640]	; (800bc2c <HandleMSG+0x664>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	2234      	movs	r2, #52	; 0x34
 800b9b0:	fb02 f303 	mul.w	r3, r2, r3
 800b9b4:	4a9e      	ldr	r2, [pc, #632]	; (800bc30 <HandleMSG+0x668>)
 800b9b6:	4413      	add	r3, r2
 800b9b8:	3301      	adds	r3, #1
 800b9ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b9bc:	3201      	adds	r2, #1
 800b9be:	6879      	ldr	r1, [r7, #4]
 800b9c0:	440a      	add	r2, r1
 800b9c2:	3204      	adds	r2, #4
 800b9c4:	7812      	ldrb	r2, [r2, #0]
 800b9c6:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].seconds, &Msg->Data[msg_offset + 2], 1);
 800b9c8:	4b98      	ldr	r3, [pc, #608]	; (800bc2c <HandleMSG+0x664>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	2234      	movs	r2, #52	; 0x34
 800b9ce:	fb02 f303 	mul.w	r3, r2, r3
 800b9d2:	4a97      	ldr	r2, [pc, #604]	; (800bc30 <HandleMSG+0x668>)
 800b9d4:	4413      	add	r3, r2
 800b9d6:	3302      	adds	r3, #2
 800b9d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b9da:	3202      	adds	r2, #2
 800b9dc:	6879      	ldr	r1, [r7, #4]
 800b9de:	440a      	add	r2, r1
 800b9e0:	3204      	adds	r2, #4
 800b9e2:	7812      	ldrb	r2, [r2, #0]
 800b9e4:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].subsec, &Msg->Data[msg_offset + 3], 1);
 800b9e6:	4b91      	ldr	r3, [pc, #580]	; (800bc2c <HandleMSG+0x664>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	2234      	movs	r2, #52	; 0x34
 800b9ec:	fb02 f303 	mul.w	r3, r2, r3
 800b9f0:	4a8f      	ldr	r2, [pc, #572]	; (800bc30 <HandleMSG+0x668>)
 800b9f2:	4413      	add	r3, r2
 800b9f4:	3303      	adds	r3, #3
 800b9f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b9f8:	3203      	adds	r2, #3
 800b9fa:	6879      	ldr	r1, [r7, #4]
 800b9fc:	440a      	add	r2, r1
 800b9fe:	3204      	adds	r2, #4
 800ba00:	7812      	ldrb	r2, [r2, #0]
 800ba02:	701a      	strb	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].pressure, &Msg->Data[msg_offset + 4], 4);
 800ba04:	4b89      	ldr	r3, [pc, #548]	; (800bc2c <HandleMSG+0x664>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	2234      	movs	r2, #52	; 0x34
 800ba0a:	fb02 f303 	mul.w	r3, r2, r3
 800ba0e:	4a88      	ldr	r2, [pc, #544]	; (800bc30 <HandleMSG+0x668>)
 800ba10:	4413      	add	r3, r2
 800ba12:	3304      	adds	r3, #4
 800ba14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ba16:	3204      	adds	r2, #4
 800ba18:	6879      	ldr	r1, [r7, #4]
 800ba1a:	440a      	add	r2, r1
 800ba1c:	3204      	adds	r2, #4
 800ba1e:	6812      	ldr	r2, [r2, #0]
 800ba20:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].temperature, &Msg->Data[msg_offset + 8], 4);
 800ba22:	4b82      	ldr	r3, [pc, #520]	; (800bc2c <HandleMSG+0x664>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	2234      	movs	r2, #52	; 0x34
 800ba28:	fb02 f303 	mul.w	r3, r2, r3
 800ba2c:	3308      	adds	r3, #8
 800ba2e:	4a80      	ldr	r2, [pc, #512]	; (800bc30 <HandleMSG+0x668>)
 800ba30:	4413      	add	r3, r2
 800ba32:	3304      	adds	r3, #4
 800ba34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ba36:	3208      	adds	r2, #8
 800ba38:	6879      	ldr	r1, [r7, #4]
 800ba3a:	440a      	add	r2, r1
 800ba3c:	3204      	adds	r2, #4
 800ba3e:	6812      	ldr	r2, [r2, #0]
 800ba40:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].humidity, &Msg->Data[msg_offset + 12], 4);
 800ba42:	4b7a      	ldr	r3, [pc, #488]	; (800bc2c <HandleMSG+0x664>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	2234      	movs	r2, #52	; 0x34
 800ba48:	fb02 f303 	mul.w	r3, r2, r3
 800ba4c:	3308      	adds	r3, #8
 800ba4e:	4a78      	ldr	r2, [pc, #480]	; (800bc30 <HandleMSG+0x668>)
 800ba50:	4413      	add	r3, r2
 800ba52:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ba54:	320c      	adds	r2, #12
 800ba56:	6879      	ldr	r1, [r7, #4]
 800ba58:	440a      	add	r2, r1
 800ba5a:	3204      	adds	r2, #4
 800ba5c:	6812      	ldr	r2, [r2, #0]
 800ba5e:	601a      	str	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_x_mg, &Msg->Data[msg_offset + 16], 4);
 800ba60:	4b72      	ldr	r3, [pc, #456]	; (800bc2c <HandleMSG+0x664>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	2234      	movs	r2, #52	; 0x34
 800ba66:	fb02 f303 	mul.w	r3, r2, r3
 800ba6a:	3310      	adds	r3, #16
 800ba6c:	4a70      	ldr	r2, [pc, #448]	; (800bc30 <HandleMSG+0x668>)
 800ba6e:	4413      	add	r3, r2
 800ba70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ba72:	3210      	adds	r2, #16
 800ba74:	6879      	ldr	r1, [r7, #4]
 800ba76:	440a      	add	r2, r1
 800ba78:	3204      	adds	r2, #4
 800ba7a:	6812      	ldr	r2, [r2, #0]
 800ba7c:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_y_mg, &Msg->Data[msg_offset + 20], 4);
 800ba7e:	4b6b      	ldr	r3, [pc, #428]	; (800bc2c <HandleMSG+0x664>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	2234      	movs	r2, #52	; 0x34
 800ba84:	fb02 f303 	mul.w	r3, r2, r3
 800ba88:	3310      	adds	r3, #16
 800ba8a:	4a69      	ldr	r2, [pc, #420]	; (800bc30 <HandleMSG+0x668>)
 800ba8c:	4413      	add	r3, r2
 800ba8e:	3304      	adds	r3, #4
 800ba90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ba92:	3214      	adds	r2, #20
 800ba94:	6879      	ldr	r1, [r7, #4]
 800ba96:	440a      	add	r2, r1
 800ba98:	3204      	adds	r2, #4
 800ba9a:	6812      	ldr	r2, [r2, #0]
 800ba9c:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_z_mg, &Msg->Data[msg_offset + 24], 4);
 800ba9e:	4b63      	ldr	r3, [pc, #396]	; (800bc2c <HandleMSG+0x664>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	2234      	movs	r2, #52	; 0x34
 800baa4:	fb02 f303 	mul.w	r3, r2, r3
 800baa8:	3318      	adds	r3, #24
 800baaa:	4a61      	ldr	r2, [pc, #388]	; (800bc30 <HandleMSG+0x668>)
 800baac:	4413      	add	r3, r2
 800baae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bab0:	3218      	adds	r2, #24
 800bab2:	6879      	ldr	r1, [r7, #4]
 800bab4:	440a      	add	r2, r1
 800bab6:	3204      	adds	r2, #4
 800bab8:	6812      	ldr	r2, [r2, #0]
 800baba:	601a      	str	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_x_mdps, &Msg->Data[msg_offset + 28], 4);
 800babc:	4b5b      	ldr	r3, [pc, #364]	; (800bc2c <HandleMSG+0x664>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	2234      	movs	r2, #52	; 0x34
 800bac2:	fb02 f303 	mul.w	r3, r2, r3
 800bac6:	3318      	adds	r3, #24
 800bac8:	4a59      	ldr	r2, [pc, #356]	; (800bc30 <HandleMSG+0x668>)
 800baca:	4413      	add	r3, r2
 800bacc:	3304      	adds	r3, #4
 800bace:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bad0:	321c      	adds	r2, #28
 800bad2:	6879      	ldr	r1, [r7, #4]
 800bad4:	440a      	add	r2, r1
 800bad6:	3204      	adds	r2, #4
 800bad8:	6812      	ldr	r2, [r2, #0]
 800bada:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_y_mdps, &Msg->Data[msg_offset + 32], 4);
 800badc:	4b53      	ldr	r3, [pc, #332]	; (800bc2c <HandleMSG+0x664>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	2234      	movs	r2, #52	; 0x34
 800bae2:	fb02 f303 	mul.w	r3, r2, r3
 800bae6:	3320      	adds	r3, #32
 800bae8:	4a51      	ldr	r2, [pc, #324]	; (800bc30 <HandleMSG+0x668>)
 800baea:	4413      	add	r3, r2
 800baec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800baee:	3220      	adds	r2, #32
 800baf0:	6879      	ldr	r1, [r7, #4]
 800baf2:	440a      	add	r2, r1
 800baf4:	3204      	adds	r2, #4
 800baf6:	6812      	ldr	r2, [r2, #0]
 800baf8:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_z_mdps, &Msg->Data[msg_offset + 36], 4);
 800bafa:	4b4c      	ldr	r3, [pc, #304]	; (800bc2c <HandleMSG+0x664>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	2234      	movs	r2, #52	; 0x34
 800bb00:	fb02 f303 	mul.w	r3, r2, r3
 800bb04:	3320      	adds	r3, #32
 800bb06:	4a4a      	ldr	r2, [pc, #296]	; (800bc30 <HandleMSG+0x668>)
 800bb08:	4413      	add	r3, r2
 800bb0a:	3304      	adds	r3, #4
 800bb0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bb0e:	3224      	adds	r2, #36	; 0x24
 800bb10:	6879      	ldr	r1, [r7, #4]
 800bb12:	440a      	add	r2, r1
 800bb14:	3204      	adds	r2, #4
 800bb16:	6812      	ldr	r2, [r2, #0]
 800bb18:	601a      	str	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_x_mgauss, &Msg->Data[msg_offset + 40], 4);
 800bb1a:	4b44      	ldr	r3, [pc, #272]	; (800bc2c <HandleMSG+0x664>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	2234      	movs	r2, #52	; 0x34
 800bb20:	fb02 f303 	mul.w	r3, r2, r3
 800bb24:	3328      	adds	r3, #40	; 0x28
 800bb26:	4a42      	ldr	r2, [pc, #264]	; (800bc30 <HandleMSG+0x668>)
 800bb28:	4413      	add	r3, r2
 800bb2a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bb2c:	3228      	adds	r2, #40	; 0x28
 800bb2e:	6879      	ldr	r1, [r7, #4]
 800bb30:	440a      	add	r2, r1
 800bb32:	3204      	adds	r2, #4
 800bb34:	6812      	ldr	r2, [r2, #0]
 800bb36:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_y_mgauss, &Msg->Data[msg_offset + 44], 4);
 800bb38:	4b3c      	ldr	r3, [pc, #240]	; (800bc2c <HandleMSG+0x664>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	2234      	movs	r2, #52	; 0x34
 800bb3e:	fb02 f303 	mul.w	r3, r2, r3
 800bb42:	3328      	adds	r3, #40	; 0x28
 800bb44:	4a3a      	ldr	r2, [pc, #232]	; (800bc30 <HandleMSG+0x668>)
 800bb46:	4413      	add	r3, r2
 800bb48:	3304      	adds	r3, #4
 800bb4a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bb4c:	322c      	adds	r2, #44	; 0x2c
 800bb4e:	6879      	ldr	r1, [r7, #4]
 800bb50:	440a      	add	r2, r1
 800bb52:	3204      	adds	r2, #4
 800bb54:	6812      	ldr	r2, [r2, #0]
 800bb56:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_z_mgauss, &Msg->Data[msg_offset + 48], 4);
 800bb58:	4b34      	ldr	r3, [pc, #208]	; (800bc2c <HandleMSG+0x664>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	2234      	movs	r2, #52	; 0x34
 800bb5e:	fb02 f303 	mul.w	r3, r2, r3
 800bb62:	3330      	adds	r3, #48	; 0x30
 800bb64:	4a32      	ldr	r2, [pc, #200]	; (800bc30 <HandleMSG+0x668>)
 800bb66:	4413      	add	r3, r2
 800bb68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bb6a:	3230      	adds	r2, #48	; 0x30
 800bb6c:	6879      	ldr	r1, [r7, #4]
 800bb6e:	440a      	add	r2, r1
 800bb70:	3204      	adds	r2, #4
 800bb72:	6812      	ldr	r2, [r2, #0]
 800bb74:	601a      	str	r2, [r3, #0]

        msg_offset += 52;
 800bb76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb78:	3334      	adds	r3, #52	; 0x34
 800bb7a:	657b      	str	r3, [r7, #84]	; 0x54

        OfflineDataCount++;
 800bb7c:	4b2d      	ldr	r3, [pc, #180]	; (800bc34 <HandleMSG+0x66c>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	3301      	adds	r3, #1
 800bb82:	4a2c      	ldr	r2, [pc, #176]	; (800bc34 <HandleMSG+0x66c>)
 800bb84:	6013      	str	r3, [r2, #0]
        if (OfflineDataCount > OFFLINE_DATA_SIZE)
 800bb86:	4b2b      	ldr	r3, [pc, #172]	; (800bc34 <HandleMSG+0x66c>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	2b08      	cmp	r3, #8
 800bb8c:	dd02      	ble.n	800bb94 <HandleMSG+0x5cc>
        {
          OfflineDataCount = OFFLINE_DATA_SIZE;
 800bb8e:	4b29      	ldr	r3, [pc, #164]	; (800bc34 <HandleMSG+0x66c>)
 800bb90:	2208      	movs	r2, #8
 800bb92:	601a      	str	r2, [r3, #0]
        }

        OfflineDataWriteIndex++;
 800bb94:	4b25      	ldr	r3, [pc, #148]	; (800bc2c <HandleMSG+0x664>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	3301      	adds	r3, #1
 800bb9a:	4a24      	ldr	r2, [pc, #144]	; (800bc2c <HandleMSG+0x664>)
 800bb9c:	6013      	str	r3, [r2, #0]
        if (OfflineDataWriteIndex >= OFFLINE_DATA_SIZE)
 800bb9e:	4b23      	ldr	r3, [pc, #140]	; (800bc2c <HandleMSG+0x664>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	2b07      	cmp	r3, #7
 800bba4:	dd02      	ble.n	800bbac <HandleMSG+0x5e4>
        {
          OfflineDataWriteIndex = 0;
 800bba6:	4b21      	ldr	r3, [pc, #132]	; (800bc2c <HandleMSG+0x664>)
 800bba8:	2200      	movs	r2, #0
 800bbaa:	601a      	str	r2, [r3, #0]
      for (i = 0; i < msg_count; i++)
 800bbac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bbae:	3301      	adds	r3, #1
 800bbb0:	65bb      	str	r3, [r7, #88]	; 0x58
 800bbb2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bbb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbb6:	429a      	cmp	r2, r3
 800bbb8:	f4ff aeea 	bcc.w	800b990 <HandleMSG+0x3c8>
        }
      }

      SensorReadRequest = 1;
 800bbbc:	4b1e      	ldr	r3, [pc, #120]	; (800bc38 <HandleMSG+0x670>)
 800bbbe:	2201      	movs	r2, #1
 800bbc0:	701a      	strb	r2, [r3, #0]

      /* Mark Msg as read */
      BUILD_REPLY_HEADER(Msg);
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f7ff fcd0 	bl	800b568 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2203      	movs	r2, #3
 800bbcc:	601a      	str	r2, [r3, #0]
      break;
 800bbce:	e078      	b.n	800bcc2 <HandleMSG+0x6fa>

    case CMD_Use_Offline_Data:
      if (Msg->Len < 4U)
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	2b03      	cmp	r3, #3
 800bbd6:	d801      	bhi.n	800bbdc <HandleMSG+0x614>
      {
        return 0;
 800bbd8:	2300      	movs	r3, #0
 800bbda:	e073      	b.n	800bcc4 <HandleMSG+0x6fc>
      }

      if (Msg->Data[3] == 1U)
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	79db      	ldrb	r3, [r3, #7]
 800bbe0:	2b01      	cmp	r3, #1
 800bbe2:	d10e      	bne.n	800bc02 <HandleMSG+0x63a>
      {
        UseOfflineData = 1U;
 800bbe4:	4b15      	ldr	r3, [pc, #84]	; (800bc3c <HandleMSG+0x674>)
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	701a      	strb	r2, [r3, #0]
        sensors_enabled_prev = SensorsEnabled;
 800bbea:	4b15      	ldr	r3, [pc, #84]	; (800bc40 <HandleMSG+0x678>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	4a15      	ldr	r2, [pc, #84]	; (800bc44 <HandleMSG+0x67c>)
 800bbf0:	6013      	str	r3, [r2, #0]
        SensorsEnabled = 0xFFFFFFFFU;
 800bbf2:	4b13      	ldr	r3, [pc, #76]	; (800bc40 <HandleMSG+0x678>)
 800bbf4:	f04f 32ff 	mov.w	r2, #4294967295
 800bbf8:	601a      	str	r2, [r3, #0]
        (void)HAL_TIM_Base_Stop_IT(&BSP_IP_TIM_Handle);
 800bbfa:	4813      	ldr	r0, [pc, #76]	; (800bc48 <HandleMSG+0x680>)
 800bbfc:	f7fc fd00 	bl	8008600 <HAL_TIM_Base_Stop_IT>
 800bc00:	e006      	b.n	800bc10 <HandleMSG+0x648>
      }
      else
      {
        UseOfflineData = 0U;
 800bc02:	4b0e      	ldr	r3, [pc, #56]	; (800bc3c <HandleMSG+0x674>)
 800bc04:	2200      	movs	r2, #0
 800bc06:	701a      	strb	r2, [r3, #0]
        SensorsEnabled = sensors_enabled_prev;
 800bc08:	4b0e      	ldr	r3, [pc, #56]	; (800bc44 <HandleMSG+0x67c>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	4a0c      	ldr	r2, [pc, #48]	; (800bc40 <HandleMSG+0x678>)
 800bc0e:	6013      	str	r3, [r2, #0]
      }

      BUILD_REPLY_HEADER(Msg);
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f7ff fca9 	bl	800b568 <BUILD_REPLY_HEADER>
      UART_SendMsg(Msg);
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f7fe ffd6 	bl	800abc8 <UART_SendMsg>
      break;
 800bc1c:	e051      	b.n	800bcc2 <HandleMSG+0x6fa>

    case CMD_Get_App_Info:
      if (Msg->Len < 3U)
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	2b02      	cmp	r3, #2
 800bc24:	d812      	bhi.n	800bc4c <HandleMSG+0x684>
      {
        return 0;
 800bc26:	2300      	movs	r3, #0
 800bc28:	e04c      	b.n	800bcc4 <HandleMSG+0x6fc>
 800bc2a:	bf00      	nop
 800bc2c:	20000a18 	.word	0x20000a18
 800bc30:	20000874 	.word	0x20000874
 800bc34:	20000a1c 	.word	0x20000a1c
 800bc38:	20000870 	.word	0x20000870
 800bc3c:	20000871 	.word	0x20000871
 800bc40:	20000844 	.word	0x20000844
 800bc44:	200010c8 	.word	0x200010c8
 800bc48:	200006ac 	.word	0x200006ac
      }

      Serialize_s32(&Msg->Data[3], AlgoFreq, 4);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	3307      	adds	r3, #7
 800bc50:	4a1e      	ldr	r2, [pc, #120]	; (800bccc <HandleMSG+0x704>)
 800bc52:	6812      	ldr	r2, [r2, #0]
 800bc54:	4611      	mov	r1, r2
 800bc56:	2204      	movs	r2, #4
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f000 faa5 	bl	800c1a8 <Serialize_s32>
      Serialize_s32(&Msg->Data[7], REQUIRED_DATA, 1);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	330b      	adds	r3, #11
 800bc62:	2201      	movs	r2, #1
 800bc64:	2130      	movs	r1, #48	; 0x30
 800bc66:	4618      	mov	r0, r3
 800bc68:	f000 fa9e 	bl	800c1a8 <Serialize_s32>

      BUILD_REPLY_HEADER(Msg);
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f7ff fc7b 	bl	800b568 <BUILD_REPLY_HEADER>
      Msg->Len = 3 + 5;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2208      	movs	r2, #8
 800bc76:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f7fe ffa5 	bl	800abc8 <UART_SendMsg>
      break;
 800bc7e:	e020      	b.n	800bcc2 <HandleMSG+0x6fa>

    case CMD_ChangeSF:
      if (Msg->Len < 3U)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	2b02      	cmp	r3, #2
 800bc86:	d801      	bhi.n	800bc8c <HandleMSG+0x6c4>
      {
        return 0;
 800bc88:	2300      	movs	r3, #0
 800bc8a:	e01b      	b.n	800bcc4 <HandleMSG+0x6fc>
      }

      Enabled6X = Msg->Data[3];
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	79da      	ldrb	r2, [r3, #7]
 800bc90:	4b0f      	ldr	r3, [pc, #60]	; (800bcd0 <HandleMSG+0x708>)
 800bc92:	701a      	strb	r2, [r3, #0]

      if (Enabled6X == 1U)
 800bc94:	4b0e      	ldr	r3, [pc, #56]	; (800bcd0 <HandleMSG+0x708>)
 800bc96:	781b      	ldrb	r3, [r3, #0]
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	d104      	bne.n	800bca6 <HandleMSG+0x6de>
      {
        MotionFX_manager_stop_9X();
 800bc9c:	f000 f94e 	bl	800bf3c <MotionFX_manager_stop_9X>
        MotionFX_manager_start_6X();
 800bca0:	f000 f92e 	bl	800bf00 <MotionFX_manager_start_6X>
 800bca4:	e003      	b.n	800bcae <HandleMSG+0x6e6>
      }
      else
      {
        MotionFX_manager_stop_6X();
 800bca6:	f000 f935 	bl	800bf14 <MotionFX_manager_stop_6X>
        MotionFX_manager_start_9X();
 800bcaa:	f000 f93d 	bl	800bf28 <MotionFX_manager_start_9X>
      }

      BUILD_REPLY_HEADER(Msg);
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f7ff fc5a 	bl	800b568 <BUILD_REPLY_HEADER>
      UART_SendMsg(Msg);
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f7fe ff87 	bl	800abc8 <UART_SendMsg>
      break;
 800bcba:	e002      	b.n	800bcc2 <HandleMSG+0x6fa>

    default:
      ret = 0;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	65fb      	str	r3, [r7, #92]	; 0x5c
      break;
 800bcc0:	bf00      	nop
  }

  return ret;
 800bcc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3760      	adds	r7, #96	; 0x60
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}
 800bccc:	2000007c 	.word	0x2000007c
 800bcd0:	20000a20 	.word	0x20000a20

0800bcd4 <RTC_DateRegulate>:
 * @param  d the day value to be set
 * @param  dw the day-week value to be set
 * @retval None
 */
void RTC_DateRegulate(uint8_t y, uint8_t m, uint8_t d, uint8_t dw)
{
 800bcd4:	b590      	push	{r4, r7, lr}
 800bcd6:	b085      	sub	sp, #20
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	4604      	mov	r4, r0
 800bcdc:	4608      	mov	r0, r1
 800bcde:	4611      	mov	r1, r2
 800bce0:	461a      	mov	r2, r3
 800bce2:	4623      	mov	r3, r4
 800bce4:	71fb      	strb	r3, [r7, #7]
 800bce6:	4603      	mov	r3, r0
 800bce8:	71bb      	strb	r3, [r7, #6]
 800bcea:	460b      	mov	r3, r1
 800bcec:	717b      	strb	r3, [r7, #5]
 800bcee:	4613      	mov	r3, r2
 800bcf0:	713b      	strb	r3, [r7, #4]
  RTC_DateTypeDef sdatestructure;

  sdatestructure.Year    = y;
 800bcf2:	79fb      	ldrb	r3, [r7, #7]
 800bcf4:	73fb      	strb	r3, [r7, #15]
  sdatestructure.Month   = m;
 800bcf6:	79bb      	ldrb	r3, [r7, #6]
 800bcf8:	737b      	strb	r3, [r7, #13]
  sdatestructure.Date    = d;
 800bcfa:	797b      	ldrb	r3, [r7, #5]
 800bcfc:	73bb      	strb	r3, [r7, #14]
  sdatestructure.WeekDay = dw;
 800bcfe:	793b      	ldrb	r3, [r7, #4]
 800bd00:	733b      	strb	r3, [r7, #12]

  if (HAL_RTC_SetDate(&hrtc, &sdatestructure, FORMAT_BIN) != HAL_OK)
 800bd02:	f107 030c 	add.w	r3, r7, #12
 800bd06:	2200      	movs	r2, #0
 800bd08:	4619      	mov	r1, r3
 800bd0a:	4806      	ldr	r0, [pc, #24]	; (800bd24 <RTC_DateRegulate+0x50>)
 800bd0c:	f7fc fa2e 	bl	800816c <HAL_RTC_SetDate>
 800bd10:	4603      	mov	r3, r0
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d001      	beq.n	800bd1a <RTC_DateRegulate+0x46>
  {
    /* Initialization Error */
    Error_Handler();
 800bd16:	f7f5 fea9 	bl	8001a6c <Error_Handler>
  }
}
 800bd1a:	bf00      	nop
 800bd1c:	3714      	adds	r7, #20
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd90      	pop	{r4, r7, pc}
 800bd22:	bf00      	nop
 800bd24:	20000628 	.word	0x20000628

0800bd28 <RTC_TimeRegulate>:
 * @param  mm the minute value to be set
 * @param  ss the second value to be set
 * @retval None
 */
void RTC_TimeRegulate(uint8_t hh, uint8_t mm, uint8_t ss)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b088      	sub	sp, #32
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	4603      	mov	r3, r0
 800bd30:	71fb      	strb	r3, [r7, #7]
 800bd32:	460b      	mov	r3, r1
 800bd34:	71bb      	strb	r3, [r7, #6]
 800bd36:	4613      	mov	r3, r2
 800bd38:	717b      	strb	r3, [r7, #5]
  RTC_TimeTypeDef stimestructure;

  stimestructure.Hours          = hh;
 800bd3a:	79fb      	ldrb	r3, [r7, #7]
 800bd3c:	733b      	strb	r3, [r7, #12]
  stimestructure.Minutes        = mm;
 800bd3e:	79bb      	ldrb	r3, [r7, #6]
 800bd40:	737b      	strb	r3, [r7, #13]
  stimestructure.Seconds        = ss;
 800bd42:	797b      	ldrb	r3, [r7, #5]
 800bd44:	73bb      	strb	r3, [r7, #14]
  stimestructure.SubSeconds     = 0;
 800bd46:	2300      	movs	r3, #0
 800bd48:	613b      	str	r3, [r7, #16]
  stimestructure.TimeFormat     = RTC_HOURFORMAT12_AM;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	73fb      	strb	r3, [r7, #15]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	61bb      	str	r3, [r7, #24]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800bd52:	2300      	movs	r3, #0
 800bd54:	61fb      	str	r3, [r7, #28]

  if (HAL_RTC_SetTime(&hrtc, &stimestructure, FORMAT_BIN) != HAL_OK)
 800bd56:	f107 030c 	add.w	r3, r7, #12
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	4619      	mov	r1, r3
 800bd5e:	4806      	ldr	r0, [pc, #24]	; (800bd78 <RTC_TimeRegulate+0x50>)
 800bd60:	f7fc f906 	bl	8007f70 <HAL_RTC_SetTime>
 800bd64:	4603      	mov	r3, r0
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d001      	beq.n	800bd6e <RTC_TimeRegulate+0x46>
  {
    /* Initialization Error */
    Error_Handler();
 800bd6a:	f7f5 fe7f 	bl	8001a6c <Error_Handler>
  }
}
 800bd6e:	bf00      	nop
 800bd70:	3720      	adds	r7, #32
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}
 800bd76:	bf00      	nop
 800bd78:	20000628 	.word	0x20000628

0800bd7c <Get_PresentationString>:
 * @param  PresentationString the Presentation string
 * @param  Length the length of Presentation string
 * @retval None
 */
void Get_PresentationString(char *PresentationString, uint32_t *Length)
{
 800bd7c:	b5b0      	push	{r4, r5, r7, lr}
 800bd7e:	b09e      	sub	sp, #120	; 0x78
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	6039      	str	r1, [r7, #0]
  const uint8_t string_pointer_shift = strlen("ST MotionXX v"); /* Shift string pointer by this amount */
 800bd86:	230d      	movs	r3, #13
 800bd88:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  char *lib_version_num;
  char lib_version_string[64];
  int lib_version_len = 0;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  const char ps[] = {"MEMS shield demo,4,"FW_VERSION",%s,"BOARD_NAME};
 800bd90:	4b19      	ldr	r3, [pc, #100]	; (800bdf8 <Get_PresentationString+0x7c>)
 800bd92:	f107 0408 	add.w	r4, r7, #8
 800bd96:	461d      	mov	r5, r3
 800bd98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bd9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bd9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bd9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bda0:	682b      	ldr	r3, [r5, #0]
 800bda2:	461a      	mov	r2, r3
 800bda4:	8022      	strh	r2, [r4, #0]
 800bda6:	3402      	adds	r4, #2
 800bda8:	0c1b      	lsrs	r3, r3, #16
 800bdaa:	7023      	strb	r3, [r4, #0]

  MotionFX_manager_get_version(lib_version_string, &lib_version_len);
 800bdac:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800bdb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bdb4:	4611      	mov	r1, r2
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f000 f8ca 	bl	800bf50 <MotionFX_manager_get_version>

  /* Shorten library version string (e.g.: ST MotionXX v1.0.0 resp. ST MotionXXX v1.0.0) to contain version number only (e.g.: 1.0.0) */
  if (lib_version_len > string_pointer_shift)
 800bdbc:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 800bdc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdc2:	429a      	cmp	r2, r3
 800bdc4:	da06      	bge.n	800bdd4 <Get_PresentationString+0x58>
  {
    lib_version_num = lib_version_string + string_pointer_shift;
 800bdc6:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800bdca:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800bdce:	4413      	add	r3, r2
 800bdd0:	677b      	str	r3, [r7, #116]	; 0x74
 800bdd2:	e002      	b.n	800bdda <Get_PresentationString+0x5e>
  }
  else
  {
    lib_version_num = lib_version_string;
 800bdd4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bdd8:	677b      	str	r3, [r7, #116]	; 0x74
  }

  *Length = snprintf(PresentationString, 64, ps, lib_version_num);
 800bdda:	f107 0208 	add.w	r2, r7, #8
 800bdde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bde0:	2140      	movs	r1, #64	; 0x40
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f00b fe8a 	bl	8017afc <sniprintf>
 800bde8:	4603      	mov	r3, r0
 800bdea:	461a      	mov	r2, r3
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	601a      	str	r2, [r3, #0]
}
 800bdf0:	bf00      	nop
 800bdf2:	3778      	adds	r7, #120	; 0x78
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bdb0      	pop	{r4, r5, r7, pc}
 800bdf8:	0801a554 	.word	0x0801a554

0800bdfc <MotionFX_manager_init>:
 * @brief  Initialize the MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_init(void)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	af00      	add	r7, sp, #0
  if (STATE_SIZE < MotionFX_GetStateSize())
 800be00:	f00a ffee 	bl	8016de0 <MotionFX_GetStateSize>
 800be04:	4603      	mov	r3, r0
 800be06:	f5b3 6f18 	cmp.w	r3, #2432	; 0x980
 800be0a:	d901      	bls.n	800be10 <MotionFX_manager_init+0x14>
    Error_Handler();
 800be0c:	f7f5 fe2e 	bl	8001a6c <Error_Handler>

  MotionFX_initialize((MFXState_t *)mfxstate);
 800be10:	4821      	ldr	r0, [pc, #132]	; (800be98 <MotionFX_manager_init+0x9c>)
 800be12:	f00a ffe9 	bl	8016de8 <MotionFX_initialize>

  MotionFX_getKnobs(mfxstate, ipKnobs);
 800be16:	4b21      	ldr	r3, [pc, #132]	; (800be9c <MotionFX_manager_init+0xa0>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	4619      	mov	r1, r3
 800be1c:	481e      	ldr	r0, [pc, #120]	; (800be98 <MotionFX_manager_init+0x9c>)
 800be1e:	f00b f8cb 	bl	8016fb8 <MotionFX_getKnobs>

  BSP_SENSOR_ACC_GetOrientation(ipKnobs->acc_orientation);
 800be22:	4b1e      	ldr	r3, [pc, #120]	; (800be9c <MotionFX_manager_init+0xa0>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	331d      	adds	r3, #29
 800be28:	4618      	mov	r0, r3
 800be2a:	f7ff f8d8 	bl	800afde <BSP_SENSOR_ACC_GetOrientation>
  BSP_SENSOR_GYR_GetOrientation(ipKnobs->gyro_orientation);
 800be2e:	4b1b      	ldr	r3, [pc, #108]	; (800be9c <MotionFX_manager_init+0xa0>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	3321      	adds	r3, #33	; 0x21
 800be34:	4618      	mov	r0, r3
 800be36:	f7ff f8e6 	bl	800b006 <BSP_SENSOR_GYR_GetOrientation>
  BSP_SENSOR_MAG_GetOrientation(ipKnobs->mag_orientation);
 800be3a:	4b18      	ldr	r3, [pc, #96]	; (800be9c <MotionFX_manager_init+0xa0>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	3325      	adds	r3, #37	; 0x25
 800be40:	4618      	mov	r0, r3
 800be42:	f7ff f8f4 	bl	800b02e <BSP_SENSOR_MAG_GetOrientation>

  ipKnobs->gbias_acc_th_sc = GBIAS_ACC_TH_SC;
 800be46:	4b15      	ldr	r3, [pc, #84]	; (800be9c <MotionFX_manager_init+0xa0>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	4a15      	ldr	r2, [pc, #84]	; (800bea0 <MotionFX_manager_init+0xa4>)
 800be4c:	615a      	str	r2, [r3, #20]
  ipKnobs->gbias_gyro_th_sc = GBIAS_GYRO_TH_SC;
 800be4e:	4b13      	ldr	r3, [pc, #76]	; (800be9c <MotionFX_manager_init+0xa0>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	4a14      	ldr	r2, [pc, #80]	; (800bea4 <MotionFX_manager_init+0xa8>)
 800be54:	619a      	str	r2, [r3, #24]
  ipKnobs->gbias_mag_th_sc = GBIAS_MAG_TH_SC;
 800be56:	4b11      	ldr	r3, [pc, #68]	; (800be9c <MotionFX_manager_init+0xa0>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	4a13      	ldr	r2, [pc, #76]	; (800bea8 <MotionFX_manager_init+0xac>)
 800be5c:	611a      	str	r2, [r3, #16]

  ipKnobs->output_type = MFX_ENGINE_OUTPUT_ENU;
 800be5e:	4b0f      	ldr	r3, [pc, #60]	; (800be9c <MotionFX_manager_init+0xa0>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	2201      	movs	r2, #1
 800be64:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ipKnobs->LMode = 1;
 800be68:	4b0c      	ldr	r3, [pc, #48]	; (800be9c <MotionFX_manager_init+0xa0>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	2201      	movs	r2, #1
 800be6e:	731a      	strb	r2, [r3, #12]
  ipKnobs->modx = DECIMATION;
 800be70:	4b0a      	ldr	r3, [pc, #40]	; (800be9c <MotionFX_manager_init+0xa0>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	2201      	movs	r2, #1
 800be76:	771a      	strb	r2, [r3, #28]

  MotionFX_setKnobs(mfxstate, ipKnobs);
 800be78:	4b08      	ldr	r3, [pc, #32]	; (800be9c <MotionFX_manager_init+0xa0>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	4619      	mov	r1, r3
 800be7e:	4806      	ldr	r0, [pc, #24]	; (800be98 <MotionFX_manager_init+0x9c>)
 800be80:	f00b f84e 	bl	8016f20 <MotionFX_setKnobs>

  MotionFX_enable_6X(mfxstate, MFX_ENGINE_DISABLE);
 800be84:	2100      	movs	r1, #0
 800be86:	4804      	ldr	r0, [pc, #16]	; (800be98 <MotionFX_manager_init+0x9c>)
 800be88:	f00b f8d2 	bl	8017030 <MotionFX_enable_6X>
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_DISABLE);
 800be8c:	2100      	movs	r1, #0
 800be8e:	4802      	ldr	r0, [pc, #8]	; (800be98 <MotionFX_manager_init+0x9c>)
 800be90:	f00b f8ee 	bl	8017070 <MotionFX_enable_9X>
}
 800be94:	bf00      	nop
 800be96:	bd80      	pop	{r7, pc}
 800be98:	20001100 	.word	0x20001100
 800be9c:	20000098 	.word	0x20000098
 800bea0:	3ac88a48 	.word	0x3ac88a48
 800bea4:	3b83126f 	.word	0x3b83126f
 800bea8:	3b449ba6 	.word	0x3b449ba6

0800beac <MotionFX_manager_run>:
 * @param  data_out Structure containing output data
 * @param  delta_time Delta time
 * @retval None
 */
void MotionFX_manager_run(MFX_input_t *data_in, MFX_output_t *data_out, float delta_time)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b086      	sub	sp, #24
 800beb0:	af02      	add	r7, sp, #8
 800beb2:	60f8      	str	r0, [r7, #12]
 800beb4:	60b9      	str	r1, [r7, #8]
 800beb6:	607a      	str	r2, [r7, #4]
  if (discardedCount == sampleToDiscard)
 800beb8:	4b0e      	ldr	r3, [pc, #56]	; (800bef4 <MotionFX_manager_run+0x48>)
 800beba:	681a      	ldr	r2, [r3, #0]
 800bebc:	4b0e      	ldr	r3, [pc, #56]	; (800bef8 <MotionFX_manager_run+0x4c>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	429a      	cmp	r2, r3
 800bec2:	d10e      	bne.n	800bee2 <MotionFX_manager_run+0x36>
  {
    MotionFX_propagate(mfxstate, data_out, data_in, &delta_time);
 800bec4:	1d3b      	adds	r3, r7, #4
 800bec6:	68fa      	ldr	r2, [r7, #12]
 800bec8:	68b9      	ldr	r1, [r7, #8]
 800beca:	480c      	ldr	r0, [pc, #48]	; (800befc <MotionFX_manager_run+0x50>)
 800becc:	f00b f8fc 	bl	80170c8 <MotionFX_propagate>
    MotionFX_update(mfxstate, data_out, data_in, &delta_time, NULL);
 800bed0:	1d3b      	adds	r3, r7, #4
 800bed2:	2200      	movs	r2, #0
 800bed4:	9200      	str	r2, [sp, #0]
 800bed6:	68fa      	ldr	r2, [r7, #12]
 800bed8:	68b9      	ldr	r1, [r7, #8]
 800beda:	4808      	ldr	r0, [pc, #32]	; (800befc <MotionFX_manager_run+0x50>)
 800bedc:	f00b f8e8 	bl	80170b0 <MotionFX_update>
  }
  else
  {
    discardedCount++;
  }
}
 800bee0:	e004      	b.n	800beec <MotionFX_manager_run+0x40>
    discardedCount++;
 800bee2:	4b04      	ldr	r3, [pc, #16]	; (800bef4 <MotionFX_manager_run+0x48>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	3301      	adds	r3, #1
 800bee8:	4a02      	ldr	r2, [pc, #8]	; (800bef4 <MotionFX_manager_run+0x48>)
 800beea:	6013      	str	r3, [r2, #0]
}
 800beec:	bf00      	nop
 800beee:	3710      	adds	r7, #16
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}
 800bef4:	200010fc 	.word	0x200010fc
 800bef8:	2000009c 	.word	0x2000009c
 800befc:	20001100 	.word	0x20001100

0800bf00 <MotionFX_manager_start_6X>:
 * @brief  Start 6 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_start_6X(void)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	af00      	add	r7, sp, #0
  MotionFX_enable_6X(mfxstate, MFX_ENGINE_ENABLE);
 800bf04:	2101      	movs	r1, #1
 800bf06:	4802      	ldr	r0, [pc, #8]	; (800bf10 <MotionFX_manager_start_6X+0x10>)
 800bf08:	f00b f892 	bl	8017030 <MotionFX_enable_6X>
}
 800bf0c:	bf00      	nop
 800bf0e:	bd80      	pop	{r7, pc}
 800bf10:	20001100 	.word	0x20001100

0800bf14 <MotionFX_manager_stop_6X>:
 * @brief  Stop 6 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_stop_6X(void)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	af00      	add	r7, sp, #0
  MotionFX_enable_6X(mfxstate, MFX_ENGINE_DISABLE);
 800bf18:	2100      	movs	r1, #0
 800bf1a:	4802      	ldr	r0, [pc, #8]	; (800bf24 <MotionFX_manager_stop_6X+0x10>)
 800bf1c:	f00b f888 	bl	8017030 <MotionFX_enable_6X>
}
 800bf20:	bf00      	nop
 800bf22:	bd80      	pop	{r7, pc}
 800bf24:	20001100 	.word	0x20001100

0800bf28 <MotionFX_manager_start_9X>:
 * @brief  Start 9 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_start_9X(void)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	af00      	add	r7, sp, #0
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_ENABLE);
 800bf2c:	2101      	movs	r1, #1
 800bf2e:	4802      	ldr	r0, [pc, #8]	; (800bf38 <MotionFX_manager_start_9X+0x10>)
 800bf30:	f00b f89e 	bl	8017070 <MotionFX_enable_9X>
}
 800bf34:	bf00      	nop
 800bf36:	bd80      	pop	{r7, pc}
 800bf38:	20001100 	.word	0x20001100

0800bf3c <MotionFX_manager_stop_9X>:
 * @brief  Stop 9 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_stop_9X(void)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	af00      	add	r7, sp, #0
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_DISABLE);
 800bf40:	2100      	movs	r1, #0
 800bf42:	4802      	ldr	r0, [pc, #8]	; (800bf4c <MotionFX_manager_stop_9X+0x10>)
 800bf44:	f00b f894 	bl	8017070 <MotionFX_enable_9X>
}
 800bf48:	bf00      	nop
 800bf4a:	bd80      	pop	{r7, pc}
 800bf4c:	20001100 	.word	0x20001100

0800bf50 <MotionFX_manager_get_version>:
 * @param  version  Library version string (must be array of 35 char)
 * @param  length  Library version string length
 * @retval None
 */
void MotionFX_manager_get_version(char *version, int *length)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b082      	sub	sp, #8
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	6039      	str	r1, [r7, #0]
  *length = (int)MotionFX_GetLibVersion(version);
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f00b fd6a 	bl	8017a34 <MotionFX_GetLibVersion>
 800bf60:	4603      	mov	r3, r0
 800bf62:	461a      	mov	r2, r3
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	601a      	str	r2, [r3, #0]
}
 800bf68:	bf00      	nop
 800bf6a:	3708      	adds	r7, #8
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}

0800bf70 <MotionFX_manager_MagCal_run>:
 * @brief  Run magnetometer calibration algorithm
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_run(MFX_MagCal_input_t *data_in, MFX_MagCal_output_t *data_out)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b082      	sub	sp, #8
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	6039      	str	r1, [r7, #0]
  MotionFX_MagCal_run(data_in);
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f00b fad8 	bl	8017530 <MotionFX_MagCal_run>
  MotionFX_MagCal_getParams(data_out);
 800bf80:	6838      	ldr	r0, [r7, #0]
 800bf82:	f00b fd15 	bl	80179b0 <MotionFX_MagCal_getParams>
}
 800bf86:	bf00      	nop
 800bf88:	3708      	adds	r7, #8
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}

0800bf8e <MotionFX_manager_MagCal_start>:
 * @brief  Start magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_start(int sampletime)
{
 800bf8e:	b580      	push	{r7, lr}
 800bf90:	b082      	sub	sp, #8
 800bf92:	af00      	add	r7, sp, #0
 800bf94:	6078      	str	r0, [r7, #4]
  MotionFX_MagCal_init(sampletime, 1);
 800bf96:	2101      	movs	r1, #1
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f00b fa39 	bl	8017410 <MotionFX_MagCal_init>
}
 800bf9e:	bf00      	nop
 800bfa0:	3708      	adds	r7, #8
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}

0800bfa6 <MotionFX_manager_MagCal_stop>:
 * @brief  Stop magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_stop(int sampletime)
{
 800bfa6:	b580      	push	{r7, lr}
 800bfa8:	b082      	sub	sp, #8
 800bfaa:	af00      	add	r7, sp, #0
 800bfac:	6078      	str	r0, [r7, #4]
  MotionFX_MagCal_init(sampletime, 0);
 800bfae:	2100      	movs	r1, #0
 800bfb0:	6878      	ldr	r0, [r7, #4]
 800bfb2:	f00b fa2d 	bl	8017410 <MotionFX_MagCal_init>
}
 800bfb6:	bf00      	nop
 800bfb8:	3708      	adds	r7, #8
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bd80      	pop	{r7, pc}

0800bfbe <ByteStuffCopyByte>:
 * @param  Dest destination
 * @param  Source source
 * @retval Total number of bytes processed
 */
int ByteStuffCopyByte(uint8_t *Dest, uint8_t Source)
{
 800bfbe:	b480      	push	{r7}
 800bfc0:	b085      	sub	sp, #20
 800bfc2:	af00      	add	r7, sp, #0
 800bfc4:	6078      	str	r0, [r7, #4]
 800bfc6:	460b      	mov	r3, r1
 800bfc8:	70fb      	strb	r3, [r7, #3]
  int ret = 2;
 800bfca:	2302      	movs	r3, #2
 800bfcc:	60fb      	str	r3, [r7, #12]

  switch (Source)
 800bfce:	78fb      	ldrb	r3, [r7, #3]
 800bfd0:	2bf0      	cmp	r3, #240	; 0xf0
 800bfd2:	d002      	beq.n	800bfda <ByteStuffCopyByte+0x1c>
 800bfd4:	2bf1      	cmp	r3, #241	; 0xf1
 800bfd6:	d008      	beq.n	800bfea <ByteStuffCopyByte+0x2c>
 800bfd8:	e00f      	b.n	800bffa <ByteStuffCopyByte+0x3c>
  {
    case TMsg_EOF:
      Dest[0] = TMsg_BS;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	22f1      	movs	r2, #241	; 0xf1
 800bfde:	701a      	strb	r2, [r3, #0]
      Dest[1] = TMsg_BS_EOF;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	3301      	adds	r3, #1
 800bfe4:	22f2      	movs	r2, #242	; 0xf2
 800bfe6:	701a      	strb	r2, [r3, #0]
      break;
 800bfe8:	e00d      	b.n	800c006 <ByteStuffCopyByte+0x48>

    case TMsg_BS:
      Dest[0] = TMsg_BS;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	22f1      	movs	r2, #241	; 0xf1
 800bfee:	701a      	strb	r2, [r3, #0]
      Dest[1] = TMsg_BS;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	3301      	adds	r3, #1
 800bff4:	22f1      	movs	r2, #241	; 0xf1
 800bff6:	701a      	strb	r2, [r3, #0]
      break;
 800bff8:	e005      	b.n	800c006 <ByteStuffCopyByte+0x48>

    default:
      Dest[0] = Source;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	78fa      	ldrb	r2, [r7, #3]
 800bffe:	701a      	strb	r2, [r3, #0]
      ret = 1;
 800c000:	2301      	movs	r3, #1
 800c002:	60fb      	str	r3, [r7, #12]
      break;
 800c004:	bf00      	nop
  }

  return ret;
 800c006:	68fb      	ldr	r3, [r7, #12]
}
 800c008:	4618      	mov	r0, r3
 800c00a:	3714      	adds	r7, #20
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bc80      	pop	{r7}
 800c010:	4770      	bx	lr

0800c012 <ByteStuffCopy>:
 * @param  Dest destination
 * @param  Source source
 * @retval Total number of bytes processed
 */
int ByteStuffCopy(uint8_t *Dest, TMsg *Source)
{
 800c012:	b580      	push	{r7, lr}
 800c014:	b084      	sub	sp, #16
 800c016:	af00      	add	r7, sp, #0
 800c018:	6078      	str	r0, [r7, #4]
 800c01a:	6039      	str	r1, [r7, #0]
  uint32_t i;
  int32_t count = 0;
 800c01c:	2300      	movs	r3, #0
 800c01e:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < Source->Len; i++)
 800c020:	2300      	movs	r3, #0
 800c022:	60fb      	str	r3, [r7, #12]
 800c024:	e011      	b.n	800c04a <ByteStuffCopy+0x38>
  {
    count += ByteStuffCopyByte(&Dest[count], Source->Data[i]);
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	687a      	ldr	r2, [r7, #4]
 800c02a:	18d0      	adds	r0, r2, r3
 800c02c:	683a      	ldr	r2, [r7, #0]
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	4413      	add	r3, r2
 800c032:	3304      	adds	r3, #4
 800c034:	781b      	ldrb	r3, [r3, #0]
 800c036:	4619      	mov	r1, r3
 800c038:	f7ff ffc1 	bl	800bfbe <ByteStuffCopyByte>
 800c03c:	4602      	mov	r2, r0
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	4413      	add	r3, r2
 800c042:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < Source->Len; i++)
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	3301      	adds	r3, #1
 800c048:	60fb      	str	r3, [r7, #12]
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	68fa      	ldr	r2, [r7, #12]
 800c050:	429a      	cmp	r2, r3
 800c052:	d3e8      	bcc.n	800c026 <ByteStuffCopy+0x14>
  }

  Dest[count] = TMsg_EOF;
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	687a      	ldr	r2, [r7, #4]
 800c058:	4413      	add	r3, r2
 800c05a:	22f0      	movs	r2, #240	; 0xf0
 800c05c:	701a      	strb	r2, [r3, #0]
  count++;
 800c05e:	68bb      	ldr	r3, [r7, #8]
 800c060:	3301      	adds	r3, #1
 800c062:	60bb      	str	r3, [r7, #8]
  return count;
 800c064:	68bb      	ldr	r3, [r7, #8]
}
 800c066:	4618      	mov	r0, r3
 800c068:	3710      	adds	r7, #16
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}

0800c06e <ReverseByteStuffCopyByte2>:
 * @param  Source1 input data
 * @param  Dest the destination data
 * @retval Number of input bytes processed (1 or 2) or 0 for invalid sequence
 */
int ReverseByteStuffCopyByte2(uint8_t Source0, uint8_t Source1, uint8_t *Dest)
{
 800c06e:	b480      	push	{r7}
 800c070:	b083      	sub	sp, #12
 800c072:	af00      	add	r7, sp, #0
 800c074:	4603      	mov	r3, r0
 800c076:	603a      	str	r2, [r7, #0]
 800c078:	71fb      	strb	r3, [r7, #7]
 800c07a:	460b      	mov	r3, r1
 800c07c:	71bb      	strb	r3, [r7, #6]
  if (Source0 == (uint8_t)TMsg_BS)
 800c07e:	79fb      	ldrb	r3, [r7, #7]
 800c080:	2bf1      	cmp	r3, #241	; 0xf1
 800c082:	d111      	bne.n	800c0a8 <ReverseByteStuffCopyByte2+0x3a>
  {
    if (Source1 == (uint8_t)TMsg_BS)
 800c084:	79bb      	ldrb	r3, [r7, #6]
 800c086:	2bf1      	cmp	r3, #241	; 0xf1
 800c088:	d104      	bne.n	800c094 <ReverseByteStuffCopyByte2+0x26>
    {
      *Dest = TMsg_BS;
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	22f1      	movs	r2, #241	; 0xf1
 800c08e:	701a      	strb	r2, [r3, #0]
      return 2;
 800c090:	2302      	movs	r3, #2
 800c092:	e00d      	b.n	800c0b0 <ReverseByteStuffCopyByte2+0x42>
    }

    if (Source1 == (uint8_t)TMsg_BS_EOF)
 800c094:	79bb      	ldrb	r3, [r7, #6]
 800c096:	2bf2      	cmp	r3, #242	; 0xf2
 800c098:	d104      	bne.n	800c0a4 <ReverseByteStuffCopyByte2+0x36>
    {
      *Dest = TMsg_EOF;
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	22f0      	movs	r2, #240	; 0xf0
 800c09e:	701a      	strb	r2, [r3, #0]
      return 2;
 800c0a0:	2302      	movs	r3, #2
 800c0a2:	e005      	b.n	800c0b0 <ReverseByteStuffCopyByte2+0x42>
    }

    return 0; // invalid sequence
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	e003      	b.n	800c0b0 <ReverseByteStuffCopyByte2+0x42>
  }
  else
  {
    *Dest = Source0;
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	79fa      	ldrb	r2, [r7, #7]
 800c0ac:	701a      	strb	r2, [r3, #0]
    return 1;
 800c0ae:	2301      	movs	r3, #1
  }
}
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	370c      	adds	r7, #12
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bc80      	pop	{r7}
 800c0b8:	4770      	bx	lr

0800c0ba <CHK_ComputeAndAdd>:
 * @brief  Compute and add checksum
 * @param  Msg pointer to the message
 * @retval None
 */
void CHK_ComputeAndAdd(TMsg *Msg)
{
 800c0ba:	b480      	push	{r7}
 800c0bc:	b085      	sub	sp, #20
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	6078      	str	r0, [r7, #4]
  uint8_t chk = 0;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	73fb      	strb	r3, [r7, #15]
  uint32_t i;

  for (i = 0; i < Msg->Len; i++)
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	60bb      	str	r3, [r7, #8]
 800c0ca:	e00a      	b.n	800c0e2 <CHK_ComputeAndAdd+0x28>
  {
    chk -= Msg->Data[i];
 800c0cc:	687a      	ldr	r2, [r7, #4]
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	4413      	add	r3, r2
 800c0d2:	3304      	adds	r3, #4
 800c0d4:	781b      	ldrb	r3, [r3, #0]
 800c0d6:	7bfa      	ldrb	r2, [r7, #15]
 800c0d8:	1ad3      	subs	r3, r2, r3
 800c0da:	73fb      	strb	r3, [r7, #15]
  for (i = 0; i < Msg->Len; i++)
 800c0dc:	68bb      	ldr	r3, [r7, #8]
 800c0de:	3301      	adds	r3, #1
 800c0e0:	60bb      	str	r3, [r7, #8]
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	68ba      	ldr	r2, [r7, #8]
 800c0e8:	429a      	cmp	r2, r3
 800c0ea:	d3ef      	bcc.n	800c0cc <CHK_ComputeAndAdd+0x12>
  }

  Msg->Data[i] = chk;
 800c0ec:	687a      	ldr	r2, [r7, #4]
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	4413      	add	r3, r2
 800c0f2:	3304      	adds	r3, #4
 800c0f4:	7bfa      	ldrb	r2, [r7, #15]
 800c0f6:	701a      	strb	r2, [r3, #0]
  Msg->Len++;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	1c5a      	adds	r2, r3, #1
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	601a      	str	r2, [r3, #0]
}
 800c102:	bf00      	nop
 800c104:	3714      	adds	r7, #20
 800c106:	46bd      	mov	sp, r7
 800c108:	bc80      	pop	{r7}
 800c10a:	4770      	bx	lr

0800c10c <CHK_CheckAndRemove>:
 * @brief  Compute and remove checksum
 * @param  Msg pointer to the message
 * @retval A number different from 0 if the operation succeeds, 0 if an error occurs
 */
int CHK_CheckAndRemove(TMsg *Msg)
{
 800c10c:	b480      	push	{r7}
 800c10e:	b085      	sub	sp, #20
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
  uint8_t chk = 0;
 800c114:	2300      	movs	r3, #0
 800c116:	73fb      	strb	r3, [r7, #15]
  uint32_t i;

  for (i = 0; i < Msg->Len; i++)
 800c118:	2300      	movs	r3, #0
 800c11a:	60bb      	str	r3, [r7, #8]
 800c11c:	e00a      	b.n	800c134 <CHK_CheckAndRemove+0x28>
  {
    chk += Msg->Data[i];
 800c11e:	687a      	ldr	r2, [r7, #4]
 800c120:	68bb      	ldr	r3, [r7, #8]
 800c122:	4413      	add	r3, r2
 800c124:	3304      	adds	r3, #4
 800c126:	781a      	ldrb	r2, [r3, #0]
 800c128:	7bfb      	ldrb	r3, [r7, #15]
 800c12a:	4413      	add	r3, r2
 800c12c:	73fb      	strb	r3, [r7, #15]
  for (i = 0; i < Msg->Len; i++)
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	3301      	adds	r3, #1
 800c132:	60bb      	str	r3, [r7, #8]
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	68ba      	ldr	r2, [r7, #8]
 800c13a:	429a      	cmp	r2, r3
 800c13c:	d3ef      	bcc.n	800c11e <CHK_CheckAndRemove+0x12>
  }

  Msg->Len--;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	1e5a      	subs	r2, r3, #1
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	601a      	str	r2, [r3, #0]
  return (int32_t)(chk == 0U);
 800c148:	7bfb      	ldrb	r3, [r7, #15]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	bf0c      	ite	eq
 800c14e:	2301      	moveq	r3, #1
 800c150:	2300      	movne	r3, #0
 800c152:	b2db      	uxtb	r3, r3
}
 800c154:	4618      	mov	r0, r3
 800c156:	3714      	adds	r7, #20
 800c158:	46bd      	mov	sp, r7
 800c15a:	bc80      	pop	{r7}
 800c15c:	4770      	bx	lr

0800c15e <Deserialize>:
 * @param  Source source
 * @param  Len number of bytes
 * @retval Rebuild unsigned int variable
 */
uint32_t Deserialize(uint8_t *Source, uint32_t Len)
{
 800c15e:	b480      	push	{r7}
 800c160:	b085      	sub	sp, #20
 800c162:	af00      	add	r7, sp, #0
 800c164:	6078      	str	r0, [r7, #4]
 800c166:	6039      	str	r1, [r7, #0]
  uint32_t app;

  app = Source[--Len];
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	3b01      	subs	r3, #1
 800c16c:	603b      	str	r3, [r7, #0]
 800c16e:	687a      	ldr	r2, [r7, #4]
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	4413      	add	r3, r2
 800c174:	781b      	ldrb	r3, [r3, #0]
 800c176:	60fb      	str	r3, [r7, #12]
  while (Len > 0U)
 800c178:	e00d      	b.n	800c196 <Deserialize+0x38>
  {
    app <<= 8;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	021b      	lsls	r3, r3, #8
 800c17e:	60fb      	str	r3, [r7, #12]
    app += Source[--Len];
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	3b01      	subs	r3, #1
 800c184:	603b      	str	r3, [r7, #0]
 800c186:	687a      	ldr	r2, [r7, #4]
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	4413      	add	r3, r2
 800c18c:	781b      	ldrb	r3, [r3, #0]
 800c18e:	461a      	mov	r2, r3
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	4413      	add	r3, r2
 800c194:	60fb      	str	r3, [r7, #12]
  while (Len > 0U)
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d1ee      	bne.n	800c17a <Deserialize+0x1c>
  }

  return app;
 800c19c:	68fb      	ldr	r3, [r7, #12]
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	3714      	adds	r7, #20
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bc80      	pop	{r7}
 800c1a6:	4770      	bx	lr

0800c1a8 <Serialize_s32>:
 * @param  Source source
 * @param  Len number of bytes
 * @retval None
 */
void Serialize_s32(uint8_t *Dest, int32_t Source, uint32_t Len)
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b087      	sub	sp, #28
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	60f8      	str	r0, [r7, #12]
 800c1b0:	60b9      	str	r1, [r7, #8]
 800c1b2:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t source_uint32;

  for (i = 0; i < Len; i++)
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	617b      	str	r3, [r7, #20]
 800c1b8:	e00f      	b.n	800c1da <Serialize_s32+0x32>
  {
    source_uint32 = (uint32_t)Source;
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	613b      	str	r3, [r7, #16]
    Dest[i] = (uint8_t)(source_uint32 & 0xFFU);
 800c1be:	68fa      	ldr	r2, [r7, #12]
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	4413      	add	r3, r2
 800c1c4:	693a      	ldr	r2, [r7, #16]
 800c1c6:	b2d2      	uxtb	r2, r2
 800c1c8:	701a      	strb	r2, [r3, #0]
    source_uint32 >>= 8;
 800c1ca:	693b      	ldr	r3, [r7, #16]
 800c1cc:	0a1b      	lsrs	r3, r3, #8
 800c1ce:	613b      	str	r3, [r7, #16]
    Source = (int32_t)source_uint32;
 800c1d0:	693b      	ldr	r3, [r7, #16]
 800c1d2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < Len; i++)
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	3301      	adds	r3, #1
 800c1d8:	617b      	str	r3, [r7, #20]
 800c1da:	697a      	ldr	r2, [r7, #20]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	429a      	cmp	r2, r3
 800c1e0:	d3eb      	bcc.n	800c1ba <Serialize_s32+0x12>
  }
}
 800c1e2:	bf00      	nop
 800c1e4:	bf00      	nop
 800c1e6:	371c      	adds	r7, #28
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bc80      	pop	{r7}
 800c1ec:	4770      	bx	lr
	...

0800c1f0 <DataHist_parameters>:
 800c1f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c1f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c1f6:	f04f 0e00 	mov.w	lr, #0
 800c1fa:	7020      	strb	r0, [r4, #0]
 800c1fc:	6808      	ldr	r0, [r1, #0]
 800c1fe:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800c202:	6060      	str	r0, [r4, #4]
 800c204:	6848      	ldr	r0, [r1, #4]
 800c206:	f102 077c 	add.w	r7, r2, #124	; 0x7c
 800c20a:	60a0      	str	r0, [r4, #8]
 800c20c:	6888      	ldr	r0, [r1, #8]
 800c20e:	9e07      	ldr	r6, [sp, #28]
 800c210:	60e0      	str	r0, [r4, #12]
 800c212:	68c8      	ldr	r0, [r1, #12]
 800c214:	f8dd c020 	ldr.w	ip, [sp, #32]
 800c218:	6120      	str	r0, [r4, #16]
 800c21a:	6908      	ldr	r0, [r1, #16]
 800c21c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c21e:	6160      	str	r0, [r4, #20]
 800c220:	6948      	ldr	r0, [r1, #20]
 800c222:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 800c226:	61a0      	str	r0, [r4, #24]
 800c228:	6988      	ldr	r0, [r1, #24]
 800c22a:	61e0      	str	r0, [r4, #28]
 800c22c:	69c8      	ldr	r0, [r1, #28]
 800c22e:	6220      	str	r0, [r4, #32]
 800c230:	6a09      	ldr	r1, [r1, #32]
 800c232:	6261      	str	r1, [r4, #36]	; 0x24
 800c234:	8812      	ldrh	r2, [r2, #0]
 800c236:	8522      	strh	r2, [r4, #40]	; 0x28
 800c238:	4641      	mov	r1, r8
 800c23a:	f1a7 0278 	sub.w	r2, r7, #120	; 0x78
 800c23e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800c242:	42ba      	cmp	r2, r7
 800c244:	f841 0f04 	str.w	r0, [r1, #4]!
 800c248:	d1f9      	bne.n	800c23e <DataHist_parameters+0x4e>
 800c24a:	f10e 0e1e 	add.w	lr, lr, #30
 800c24e:	f1be 0f5a 	cmp.w	lr, #90	; 0x5a
 800c252:	f108 0878 	add.w	r8, r8, #120	; 0x78
 800c256:	f102 0778 	add.w	r7, r2, #120	; 0x78
 800c25a:	d1ed      	bne.n	800c238 <DataHist_parameters+0x48>
 800c25c:	2000      	movs	r0, #0
 800c25e:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
 800c262:	881a      	ldrh	r2, [r3, #0]
 800c264:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800c268:	f103 077c 	add.w	r7, r3, #124	; 0x7c
 800c26c:	f8a4 2198 	strh.w	r2, [r4, #408]	; 0x198
 800c270:	f504 7ece 	add.w	lr, r4, #412	; 0x19c
 800c274:	4672      	mov	r2, lr
 800c276:	f1a7 0378 	sub.w	r3, r7, #120	; 0x78
 800c27a:	f853 1f04 	ldr.w	r1, [r3, #4]!
 800c27e:	42bb      	cmp	r3, r7
 800c280:	f842 1f04 	str.w	r1, [r2, #4]!
 800c284:	d1f9      	bne.n	800c27a <DataHist_parameters+0x8a>
 800c286:	301e      	adds	r0, #30
 800c288:	285a      	cmp	r0, #90	; 0x5a
 800c28a:	f10e 0e78 	add.w	lr, lr, #120	; 0x78
 800c28e:	f103 0778 	add.w	r7, r3, #120	; 0x78
 800c292:	d1ef      	bne.n	800c274 <DataHist_parameters+0x84>
 800c294:	2000      	movs	r0, #0
 800c296:	f8c4 819c 	str.w	r8, [r4, #412]	; 0x19c
 800c29a:	8833      	ldrh	r3, [r6, #0]
 800c29c:	f8d6 e004 	ldr.w	lr, [r6, #4]
 800c2a0:	f504 7743 	add.w	r7, r4, #780	; 0x30c
 800c2a4:	367c      	adds	r6, #124	; 0x7c
 800c2a6:	f8a4 3308 	strh.w	r3, [r4, #776]	; 0x308
 800c2aa:	463a      	mov	r2, r7
 800c2ac:	f1a6 0378 	sub.w	r3, r6, #120	; 0x78
 800c2b0:	f853 1f04 	ldr.w	r1, [r3, #4]!
 800c2b4:	42b3      	cmp	r3, r6
 800c2b6:	f842 1f04 	str.w	r1, [r2, #4]!
 800c2ba:	d1f9      	bne.n	800c2b0 <DataHist_parameters+0xc0>
 800c2bc:	301e      	adds	r0, #30
 800c2be:	285a      	cmp	r0, #90	; 0x5a
 800c2c0:	f107 0778 	add.w	r7, r7, #120	; 0x78
 800c2c4:	f103 0678 	add.w	r6, r3, #120	; 0x78
 800c2c8:	d1ef      	bne.n	800c2aa <DataHist_parameters+0xba>
 800c2ca:	2600      	movs	r6, #0
 800c2cc:	f8c4 e30c 	str.w	lr, [r4, #780]	; 0x30c
 800c2d0:	f8bc 3000 	ldrh.w	r3, [ip]
 800c2d4:	f8dc e004 	ldr.w	lr, [ip, #4]
 800c2d8:	f10c 007c 	add.w	r0, ip, #124	; 0x7c
 800c2dc:	f8a4 3478 	strh.w	r3, [r4, #1144]	; 0x478
 800c2e0:	f204 477c 	addw	r7, r4, #1148	; 0x47c
 800c2e4:	463a      	mov	r2, r7
 800c2e6:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 800c2ea:	f853 1f04 	ldr.w	r1, [r3, #4]!
 800c2ee:	4283      	cmp	r3, r0
 800c2f0:	f842 1f04 	str.w	r1, [r2, #4]!
 800c2f4:	d1f9      	bne.n	800c2ea <DataHist_parameters+0xfa>
 800c2f6:	361e      	adds	r6, #30
 800c2f8:	2e5a      	cmp	r6, #90	; 0x5a
 800c2fa:	f107 0778 	add.w	r7, r7, #120	; 0x78
 800c2fe:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800c302:	d1ef      	bne.n	800c2e4 <DataHist_parameters+0xf4>
 800c304:	f8c4 e47c 	str.w	lr, [r4, #1148]	; 0x47c
 800c308:	69ab      	ldr	r3, [r5, #24]
 800c30a:	782a      	ldrb	r2, [r5, #0]
 800c30c:	f8c4 3600 	str.w	r3, [r4, #1536]	; 0x600
 800c310:	f884 25e8 	strb.w	r2, [r4, #1512]	; 0x5e8
 800c314:	686b      	ldr	r3, [r5, #4]
 800c316:	f8c4 35ec 	str.w	r3, [r4, #1516]	; 0x5ec
 800c31a:	68ab      	ldr	r3, [r5, #8]
 800c31c:	f8c4 35f0 	str.w	r3, [r4, #1520]	; 0x5f0
 800c320:	68eb      	ldr	r3, [r5, #12]
 800c322:	f8c4 35f4 	str.w	r3, [r4, #1524]	; 0x5f4
 800c326:	692b      	ldr	r3, [r5, #16]
 800c328:	f8c4 35f8 	str.w	r3, [r4, #1528]	; 0x5f8
 800c32c:	696b      	ldr	r3, [r5, #20]
 800c32e:	f8c4 35fc 	str.w	r3, [r4, #1532]	; 0x5fc
 800c332:	69eb      	ldr	r3, [r5, #28]
 800c334:	f8c4 3604 	str.w	r3, [r4, #1540]	; 0x604
 800c338:	6a2b      	ldr	r3, [r5, #32]
 800c33a:	f8c4 3608 	str.w	r3, [r4, #1544]	; 0x608
 800c33e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c340:	f8c4 360c 	str.w	r3, [r4, #1548]	; 0x60c
 800c344:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c346:	f8c4 3610 	str.w	r3, [r4, #1552]	; 0x610
 800c34a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800c34c:	f8c4 3614 	str.w	r3, [r4, #1556]	; 0x614
 800c350:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c354 <rotVect>:
 800c354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c356:	4614      	mov	r4, r2
 800c358:	4606      	mov	r6, r0
 800c35a:	f991 0000 	ldrsb.w	r0, [r1]
 800c35e:	460d      	mov	r5, r1
 800c360:	f7f4 fcd4 	bl	8000d0c <__aeabi_i2f>
 800c364:	6821      	ldr	r1, [r4, #0]
 800c366:	f7f4 fd25 	bl	8000db4 <__aeabi_fmul>
 800c36a:	4607      	mov	r7, r0
 800c36c:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800c370:	f7f4 fccc 	bl	8000d0c <__aeabi_i2f>
 800c374:	6861      	ldr	r1, [r4, #4]
 800c376:	f7f4 fd1d 	bl	8000db4 <__aeabi_fmul>
 800c37a:	4601      	mov	r1, r0
 800c37c:	4638      	mov	r0, r7
 800c37e:	f7f4 fc11 	bl	8000ba4 <__addsf3>
 800c382:	4607      	mov	r7, r0
 800c384:	f995 0002 	ldrsb.w	r0, [r5, #2]
 800c388:	f7f4 fcc0 	bl	8000d0c <__aeabi_i2f>
 800c38c:	68a1      	ldr	r1, [r4, #8]
 800c38e:	f7f4 fd11 	bl	8000db4 <__aeabi_fmul>
 800c392:	4601      	mov	r1, r0
 800c394:	4638      	mov	r0, r7
 800c396:	f7f4 fc05 	bl	8000ba4 <__addsf3>
 800c39a:	6030      	str	r0, [r6, #0]
 800c39c:	f995 0003 	ldrsb.w	r0, [r5, #3]
 800c3a0:	f7f4 fcb4 	bl	8000d0c <__aeabi_i2f>
 800c3a4:	6821      	ldr	r1, [r4, #0]
 800c3a6:	f7f4 fd05 	bl	8000db4 <__aeabi_fmul>
 800c3aa:	4607      	mov	r7, r0
 800c3ac:	f995 0004 	ldrsb.w	r0, [r5, #4]
 800c3b0:	f7f4 fcac 	bl	8000d0c <__aeabi_i2f>
 800c3b4:	6861      	ldr	r1, [r4, #4]
 800c3b6:	f7f4 fcfd 	bl	8000db4 <__aeabi_fmul>
 800c3ba:	4601      	mov	r1, r0
 800c3bc:	4638      	mov	r0, r7
 800c3be:	f7f4 fbf1 	bl	8000ba4 <__addsf3>
 800c3c2:	4607      	mov	r7, r0
 800c3c4:	f995 0005 	ldrsb.w	r0, [r5, #5]
 800c3c8:	f7f4 fca0 	bl	8000d0c <__aeabi_i2f>
 800c3cc:	68a1      	ldr	r1, [r4, #8]
 800c3ce:	f7f4 fcf1 	bl	8000db4 <__aeabi_fmul>
 800c3d2:	4601      	mov	r1, r0
 800c3d4:	4638      	mov	r0, r7
 800c3d6:	f7f4 fbe5 	bl	8000ba4 <__addsf3>
 800c3da:	6070      	str	r0, [r6, #4]
 800c3dc:	f995 0006 	ldrsb.w	r0, [r5, #6]
 800c3e0:	f7f4 fc94 	bl	8000d0c <__aeabi_i2f>
 800c3e4:	6821      	ldr	r1, [r4, #0]
 800c3e6:	f7f4 fce5 	bl	8000db4 <__aeabi_fmul>
 800c3ea:	4607      	mov	r7, r0
 800c3ec:	f995 0007 	ldrsb.w	r0, [r5, #7]
 800c3f0:	f7f4 fc8c 	bl	8000d0c <__aeabi_i2f>
 800c3f4:	6861      	ldr	r1, [r4, #4]
 800c3f6:	f7f4 fcdd 	bl	8000db4 <__aeabi_fmul>
 800c3fa:	4601      	mov	r1, r0
 800c3fc:	4638      	mov	r0, r7
 800c3fe:	f7f4 fbd1 	bl	8000ba4 <__addsf3>
 800c402:	4603      	mov	r3, r0
 800c404:	f995 0008 	ldrsb.w	r0, [r5, #8]
 800c408:	461d      	mov	r5, r3
 800c40a:	f7f4 fc7f 	bl	8000d0c <__aeabi_i2f>
 800c40e:	68a1      	ldr	r1, [r4, #8]
 800c410:	f7f4 fcd0 	bl	8000db4 <__aeabi_fmul>
 800c414:	4601      	mov	r1, r0
 800c416:	4628      	mov	r0, r5
 800c418:	f7f4 fbc4 	bl	8000ba4 <__addsf3>
 800c41c:	60b0      	str	r0, [r6, #8]
 800c41e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c420 <findAxis>:
 800c420:	f990 3000 	ldrsb.w	r3, [r0]
 800c424:	2b01      	cmp	r3, #1
 800c426:	d027      	beq.n	800c478 <findAxis+0x58>
 800c428:	3301      	adds	r3, #1
 800c42a:	d00e      	beq.n	800c44a <findAxis+0x2a>
 800c42c:	f990 3003 	ldrsb.w	r3, [r0, #3]
 800c430:	2b01      	cmp	r3, #1
 800c432:	d053      	beq.n	800c4dc <findAxis+0xbc>
 800c434:	3301      	adds	r3, #1
 800c436:	d048      	beq.n	800c4ca <findAxis+0xaa>
 800c438:	f990 3006 	ldrsb.w	r3, [r0, #6]
 800c43c:	2b01      	cmp	r3, #1
 800c43e:	d053      	beq.n	800c4e8 <findAxis+0xc8>
 800c440:	3301      	adds	r3, #1
 800c442:	d104      	bne.n	800c44e <findAxis+0x2e>
 800c444:	2364      	movs	r3, #100	; 0x64
 800c446:	700b      	strb	r3, [r1, #0]
 800c448:	e001      	b.n	800c44e <findAxis+0x2e>
 800c44a:	2377      	movs	r3, #119	; 0x77
 800c44c:	700b      	strb	r3, [r1, #0]
 800c44e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800c452:	2b01      	cmp	r3, #1
 800c454:	d016      	beq.n	800c484 <findAxis+0x64>
 800c456:	3301      	adds	r3, #1
 800c458:	d02e      	beq.n	800c4b8 <findAxis+0x98>
 800c45a:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800c45e:	2b01      	cmp	r3, #1
 800c460:	d039      	beq.n	800c4d6 <findAxis+0xb6>
 800c462:	3301      	adds	r3, #1
 800c464:	d034      	beq.n	800c4d0 <findAxis+0xb0>
 800c466:	f990 3007 	ldrsb.w	r3, [r0, #7]
 800c46a:	2b01      	cmp	r3, #1
 800c46c:	d03f      	beq.n	800c4ee <findAxis+0xce>
 800c46e:	3301      	adds	r3, #1
 800c470:	d10a      	bne.n	800c488 <findAxis+0x68>
 800c472:	2364      	movs	r3, #100	; 0x64
 800c474:	704b      	strb	r3, [r1, #1]
 800c476:	e007      	b.n	800c488 <findAxis+0x68>
 800c478:	2365      	movs	r3, #101	; 0x65
 800c47a:	700b      	strb	r3, [r1, #0]
 800c47c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800c480:	2b01      	cmp	r3, #1
 800c482:	d1e8      	bne.n	800c456 <findAxis+0x36>
 800c484:	2365      	movs	r3, #101	; 0x65
 800c486:	704b      	strb	r3, [r1, #1]
 800c488:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800c48c:	2b01      	cmp	r3, #1
 800c48e:	d010      	beq.n	800c4b2 <findAxis+0x92>
 800c490:	3301      	adds	r3, #1
 800c492:	d014      	beq.n	800c4be <findAxis+0x9e>
 800c494:	f990 3005 	ldrsb.w	r3, [r0, #5]
 800c498:	2b01      	cmp	r3, #1
 800c49a:	d022      	beq.n	800c4e2 <findAxis+0xc2>
 800c49c:	3301      	adds	r3, #1
 800c49e:	d011      	beq.n	800c4c4 <findAxis+0xa4>
 800c4a0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800c4a4:	2b01      	cmp	r3, #1
 800c4a6:	d025      	beq.n	800c4f4 <findAxis+0xd4>
 800c4a8:	3301      	adds	r3, #1
 800c4aa:	bf04      	itt	eq
 800c4ac:	2364      	moveq	r3, #100	; 0x64
 800c4ae:	708b      	strbeq	r3, [r1, #2]
 800c4b0:	4770      	bx	lr
 800c4b2:	2365      	movs	r3, #101	; 0x65
 800c4b4:	708b      	strb	r3, [r1, #2]
 800c4b6:	4770      	bx	lr
 800c4b8:	2377      	movs	r3, #119	; 0x77
 800c4ba:	704b      	strb	r3, [r1, #1]
 800c4bc:	e7e4      	b.n	800c488 <findAxis+0x68>
 800c4be:	2377      	movs	r3, #119	; 0x77
 800c4c0:	708b      	strb	r3, [r1, #2]
 800c4c2:	4770      	bx	lr
 800c4c4:	2373      	movs	r3, #115	; 0x73
 800c4c6:	708b      	strb	r3, [r1, #2]
 800c4c8:	4770      	bx	lr
 800c4ca:	2373      	movs	r3, #115	; 0x73
 800c4cc:	700b      	strb	r3, [r1, #0]
 800c4ce:	e7be      	b.n	800c44e <findAxis+0x2e>
 800c4d0:	2373      	movs	r3, #115	; 0x73
 800c4d2:	704b      	strb	r3, [r1, #1]
 800c4d4:	e7d8      	b.n	800c488 <findAxis+0x68>
 800c4d6:	236e      	movs	r3, #110	; 0x6e
 800c4d8:	704b      	strb	r3, [r1, #1]
 800c4da:	e7d5      	b.n	800c488 <findAxis+0x68>
 800c4dc:	236e      	movs	r3, #110	; 0x6e
 800c4de:	700b      	strb	r3, [r1, #0]
 800c4e0:	e7b5      	b.n	800c44e <findAxis+0x2e>
 800c4e2:	236e      	movs	r3, #110	; 0x6e
 800c4e4:	708b      	strb	r3, [r1, #2]
 800c4e6:	4770      	bx	lr
 800c4e8:	2375      	movs	r3, #117	; 0x75
 800c4ea:	700b      	strb	r3, [r1, #0]
 800c4ec:	e7af      	b.n	800c44e <findAxis+0x2e>
 800c4ee:	2375      	movs	r3, #117	; 0x75
 800c4f0:	704b      	strb	r3, [r1, #1]
 800c4f2:	e7c9      	b.n	800c488 <findAxis+0x68>
 800c4f4:	2375      	movs	r3, #117	; 0x75
 800c4f6:	708b      	strb	r3, [r1, #2]
 800c4f8:	4770      	bx	lr
 800c4fa:	bf00      	nop
 800c4fc:	0000      	movs	r0, r0
	...

0800c500 <findDirection>:
 800c500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c504:	f020 4900 	bic.w	r9, r0, #2147483648	; 0x80000000
 800c508:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800c50c:	4605      	mov	r5, r0
 800c50e:	460f      	mov	r7, r1
 800c510:	4648      	mov	r0, r9
 800c512:	4641      	mov	r1, r8
 800c514:	4616      	mov	r6, r2
 800c516:	461c      	mov	r4, r3
 800c518:	f7f4 fe08 	bl	800112c <__aeabi_fcmpgt>
 800c51c:	b3a8      	cbz	r0, 800c58a <findDirection+0x8a>
 800c51e:	f026 4a00 	bic.w	sl, r6, #2147483648	; 0x80000000
 800c522:	4651      	mov	r1, sl
 800c524:	4648      	mov	r0, r9
 800c526:	f7f4 fe01 	bl	800112c <__aeabi_fcmpgt>
 800c52a:	b370      	cbz	r0, 800c58a <findDirection+0x8a>
 800c52c:	4628      	mov	r0, r5
 800c52e:	2100      	movs	r1, #0
 800c530:	f7f4 fdfc 	bl	800112c <__aeabi_fcmpgt>
 800c534:	2800      	cmp	r0, #0
 800c536:	f000 808d 	beq.w	800c654 <findDirection+0x154>
 800c53a:	4648      	mov	r0, r9
 800c53c:	f7f3 ffd4 	bl	80004e8 <__aeabi_f2d>
 800c540:	4606      	mov	r6, r0
 800c542:	4640      	mov	r0, r8
 800c544:	460f      	mov	r7, r1
 800c546:	f7f3 ffcf 	bl	80004e8 <__aeabi_f2d>
 800c54a:	a381      	add	r3, pc, #516	; (adr r3, 800c750 <findDirection+0x250>)
 800c54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c550:	f7f4 f822 	bl	8000598 <__aeabi_dmul>
 800c554:	4602      	mov	r2, r0
 800c556:	460b      	mov	r3, r1
 800c558:	4630      	mov	r0, r6
 800c55a:	4639      	mov	r1, r7
 800c55c:	f7f4 faac 	bl	8000ab8 <__aeabi_dcmpgt>
 800c560:	b180      	cbz	r0, 800c584 <findDirection+0x84>
 800c562:	4650      	mov	r0, sl
 800c564:	f7f3 ffc0 	bl	80004e8 <__aeabi_f2d>
 800c568:	a379      	add	r3, pc, #484	; (adr r3, 800c750 <findDirection+0x250>)
 800c56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c56e:	f7f4 f813 	bl	8000598 <__aeabi_dmul>
 800c572:	4602      	mov	r2, r0
 800c574:	460b      	mov	r3, r1
 800c576:	4630      	mov	r0, r6
 800c578:	4639      	mov	r1, r7
 800c57a:	f7f4 fa9d 	bl	8000ab8 <__aeabi_dcmpgt>
 800c57e:	2800      	cmp	r0, #0
 800c580:	bf18      	it	ne
 800c582:	2404      	movne	r4, #4
 800c584:	4620      	mov	r0, r4
 800c586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c58a:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800c58e:	4629      	mov	r1, r5
 800c590:	4640      	mov	r0, r8
 800c592:	f7f4 fdcb 	bl	800112c <__aeabi_fcmpgt>
 800c596:	b370      	cbz	r0, 800c5f6 <findDirection+0xf6>
 800c598:	4638      	mov	r0, r7
 800c59a:	2100      	movs	r1, #0
 800c59c:	f7f4 fdc6 	bl	800112c <__aeabi_fcmpgt>
 800c5a0:	2800      	cmp	r0, #0
 800c5a2:	d07e      	beq.n	800c6a2 <findDirection+0x1a2>
 800c5a4:	4640      	mov	r0, r8
 800c5a6:	f7f3 ff9f 	bl	80004e8 <__aeabi_f2d>
 800c5aa:	4606      	mov	r6, r0
 800c5ac:	4648      	mov	r0, r9
 800c5ae:	460f      	mov	r7, r1
 800c5b0:	f7f3 ff9a 	bl	80004e8 <__aeabi_f2d>
 800c5b4:	a366      	add	r3, pc, #408	; (adr r3, 800c750 <findDirection+0x250>)
 800c5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ba:	f7f3 ffed 	bl	8000598 <__aeabi_dmul>
 800c5be:	4602      	mov	r2, r0
 800c5c0:	460b      	mov	r3, r1
 800c5c2:	4630      	mov	r0, r6
 800c5c4:	4639      	mov	r1, r7
 800c5c6:	f7f4 fa77 	bl	8000ab8 <__aeabi_dcmpgt>
 800c5ca:	2800      	cmp	r0, #0
 800c5cc:	d0da      	beq.n	800c584 <findDirection+0x84>
 800c5ce:	4628      	mov	r0, r5
 800c5d0:	f7f3 ff8a 	bl	80004e8 <__aeabi_f2d>
 800c5d4:	a35e      	add	r3, pc, #376	; (adr r3, 800c750 <findDirection+0x250>)
 800c5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5da:	f7f3 ffdd 	bl	8000598 <__aeabi_dmul>
 800c5de:	4602      	mov	r2, r0
 800c5e0:	460b      	mov	r3, r1
 800c5e2:	4630      	mov	r0, r6
 800c5e4:	4639      	mov	r1, r7
 800c5e6:	f7f4 fa67 	bl	8000ab8 <__aeabi_dcmpgt>
 800c5ea:	2800      	cmp	r0, #0
 800c5ec:	bf18      	it	ne
 800c5ee:	2401      	movne	r4, #1
 800c5f0:	4620      	mov	r0, r4
 800c5f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5f6:	4630      	mov	r0, r6
 800c5f8:	2100      	movs	r1, #0
 800c5fa:	f7f4 fd97 	bl	800112c <__aeabi_fcmpgt>
 800c5fe:	2800      	cmp	r0, #0
 800c600:	d079      	beq.n	800c6f6 <findDirection+0x1f6>
 800c602:	4628      	mov	r0, r5
 800c604:	f7f3 ff70 	bl	80004e8 <__aeabi_f2d>
 800c608:	4606      	mov	r6, r0
 800c60a:	4640      	mov	r0, r8
 800c60c:	460f      	mov	r7, r1
 800c60e:	f7f3 ff6b 	bl	80004e8 <__aeabi_f2d>
 800c612:	a34f      	add	r3, pc, #316	; (adr r3, 800c750 <findDirection+0x250>)
 800c614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c618:	f7f3 ffbe 	bl	8000598 <__aeabi_dmul>
 800c61c:	4602      	mov	r2, r0
 800c61e:	460b      	mov	r3, r1
 800c620:	4630      	mov	r0, r6
 800c622:	4639      	mov	r1, r7
 800c624:	f7f4 fa48 	bl	8000ab8 <__aeabi_dcmpgt>
 800c628:	2800      	cmp	r0, #0
 800c62a:	d0ab      	beq.n	800c584 <findDirection+0x84>
 800c62c:	4648      	mov	r0, r9
 800c62e:	f7f3 ff5b 	bl	80004e8 <__aeabi_f2d>
 800c632:	a347      	add	r3, pc, #284	; (adr r3, 800c750 <findDirection+0x250>)
 800c634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c638:	f7f3 ffae 	bl	8000598 <__aeabi_dmul>
 800c63c:	4602      	mov	r2, r0
 800c63e:	460b      	mov	r3, r1
 800c640:	4630      	mov	r0, r6
 800c642:	4639      	mov	r1, r7
 800c644:	f7f4 fa38 	bl	8000ab8 <__aeabi_dcmpgt>
 800c648:	2800      	cmp	r0, #0
 800c64a:	bf18      	it	ne
 800c64c:	2400      	movne	r4, #0
 800c64e:	4620      	mov	r0, r4
 800c650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c654:	4648      	mov	r0, r9
 800c656:	f7f3 ff47 	bl	80004e8 <__aeabi_f2d>
 800c65a:	4606      	mov	r6, r0
 800c65c:	4640      	mov	r0, r8
 800c65e:	460f      	mov	r7, r1
 800c660:	f7f3 ff42 	bl	80004e8 <__aeabi_f2d>
 800c664:	a33a      	add	r3, pc, #232	; (adr r3, 800c750 <findDirection+0x250>)
 800c666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c66a:	f7f3 ff95 	bl	8000598 <__aeabi_dmul>
 800c66e:	4602      	mov	r2, r0
 800c670:	460b      	mov	r3, r1
 800c672:	4630      	mov	r0, r6
 800c674:	4639      	mov	r1, r7
 800c676:	f7f4 fa1f 	bl	8000ab8 <__aeabi_dcmpgt>
 800c67a:	2800      	cmp	r0, #0
 800c67c:	d082      	beq.n	800c584 <findDirection+0x84>
 800c67e:	4650      	mov	r0, sl
 800c680:	f7f3 ff32 	bl	80004e8 <__aeabi_f2d>
 800c684:	a332      	add	r3, pc, #200	; (adr r3, 800c750 <findDirection+0x250>)
 800c686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c68a:	f7f3 ff85 	bl	8000598 <__aeabi_dmul>
 800c68e:	4602      	mov	r2, r0
 800c690:	460b      	mov	r3, r1
 800c692:	4630      	mov	r0, r6
 800c694:	4639      	mov	r1, r7
 800c696:	f7f4 fa0f 	bl	8000ab8 <__aeabi_dcmpgt>
 800c69a:	2800      	cmp	r0, #0
 800c69c:	bf18      	it	ne
 800c69e:	2405      	movne	r4, #5
 800c6a0:	e770      	b.n	800c584 <findDirection+0x84>
 800c6a2:	4640      	mov	r0, r8
 800c6a4:	f7f3 ff20 	bl	80004e8 <__aeabi_f2d>
 800c6a8:	4606      	mov	r6, r0
 800c6aa:	4648      	mov	r0, r9
 800c6ac:	460f      	mov	r7, r1
 800c6ae:	f7f3 ff1b 	bl	80004e8 <__aeabi_f2d>
 800c6b2:	a327      	add	r3, pc, #156	; (adr r3, 800c750 <findDirection+0x250>)
 800c6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b8:	f7f3 ff6e 	bl	8000598 <__aeabi_dmul>
 800c6bc:	4602      	mov	r2, r0
 800c6be:	460b      	mov	r3, r1
 800c6c0:	4630      	mov	r0, r6
 800c6c2:	4639      	mov	r1, r7
 800c6c4:	f7f4 f9f8 	bl	8000ab8 <__aeabi_dcmpgt>
 800c6c8:	2800      	cmp	r0, #0
 800c6ca:	f43f af5b 	beq.w	800c584 <findDirection+0x84>
 800c6ce:	4628      	mov	r0, r5
 800c6d0:	f7f3 ff0a 	bl	80004e8 <__aeabi_f2d>
 800c6d4:	a31e      	add	r3, pc, #120	; (adr r3, 800c750 <findDirection+0x250>)
 800c6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6da:	f7f3 ff5d 	bl	8000598 <__aeabi_dmul>
 800c6de:	4602      	mov	r2, r0
 800c6e0:	460b      	mov	r3, r1
 800c6e2:	4630      	mov	r0, r6
 800c6e4:	4639      	mov	r1, r7
 800c6e6:	f7f4 f9e7 	bl	8000ab8 <__aeabi_dcmpgt>
 800c6ea:	2800      	cmp	r0, #0
 800c6ec:	bf18      	it	ne
 800c6ee:	2403      	movne	r4, #3
 800c6f0:	4620      	mov	r0, r4
 800c6f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6f6:	4628      	mov	r0, r5
 800c6f8:	f7f3 fef6 	bl	80004e8 <__aeabi_f2d>
 800c6fc:	4606      	mov	r6, r0
 800c6fe:	4640      	mov	r0, r8
 800c700:	460f      	mov	r7, r1
 800c702:	f7f3 fef1 	bl	80004e8 <__aeabi_f2d>
 800c706:	a312      	add	r3, pc, #72	; (adr r3, 800c750 <findDirection+0x250>)
 800c708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c70c:	f7f3 ff44 	bl	8000598 <__aeabi_dmul>
 800c710:	4602      	mov	r2, r0
 800c712:	460b      	mov	r3, r1
 800c714:	4630      	mov	r0, r6
 800c716:	4639      	mov	r1, r7
 800c718:	f7f4 f9ce 	bl	8000ab8 <__aeabi_dcmpgt>
 800c71c:	2800      	cmp	r0, #0
 800c71e:	f43f af31 	beq.w	800c584 <findDirection+0x84>
 800c722:	4648      	mov	r0, r9
 800c724:	f7f3 fee0 	bl	80004e8 <__aeabi_f2d>
 800c728:	a309      	add	r3, pc, #36	; (adr r3, 800c750 <findDirection+0x250>)
 800c72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c72e:	f7f3 ff33 	bl	8000598 <__aeabi_dmul>
 800c732:	4602      	mov	r2, r0
 800c734:	460b      	mov	r3, r1
 800c736:	4630      	mov	r0, r6
 800c738:	4639      	mov	r1, r7
 800c73a:	f7f4 f9bd 	bl	8000ab8 <__aeabi_dcmpgt>
 800c73e:	2800      	cmp	r0, #0
 800c740:	bf18      	it	ne
 800c742:	2402      	movne	r4, #2
 800c744:	4620      	mov	r0, r4
 800c746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c74a:	bf00      	nop
 800c74c:	f3af 8000 	nop.w
 800c750:	e0000000 	.word	0xe0000000
 800c754:	3ff6b851 	.word	0x3ff6b851

0800c758 <updateOrientation>:
 800c758:	2300      	movs	r3, #0
 800c75a:	b410      	push	{r4}
 800c75c:	6003      	str	r3, [r0, #0]
 800c75e:	6043      	str	r3, [r0, #4]
 800c760:	7203      	strb	r3, [r0, #8]
 800c762:	780c      	ldrb	r4, [r1, #0]
 800c764:	784a      	ldrb	r2, [r1, #1]
 800c766:	f1a4 0342 	sub.w	r3, r4, #66	; 0x42
 800c76a:	2b17      	cmp	r3, #23
 800c76c:	bf98      	it	ls
 800c76e:	3420      	addls	r4, #32
 800c770:	f1a2 0342 	sub.w	r3, r2, #66	; 0x42
 800c774:	bf98      	it	ls
 800c776:	b2e4      	uxtbls	r4, r4
 800c778:	2b17      	cmp	r3, #23
 800c77a:	788b      	ldrb	r3, [r1, #2]
 800c77c:	bf98      	it	ls
 800c77e:	3220      	addls	r2, #32
 800c780:	f1a3 0142 	sub.w	r1, r3, #66	; 0x42
 800c784:	bf98      	it	ls
 800c786:	b2d2      	uxtbls	r2, r2
 800c788:	2917      	cmp	r1, #23
 800c78a:	bf98      	it	ls
 800c78c:	3320      	addls	r3, #32
 800c78e:	f1a4 0464 	sub.w	r4, r4, #100	; 0x64
 800c792:	bf98      	it	ls
 800c794:	b2db      	uxtbls	r3, r3
 800c796:	2c13      	cmp	r4, #19
 800c798:	d80d      	bhi.n	800c7b6 <updateOrientation+0x5e>
 800c79a:	e8df f004 	tbb	[pc, r4]
 800c79e:	0a34      	.short	0x0a34
 800c7a0:	0c0c0c0c 	.word	0x0c0c0c0c
 800c7a4:	0c0c0c0c 	.word	0x0c0c0c0c
 800c7a8:	0c0c0c37 	.word	0x0c0c0c37
 800c7ac:	3d0c3a0c 	.word	0x3d0c3a0c
 800c7b0:	400c      	.short	0x400c
 800c7b2:	2101      	movs	r1, #1
 800c7b4:	7001      	strb	r1, [r0, #0]
 800c7b6:	3a64      	subs	r2, #100	; 0x64
 800c7b8:	2a13      	cmp	r2, #19
 800c7ba:	d80d      	bhi.n	800c7d8 <updateOrientation+0x80>
 800c7bc:	e8df f002 	tbb	[pc, r2]
 800c7c0:	0c0c0a32 	.word	0x0c0c0a32
 800c7c4:	0c0c0c0c 	.word	0x0c0c0c0c
 800c7c8:	0c350c0c 	.word	0x0c350c0c
 800c7cc:	380c0c0c 	.word	0x380c0c0c
 800c7d0:	3e0c3b0c 	.word	0x3e0c3b0c
 800c7d4:	2201      	movs	r2, #1
 800c7d6:	7042      	strb	r2, [r0, #1]
 800c7d8:	3b64      	subs	r3, #100	; 0x64
 800c7da:	2b13      	cmp	r3, #19
 800c7dc:	d80d      	bhi.n	800c7fa <updateOrientation+0xa2>
 800c7de:	e8df f003 	tbb	[pc, r3]
 800c7e2:	300a      	.short	0x300a
 800c7e4:	0c0c0c0c 	.word	0x0c0c0c0c
 800c7e8:	0c0c0c0c 	.word	0x0c0c0c0c
 800c7ec:	0c0c0c34 	.word	0x0c0c0c34
 800c7f0:	3c0c380c 	.word	0x3c0c380c
 800c7f4:	0e0c      	.short	0x0e0c
 800c7f6:	23ff      	movs	r3, #255	; 0xff
 800c7f8:	7203      	strb	r3, [r0, #8]
 800c7fa:	bc10      	pop	{r4}
 800c7fc:	4770      	bx	lr
 800c7fe:	23ff      	movs	r3, #255	; 0xff
 800c800:	bc10      	pop	{r4}
 800c802:	7083      	strb	r3, [r0, #2]
 800c804:	4770      	bx	lr
 800c806:	21ff      	movs	r1, #255	; 0xff
 800c808:	7181      	strb	r1, [r0, #6]
 800c80a:	e7d4      	b.n	800c7b6 <updateOrientation+0x5e>
 800c80c:	2101      	movs	r1, #1
 800c80e:	70c1      	strb	r1, [r0, #3]
 800c810:	e7d1      	b.n	800c7b6 <updateOrientation+0x5e>
 800c812:	21ff      	movs	r1, #255	; 0xff
 800c814:	70c1      	strb	r1, [r0, #3]
 800c816:	e7ce      	b.n	800c7b6 <updateOrientation+0x5e>
 800c818:	2101      	movs	r1, #1
 800c81a:	7181      	strb	r1, [r0, #6]
 800c81c:	e7cb      	b.n	800c7b6 <updateOrientation+0x5e>
 800c81e:	21ff      	movs	r1, #255	; 0xff
 800c820:	7001      	strb	r1, [r0, #0]
 800c822:	e7c8      	b.n	800c7b6 <updateOrientation+0x5e>
 800c824:	22ff      	movs	r2, #255	; 0xff
 800c826:	71c2      	strb	r2, [r0, #7]
 800c828:	e7d6      	b.n	800c7d8 <updateOrientation+0x80>
 800c82a:	2201      	movs	r2, #1
 800c82c:	7102      	strb	r2, [r0, #4]
 800c82e:	e7d3      	b.n	800c7d8 <updateOrientation+0x80>
 800c830:	22ff      	movs	r2, #255	; 0xff
 800c832:	7102      	strb	r2, [r0, #4]
 800c834:	e7d0      	b.n	800c7d8 <updateOrientation+0x80>
 800c836:	2201      	movs	r2, #1
 800c838:	71c2      	strb	r2, [r0, #7]
 800c83a:	e7cd      	b.n	800c7d8 <updateOrientation+0x80>
 800c83c:	22ff      	movs	r2, #255	; 0xff
 800c83e:	7042      	strb	r2, [r0, #1]
 800c840:	e7ca      	b.n	800c7d8 <updateOrientation+0x80>
 800c842:	2301      	movs	r3, #1
 800c844:	bc10      	pop	{r4}
 800c846:	7083      	strb	r3, [r0, #2]
 800c848:	4770      	bx	lr
 800c84a:	2301      	movs	r3, #1
 800c84c:	bc10      	pop	{r4}
 800c84e:	7143      	strb	r3, [r0, #5]
 800c850:	4770      	bx	lr
 800c852:	23ff      	movs	r3, #255	; 0xff
 800c854:	bc10      	pop	{r4}
 800c856:	7143      	strb	r3, [r0, #5]
 800c858:	4770      	bx	lr
 800c85a:	2301      	movs	r3, #1
 800c85c:	bc10      	pop	{r4}
 800c85e:	7203      	strb	r3, [r0, #8]
 800c860:	4770      	bx	lr
 800c862:	bf00      	nop

0800c864 <qmult>:
 800c864:	460b      	mov	r3, r1
 800c866:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c86a:	f8d1 900c 	ldr.w	r9, [r1, #12]
 800c86e:	6805      	ldr	r5, [r0, #0]
 800c870:	4606      	mov	r6, r0
 800c872:	b083      	sub	sp, #12
 800c874:	4649      	mov	r1, r9
 800c876:	4628      	mov	r0, r5
 800c878:	681c      	ldr	r4, [r3, #0]
 800c87a:	689f      	ldr	r7, [r3, #8]
 800c87c:	f8d3 b004 	ldr.w	fp, [r3, #4]
 800c880:	9200      	str	r2, [sp, #0]
 800c882:	f7f4 fa97 	bl	8000db4 <__aeabi_fmul>
 800c886:	f8d6 8008 	ldr.w	r8, [r6, #8]
 800c88a:	4659      	mov	r1, fp
 800c88c:	9001      	str	r0, [sp, #4]
 800c88e:	4640      	mov	r0, r8
 800c890:	f7f4 fa90 	bl	8000db4 <__aeabi_fmul>
 800c894:	9a01      	ldr	r2, [sp, #4]
 800c896:	4601      	mov	r1, r0
 800c898:	4610      	mov	r0, r2
 800c89a:	f7f4 f983 	bl	8000ba4 <__addsf3>
 800c89e:	f8d6 a004 	ldr.w	sl, [r6, #4]
 800c8a2:	68f6      	ldr	r6, [r6, #12]
 800c8a4:	4621      	mov	r1, r4
 800c8a6:	9001      	str	r0, [sp, #4]
 800c8a8:	4630      	mov	r0, r6
 800c8aa:	f7f4 fa83 	bl	8000db4 <__aeabi_fmul>
 800c8ae:	9a01      	ldr	r2, [sp, #4]
 800c8b0:	4601      	mov	r1, r0
 800c8b2:	4610      	mov	r0, r2
 800c8b4:	f7f4 f976 	bl	8000ba4 <__addsf3>
 800c8b8:	4639      	mov	r1, r7
 800c8ba:	9001      	str	r0, [sp, #4]
 800c8bc:	4650      	mov	r0, sl
 800c8be:	f7f4 fa79 	bl	8000db4 <__aeabi_fmul>
 800c8c2:	9a01      	ldr	r2, [sp, #4]
 800c8c4:	4601      	mov	r1, r0
 800c8c6:	4610      	mov	r0, r2
 800c8c8:	f7f4 f96a 	bl	8000ba0 <__aeabi_fsub>
 800c8cc:	9b00      	ldr	r3, [sp, #0]
 800c8ce:	4639      	mov	r1, r7
 800c8d0:	6018      	str	r0, [r3, #0]
 800c8d2:	4628      	mov	r0, r5
 800c8d4:	f7f4 fa6e 	bl	8000db4 <__aeabi_fmul>
 800c8d8:	4651      	mov	r1, sl
 800c8da:	9001      	str	r0, [sp, #4]
 800c8dc:	4648      	mov	r0, r9
 800c8de:	f7f4 fa69 	bl	8000db4 <__aeabi_fmul>
 800c8e2:	9a01      	ldr	r2, [sp, #4]
 800c8e4:	4601      	mov	r1, r0
 800c8e6:	4610      	mov	r0, r2
 800c8e8:	f7f4 f95c 	bl	8000ba4 <__addsf3>
 800c8ec:	4631      	mov	r1, r6
 800c8ee:	9001      	str	r0, [sp, #4]
 800c8f0:	4658      	mov	r0, fp
 800c8f2:	f7f4 fa5f 	bl	8000db4 <__aeabi_fmul>
 800c8f6:	9a01      	ldr	r2, [sp, #4]
 800c8f8:	4601      	mov	r1, r0
 800c8fa:	4610      	mov	r0, r2
 800c8fc:	f7f4 f952 	bl	8000ba4 <__addsf3>
 800c900:	4621      	mov	r1, r4
 800c902:	9001      	str	r0, [sp, #4]
 800c904:	4640      	mov	r0, r8
 800c906:	f7f4 fa55 	bl	8000db4 <__aeabi_fmul>
 800c90a:	9a01      	ldr	r2, [sp, #4]
 800c90c:	4601      	mov	r1, r0
 800c90e:	4610      	mov	r0, r2
 800c910:	f7f4 f946 	bl	8000ba0 <__aeabi_fsub>
 800c914:	9a00      	ldr	r2, [sp, #0]
 800c916:	4621      	mov	r1, r4
 800c918:	6050      	str	r0, [r2, #4]
 800c91a:	4650      	mov	r0, sl
 800c91c:	f7f4 fa4a 	bl	8000db4 <__aeabi_fmul>
 800c920:	4641      	mov	r1, r8
 800c922:	9001      	str	r0, [sp, #4]
 800c924:	4648      	mov	r0, r9
 800c926:	f7f4 fa45 	bl	8000db4 <__aeabi_fmul>
 800c92a:	9a01      	ldr	r2, [sp, #4]
 800c92c:	4601      	mov	r1, r0
 800c92e:	4610      	mov	r0, r2
 800c930:	f7f4 f938 	bl	8000ba4 <__addsf3>
 800c934:	4631      	mov	r1, r6
 800c936:	9001      	str	r0, [sp, #4]
 800c938:	4638      	mov	r0, r7
 800c93a:	f7f4 fa3b 	bl	8000db4 <__aeabi_fmul>
 800c93e:	9a01      	ldr	r2, [sp, #4]
 800c940:	4601      	mov	r1, r0
 800c942:	4610      	mov	r0, r2
 800c944:	f7f4 f92e 	bl	8000ba4 <__addsf3>
 800c948:	f105 4200 	add.w	r2, r5, #2147483648	; 0x80000000
 800c94c:	4611      	mov	r1, r2
 800c94e:	4605      	mov	r5, r0
 800c950:	4658      	mov	r0, fp
 800c952:	9201      	str	r2, [sp, #4]
 800c954:	f7f4 fa2e 	bl	8000db4 <__aeabi_fmul>
 800c958:	4601      	mov	r1, r0
 800c95a:	4628      	mov	r0, r5
 800c95c:	f7f4 f922 	bl	8000ba4 <__addsf3>
 800c960:	4605      	mov	r5, r0
 800c962:	9a01      	ldr	r2, [sp, #4]
 800c964:	4620      	mov	r0, r4
 800c966:	9c00      	ldr	r4, [sp, #0]
 800c968:	4611      	mov	r1, r2
 800c96a:	60a5      	str	r5, [r4, #8]
 800c96c:	f7f4 fa22 	bl	8000db4 <__aeabi_fmul>
 800c970:	4659      	mov	r1, fp
 800c972:	4605      	mov	r5, r0
 800c974:	4650      	mov	r0, sl
 800c976:	f7f4 fa1d 	bl	8000db4 <__aeabi_fmul>
 800c97a:	4601      	mov	r1, r0
 800c97c:	4628      	mov	r0, r5
 800c97e:	f7f4 f90f 	bl	8000ba0 <__aeabi_fsub>
 800c982:	4631      	mov	r1, r6
 800c984:	4605      	mov	r5, r0
 800c986:	4648      	mov	r0, r9
 800c988:	f7f4 fa14 	bl	8000db4 <__aeabi_fmul>
 800c98c:	4601      	mov	r1, r0
 800c98e:	4628      	mov	r0, r5
 800c990:	f7f4 f908 	bl	8000ba4 <__addsf3>
 800c994:	4641      	mov	r1, r8
 800c996:	4605      	mov	r5, r0
 800c998:	4638      	mov	r0, r7
 800c99a:	f7f4 fa0b 	bl	8000db4 <__aeabi_fmul>
 800c99e:	4601      	mov	r1, r0
 800c9a0:	4628      	mov	r0, r5
 800c9a2:	f7f4 f8fd 	bl	8000ba0 <__aeabi_fsub>
 800c9a6:	60e0      	str	r0, [r4, #12]
 800c9a8:	b003      	add	sp, #12
 800c9aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9ae:	bf00      	nop

0800c9b0 <MEMS_setMagIndexToOne>:
 800c9b0:	291f      	cmp	r1, #31
 800c9b2:	b430      	push	{r4, r5}
 800c9b4:	f04f 0401 	mov.w	r4, #1
 800c9b8:	d921      	bls.n	800c9fe <MEMS_setMagIndexToOne+0x4e>
 800c9ba:	6885      	ldr	r5, [r0, #8]
 800c9bc:	3920      	subs	r1, #32
 800c9be:	fa04 f101 	lsl.w	r1, r4, r1
 800c9c2:	ea21 0105 	bic.w	r1, r1, r5
 800c9c6:	4069      	eors	r1, r5
 800c9c8:	2a1f      	cmp	r2, #31
 800c9ca:	6081      	str	r1, [r0, #8]
 800c9cc:	f04f 0101 	mov.w	r1, #1
 800c9d0:	d920      	bls.n	800ca14 <MEMS_setMagIndexToOne+0x64>
 800c9d2:	6904      	ldr	r4, [r0, #16]
 800c9d4:	3a20      	subs	r2, #32
 800c9d6:	fa01 f202 	lsl.w	r2, r1, r2
 800c9da:	ea22 0204 	bic.w	r2, r2, r4
 800c9de:	4062      	eors	r2, r4
 800c9e0:	2b1f      	cmp	r3, #31
 800c9e2:	6102      	str	r2, [r0, #16]
 800c9e4:	f04f 0201 	mov.w	r2, #1
 800c9e8:	d91f      	bls.n	800ca2a <MEMS_setMagIndexToOne+0x7a>
 800c9ea:	bc30      	pop	{r4, r5}
 800c9ec:	69c1      	ldr	r1, [r0, #28]
 800c9ee:	3b20      	subs	r3, #32
 800c9f0:	fa02 f303 	lsl.w	r3, r2, r3
 800c9f4:	ea23 0301 	bic.w	r3, r3, r1
 800c9f8:	404b      	eors	r3, r1
 800c9fa:	61c3      	str	r3, [r0, #28]
 800c9fc:	4770      	bx	lr
 800c9fe:	68c5      	ldr	r5, [r0, #12]
 800ca00:	fa04 f101 	lsl.w	r1, r4, r1
 800ca04:	ea21 0105 	bic.w	r1, r1, r5
 800ca08:	4069      	eors	r1, r5
 800ca0a:	2a1f      	cmp	r2, #31
 800ca0c:	60c1      	str	r1, [r0, #12]
 800ca0e:	f04f 0101 	mov.w	r1, #1
 800ca12:	d8de      	bhi.n	800c9d2 <MEMS_setMagIndexToOne+0x22>
 800ca14:	6944      	ldr	r4, [r0, #20]
 800ca16:	fa01 f202 	lsl.w	r2, r1, r2
 800ca1a:	ea22 0204 	bic.w	r2, r2, r4
 800ca1e:	4062      	eors	r2, r4
 800ca20:	2b1f      	cmp	r3, #31
 800ca22:	6142      	str	r2, [r0, #20]
 800ca24:	f04f 0201 	mov.w	r2, #1
 800ca28:	d8df      	bhi.n	800c9ea <MEMS_setMagIndexToOne+0x3a>
 800ca2a:	bc30      	pop	{r4, r5}
 800ca2c:	6981      	ldr	r1, [r0, #24]
 800ca2e:	fa02 f303 	lsl.w	r3, r2, r3
 800ca32:	ea23 0301 	bic.w	r3, r3, r1
 800ca36:	404b      	eors	r3, r1
 800ca38:	6183      	str	r3, [r0, #24]
 800ca3a:	4770      	bx	lr

0800ca3c <getRotationMatrix>:
 800ca3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca40:	4606      	mov	r6, r0
 800ca42:	4614      	mov	r4, r2
 800ca44:	460d      	mov	r5, r1
 800ca46:	4610      	mov	r0, r2
 800ca48:	2100      	movs	r1, #0
 800ca4a:	2224      	movs	r2, #36	; 0x24
 800ca4c:	f00b f84e 	bl	8017aec <memset>
 800ca50:	6837      	ldr	r7, [r6, #0]
 800ca52:	60a7      	str	r7, [r4, #8]
 800ca54:	f8d6 8004 	ldr.w	r8, [r6, #4]
 800ca58:	f8c4 8014 	str.w	r8, [r4, #20]
 800ca5c:	f8d6 9008 	ldr.w	r9, [r6, #8]
 800ca60:	f8c4 9020 	str.w	r9, [r4, #32]
 800ca64:	f8d5 a004 	ldr.w	sl, [r5, #4]
 800ca68:	4649      	mov	r1, r9
 800ca6a:	4650      	mov	r0, sl
 800ca6c:	f7f4 f9a2 	bl	8000db4 <__aeabi_fmul>
 800ca70:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800ca74:	4606      	mov	r6, r0
 800ca76:	4641      	mov	r1, r8
 800ca78:	4658      	mov	r0, fp
 800ca7a:	f7f4 f99b 	bl	8000db4 <__aeabi_fmul>
 800ca7e:	4601      	mov	r1, r0
 800ca80:	4630      	mov	r0, r6
 800ca82:	f7f4 f88d 	bl	8000ba0 <__aeabi_fsub>
 800ca86:	4606      	mov	r6, r0
 800ca88:	682d      	ldr	r5, [r5, #0]
 800ca8a:	4639      	mov	r1, r7
 800ca8c:	4658      	mov	r0, fp
 800ca8e:	6026      	str	r6, [r4, #0]
 800ca90:	f7f4 f990 	bl	8000db4 <__aeabi_fmul>
 800ca94:	4649      	mov	r1, r9
 800ca96:	4681      	mov	r9, r0
 800ca98:	4628      	mov	r0, r5
 800ca9a:	f7f4 f98b 	bl	8000db4 <__aeabi_fmul>
 800ca9e:	4601      	mov	r1, r0
 800caa0:	4648      	mov	r0, r9
 800caa2:	f7f4 f87d 	bl	8000ba0 <__aeabi_fsub>
 800caa6:	4641      	mov	r1, r8
 800caa8:	60e0      	str	r0, [r4, #12]
 800caaa:	4628      	mov	r0, r5
 800caac:	f7f4 f982 	bl	8000db4 <__aeabi_fmul>
 800cab0:	4639      	mov	r1, r7
 800cab2:	4605      	mov	r5, r0
 800cab4:	4650      	mov	r0, sl
 800cab6:	f7f4 f97d 	bl	8000db4 <__aeabi_fmul>
 800caba:	4601      	mov	r1, r0
 800cabc:	4628      	mov	r0, r5
 800cabe:	f7f4 f86f 	bl	8000ba0 <__aeabi_fsub>
 800cac2:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800cac6:	61a0      	str	r0, [r4, #24]
 800cac8:	2100      	movs	r1, #0
 800caca:	4628      	mov	r0, r5
 800cacc:	f7f4 fb2e 	bl	800112c <__aeabi_fcmpgt>
 800cad0:	2800      	cmp	r0, #0
 800cad2:	f040 8089 	bne.w	800cbe8 <getRotationMatrix+0x1ac>
 800cad6:	2100      	movs	r1, #0
 800cad8:	4630      	mov	r0, r6
 800cada:	f7f4 fa1f 	bl	8000f1c <__aeabi_fdiv>
 800cade:	4601      	mov	r1, r0
 800cae0:	f7f4 f968 	bl	8000db4 <__aeabi_fmul>
 800cae4:	2500      	movs	r5, #0
 800cae6:	4607      	mov	r7, r0
 800cae8:	f8d4 900c 	ldr.w	r9, [r4, #12]
 800caec:	4628      	mov	r0, r5
 800caee:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800caf2:	4641      	mov	r1, r8
 800caf4:	f7f4 fafc 	bl	80010f0 <__aeabi_fcmplt>
 800caf8:	2800      	cmp	r0, #0
 800cafa:	f040 8083 	bne.w	800cc04 <getRotationMatrix+0x1c8>
 800cafe:	4629      	mov	r1, r5
 800cb00:	4648      	mov	r0, r9
 800cb02:	f7f4 fa0b 	bl	8000f1c <__aeabi_fdiv>
 800cb06:	4601      	mov	r1, r0
 800cb08:	f7f4 f954 	bl	8000db4 <__aeabi_fmul>
 800cb0c:	4639      	mov	r1, r7
 800cb0e:	f7f4 f849 	bl	8000ba4 <__addsf3>
 800cb12:	4607      	mov	r7, r0
 800cb14:	f8d4 9018 	ldr.w	r9, [r4, #24]
 800cb18:	4628      	mov	r0, r5
 800cb1a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800cb1e:	4641      	mov	r1, r8
 800cb20:	f7f4 fae6 	bl	80010f0 <__aeabi_fcmplt>
 800cb24:	2800      	cmp	r0, #0
 800cb26:	d062      	beq.n	800cbee <getRotationMatrix+0x1b2>
 800cb28:	4628      	mov	r0, r5
 800cb2a:	4641      	mov	r1, r8
 800cb2c:	f7f4 f9f6 	bl	8000f1c <__aeabi_fdiv>
 800cb30:	4601      	mov	r1, r0
 800cb32:	f7f4 f93f 	bl	8000db4 <__aeabi_fmul>
 800cb36:	4639      	mov	r1, r7
 800cb38:	f7f4 f93c 	bl	8000db4 <__aeabi_fmul>
 800cb3c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cb40:	f7f4 f830 	bl	8000ba4 <__addsf3>
 800cb44:	4645      	mov	r5, r8
 800cb46:	f00b fe71 	bl	801882c <sqrtf>
 800cb4a:	4629      	mov	r1, r5
 800cb4c:	f7f4 f932 	bl	8000db4 <__aeabi_fmul>
 800cb50:	4601      	mov	r1, r0
 800cb52:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800cb56:	f7f4 f9e1 	bl	8000f1c <__aeabi_fdiv>
 800cb5a:	4607      	mov	r7, r0
 800cb5c:	4630      	mov	r0, r6
 800cb5e:	4639      	mov	r1, r7
 800cb60:	f7f4 f928 	bl	8000db4 <__aeabi_fmul>
 800cb64:	4639      	mov	r1, r7
 800cb66:	4605      	mov	r5, r0
 800cb68:	6020      	str	r0, [r4, #0]
 800cb6a:	68e0      	ldr	r0, [r4, #12]
 800cb6c:	f7f4 f922 	bl	8000db4 <__aeabi_fmul>
 800cb70:	4639      	mov	r1, r7
 800cb72:	4606      	mov	r6, r0
 800cb74:	60e0      	str	r0, [r4, #12]
 800cb76:	69a0      	ldr	r0, [r4, #24]
 800cb78:	f7f4 f91c 	bl	8000db4 <__aeabi_fmul>
 800cb7c:	f8d4 9014 	ldr.w	r9, [r4, #20]
 800cb80:	4607      	mov	r7, r0
 800cb82:	4601      	mov	r1, r0
 800cb84:	61a0      	str	r0, [r4, #24]
 800cb86:	4648      	mov	r0, r9
 800cb88:	f7f4 f914 	bl	8000db4 <__aeabi_fmul>
 800cb8c:	f8d4 a020 	ldr.w	sl, [r4, #32]
 800cb90:	4680      	mov	r8, r0
 800cb92:	4631      	mov	r1, r6
 800cb94:	4650      	mov	r0, sl
 800cb96:	f7f4 f90d 	bl	8000db4 <__aeabi_fmul>
 800cb9a:	4601      	mov	r1, r0
 800cb9c:	4640      	mov	r0, r8
 800cb9e:	f7f3 ffff 	bl	8000ba0 <__aeabi_fsub>
 800cba2:	4629      	mov	r1, r5
 800cba4:	6060      	str	r0, [r4, #4]
 800cba6:	4650      	mov	r0, sl
 800cba8:	f7f4 f904 	bl	8000db4 <__aeabi_fmul>
 800cbac:	4603      	mov	r3, r0
 800cbae:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800cbb2:	4638      	mov	r0, r7
 800cbb4:	4641      	mov	r1, r8
 800cbb6:	461f      	mov	r7, r3
 800cbb8:	f7f4 f8fc 	bl	8000db4 <__aeabi_fmul>
 800cbbc:	4601      	mov	r1, r0
 800cbbe:	4638      	mov	r0, r7
 800cbc0:	f7f3 ffee 	bl	8000ba0 <__aeabi_fsub>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	4641      	mov	r1, r8
 800cbc8:	6123      	str	r3, [r4, #16]
 800cbca:	4630      	mov	r0, r6
 800cbcc:	f7f4 f8f2 	bl	8000db4 <__aeabi_fmul>
 800cbd0:	4629      	mov	r1, r5
 800cbd2:	4605      	mov	r5, r0
 800cbd4:	4648      	mov	r0, r9
 800cbd6:	f7f4 f8ed 	bl	8000db4 <__aeabi_fmul>
 800cbda:	4601      	mov	r1, r0
 800cbdc:	4628      	mov	r0, r5
 800cbde:	f7f3 ffdf 	bl	8000ba0 <__aeabi_fsub>
 800cbe2:	61e0      	str	r0, [r4, #28]
 800cbe4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbe8:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
 800cbec:	e77c      	b.n	800cae8 <getRotationMatrix+0xac>
 800cbee:	4629      	mov	r1, r5
 800cbf0:	4648      	mov	r0, r9
 800cbf2:	f7f4 f993 	bl	8000f1c <__aeabi_fdiv>
 800cbf6:	4601      	mov	r1, r0
 800cbf8:	f7f4 f8dc 	bl	8000db4 <__aeabi_fmul>
 800cbfc:	4639      	mov	r1, r7
 800cbfe:	f7f3 ffd1 	bl	8000ba4 <__addsf3>
 800cc02:	e7a0      	b.n	800cb46 <getRotationMatrix+0x10a>
 800cc04:	4628      	mov	r0, r5
 800cc06:	4641      	mov	r1, r8
 800cc08:	f7f4 f988 	bl	8000f1c <__aeabi_fdiv>
 800cc0c:	4601      	mov	r1, r0
 800cc0e:	f7f4 f8d1 	bl	8000db4 <__aeabi_fmul>
 800cc12:	4639      	mov	r1, r7
 800cc14:	f7f4 f8ce 	bl	8000db4 <__aeabi_fmul>
 800cc18:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cc1c:	f7f3 ffc2 	bl	8000ba4 <__addsf3>
 800cc20:	4645      	mov	r5, r8
 800cc22:	4607      	mov	r7, r0
 800cc24:	e776      	b.n	800cb14 <getRotationMatrix+0xd8>
 800cc26:	bf00      	nop

0800cc28 <b_dcm2q>:
 800cc28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc2c:	f8d0 8020 	ldr.w	r8, [r0, #32]
 800cc30:	f8d0 a000 	ldr.w	sl, [r0]
 800cc34:	4604      	mov	r4, r0
 800cc36:	460d      	mov	r5, r1
 800cc38:	4650      	mov	r0, sl
 800cc3a:	4641      	mov	r1, r8
 800cc3c:	f7f3 ffb2 	bl	8000ba4 <__addsf3>
 800cc40:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cc44:	4601      	mov	r1, r0
 800cc46:	4658      	mov	r0, fp
 800cc48:	f7f3 ffaa 	bl	8000ba0 <__aeabi_fsub>
 800cc4c:	495d      	ldr	r1, [pc, #372]	; (800cdc4 <b_dcm2q+0x19c>)
 800cc4e:	4606      	mov	r6, r0
 800cc50:	f7f4 fa6c 	bl	800112c <__aeabi_fcmpgt>
 800cc54:	2800      	cmp	r0, #0
 800cc56:	f000 80b3 	beq.w	800cdc0 <b_dcm2q+0x198>
 800cc5a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cc5e:	4630      	mov	r0, r6
 800cc60:	f7f3 ffa0 	bl	8000ba4 <__addsf3>
 800cc64:	f00b fde2 	bl	801882c <sqrtf>
 800cc68:	4607      	mov	r7, r0
 800cc6a:	4651      	mov	r1, sl
 800cc6c:	4658      	mov	r0, fp
 800cc6e:	f7f3 ff99 	bl	8000ba4 <__addsf3>
 800cc72:	4681      	mov	r9, r0
 800cc74:	4640      	mov	r0, r8
 800cc76:	4649      	mov	r1, r9
 800cc78:	f7f3 ff92 	bl	8000ba0 <__aeabi_fsub>
 800cc7c:	4951      	ldr	r1, [pc, #324]	; (800cdc4 <b_dcm2q+0x19c>)
 800cc7e:	4606      	mov	r6, r0
 800cc80:	f7f4 fa54 	bl	800112c <__aeabi_fcmpgt>
 800cc84:	2800      	cmp	r0, #0
 800cc86:	f000 8099 	beq.w	800cdbc <b_dcm2q+0x194>
 800cc8a:	4630      	mov	r0, r6
 800cc8c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cc90:	f7f3 ff88 	bl	8000ba4 <__addsf3>
 800cc94:	f00b fdca 	bl	801882c <sqrtf>
 800cc98:	4606      	mov	r6, r0
 800cc9a:	4649      	mov	r1, r9
 800cc9c:	4640      	mov	r0, r8
 800cc9e:	f7f3 ff81 	bl	8000ba4 <__addsf3>
 800cca2:	4948      	ldr	r1, [pc, #288]	; (800cdc4 <b_dcm2q+0x19c>)
 800cca4:	4681      	mov	r9, r0
 800cca6:	f7f4 fa41 	bl	800112c <__aeabi_fcmpgt>
 800ccaa:	2800      	cmp	r0, #0
 800ccac:	f000 8083 	beq.w	800cdb6 <b_dcm2q+0x18e>
 800ccb0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ccb4:	4648      	mov	r0, r9
 800ccb6:	f7f3 ff75 	bl	8000ba4 <__addsf3>
 800ccba:	f00b fdb7 	bl	801882c <sqrtf>
 800ccbe:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800ccc2:	f7f4 f877 	bl	8000db4 <__aeabi_fmul>
 800ccc6:	4681      	mov	r9, r0
 800ccc8:	4641      	mov	r1, r8
 800ccca:	4658      	mov	r0, fp
 800cccc:	f7f3 ff6a 	bl	8000ba4 <__addsf3>
 800ccd0:	4601      	mov	r1, r0
 800ccd2:	4650      	mov	r0, sl
 800ccd4:	f7f3 ff64 	bl	8000ba0 <__aeabi_fsub>
 800ccd8:	493a      	ldr	r1, [pc, #232]	; (800cdc4 <b_dcm2q+0x19c>)
 800ccda:	4680      	mov	r8, r0
 800ccdc:	f7f4 fa12 	bl	8001104 <__aeabi_fcmple>
 800cce0:	2800      	cmp	r0, #0
 800cce2:	d165      	bne.n	800cdb0 <b_dcm2q+0x188>
 800cce4:	4640      	mov	r0, r8
 800cce6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ccea:	f7f3 ff5b 	bl	8000ba4 <__addsf3>
 800ccee:	f00b fd9d 	bl	801882c <sqrtf>
 800ccf2:	4680      	mov	r8, r0
 800ccf4:	69e1      	ldr	r1, [r4, #28]
 800ccf6:	6960      	ldr	r0, [r4, #20]
 800ccf8:	f7f3 ff52 	bl	8000ba0 <__aeabi_fsub>
 800ccfc:	2100      	movs	r1, #0
 800ccfe:	4682      	mov	sl, r0
 800cd00:	f7f4 f9f6 	bl	80010f0 <__aeabi_fcmplt>
 800cd04:	2800      	cmp	r0, #0
 800cd06:	d14a      	bne.n	800cd9e <b_dcm2q+0x176>
 800cd08:	2100      	movs	r1, #0
 800cd0a:	4650      	mov	r0, sl
 800cd0c:	f7f4 fa0e 	bl	800112c <__aeabi_fcmpgt>
 800cd10:	2800      	cmp	r0, #0
 800cd12:	d03e      	beq.n	800cd92 <b_dcm2q+0x16a>
 800cd14:	4640      	mov	r0, r8
 800cd16:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800cd1a:	f7f4 f84b 	bl	8000db4 <__aeabi_fmul>
 800cd1e:	6028      	str	r0, [r5, #0]
 800cd20:	68a1      	ldr	r1, [r4, #8]
 800cd22:	69a0      	ldr	r0, [r4, #24]
 800cd24:	f7f3 ff3c 	bl	8000ba0 <__aeabi_fsub>
 800cd28:	2100      	movs	r1, #0
 800cd2a:	4680      	mov	r8, r0
 800cd2c:	f7f4 f9e0 	bl	80010f0 <__aeabi_fcmplt>
 800cd30:	2800      	cmp	r0, #0
 800cd32:	d13a      	bne.n	800cdaa <b_dcm2q+0x182>
 800cd34:	2100      	movs	r1, #0
 800cd36:	4640      	mov	r0, r8
 800cd38:	f7f4 f9f8 	bl	800112c <__aeabi_fcmpgt>
 800cd3c:	b318      	cbz	r0, 800cd86 <b_dcm2q+0x15e>
 800cd3e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800cd42:	4638      	mov	r0, r7
 800cd44:	f7f4 f836 	bl	8000db4 <__aeabi_fmul>
 800cd48:	6068      	str	r0, [r5, #4]
 800cd4a:	68e1      	ldr	r1, [r4, #12]
 800cd4c:	6860      	ldr	r0, [r4, #4]
 800cd4e:	f7f3 ff27 	bl	8000ba0 <__aeabi_fsub>
 800cd52:	2100      	movs	r1, #0
 800cd54:	4604      	mov	r4, r0
 800cd56:	f7f4 f9cb 	bl	80010f0 <__aeabi_fcmplt>
 800cd5a:	bb18      	cbnz	r0, 800cda4 <b_dcm2q+0x17c>
 800cd5c:	2100      	movs	r1, #0
 800cd5e:	4620      	mov	r0, r4
 800cd60:	f7f4 f9e4 	bl	800112c <__aeabi_fcmpgt>
 800cd64:	b148      	cbz	r0, 800cd7a <b_dcm2q+0x152>
 800cd66:	4630      	mov	r0, r6
 800cd68:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800cd6c:	f7f4 f822 	bl	8000db4 <__aeabi_fmul>
 800cd70:	f8c5 900c 	str.w	r9, [r5, #12]
 800cd74:	60a8      	str	r0, [r5, #8]
 800cd76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd7a:	4630      	mov	r0, r6
 800cd7c:	4621      	mov	r1, r4
 800cd7e:	f7f4 f819 	bl	8000db4 <__aeabi_fmul>
 800cd82:	4606      	mov	r6, r0
 800cd84:	e7ef      	b.n	800cd66 <b_dcm2q+0x13e>
 800cd86:	4638      	mov	r0, r7
 800cd88:	4641      	mov	r1, r8
 800cd8a:	f7f4 f813 	bl	8000db4 <__aeabi_fmul>
 800cd8e:	4607      	mov	r7, r0
 800cd90:	e7d5      	b.n	800cd3e <b_dcm2q+0x116>
 800cd92:	4640      	mov	r0, r8
 800cd94:	4651      	mov	r1, sl
 800cd96:	f7f4 f80d 	bl	8000db4 <__aeabi_fmul>
 800cd9a:	4680      	mov	r8, r0
 800cd9c:	e7ba      	b.n	800cd14 <b_dcm2q+0xec>
 800cd9e:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
 800cda2:	e7b7      	b.n	800cd14 <b_dcm2q+0xec>
 800cda4:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800cda8:	e7dd      	b.n	800cd66 <b_dcm2q+0x13e>
 800cdaa:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800cdae:	e7c6      	b.n	800cd3e <b_dcm2q+0x116>
 800cdb0:	f04f 0800 	mov.w	r8, #0
 800cdb4:	e79e      	b.n	800ccf4 <b_dcm2q+0xcc>
 800cdb6:	f04f 0900 	mov.w	r9, #0
 800cdba:	e785      	b.n	800ccc8 <b_dcm2q+0xa0>
 800cdbc:	2600      	movs	r6, #0
 800cdbe:	e76c      	b.n	800cc9a <b_dcm2q+0x72>
 800cdc0:	2700      	movs	r7, #0
 800cdc2:	e752      	b.n	800cc6a <b_dcm2q+0x42>
 800cdc4:	bf800000 	.word	0xbf800000

0800cdc8 <q2hpr>:
 800cdc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdcc:	f8d0 a000 	ldr.w	sl, [r0]
 800cdd0:	b085      	sub	sp, #20
 800cdd2:	4680      	mov	r8, r0
 800cdd4:	460c      	mov	r4, r1
 800cdd6:	4650      	mov	r0, sl
 800cdd8:	4651      	mov	r1, sl
 800cdda:	9203      	str	r2, [sp, #12]
 800cddc:	f7f3 ffea 	bl	8000db4 <__aeabi_fmul>
 800cde0:	4601      	mov	r1, r0
 800cde2:	f7f3 fedf 	bl	8000ba4 <__addsf3>
 800cde6:	f8d8 9004 	ldr.w	r9, [r8, #4]
 800cdea:	4606      	mov	r6, r0
 800cdec:	4649      	mov	r1, r9
 800cdee:	4648      	mov	r0, r9
 800cdf0:	f7f3 ffe0 	bl	8000db4 <__aeabi_fmul>
 800cdf4:	4601      	mov	r1, r0
 800cdf6:	f7f3 fed5 	bl	8000ba4 <__addsf3>
 800cdfa:	f8d8 b008 	ldr.w	fp, [r8, #8]
 800cdfe:	4605      	mov	r5, r0
 800ce00:	4659      	mov	r1, fp
 800ce02:	4658      	mov	r0, fp
 800ce04:	f7f3 ffd6 	bl	8000db4 <__aeabi_fmul>
 800ce08:	4601      	mov	r1, r0
 800ce0a:	f7f3 fecb 	bl	8000ba4 <__addsf3>
 800ce0e:	4607      	mov	r7, r0
 800ce10:	4649      	mov	r1, r9
 800ce12:	4650      	mov	r0, sl
 800ce14:	9701      	str	r7, [sp, #4]
 800ce16:	f7f3 ffcd 	bl	8000db4 <__aeabi_fmul>
 800ce1a:	4601      	mov	r1, r0
 800ce1c:	f7f3 fec2 	bl	8000ba4 <__addsf3>
 800ce20:	4603      	mov	r3, r0
 800ce22:	4659      	mov	r1, fp
 800ce24:	4650      	mov	r0, sl
 800ce26:	9302      	str	r3, [sp, #8]
 800ce28:	f7f3 ffc4 	bl	8000db4 <__aeabi_fmul>
 800ce2c:	4601      	mov	r1, r0
 800ce2e:	f7f3 feb9 	bl	8000ba4 <__addsf3>
 800ce32:	4684      	mov	ip, r0
 800ce34:	f8d8 700c 	ldr.w	r7, [r8, #12]
 800ce38:	4650      	mov	r0, sl
 800ce3a:	4639      	mov	r1, r7
 800ce3c:	46e2      	mov	sl, ip
 800ce3e:	f7f3 ffb9 	bl	8000db4 <__aeabi_fmul>
 800ce42:	4601      	mov	r1, r0
 800ce44:	f7f3 feae 	bl	8000ba4 <__addsf3>
 800ce48:	4659      	mov	r1, fp
 800ce4a:	4680      	mov	r8, r0
 800ce4c:	4648      	mov	r0, r9
 800ce4e:	f7f3 ffb1 	bl	8000db4 <__aeabi_fmul>
 800ce52:	4601      	mov	r1, r0
 800ce54:	f7f3 fea6 	bl	8000ba4 <__addsf3>
 800ce58:	4684      	mov	ip, r0
 800ce5a:	4639      	mov	r1, r7
 800ce5c:	4648      	mov	r0, r9
 800ce5e:	46e1      	mov	r9, ip
 800ce60:	f7f3 ffa8 	bl	8000db4 <__aeabi_fmul>
 800ce64:	4601      	mov	r1, r0
 800ce66:	f7f3 fe9d 	bl	8000ba4 <__addsf3>
 800ce6a:	4684      	mov	ip, r0
 800ce6c:	4639      	mov	r1, r7
 800ce6e:	4658      	mov	r0, fp
 800ce70:	46e3      	mov	fp, ip
 800ce72:	f7f3 ff9f 	bl	8000db4 <__aeabi_fmul>
 800ce76:	4601      	mov	r1, r0
 800ce78:	f7f3 fe94 	bl	8000ba4 <__addsf3>
 800ce7c:	9a03      	ldr	r2, [sp, #12]
 800ce7e:	9003      	str	r0, [sp, #12]
 800ce80:	2a00      	cmp	r2, #0
 800ce82:	d13d      	bne.n	800cf00 <q2hpr+0x138>
 800ce84:	4630      	mov	r0, r6
 800ce86:	9901      	ldr	r1, [sp, #4]
 800ce88:	f7f3 fe8c 	bl	8000ba4 <__addsf3>
 800ce8c:	4601      	mov	r1, r0
 800ce8e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ce92:	f7f3 fe85 	bl	8000ba0 <__aeabi_fsub>
 800ce96:	4607      	mov	r7, r0
 800ce98:	9b03      	ldr	r3, [sp, #12]
 800ce9a:	9802      	ldr	r0, [sp, #8]
 800ce9c:	4619      	mov	r1, r3
 800ce9e:	f7f3 fe7f 	bl	8000ba0 <__aeabi_fsub>
 800cea2:	4639      	mov	r1, r7
 800cea4:	f00b fcc0 	bl	8018828 <atan2f>
 800cea8:	4649      	mov	r1, r9
 800ceaa:	6020      	str	r0, [r4, #0]
 800ceac:	4607      	mov	r7, r0
 800ceae:	4640      	mov	r0, r8
 800ceb0:	f7f3 fe78 	bl	8000ba4 <__addsf3>
 800ceb4:	f00b fc98 	bl	80187e8 <asinf>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	4629      	mov	r1, r5
 800cebc:	4630      	mov	r0, r6
 800cebe:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
 800cec2:	f7f3 fe6f 	bl	8000ba4 <__addsf3>
 800cec6:	4601      	mov	r1, r0
 800cec8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800cecc:	f7f3 fe68 	bl	8000ba0 <__aeabi_fsub>
 800ced0:	4606      	mov	r6, r0
 800ced2:	4659      	mov	r1, fp
 800ced4:	4650      	mov	r0, sl
 800ced6:	f7f3 fe63 	bl	8000ba0 <__aeabi_fsub>
 800ceda:	4631      	mov	r1, r6
 800cedc:	f00b fca4 	bl	8018828 <atan2f>
 800cee0:	4606      	mov	r6, r0
 800cee2:	2100      	movs	r1, #0
 800cee4:	4638      	mov	r0, r7
 800cee6:	60a6      	str	r6, [r4, #8]
 800cee8:	6065      	str	r5, [r4, #4]
 800ceea:	f7f4 f901 	bl	80010f0 <__aeabi_fcmplt>
 800ceee:	b120      	cbz	r0, 800cefa <q2hpr+0x132>
 800cef0:	4638      	mov	r0, r7
 800cef2:	491d      	ldr	r1, [pc, #116]	; (800cf68 <q2hpr+0x1a0>)
 800cef4:	f7f3 fe56 	bl	8000ba4 <__addsf3>
 800cef8:	6020      	str	r0, [r4, #0]
 800cefa:	b005      	add	sp, #20
 800cefc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf00:	4659      	mov	r1, fp
 800cf02:	4650      	mov	r0, sl
 800cf04:	f7f3 fe4c 	bl	8000ba0 <__aeabi_fsub>
 800cf08:	f00b fc6e 	bl	80187e8 <asinf>
 800cf0c:	4602      	mov	r2, r0
 800cf0e:	4629      	mov	r1, r5
 800cf10:	4630      	mov	r0, r6
 800cf12:	4616      	mov	r6, r2
 800cf14:	f7f3 fe46 	bl	8000ba4 <__addsf3>
 800cf18:	4601      	mov	r1, r0
 800cf1a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800cf1e:	f7f3 fe3f 	bl	8000ba0 <__aeabi_fsub>
 800cf22:	4649      	mov	r1, r9
 800cf24:	4681      	mov	r9, r0
 800cf26:	4640      	mov	r0, r8
 800cf28:	f7f3 fe3c 	bl	8000ba4 <__addsf3>
 800cf2c:	4649      	mov	r1, r9
 800cf2e:	f00b fc7b 	bl	8018828 <atan2f>
 800cf32:	4602      	mov	r2, r0
 800cf34:	9901      	ldr	r1, [sp, #4]
 800cf36:	4628      	mov	r0, r5
 800cf38:	f102 4500 	add.w	r5, r2, #2147483648	; 0x80000000
 800cf3c:	f7f3 fe32 	bl	8000ba4 <__addsf3>
 800cf40:	4601      	mov	r1, r0
 800cf42:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800cf46:	f7f3 fe2b 	bl	8000ba0 <__aeabi_fsub>
 800cf4a:	9b03      	ldr	r3, [sp, #12]
 800cf4c:	4607      	mov	r7, r0
 800cf4e:	4619      	mov	r1, r3
 800cf50:	9802      	ldr	r0, [sp, #8]
 800cf52:	f7f3 fe27 	bl	8000ba4 <__addsf3>
 800cf56:	4639      	mov	r1, r7
 800cf58:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800cf5c:	f00b fc64 	bl	8018828 <atan2f>
 800cf60:	4607      	mov	r7, r0
 800cf62:	6020      	str	r0, [r4, #0]
 800cf64:	e7bd      	b.n	800cee2 <q2hpr+0x11a>
 800cf66:	bf00      	nop
 800cf68:	40c90fdb 	.word	0x40c90fdb

0800cf6c <llEvaluate.constprop.0>:
 800cf6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf70:	4605      	mov	r5, r0
 800cf72:	b087      	sub	sp, #28
 800cf74:	6810      	ldr	r0, [r2, #0]
 800cf76:	4688      	mov	r8, r1
 800cf78:	6829      	ldr	r1, [r5, #0]
 800cf7a:	4614      	mov	r4, r2
 800cf7c:	f7f3 ffce 	bl	8000f1c <__aeabi_fdiv>
 800cf80:	6929      	ldr	r1, [r5, #16]
 800cf82:	4607      	mov	r7, r0
 800cf84:	9002      	str	r0, [sp, #8]
 800cf86:	f7f3 ff15 	bl	8000db4 <__aeabi_fmul>
 800cf8a:	4601      	mov	r1, r0
 800cf8c:	6860      	ldr	r0, [r4, #4]
 800cf8e:	f7f3 fe07 	bl	8000ba0 <__aeabi_fsub>
 800cf92:	6969      	ldr	r1, [r5, #20]
 800cf94:	f7f3 ffc2 	bl	8000f1c <__aeabi_fdiv>
 800cf98:	4606      	mov	r6, r0
 800cf9a:	6a29      	ldr	r1, [r5, #32]
 800cf9c:	4638      	mov	r0, r7
 800cf9e:	9603      	str	r6, [sp, #12]
 800cfa0:	f7f3 ff08 	bl	8000db4 <__aeabi_fmul>
 800cfa4:	4601      	mov	r1, r0
 800cfa6:	68a0      	ldr	r0, [r4, #8]
 800cfa8:	f7f3 fdfa 	bl	8000ba0 <__aeabi_fsub>
 800cfac:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800cfae:	4681      	mov	r9, r0
 800cfb0:	4630      	mov	r0, r6
 800cfb2:	f7f3 feff 	bl	8000db4 <__aeabi_fmul>
 800cfb6:	4601      	mov	r1, r0
 800cfb8:	4648      	mov	r0, r9
 800cfba:	f7f3 fdf1 	bl	8000ba0 <__aeabi_fsub>
 800cfbe:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800cfc0:	f7f3 ffac 	bl	8000f1c <__aeabi_fdiv>
 800cfc4:	4681      	mov	r9, r0
 800cfc6:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800cfc8:	4638      	mov	r0, r7
 800cfca:	f8cd 9010 	str.w	r9, [sp, #16]
 800cfce:	f7f3 fef1 	bl	8000db4 <__aeabi_fmul>
 800cfd2:	4601      	mov	r1, r0
 800cfd4:	68e0      	ldr	r0, [r4, #12]
 800cfd6:	f7f3 fde3 	bl	8000ba0 <__aeabi_fsub>
 800cfda:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800cfdc:	4604      	mov	r4, r0
 800cfde:	4630      	mov	r0, r6
 800cfe0:	f7f3 fee8 	bl	8000db4 <__aeabi_fmul>
 800cfe4:	4601      	mov	r1, r0
 800cfe6:	4620      	mov	r0, r4
 800cfe8:	f7f3 fdda 	bl	8000ba0 <__aeabi_fsub>
 800cfec:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800cfee:	4604      	mov	r4, r0
 800cff0:	4648      	mov	r0, r9
 800cff2:	f7f3 fedf 	bl	8000db4 <__aeabi_fmul>
 800cff6:	4601      	mov	r1, r0
 800cff8:	4620      	mov	r0, r4
 800cffa:	f7f3 fdd1 	bl	8000ba0 <__aeabi_fsub>
 800cffe:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 800d000:	f7f3 ff8c 	bl	8000f1c <__aeabi_fdiv>
 800d004:	46aa      	mov	sl, r5
 800d006:	2703      	movs	r7, #3
 800d008:	f04f 0904 	mov.w	r9, #4
 800d00c:	ab05      	add	r3, sp, #20
 800d00e:	9005      	str	r0, [sp, #20]
 800d010:	f108 0610 	add.w	r6, r8, #16
 800d014:	9301      	str	r3, [sp, #4]
 800d016:	9b01      	ldr	r3, [sp, #4]
 800d018:	f1b9 0f04 	cmp.w	r9, #4
 800d01c:	f853 b904 	ldr.w	fp, [r3], #-4
 800d020:	fa4f f489 	sxtb.w	r4, r9
 800d024:	9301      	str	r3, [sp, #4]
 800d026:	f846 bd04 	str.w	fp, [r6, #-4]!
 800d02a:	d025      	beq.n	800d078 <llEvaluate.constprop.0+0x10c>
 800d02c:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 800d030:	f852 0027 	ldr.w	r0, [r2, r7, lsl #2]
 800d034:	f858 1024 	ldr.w	r1, [r8, r4, lsl #2]
 800d038:	f7f3 febc 	bl	8000db4 <__aeabi_fmul>
 800d03c:	4601      	mov	r1, r0
 800d03e:	4658      	mov	r0, fp
 800d040:	f7f3 fdae 	bl	8000ba0 <__aeabi_fsub>
 800d044:	3401      	adds	r4, #1
 800d046:	b2e2      	uxtb	r2, r4
 800d048:	2a04      	cmp	r2, #4
 800d04a:	4683      	mov	fp, r0
 800d04c:	6030      	str	r0, [r6, #0]
 800d04e:	b264      	sxtb	r4, r4
 800d050:	d1ec      	bne.n	800d02c <llEvaluate.constprop.0+0xc0>
 800d052:	f8da 103c 	ldr.w	r1, [sl, #60]	; 0x3c
 800d056:	f7f3 ff61 	bl	8000f1c <__aeabi_fdiv>
 800d05a:	f017 0fff 	tst.w	r7, #255	; 0xff
 800d05e:	6030      	str	r0, [r6, #0]
 800d060:	d007      	beq.n	800d072 <llEvaluate.constprop.0+0x106>
 800d062:	f109 39ff 	add.w	r9, r9, #4294967295
 800d066:	fa5f f989 	uxtb.w	r9, r9
 800d06a:	f1aa 0a14 	sub.w	sl, sl, #20
 800d06e:	3f01      	subs	r7, #1
 800d070:	e7d1      	b.n	800d016 <llEvaluate.constprop.0+0xaa>
 800d072:	b007      	add	sp, #28
 800d074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d078:	f8da 103c 	ldr.w	r1, [sl, #60]	; 0x3c
 800d07c:	4658      	mov	r0, fp
 800d07e:	f7f3 ff4d 	bl	8000f1c <__aeabi_fdiv>
 800d082:	6030      	str	r0, [r6, #0]
 800d084:	e7ed      	b.n	800d062 <llEvaluate.constprop.0+0xf6>
 800d086:	bf00      	nop

0800d088 <MEMS_updateMagBufferIndex>:
 800d088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d08c:	4606      	mov	r6, r0
 800d08e:	2300      	movs	r3, #0
 800d090:	7800      	ldrb	r0, [r0, #0]
 800d092:	7877      	ldrb	r7, [r6, #1]
 800d094:	e9c6 3302 	strd	r3, r3, [r6, #8]
 800d098:	e9c6 3304 	strd	r3, r3, [r6, #16]
 800d09c:	e9c6 3306 	strd	r3, r3, [r6, #24]
 800d0a0:	f996 3002 	ldrsb.w	r3, [r6, #2]
 800d0a4:	42b8      	cmp	r0, r7
 800d0a6:	460d      	mov	r5, r1
 800d0a8:	f103 0301 	add.w	r3, r3, #1
 800d0ac:	d070      	beq.n	800d190 <MEMS_updateMagBufferIndex+0x108>
 800d0ae:	1a1b      	subs	r3, r3, r0
 800d0b0:	fb93 faf7 	sdiv	sl, r3, r7
 800d0b4:	fb07 331a 	mls	r3, r7, sl, r3
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	bfb6      	itet	lt
 800d0bc:	eb07 0a03 	addlt.w	sl, r7, r3
 800d0c0:	fa0f fa83 	sxthge.w	sl, r3
 800d0c4:	fa0f fa8a 	sxthlt.w	sl, sl
 800d0c8:	b918      	cbnz	r0, 800d0d2 <MEMS_updateMagBufferIndex+0x4a>
 800d0ca:	23ff      	movs	r3, #255	; 0xff
 800d0cc:	70b3      	strb	r3, [r6, #2]
 800d0ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0d2:	4611      	mov	r1, r2
 800d0d4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d0d8:	f7f3 ff20 	bl	8000f1c <__aeabi_fdiv>
 800d0dc:	f04f 0900 	mov.w	r9, #0
 800d0e0:	4680      	mov	r8, r0
 800d0e2:	464b      	mov	r3, r9
 800d0e4:	e000      	b.n	800d0e8 <MEMS_updateMagBufferIndex+0x60>
 800d0e6:	7877      	ldrb	r7, [r6, #1]
 800d0e8:	4453      	add	r3, sl
 800d0ea:	fb93 f4f7 	sdiv	r4, r3, r7
 800d0ee:	fb07 3314 	mls	r3, r7, r4, r3
 800d0f2:	b2dc      	uxtb	r4, r3
 800d0f4:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 800d0f8:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 800d0fc:	f109 0901 	add.w	r9, r9, #1
 800d100:	fb93 f0f5 	sdiv	r0, r3, r5
 800d104:	fb05 3010 	mls	r0, r5, r0, r3
 800d108:	2800      	cmp	r0, #0
 800d10a:	bfb8      	it	lt
 800d10c:	1940      	addlt	r0, r0, r5
 800d10e:	b200      	sxth	r0, r0
 800d110:	f7f3 fdfc 	bl	8000d0c <__aeabi_i2f>
 800d114:	4641      	mov	r1, r8
 800d116:	f7f3 fe4d 	bl	8000db4 <__aeabi_fmul>
 800d11a:	f00b fa99 	bl	8018650 <roundf>
 800d11e:	f7f4 f84b 	bl	80011b8 <__aeabi_f2uiz>
 800d122:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
 800d126:	b2c7      	uxtb	r7, r0
 800d128:	fb92 f3f5 	sdiv	r3, r2, r5
 800d12c:	fb05 2313 	mls	r3, r5, r3, r2
 800d130:	2b00      	cmp	r3, #0
 800d132:	bfb8      	it	lt
 800d134:	195b      	addlt	r3, r3, r5
 800d136:	b218      	sxth	r0, r3
 800d138:	f7f3 fde8 	bl	8000d0c <__aeabi_i2f>
 800d13c:	4641      	mov	r1, r8
 800d13e:	f7f3 fe39 	bl	8000db4 <__aeabi_fmul>
 800d142:	f00b fa85 	bl	8018650 <roundf>
 800d146:	f7f4 f837 	bl	80011b8 <__aeabi_f2uiz>
 800d14a:	f9b4 1026 	ldrsh.w	r1, [r4, #38]	; 0x26
 800d14e:	b2c4      	uxtb	r4, r0
 800d150:	fb91 f3f5 	sdiv	r3, r1, r5
 800d154:	fb05 1313 	mls	r3, r5, r3, r1
 800d158:	2b00      	cmp	r3, #0
 800d15a:	eb05 0203 	add.w	r2, r5, r3
 800d15e:	b218      	sxth	r0, r3
 800d160:	bfb8      	it	lt
 800d162:	b210      	sxthlt	r0, r2
 800d164:	f7f3 fdd2 	bl	8000d0c <__aeabi_i2f>
 800d168:	4641      	mov	r1, r8
 800d16a:	f7f3 fe23 	bl	8000db4 <__aeabi_fmul>
 800d16e:	f00b fa6f 	bl	8018650 <roundf>
 800d172:	f7f4 f821 	bl	80011b8 <__aeabi_f2uiz>
 800d176:	4622      	mov	r2, r4
 800d178:	b2c3      	uxtb	r3, r0
 800d17a:	4639      	mov	r1, r7
 800d17c:	4630      	mov	r0, r6
 800d17e:	f7ff fc17 	bl	800c9b0 <MEMS_setMagIndexToOne>
 800d182:	7832      	ldrb	r2, [r6, #0]
 800d184:	fa5f f389 	uxtb.w	r3, r9
 800d188:	429a      	cmp	r2, r3
 800d18a:	d8ac      	bhi.n	800d0e6 <MEMS_updateMagBufferIndex+0x5e>
 800d18c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d190:	fb93 faf0 	sdiv	sl, r3, r0
 800d194:	fb00 331a 	mls	r3, r0, sl, r3
 800d198:	fa0f fa83 	sxth.w	sl, r3
 800d19c:	e794      	b.n	800d0c8 <MEMS_updateMagBufferIndex+0x40>
 800d19e:	bf00      	nop

0800d1a0 <getMagStats.constprop.0>:
 800d1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1a4:	b08b      	sub	sp, #44	; 0x2c
 800d1a6:	4605      	mov	r5, r0
 800d1a8:	9003      	str	r0, [sp, #12]
 800d1aa:	460c      	mov	r4, r1
 800d1ac:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d1b0:	4619      	mov	r1, r3
 800d1b2:	9308      	str	r3, [sp, #32]
 800d1b4:	4616      	mov	r6, r2
 800d1b6:	f7f3 feb1 	bl	8000f1c <__aeabi_fdiv>
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 800d1c0:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 800d1c4:	f8ca 3000 	str.w	r3, [sl]
 800d1c8:	f8c9 3000 	str.w	r3, [r9]
 800d1cc:	782f      	ldrb	r7, [r5, #0]
 800d1ce:	f895 8001 	ldrb.w	r8, [r5, #1]
 800d1d2:	f995 3002 	ldrsb.w	r3, [r5, #2]
 800d1d6:	4547      	cmp	r7, r8
 800d1d8:	4683      	mov	fp, r0
 800d1da:	f103 0301 	add.w	r3, r3, #1
 800d1de:	f000 80bb 	beq.w	800d358 <getMagStats.constprop.0+0x1b8>
 800d1e2:	1bdb      	subs	r3, r3, r7
 800d1e4:	fb93 f5f8 	sdiv	r5, r3, r8
 800d1e8:	fb08 3315 	mls	r3, r8, r5, r3
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	bfb8      	it	lt
 800d1f0:	4443      	addlt	r3, r8
 800d1f2:	9709      	str	r7, [sp, #36]	; 0x24
 800d1f4:	b21d      	sxth	r5, r3
 800d1f6:	495e      	ldr	r1, [pc, #376]	; (800d370 <getMagStats.constprop.0+0x1d0>)
 800d1f8:	4658      	mov	r0, fp
 800d1fa:	f7f3 fddb 	bl	8000db4 <__aeabi_fmul>
 800d1fe:	4603      	mov	r3, r0
 800d200:	495c      	ldr	r1, [pc, #368]	; (800d374 <getMagStats.constprop.0+0x1d4>)
 800d202:	4658      	mov	r0, fp
 800d204:	9301      	str	r3, [sp, #4]
 800d206:	f7f3 fdd5 	bl	8000db4 <__aeabi_fmul>
 800d20a:	9002      	str	r0, [sp, #8]
 800d20c:	2f00      	cmp	r7, #0
 800d20e:	f000 80ab 	beq.w	800d368 <getMagStats.constprop.0+0x1c8>
 800d212:	1e79      	subs	r1, r7, #1
 800d214:	2200      	movs	r2, #0
 800d216:	2700      	movs	r7, #0
 800d218:	8823      	ldrh	r3, [r4, #0]
 800d21a:	b2c9      	uxtb	r1, r1
 800d21c:	9304      	str	r3, [sp, #16]
 800d21e:	8863      	ldrh	r3, [r4, #2]
 800d220:	9700      	str	r7, [sp, #0]
 800d222:	9305      	str	r3, [sp, #20]
 800d224:	88a3      	ldrh	r3, [r4, #4]
 800d226:	462f      	mov	r7, r5
 800d228:	9306      	str	r3, [sp, #24]
 800d22a:	194b      	adds	r3, r1, r5
 800d22c:	4693      	mov	fp, r2
 800d22e:	9307      	str	r3, [sp, #28]
 800d230:	e002      	b.n	800d238 <getMagStats.constprop.0+0x98>
 800d232:	f8d9 b000 	ldr.w	fp, [r9]
 800d236:	3701      	adds	r7, #1
 800d238:	fb97 f4f8 	sdiv	r4, r7, r8
 800d23c:	fb08 7414 	mls	r4, r8, r4, r7
 800d240:	9b03      	ldr	r3, [sp, #12]
 800d242:	b2e4      	uxtb	r4, r4
 800d244:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800d248:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 800d24a:	9b04      	ldr	r3, [sp, #16]
 800d24c:	1ac0      	subs	r0, r0, r3
 800d24e:	b200      	sxth	r0, r0
 800d250:	f7f3 fd5c 	bl	8000d0c <__aeabi_i2f>
 800d254:	6831      	ldr	r1, [r6, #0]
 800d256:	f7f3 fdad 	bl	8000db4 <__aeabi_fmul>
 800d25a:	f7f3 ff87 	bl	800116c <__aeabi_f2iz>
 800d25e:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 800d260:	9b05      	ldr	r3, [sp, #20]
 800d262:	b205      	sxth	r5, r0
 800d264:	1ac8      	subs	r0, r1, r3
 800d266:	b200      	sxth	r0, r0
 800d268:	f7f3 fd50 	bl	8000d0c <__aeabi_i2f>
 800d26c:	6931      	ldr	r1, [r6, #16]
 800d26e:	f7f3 fda1 	bl	8000db4 <__aeabi_fmul>
 800d272:	f7f3 ff7b 	bl	800116c <__aeabi_f2iz>
 800d276:	9b06      	ldr	r3, [sp, #24]
 800d278:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 800d27a:	b204      	sxth	r4, r0
 800d27c:	1ac8      	subs	r0, r1, r3
 800d27e:	b200      	sxth	r0, r0
 800d280:	f7f3 fd44 	bl	8000d0c <__aeabi_i2f>
 800d284:	6a31      	ldr	r1, [r6, #32]
 800d286:	f7f3 fd95 	bl	8000db4 <__aeabi_fmul>
 800d28a:	f7f3 ff6f 	bl	800116c <__aeabi_f2iz>
 800d28e:	fb04 f404 	mul.w	r4, r4, r4
 800d292:	fb05 4505 	mla	r5, r5, r5, r4
 800d296:	b200      	sxth	r0, r0
 800d298:	fb00 5000 	mla	r0, r0, r0, r5
 800d29c:	f7f3 fd36 	bl	8000d0c <__aeabi_i2f>
 800d2a0:	f00b fac4 	bl	801882c <sqrtf>
 800d2a4:	f7f3 ff62 	bl	800116c <__aeabi_f2iz>
 800d2a8:	b200      	sxth	r0, r0
 800d2aa:	f7f3 fd2f 	bl	8000d0c <__aeabi_i2f>
 800d2ae:	4659      	mov	r1, fp
 800d2b0:	4604      	mov	r4, r0
 800d2b2:	f7f3 fc77 	bl	8000ba4 <__addsf3>
 800d2b6:	4602      	mov	r2, r0
 800d2b8:	9901      	ldr	r1, [sp, #4]
 800d2ba:	f8c9 2000 	str.w	r2, [r9]
 800d2be:	4620      	mov	r0, r4
 800d2c0:	f7f3 fc6e 	bl	8000ba0 <__aeabi_fsub>
 800d2c4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800d2c8:	f7f3 ff50 	bl	800116c <__aeabi_f2iz>
 800d2cc:	b204      	sxth	r4, r0
 800d2ce:	4620      	mov	r0, r4
 800d2d0:	f7f3 fd1c 	bl	8000d0c <__aeabi_i2f>
 800d2d4:	4601      	mov	r1, r0
 800d2d6:	9802      	ldr	r0, [sp, #8]
 800d2d8:	f7f3 ff0a 	bl	80010f0 <__aeabi_fcmplt>
 800d2dc:	4602      	mov	r2, r0
 800d2de:	fb04 f004 	mul.w	r0, r4, r4
 800d2e2:	b11a      	cbz	r2, 800d2ec <getMagStats.constprop.0+0x14c>
 800d2e4:	9a00      	ldr	r2, [sp, #0]
 800d2e6:	3201      	adds	r2, #1
 800d2e8:	b2d3      	uxtb	r3, r2
 800d2ea:	9300      	str	r3, [sp, #0]
 800d2ec:	f7f3 fd0e 	bl	8000d0c <__aeabi_i2f>
 800d2f0:	f8da 1000 	ldr.w	r1, [sl]
 800d2f4:	f7f3 fc56 	bl	8000ba4 <__addsf3>
 800d2f8:	9b07      	ldr	r3, [sp, #28]
 800d2fa:	f8ca 0000 	str.w	r0, [sl]
 800d2fe:	42bb      	cmp	r3, r7
 800d300:	d197      	bne.n	800d232 <getMagStats.constprop.0+0x92>
 800d302:	4604      	mov	r4, r0
 800d304:	9f00      	ldr	r7, [sp, #0]
 800d306:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d308:	f7f3 fd00 	bl	8000d0c <__aeabi_i2f>
 800d30c:	4601      	mov	r1, r0
 800d30e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d312:	f7f3 fe03 	bl	8000f1c <__aeabi_fdiv>
 800d316:	4621      	mov	r1, r4
 800d318:	4605      	mov	r5, r0
 800d31a:	f7f3 fd4b 	bl	8000db4 <__aeabi_fmul>
 800d31e:	f00b fa85 	bl	801882c <sqrtf>
 800d322:	4601      	mov	r1, r0
 800d324:	9808      	ldr	r0, [sp, #32]
 800d326:	f7f3 fd45 	bl	8000db4 <__aeabi_fmul>
 800d32a:	4913      	ldr	r1, [pc, #76]	; (800d378 <getMagStats.constprop.0+0x1d8>)
 800d32c:	4604      	mov	r4, r0
 800d32e:	f7f3 fef3 	bl	8001118 <__aeabi_fcmpge>
 800d332:	b900      	cbnz	r0, 800d336 <getMagStats.constprop.0+0x196>
 800d334:	4c10      	ldr	r4, [pc, #64]	; (800d378 <getMagStats.constprop.0+0x1d8>)
 800d336:	f8ca 4000 	str.w	r4, [sl]
 800d33a:	f8d9 1000 	ldr.w	r1, [r9]
 800d33e:	9808      	ldr	r0, [sp, #32]
 800d340:	f7f3 fd38 	bl	8000db4 <__aeabi_fmul>
 800d344:	4629      	mov	r1, r5
 800d346:	f7f3 fd35 	bl	8000db4 <__aeabi_fmul>
 800d34a:	4603      	mov	r3, r0
 800d34c:	4638      	mov	r0, r7
 800d34e:	f8c9 3000 	str.w	r3, [r9]
 800d352:	b00b      	add	sp, #44	; 0x2c
 800d354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d358:	fb93 f5f7 	sdiv	r5, r3, r7
 800d35c:	fb07 3315 	mls	r3, r7, r5, r3
 800d360:	46b8      	mov	r8, r7
 800d362:	b21d      	sxth	r5, r3
 800d364:	9709      	str	r7, [sp, #36]	; 0x24
 800d366:	e746      	b.n	800d1f6 <getMagStats.constprop.0+0x56>
 800d368:	f8da 4000 	ldr.w	r4, [sl]
 800d36c:	e7cb      	b.n	800d306 <getMagStats.constprop.0+0x166>
 800d36e:	bf00      	nop
 800d370:	423c0000 	.word	0x423c0000
 800d374:	41f00000 	.word	0x41f00000
 800d378:	3f59999a 	.word	0x3f59999a

0800d37c <MFX_emptyAttitude>:
 800d37c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d380:	f04f 0900 	mov.w	r9, #0
 800d384:	f04f 0c00 	mov.w	ip, #0
 800d388:	f04f 0b00 	mov.w	fp, #0
 800d38c:	f8df 85e0 	ldr.w	r8, [pc, #1504]	; 800d970 <MFX_emptyAttitude+0x5f4>
 800d390:	f6ad 6d44 	subw	sp, sp, #3652	; 0xe44
 800d394:	f838 3b04 	ldrh.w	r3, [r8], #4
 800d398:	f88d 96ba 	strb.w	r9, [sp, #1722]	; 0x6ba
 800d39c:	f8ad 36b8 	strh.w	r3, [sp, #1720]	; 0x6b8
 800d3a0:	f60d 0a28 	addw	sl, sp, #2088	; 0x828
 800d3a4:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 800d3a8:	e9ca 9900 	strd	r9, r9, [sl]
 800d3ac:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 800d3b0:	0c1b      	lsrs	r3, r3, #16
 800d3b2:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 800d3b6:	f8ca 9008 	str.w	r9, [sl, #8]
 800d3ba:	ab2b      	add	r3, sp, #172	; 0xac
 800d3bc:	4604      	mov	r4, r0
 800d3be:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 800d3c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d3c6:	ab2e      	add	r3, sp, #184	; 0xb8
 800d3c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d3cc:	ab31      	add	r3, sp, #196	; 0xc4
 800d3ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d3d2:	ab34      	add	r3, sp, #208	; 0xd0
 800d3d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d3d8:	ab37      	add	r3, sp, #220	; 0xdc
 800d3da:	f50d 66d7 	add.w	r6, sp, #1720	; 0x6b8
 800d3de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d3e2:	ab3a      	add	r3, sp, #232	; 0xe8
 800d3e4:	e9cd bc26 	strd	fp, ip, [sp, #152]	; 0x98
 800d3e8:	e9cd bc28 	strd	fp, ip, [sp, #160]	; 0xa0
 800d3ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d3f0:	4630      	mov	r0, r6
 800d3f2:	2224      	movs	r2, #36	; 0x24
 800d3f4:	f00a fb7a 	bl	8017aec <memset>
 800d3f8:	4649      	mov	r1, r9
 800d3fa:	4650      	mov	r0, sl
 800d3fc:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800d400:	f00a fb74 	bl	8017aec <memset>
 800d404:	6833      	ldr	r3, [r6, #0]
 800d406:	f44f 75b4 	mov.w	r5, #360	; 0x168
 800d40a:	930c      	str	r3, [sp, #48]	; 0x30
 800d40c:	9340      	str	r3, [sp, #256]	; 0x100
 800d40e:	2300      	movs	r3, #0
 800d410:	f44f 57f0 	mov.w	r7, #7680	; 0x1e00
 800d414:	f8df b55c 	ldr.w	fp, [pc, #1372]	; 800d974 <MFX_emptyAttitude+0x5f8>
 800d418:	6872      	ldr	r2, [r6, #4]
 800d41a:	68b1      	ldr	r1, [r6, #8]
 800d41c:	9208      	str	r2, [sp, #32]
 800d41e:	9241      	str	r2, [sp, #260]	; 0x104
 800d420:	910a      	str	r1, [sp, #40]	; 0x28
 800d422:	9142      	str	r1, [sp, #264]	; 0x108
 800d424:	934a      	str	r3, [sp, #296]	; 0x128
 800d426:	934b      	str	r3, [sp, #300]	; 0x12c
 800d428:	934c      	str	r3, [sp, #304]	; 0x130
 800d42a:	934d      	str	r3, [sp, #308]	; 0x134
 800d42c:	934e      	str	r3, [sp, #312]	; 0x138
 800d42e:	934f      	str	r3, [sp, #316]	; 0x13c
 800d430:	9350      	str	r3, [sp, #320]	; 0x140
 800d432:	9351      	str	r3, [sp, #324]	; 0x144
 800d434:	9352      	str	r3, [sp, #328]	; 0x148
 800d436:	9354      	str	r3, [sp, #336]	; 0x150
 800d438:	9355      	str	r3, [sp, #340]	; 0x154
 800d43a:	9356      	str	r3, [sp, #344]	; 0x158
 800d43c:	9357      	str	r3, [sp, #348]	; 0x15c
 800d43e:	9358      	str	r3, [sp, #352]	; 0x160
 800d440:	9359      	str	r3, [sp, #356]	; 0x164
 800d442:	935a      	str	r3, [sp, #360]	; 0x168
 800d444:	935b      	str	r3, [sp, #364]	; 0x16c
 800d446:	935c      	str	r3, [sp, #368]	; 0x170
 800d448:	935e      	str	r3, [sp, #376]	; 0x178
 800d44a:	935f      	str	r3, [sp, #380]	; 0x17c
 800d44c:	f8cd b124 	str.w	fp, [sp, #292]	; 0x124
 800d450:	f8cd b14c 	str.w	fp, [sp, #332]	; 0x14c
 800d454:	f8cd b174 	str.w	fp, [sp, #372]	; 0x174
 800d458:	9360      	str	r3, [sp, #384]	; 0x180
 800d45a:	68f0      	ldr	r0, [r6, #12]
 800d45c:	6932      	ldr	r2, [r6, #16]
 800d45e:	6971      	ldr	r1, [r6, #20]
 800d460:	9361      	str	r3, [sp, #388]	; 0x184
 800d462:	9362      	str	r3, [sp, #392]	; 0x188
 800d464:	9363      	str	r3, [sp, #396]	; 0x18c
 800d466:	900b      	str	r0, [sp, #44]	; 0x2c
 800d468:	9043      	str	r0, [sp, #268]	; 0x10c
 800d46a:	9209      	str	r2, [sp, #36]	; 0x24
 800d46c:	9244      	str	r2, [sp, #272]	; 0x110
 800d46e:	9104      	str	r1, [sp, #16]
 800d470:	9145      	str	r1, [sp, #276]	; 0x114
 800d472:	9364      	str	r3, [sp, #400]	; 0x190
 800d474:	9365      	str	r3, [sp, #404]	; 0x194
 800d476:	9366      	str	r3, [sp, #408]	; 0x198
 800d478:	9368      	str	r3, [sp, #416]	; 0x1a0
 800d47a:	9369      	str	r3, [sp, #420]	; 0x1a4
 800d47c:	936a      	str	r3, [sp, #424]	; 0x1a8
 800d47e:	936b      	str	r3, [sp, #428]	; 0x1ac
 800d480:	936c      	str	r3, [sp, #432]	; 0x1b0
 800d482:	936d      	str	r3, [sp, #436]	; 0x1b4
 800d484:	936e      	str	r3, [sp, #440]	; 0x1b8
 800d486:	936f      	str	r3, [sp, #444]	; 0x1bc
 800d488:	9370      	str	r3, [sp, #448]	; 0x1c0
 800d48a:	9372      	str	r3, [sp, #456]	; 0x1c8
 800d48c:	9373      	str	r3, [sp, #460]	; 0x1cc
 800d48e:	9374      	str	r3, [sp, #464]	; 0x1d0
 800d490:	9375      	str	r3, [sp, #468]	; 0x1d4
 800d492:	9376      	str	r3, [sp, #472]	; 0x1d8
 800d494:	f8cd b19c 	str.w	fp, [sp, #412]	; 0x19c
 800d498:	f8cd b1c4 	str.w	fp, [sp, #452]	; 0x1c4
 800d49c:	f8cd b1ec 	str.w	fp, [sp, #492]	; 0x1ec
 800d4a0:	9377      	str	r3, [sp, #476]	; 0x1dc
 800d4a2:	69b0      	ldr	r0, [r6, #24]
 800d4a4:	69f2      	ldr	r2, [r6, #28]
 800d4a6:	6a31      	ldr	r1, [r6, #32]
 800d4a8:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800d4ac:	9378      	str	r3, [sp, #480]	; 0x1e0
 800d4ae:	9379      	str	r3, [sp, #484]	; 0x1e4
 800d4b0:	937a      	str	r3, [sp, #488]	; 0x1e8
 800d4b2:	937c      	str	r3, [sp, #496]	; 0x1f0
 800d4b4:	937d      	str	r3, [sp, #500]	; 0x1f4
 800d4b6:	937e      	str	r3, [sp, #504]	; 0x1f8
 800d4b8:	9007      	str	r0, [sp, #28]
 800d4ba:	9046      	str	r0, [sp, #280]	; 0x118
 800d4bc:	9206      	str	r2, [sp, #24]
 800d4be:	9247      	str	r2, [sp, #284]	; 0x11c
 800d4c0:	9105      	str	r1, [sp, #20]
 800d4c2:	9148      	str	r1, [sp, #288]	; 0x120
 800d4c4:	937f      	str	r3, [sp, #508]	; 0x1fc
 800d4c6:	9380      	str	r3, [sp, #512]	; 0x200
 800d4c8:	9381      	str	r3, [sp, #516]	; 0x204
 800d4ca:	9382      	str	r3, [sp, #520]	; 0x208
 800d4cc:	9383      	str	r3, [sp, #524]	; 0x20c
 800d4ce:	9384      	str	r3, [sp, #528]	; 0x210
 800d4d0:	9386      	str	r3, [sp, #536]	; 0x218
 800d4d2:	9387      	str	r3, [sp, #540]	; 0x21c
 800d4d4:	9388      	str	r3, [sp, #544]	; 0x220
 800d4d6:	9389      	str	r3, [sp, #548]	; 0x224
 800d4d8:	938a      	str	r3, [sp, #552]	; 0x228
 800d4da:	938b      	str	r3, [sp, #556]	; 0x22c
 800d4dc:	938c      	str	r3, [sp, #560]	; 0x230
 800d4de:	938d      	str	r3, [sp, #564]	; 0x234
 800d4e0:	938e      	str	r3, [sp, #568]	; 0x238
 800d4e2:	f8cd b214 	str.w	fp, [sp, #532]	; 0x214
 800d4e6:	f8cd b23c 	str.w	fp, [sp, #572]	; 0x23c
 800d4ea:	9390      	str	r3, [sp, #576]	; 0x240
 800d4ec:	9391      	str	r3, [sp, #580]	; 0x244
 800d4ee:	9392      	str	r3, [sp, #584]	; 0x248
 800d4f0:	9393      	str	r3, [sp, #588]	; 0x24c
 800d4f2:	9394      	str	r3, [sp, #592]	; 0x250
 800d4f4:	9395      	str	r3, [sp, #596]	; 0x254
 800d4f6:	9396      	str	r3, [sp, #600]	; 0x258
 800d4f8:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800d4fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d500:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800d504:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d508:	f8d8 3000 	ldr.w	r3, [r8]
 800d50c:	4649      	mov	r1, r9
 800d50e:	462a      	mov	r2, r5
 800d510:	4650      	mov	r0, sl
 800d512:	f8cc 3000 	str.w	r3, [ip]
 800d516:	f00a fae9 	bl	8017aec <memset>
 800d51a:	462a      	mov	r2, r5
 800d51c:	4651      	mov	r1, sl
 800d51e:	a89c      	add	r0, sp, #624	; 0x270
 800d520:	f8ad 7268 	strh.w	r7, [sp, #616]	; 0x268
 800d524:	f00a fad4 	bl	8017ad0 <memcpy>
 800d528:	f04f 5e7e 	mov.w	lr, #1065353216	; 0x3f800000
 800d52c:	46f0      	mov	r8, lr
 800d52e:	462a      	mov	r2, r5
 800d530:	4649      	mov	r1, r9
 800d532:	4650      	mov	r0, sl
 800d534:	f8cd e26c 	str.w	lr, [sp, #620]	; 0x26c
 800d538:	f00a fad8 	bl	8017aec <memset>
 800d53c:	462a      	mov	r2, r5
 800d53e:	4651      	mov	r1, sl
 800d540:	a8f8      	add	r0, sp, #992	; 0x3e0
 800d542:	f8ad 73d8 	strh.w	r7, [sp, #984]	; 0x3d8
 800d546:	f00a fac3 	bl	8017ad0 <memcpy>
 800d54a:	f8cd 83dc 	str.w	r8, [sp, #988]	; 0x3dc
 800d54e:	462a      	mov	r2, r5
 800d550:	f50d 68a9 	add.w	r8, sp, #1352	; 0x548
 800d554:	4649      	mov	r1, r9
 800d556:	4650      	mov	r0, sl
 800d558:	f00a fac8 	bl	8017aec <memset>
 800d55c:	462a      	mov	r2, r5
 800d55e:	4651      	mov	r1, sl
 800d560:	f8a8 7000 	strh.w	r7, [r8]
 800d564:	f50d 60aa 	add.w	r0, sp, #1360	; 0x550
 800d568:	f00a fab2 	bl	8017ad0 <memcpy>
 800d56c:	f04f 5e7e 	mov.w	lr, #1065353216	; 0x3f800000
 800d570:	462a      	mov	r2, r5
 800d572:	4649      	mov	r1, r9
 800d574:	4650      	mov	r0, sl
 800d576:	f8c8 e004 	str.w	lr, [r8, #4]
 800d57a:	f00a fab7 	bl	8017aec <memset>
 800d57e:	462a      	mov	r2, r5
 800d580:	4651      	mov	r1, sl
 800d582:	8037      	strh	r7, [r6, #0]
 800d584:	f50d 60d8 	add.w	r0, sp, #1728	; 0x6c0
 800d588:	f00a faa2 	bl	8017ad0 <memcpy>
 800d58c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d590:	af1a      	add	r7, sp, #104	; 0x68
 800d592:	e9cd 6701 	strd	r6, r7, [sp, #4]
 800d596:	f8cd 8000 	str.w	r8, [sp]
 800d59a:	f8cd a00c 	str.w	sl, [sp, #12]
 800d59e:	6070      	str	r0, [r6, #4]
 800d5a0:	f04f 0601 	mov.w	r6, #1
 800d5a4:	2500      	movs	r5, #0
 800d5a6:	f88d 6068 	strb.w	r6, [sp, #104]	; 0x68
 800d5aa:	f8df e3cc 	ldr.w	lr, [pc, #972]	; 800d978 <MFX_emptyAttitude+0x5fc>
 800d5ae:	4ee5      	ldr	r6, [pc, #916]	; (800d944 <MFX_emptyAttitude+0x5c8>)
 800d5b0:	f8df c3c8 	ldr.w	ip, [pc, #968]	; 800d97c <MFX_emptyAttitude+0x600>
 800d5b4:	9620      	str	r6, [sp, #128]	; 0x80
 800d5b6:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
 800d5ba:	f8df 83c4 	ldr.w	r8, [pc, #964]	; 800d980 <MFX_emptyAttitude+0x604>
 800d5be:	f8df e3c4 	ldr.w	lr, [pc, #964]	; 800d984 <MFX_emptyAttitude+0x608>
 800d5c2:	4ee1      	ldr	r6, [pc, #900]	; (800d948 <MFX_emptyAttitude+0x5cc>)
 800d5c4:	abf6      	add	r3, sp, #984	; 0x3d8
 800d5c6:	aa9a      	add	r2, sp, #616	; 0x268
 800d5c8:	a911      	add	r1, sp, #68	; 0x44
 800d5ca:	af3a      	add	r7, sp, #232	; 0xe8
 800d5cc:	2001      	movs	r0, #1
 800d5ce:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
 800d5d2:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800d5d6:	961e      	str	r6, [sp, #120]	; 0x78
 800d5d8:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
 800d5dc:	9521      	str	r5, [sp, #132]	; 0x84
 800d5de:	9522      	str	r5, [sp, #136]	; 0x88
 800d5e0:	9523      	str	r5, [sp, #140]	; 0x8c
 800d5e2:	9524      	str	r5, [sp, #144]	; 0x90
 800d5e4:	9525      	str	r5, [sp, #148]	; 0x94
 800d5e6:	f7fe fe03 	bl	800c1f0 <DataHist_parameters>
 800d5ea:	970e      	str	r7, [sp, #56]	; 0x38
 800d5ec:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
 800d5f0:	2600      	movs	r6, #0
 800d5f2:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 800d5f6:	60a7      	str	r7, [r4, #8]
 800d5f8:	6127      	str	r7, [r4, #16]
 800d5fa:	2700      	movs	r7, #0
 800d5fc:	4643      	mov	r3, r8
 800d5fe:	e9c4 6716 	strd	r6, r7, [r4, #88]	; 0x58
 800d602:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d604:	e9c4 6718 	strd	r6, r7, [r4, #96]	; 0x60
 800d608:	e9c4 671a 	strd	r6, r7, [r4, #104]	; 0x68
 800d60c:	4ecf      	ldr	r6, [pc, #828]	; (800d94c <MFX_emptyAttitude+0x5d0>)
 800d60e:	6760      	str	r0, [r4, #116]	; 0x74
 800d610:	67a1      	str	r1, [r4, #120]	; 0x78
 800d612:	67e2      	str	r2, [r4, #124]	; 0x7c
 800d614:	6166      	str	r6, [r4, #20]
 800d616:	f8bd 60a8 	ldrh.w	r6, [sp, #168]	; 0xa8
 800d61a:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 800d61e:	4637      	mov	r7, r6
 800d620:	4ecb      	ldr	r6, [pc, #812]	; (800d950 <MFX_emptyAttitude+0x5d4>)
 800d622:	49cc      	ldr	r1, [pc, #816]	; (800d954 <MFX_emptyAttitude+0x5d8>)
 800d624:	61e6      	str	r6, [r4, #28]
 800d626:	4ecc      	ldr	r6, [pc, #816]	; (800d958 <MFX_emptyAttitude+0x5dc>)
 800d628:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 800d62c:	6226      	str	r6, [r4, #32]
 800d62e:	4ecb      	ldr	r6, [pc, #812]	; (800d95c <MFX_emptyAttitude+0x5e0>)
 800d630:	62e1      	str	r1, [r4, #44]	; 0x2c
 800d632:	6266      	str	r6, [r4, #36]	; 0x24
 800d634:	f504 7646 	add.w	r6, r4, #792	; 0x318
 800d638:	960f      	str	r6, [sp, #60]	; 0x3c
 800d63a:	4ec9      	ldr	r6, [pc, #804]	; (800d960 <MFX_emptyAttitude+0x5e4>)
 800d63c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d63e:	6326      	str	r6, [r4, #48]	; 0x30
 800d640:	4ec8      	ldr	r6, [pc, #800]	; (800d964 <MFX_emptyAttitude+0x5e8>)
 800d642:	4ac9      	ldr	r2, [pc, #804]	; (800d968 <MFX_emptyAttitude+0x5ec>)
 800d644:	6366      	str	r6, [r4, #52]	; 0x34
 800d646:	460e      	mov	r6, r1
 800d648:	60e2      	str	r2, [r4, #12]
 800d64a:	f89d 20aa 	ldrb.w	r2, [sp, #170]	; 0xaa
 800d64e:	48c7      	ldr	r0, [pc, #796]	; (800d96c <MFX_emptyAttitude+0x5f0>)
 800d650:	f8a4 7070 	strh.w	r7, [r4, #112]	; 0x70
 800d654:	f884 2072 	strb.w	r2, [r4, #114]	; 0x72
 800d658:	62a0      	str	r0, [r4, #40]	; 0x28
 800d65a:	ce07      	ldmia	r6!, {r0, r1, r2}
 800d65c:	f240 1601 	movw	r6, #257	; 0x101
 800d660:	f10d 08c4 	add.w	r8, sp, #196	; 0xc4
 800d664:	4643      	mov	r3, r8
 800d666:	f10d 08d0 	add.w	r8, sp, #208	; 0xd0
 800d66a:	46c6      	mov	lr, r8
 800d66c:	f240 1701 	movw	r7, #257	; 0x101
 800d670:	f8df 8314 	ldr.w	r8, [pc, #788]	; 800d988 <MFX_emptyAttitude+0x60c>
 800d674:	f10d 0cdc 	add.w	ip, sp, #220	; 0xdc
 800d678:	f8c4 8018 	str.w	r8, [r4, #24]
 800d67c:	f8df 830c 	ldr.w	r8, [pc, #780]	; 800d98c <MFX_emptyAttitude+0x610>
 800d680:	6026      	str	r6, [r4, #0]
 800d682:	f8c4 8194 	str.w	r8, [r4, #404]	; 0x194
 800d686:	f04f 587c 	mov.w	r8, #1056964608	; 0x3f000000
 800d68a:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
 800d68e:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
 800d692:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
 800d696:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d698:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
 800d69c:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
 800d6a0:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
 800d6a4:	e8be 0007 	ldmia.w	lr!, {r0, r1, r2}
 800d6a8:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
 800d6ac:	f8c4 109c 	str.w	r1, [r4, #156]	; 0x9c
 800d6b0:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
 800d6b4:	e8bc 0007 	ldmia.w	ip!, {r0, r1, r2}
 800d6b8:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
 800d6bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d6be:	80a7      	strh	r7, [r4, #4]
 800d6c0:	4617      	mov	r7, r2
 800d6c2:	f8c4 8198 	str.w	r8, [r4, #408]	; 0x198
 800d6c6:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 800d990 <MFX_emptyAttitude+0x614>
 800d6ca:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
 800d6ce:	f8c4 819c 	str.w	r8, [r4, #412]	; 0x19c
 800d6d2:	f44f 1848 	mov.w	r8, #3276800	; 0x320000
 800d6d6:	f8c4 10a8 	str.w	r1, [r4, #168]	; 0xa8
 800d6da:	f8c4 5190 	str.w	r5, [r4, #400]	; 0x190
 800d6de:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
 800d6e2:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
 800d6e6:	f8c4 50c4 	str.w	r5, [r4, #196]	; 0xc4
 800d6ea:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 800d6ee:	cf07      	ldmia	r7!, {r0, r1, r2}
 800d6f0:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
 800d6f4:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
 800d6f8:	f8c4 10b4 	str.w	r1, [r4, #180]	; 0xb4
 800d6fc:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
 800d700:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 800d704:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
 800d708:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 800d70c:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
 800d710:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
 800d714:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
 800d718:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
 800d71c:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
 800d720:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
 800d724:	f8c4 50dc 	str.w	r5, [r4, #220]	; 0xdc
 800d728:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
 800d72c:	f8c4 50e0 	str.w	r5, [r4, #224]	; 0xe0
 800d730:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
 800d734:	f8c4 50e4 	str.w	r5, [r4, #228]	; 0xe4
 800d738:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
 800d73c:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
 800d740:	f8c4 5150 	str.w	r5, [r4, #336]	; 0x150
 800d744:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
 800d748:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
 800d74c:	f8c4 50f0 	str.w	r5, [r4, #240]	; 0xf0
 800d750:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
 800d754:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
 800d758:	f8c4 515c 	str.w	r5, [r4, #348]	; 0x15c
 800d75c:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
 800d760:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160
 800d764:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
 800d768:	f8c4 5164 	str.w	r5, [r4, #356]	; 0x164
 800d76c:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 800d770:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 800d774:	f8c4 e1b0 	str.w	lr, [r4, #432]	; 0x1b0
 800d778:	f8c4 5168 	str.w	r5, [r4, #360]	; 0x168
 800d77c:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
 800d780:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
 800d784:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
 800d788:	f8c4 5170 	str.w	r5, [r4, #368]	; 0x170
 800d78c:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
 800d790:	f8c4 5174 	str.w	r5, [r4, #372]	; 0x174
 800d794:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
 800d798:	f8c4 5178 	str.w	r5, [r4, #376]	; 0x178
 800d79c:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
 800d7a0:	f8c4 517c 	str.w	r5, [r4, #380]	; 0x17c
 800d7a4:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
 800d7a8:	f8c4 5180 	str.w	r5, [r4, #384]	; 0x180
 800d7ac:	f8c4 511c 	str.w	r5, [r4, #284]	; 0x11c
 800d7b0:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
 800d7b4:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
 800d7b8:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
 800d7bc:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
 800d7c0:	f8c4 518c 	str.w	r5, [r4, #396]	; 0x18c
 800d7c4:	f884 91a4 	strb.w	r9, [r4, #420]	; 0x1a4
 800d7c8:	f8c4 91a6 	str.w	r9, [r4, #422]	; 0x1a6
 800d7cc:	f8c4 b1d4 	str.w	fp, [r4, #468]	; 0x1d4
 800d7d0:	f8c4 51d8 	str.w	r5, [r4, #472]	; 0x1d8
 800d7d4:	f8c4 51dc 	str.w	r5, [r4, #476]	; 0x1dc
 800d7d8:	f8c4 51e0 	str.w	r5, [r4, #480]	; 0x1e0
 800d7dc:	f8c4 51e4 	str.w	r5, [r4, #484]	; 0x1e4
 800d7e0:	f8c4 51e8 	str.w	r5, [r4, #488]	; 0x1e8
 800d7e4:	f8c4 51ec 	str.w	r5, [r4, #492]	; 0x1ec
 800d7e8:	f8c4 51f0 	str.w	r5, [r4, #496]	; 0x1f0
 800d7ec:	f8c4 51f4 	str.w	r5, [r4, #500]	; 0x1f4
 800d7f0:	f8dd e020 	ldr.w	lr, [sp, #32]
 800d7f4:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
 800d7f8:	f8c4 e1b4 	str.w	lr, [r4, #436]	; 0x1b4
 800d7fc:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 800d800:	f8c4 b1fc 	str.w	fp, [r4, #508]	; 0x1fc
 800d804:	f8c4 e1b8 	str.w	lr, [r4, #440]	; 0x1b8
 800d808:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 800d80c:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
 800d810:	f8c4 e1bc 	str.w	lr, [r4, #444]	; 0x1bc
 800d814:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
 800d818:	f8c4 81a0 	str.w	r8, [r4, #416]	; 0x1a0
 800d81c:	f8c4 5208 	str.w	r5, [r4, #520]	; 0x208
 800d820:	f8c4 520c 	str.w	r5, [r4, #524]	; 0x20c
 800d824:	f8c4 5210 	str.w	r5, [r4, #528]	; 0x210
 800d828:	f8c4 5214 	str.w	r5, [r4, #532]	; 0x214
 800d82c:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
 800d830:	f8c4 521c 	str.w	r5, [r4, #540]	; 0x21c
 800d834:	f8c4 5220 	str.w	r5, [r4, #544]	; 0x220
 800d838:	f8c4 b224 	str.w	fp, [r4, #548]	; 0x224
 800d83c:	f8c4 5228 	str.w	r5, [r4, #552]	; 0x228
 800d840:	f8c4 522c 	str.w	r5, [r4, #556]	; 0x22c
 800d844:	f8c4 5230 	str.w	r5, [r4, #560]	; 0x230
 800d848:	f8c4 5234 	str.w	r5, [r4, #564]	; 0x234
 800d84c:	f8c4 5238 	str.w	r5, [r4, #568]	; 0x238
 800d850:	f8c4 523c 	str.w	r5, [r4, #572]	; 0x23c
 800d854:	f8c4 5240 	str.w	r5, [r4, #576]	; 0x240
 800d858:	f8c4 5244 	str.w	r5, [r4, #580]	; 0x244
 800d85c:	f8c4 5248 	str.w	r5, [r4, #584]	; 0x248
 800d860:	f8c4 b24c 	str.w	fp, [r4, #588]	; 0x24c
 800d864:	f8c4 5250 	str.w	r5, [r4, #592]	; 0x250
 800d868:	f8c4 5254 	str.w	r5, [r4, #596]	; 0x254
 800d86c:	f8c4 5258 	str.w	r5, [r4, #600]	; 0x258
 800d870:	f8c4 525c 	str.w	r5, [r4, #604]	; 0x25c
 800d874:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 800d878:	f8c4 5260 	str.w	r5, [r4, #608]	; 0x260
 800d87c:	f8c4 e1c0 	str.w	lr, [r4, #448]	; 0x1c0
 800d880:	f8dd e010 	ldr.w	lr, [sp, #16]
 800d884:	f8c4 5264 	str.w	r5, [r4, #612]	; 0x264
 800d888:	f8c4 e1c4 	str.w	lr, [r4, #452]	; 0x1c4
 800d88c:	f8dd e01c 	ldr.w	lr, [sp, #28]
 800d890:	f8c4 5268 	str.w	r5, [r4, #616]	; 0x268
 800d894:	f8c4 e1c8 	str.w	lr, [r4, #456]	; 0x1c8
 800d898:	f8c4 526c 	str.w	r5, [r4, #620]	; 0x26c
 800d89c:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
 800d8a0:	f8c4 b274 	str.w	fp, [r4, #628]	; 0x274
 800d8a4:	f8c4 5278 	str.w	r5, [r4, #632]	; 0x278
 800d8a8:	f8c4 527c 	str.w	r5, [r4, #636]	; 0x27c
 800d8ac:	f8c4 5280 	str.w	r5, [r4, #640]	; 0x280
 800d8b0:	f8c4 5284 	str.w	r5, [r4, #644]	; 0x284
 800d8b4:	f8c4 5288 	str.w	r5, [r4, #648]	; 0x288
 800d8b8:	f8c4 528c 	str.w	r5, [r4, #652]	; 0x28c
 800d8bc:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
 800d8c0:	f8c4 5294 	str.w	r5, [r4, #660]	; 0x294
 800d8c4:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 800d8c8:	f8c4 b29c 	str.w	fp, [r4, #668]	; 0x29c
 800d8cc:	f8c4 52a0 	str.w	r5, [r4, #672]	; 0x2a0
 800d8d0:	f8c4 52a4 	str.w	r5, [r4, #676]	; 0x2a4
 800d8d4:	f8c4 52a8 	str.w	r5, [r4, #680]	; 0x2a8
 800d8d8:	f8c4 52ac 	str.w	r5, [r4, #684]	; 0x2ac
 800d8dc:	f8c4 52b0 	str.w	r5, [r4, #688]	; 0x2b0
 800d8e0:	f8c4 52b4 	str.w	r5, [r4, #692]	; 0x2b4
 800d8e4:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
 800d8e8:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
 800d8ec:	f8c4 52c0 	str.w	r5, [r4, #704]	; 0x2c0
 800d8f0:	f8c4 b2c4 	str.w	fp, [r4, #708]	; 0x2c4
 800d8f4:	f8c4 52c8 	str.w	r5, [r4, #712]	; 0x2c8
 800d8f8:	f8dd e018 	ldr.w	lr, [sp, #24]
 800d8fc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800d8fe:	f8c4 e1cc 	str.w	lr, [r4, #460]	; 0x1cc
 800d902:	f8dd e014 	ldr.w	lr, [sp, #20]
 800d906:	f89a 0000 	ldrb.w	r0, [sl]
 800d90a:	f8c4 e1d0 	str.w	lr, [r4, #464]	; 0x1d0
 800d90e:	f04f 0e01 	mov.w	lr, #1
 800d912:	f8c4 52cc 	str.w	r5, [r4, #716]	; 0x2cc
 800d916:	f8c4 52d0 	str.w	r5, [r4, #720]	; 0x2d0
 800d91a:	f8c4 52d4 	str.w	r5, [r4, #724]	; 0x2d4
 800d91e:	f8c4 52d8 	str.w	r5, [r4, #728]	; 0x2d8
 800d922:	f8c4 52dc 	str.w	r5, [r4, #732]	; 0x2dc
 800d926:	f8c4 52e0 	str.w	r5, [r4, #736]	; 0x2e0
 800d92a:	f8c4 52e4 	str.w	r5, [r4, #740]	; 0x2e4
 800d92e:	f8c4 52e8 	str.w	r5, [r4, #744]	; 0x2e8
 800d932:	f8c4 b2ec 	str.w	fp, [r4, #748]	; 0x2ec
 800d936:	f8c4 52f0 	str.w	r5, [r4, #752]	; 0x2f0
 800d93a:	f8c4 52f4 	str.w	r5, [r4, #756]	; 0x2f4
 800d93e:	f8c4 52f8 	str.w	r5, [r4, #760]	; 0x2f8
 800d942:	e027      	b.n	800d994 <MFX_emptyAttitude+0x618>
 800d944:	40a00000 	.word	0x40a00000
 800d948:	3e006d36 	.word	0x3e006d36
 800d94c:	41200000 	.word	0x41200000
 800d950:	3ac49ba6 	.word	0x3ac49ba6
 800d954:	402ab021 	.word	0x402ab021
 800d958:	3b03126f 	.word	0x3b03126f
 800d95c:	3a83126f 	.word	0x3a83126f
 800d960:	3f13f7cf 	.word	0x3f13f7cf
 800d964:	3f2ac083 	.word	0x3f2ac083
 800d968:	01010100 	.word	0x01010100
 800d96c:	3f639581 	.word	0x3f639581
 800d970:	0801a578 	.word	0x0801a578
 800d974:	447a0000 	.word	0x447a0000
 800d978:	3ea25c13 	.word	0x3ea25c13
 800d97c:	3e93ffa3 	.word	0x3e93ffa3
 800d980:	3e5cec8f 	.word	0x3e5cec8f
 800d984:	3d57bb3d 	.word	0x3d57bb3d
 800d988:	3a9d4952 	.word	0x3a9d4952
 800d98c:	3f4ccccd 	.word	0x3f4ccccd
 800d990:	3f333333 	.word	0x3f333333
 800d994:	f8c4 52fc 	str.w	r5, [r4, #764]	; 0x2fc
 800d998:	f8c4 5300 	str.w	r5, [r4, #768]	; 0x300
 800d99c:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
 800d9a0:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
 800d9a4:	f8c4 b314 	str.w	fp, [r4, #788]	; 0x314
 800d9a8:	f884 e1ac 	strb.w	lr, [r4, #428]	; 0x1ac
 800d9ac:	f8c4 530c 	str.w	r5, [r4, #780]	; 0x30c
 800d9b0:	f8c4 5310 	str.w	r5, [r4, #784]	; 0x310
 800d9b4:	9703      	str	r7, [sp, #12]
 800d9b6:	f50d 6761 	add.w	r7, sp, #3600	; 0xe10
 800d9ba:	9702      	str	r7, [sp, #8]
 800d9bc:	f50d 6633 	add.w	r6, sp, #2864	; 0xb30
 800d9c0:	f50d 674a 	add.w	r7, sp, #3232	; 0xca0
 800d9c4:	e9cd 6700 	strd	r6, r7, [sp]
 800d9c8:	f50d 631c 	add.w	r3, sp, #2496	; 0x9c0
 800d9cc:	f60d 012c 	addw	r1, sp, #2092	; 0x82c
 800d9d0:	f50d 6205 	add.w	r2, sp, #2128	; 0x850
 800d9d4:	f7fe fc0c 	bl	800c1f0 <DataHist_parameters>
 800d9d8:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
 800d9dc:	230a      	movs	r3, #10
 800d9de:	f8c4 5930 	str.w	r5, [r4, #2352]	; 0x930
 800d9e2:	f8c4 5934 	str.w	r5, [r4, #2356]	; 0x934
 800d9e6:	f8c4 5938 	str.w	r5, [r4, #2360]	; 0x938
 800d9ea:	f8c4 793c 	str.w	r7, [r4, #2364]	; 0x93c
 800d9ee:	f8c4 5940 	str.w	r5, [r4, #2368]	; 0x940
 800d9f2:	f8c4 595c 	str.w	r5, [r4, #2396]	; 0x95c
 800d9f6:	f8c4 5944 	str.w	r5, [r4, #2372]	; 0x944
 800d9fa:	f8c4 5960 	str.w	r5, [r4, #2400]	; 0x960
 800d9fe:	f8c4 5948 	str.w	r5, [r4, #2376]	; 0x948
 800da02:	f8c4 5964 	str.w	r5, [r4, #2404]	; 0x964
 800da06:	f8c4 994c 	str.w	r9, [r4, #2380]	; 0x94c
 800da0a:	f8a4 9950 	strh.w	r9, [r4, #2384]	; 0x950
 800da0e:	f8c4 5954 	str.w	r5, [r4, #2388]	; 0x954
 800da12:	f8c4 7958 	str.w	r7, [r4, #2392]	; 0x958
 800da16:	f8c4 5968 	str.w	r5, [r4, #2408]	; 0x968
 800da1a:	f8c4 5970 	str.w	r5, [r4, #2416]	; 0x970
 800da1e:	f8c4 596c 	str.w	r5, [r4, #2412]	; 0x96c
 800da22:	f884 9978 	strb.w	r9, [r4, #2424]	; 0x978
 800da26:	f8c4 3974 	str.w	r3, [r4, #2420]	; 0x974
 800da2a:	f60d 6d44 	addw	sp, sp, #3652	; 0xe44
 800da2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da32:	bf00      	nop

0800da34 <output_update>:
 800da34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da38:	f8d0 8000 	ldr.w	r8, [r0]
 800da3c:	461e      	mov	r6, r3
 800da3e:	6883      	ldr	r3, [r0, #8]
 800da40:	b083      	sub	sp, #12
 800da42:	4604      	mov	r4, r0
 800da44:	460f      	mov	r7, r1
 800da46:	4640      	mov	r0, r8
 800da48:	4619      	mov	r1, r3
 800da4a:	9300      	str	r3, [sp, #0]
 800da4c:	4615      	mov	r5, r2
 800da4e:	f7f3 f9b1 	bl	8000db4 <__aeabi_fmul>
 800da52:	4601      	mov	r1, r0
 800da54:	f7f3 f8a6 	bl	8000ba4 <__addsf3>
 800da58:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800da5c:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800da60:	4683      	mov	fp, r0
 800da62:	4651      	mov	r1, sl
 800da64:	4648      	mov	r0, r9
 800da66:	f7f3 f9a5 	bl	8000db4 <__aeabi_fmul>
 800da6a:	4601      	mov	r1, r0
 800da6c:	f7f3 f89a 	bl	8000ba4 <__addsf3>
 800da70:	4602      	mov	r2, r0
 800da72:	4651      	mov	r1, sl
 800da74:	4640      	mov	r0, r8
 800da76:	4692      	mov	sl, r2
 800da78:	f7f3 f99c 	bl	8000db4 <__aeabi_fmul>
 800da7c:	9b00      	ldr	r3, [sp, #0]
 800da7e:	9000      	str	r0, [sp, #0]
 800da80:	4619      	mov	r1, r3
 800da82:	4648      	mov	r0, r9
 800da84:	f7f3 f996 	bl	8000db4 <__aeabi_fmul>
 800da88:	9b00      	ldr	r3, [sp, #0]
 800da8a:	4601      	mov	r1, r0
 800da8c:	4618      	mov	r0, r3
 800da8e:	f7f3 f889 	bl	8000ba4 <__addsf3>
 800da92:	4601      	mov	r1, r0
 800da94:	f7f3 f886 	bl	8000ba4 <__addsf3>
 800da98:	4603      	mov	r3, r0
 800da9a:	4641      	mov	r1, r8
 800da9c:	4640      	mov	r0, r8
 800da9e:	4698      	mov	r8, r3
 800daa0:	f7f3 f988 	bl	8000db4 <__aeabi_fmul>
 800daa4:	4649      	mov	r1, r9
 800daa6:	4681      	mov	r9, r0
 800daa8:	4608      	mov	r0, r1
 800daaa:	f7f3 f983 	bl	8000db4 <__aeabi_fmul>
 800daae:	4601      	mov	r1, r0
 800dab0:	4648      	mov	r0, r9
 800dab2:	f7f3 f877 	bl	8000ba4 <__addsf3>
 800dab6:	4601      	mov	r1, r0
 800dab8:	f7f3 f874 	bl	8000ba4 <__addsf3>
 800dabc:	4681      	mov	r9, r0
 800dabe:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800dac2:	4649      	mov	r1, r9
 800dac4:	f7f3 f86c 	bl	8000ba0 <__aeabi_fsub>
 800dac8:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 800dacc:	9000      	str	r0, [sp, #0]
 800dace:	2a00      	cmp	r2, #0
 800dad0:	d144      	bne.n	800db5c <output_update+0x128>
 800dad2:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
 800dad6:	4659      	mov	r1, fp
 800dad8:	f8c6 8000 	str.w	r8, [r6]
 800dadc:	4650      	mov	r0, sl
 800dade:	9201      	str	r2, [sp, #4]
 800dae0:	f7f3 f85e 	bl	8000ba0 <__aeabi_fsub>
 800dae4:	9b00      	ldr	r3, [sp, #0]
 800dae6:	4629      	mov	r1, r5
 800dae8:	9a01      	ldr	r2, [sp, #4]
 800daea:	60b3      	str	r3, [r6, #8]
 800daec:	6070      	str	r0, [r6, #4]
 800daee:	4620      	mov	r0, r4
 800daf0:	f7ff f96a 	bl	800cdc8 <q2hpr>
 800daf4:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 800daf8:	6828      	ldr	r0, [r5, #0]
 800dafa:	493f      	ldr	r1, [pc, #252]	; (800dbf8 <output_update+0x1c4>)
 800dafc:	f102 4900 	add.w	r9, r2, #2147483648	; 0x80000000
 800db00:	f103 4800 	add.w	r8, r3, #2147483648	; 0x80000000
 800db04:	f7f3 f956 	bl	8000db4 <__aeabi_fmul>
 800db08:	4603      	mov	r3, r0
 800db0a:	493b      	ldr	r1, [pc, #236]	; (800dbf8 <output_update+0x1c4>)
 800db0c:	602b      	str	r3, [r5, #0]
 800db0e:	4648      	mov	r0, r9
 800db10:	f7f3 f950 	bl	8000db4 <__aeabi_fmul>
 800db14:	4603      	mov	r3, r0
 800db16:	4938      	ldr	r1, [pc, #224]	; (800dbf8 <output_update+0x1c4>)
 800db18:	606b      	str	r3, [r5, #4]
 800db1a:	4640      	mov	r0, r8
 800db1c:	f7f3 f94a 	bl	8000db4 <__aeabi_fmul>
 800db20:	60a8      	str	r0, [r5, #8]
 800db22:	6879      	ldr	r1, [r7, #4]
 800db24:	6830      	ldr	r0, [r6, #0]
 800db26:	f7f3 f83d 	bl	8000ba4 <__addsf3>
 800db2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db2c:	6825      	ldr	r5, [r4, #0]
 800db2e:	6018      	str	r0, [r3, #0]
 800db30:	6839      	ldr	r1, [r7, #0]
 800db32:	6870      	ldr	r0, [r6, #4]
 800db34:	f7f3 f836 	bl	8000ba4 <__addsf3>
 800db38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db3a:	6058      	str	r0, [r3, #4]
 800db3c:	68b9      	ldr	r1, [r7, #8]
 800db3e:	68b0      	ldr	r0, [r6, #8]
 800db40:	f7f3 f82e 	bl	8000ba0 <__aeabi_fsub>
 800db44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db46:	6098      	str	r0, [r3, #8]
 800db48:	68a3      	ldr	r3, [r4, #8]
 800db4a:	6862      	ldr	r2, [r4, #4]
 800db4c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800db50:	6065      	str	r5, [r4, #4]
 800db52:	6022      	str	r2, [r4, #0]
 800db54:	60a3      	str	r3, [r4, #8]
 800db56:	b003      	add	sp, #12
 800db58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db5c:	2a01      	cmp	r2, #1
 800db5e:	d011      	beq.n	800db84 <output_update+0x150>
 800db60:	6828      	ldr	r0, [r5, #0]
 800db62:	4925      	ldr	r1, [pc, #148]	; (800dbf8 <output_update+0x1c4>)
 800db64:	f7f3 f926 	bl	8000db4 <__aeabi_fmul>
 800db68:	4923      	ldr	r1, [pc, #140]	; (800dbf8 <output_update+0x1c4>)
 800db6a:	6028      	str	r0, [r5, #0]
 800db6c:	6868      	ldr	r0, [r5, #4]
 800db6e:	f7f3 f921 	bl	8000db4 <__aeabi_fmul>
 800db72:	4921      	ldr	r1, [pc, #132]	; (800dbf8 <output_update+0x1c4>)
 800db74:	6068      	str	r0, [r5, #4]
 800db76:	68a8      	ldr	r0, [r5, #8]
 800db78:	f7f3 f91c 	bl	8000db4 <__aeabi_fmul>
 800db7c:	60a8      	str	r0, [r5, #8]
 800db7e:	b003      	add	sp, #12
 800db80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db84:	4659      	mov	r1, fp
 800db86:	4650      	mov	r0, sl
 800db88:	9200      	str	r2, [sp, #0]
 800db8a:	f7f3 f809 	bl	8000ba0 <__aeabi_fsub>
 800db8e:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
 800db92:	6030      	str	r0, [r6, #0]
 800db94:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800db98:	4648      	mov	r0, r9
 800db9a:	f8c6 8004 	str.w	r8, [r6, #4]
 800db9e:	f7f2 ffff 	bl	8000ba0 <__aeabi_fsub>
 800dba2:	9a00      	ldr	r2, [sp, #0]
 800dba4:	4629      	mov	r1, r5
 800dba6:	60b0      	str	r0, [r6, #8]
 800dba8:	4620      	mov	r0, r4
 800dbaa:	f7ff f90d 	bl	800cdc8 <q2hpr>
 800dbae:	6828      	ldr	r0, [r5, #0]
 800dbb0:	4911      	ldr	r1, [pc, #68]	; (800dbf8 <output_update+0x1c4>)
 800dbb2:	f7f3 f8ff 	bl	8000db4 <__aeabi_fmul>
 800dbb6:	4910      	ldr	r1, [pc, #64]	; (800dbf8 <output_update+0x1c4>)
 800dbb8:	6028      	str	r0, [r5, #0]
 800dbba:	6868      	ldr	r0, [r5, #4]
 800dbbc:	f7f3 f8fa 	bl	8000db4 <__aeabi_fmul>
 800dbc0:	490d      	ldr	r1, [pc, #52]	; (800dbf8 <output_update+0x1c4>)
 800dbc2:	6068      	str	r0, [r5, #4]
 800dbc4:	68a8      	ldr	r0, [r5, #8]
 800dbc6:	f7f3 f8f5 	bl	8000db4 <__aeabi_fmul>
 800dbca:	60a8      	str	r0, [r5, #8]
 800dbcc:	6839      	ldr	r1, [r7, #0]
 800dbce:	6830      	ldr	r0, [r6, #0]
 800dbd0:	f7f2 ffe8 	bl	8000ba4 <__addsf3>
 800dbd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dbd6:	6018      	str	r0, [r3, #0]
 800dbd8:	6879      	ldr	r1, [r7, #4]
 800dbda:	6870      	ldr	r0, [r6, #4]
 800dbdc:	f7f2 ffe2 	bl	8000ba4 <__addsf3>
 800dbe0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dbe2:	6058      	str	r0, [r3, #4]
 800dbe4:	68b9      	ldr	r1, [r7, #8]
 800dbe6:	68b0      	ldr	r0, [r6, #8]
 800dbe8:	f7f2 ffdc 	bl	8000ba4 <__addsf3>
 800dbec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dbee:	6098      	str	r0, [r3, #8]
 800dbf0:	b003      	add	sp, #12
 800dbf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbf6:	bf00      	nop
 800dbf8:	42652ee1 	.word	0x42652ee1

0800dbfc <kalman_3gyro.constprop.0>:
 800dbfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc00:	460e      	mov	r6, r1
 800dc02:	f2ad 7db4 	subw	sp, sp, #1972	; 0x7b4
 800dc06:	f8d2 c000 	ldr.w	ip, [r2]
 800dc0a:	f8d2 e008 	ldr.w	lr, [r2, #8]
 800dc0e:	f8d2 800c 	ldr.w	r8, [r2, #12]
 800dc12:	6854      	ldr	r4, [r2, #4]
 800dc14:	f8d2 9010 	ldr.w	r9, [r2, #16]
 800dc18:	f8d2 a014 	ldr.w	sl, [r2, #20]
 800dc1c:	4db8      	ldr	r5, [pc, #736]	; (800df00 <kalman_3gyro.constprop.0+0x304>)
 800dc1e:	4607      	mov	r7, r0
 800dc20:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800dc24:	9000      	str	r0, [sp, #0]
 800dc26:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800dc28:	f8cd c080 	str.w	ip, [sp, #128]	; 0x80
 800dc2c:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
 800dc30:	f8cd c0f0 	str.w	ip, [sp, #240]	; 0xf0
 800dc34:	f8cd c0f4 	str.w	ip, [sp, #244]	; 0xf4
 800dc38:	f8cd c0f8 	str.w	ip, [sp, #248]	; 0xf8
 800dc3c:	933f      	str	r3, [sp, #252]	; 0xfc
 800dc3e:	9340      	str	r3, [sp, #256]	; 0x100
 800dc40:	9341      	str	r3, [sp, #260]	; 0x104
 800dc42:	f8cd e1b0 	str.w	lr, [sp, #432]	; 0x1b0
 800dc46:	f8cd e1b4 	str.w	lr, [sp, #436]	; 0x1b4
 800dc4a:	f8cd e1b8 	str.w	lr, [sp, #440]	; 0x1b8
 800dc4e:	9544      	str	r5, [sp, #272]	; 0x110
 800dc50:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 800dc54:	f8cd 9078 	str.w	r9, [sp, #120]	; 0x78
 800dc58:	f8cd a07c 	str.w	sl, [sp, #124]	; 0x7c
 800dc5c:	9609      	str	r6, [sp, #36]	; 0x24
 800dc5e:	9469      	str	r4, [sp, #420]	; 0x1a4
 800dc60:	946a      	str	r4, [sp, #424]	; 0x1a8
 800dc62:	946b      	str	r4, [sp, #428]	; 0x1ac
 800dc64:	f8cd 81bc 	str.w	r8, [sp, #444]	; 0x1bc
 800dc68:	f8cd 81c0 	str.w	r8, [sp, #448]	; 0x1c0
 800dc6c:	f8cd 81c4 	str.w	r8, [sp, #452]	; 0x1c4
 800dc70:	f8cd 91c8 	str.w	r9, [sp, #456]	; 0x1c8
 800dc74:	f8cd a1cc 	str.w	sl, [sp, #460]	; 0x1cc
 800dc78:	f7f3 f89c 	bl	8000db4 <__aeabi_fmul>
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800dc82:	9014      	str	r0, [sp, #80]	; 0x50
 800dc84:	2100      	movs	r1, #0
 800dc86:	f50d 60c0 	add.w	r0, sp, #1536	; 0x600
 800dc8a:	9374      	str	r3, [sp, #464]	; 0x1d0
 800dc8c:	f8dd 57d8 	ldr.w	r5, [sp, #2008]	; 0x7d8
 800dc90:	f009 ff2c 	bl	8017aec <memset>
 800dc94:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800dc98:	7b7a      	ldrb	r2, [r7, #13]
 800dc9a:	f8cd 36a8 	str.w	r3, [sp, #1704]	; 0x6a8
 800dc9e:	f8cd 36dc 	str.w	r3, [sp, #1756]	; 0x6dc
 800dca2:	f8cd 3710 	str.w	r3, [sp, #1808]	; 0x710
 800dca6:	f8cd 3744 	str.w	r3, [sp, #1860]	; 0x744
 800dcaa:	f8cd 3778 	str.w	r3, [sp, #1912]	; 0x778
 800dcae:	f8cd 37ac 	str.w	r3, [sp, #1964]	; 0x7ac
 800dcb2:	2a00      	cmp	r2, #0
 800dcb4:	f001 8337 	beq.w	800f326 <kalman_3gyro.constprop.0+0x172a>
 800dcb8:	68b4      	ldr	r4, [r6, #8]
 800dcba:	4637      	mov	r7, r6
 800dcbc:	4621      	mov	r1, r4
 800dcbe:	4620      	mov	r0, r4
 800dcc0:	f7f2 ff70 	bl	8000ba4 <__addsf3>
 800dcc4:	6876      	ldr	r6, [r6, #4]
 800dcc6:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800dcca:	4682      	mov	sl, r0
 800dccc:	4630      	mov	r0, r6
 800dcce:	f7f3 f871 	bl	8000db4 <__aeabi_fmul>
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800dcd8:	4620      	mov	r0, r4
 800dcda:	9301      	str	r3, [sp, #4]
 800dcdc:	f7f3 f86a 	bl	8000db4 <__aeabi_fmul>
 800dce0:	683c      	ldr	r4, [r7, #0]
 800dce2:	4681      	mov	r9, r0
 800dce4:	4621      	mov	r1, r4
 800dce6:	4620      	mov	r0, r4
 800dce8:	f7f2 ff5c 	bl	8000ba4 <__addsf3>
 800dcec:	4631      	mov	r1, r6
 800dcee:	4683      	mov	fp, r0
 800dcf0:	4630      	mov	r0, r6
 800dcf2:	f7f2 ff57 	bl	8000ba4 <__addsf3>
 800dcf6:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800dcfa:	4680      	mov	r8, r0
 800dcfc:	4620      	mov	r0, r4
 800dcfe:	f7f3 f859 	bl	8000db4 <__aeabi_fmul>
 800dd02:	9b01      	ldr	r3, [sp, #4]
 800dd04:	2400      	movs	r4, #0
 800dd06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd08:	f8cd a604 	str.w	sl, [sp, #1540]	; 0x604
 800dd0c:	6916      	ldr	r6, [r2, #16]
 800dd0e:	6951      	ldr	r1, [r2, #20]
 800dd10:	68d7      	ldr	r7, [r2, #12]
 800dd12:	f101 4a00 	add.w	sl, r1, #2147483648	; 0x80000000
 800dd16:	f8cd 9630 	str.w	r9, [sp, #1584]	; 0x630
 800dd1a:	f8cd b638 	str.w	fp, [sp, #1592]	; 0x638
 800dd1e:	f106 4900 	add.w	r9, r6, #2147483648	; 0x80000000
 800dd22:	f107 4b00 	add.w	fp, r7, #2147483648	; 0x80000000
 800dd26:	f8cd 0664 	str.w	r0, [sp, #1636]	; 0x664
 800dd2a:	4608      	mov	r0, r1
 800dd2c:	f8cd 3608 	str.w	r3, [sp, #1544]	; 0x608
 800dd30:	9146      	str	r1, [sp, #280]	; 0x118
 800dd32:	964b      	str	r6, [sp, #300]	; 0x12c
 800dd34:	9445      	str	r4, [sp, #276]	; 0x114
 800dd36:	9449      	str	r4, [sp, #292]	; 0x124
 800dd38:	944d      	str	r4, [sp, #308]	; 0x134
 800dd3a:	f8cd 4600 	str.w	r4, [sp, #1536]	; 0x600
 800dd3e:	f8cd 4634 	str.w	r4, [sp, #1588]	; 0x634
 800dd42:	f8cd 4668 	str.w	r4, [sp, #1640]	; 0x668
 800dd46:	f8cd 460c 	str.w	r4, [sp, #1548]	; 0x60c
 800dd4a:	f8cd 8660 	str.w	r8, [sp, #1632]	; 0x660
 800dd4e:	f8cd a120 	str.w	sl, [sp, #288]	; 0x120
 800dd52:	f8cd 911c 	str.w	r9, [sp, #284]	; 0x11c
 800dd56:	974a      	str	r7, [sp, #296]	; 0x128
 800dd58:	f8cd b130 	str.w	fp, [sp, #304]	; 0x130
 800dd5c:	f7f2 ff22 	bl	8000ba4 <__addsf3>
 800dd60:	4603      	mov	r3, r0
 800dd62:	4649      	mov	r1, r9
 800dd64:	4648      	mov	r0, r9
 800dd66:	f8cd 3610 	str.w	r3, [sp, #1552]	; 0x610
 800dd6a:	f7f2 ff1b 	bl	8000ba4 <__addsf3>
 800dd6e:	4603      	mov	r3, r0
 800dd70:	4651      	mov	r1, sl
 800dd72:	4650      	mov	r0, sl
 800dd74:	f8cd 3614 	str.w	r3, [sp, #1556]	; 0x614
 800dd78:	f7f2 ff14 	bl	8000ba4 <__addsf3>
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	4639      	mov	r1, r7
 800dd80:	4638      	mov	r0, r7
 800dd82:	f8cd 4640 	str.w	r4, [sp, #1600]	; 0x640
 800dd86:	f8cd 363c 	str.w	r3, [sp, #1596]	; 0x63c
 800dd8a:	f7f2 ff0b 	bl	8000ba4 <__addsf3>
 800dd8e:	4603      	mov	r3, r0
 800dd90:	4631      	mov	r1, r6
 800dd92:	4630      	mov	r0, r6
 800dd94:	f8cd 3644 	str.w	r3, [sp, #1604]	; 0x644
 800dd98:	f7f2 ff04 	bl	8000ba4 <__addsf3>
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	4659      	mov	r1, fp
 800dda0:	4658      	mov	r0, fp
 800dda2:	f8cd 366c 	str.w	r3, [sp, #1644]	; 0x66c
 800dda6:	f7f2 fefd 	bl	8000ba4 <__addsf3>
 800ddaa:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
 800ddae:	4606      	mov	r6, r0
 800ddb0:	2230      	movs	r2, #48	; 0x30
 800ddb2:	2100      	movs	r1, #0
 800ddb4:	a875      	add	r0, sp, #468	; 0x1d4
 800ddb6:	e9cd 3324 	strd	r3, r3, [sp, #144]	; 0x90
 800ddba:	9326      	str	r3, [sp, #152]	; 0x98
 800ddbc:	f8cd 4674 	str.w	r4, [sp, #1652]	; 0x674
 800ddc0:	f8cd 6670 	str.w	r6, [sp, #1648]	; 0x670
 800ddc4:	f009 fe92 	bl	8017aec <memset>
 800ddc8:	9c00      	ldr	r4, [sp, #0]
 800ddca:	4628      	mov	r0, r5
 800ddcc:	69a1      	ldr	r1, [r4, #24]
 800ddce:	f7f2 fff1 	bl	8000db4 <__aeabi_fmul>
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	69e1      	ldr	r1, [r4, #28]
 800ddd6:	4628      	mov	r0, r5
 800ddd8:	9315      	str	r3, [sp, #84]	; 0x54
 800ddda:	f7f2 ffeb 	bl	8000db4 <__aeabi_fmul>
 800ddde:	4603      	mov	r3, r0
 800dde0:	6a21      	ldr	r1, [r4, #32]
 800dde2:	4628      	mov	r0, r5
 800dde4:	931a      	str	r3, [sp, #104]	; 0x68
 800dde6:	f7f2 ffe5 	bl	8000db4 <__aeabi_fmul>
 800ddea:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
 800ddee:	901b      	str	r0, [sp, #108]	; 0x6c
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	f043 8761 	bne.w	8011cb8 <kalman_3gyro.constprop.0+0x40bc>
 800ddf6:	9b00      	ldr	r3, [sp, #0]
 800ddf8:	f893 3318 	ldrb.w	r3, [r3, #792]	; 0x318
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	f043 84ed 	bne.w	80117dc <kalman_3gyro.constprop.0+0x3be0>
 800de02:	2600      	movs	r6, #0
 800de04:	9b00      	ldr	r3, [sp, #0]
 800de06:	4631      	mov	r1, r6
 800de08:	f8d3 0930 	ldr.w	r0, [r3, #2352]	; 0x930
 800de0c:	f8d3 7934 	ldr.w	r7, [r3, #2356]	; 0x934
 800de10:	f8d3 4938 	ldr.w	r4, [r3, #2360]	; 0x938
 800de14:	f8d3 593c 	ldr.w	r5, [r3, #2364]	; 0x93c
 800de18:	9030      	str	r0, [sp, #192]	; 0xc0
 800de1a:	9731      	str	r7, [sp, #196]	; 0xc4
 800de1c:	9432      	str	r4, [sp, #200]	; 0xc8
 800de1e:	9533      	str	r5, [sp, #204]	; 0xcc
 800de20:	9634      	str	r6, [sp, #208]	; 0xd0
 800de22:	9635      	str	r6, [sp, #212]	; 0xd4
 800de24:	9636      	str	r6, [sp, #216]	; 0xd8
 800de26:	9637      	str	r6, [sp, #220]	; 0xdc
 800de28:	f7f3 f958 	bl	80010dc <__aeabi_fcmpeq>
 800de2c:	2800      	cmp	r0, #0
 800de2e:	d06b      	beq.n	800df08 <kalman_3gyro.constprop.0+0x30c>
 800de30:	4638      	mov	r0, r7
 800de32:	4631      	mov	r1, r6
 800de34:	f7f3 f952 	bl	80010dc <__aeabi_fcmpeq>
 800de38:	2800      	cmp	r0, #0
 800de3a:	d065      	beq.n	800df08 <kalman_3gyro.constprop.0+0x30c>
 800de3c:	4620      	mov	r0, r4
 800de3e:	4631      	mov	r1, r6
 800de40:	f7f3 f94c 	bl	80010dc <__aeabi_fcmpeq>
 800de44:	2800      	cmp	r0, #0
 800de46:	d05f      	beq.n	800df08 <kalman_3gyro.constprop.0+0x30c>
 800de48:	4628      	mov	r0, r5
 800de4a:	4631      	mov	r1, r6
 800de4c:	f7f3 f946 	bl	80010dc <__aeabi_fcmpeq>
 800de50:	2800      	cmp	r0, #0
 800de52:	d059      	beq.n	800df08 <kalman_3gyro.constprop.0+0x30c>
 800de54:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800de58:	2200      	movs	r2, #0
 800de5a:	f8dd 37e0 	ldr.w	r3, [sp, #2016]	; 0x7e0
 800de5e:	f8dd 17e0 	ldr.w	r1, [sp, #2016]	; 0x7e0
 800de62:	781b      	ldrb	r3, [r3, #0]
 800de64:	f8dd 57e0 	ldr.w	r5, [sp, #2016]	; 0x7e0
 800de68:	9033      	str	r0, [sp, #204]	; 0xcc
 800de6a:	9800      	ldr	r0, [sp, #0]
 800de6c:	68cc      	ldr	r4, [r1, #12]
 800de6e:	68ad      	ldr	r5, [r5, #8]
 800de70:	6849      	ldr	r1, [r1, #4]
 800de72:	9630      	str	r6, [sp, #192]	; 0xc0
 800de74:	9631      	str	r6, [sp, #196]	; 0xc4
 800de76:	9632      	str	r6, [sp, #200]	; 0xc8
 800de78:	f880 21ac 	strb.w	r2, [r0, #428]	; 0x1ac
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	f004 8042 	beq.w	8011f06 <kalman_3gyro.constprop.0+0x430a>
 800de82:	4608      	mov	r0, r1
 800de84:	f7f2 ff96 	bl	8000db4 <__aeabi_fmul>
 800de88:	4629      	mov	r1, r5
 800de8a:	4605      	mov	r5, r0
 800de8c:	4608      	mov	r0, r1
 800de8e:	f7f2 ff91 	bl	8000db4 <__aeabi_fmul>
 800de92:	4601      	mov	r1, r0
 800de94:	4628      	mov	r0, r5
 800de96:	f7f2 fe85 	bl	8000ba4 <__addsf3>
 800de9a:	4621      	mov	r1, r4
 800de9c:	4605      	mov	r5, r0
 800de9e:	4620      	mov	r0, r4
 800dea0:	f7f2 ff88 	bl	8000db4 <__aeabi_fmul>
 800dea4:	4601      	mov	r1, r0
 800dea6:	4628      	mov	r0, r5
 800dea8:	f7f2 fe7c 	bl	8000ba4 <__addsf3>
 800deac:	f00a fcbe 	bl	801882c <sqrtf>
 800deb0:	4601      	mov	r1, r0
 800deb2:	4620      	mov	r0, r4
 800deb4:	f7f3 f832 	bl	8000f1c <__aeabi_fdiv>
 800deb8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800debc:	9c00      	ldr	r4, [sp, #0]
 800debe:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800dec2:	f8c4 01c8 	str.w	r0, [r4, #456]	; 0x1c8
 800dec6:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
 800deca:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
 800dece:	2100      	movs	r1, #0
 800ded0:	f504 70ea 	add.w	r0, r4, #468	; 0x1d4
 800ded4:	f009 fe0a 	bl	8017aec <memset>
 800ded8:	4b0a      	ldr	r3, [pc, #40]	; (800df04 <kalman_3gyro.constprop.0+0x308>)
 800deda:	f8c4 31d4 	str.w	r3, [r4, #468]	; 0x1d4
 800dede:	f8c4 31fc 	str.w	r3, [r4, #508]	; 0x1fc
 800dee2:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
 800dee6:	f8c4 324c 	str.w	r3, [r4, #588]	; 0x24c
 800deea:	f8c4 3274 	str.w	r3, [r4, #628]	; 0x274
 800deee:	f8c4 329c 	str.w	r3, [r4, #668]	; 0x29c
 800def2:	f8c4 32c4 	str.w	r3, [r4, #708]	; 0x2c4
 800def6:	f8c4 32ec 	str.w	r3, [r4, #748]	; 0x2ec
 800defa:	f8c4 3314 	str.w	r3, [r4, #788]	; 0x314
 800defe:	e003      	b.n	800df08 <kalman_3gyro.constprop.0+0x30c>
 800df00:	3a9d4952 	.word	0x3a9d4952
 800df04:	40a00000 	.word	0x40a00000
 800df08:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800df0a:	683e      	ldr	r6, [r7, #0]
 800df0c:	687d      	ldr	r5, [r7, #4]
 800df0e:	4631      	mov	r1, r6
 800df10:	4630      	mov	r0, r6
 800df12:	f7f2 ff4f 	bl	8000db4 <__aeabi_fmul>
 800df16:	4629      	mov	r1, r5
 800df18:	4604      	mov	r4, r0
 800df1a:	4628      	mov	r0, r5
 800df1c:	f7f2 ff4a 	bl	8000db4 <__aeabi_fmul>
 800df20:	4601      	mov	r1, r0
 800df22:	4620      	mov	r0, r4
 800df24:	f7f2 fe3e 	bl	8000ba4 <__addsf3>
 800df28:	68bc      	ldr	r4, [r7, #8]
 800df2a:	4607      	mov	r7, r0
 800df2c:	4621      	mov	r1, r4
 800df2e:	4620      	mov	r0, r4
 800df30:	f7f2 ff40 	bl	8000db4 <__aeabi_fmul>
 800df34:	4601      	mov	r1, r0
 800df36:	4638      	mov	r0, r7
 800df38:	f7f2 fe34 	bl	8000ba4 <__addsf3>
 800df3c:	49b4      	ldr	r1, [pc, #720]	; (800e210 <kalman_3gyro.constprop.0+0x614>)
 800df3e:	4607      	mov	r7, r0
 800df40:	f7f3 f8d6 	bl	80010f0 <__aeabi_fcmplt>
 800df44:	2800      	cmp	r0, #0
 800df46:	f041 816a 	bne.w	800f21e <kalman_3gyro.constprop.0+0x1622>
 800df4a:	4638      	mov	r0, r7
 800df4c:	f00a fc6e 	bl	801882c <sqrtf>
 800df50:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800df54:	900e      	str	r0, [sp, #56]	; 0x38
 800df56:	f7f2 fe23 	bl	8000ba0 <__aeabi_fsub>
 800df5a:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800df5e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800df62:	4618      	mov	r0, r3
 800df64:	9318      	str	r3, [sp, #96]	; 0x60
 800df66:	f7f2 fe1b 	bl	8000ba0 <__aeabi_fsub>
 800df6a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800df6c:	9012      	str	r0, [sp, #72]	; 0x48
 800df6e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800df72:	f7f2 ffd3 	bl	8000f1c <__aeabi_fdiv>
 800df76:	4607      	mov	r7, r0
 800df78:	4630      	mov	r0, r6
 800df7a:	4639      	mov	r1, r7
 800df7c:	f7f2 ff1a 	bl	8000db4 <__aeabi_fmul>
 800df80:	4681      	mov	r9, r0
 800df82:	4639      	mov	r1, r7
 800df84:	4628      	mov	r0, r5
 800df86:	f8cd 909c 	str.w	r9, [sp, #156]	; 0x9c
 800df8a:	f7f2 ff13 	bl	8000db4 <__aeabi_fmul>
 800df8e:	4603      	mov	r3, r0
 800df90:	4639      	mov	r1, r7
 800df92:	9001      	str	r0, [sp, #4]
 800df94:	4620      	mov	r0, r4
 800df96:	9328      	str	r3, [sp, #160]	; 0xa0
 800df98:	f7f2 ff0c 	bl	8000db4 <__aeabi_fmul>
 800df9c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800df9e:	9002      	str	r0, [sp, #8]
 800dfa0:	f8d7 800c 	ldr.w	r8, [r7, #12]
 800dfa4:	9029      	str	r0, [sp, #164]	; 0xa4
 800dfa6:	4641      	mov	r1, r8
 800dfa8:	4640      	mov	r0, r8
 800dfaa:	f7f2 ff03 	bl	8000db4 <__aeabi_fmul>
 800dfae:	9709      	str	r7, [sp, #36]	; 0x24
 800dfb0:	693f      	ldr	r7, [r7, #16]
 800dfb2:	4682      	mov	sl, r0
 800dfb4:	4639      	mov	r1, r7
 800dfb6:	4638      	mov	r0, r7
 800dfb8:	f7f2 fefc 	bl	8000db4 <__aeabi_fmul>
 800dfbc:	4601      	mov	r1, r0
 800dfbe:	4650      	mov	r0, sl
 800dfc0:	f7f2 fdf0 	bl	8000ba4 <__addsf3>
 800dfc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfc6:	4683      	mov	fp, r0
 800dfc8:	f8d3 a014 	ldr.w	sl, [r3, #20]
 800dfcc:	4651      	mov	r1, sl
 800dfce:	4650      	mov	r0, sl
 800dfd0:	f7f2 fef0 	bl	8000db4 <__aeabi_fmul>
 800dfd4:	4601      	mov	r1, r0
 800dfd6:	4658      	mov	r0, fp
 800dfd8:	f7f2 fde4 	bl	8000ba4 <__addsf3>
 800dfdc:	498c      	ldr	r1, [pc, #560]	; (800e210 <kalman_3gyro.constprop.0+0x614>)
 800dfde:	4683      	mov	fp, r0
 800dfe0:	f7f3 f886 	bl	80010f0 <__aeabi_fcmplt>
 800dfe4:	2800      	cmp	r0, #0
 800dfe6:	f041 81ae 	bne.w	800f346 <kalman_3gyro.constprop.0+0x174a>
 800dfea:	4658      	mov	r0, fp
 800dfec:	f00a fc1e 	bl	801882c <sqrtf>
 800dff0:	4601      	mov	r1, r0
 800dff2:	900f      	str	r0, [sp, #60]	; 0x3c
 800dff4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800dff8:	f7f2 ff90 	bl	8000f1c <__aeabi_fdiv>
 800dffc:	4601      	mov	r1, r0
 800dffe:	4640      	mov	r0, r8
 800e000:	9103      	str	r1, [sp, #12]
 800e002:	f7f2 fed7 	bl	8000db4 <__aeabi_fmul>
 800e006:	4683      	mov	fp, r0
 800e008:	9903      	ldr	r1, [sp, #12]
 800e00a:	4638      	mov	r0, r7
 800e00c:	f8cd b0a8 	str.w	fp, [sp, #168]	; 0xa8
 800e010:	f7f2 fed0 	bl	8000db4 <__aeabi_fmul>
 800e014:	4603      	mov	r3, r0
 800e016:	9903      	ldr	r1, [sp, #12]
 800e018:	4650      	mov	r0, sl
 800e01a:	932b      	str	r3, [sp, #172]	; 0xac
 800e01c:	9303      	str	r3, [sp, #12]
 800e01e:	f7f2 fec9 	bl	8000db4 <__aeabi_fmul>
 800e022:	4682      	mov	sl, r0
 800e024:	4649      	mov	r1, r9
 800e026:	4658      	mov	r0, fp
 800e028:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
 800e02c:	f7f2 fec2 	bl	8000db4 <__aeabi_fmul>
 800e030:	4602      	mov	r2, r0
 800e032:	9b03      	ldr	r3, [sp, #12]
 800e034:	9901      	ldr	r1, [sp, #4]
 800e036:	4618      	mov	r0, r3
 800e038:	4690      	mov	r8, r2
 800e03a:	f7f2 febb 	bl	8000db4 <__aeabi_fmul>
 800e03e:	4601      	mov	r1, r0
 800e040:	4640      	mov	r0, r8
 800e042:	f7f2 fdaf 	bl	8000ba4 <__addsf3>
 800e046:	4603      	mov	r3, r0
 800e048:	9902      	ldr	r1, [sp, #8]
 800e04a:	4650      	mov	r0, sl
 800e04c:	461f      	mov	r7, r3
 800e04e:	f7f2 feb1 	bl	8000db4 <__aeabi_fmul>
 800e052:	4601      	mov	r1, r0
 800e054:	4638      	mov	r0, r7
 800e056:	f7f2 fda5 	bl	8000ba4 <__addsf3>
 800e05a:	4603      	mov	r3, r0
 800e05c:	9a00      	ldr	r2, [sp, #0]
 800e05e:	496d      	ldr	r1, [pc, #436]	; (800e214 <kalman_3gyro.constprop.0+0x618>)
 800e060:	f8d2 b4b4 	ldr.w	fp, [r2, #1204]	; 0x4b4
 800e064:	9317      	str	r3, [sp, #92]	; 0x5c
 800e066:	4658      	mov	r0, fp
 800e068:	f7f2 fea4 	bl	8000db4 <__aeabi_fmul>
 800e06c:	9b00      	ldr	r3, [sp, #0]
 800e06e:	4607      	mov	r7, r0
 800e070:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800e074:	f8d3 04b8 	ldr.w	r0, [r3, #1208]	; 0x4b8
 800e078:	f7f2 fe9c 	bl	8000db4 <__aeabi_fmul>
 800e07c:	9900      	ldr	r1, [sp, #0]
 800e07e:	f8d1 14c4 	ldr.w	r1, [r1, #1220]	; 0x4c4
 800e082:	f7f2 fd8d 	bl	8000ba0 <__aeabi_fsub>
 800e086:	9a00      	ldr	r2, [sp, #0]
 800e088:	f8d2 14dc 	ldr.w	r1, [r2, #1244]	; 0x4dc
 800e08c:	f7f2 fd8a 	bl	8000ba4 <__addsf3>
 800e090:	9b00      	ldr	r3, [sp, #0]
 800e092:	4680      	mov	r8, r0
 800e094:	f8d3 14e8 	ldr.w	r1, [r3, #1256]	; 0x4e8
 800e098:	4608      	mov	r0, r1
 800e09a:	f7f2 fd83 	bl	8000ba4 <__addsf3>
 800e09e:	4601      	mov	r1, r0
 800e0a0:	4640      	mov	r0, r8
 800e0a2:	f7f2 fd7f 	bl	8000ba4 <__addsf3>
 800e0a6:	4639      	mov	r1, r7
 800e0a8:	f7f2 fe84 	bl	8000db4 <__aeabi_fmul>
 800e0ac:	4681      	mov	r9, r0
 800e0ae:	9800      	ldr	r0, [sp, #0]
 800e0b0:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800e0b4:	f8d0 04bc 	ldr.w	r0, [r0, #1212]	; 0x4bc
 800e0b8:	f7f2 fe7c 	bl	8000db4 <__aeabi_fmul>
 800e0bc:	9a00      	ldr	r2, [sp, #0]
 800e0be:	f8d2 14c8 	ldr.w	r1, [r2, #1224]	; 0x4c8
 800e0c2:	f7f2 fd6d 	bl	8000ba0 <__aeabi_fsub>
 800e0c6:	9b00      	ldr	r3, [sp, #0]
 800e0c8:	f8d3 14e0 	ldr.w	r1, [r3, #1248]	; 0x4e0
 800e0cc:	f7f2 fd6a 	bl	8000ba4 <__addsf3>
 800e0d0:	9900      	ldr	r1, [sp, #0]
 800e0d2:	4680      	mov	r8, r0
 800e0d4:	f8d1 14ec 	ldr.w	r1, [r1, #1260]	; 0x4ec
 800e0d8:	4608      	mov	r0, r1
 800e0da:	f7f2 fd63 	bl	8000ba4 <__addsf3>
 800e0de:	4601      	mov	r1, r0
 800e0e0:	4640      	mov	r0, r8
 800e0e2:	f7f2 fd5f 	bl	8000ba4 <__addsf3>
 800e0e6:	4639      	mov	r1, r7
 800e0e8:	f7f2 fe64 	bl	8000db4 <__aeabi_fmul>
 800e0ec:	9a00      	ldr	r2, [sp, #0]
 800e0ee:	4680      	mov	r8, r0
 800e0f0:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800e0f4:	f8d2 04c0 	ldr.w	r0, [r2, #1216]	; 0x4c0
 800e0f8:	f7f2 fe5c 	bl	8000db4 <__aeabi_fmul>
 800e0fc:	9b00      	ldr	r3, [sp, #0]
 800e0fe:	f8d3 14cc 	ldr.w	r1, [r3, #1228]	; 0x4cc
 800e102:	f7f2 fd4d 	bl	8000ba0 <__aeabi_fsub>
 800e106:	9900      	ldr	r1, [sp, #0]
 800e108:	f8d1 14e4 	ldr.w	r1, [r1, #1252]	; 0x4e4
 800e10c:	f7f2 fd4a 	bl	8000ba4 <__addsf3>
 800e110:	9a00      	ldr	r2, [sp, #0]
 800e112:	4682      	mov	sl, r0
 800e114:	f8d2 14f0 	ldr.w	r1, [r2, #1264]	; 0x4f0
 800e118:	4608      	mov	r0, r1
 800e11a:	f7f2 fd43 	bl	8000ba4 <__addsf3>
 800e11e:	4601      	mov	r1, r0
 800e120:	4650      	mov	r0, sl
 800e122:	f7f2 fd3f 	bl	8000ba4 <__addsf3>
 800e126:	4639      	mov	r1, r7
 800e128:	f7f2 fe44 	bl	8000db4 <__aeabi_fmul>
 800e12c:	4649      	mov	r1, r9
 800e12e:	4607      	mov	r7, r0
 800e130:	4648      	mov	r0, r9
 800e132:	f7f2 fe3f 	bl	8000db4 <__aeabi_fmul>
 800e136:	4641      	mov	r1, r8
 800e138:	4680      	mov	r8, r0
 800e13a:	4608      	mov	r0, r1
 800e13c:	f7f2 fe3a 	bl	8000db4 <__aeabi_fmul>
 800e140:	4601      	mov	r1, r0
 800e142:	4640      	mov	r0, r8
 800e144:	f7f2 fd2e 	bl	8000ba4 <__addsf3>
 800e148:	4639      	mov	r1, r7
 800e14a:	4607      	mov	r7, r0
 800e14c:	4608      	mov	r0, r1
 800e14e:	f7f2 fe31 	bl	8000db4 <__aeabi_fmul>
 800e152:	4601      	mov	r1, r0
 800e154:	4638      	mov	r0, r7
 800e156:	f7f2 fd25 	bl	8000ba4 <__addsf3>
 800e15a:	f00a fb67 	bl	801882c <sqrtf>
 800e15e:	4603      	mov	r3, r0
 800e160:	9800      	ldr	r0, [sp, #0]
 800e162:	492c      	ldr	r1, [pc, #176]	; (800e214 <kalman_3gyro.constprop.0+0x618>)
 800e164:	f8d0 9624 	ldr.w	r9, [r0, #1572]	; 0x624
 800e168:	9316      	str	r3, [sp, #88]	; 0x58
 800e16a:	4648      	mov	r0, r9
 800e16c:	f7f2 fe22 	bl	8000db4 <__aeabi_fmul>
 800e170:	9b00      	ldr	r3, [sp, #0]
 800e172:	4607      	mov	r7, r0
 800e174:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800e178:	f8d3 0628 	ldr.w	r0, [r3, #1576]	; 0x628
 800e17c:	f7f2 fe1a 	bl	8000db4 <__aeabi_fmul>
 800e180:	9a00      	ldr	r2, [sp, #0]
 800e182:	f8d2 1634 	ldr.w	r1, [r2, #1588]	; 0x634
 800e186:	f7f2 fd0b 	bl	8000ba0 <__aeabi_fsub>
 800e18a:	9900      	ldr	r1, [sp, #0]
 800e18c:	f8d1 164c 	ldr.w	r1, [r1, #1612]	; 0x64c
 800e190:	f7f2 fd08 	bl	8000ba4 <__addsf3>
 800e194:	9b00      	ldr	r3, [sp, #0]
 800e196:	4680      	mov	r8, r0
 800e198:	f8d3 1658 	ldr.w	r1, [r3, #1624]	; 0x658
 800e19c:	4608      	mov	r0, r1
 800e19e:	f7f2 fd01 	bl	8000ba4 <__addsf3>
 800e1a2:	4601      	mov	r1, r0
 800e1a4:	4640      	mov	r0, r8
 800e1a6:	f7f2 fcfd 	bl	8000ba4 <__addsf3>
 800e1aa:	4639      	mov	r1, r7
 800e1ac:	f7f2 fe02 	bl	8000db4 <__aeabi_fmul>
 800e1b0:	9a00      	ldr	r2, [sp, #0]
 800e1b2:	4682      	mov	sl, r0
 800e1b4:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800e1b8:	f8d2 062c 	ldr.w	r0, [r2, #1580]	; 0x62c
 800e1bc:	f7f2 fdfa 	bl	8000db4 <__aeabi_fmul>
 800e1c0:	9900      	ldr	r1, [sp, #0]
 800e1c2:	f8d1 1638 	ldr.w	r1, [r1, #1592]	; 0x638
 800e1c6:	f7f2 fceb 	bl	8000ba0 <__aeabi_fsub>
 800e1ca:	9b00      	ldr	r3, [sp, #0]
 800e1cc:	f8d3 1650 	ldr.w	r1, [r3, #1616]	; 0x650
 800e1d0:	f7f2 fce8 	bl	8000ba4 <__addsf3>
 800e1d4:	9a00      	ldr	r2, [sp, #0]
 800e1d6:	4680      	mov	r8, r0
 800e1d8:	f8d2 165c 	ldr.w	r1, [r2, #1628]	; 0x65c
 800e1dc:	4608      	mov	r0, r1
 800e1de:	f7f2 fce1 	bl	8000ba4 <__addsf3>
 800e1e2:	4601      	mov	r1, r0
 800e1e4:	4640      	mov	r0, r8
 800e1e6:	f7f2 fcdd 	bl	8000ba4 <__addsf3>
 800e1ea:	4639      	mov	r1, r7
 800e1ec:	f7f2 fde2 	bl	8000db4 <__aeabi_fmul>
 800e1f0:	4680      	mov	r8, r0
 800e1f2:	9800      	ldr	r0, [sp, #0]
 800e1f4:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800e1f8:	f8d0 0630 	ldr.w	r0, [r0, #1584]	; 0x630
 800e1fc:	f7f2 fdda 	bl	8000db4 <__aeabi_fmul>
 800e200:	9b00      	ldr	r3, [sp, #0]
 800e202:	f8d3 163c 	ldr.w	r1, [r3, #1596]	; 0x63c
 800e206:	f7f2 fccb 	bl	8000ba0 <__aeabi_fsub>
 800e20a:	9a00      	ldr	r2, [sp, #0]
 800e20c:	e004      	b.n	800e218 <kalman_3gyro.constprop.0+0x61c>
 800e20e:	bf00      	nop
 800e210:	3c23d70a 	.word	0x3c23d70a
 800e214:	3dcccccd 	.word	0x3dcccccd
 800e218:	f8d2 1654 	ldr.w	r1, [r2, #1620]	; 0x654
 800e21c:	f7f2 fcc2 	bl	8000ba4 <__addsf3>
 800e220:	9900      	ldr	r1, [sp, #0]
 800e222:	9001      	str	r0, [sp, #4]
 800e224:	f8d1 1660 	ldr.w	r1, [r1, #1632]	; 0x660
 800e228:	4608      	mov	r0, r1
 800e22a:	f7f2 fcbb 	bl	8000ba4 <__addsf3>
 800e22e:	9b01      	ldr	r3, [sp, #4]
 800e230:	4601      	mov	r1, r0
 800e232:	4618      	mov	r0, r3
 800e234:	f7f2 fcb6 	bl	8000ba4 <__addsf3>
 800e238:	4639      	mov	r1, r7
 800e23a:	f7f2 fdbb 	bl	8000db4 <__aeabi_fmul>
 800e23e:	4651      	mov	r1, sl
 800e240:	4607      	mov	r7, r0
 800e242:	4650      	mov	r0, sl
 800e244:	f7f2 fdb6 	bl	8000db4 <__aeabi_fmul>
 800e248:	4641      	mov	r1, r8
 800e24a:	4680      	mov	r8, r0
 800e24c:	4608      	mov	r0, r1
 800e24e:	f7f2 fdb1 	bl	8000db4 <__aeabi_fmul>
 800e252:	4601      	mov	r1, r0
 800e254:	4640      	mov	r0, r8
 800e256:	f7f2 fca5 	bl	8000ba4 <__addsf3>
 800e25a:	4639      	mov	r1, r7
 800e25c:	4607      	mov	r7, r0
 800e25e:	4608      	mov	r0, r1
 800e260:	f7f2 fda8 	bl	8000db4 <__aeabi_fmul>
 800e264:	4601      	mov	r1, r0
 800e266:	4638      	mov	r0, r7
 800e268:	f7f2 fc9c 	bl	8000ba4 <__addsf3>
 800e26c:	f00a fade 	bl	801882c <sqrtf>
 800e270:	4603      	mov	r3, r0
 800e272:	9800      	ldr	r0, [sp, #0]
 800e274:	49b7      	ldr	r1, [pc, #732]	; (800e554 <kalman_3gyro.constprop.0+0x958>)
 800e276:	f8d0 0794 	ldr.w	r0, [r0, #1940]	; 0x794
 800e27a:	9313      	str	r3, [sp, #76]	; 0x4c
 800e27c:	f7f2 fd9a 	bl	8000db4 <__aeabi_fmul>
 800e280:	9b00      	ldr	r3, [sp, #0]
 800e282:	4607      	mov	r7, r0
 800e284:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800e288:	f8d3 0798 	ldr.w	r0, [r3, #1944]	; 0x798
 800e28c:	f7f2 fd92 	bl	8000db4 <__aeabi_fmul>
 800e290:	9a00      	ldr	r2, [sp, #0]
 800e292:	f8d2 17a4 	ldr.w	r1, [r2, #1956]	; 0x7a4
 800e296:	f7f2 fc83 	bl	8000ba0 <__aeabi_fsub>
 800e29a:	9900      	ldr	r1, [sp, #0]
 800e29c:	f8d1 17bc 	ldr.w	r1, [r1, #1980]	; 0x7bc
 800e2a0:	f7f2 fc80 	bl	8000ba4 <__addsf3>
 800e2a4:	9b00      	ldr	r3, [sp, #0]
 800e2a6:	4680      	mov	r8, r0
 800e2a8:	f8d3 17c8 	ldr.w	r1, [r3, #1992]	; 0x7c8
 800e2ac:	4608      	mov	r0, r1
 800e2ae:	f7f2 fc79 	bl	8000ba4 <__addsf3>
 800e2b2:	4601      	mov	r1, r0
 800e2b4:	4640      	mov	r0, r8
 800e2b6:	f7f2 fc75 	bl	8000ba4 <__addsf3>
 800e2ba:	4639      	mov	r1, r7
 800e2bc:	f7f2 fd7a 	bl	8000db4 <__aeabi_fmul>
 800e2c0:	9a00      	ldr	r2, [sp, #0]
 800e2c2:	4682      	mov	sl, r0
 800e2c4:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800e2c8:	f8d2 079c 	ldr.w	r0, [r2, #1948]	; 0x79c
 800e2cc:	f7f2 fd72 	bl	8000db4 <__aeabi_fmul>
 800e2d0:	9900      	ldr	r1, [sp, #0]
 800e2d2:	f8d1 17a8 	ldr.w	r1, [r1, #1960]	; 0x7a8
 800e2d6:	f7f2 fc63 	bl	8000ba0 <__aeabi_fsub>
 800e2da:	9b00      	ldr	r3, [sp, #0]
 800e2dc:	f8d3 17c0 	ldr.w	r1, [r3, #1984]	; 0x7c0
 800e2e0:	f7f2 fc60 	bl	8000ba4 <__addsf3>
 800e2e4:	9a00      	ldr	r2, [sp, #0]
 800e2e6:	4680      	mov	r8, r0
 800e2e8:	f8d2 17cc 	ldr.w	r1, [r2, #1996]	; 0x7cc
 800e2ec:	4608      	mov	r0, r1
 800e2ee:	f7f2 fc59 	bl	8000ba4 <__addsf3>
 800e2f2:	4601      	mov	r1, r0
 800e2f4:	4640      	mov	r0, r8
 800e2f6:	f7f2 fc55 	bl	8000ba4 <__addsf3>
 800e2fa:	4639      	mov	r1, r7
 800e2fc:	f7f2 fd5a 	bl	8000db4 <__aeabi_fmul>
 800e300:	4680      	mov	r8, r0
 800e302:	9800      	ldr	r0, [sp, #0]
 800e304:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800e308:	f8d0 07a0 	ldr.w	r0, [r0, #1952]	; 0x7a0
 800e30c:	f7f2 fd52 	bl	8000db4 <__aeabi_fmul>
 800e310:	9b00      	ldr	r3, [sp, #0]
 800e312:	f8d3 17ac 	ldr.w	r1, [r3, #1964]	; 0x7ac
 800e316:	f7f2 fc43 	bl	8000ba0 <__aeabi_fsub>
 800e31a:	9a00      	ldr	r2, [sp, #0]
 800e31c:	f8d2 17c4 	ldr.w	r1, [r2, #1988]	; 0x7c4
 800e320:	f7f2 fc40 	bl	8000ba4 <__addsf3>
 800e324:	9a00      	ldr	r2, [sp, #0]
 800e326:	9001      	str	r0, [sp, #4]
 800e328:	f8d2 17d0 	ldr.w	r1, [r2, #2000]	; 0x7d0
 800e32c:	4608      	mov	r0, r1
 800e32e:	f7f2 fc39 	bl	8000ba4 <__addsf3>
 800e332:	9b01      	ldr	r3, [sp, #4]
 800e334:	4601      	mov	r1, r0
 800e336:	4618      	mov	r0, r3
 800e338:	f7f2 fc34 	bl	8000ba4 <__addsf3>
 800e33c:	4639      	mov	r1, r7
 800e33e:	f7f2 fd39 	bl	8000db4 <__aeabi_fmul>
 800e342:	4651      	mov	r1, sl
 800e344:	4607      	mov	r7, r0
 800e346:	4650      	mov	r0, sl
 800e348:	f7f2 fd34 	bl	8000db4 <__aeabi_fmul>
 800e34c:	4641      	mov	r1, r8
 800e34e:	4680      	mov	r8, r0
 800e350:	4608      	mov	r0, r1
 800e352:	f7f2 fd2f 	bl	8000db4 <__aeabi_fmul>
 800e356:	4601      	mov	r1, r0
 800e358:	4640      	mov	r0, r8
 800e35a:	f7f2 fc23 	bl	8000ba4 <__addsf3>
 800e35e:	4639      	mov	r1, r7
 800e360:	4607      	mov	r7, r0
 800e362:	4608      	mov	r0, r1
 800e364:	f7f2 fd26 	bl	8000db4 <__aeabi_fmul>
 800e368:	4601      	mov	r1, r0
 800e36a:	4638      	mov	r0, r7
 800e36c:	f7f2 fc1a 	bl	8000ba4 <__addsf3>
 800e370:	f00a fa5c 	bl	801882c <sqrtf>
 800e374:	4603      	mov	r3, r0
 800e376:	4659      	mov	r1, fp
 800e378:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e37c:	931c      	str	r3, [sp, #112]	; 0x70
 800e37e:	f7f2 fdcd 	bl	8000f1c <__aeabi_fdiv>
 800e382:	4607      	mov	r7, r0
 800e384:	4630      	mov	r0, r6
 800e386:	4639      	mov	r1, r7
 800e388:	f7f2 fd14 	bl	8000db4 <__aeabi_fmul>
 800e38c:	4603      	mov	r3, r0
 800e38e:	4639      	mov	r1, r7
 800e390:	4628      	mov	r0, r5
 800e392:	461d      	mov	r5, r3
 800e394:	f7f2 fd0e 	bl	8000db4 <__aeabi_fmul>
 800e398:	4639      	mov	r1, r7
 800e39a:	4606      	mov	r6, r0
 800e39c:	4620      	mov	r0, r4
 800e39e:	f7f2 fd09 	bl	8000db4 <__aeabi_fmul>
 800e3a2:	f04f 4196 	mov.w	r1, #1258291200	; 0x4b000000
 800e3a6:	4604      	mov	r4, r0
 800e3a8:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800e3ac:	f7f2 fea0 	bl	80010f0 <__aeabi_fcmplt>
 800e3b0:	b198      	cbz	r0, 800e3da <kalman_3gyro.constprop.0+0x7de>
 800e3b2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e3b6:	4628      	mov	r0, r5
 800e3b8:	f7f2 feae 	bl	8001118 <__aeabi_fcmpge>
 800e3bc:	2800      	cmp	r0, #0
 800e3be:	f001 807c 	beq.w	800f4ba <kalman_3gyro.constprop.0+0x18be>
 800e3c2:	4628      	mov	r0, r5
 800e3c4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e3c8:	f7f2 fbec 	bl	8000ba4 <__addsf3>
 800e3cc:	f7f2 f88c 	bl	80004e8 <__aeabi_f2d>
 800e3d0:	f00a f886 	bl	80184e0 <floor>
 800e3d4:	f7f2 fb90 	bl	8000af8 <__aeabi_d2f>
 800e3d8:	4605      	mov	r5, r0
 800e3da:	f04f 4196 	mov.w	r1, #1258291200	; 0x4b000000
 800e3de:	f026 4000 	bic.w	r0, r6, #2147483648	; 0x80000000
 800e3e2:	952d      	str	r5, [sp, #180]	; 0xb4
 800e3e4:	f7f2 fe84 	bl	80010f0 <__aeabi_fcmplt>
 800e3e8:	b198      	cbz	r0, 800e412 <kalman_3gyro.constprop.0+0x816>
 800e3ea:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e3ee:	4630      	mov	r0, r6
 800e3f0:	f7f2 fe92 	bl	8001118 <__aeabi_fcmpge>
 800e3f4:	2800      	cmp	r0, #0
 800e3f6:	f001 8054 	beq.w	800f4a2 <kalman_3gyro.constprop.0+0x18a6>
 800e3fa:	4630      	mov	r0, r6
 800e3fc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e400:	f7f2 fbd0 	bl	8000ba4 <__addsf3>
 800e404:	f7f2 f870 	bl	80004e8 <__aeabi_f2d>
 800e408:	f00a f86a 	bl	80184e0 <floor>
 800e40c:	f7f2 fb74 	bl	8000af8 <__aeabi_d2f>
 800e410:	4606      	mov	r6, r0
 800e412:	f04f 4196 	mov.w	r1, #1258291200	; 0x4b000000
 800e416:	f024 4000 	bic.w	r0, r4, #2147483648	; 0x80000000
 800e41a:	962e      	str	r6, [sp, #184]	; 0xb8
 800e41c:	f7f2 fe68 	bl	80010f0 <__aeabi_fcmplt>
 800e420:	b198      	cbz	r0, 800e44a <kalman_3gyro.constprop.0+0x84e>
 800e422:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e426:	4620      	mov	r0, r4
 800e428:	f7f2 fe76 	bl	8001118 <__aeabi_fcmpge>
 800e42c:	2800      	cmp	r0, #0
 800e42e:	f001 802c 	beq.w	800f48a <kalman_3gyro.constprop.0+0x188e>
 800e432:	4620      	mov	r0, r4
 800e434:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e438:	f7f2 fbb4 	bl	8000ba4 <__addsf3>
 800e43c:	f7f2 f854 	bl	80004e8 <__aeabi_f2d>
 800e440:	f00a f84e 	bl	80184e0 <floor>
 800e444:	f7f2 fb58 	bl	8000af8 <__aeabi_d2f>
 800e448:	4604      	mov	r4, r0
 800e44a:	9900      	ldr	r1, [sp, #0]
 800e44c:	942f      	str	r4, [sp, #188]	; 0xbc
 800e44e:	f891 74b1 	ldrb.w	r7, [r1, #1201]	; 0x4b1
 800e452:	1e7b      	subs	r3, r7, #1
 800e454:	b25b      	sxtb	r3, r3
 800e456:	2b00      	cmp	r3, #0
 800e458:	dd1f      	ble.n	800e49a <kalman_3gyro.constprop.0+0x89e>
 800e45a:	1eba      	subs	r2, r7, #2
 800e45c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e460:	b2d2      	uxtb	r2, r2
 800e462:	f1a1 000c 	sub.w	r0, r1, #12
 800e466:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800e46a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800e46e:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
 800e472:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800e476:	f8d3 24ac 	ldr.w	r2, [r3, #1196]	; 0x4ac
 800e47a:	f8d3 14b0 	ldr.w	r1, [r3, #1200]	; 0x4b0
 800e47e:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
 800e482:	f8d3 24b4 	ldr.w	r2, [r3, #1204]	; 0x4b4
 800e486:	f8c3 14bc 	str.w	r1, [r3, #1212]	; 0x4bc
 800e48a:	f8c3 24c0 	str.w	r2, [r3, #1216]	; 0x4c0
 800e48e:	3b0c      	subs	r3, #12
 800e490:	4298      	cmp	r0, r3
 800e492:	d1f0      	bne.n	800e476 <kalman_3gyro.constprop.0+0x87a>
 800e494:	9b00      	ldr	r3, [sp, #0]
 800e496:	f8d3 9624 	ldr.w	r9, [r3, #1572]	; 0x624
 800e49a:	9a00      	ldr	r2, [sp, #0]
 800e49c:	4649      	mov	r1, r9
 800e49e:	f892 34b0 	ldrb.w	r3, [r2, #1200]	; 0x4b0
 800e4a2:	f8c2 54b8 	str.w	r5, [r2, #1208]	; 0x4b8
 800e4a6:	3301      	adds	r3, #1
 800e4a8:	b2db      	uxtb	r3, r3
 800e4aa:	429f      	cmp	r7, r3
 800e4ac:	bf28      	it	cs
 800e4ae:	461f      	movcs	r7, r3
 800e4b0:	f8c2 64bc 	str.w	r6, [r2, #1212]	; 0x4bc
 800e4b4:	f8c2 44c0 	str.w	r4, [r2, #1216]	; 0x4c0
 800e4b8:	f882 74b0 	strb.w	r7, [r2, #1200]	; 0x4b0
 800e4bc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e4c0:	f7f2 fd2c 	bl	8000f1c <__aeabi_fdiv>
 800e4c4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e4c6:	4606      	mov	r6, r0
 800e4c8:	68f9      	ldr	r1, [r7, #12]
 800e4ca:	f7f2 fc73 	bl	8000db4 <__aeabi_fmul>
 800e4ce:	6939      	ldr	r1, [r7, #16]
 800e4d0:	4605      	mov	r5, r0
 800e4d2:	4630      	mov	r0, r6
 800e4d4:	f7f2 fc6e 	bl	8000db4 <__aeabi_fmul>
 800e4d8:	6979      	ldr	r1, [r7, #20]
 800e4da:	4604      	mov	r4, r0
 800e4dc:	4630      	mov	r0, r6
 800e4de:	f7f2 fc69 	bl	8000db4 <__aeabi_fmul>
 800e4e2:	f04f 4196 	mov.w	r1, #1258291200	; 0x4b000000
 800e4e6:	4606      	mov	r6, r0
 800e4e8:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800e4ec:	f7f2 fe00 	bl	80010f0 <__aeabi_fcmplt>
 800e4f0:	b198      	cbz	r0, 800e51a <kalman_3gyro.constprop.0+0x91e>
 800e4f2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e4f6:	4628      	mov	r0, r5
 800e4f8:	f7f2 fe0e 	bl	8001118 <__aeabi_fcmpge>
 800e4fc:	2800      	cmp	r0, #0
 800e4fe:	f000 87b8 	beq.w	800f472 <kalman_3gyro.constprop.0+0x1876>
 800e502:	4628      	mov	r0, r5
 800e504:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e508:	f7f2 fb4c 	bl	8000ba4 <__addsf3>
 800e50c:	f7f1 ffec 	bl	80004e8 <__aeabi_f2d>
 800e510:	f009 ffe6 	bl	80184e0 <floor>
 800e514:	f7f2 faf0 	bl	8000af8 <__aeabi_d2f>
 800e518:	4605      	mov	r5, r0
 800e51a:	f04f 4196 	mov.w	r1, #1258291200	; 0x4b000000
 800e51e:	f024 4000 	bic.w	r0, r4, #2147483648	; 0x80000000
 800e522:	952d      	str	r5, [sp, #180]	; 0xb4
 800e524:	f7f2 fde4 	bl	80010f0 <__aeabi_fcmplt>
 800e528:	b1b0      	cbz	r0, 800e558 <kalman_3gyro.constprop.0+0x95c>
 800e52a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e52e:	4620      	mov	r0, r4
 800e530:	f7f2 fdf2 	bl	8001118 <__aeabi_fcmpge>
 800e534:	2800      	cmp	r0, #0
 800e536:	f000 8790 	beq.w	800f45a <kalman_3gyro.constprop.0+0x185e>
 800e53a:	4620      	mov	r0, r4
 800e53c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e540:	f7f2 fb30 	bl	8000ba4 <__addsf3>
 800e544:	f7f1 ffd0 	bl	80004e8 <__aeabi_f2d>
 800e548:	f009 ffca 	bl	80184e0 <floor>
 800e54c:	f7f2 fad4 	bl	8000af8 <__aeabi_d2f>
 800e550:	4604      	mov	r4, r0
 800e552:	e001      	b.n	800e558 <kalman_3gyro.constprop.0+0x95c>
 800e554:	3dcccccd 	.word	0x3dcccccd
 800e558:	f04f 4196 	mov.w	r1, #1258291200	; 0x4b000000
 800e55c:	f026 4000 	bic.w	r0, r6, #2147483648	; 0x80000000
 800e560:	942e      	str	r4, [sp, #184]	; 0xb8
 800e562:	f7f2 fdc5 	bl	80010f0 <__aeabi_fcmplt>
 800e566:	b198      	cbz	r0, 800e590 <kalman_3gyro.constprop.0+0x994>
 800e568:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e56c:	4630      	mov	r0, r6
 800e56e:	f7f2 fdd3 	bl	8001118 <__aeabi_fcmpge>
 800e572:	2800      	cmp	r0, #0
 800e574:	f000 8765 	beq.w	800f442 <kalman_3gyro.constprop.0+0x1846>
 800e578:	4630      	mov	r0, r6
 800e57a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e57e:	f7f2 fb11 	bl	8000ba4 <__addsf3>
 800e582:	f7f1 ffb1 	bl	80004e8 <__aeabi_f2d>
 800e586:	f009 ffab 	bl	80184e0 <floor>
 800e58a:	f7f2 fab5 	bl	8000af8 <__aeabi_d2f>
 800e58e:	4606      	mov	r6, r0
 800e590:	9b00      	ldr	r3, [sp, #0]
 800e592:	962f      	str	r6, [sp, #188]	; 0xbc
 800e594:	f893 7621 	ldrb.w	r7, [r3, #1569]	; 0x621
 800e598:	1e7b      	subs	r3, r7, #1
 800e59a:	b25b      	sxtb	r3, r3
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	dd1d      	ble.n	800e5dc <kalman_3gyro.constprop.0+0x9e0>
 800e5a0:	9900      	ldr	r1, [sp, #0]
 800e5a2:	1eba      	subs	r2, r7, #2
 800e5a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e5a8:	b2d2      	uxtb	r2, r2
 800e5aa:	f1a1 000c 	sub.w	r0, r1, #12
 800e5ae:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800e5b2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800e5b6:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
 800e5ba:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800e5be:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 800e5c2:	f8d3 1620 	ldr.w	r1, [r3, #1568]	; 0x620
 800e5c6:	f8c3 2628 	str.w	r2, [r3, #1576]	; 0x628
 800e5ca:	f8d3 2624 	ldr.w	r2, [r3, #1572]	; 0x624
 800e5ce:	f8c3 162c 	str.w	r1, [r3, #1580]	; 0x62c
 800e5d2:	f8c3 2630 	str.w	r2, [r3, #1584]	; 0x630
 800e5d6:	3b0c      	subs	r3, #12
 800e5d8:	4283      	cmp	r3, r0
 800e5da:	d1f0      	bne.n	800e5be <kalman_3gyro.constprop.0+0x9c2>
 800e5dc:	9a00      	ldr	r2, [sp, #0]
 800e5de:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e5e2:	f892 3620 	ldrb.w	r3, [r2, #1568]	; 0x620
 800e5e6:	f8d2 1794 	ldr.w	r1, [r2, #1940]	; 0x794
 800e5ea:	3301      	adds	r3, #1
 800e5ec:	b2db      	uxtb	r3, r3
 800e5ee:	429f      	cmp	r7, r3
 800e5f0:	bf28      	it	cs
 800e5f2:	461f      	movcs	r7, r3
 800e5f4:	f8c2 5628 	str.w	r5, [r2, #1576]	; 0x628
 800e5f8:	f8c2 462c 	str.w	r4, [r2, #1580]	; 0x62c
 800e5fc:	f8c2 6630 	str.w	r6, [r2, #1584]	; 0x630
 800e600:	f882 7620 	strb.w	r7, [r2, #1568]	; 0x620
 800e604:	f7f2 fc8a 	bl	8000f1c <__aeabi_fdiv>
 800e608:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e60a:	4606      	mov	r6, r0
 800e60c:	69b9      	ldr	r1, [r7, #24]
 800e60e:	f7f2 fbd1 	bl	8000db4 <__aeabi_fmul>
 800e612:	69f9      	ldr	r1, [r7, #28]
 800e614:	4605      	mov	r5, r0
 800e616:	4630      	mov	r0, r6
 800e618:	f7f2 fbcc 	bl	8000db4 <__aeabi_fmul>
 800e61c:	6a39      	ldr	r1, [r7, #32]
 800e61e:	4604      	mov	r4, r0
 800e620:	4630      	mov	r0, r6
 800e622:	f7f2 fbc7 	bl	8000db4 <__aeabi_fmul>
 800e626:	f04f 4196 	mov.w	r1, #1258291200	; 0x4b000000
 800e62a:	4606      	mov	r6, r0
 800e62c:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800e630:	f7f2 fd5e 	bl	80010f0 <__aeabi_fcmplt>
 800e634:	b198      	cbz	r0, 800e65e <kalman_3gyro.constprop.0+0xa62>
 800e636:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e63a:	4628      	mov	r0, r5
 800e63c:	f7f2 fd6c 	bl	8001118 <__aeabi_fcmpge>
 800e640:	2800      	cmp	r0, #0
 800e642:	f000 86f2 	beq.w	800f42a <kalman_3gyro.constprop.0+0x182e>
 800e646:	4628      	mov	r0, r5
 800e648:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e64c:	f7f2 faaa 	bl	8000ba4 <__addsf3>
 800e650:	f7f1 ff4a 	bl	80004e8 <__aeabi_f2d>
 800e654:	f009 ff44 	bl	80184e0 <floor>
 800e658:	f7f2 fa4e 	bl	8000af8 <__aeabi_d2f>
 800e65c:	4605      	mov	r5, r0
 800e65e:	f04f 4196 	mov.w	r1, #1258291200	; 0x4b000000
 800e662:	f024 4000 	bic.w	r0, r4, #2147483648	; 0x80000000
 800e666:	952d      	str	r5, [sp, #180]	; 0xb4
 800e668:	f7f2 fd42 	bl	80010f0 <__aeabi_fcmplt>
 800e66c:	b198      	cbz	r0, 800e696 <kalman_3gyro.constprop.0+0xa9a>
 800e66e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e672:	4620      	mov	r0, r4
 800e674:	f7f2 fd50 	bl	8001118 <__aeabi_fcmpge>
 800e678:	2800      	cmp	r0, #0
 800e67a:	f000 86ca 	beq.w	800f412 <kalman_3gyro.constprop.0+0x1816>
 800e67e:	4620      	mov	r0, r4
 800e680:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e684:	f7f2 fa8e 	bl	8000ba4 <__addsf3>
 800e688:	f7f1 ff2e 	bl	80004e8 <__aeabi_f2d>
 800e68c:	f009 ff28 	bl	80184e0 <floor>
 800e690:	f7f2 fa32 	bl	8000af8 <__aeabi_d2f>
 800e694:	4604      	mov	r4, r0
 800e696:	f04f 4196 	mov.w	r1, #1258291200	; 0x4b000000
 800e69a:	f026 4000 	bic.w	r0, r6, #2147483648	; 0x80000000
 800e69e:	942e      	str	r4, [sp, #184]	; 0xb8
 800e6a0:	f7f2 fd26 	bl	80010f0 <__aeabi_fcmplt>
 800e6a4:	b198      	cbz	r0, 800e6ce <kalman_3gyro.constprop.0+0xad2>
 800e6a6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e6aa:	4630      	mov	r0, r6
 800e6ac:	f7f2 fd34 	bl	8001118 <__aeabi_fcmpge>
 800e6b0:	2800      	cmp	r0, #0
 800e6b2:	f000 86a2 	beq.w	800f3fa <kalman_3gyro.constprop.0+0x17fe>
 800e6b6:	4630      	mov	r0, r6
 800e6b8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e6bc:	f7f2 fa72 	bl	8000ba4 <__addsf3>
 800e6c0:	f7f1 ff12 	bl	80004e8 <__aeabi_f2d>
 800e6c4:	f009 ff0c 	bl	80184e0 <floor>
 800e6c8:	f7f2 fa16 	bl	8000af8 <__aeabi_d2f>
 800e6cc:	4606      	mov	r6, r0
 800e6ce:	9b00      	ldr	r3, [sp, #0]
 800e6d0:	962f      	str	r6, [sp, #188]	; 0xbc
 800e6d2:	f893 7791 	ldrb.w	r7, [r3, #1937]	; 0x791
 800e6d6:	1e7b      	subs	r3, r7, #1
 800e6d8:	b25b      	sxtb	r3, r3
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	dd1d      	ble.n	800e71a <kalman_3gyro.constprop.0+0xb1e>
 800e6de:	9900      	ldr	r1, [sp, #0]
 800e6e0:	1eba      	subs	r2, r7, #2
 800e6e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e6e6:	b2d2      	uxtb	r2, r2
 800e6e8:	f1a1 000c 	sub.w	r0, r1, #12
 800e6ec:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800e6f0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800e6f4:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
 800e6f8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800e6fc:	f8d3 278c 	ldr.w	r2, [r3, #1932]	; 0x78c
 800e700:	f8d3 1790 	ldr.w	r1, [r3, #1936]	; 0x790
 800e704:	f8c3 2798 	str.w	r2, [r3, #1944]	; 0x798
 800e708:	f8d3 2794 	ldr.w	r2, [r3, #1940]	; 0x794
 800e70c:	f8c3 179c 	str.w	r1, [r3, #1948]	; 0x79c
 800e710:	f8c3 27a0 	str.w	r2, [r3, #1952]	; 0x7a0
 800e714:	3b0c      	subs	r3, #12
 800e716:	4298      	cmp	r0, r3
 800e718:	d1f0      	bne.n	800e6fc <kalman_3gyro.constprop.0+0xb00>
 800e71a:	9a00      	ldr	r2, [sp, #0]
 800e71c:	a927      	add	r1, sp, #156	; 0x9c
 800e71e:	f892 3790 	ldrb.w	r3, [r2, #1936]	; 0x790
 800e722:	f8c2 5798 	str.w	r5, [r2, #1944]	; 0x798
 800e726:	3301      	adds	r3, #1
 800e728:	b2db      	uxtb	r3, r3
 800e72a:	429f      	cmp	r7, r3
 800e72c:	bf28      	it	cs
 800e72e:	461f      	movcs	r7, r3
 800e730:	4613      	mov	r3, r2
 800e732:	f8c2 479c 	str.w	r4, [r2, #1948]	; 0x79c
 800e736:	f8c2 67a0 	str.w	r6, [r2, #1952]	; 0x7a0
 800e73a:	f882 7790 	strb.w	r7, [r2, #1936]	; 0x790
 800e73e:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 800e742:	4616      	mov	r6, r2
 800e744:	a82a      	add	r0, sp, #168	; 0xa8
 800e746:	aa4e      	add	r2, sp, #312	; 0x138
 800e748:	461d      	mov	r5, r3
 800e74a:	9319      	str	r3, [sp, #100]	; 0x64
 800e74c:	f7fe f976 	bl	800ca3c <getRotationMatrix>
 800e750:	f20d 44bc 	addw	r4, sp, #1212	; 0x4bc
 800e754:	f506 774f 	add.w	r7, r6, #828	; 0x33c
 800e758:	4626      	mov	r6, r4
 800e75a:	6828      	ldr	r0, [r5, #0]
 800e75c:	6869      	ldr	r1, [r5, #4]
 800e75e:	68aa      	ldr	r2, [r5, #8]
 800e760:	68eb      	ldr	r3, [r5, #12]
 800e762:	3510      	adds	r5, #16
 800e764:	42bd      	cmp	r5, r7
 800e766:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e768:	f104 0410 	add.w	r4, r4, #16
 800e76c:	d1f4      	bne.n	800e758 <kalman_3gyro.constprop.0+0xb5c>
 800e76e:	9b00      	ldr	r3, [sp, #0]
 800e770:	6828      	ldr	r0, [r5, #0]
 800e772:	f8d3 1320 	ldr.w	r1, [r3, #800]	; 0x320
 800e776:	f8d3 631c 	ldr.w	r6, [r3, #796]	; 0x31c
 800e77a:	f021 4500 	bic.w	r5, r1, #2147483648	; 0x80000000
 800e77e:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 800e782:	6020      	str	r0, [r4, #0]
 800e784:	4629      	mov	r1, r5
 800e786:	4630      	mov	r0, r6
 800e788:	f7f2 fcb2 	bl	80010f0 <__aeabi_fcmplt>
 800e78c:	2800      	cmp	r0, #0
 800e78e:	f000 85bb 	beq.w	800f308 <kalman_3gyro.constprop.0+0x170c>
 800e792:	2307      	movs	r3, #7
 800e794:	f04f 0a04 	mov.w	sl, #4
 800e798:	2700      	movs	r7, #0
 800e79a:	9303      	str	r3, [sp, #12]
 800e79c:	2301      	movs	r3, #1
 800e79e:	462e      	mov	r6, r5
 800e7a0:	46d1      	mov	r9, sl
 800e7a2:	46bb      	mov	fp, r7
 800e7a4:	2506      	movs	r5, #6
 800e7a6:	2403      	movs	r4, #3
 800e7a8:	9302      	str	r3, [sp, #8]
 800e7aa:	9b00      	ldr	r3, [sp, #0]
 800e7ac:	4631      	mov	r1, r6
 800e7ae:	f8d3 0324 	ldr.w	r0, [r3, #804]	; 0x324
 800e7b2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e7b6:	f7f2 fcb9 	bl	800112c <__aeabi_fcmpgt>
 800e7ba:	2800      	cmp	r0, #0
 800e7bc:	f000 859d 	beq.w	800f2fa <kalman_3gyro.constprop.0+0x16fe>
 800e7c0:	2308      	movs	r3, #8
 800e7c2:	4699      	mov	r9, r3
 800e7c4:	9303      	str	r3, [sp, #12]
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	2404      	movs	r4, #4
 800e7ca:	9301      	str	r3, [sp, #4]
 800e7cc:	2302      	movs	r3, #2
 800e7ce:	4627      	mov	r7, r4
 800e7d0:	2606      	movs	r6, #6
 800e7d2:	2507      	movs	r5, #7
 800e7d4:	f04f 0803 	mov.w	r8, #3
 800e7d8:	f04f 0a05 	mov.w	sl, #5
 800e7dc:	f04f 0b01 	mov.w	fp, #1
 800e7e0:	9302      	str	r3, [sp, #8]
 800e7e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e7e4:	f853 1009 	ldr.w	r1, [r3, r9]
 800e7e8:	59d8      	ldr	r0, [r3, r7]
 800e7ea:	f7f2 fb97 	bl	8000f1c <__aeabi_fdiv>
 800e7ee:	f20d 43bc 	addw	r3, sp, #1212	; 0x4bc
 800e7f2:	9f01      	ldr	r7, [sp, #4]
 800e7f4:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800e7f8:	9b02      	ldr	r3, [sp, #8]
 800e7fa:	f20d 42bc 	addw	r2, sp, #1212	; 0x4bc
 800e7fe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800e802:	f852 0027 	ldr.w	r0, [r2, r7, lsl #2]
 800e806:	f7f2 fb89 	bl	8000f1c <__aeabi_fdiv>
 800e80a:	f20d 42bc 	addw	r2, sp, #1212	; 0x4bc
 800e80e:	f842 0027 	str.w	r0, [r2, r7, lsl #2]
 800e812:	f852 302b 	ldr.w	r3, [r2, fp, lsl #2]
 800e816:	f852 102a 	ldr.w	r1, [r2, sl, lsl #2]
 800e81a:	4681      	mov	r9, r0
 800e81c:	4618      	mov	r0, r3
 800e81e:	9304      	str	r3, [sp, #16]
 800e820:	9701      	str	r7, [sp, #4]
 800e822:	f7f2 fac7 	bl	8000db4 <__aeabi_fmul>
 800e826:	f20d 42bc 	addw	r2, sp, #1212	; 0x4bc
 800e82a:	4601      	mov	r1, r0
 800e82c:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 800e830:	f7f2 f9b6 	bl	8000ba0 <__aeabi_fsub>
 800e834:	f20d 42bc 	addw	r2, sp, #1212	; 0x4bc
 800e838:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 800e83c:	f852 102a 	ldr.w	r1, [r2, sl, lsl #2]
 800e840:	4648      	mov	r0, r9
 800e842:	f7f2 fab7 	bl	8000db4 <__aeabi_fmul>
 800e846:	f20d 42bc 	addw	r2, sp, #1212	; 0x4bc
 800e84a:	4601      	mov	r1, r0
 800e84c:	f852 0028 	ldr.w	r0, [r2, r8, lsl #2]
 800e850:	f7f2 f9a6 	bl	8000ba0 <__aeabi_fsub>
 800e854:	f20d 42bc 	addw	r2, sp, #1212	; 0x4bc
 800e858:	9b04      	ldr	r3, [sp, #16]
 800e85a:	f842 0028 	str.w	r0, [r2, r8, lsl #2]
 800e85e:	9a03      	ldr	r2, [sp, #12]
 800e860:	f20d 41bc 	addw	r1, sp, #1212	; 0x4bc
 800e864:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800e868:	4607      	mov	r7, r0
 800e86a:	4618      	mov	r0, r3
 800e86c:	f7f2 faa2 	bl	8000db4 <__aeabi_fmul>
 800e870:	4601      	mov	r1, r0
 800e872:	f20d 40bc 	addw	r0, sp, #1212	; 0x4bc
 800e876:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 800e87a:	f7f2 f991 	bl	8000ba0 <__aeabi_fsub>
 800e87e:	9a03      	ldr	r2, [sp, #12]
 800e880:	f20d 41bc 	addw	r1, sp, #1212	; 0x4bc
 800e884:	f841 0025 	str.w	r0, [r1, r5, lsl #2]
 800e888:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800e88c:	4648      	mov	r0, r9
 800e88e:	f7f2 fa91 	bl	8000db4 <__aeabi_fmul>
 800e892:	f20d 42bc 	addw	r2, sp, #1212	; 0x4bc
 800e896:	4601      	mov	r1, r0
 800e898:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 800e89c:	f7f2 f980 	bl	8000ba0 <__aeabi_fsub>
 800e8a0:	f20d 42bc 	addw	r2, sp, #1212	; 0x4bc
 800e8a4:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
 800e8a8:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 800e8ac:	f027 4000 	bic.w	r0, r7, #2147483648	; 0x80000000
 800e8b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e8b4:	f7f2 fc3a 	bl	800112c <__aeabi_fcmpgt>
 800e8b8:	b148      	cbz	r0, 800e8ce <kalman_3gyro.constprop.0+0xcd2>
 800e8ba:	4631      	mov	r1, r6
 800e8bc:	4642      	mov	r2, r8
 800e8be:	465b      	mov	r3, fp
 800e8c0:	462e      	mov	r6, r5
 800e8c2:	46a0      	mov	r8, r4
 800e8c4:	460d      	mov	r5, r1
 800e8c6:	4614      	mov	r4, r2
 800e8c8:	f8dd b004 	ldr.w	fp, [sp, #4]
 800e8cc:	9301      	str	r3, [sp, #4]
 800e8ce:	f20d 43bc 	addw	r3, sp, #1212	; 0x4bc
 800e8d2:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 800e8d6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e8da:	f7f2 fb1f 	bl	8000f1c <__aeabi_fdiv>
 800e8de:	f20d 43bc 	addw	r3, sp, #1212	; 0x4bc
 800e8e2:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800e8e6:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 800e8ea:	4607      	mov	r7, r0
 800e8ec:	f7f2 fa62 	bl	8000db4 <__aeabi_fmul>
 800e8f0:	f20d 43bc 	addw	r3, sp, #1212	; 0x4bc
 800e8f4:	4601      	mov	r1, r0
 800e8f6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e8fa:	f7f2 f951 	bl	8000ba0 <__aeabi_fsub>
 800e8fe:	4601      	mov	r1, r0
 800e900:	f20d 43bc 	addw	r3, sp, #1212	; 0x4bc
 800e904:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
 800e908:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e90c:	f7f2 fb06 	bl	8000f1c <__aeabi_fdiv>
 800e910:	4603      	mov	r3, r0
 800e912:	f20d 42bc 	addw	r2, sp, #1212	; 0x4bc
 800e916:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 800e91a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e91e:	9304      	str	r3, [sp, #16]
 800e920:	f7f2 fafc 	bl	8000f1c <__aeabi_fdiv>
 800e924:	4603      	mov	r3, r0
 800e926:	9c02      	ldr	r4, [sp, #8]
 800e928:	f20d 41bc 	addw	r1, sp, #1212	; 0x4bc
 800e92c:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
 800e930:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e934:	9305      	str	r3, [sp, #20]
 800e936:	f7f2 faf1 	bl	8000f1c <__aeabi_fdiv>
 800e93a:	4602      	mov	r2, r0
 800e93c:	f50d 60f6 	add.w	r0, sp, #1968	; 0x7b0
 800e940:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 800e944:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 800e948:	f20d 40bc 	addw	r0, sp, #1212	; 0x4bc
 800e94c:	681e      	ldr	r6, [r3, #0]
 800e94e:	9402      	str	r4, [sp, #8]
 800e950:	f850 402b 	ldr.w	r4, [r0, fp, lsl #2]
 800e954:	f50d 60f6 	add.w	r0, sp, #1968	; 0x7b0
 800e958:	4631      	mov	r1, r6
 800e95a:	eb00 088b 	add.w	r8, r0, fp, lsl #2
 800e95e:	4620      	mov	r0, r4
 800e960:	9206      	str	r2, [sp, #24]
 800e962:	f7f2 fa27 	bl	8000db4 <__aeabi_fmul>
 800e966:	f5a8 68cf 	sub.w	r8, r8, #1656	; 0x678
 800e96a:	4601      	mov	r1, r0
 800e96c:	f8d8 0000 	ldr.w	r0, [r8]
 800e970:	f7f2 f916 	bl	8000ba0 <__aeabi_fsub>
 800e974:	4680      	mov	r8, r0
 800e976:	9801      	ldr	r0, [sp, #4]
 800e978:	f20d 4cbc 	addw	ip, sp, #1212	; 0x4bc
 800e97c:	f85c 2020 	ldr.w	r2, [ip, r0, lsl #2]
 800e980:	f50d 6cf6 	add.w	ip, sp, #1968	; 0x7b0
 800e984:	eb0c 0980 	add.w	r9, ip, r0, lsl #2
 800e988:	4631      	mov	r1, r6
 800e98a:	4610      	mov	r0, r2
 800e98c:	920b      	str	r2, [sp, #44]	; 0x2c
 800e98e:	f7f2 fa11 	bl	8000db4 <__aeabi_fmul>
 800e992:	f5a9 69cf 	sub.w	r9, r9, #1656	; 0x678
 800e996:	4601      	mov	r1, r0
 800e998:	f8d9 0000 	ldr.w	r0, [r9]
 800e99c:	f7f2 f900 	bl	8000ba0 <__aeabi_fsub>
 800e9a0:	4639      	mov	r1, r7
 800e9a2:	4681      	mov	r9, r0
 800e9a4:	4640      	mov	r0, r8
 800e9a6:	f7f2 fa05 	bl	8000db4 <__aeabi_fmul>
 800e9aa:	4601      	mov	r1, r0
 800e9ac:	4648      	mov	r0, r9
 800e9ae:	f7f2 f8f7 	bl	8000ba0 <__aeabi_fsub>
 800e9b2:	9904      	ldr	r1, [sp, #16]
 800e9b4:	f7f2 f9fe 	bl	8000db4 <__aeabi_fmul>
 800e9b8:	4684      	mov	ip, r0
 800e9ba:	f20d 4ebc 	addw	lr, sp, #1212	; 0x4bc
 800e9be:	f85e e025 	ldr.w	lr, [lr, r5, lsl #2]
 800e9c2:	4601      	mov	r1, r0
 800e9c4:	9008      	str	r0, [sp, #32]
 800e9c6:	4670      	mov	r0, lr
 800e9c8:	4665      	mov	r5, ip
 800e9ca:	f8cd e01c 	str.w	lr, [sp, #28]
 800e9ce:	f8cd c11c 	str.w	ip, [sp, #284]	; 0x11c
 800e9d2:	f7f2 f9ef 	bl	8000db4 <__aeabi_fmul>
 800e9d6:	4601      	mov	r1, r0
 800e9d8:	4640      	mov	r0, r8
 800e9da:	f7f2 f8e1 	bl	8000ba0 <__aeabi_fsub>
 800e9de:	9905      	ldr	r1, [sp, #20]
 800e9e0:	f7f2 f9e8 	bl	8000db4 <__aeabi_fmul>
 800e9e4:	4681      	mov	r9, r0
 800e9e6:	900a      	str	r0, [sp, #40]	; 0x28
 800e9e8:	9b03      	ldr	r3, [sp, #12]
 800e9ea:	f20d 48bc 	addw	r8, sp, #1212	; 0x4bc
 800e9ee:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800e9f2:	4629      	mov	r1, r5
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	9303      	str	r3, [sp, #12]
 800e9f8:	f8cd 9118 	str.w	r9, [sp, #280]	; 0x118
 800e9fc:	f7f2 f9da 	bl	8000db4 <__aeabi_fmul>
 800ea00:	4601      	mov	r1, r0
 800ea02:	4630      	mov	r0, r6
 800ea04:	f7f2 f8cc 	bl	8000ba0 <__aeabi_fsub>
 800ea08:	f20d 45bc 	addw	r5, sp, #1212	; 0x4bc
 800ea0c:	f855 802a 	ldr.w	r8, [r5, sl, lsl #2]
 800ea10:	4649      	mov	r1, r9
 800ea12:	4605      	mov	r5, r0
 800ea14:	4640      	mov	r0, r8
 800ea16:	f7f2 f9cd 	bl	8000db4 <__aeabi_fmul>
 800ea1a:	4601      	mov	r1, r0
 800ea1c:	4628      	mov	r0, r5
 800ea1e:	f7f2 f8bf 	bl	8000ba0 <__aeabi_fsub>
 800ea22:	9906      	ldr	r1, [sp, #24]
 800ea24:	f7f2 f9c6 	bl	8000db4 <__aeabi_fmul>
 800ea28:	4682      	mov	sl, r0
 800ea2a:	9b02      	ldr	r3, [sp, #8]
 800ea2c:	f50d 65f6 	add.w	r5, sp, #1968	; 0x7b0
 800ea30:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800ea34:	f2a3 636c 	subw	r3, r3, #1644	; 0x66c
 800ea38:	f8d3 9000 	ldr.w	r9, [r3]
 800ea3c:	4620      	mov	r0, r4
 800ea3e:	4649      	mov	r1, r9
 800ea40:	f8cd a114 	str.w	sl, [sp, #276]	; 0x114
 800ea44:	f7f2 f9b6 	bl	8000db4 <__aeabi_fmul>
 800ea48:	eb05 058b 	add.w	r5, r5, fp, lsl #2
 800ea4c:	f2a5 656c 	subw	r5, r5, #1644	; 0x66c
 800ea50:	4601      	mov	r1, r0
 800ea52:	6828      	ldr	r0, [r5, #0]
 800ea54:	f7f2 f8a4 	bl	8000ba0 <__aeabi_fsub>
 800ea58:	9a01      	ldr	r2, [sp, #4]
 800ea5a:	f50d 66f6 	add.w	r6, sp, #1968	; 0x7b0
 800ea5e:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 800ea62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ea64:	4605      	mov	r5, r0
 800ea66:	4649      	mov	r1, r9
 800ea68:	4610      	mov	r0, r2
 800ea6a:	920c      	str	r2, [sp, #48]	; 0x30
 800ea6c:	f7f2 f9a2 	bl	8000db4 <__aeabi_fmul>
 800ea70:	f2a6 666c 	subw	r6, r6, #1644	; 0x66c
 800ea74:	4601      	mov	r1, r0
 800ea76:	6830      	ldr	r0, [r6, #0]
 800ea78:	f7f2 f892 	bl	8000ba0 <__aeabi_fsub>
 800ea7c:	4629      	mov	r1, r5
 800ea7e:	4606      	mov	r6, r0
 800ea80:	4638      	mov	r0, r7
 800ea82:	f7f2 f997 	bl	8000db4 <__aeabi_fmul>
 800ea86:	4601      	mov	r1, r0
 800ea88:	4630      	mov	r0, r6
 800ea8a:	f7f2 f889 	bl	8000ba0 <__aeabi_fsub>
 800ea8e:	9904      	ldr	r1, [sp, #16]
 800ea90:	f7f2 f990 	bl	8000db4 <__aeabi_fmul>
 800ea94:	4606      	mov	r6, r0
 800ea96:	9807      	ldr	r0, [sp, #28]
 800ea98:	4631      	mov	r1, r6
 800ea9a:	964a      	str	r6, [sp, #296]	; 0x128
 800ea9c:	f7f2 f98a 	bl	8000db4 <__aeabi_fmul>
 800eaa0:	4601      	mov	r1, r0
 800eaa2:	4628      	mov	r0, r5
 800eaa4:	f7f2 f87c 	bl	8000ba0 <__aeabi_fsub>
 800eaa8:	9905      	ldr	r1, [sp, #20]
 800eaaa:	f7f2 f983 	bl	8000db4 <__aeabi_fmul>
 800eaae:	4605      	mov	r5, r0
 800eab0:	4631      	mov	r1, r6
 800eab2:	9803      	ldr	r0, [sp, #12]
 800eab4:	9549      	str	r5, [sp, #292]	; 0x124
 800eab6:	f7f2 f97d 	bl	8000db4 <__aeabi_fmul>
 800eaba:	4601      	mov	r1, r0
 800eabc:	4648      	mov	r0, r9
 800eabe:	f7f2 f86f 	bl	8000ba0 <__aeabi_fsub>
 800eac2:	4629      	mov	r1, r5
 800eac4:	4681      	mov	r9, r0
 800eac6:	4640      	mov	r0, r8
 800eac8:	f7f2 f974 	bl	8000db4 <__aeabi_fmul>
 800eacc:	4601      	mov	r1, r0
 800eace:	4648      	mov	r0, r9
 800ead0:	f7f2 f866 	bl	8000ba0 <__aeabi_fsub>
 800ead4:	9906      	ldr	r1, [sp, #24]
 800ead6:	f7f2 f96d 	bl	8000db4 <__aeabi_fmul>
 800eada:	4684      	mov	ip, r0
 800eadc:	9b02      	ldr	r3, [sp, #8]
 800eade:	f50d 6ef6 	add.w	lr, sp, #1968	; 0x7b0
 800eae2:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
 800eae6:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 800eaea:	f8d3 9000 	ldr.w	r9, [r3]
 800eaee:	4621      	mov	r1, r4
 800eaf0:	eb0e 038b 	add.w	r3, lr, fp, lsl #2
 800eaf4:	900b      	str	r0, [sp, #44]	; 0x2c
 800eaf6:	4648      	mov	r0, r9
 800eaf8:	f8cd c120 	str.w	ip, [sp, #288]	; 0x120
 800eafc:	f5a3 64cc 	sub.w	r4, r3, #1632	; 0x660
 800eb00:	f7f2 f958 	bl	8000db4 <__aeabi_fmul>
 800eb04:	4601      	mov	r1, r0
 800eb06:	6820      	ldr	r0, [r4, #0]
 800eb08:	f7f2 f84a 	bl	8000ba0 <__aeabi_fsub>
 800eb0c:	4603      	mov	r3, r0
 800eb0e:	9a01      	ldr	r2, [sp, #4]
 800eb10:	f50d 64f6 	add.w	r4, sp, #1968	; 0x7b0
 800eb14:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800eb18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800eb1a:	4648      	mov	r0, r9
 800eb1c:	4611      	mov	r1, r2
 800eb1e:	9301      	str	r3, [sp, #4]
 800eb20:	f7f2 f948 	bl	8000db4 <__aeabi_fmul>
 800eb24:	f5a4 64cc 	sub.w	r4, r4, #1632	; 0x660
 800eb28:	4601      	mov	r1, r0
 800eb2a:	6820      	ldr	r0, [r4, #0]
 800eb2c:	f7f2 f838 	bl	8000ba0 <__aeabi_fsub>
 800eb30:	9b01      	ldr	r3, [sp, #4]
 800eb32:	4604      	mov	r4, r0
 800eb34:	4619      	mov	r1, r3
 800eb36:	4638      	mov	r0, r7
 800eb38:	f7f2 f93c 	bl	8000db4 <__aeabi_fmul>
 800eb3c:	4601      	mov	r1, r0
 800eb3e:	4620      	mov	r0, r4
 800eb40:	f7f2 f82e 	bl	8000ba0 <__aeabi_fsub>
 800eb44:	9904      	ldr	r1, [sp, #16]
 800eb46:	f7f2 f935 	bl	8000db4 <__aeabi_fmul>
 800eb4a:	9907      	ldr	r1, [sp, #28]
 800eb4c:	4604      	mov	r4, r0
 800eb4e:	904d      	str	r0, [sp, #308]	; 0x134
 800eb50:	f7f2 f930 	bl	8000db4 <__aeabi_fmul>
 800eb54:	9b01      	ldr	r3, [sp, #4]
 800eb56:	4601      	mov	r1, r0
 800eb58:	4618      	mov	r0, r3
 800eb5a:	f7f2 f821 	bl	8000ba0 <__aeabi_fsub>
 800eb5e:	9905      	ldr	r1, [sp, #20]
 800eb60:	f7f2 f928 	bl	8000db4 <__aeabi_fmul>
 800eb64:	4607      	mov	r7, r0
 800eb66:	9903      	ldr	r1, [sp, #12]
 800eb68:	4620      	mov	r0, r4
 800eb6a:	974c      	str	r7, [sp, #304]	; 0x130
 800eb6c:	f7f2 f922 	bl	8000db4 <__aeabi_fmul>
 800eb70:	4601      	mov	r1, r0
 800eb72:	4648      	mov	r0, r9
 800eb74:	f7f2 f814 	bl	8000ba0 <__aeabi_fsub>
 800eb78:	4641      	mov	r1, r8
 800eb7a:	4680      	mov	r8, r0
 800eb7c:	4638      	mov	r0, r7
 800eb7e:	f7f2 f919 	bl	8000db4 <__aeabi_fmul>
 800eb82:	4601      	mov	r1, r0
 800eb84:	4640      	mov	r0, r8
 800eb86:	f7f2 f80b 	bl	8000ba0 <__aeabi_fsub>
 800eb8a:	9906      	ldr	r1, [sp, #24]
 800eb8c:	f7f2 f912 	bl	8000db4 <__aeabi_fmul>
 800eb90:	4680      	mov	r8, r0
 800eb92:	4629      	mov	r1, r5
 800eb94:	4620      	mov	r0, r4
 800eb96:	f8cd 812c 	str.w	r8, [sp, #300]	; 0x12c
 800eb9a:	f7f2 f803 	bl	8000ba4 <__addsf3>
 800eb9e:	4601      	mov	r1, r0
 800eba0:	4650      	mov	r0, sl
 800eba2:	f7f1 fffd 	bl	8000ba0 <__aeabi_fsub>
 800eba6:	49c1      	ldr	r1, [pc, #772]	; (800eeac <kalman_3gyro.constprop.0+0x12b0>)
 800eba8:	4681      	mov	r9, r0
 800ebaa:	f7f2 fabf 	bl	800112c <__aeabi_fcmpgt>
 800ebae:	2800      	cmp	r0, #0
 800ebb0:	f002 85fe 	beq.w	80117b0 <kalman_3gyro.constprop.0+0x3bb4>
 800ebb4:	4648      	mov	r0, r9
 800ebb6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ebba:	f7f1 fff3 	bl	8000ba4 <__addsf3>
 800ebbe:	f009 fe35 	bl	801882c <sqrtf>
 800ebc2:	4681      	mov	r9, r0
 800ebc4:	4639      	mov	r1, r7
 800ebc6:	4630      	mov	r0, r6
 800ebc8:	f7f1 ffea 	bl	8000ba0 <__aeabi_fsub>
 800ebcc:	2100      	movs	r1, #0
 800ebce:	4606      	mov	r6, r0
 800ebd0:	f7f2 fa8e 	bl	80010f0 <__aeabi_fcmplt>
 800ebd4:	2800      	cmp	r0, #0
 800ebd6:	f042 85e7 	bne.w	80117a8 <kalman_3gyro.constprop.0+0x3bac>
 800ebda:	2100      	movs	r1, #0
 800ebdc:	4630      	mov	r0, r6
 800ebde:	f7f2 faa5 	bl	800112c <__aeabi_fcmpgt>
 800ebe2:	2800      	cmp	r0, #0
 800ebe4:	f000 847c 	beq.w	800f4e0 <kalman_3gyro.constprop.0+0x18e4>
 800ebe8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800ebec:	4648      	mov	r0, r9
 800ebee:	f7f2 f8e1 	bl	8000db4 <__aeabi_fmul>
 800ebf2:	4651      	mov	r1, sl
 800ebf4:	4607      	mov	r7, r0
 800ebf6:	4620      	mov	r0, r4
 800ebf8:	f7f1 ffd4 	bl	8000ba4 <__addsf3>
 800ebfc:	4601      	mov	r1, r0
 800ebfe:	4628      	mov	r0, r5
 800ec00:	f7f1 ffce 	bl	8000ba0 <__aeabi_fsub>
 800ec04:	49a9      	ldr	r1, [pc, #676]	; (800eeac <kalman_3gyro.constprop.0+0x12b0>)
 800ec06:	4606      	mov	r6, r0
 800ec08:	f7f2 fa7c 	bl	8001104 <__aeabi_fcmple>
 800ec0c:	2800      	cmp	r0, #0
 800ec0e:	f042 85c7 	bne.w	80117a0 <kalman_3gyro.constprop.0+0x3ba4>
 800ec12:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ec16:	4630      	mov	r0, r6
 800ec18:	f7f1 ffc4 	bl	8000ba4 <__addsf3>
 800ec1c:	f009 fe06 	bl	801882c <sqrtf>
 800ec20:	4681      	mov	r9, r0
 800ec22:	9908      	ldr	r1, [sp, #32]
 800ec24:	4640      	mov	r0, r8
 800ec26:	f7f1 ffbb 	bl	8000ba0 <__aeabi_fsub>
 800ec2a:	2100      	movs	r1, #0
 800ec2c:	4606      	mov	r6, r0
 800ec2e:	f7f2 fa5f 	bl	80010f0 <__aeabi_fcmplt>
 800ec32:	2800      	cmp	r0, #0
 800ec34:	f042 85b0 	bne.w	8011798 <kalman_3gyro.constprop.0+0x3b9c>
 800ec38:	2100      	movs	r1, #0
 800ec3a:	4630      	mov	r0, r6
 800ec3c:	f7f2 fa76 	bl	800112c <__aeabi_fcmpgt>
 800ec40:	2800      	cmp	r0, #0
 800ec42:	f000 8446 	beq.w	800f4d2 <kalman_3gyro.constprop.0+0x18d6>
 800ec46:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800ec4a:	4648      	mov	r0, r9
 800ec4c:	f7f2 f8b2 	bl	8000db4 <__aeabi_fmul>
 800ec50:	4603      	mov	r3, r0
 800ec52:	4629      	mov	r1, r5
 800ec54:	4650      	mov	r0, sl
 800ec56:	461d      	mov	r5, r3
 800ec58:	f7f1 ffa4 	bl	8000ba4 <__addsf3>
 800ec5c:	4601      	mov	r1, r0
 800ec5e:	4620      	mov	r0, r4
 800ec60:	f7f1 ff9e 	bl	8000ba0 <__aeabi_fsub>
 800ec64:	4991      	ldr	r1, [pc, #580]	; (800eeac <kalman_3gyro.constprop.0+0x12b0>)
 800ec66:	4604      	mov	r4, r0
 800ec68:	f7f2 fa4c 	bl	8001104 <__aeabi_fcmple>
 800ec6c:	2800      	cmp	r0, #0
 800ec6e:	f042 8584 	bne.w	801177a <kalman_3gyro.constprop.0+0x3b7e>
 800ec72:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ec76:	4620      	mov	r0, r4
 800ec78:	f7f1 ff94 	bl	8000ba4 <__addsf3>
 800ec7c:	f009 fdd6 	bl	801882c <sqrtf>
 800ec80:	4606      	mov	r6, r0
 800ec82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ec84:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ec86:	f7f1 ff8b 	bl	8000ba0 <__aeabi_fsub>
 800ec8a:	2100      	movs	r1, #0
 800ec8c:	4604      	mov	r4, r0
 800ec8e:	f7f2 fa2f 	bl	80010f0 <__aeabi_fcmplt>
 800ec92:	2800      	cmp	r0, #0
 800ec94:	f042 856d 	bne.w	8011772 <kalman_3gyro.constprop.0+0x3b76>
 800ec98:	2100      	movs	r1, #0
 800ec9a:	4620      	mov	r0, r4
 800ec9c:	f7f2 fa46 	bl	800112c <__aeabi_fcmpgt>
 800eca0:	2800      	cmp	r0, #0
 800eca2:	f000 8424 	beq.w	800f4ee <kalman_3gyro.constprop.0+0x18f2>
 800eca6:	4630      	mov	r0, r6
 800eca8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800ecac:	f7f2 f882 	bl	8000db4 <__aeabi_fmul>
 800ecb0:	9b00      	ldr	r3, [sp, #0]
 800ecb2:	4604      	mov	r4, r0
 800ecb4:	f893 2341 	ldrb.w	r2, [r3, #833]	; 0x341
 800ecb8:	1e53      	subs	r3, r2, #1
 800ecba:	b25b      	sxtb	r3, r3
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	dd1d      	ble.n	800ecfc <kalman_3gyro.constprop.0+0x1100>
 800ecc0:	9900      	ldr	r1, [sp, #0]
 800ecc2:	3a02      	subs	r2, #2
 800ecc4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ecc8:	b2d2      	uxtb	r2, r2
 800ecca:	f1a1 000c 	sub.w	r0, r1, #12
 800ecce:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800ecd2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800ecd6:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
 800ecda:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ecde:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 800ece2:	f8d3 1340 	ldr.w	r1, [r3, #832]	; 0x340
 800ece6:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
 800ecea:	f8d3 2344 	ldr.w	r2, [r3, #836]	; 0x344
 800ecee:	f8c3 134c 	str.w	r1, [r3, #844]	; 0x34c
 800ecf2:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
 800ecf6:	3b0c      	subs	r3, #12
 800ecf8:	4283      	cmp	r3, r0
 800ecfa:	d1f0      	bne.n	800ecde <kalman_3gyro.constprop.0+0x10e2>
 800ecfc:	f8dd 17dc 	ldr.w	r1, [sp, #2012]	; 0x7dc
 800ed00:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ed04:	f7f2 f90a 	bl	8000f1c <__aeabi_fdiv>
 800ed08:	4606      	mov	r6, r0
 800ed0a:	4639      	mov	r1, r7
 800ed0c:	4638      	mov	r0, r7
 800ed0e:	f7f1 ff49 	bl	8000ba4 <__addsf3>
 800ed12:	4631      	mov	r1, r6
 800ed14:	f7f2 f84e 	bl	8000db4 <__aeabi_fmul>
 800ed18:	4629      	mov	r1, r5
 800ed1a:	9d00      	ldr	r5, [sp, #0]
 800ed1c:	f50d 795e 	add.w	r9, sp, #888	; 0x378
 800ed20:	f8c5 0348 	str.w	r0, [r5, #840]	; 0x348
 800ed24:	4608      	mov	r0, r1
 800ed26:	f7f1 ff3d 	bl	8000ba4 <__addsf3>
 800ed2a:	4631      	mov	r1, r6
 800ed2c:	f7f2 f842 	bl	8000db4 <__aeabi_fmul>
 800ed30:	4621      	mov	r1, r4
 800ed32:	f8c5 034c 	str.w	r0, [r5, #844]	; 0x34c
 800ed36:	4620      	mov	r0, r4
 800ed38:	f7f1 ff34 	bl	8000ba4 <__addsf3>
 800ed3c:	4631      	mov	r1, r6
 800ed3e:	f7f2 f839 	bl	8000db4 <__aeabi_fmul>
 800ed42:	4b5b      	ldr	r3, [pc, #364]	; (800eeb0 <kalman_3gyro.constprop.0+0x12b4>)
 800ed44:	4a5b      	ldr	r2, [pc, #364]	; (800eeb4 <kalman_3gyro.constprop.0+0x12b8>)
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	6812      	ldr	r2, [r2, #0]
 800ed4a:	9321      	str	r3, [sp, #132]	; 0x84
 800ed4c:	ab27      	add	r3, sp, #156	; 0x9c
 800ed4e:	e9cd 530c 	strd	r5, r3, [sp, #48]	; 0x30
 800ed52:	9323      	str	r3, [sp, #140]	; 0x8c
 800ed54:	2300      	movs	r3, #0
 800ed56:	f8c5 0350 	str.w	r0, [r5, #848]	; 0x350
 800ed5a:	921d      	str	r2, [sp, #116]	; 0x74
 800ed5c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ed5e:	e9dd 030b 	ldrd	r0, r3, [sp, #44]	; 0x2c
 800ed62:	f20d 2233 	addw	r2, sp, #563	; 0x233
 800ed66:	3001      	adds	r0, #1
 800ed68:	f50d 6197 	add.w	r1, sp, #1208	; 0x4b8
 800ed6c:	900b      	str	r0, [sp, #44]	; 0x2c
 800ed6e:	f1c2 0501 	rsb	r5, r2, #1
 800ed72:	f8d3 4348 	ldr.w	r4, [r3, #840]	; 0x348
 800ed76:	18a8      	adds	r0, r5, r2
 800ed78:	f841 4f04 	str.w	r4, [r1, #4]!
 800ed7c:	f802 0f01 	strb.w	r0, [r2, #1]!
 800ed80:	f50d 60a6 	add.w	r0, sp, #1328	; 0x530
 800ed84:	4281      	cmp	r1, r0
 800ed86:	f103 030c 	add.w	r3, r3, #12
 800ed8a:	d1f2      	bne.n	800ed72 <kalman_3gyro.constprop.0+0x1176>
 800ed8c:	f8dd 14c0 	ldr.w	r1, [sp, #1216]	; 0x4c0
 800ed90:	f8dd 04bc 	ldr.w	r0, [sp, #1212]	; 0x4bc
 800ed94:	f7f2 f9b6 	bl	8001104 <__aeabi_fcmple>
 800ed98:	b918      	cbnz	r0, 800eda2 <kalman_3gyro.constprop.0+0x11a6>
 800ed9a:	f44f 7381 	mov.w	r3, #258	; 0x102
 800ed9e:	f8ad 3234 	strh.w	r3, [sp, #564]	; 0x234
 800eda2:	f8dd 14c8 	ldr.w	r1, [sp, #1224]	; 0x4c8
 800eda6:	f8dd 04c4 	ldr.w	r0, [sp, #1220]	; 0x4c4
 800edaa:	f7f2 f9ab 	bl	8001104 <__aeabi_fcmple>
 800edae:	b918      	cbnz	r0, 800edb8 <kalman_3gyro.constprop.0+0x11bc>
 800edb0:	f44f 7341 	mov.w	r3, #772	; 0x304
 800edb4:	f8ad 3236 	strh.w	r3, [sp, #566]	; 0x236
 800edb8:	f8dd 14d0 	ldr.w	r1, [sp, #1232]	; 0x4d0
 800edbc:	f8dd 04cc 	ldr.w	r0, [sp, #1228]	; 0x4cc
 800edc0:	f7f2 f9a0 	bl	8001104 <__aeabi_fcmple>
 800edc4:	b918      	cbnz	r0, 800edce <kalman_3gyro.constprop.0+0x11d2>
 800edc6:	f240 5306 	movw	r3, #1286	; 0x506
 800edca:	f8ad 3238 	strh.w	r3, [sp, #568]	; 0x238
 800edce:	f8dd 14d8 	ldr.w	r1, [sp, #1240]	; 0x4d8
 800edd2:	f8dd 04d4 	ldr.w	r0, [sp, #1236]	; 0x4d4
 800edd6:	f7f2 f995 	bl	8001104 <__aeabi_fcmple>
 800edda:	b918      	cbnz	r0, 800ede4 <kalman_3gyro.constprop.0+0x11e8>
 800eddc:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 800ede0:	f8ad 323a 	strh.w	r3, [sp, #570]	; 0x23a
 800ede4:	f8dd 14e0 	ldr.w	r1, [sp, #1248]	; 0x4e0
 800ede8:	f8dd 04dc 	ldr.w	r0, [sp, #1244]	; 0x4dc
 800edec:	f7f2 f98a 	bl	8001104 <__aeabi_fcmple>
 800edf0:	b918      	cbnz	r0, 800edfa <kalman_3gyro.constprop.0+0x11fe>
 800edf2:	f640 130a 	movw	r3, #2314	; 0x90a
 800edf6:	f8ad 323c 	strh.w	r3, [sp, #572]	; 0x23c
 800edfa:	f8dd 14e8 	ldr.w	r1, [sp, #1256]	; 0x4e8
 800edfe:	f8dd 04e4 	ldr.w	r0, [sp, #1252]	; 0x4e4
 800ee02:	f7f2 f97f 	bl	8001104 <__aeabi_fcmple>
 800ee06:	b918      	cbnz	r0, 800ee10 <kalman_3gyro.constprop.0+0x1214>
 800ee08:	f640 330c 	movw	r3, #2828	; 0xb0c
 800ee0c:	f8ad 323e 	strh.w	r3, [sp, #574]	; 0x23e
 800ee10:	f8dd 14f0 	ldr.w	r1, [sp, #1264]	; 0x4f0
 800ee14:	f8dd 04ec 	ldr.w	r0, [sp, #1260]	; 0x4ec
 800ee18:	f7f2 f974 	bl	8001104 <__aeabi_fcmple>
 800ee1c:	b918      	cbnz	r0, 800ee26 <kalman_3gyro.constprop.0+0x122a>
 800ee1e:	f640 530e 	movw	r3, #3342	; 0xd0e
 800ee22:	f8ad 3240 	strh.w	r3, [sp, #576]	; 0x240
 800ee26:	f8dd 14f8 	ldr.w	r1, [sp, #1272]	; 0x4f8
 800ee2a:	f8dd 04f4 	ldr.w	r0, [sp, #1268]	; 0x4f4
 800ee2e:	f7f2 f969 	bl	8001104 <__aeabi_fcmple>
 800ee32:	b918      	cbnz	r0, 800ee3c <kalman_3gyro.constprop.0+0x1240>
 800ee34:	f44f 6371 	mov.w	r3, #3856	; 0xf10
 800ee38:	f8ad 3242 	strh.w	r3, [sp, #578]	; 0x242
 800ee3c:	f8dd 1500 	ldr.w	r1, [sp, #1280]	; 0x500
 800ee40:	f8dd 04fc 	ldr.w	r0, [sp, #1276]	; 0x4fc
 800ee44:	f7f2 f95e 	bl	8001104 <__aeabi_fcmple>
 800ee48:	b918      	cbnz	r0, 800ee52 <kalman_3gyro.constprop.0+0x1256>
 800ee4a:	f241 1312 	movw	r3, #4370	; 0x1112
 800ee4e:	f8ad 3244 	strh.w	r3, [sp, #580]	; 0x244
 800ee52:	f8dd 1508 	ldr.w	r1, [sp, #1288]	; 0x508
 800ee56:	f8dd 0504 	ldr.w	r0, [sp, #1284]	; 0x504
 800ee5a:	f7f2 f953 	bl	8001104 <__aeabi_fcmple>
 800ee5e:	b918      	cbnz	r0, 800ee68 <kalman_3gyro.constprop.0+0x126c>
 800ee60:	f241 3314 	movw	r3, #4884	; 0x1314
 800ee64:	f8ad 3246 	strh.w	r3, [sp, #582]	; 0x246
 800ee68:	f8dd 1510 	ldr.w	r1, [sp, #1296]	; 0x510
 800ee6c:	f8dd 050c 	ldr.w	r0, [sp, #1292]	; 0x50c
 800ee70:	f7f2 f948 	bl	8001104 <__aeabi_fcmple>
 800ee74:	b918      	cbnz	r0, 800ee7e <kalman_3gyro.constprop.0+0x1282>
 800ee76:	f241 5316 	movw	r3, #5398	; 0x1516
 800ee7a:	f8ad 3248 	strh.w	r3, [sp, #584]	; 0x248
 800ee7e:	f8dd 1518 	ldr.w	r1, [sp, #1304]	; 0x518
 800ee82:	f8dd 0514 	ldr.w	r0, [sp, #1300]	; 0x514
 800ee86:	f7f2 f93d 	bl	8001104 <__aeabi_fcmple>
 800ee8a:	b918      	cbnz	r0, 800ee94 <kalman_3gyro.constprop.0+0x1298>
 800ee8c:	f241 7318 	movw	r3, #5912	; 0x1718
 800ee90:	f8ad 324a 	strh.w	r3, [sp, #586]	; 0x24a
 800ee94:	f8dd 1520 	ldr.w	r1, [sp, #1312]	; 0x520
 800ee98:	f8dd 051c 	ldr.w	r0, [sp, #1308]	; 0x51c
 800ee9c:	f7f2 f932 	bl	8001104 <__aeabi_fcmple>
 800eea0:	b950      	cbnz	r0, 800eeb8 <kalman_3gyro.constprop.0+0x12bc>
 800eea2:	f641 131a 	movw	r3, #6426	; 0x191a
 800eea6:	f8ad 324c 	strh.w	r3, [sp, #588]	; 0x24c
 800eeaa:	e005      	b.n	800eeb8 <kalman_3gyro.constprop.0+0x12bc>
 800eeac:	bf800000 	.word	0xbf800000
 800eeb0:	20001eb4 	.word	0x20001eb4
 800eeb4:	20001ea4 	.word	0x20001ea4
 800eeb8:	f8dd 1528 	ldr.w	r1, [sp, #1320]	; 0x528
 800eebc:	f8dd 0524 	ldr.w	r0, [sp, #1316]	; 0x524
 800eec0:	f7f2 f920 	bl	8001104 <__aeabi_fcmple>
 800eec4:	b918      	cbnz	r0, 800eece <kalman_3gyro.constprop.0+0x12d2>
 800eec6:	f641 331c 	movw	r3, #6940	; 0x1b1c
 800eeca:	f8ad 324e 	strh.w	r3, [sp, #590]	; 0x24e
 800eece:	f8dd 1530 	ldr.w	r1, [sp, #1328]	; 0x530
 800eed2:	f8dd 052c 	ldr.w	r0, [sp, #1324]	; 0x52c
 800eed6:	f7f2 f915 	bl	8001104 <__aeabi_fcmple>
 800eeda:	b918      	cbnz	r0, 800eee4 <kalman_3gyro.constprop.0+0x12e8>
 800eedc:	f641 531e 	movw	r3, #7454	; 0x1d1e
 800eee0:	f8ad 3250 	strh.w	r3, [sp, #592]	; 0x250
 800eee4:	221e      	movs	r2, #30
 800eee6:	2101      	movs	r1, #1
 800eee8:	4648      	mov	r0, r9
 800eeea:	f008 fdff 	bl	8017aec <memset>
 800eeee:	2304      	movs	r3, #4
 800eef0:	930a      	str	r3, [sp, #40]	; 0x28
 800eef2:	2302      	movs	r3, #2
 800eef4:	9307      	str	r3, [sp, #28]
 800eef6:	9a07      	ldr	r2, [sp, #28]
 800eef8:	2701      	movs	r7, #1
 800eefa:	4613      	mov	r3, r2
 800eefc:	9208      	str	r2, [sp, #32]
 800eefe:	40ba      	lsls	r2, r7
 800ef00:	9207      	str	r2, [sp, #28]
 800ef02:	eb03 0b07 	add.w	fp, r3, r7
 800ef06:	9b07      	ldr	r3, [sp, #28]
 800ef08:	463a      	mov	r2, r7
 800ef0a:	443b      	add	r3, r7
 800ef0c:	2b1f      	cmp	r3, #31
 800ef0e:	bfa8      	it	ge
 800ef10:	231f      	movge	r3, #31
 800ef12:	eba3 0a02 	sub.w	sl, r3, r2
 800ef16:	f1ba 0f00 	cmp.w	sl, #0
 800ef1a:	9701      	str	r7, [sp, #4]
 800ef1c:	f10b 35ff 	add.w	r5, fp, #4294967295
 800ef20:	461f      	mov	r7, r3
 800ef22:	dd33      	ble.n	800ef8c <kalman_3gyro.constprop.0+0x1390>
 800ef24:	4616      	mov	r6, r2
 800ef26:	2400      	movs	r4, #0
 800ef28:	1e7b      	subs	r3, r7, #1
 800ef2a:	9302      	str	r3, [sp, #8]
 800ef2c:	1ebb      	subs	r3, r7, #2
 800ef2e:	e9cd a303 	strd	sl, r3, [sp, #12]
 800ef32:	1e73      	subs	r3, r6, #1
 800ef34:	aa8d      	add	r2, sp, #564	; 0x234
 800ef36:	f912 a003 	ldrsb.w	sl, [r2, r3]
 800ef3a:	5752      	ldrsb	r2, [r2, r5]
 800ef3c:	9306      	str	r3, [sp, #24]
 800ef3e:	1e51      	subs	r1, r2, #1
 800ef40:	f20d 43bc 	addw	r3, sp, #1212	; 0x4bc
 800ef44:	f10a 30ff 	add.w	r0, sl, #4294967295
 800ef48:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800ef4c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800ef50:	9205      	str	r2, [sp, #20]
 800ef52:	f7f2 f8d7 	bl	8001104 <__aeabi_fcmple>
 800ef56:	f105 0801 	add.w	r8, r5, #1
 800ef5a:	1ca9      	adds	r1, r5, #2
 800ef5c:	2800      	cmp	r0, #0
 800ef5e:	f040 8177 	bne.w	800f250 <kalman_3gyro.constprop.0+0x1654>
 800ef62:	9a05      	ldr	r2, [sp, #20]
 800ef64:	428f      	cmp	r7, r1
 800ef66:	9b06      	ldr	r3, [sp, #24]
 800ef68:	f809 2004 	strb.w	r2, [r9, r4]
 800ef6c:	f000 8160 	beq.w	800f230 <kalman_3gyro.constprop.0+0x1634>
 800ef70:	4645      	mov	r5, r8
 800ef72:	9b03      	ldr	r3, [sp, #12]
 800ef74:	3401      	adds	r4, #1
 800ef76:	42a3      	cmp	r3, r4
 800ef78:	dcdb      	bgt.n	800ef32 <kalman_3gyro.constprop.0+0x1336>
 800ef7a:	469a      	mov	sl, r3
 800ef7c:	9b01      	ldr	r3, [sp, #4]
 800ef7e:	4652      	mov	r2, sl
 800ef80:	1e58      	subs	r0, r3, #1
 800ef82:	ab8d      	add	r3, sp, #564	; 0x234
 800ef84:	4649      	mov	r1, r9
 800ef86:	4418      	add	r0, r3
 800ef88:	f008 fda2 	bl	8017ad0 <memcpy>
 800ef8c:	9b08      	ldr	r3, [sp, #32]
 800ef8e:	eb07 0b03 	add.w	fp, r7, r3
 800ef92:	f1bb 0f1e 	cmp.w	fp, #30
 800ef96:	ddb6      	ble.n	800ef06 <kalman_3gyro.constprop.0+0x130a>
 800ef98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef9a:	3b01      	subs	r3, #1
 800ef9c:	930a      	str	r3, [sp, #40]	; 0x28
 800ef9e:	d1aa      	bne.n	800eef6 <kalman_3gyro.constprop.0+0x12fa>
 800efa0:	f99d 2242 	ldrsb.w	r2, [sp, #578]	; 0x242
 800efa4:	f20d 41bc 	addw	r1, sp, #1212	; 0x4bc
 800efa8:	3a01      	subs	r2, #1
 800efaa:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800efae:	f99d 3243 	ldrsb.w	r3, [sp, #579]	; 0x243
 800efb2:	f20d 42bc 	addw	r2, sp, #1212	; 0x4bc
 800efb6:	3b01      	subs	r3, #1
 800efb8:	2100      	movs	r1, #0
 800efba:	4630      	mov	r0, r6
 800efbc:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800efc0:	f7f2 f896 	bl	80010f0 <__aeabi_fcmplt>
 800efc4:	2100      	movs	r1, #0
 800efc6:	1e04      	subs	r4, r0, #0
 800efc8:	4628      	mov	r0, r5
 800efca:	bf18      	it	ne
 800efcc:	2401      	movne	r4, #1
 800efce:	f7f2 f88f 	bl	80010f0 <__aeabi_fcmplt>
 800efd2:	3800      	subs	r0, #0
 800efd4:	bf18      	it	ne
 800efd6:	2001      	movne	r0, #1
 800efd8:	b2e4      	uxtb	r4, r4
 800efda:	4284      	cmp	r4, r0
 800efdc:	f000 8154 	beq.w	800f288 <kalman_3gyro.constprop.0+0x168c>
 800efe0:	4629      	mov	r1, r5
 800efe2:	4630      	mov	r0, r6
 800efe4:	f7f1 fdde 	bl	8000ba4 <__addsf3>
 800efe8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800efec:	f7f1 fee2 	bl	8000db4 <__aeabi_fmul>
 800eff0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eff2:	f843 0b04 	str.w	r0, [r3], #4
 800eff6:	930d      	str	r3, [sp, #52]	; 0x34
 800eff8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800effa:	3304      	adds	r3, #4
 800effc:	930c      	str	r3, [sp, #48]	; 0x30
 800effe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f000:	2b03      	cmp	r3, #3
 800f002:	f47f aeac 	bne.w	800ed5e <kalman_3gyro.constprop.0+0x1162>
 800f006:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800f008:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 800f00a:	4608      	mov	r0, r1
 800f00c:	f7f1 fed2 	bl	8000db4 <__aeabi_fmul>
 800f010:	4621      	mov	r1, r4
 800f012:	4604      	mov	r4, r0
 800f014:	4608      	mov	r0, r1
 800f016:	f7f1 fecd 	bl	8000db4 <__aeabi_fmul>
 800f01a:	4601      	mov	r1, r0
 800f01c:	4620      	mov	r0, r4
 800f01e:	f7f1 fdc1 	bl	8000ba4 <__addsf3>
 800f022:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800f024:	4604      	mov	r4, r0
 800f026:	4608      	mov	r0, r1
 800f028:	f7f1 fec4 	bl	8000db4 <__aeabi_fmul>
 800f02c:	4601      	mov	r1, r0
 800f02e:	4620      	mov	r0, r4
 800f030:	f7f1 fdb8 	bl	8000ba4 <__addsf3>
 800f034:	9022      	str	r0, [sp, #136]	; 0x88
 800f036:	f009 fbf9 	bl	801882c <sqrtf>
 800f03a:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 800f03e:	4604      	mov	r4, r0
 800f040:	9816      	ldr	r0, [sp, #88]	; 0x58
 800f042:	f7f1 feb7 	bl	8000db4 <__aeabi_fmul>
 800f046:	9915      	ldr	r1, [sp, #84]	; 0x54
 800f048:	f7f1 ff68 	bl	8000f1c <__aeabi_fdiv>
 800f04c:	4683      	mov	fp, r0
 800f04e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800f050:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 800f054:	4630      	mov	r0, r6
 800f056:	f8cd b0e0 	str.w	fp, [sp, #224]	; 0xe0
 800f05a:	f7f1 feab 	bl	8000db4 <__aeabi_fmul>
 800f05e:	991a      	ldr	r1, [sp, #104]	; 0x68
 800f060:	f7f1 ff5c 	bl	8000f1c <__aeabi_fdiv>
 800f064:	4682      	mov	sl, r0
 800f066:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800f068:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 800f06c:	4628      	mov	r0, r5
 800f06e:	f8cd a0e4 	str.w	sl, [sp, #228]	; 0xe4
 800f072:	f7f1 fe9f 	bl	8000db4 <__aeabi_fmul>
 800f076:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800f078:	f7f1 ff50 	bl	8000f1c <__aeabi_fdiv>
 800f07c:	4603      	mov	r3, r0
 800f07e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800f082:	9002      	str	r0, [sp, #8]
 800f084:	4620      	mov	r0, r4
 800f086:	933a      	str	r3, [sp, #232]	; 0xe8
 800f088:	f7f1 fe94 	bl	8000db4 <__aeabi_fmul>
 800f08c:	4680      	mov	r8, r0
 800f08e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800f092:	4630      	mov	r0, r6
 800f094:	f8cd 80ec 	str.w	r8, [sp, #236]	; 0xec
 800f098:	f7f1 fe8c 	bl	8000db4 <__aeabi_fmul>
 800f09c:	49ac      	ldr	r1, [pc, #688]	; (800f350 <kalman_3gyro.constprop.0+0x1754>)
 800f09e:	4604      	mov	r4, r0
 800f0a0:	4628      	mov	r0, r5
 800f0a2:	f7f1 fe87 	bl	8000db4 <__aeabi_fmul>
 800f0a6:	4601      	mov	r1, r0
 800f0a8:	4620      	mov	r0, r4
 800f0aa:	f7f1 fd7b 	bl	8000ba4 <__addsf3>
 800f0ae:	49a9      	ldr	r1, [pc, #676]	; (800f354 <kalman_3gyro.constprop.0+0x1758>)
 800f0b0:	9021      	str	r0, [sp, #132]	; 0x84
 800f0b2:	f7f1 fe7f 	bl	8000db4 <__aeabi_fmul>
 800f0b6:	9900      	ldr	r1, [sp, #0]
 800f0b8:	f891 3900 	ldrb.w	r3, [r1, #2304]	; 0x900
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	f040 810d 	bne.w	800f2dc <kalman_3gyro.constprop.0+0x16e0>
 800f0c2:	460d      	mov	r5, r1
 800f0c4:	f8d1 2928 	ldr.w	r2, [r1, #2344]	; 0x928
 800f0c8:	f8d1 3924 	ldr.w	r3, [r1, #2340]	; 0x924
 800f0cc:	f8c1 292c 	str.w	r2, [r1, #2348]	; 0x92c
 800f0d0:	f8c1 3928 	str.w	r3, [r1, #2344]	; 0x928
 800f0d4:	f8d1 2920 	ldr.w	r2, [r1, #2336]	; 0x920
 800f0d8:	f8d1 391c 	ldr.w	r3, [r1, #2332]	; 0x91c
 800f0dc:	f8c1 2924 	str.w	r2, [r1, #2340]	; 0x924
 800f0e0:	f8c1 3920 	str.w	r3, [r1, #2336]	; 0x920
 800f0e4:	f8c1 091c 	str.w	r0, [r1, #2332]	; 0x91c
 800f0e8:	f8d5 1920 	ldr.w	r1, [r5, #2336]	; 0x920
 800f0ec:	f8d5 0908 	ldr.w	r0, [r5, #2312]	; 0x908
 800f0f0:	f7f1 fe60 	bl	8000db4 <__aeabi_fmul>
 800f0f4:	f8d5 1924 	ldr.w	r1, [r5, #2340]	; 0x924
 800f0f8:	4604      	mov	r4, r0
 800f0fa:	f8d5 090c 	ldr.w	r0, [r5, #2316]	; 0x90c
 800f0fe:	f7f1 fe59 	bl	8000db4 <__aeabi_fmul>
 800f102:	4601      	mov	r1, r0
 800f104:	4620      	mov	r0, r4
 800f106:	f7f1 fd4d 	bl	8000ba4 <__addsf3>
 800f10a:	f8d5 1928 	ldr.w	r1, [r5, #2344]	; 0x928
 800f10e:	4604      	mov	r4, r0
 800f110:	f8d5 0910 	ldr.w	r0, [r5, #2320]	; 0x910
 800f114:	f7f1 fe4e 	bl	8000db4 <__aeabi_fmul>
 800f118:	4601      	mov	r1, r0
 800f11a:	4620      	mov	r0, r4
 800f11c:	f7f1 fd42 	bl	8000ba4 <__addsf3>
 800f120:	f8d5 192c 	ldr.w	r1, [r5, #2348]	; 0x92c
 800f124:	4604      	mov	r4, r0
 800f126:	f8d5 0914 	ldr.w	r0, [r5, #2324]	; 0x914
 800f12a:	f7f1 fe43 	bl	8000db4 <__aeabi_fmul>
 800f12e:	4601      	mov	r1, r0
 800f130:	4620      	mov	r0, r4
 800f132:	f7f1 fd37 	bl	8000ba4 <__addsf3>
 800f136:	f8d5 1904 	ldr.w	r1, [r5, #2308]	; 0x904
 800f13a:	4604      	mov	r4, r0
 800f13c:	f8d5 091c 	ldr.w	r0, [r5, #2332]	; 0x91c
 800f140:	f7f1 fe38 	bl	8000db4 <__aeabi_fmul>
 800f144:	4601      	mov	r1, r0
 800f146:	4620      	mov	r0, r4
 800f148:	f7f1 fd2c 	bl	8000ba4 <__addsf3>
 800f14c:	4603      	mov	r3, r0
 800f14e:	68aa      	ldr	r2, [r5, #8]
 800f150:	2100      	movs	r1, #0
 800f152:	4610      	mov	r0, r2
 800f154:	462c      	mov	r4, r5
 800f156:	920a      	str	r2, [sp, #40]	; 0x28
 800f158:	461d      	mov	r5, r3
 800f15a:	9301      	str	r3, [sp, #4]
 800f15c:	f7f1 ffe6 	bl	800112c <__aeabi_fcmpgt>
 800f160:	2800      	cmp	r0, #0
 800f162:	f000 81cb 	beq.w	800f4fc <kalman_3gyro.constprop.0+0x1900>
 800f166:	4629      	mov	r1, r5
 800f168:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 800f16c:	f7f1 ffc0 	bl	80010f0 <__aeabi_fcmplt>
 800f170:	2800      	cmp	r0, #0
 800f172:	f040 80fb 	bne.w	800f36c <kalman_3gyro.constprop.0+0x1770>
 800f176:	9b00      	ldr	r3, [sp, #0]
 800f178:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800f17c:	9306      	str	r3, [sp, #24]
 800f17e:	9d01      	ldr	r5, [sp, #4]
 800f180:	9c00      	ldr	r4, [sp, #0]
 800f182:	4629      	mov	r1, r5
 800f184:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 800f188:	f7f1 ffb2 	bl	80010f0 <__aeabi_fcmplt>
 800f18c:	2800      	cmp	r0, #0
 800f18e:	f002 86a9 	beq.w	8011ee4 <kalman_3gyro.constprop.0+0x42e8>
 800f192:	4629      	mov	r1, r5
 800f194:	f8d4 0188 	ldr.w	r0, [r4, #392]	; 0x188
 800f198:	f7f1 ffc8 	bl	800112c <__aeabi_fcmpgt>
 800f19c:	2800      	cmp	r0, #0
 800f19e:	f002 8775 	beq.w	801208c <kalman_3gyro.constprop.0+0x4490>
 800f1a2:	462f      	mov	r7, r5
 800f1a4:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
 800f1a8:	4639      	mov	r1, r7
 800f1aa:	4628      	mov	r0, r5
 800f1ac:	4626      	mov	r6, r4
 800f1ae:	f7f1 ffa9 	bl	8001104 <__aeabi_fcmple>
 800f1b2:	2800      	cmp	r0, #0
 800f1b4:	f003 8211 	beq.w	80125da <kalman_3gyro.constprop.0+0x49de>
 800f1b8:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
 800f1bc:	4639      	mov	r1, r7
 800f1be:	4620      	mov	r0, r4
 800f1c0:	9701      	str	r7, [sp, #4]
 800f1c2:	f7f1 ffb3 	bl	800112c <__aeabi_fcmpgt>
 800f1c6:	2800      	cmp	r0, #0
 800f1c8:	f003 8210 	beq.w	80125ec <kalman_3gyro.constprop.0+0x49f0>
 800f1cc:	f8d6 712c 	ldr.w	r7, [r6, #300]	; 0x12c
 800f1d0:	f8d6 0134 	ldr.w	r0, [r6, #308]	; 0x134
 800f1d4:	4639      	mov	r1, r7
 800f1d6:	f7f1 fce3 	bl	8000ba0 <__aeabi_fsub>
 800f1da:	4629      	mov	r1, r5
 800f1dc:	4606      	mov	r6, r0
 800f1de:	9801      	ldr	r0, [sp, #4]
 800f1e0:	f7f1 fcde 	bl	8000ba0 <__aeabi_fsub>
 800f1e4:	4601      	mov	r1, r0
 800f1e6:	4630      	mov	r0, r6
 800f1e8:	f7f1 fde4 	bl	8000db4 <__aeabi_fmul>
 800f1ec:	4629      	mov	r1, r5
 800f1ee:	4605      	mov	r5, r0
 800f1f0:	4620      	mov	r0, r4
 800f1f2:	f7f1 fcd5 	bl	8000ba0 <__aeabi_fsub>
 800f1f6:	4601      	mov	r1, r0
 800f1f8:	4628      	mov	r0, r5
 800f1fa:	f7f1 fe8f 	bl	8000f1c <__aeabi_fdiv>
 800f1fe:	4639      	mov	r1, r7
 800f200:	f7f1 fcd0 	bl	8000ba4 <__addsf3>
 800f204:	9008      	str	r0, [sp, #32]
 800f206:	9b00      	ldr	r3, [sp, #0]
 800f208:	9901      	ldr	r1, [sp, #4]
 800f20a:	f8d3 4138 	ldr.w	r4, [r3, #312]	; 0x138
 800f20e:	4620      	mov	r0, r4
 800f210:	f7f1 ff78 	bl	8001104 <__aeabi_fcmple>
 800f214:	2800      	cmp	r0, #0
 800f216:	f003 8210 	beq.w	801263a <kalman_3gyro.constprop.0+0x4a3e>
 800f21a:	f003 bfff 	b.w	801321c <kalman_3gyro.constprop.0+0x5620>
 800f21e:	4b4e      	ldr	r3, [pc, #312]	; (800f358 <kalman_3gyro.constprop.0+0x175c>)
 800f220:	9312      	str	r3, [sp, #72]	; 0x48
 800f222:	4b4e      	ldr	r3, [pc, #312]	; (800f35c <kalman_3gyro.constprop.0+0x1760>)
 800f224:	9318      	str	r3, [sp, #96]	; 0x60
 800f226:	4b4e      	ldr	r3, [pc, #312]	; (800f360 <kalman_3gyro.constprop.0+0x1764>)
 800f228:	4619      	mov	r1, r3
 800f22a:	930e      	str	r3, [sp, #56]	; 0x38
 800f22c:	f7fe be9f 	b.w	800df6e <kalman_3gyro.constprop.0+0x372>
 800f230:	1c60      	adds	r0, r4, #1
 800f232:	a98d      	add	r1, sp, #564	; 0x234
 800f234:	455e      	cmp	r6, fp
 800f236:	ebab 0206 	sub.w	r2, fp, r6
 800f23a:	4419      	add	r1, r3
 800f23c:	4448      	add	r0, r9
 800f23e:	f6bf ae97 	bge.w	800ef70 <kalman_3gyro.constprop.0+0x1374>
 800f242:	445c      	add	r4, fp
 800f244:	1ba4      	subs	r4, r4, r6
 800f246:	f008 fc43 	bl	8017ad0 <memcpy>
 800f24a:	4645      	mov	r5, r8
 800f24c:	465e      	mov	r6, fp
 800f24e:	e690      	b.n	800ef72 <kalman_3gyro.constprop.0+0x1376>
 800f250:	3601      	adds	r6, #1
 800f252:	455e      	cmp	r6, fp
 800f254:	f809 a004 	strb.w	sl, [r9, r4]
 800f258:	f47f ae8b 	bne.w	800ef72 <kalman_3gyro.constprop.0+0x1376>
 800f25c:	9b02      	ldr	r3, [sp, #8]
 800f25e:	f105 0801 	add.w	r8, r5, #1
 800f262:	1c60      	adds	r0, r4, #1
 800f264:	a98d      	add	r1, sp, #564	; 0x234
 800f266:	4547      	cmp	r7, r8
 800f268:	eba3 0205 	sub.w	r2, r3, r5
 800f26c:	4429      	add	r1, r5
 800f26e:	4448      	add	r0, r9
 800f270:	f77f ae7f 	ble.w	800ef72 <kalman_3gyro.constprop.0+0x1376>
 800f274:	f008 fc2c 	bl	8017ad0 <memcpy>
 800f278:	9b02      	ldr	r3, [sp, #8]
 800f27a:	441c      	add	r4, r3
 800f27c:	9b04      	ldr	r3, [sp, #16]
 800f27e:	1b64      	subs	r4, r4, r5
 800f280:	1b5b      	subs	r3, r3, r5
 800f282:	eb03 0508 	add.w	r5, r3, r8
 800f286:	e674      	b.n	800ef72 <kalman_3gyro.constprop.0+0x1376>
 800f288:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800f28a:	4630      	mov	r0, r6
 800f28c:	4621      	mov	r1, r4
 800f28e:	f7f1 ff25 	bl	80010dc <__aeabi_fcmpeq>
 800f292:	2800      	cmp	r0, #0
 800f294:	f47f aea4 	bne.w	800efe0 <kalman_3gyro.constprop.0+0x13e4>
 800f298:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800f29a:	4630      	mov	r0, r6
 800f29c:	4639      	mov	r1, r7
 800f29e:	f7f1 ff1d 	bl	80010dc <__aeabi_fcmpeq>
 800f2a2:	2800      	cmp	r0, #0
 800f2a4:	f47f ae9c 	bne.w	800efe0 <kalman_3gyro.constprop.0+0x13e4>
 800f2a8:	4621      	mov	r1, r4
 800f2aa:	4628      	mov	r0, r5
 800f2ac:	f7f1 ff16 	bl	80010dc <__aeabi_fcmpeq>
 800f2b0:	2800      	cmp	r0, #0
 800f2b2:	f47f ae95 	bne.w	800efe0 <kalman_3gyro.constprop.0+0x13e4>
 800f2b6:	4639      	mov	r1, r7
 800f2b8:	4628      	mov	r0, r5
 800f2ba:	f7f1 ff0f 	bl	80010dc <__aeabi_fcmpeq>
 800f2be:	2800      	cmp	r0, #0
 800f2c0:	f47f ae8e 	bne.w	800efe0 <kalman_3gyro.constprop.0+0x13e4>
 800f2c4:	4631      	mov	r1, r6
 800f2c6:	4628      	mov	r0, r5
 800f2c8:	f7f1 fc6a 	bl	8000ba0 <__aeabi_fsub>
 800f2cc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800f2d0:	f7f1 fd70 	bl	8000db4 <__aeabi_fmul>
 800f2d4:	4631      	mov	r1, r6
 800f2d6:	f7f1 fc65 	bl	8000ba4 <__addsf3>
 800f2da:	e689      	b.n	800eff0 <kalman_3gyro.constprop.0+0x13f4>
 800f2dc:	2300      	movs	r3, #0
 800f2de:	460d      	mov	r5, r1
 800f2e0:	f8c1 091c 	str.w	r0, [r1, #2332]	; 0x91c
 800f2e4:	f8c1 0920 	str.w	r0, [r1, #2336]	; 0x920
 800f2e8:	f8c1 0924 	str.w	r0, [r1, #2340]	; 0x924
 800f2ec:	f8c1 0928 	str.w	r0, [r1, #2344]	; 0x928
 800f2f0:	f8c1 092c 	str.w	r0, [r1, #2348]	; 0x92c
 800f2f4:	f881 3900 	strb.w	r3, [r1, #2304]	; 0x900
 800f2f8:	e6f6      	b.n	800f0e8 <kalman_3gyro.constprop.0+0x14ec>
 800f2fa:	2302      	movs	r3, #2
 800f2fc:	2608      	movs	r6, #8
 800f2fe:	f04f 0805 	mov.w	r8, #5
 800f302:	9301      	str	r3, [sp, #4]
 800f304:	f7ff ba6d 	b.w	800e7e2 <kalman_3gyro.constprop.0+0xbe6>
 800f308:	2404      	movs	r4, #4
 800f30a:	f04f 0900 	mov.w	r9, #0
 800f30e:	2306      	movs	r3, #6
 800f310:	4627      	mov	r7, r4
 800f312:	2507      	movs	r5, #7
 800f314:	f04f 0a03 	mov.w	sl, #3
 800f318:	f04f 0b01 	mov.w	fp, #1
 800f31c:	f8cd 9008 	str.w	r9, [sp, #8]
 800f320:	9303      	str	r3, [sp, #12]
 800f322:	f7ff ba42 	b.w	800e7aa <kalman_3gyro.constprop.0+0xbae>
 800f326:	2100      	movs	r1, #0
 800f328:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f32a:	4a09      	ldr	r2, [pc, #36]	; (800f350 <kalman_3gyro.constprop.0+0x1754>)
 800f32c:	f8df 8034 	ldr.w	r8, [pc, #52]	; 800f364 <kalman_3gyro.constprop.0+0x1768>
 800f330:	f8df 9034 	ldr.w	r9, [pc, #52]	; 800f368 <kalman_3gyro.constprop.0+0x176c>
 800f334:	4608      	mov	r0, r1
 800f336:	468b      	mov	fp, r1
 800f338:	46c2      	mov	sl, r8
 800f33a:	464b      	mov	r3, r9
 800f33c:	6021      	str	r1, [r4, #0]
 800f33e:	6062      	str	r2, [r4, #4]
 800f340:	60a2      	str	r2, [r4, #8]
 800f342:	f7fe bcdf 	b.w	800dd04 <kalman_3gyro.constprop.0+0x108>
 800f346:	4b06      	ldr	r3, [pc, #24]	; (800f360 <kalman_3gyro.constprop.0+0x1764>)
 800f348:	4619      	mov	r1, r3
 800f34a:	930f      	str	r3, [sp, #60]	; 0x3c
 800f34c:	f7fe be52 	b.w	800dff4 <kalman_3gyro.constprop.0+0x3f8>
 800f350:	3f333333 	.word	0x3f333333
 800f354:	3f4ccccd 	.word	0x3f4ccccd
 800f358:	3ecccccc 	.word	0x3ecccccc
 800f35c:	3f666666 	.word	0x3f666666
 800f360:	3dcccccd 	.word	0x3dcccccd
 800f364:	3fb33333 	.word	0x3fb33333
 800f368:	bfb33333 	.word	0xbfb33333
 800f36c:	4629      	mov	r1, r5
 800f36e:	f8d4 0120 	ldr.w	r0, [r4, #288]	; 0x120
 800f372:	f7f1 fedb 	bl	800112c <__aeabi_fcmpgt>
 800f376:	2800      	cmp	r0, #0
 800f378:	f002 8682 	beq.w	8012080 <kalman_3gyro.constprop.0+0x4484>
 800f37c:	462f      	mov	r7, r5
 800f37e:	9c00      	ldr	r4, [sp, #0]
 800f380:	4638      	mov	r0, r7
 800f382:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
 800f386:	4626      	mov	r6, r4
 800f388:	4629      	mov	r1, r5
 800f38a:	f7f1 fec5 	bl	8001118 <__aeabi_fcmpge>
 800f38e:	2800      	cmp	r0, #0
 800f390:	f002 87fc 	beq.w	801238c <kalman_3gyro.constprop.0+0x4790>
 800f394:	f8d4 40c8 	ldr.w	r4, [r4, #200]	; 0xc8
 800f398:	4639      	mov	r1, r7
 800f39a:	4620      	mov	r0, r4
 800f39c:	9701      	str	r7, [sp, #4]
 800f39e:	f7f1 fec5 	bl	800112c <__aeabi_fcmpgt>
 800f3a2:	2800      	cmp	r0, #0
 800f3a4:	f002 87fb 	beq.w	801239e <kalman_3gyro.constprop.0+0x47a2>
 800f3a8:	f8d6 70c4 	ldr.w	r7, [r6, #196]	; 0xc4
 800f3ac:	f8d6 00cc 	ldr.w	r0, [r6, #204]	; 0xcc
 800f3b0:	4639      	mov	r1, r7
 800f3b2:	f7f1 fbf5 	bl	8000ba0 <__aeabi_fsub>
 800f3b6:	4629      	mov	r1, r5
 800f3b8:	4606      	mov	r6, r0
 800f3ba:	9801      	ldr	r0, [sp, #4]
 800f3bc:	f7f1 fbf0 	bl	8000ba0 <__aeabi_fsub>
 800f3c0:	4601      	mov	r1, r0
 800f3c2:	4630      	mov	r0, r6
 800f3c4:	f7f1 fcf6 	bl	8000db4 <__aeabi_fmul>
 800f3c8:	4629      	mov	r1, r5
 800f3ca:	4605      	mov	r5, r0
 800f3cc:	4620      	mov	r0, r4
 800f3ce:	f7f1 fbe7 	bl	8000ba0 <__aeabi_fsub>
 800f3d2:	4601      	mov	r1, r0
 800f3d4:	4628      	mov	r0, r5
 800f3d6:	f7f1 fda1 	bl	8000f1c <__aeabi_fdiv>
 800f3da:	4639      	mov	r1, r7
 800f3dc:	f7f1 fbe2 	bl	8000ba4 <__addsf3>
 800f3e0:	9006      	str	r0, [sp, #24]
 800f3e2:	9b00      	ldr	r3, [sp, #0]
 800f3e4:	9801      	ldr	r0, [sp, #4]
 800f3e6:	f8d3 40d0 	ldr.w	r4, [r3, #208]	; 0xd0
 800f3ea:	4621      	mov	r1, r4
 800f3ec:	f7f1 fe94 	bl	8001118 <__aeabi_fcmpge>
 800f3f0:	2800      	cmp	r0, #0
 800f3f2:	f002 87fb 	beq.w	80123ec <kalman_3gyro.constprop.0+0x47f0>
 800f3f6:	f003 be3a 	b.w	801306e <kalman_3gyro.constprop.0+0x5472>
 800f3fa:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 800f3fe:	4630      	mov	r0, r6
 800f400:	f7f1 fe94 	bl	800112c <__aeabi_fcmpgt>
 800f404:	2800      	cmp	r0, #0
 800f406:	f002 867c 	beq.w	8012102 <kalman_3gyro.constprop.0+0x4506>
 800f40a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800f40e:	f7ff b95e 	b.w	800e6ce <kalman_3gyro.constprop.0+0xad2>
 800f412:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 800f416:	4620      	mov	r0, r4
 800f418:	f7f1 fe88 	bl	800112c <__aeabi_fcmpgt>
 800f41c:	2800      	cmp	r0, #0
 800f41e:	f002 8662 	beq.w	80120e6 <kalman_3gyro.constprop.0+0x44ea>
 800f422:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800f426:	f7ff b936 	b.w	800e696 <kalman_3gyro.constprop.0+0xa9a>
 800f42a:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 800f42e:	4628      	mov	r0, r5
 800f430:	f7f1 fe7c 	bl	800112c <__aeabi_fcmpgt>
 800f434:	2800      	cmp	r0, #0
 800f436:	f002 8648 	beq.w	80120ca <kalman_3gyro.constprop.0+0x44ce>
 800f43a:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800f43e:	f7ff b90e 	b.w	800e65e <kalman_3gyro.constprop.0+0xa62>
 800f442:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 800f446:	4630      	mov	r0, r6
 800f448:	f7f1 fe70 	bl	800112c <__aeabi_fcmpgt>
 800f44c:	2800      	cmp	r0, #0
 800f44e:	f002 8704 	beq.w	801225a <kalman_3gyro.constprop.0+0x465e>
 800f452:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800f456:	f7ff b89b 	b.w	800e590 <kalman_3gyro.constprop.0+0x994>
 800f45a:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 800f45e:	4620      	mov	r0, r4
 800f460:	f7f1 fe64 	bl	800112c <__aeabi_fcmpgt>
 800f464:	2800      	cmp	r0, #0
 800f466:	f002 8684 	beq.w	8012172 <kalman_3gyro.constprop.0+0x4576>
 800f46a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800f46e:	f7ff b873 	b.w	800e558 <kalman_3gyro.constprop.0+0x95c>
 800f472:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 800f476:	4628      	mov	r0, r5
 800f478:	f7f1 fe58 	bl	800112c <__aeabi_fcmpgt>
 800f47c:	2800      	cmp	r0, #0
 800f47e:	f002 866a 	beq.w	8012156 <kalman_3gyro.constprop.0+0x455a>
 800f482:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800f486:	f7ff b848 	b.w	800e51a <kalman_3gyro.constprop.0+0x91e>
 800f48a:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 800f48e:	4620      	mov	r0, r4
 800f490:	f7f1 fe4c 	bl	800112c <__aeabi_fcmpgt>
 800f494:	2800      	cmp	r0, #0
 800f496:	f002 8650 	beq.w	801213a <kalman_3gyro.constprop.0+0x453e>
 800f49a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800f49e:	f7fe bfd4 	b.w	800e44a <kalman_3gyro.constprop.0+0x84e>
 800f4a2:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 800f4a6:	4630      	mov	r0, r6
 800f4a8:	f7f1 fe40 	bl	800112c <__aeabi_fcmpgt>
 800f4ac:	2800      	cmp	r0, #0
 800f4ae:	f002 8636 	beq.w	801211e <kalman_3gyro.constprop.0+0x4522>
 800f4b2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800f4b6:	f7fe bfac 	b.w	800e412 <kalman_3gyro.constprop.0+0x816>
 800f4ba:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 800f4be:	4628      	mov	r0, r5
 800f4c0:	f7f1 fe34 	bl	800112c <__aeabi_fcmpgt>
 800f4c4:	2800      	cmp	r0, #0
 800f4c6:	f002 86ba 	beq.w	801223e <kalman_3gyro.constprop.0+0x4642>
 800f4ca:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800f4ce:	f7fe bf84 	b.w	800e3da <kalman_3gyro.constprop.0+0x7de>
 800f4d2:	4648      	mov	r0, r9
 800f4d4:	4631      	mov	r1, r6
 800f4d6:	f7f1 fc6d 	bl	8000db4 <__aeabi_fmul>
 800f4da:	4681      	mov	r9, r0
 800f4dc:	f7ff bbb3 	b.w	800ec46 <kalman_3gyro.constprop.0+0x104a>
 800f4e0:	4648      	mov	r0, r9
 800f4e2:	4631      	mov	r1, r6
 800f4e4:	f7f1 fc66 	bl	8000db4 <__aeabi_fmul>
 800f4e8:	4681      	mov	r9, r0
 800f4ea:	f7ff bb7d 	b.w	800ebe8 <kalman_3gyro.constprop.0+0xfec>
 800f4ee:	4630      	mov	r0, r6
 800f4f0:	4621      	mov	r1, r4
 800f4f2:	f7f1 fc5f 	bl	8000db4 <__aeabi_fmul>
 800f4f6:	4606      	mov	r6, r0
 800f4f8:	f7ff bbd5 	b.w	800eca6 <kalman_3gyro.constprop.0+0x10aa>
 800f4fc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f500:	9308      	str	r3, [sp, #32]
 800f502:	9306      	str	r3, [sp, #24]
 800f504:	9c00      	ldr	r4, [sp, #0]
 800f506:	980e      	ldr	r0, [sp, #56]	; 0x38
 800f508:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
 800f50c:	f7f1 fb48 	bl	8000ba0 <__aeabi_fsub>
 800f510:	4603      	mov	r3, r0
 800f512:	f8d4 41c8 	ldr.w	r4, [r4, #456]	; 0x1c8
 800f516:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f51a:	4621      	mov	r1, r4
 800f51c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800f51e:	461d      	mov	r5, r3
 800f520:	930c      	str	r3, [sp, #48]	; 0x30
 800f522:	f7f1 fb3d 	bl	8000ba0 <__aeabi_fsub>
 800f526:	4629      	mov	r1, r5
 800f528:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800f52c:	f7f1 fb3a 	bl	8000ba4 <__addsf3>
 800f530:	4915      	ldr	r1, [pc, #84]	; (800f588 <kalman_3gyro.constprop.0+0x198c>)
 800f532:	4605      	mov	r5, r0
 800f534:	f7f1 fdfa 	bl	800112c <__aeabi_fcmpgt>
 800f538:	2800      	cmp	r0, #0
 800f53a:	f002 8116 	beq.w	801176a <kalman_3gyro.constprop.0+0x3b6e>
 800f53e:	4628      	mov	r0, r5
 800f540:	4912      	ldr	r1, [pc, #72]	; (800f58c <kalman_3gyro.constprop.0+0x1990>)
 800f542:	f7f1 fdf3 	bl	800112c <__aeabi_fcmpgt>
 800f546:	2800      	cmp	r0, #0
 800f548:	f042 84e0 	bne.w	8011f0c <kalman_3gyro.constprop.0+0x4310>
 800f54c:	490e      	ldr	r1, [pc, #56]	; (800f588 <kalman_3gyro.constprop.0+0x198c>)
 800f54e:	4628      	mov	r0, r5
 800f550:	f7f1 fb26 	bl	8000ba0 <__aeabi_fsub>
 800f554:	490e      	ldr	r1, [pc, #56]	; (800f590 <kalman_3gyro.constprop.0+0x1994>)
 800f556:	f7f1 fc2d 	bl	8000db4 <__aeabi_fmul>
 800f55a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800f55e:	f7f1 fb21 	bl	8000ba4 <__addsf3>
 800f562:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800f564:	9007      	str	r0, [sp, #28]
 800f566:	4629      	mov	r1, r5
 800f568:	f7f1 fdd6 	bl	8001118 <__aeabi_fcmpge>
 800f56c:	b900      	cbnz	r0, 800f570 <kalman_3gyro.constprop.0+0x1974>
 800f56e:	9507      	str	r5, [sp, #28]
 800f570:	9a00      	ldr	r2, [sp, #0]
 800f572:	7813      	ldrb	r3, [r2, #0]
 800f574:	9304      	str	r3, [sp, #16]
 800f576:	2b00      	cmp	r3, #0
 800f578:	f040 8252 	bne.w	800fa20 <kalman_3gyro.constprop.0+0x1e24>
 800f57c:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
 800f580:	931d      	str	r3, [sp, #116]	; 0x74
 800f582:	4613      	mov	r3, r2
 800f584:	e006      	b.n	800f594 <kalman_3gyro.constprop.0+0x1998>
 800f586:	bf00      	nop
 800f588:	3dcccccd 	.word	0x3dcccccd
 800f58c:	3fb77778 	.word	0x3fb77778
 800f590:	40400000 	.word	0x40400000
 800f594:	2100      	movs	r1, #0
 800f596:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 800f598:	f8c3 11b0 	str.w	r1, [r3, #432]	; 0x1b0
 800f59c:	f8c3 11b4 	str.w	r1, [r3, #436]	; 0x1b4
 800f5a0:	f8c3 11b8 	str.w	r1, [r3, #440]	; 0x1b8
 800f5a4:	4628      	mov	r0, r5
 800f5a6:	4629      	mov	r1, r5
 800f5a8:	f7f1 fc04 	bl	8000db4 <__aeabi_fmul>
 800f5ac:	4601      	mov	r1, r0
 800f5ae:	f7f1 faf9 	bl	8000ba4 <__addsf3>
 800f5b2:	9f31      	ldr	r7, [sp, #196]	; 0xc4
 800f5b4:	4683      	mov	fp, r0
 800f5b6:	4639      	mov	r1, r7
 800f5b8:	4628      	mov	r0, r5
 800f5ba:	f7f1 fbfb 	bl	8000db4 <__aeabi_fmul>
 800f5be:	4601      	mov	r1, r0
 800f5c0:	f7f1 faf0 	bl	8000ba4 <__addsf3>
 800f5c4:	4602      	mov	r2, r0
 800f5c6:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 800f5ca:	4628      	mov	r0, r5
 800f5cc:	4641      	mov	r1, r8
 800f5ce:	9205      	str	r2, [sp, #20]
 800f5d0:	f7f1 fbf0 	bl	8000db4 <__aeabi_fmul>
 800f5d4:	4601      	mov	r1, r0
 800f5d6:	f7f1 fae5 	bl	8000ba4 <__addsf3>
 800f5da:	4603      	mov	r3, r0
 800f5dc:	f8dd a0cc 	ldr.w	sl, [sp, #204]	; 0xcc
 800f5e0:	4628      	mov	r0, r5
 800f5e2:	4651      	mov	r1, sl
 800f5e4:	9302      	str	r3, [sp, #8]
 800f5e6:	f7f1 fbe5 	bl	8000db4 <__aeabi_fmul>
 800f5ea:	4601      	mov	r1, r0
 800f5ec:	f7f1 fada 	bl	8000ba4 <__addsf3>
 800f5f0:	4603      	mov	r3, r0
 800f5f2:	4639      	mov	r1, r7
 800f5f4:	4638      	mov	r0, r7
 800f5f6:	930d      	str	r3, [sp, #52]	; 0x34
 800f5f8:	f7f1 fbdc 	bl	8000db4 <__aeabi_fmul>
 800f5fc:	4601      	mov	r1, r0
 800f5fe:	f7f1 fad1 	bl	8000ba4 <__addsf3>
 800f602:	4641      	mov	r1, r8
 800f604:	4606      	mov	r6, r0
 800f606:	4638      	mov	r0, r7
 800f608:	f7f1 fbd4 	bl	8000db4 <__aeabi_fmul>
 800f60c:	4601      	mov	r1, r0
 800f60e:	f7f1 fac9 	bl	8000ba4 <__addsf3>
 800f612:	4651      	mov	r1, sl
 800f614:	4605      	mov	r5, r0
 800f616:	4638      	mov	r0, r7
 800f618:	f7f1 fbcc 	bl	8000db4 <__aeabi_fmul>
 800f61c:	4601      	mov	r1, r0
 800f61e:	f7f1 fac1 	bl	8000ba4 <__addsf3>
 800f622:	4607      	mov	r7, r0
 800f624:	4641      	mov	r1, r8
 800f626:	4640      	mov	r0, r8
 800f628:	9703      	str	r7, [sp, #12]
 800f62a:	f7f1 fbc3 	bl	8000db4 <__aeabi_fmul>
 800f62e:	4601      	mov	r1, r0
 800f630:	f7f1 fab8 	bl	8000ba4 <__addsf3>
 800f634:	4651      	mov	r1, sl
 800f636:	4607      	mov	r7, r0
 800f638:	4640      	mov	r0, r8
 800f63a:	f7f1 fbbb 	bl	8000db4 <__aeabi_fmul>
 800f63e:	4601      	mov	r1, r0
 800f640:	f7f1 fab0 	bl	8000ba4 <__addsf3>
 800f644:	4639      	mov	r1, r7
 800f646:	4682      	mov	sl, r0
 800f648:	4630      	mov	r0, r6
 800f64a:	f7f1 faab 	bl	8000ba4 <__addsf3>
 800f64e:	4601      	mov	r1, r0
 800f650:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f654:	f7f1 faa4 	bl	8000ba0 <__aeabi_fsub>
 800f658:	4684      	mov	ip, r0
 800f65a:	9a05      	ldr	r2, [sp, #20]
 800f65c:	4651      	mov	r1, sl
 800f65e:	4610      	mov	r0, r2
 800f660:	9212      	str	r2, [sp, #72]	; 0x48
 800f662:	f8cd c114 	str.w	ip, [sp, #276]	; 0x114
 800f666:	f7f1 fa9d 	bl	8000ba4 <__addsf3>
 800f66a:	9903      	ldr	r1, [sp, #12]
 800f66c:	4680      	mov	r8, r0
 800f66e:	9802      	ldr	r0, [sp, #8]
 800f670:	f7f1 fa96 	bl	8000ba0 <__aeabi_fsub>
 800f674:	4684      	mov	ip, r0
 800f676:	4639      	mov	r1, r7
 800f678:	4658      	mov	r0, fp
 800f67a:	f8cd c014 	str.w	ip, [sp, #20]
 800f67e:	f7f1 fa91 	bl	8000ba4 <__addsf3>
 800f682:	4601      	mov	r1, r0
 800f684:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f688:	f7f1 fa8a 	bl	8000ba0 <__aeabi_fsub>
 800f68c:	4607      	mov	r7, r0
 800f68e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f690:	4629      	mov	r1, r5
 800f692:	4618      	mov	r0, r3
 800f694:	9749      	str	r7, [sp, #292]	; 0x124
 800f696:	f7f1 fa85 	bl	8000ba4 <__addsf3>
 800f69a:	4684      	mov	ip, r0
 800f69c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f69e:	4628      	mov	r0, r5
 800f6a0:	4619      	mov	r1, r3
 800f6a2:	4665      	mov	r5, ip
 800f6a4:	f7f1 fa7c 	bl	8000ba0 <__aeabi_fsub>
 800f6a8:	4603      	mov	r3, r0
 800f6aa:	4631      	mov	r1, r6
 800f6ac:	4658      	mov	r0, fp
 800f6ae:	461e      	mov	r6, r3
 800f6b0:	f7f1 fa78 	bl	8000ba4 <__addsf3>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f6ba:	4619      	mov	r1, r3
 800f6bc:	930d      	str	r3, [sp, #52]	; 0x34
 800f6be:	f7f1 fa6f 	bl	8000ba0 <__aeabi_fsub>
 800f6c2:	4683      	mov	fp, r0
 800f6c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f6c6:	4651      	mov	r1, sl
 800f6c8:	4610      	mov	r0, r2
 800f6ca:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800f6ce:	f8cd b134 	str.w	fp, [sp, #308]	; 0x134
 800f6d2:	f7f1 fa65 	bl	8000ba0 <__aeabi_fsub>
 800f6d6:	4602      	mov	r2, r0
 800f6d8:	f8dd c014 	ldr.w	ip, [sp, #20]
 800f6dc:	9903      	ldr	r1, [sp, #12]
 800f6de:	9802      	ldr	r0, [sp, #8]
 800f6e0:	f8cd c11c 	str.w	ip, [sp, #284]	; 0x11c
 800f6e4:	9248      	str	r2, [sp, #288]	; 0x120
 800f6e6:	f7f1 fa5d 	bl	8000ba4 <__addsf3>
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	4602      	mov	r2, r0
 800f6ee:	4621      	mov	r1, r4
 800f6f0:	4620      	mov	r0, r4
 800f6f2:	924b      	str	r2, [sp, #300]	; 0x12c
 800f6f4:	932d      	str	r3, [sp, #180]	; 0xb4
 800f6f6:	954a      	str	r5, [sp, #296]	; 0x128
 800f6f8:	964c      	str	r6, [sp, #304]	; 0x130
 800f6fa:	f7f1 fb5b 	bl	8000db4 <__aeabi_fmul>
 800f6fe:	4601      	mov	r1, r0
 800f700:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f704:	f7f1 fa4c 	bl	8000ba0 <__aeabi_fsub>
 800f708:	f009 f890 	bl	801882c <sqrtf>
 800f70c:	4682      	mov	sl, r0
 800f70e:	4621      	mov	r1, r4
 800f710:	9805      	ldr	r0, [sp, #20]
 800f712:	942f      	str	r4, [sp, #188]	; 0xbc
 800f714:	f8cd a0b8 	str.w	sl, [sp, #184]	; 0xb8
 800f718:	f7f1 fb4c 	bl	8000db4 <__aeabi_fmul>
 800f71c:	4641      	mov	r1, r8
 800f71e:	4680      	mov	r8, r0
 800f720:	4650      	mov	r0, sl
 800f722:	f7f1 fb47 	bl	8000db4 <__aeabi_fmul>
 800f726:	4601      	mov	r1, r0
 800f728:	4640      	mov	r0, r8
 800f72a:	f7f1 fa3b 	bl	8000ba4 <__addsf3>
 800f72e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f730:	4601      	mov	r1, r0
 800f732:	6818      	ldr	r0, [r3, #0]
 800f734:	f7f1 fa34 	bl	8000ba0 <__aeabi_fsub>
 800f738:	4602      	mov	r2, r0
 800f73a:	4621      	mov	r1, r4
 800f73c:	4628      	mov	r0, r5
 800f73e:	9275      	str	r2, [sp, #468]	; 0x1d4
 800f740:	f7f1 fb38 	bl	8000db4 <__aeabi_fmul>
 800f744:	4639      	mov	r1, r7
 800f746:	4607      	mov	r7, r0
 800f748:	4650      	mov	r0, sl
 800f74a:	f7f1 fb33 	bl	8000db4 <__aeabi_fmul>
 800f74e:	4601      	mov	r1, r0
 800f750:	4638      	mov	r0, r7
 800f752:	f7f1 fa27 	bl	8000ba4 <__addsf3>
 800f756:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f758:	4601      	mov	r1, r0
 800f75a:	6878      	ldr	r0, [r7, #4]
 800f75c:	f7f1 fa20 	bl	8000ba0 <__aeabi_fsub>
 800f760:	4602      	mov	r2, r0
 800f762:	4631      	mov	r1, r6
 800f764:	4650      	mov	r0, sl
 800f766:	9276      	str	r2, [sp, #472]	; 0x1d8
 800f768:	f7f1 fb24 	bl	8000db4 <__aeabi_fmul>
 800f76c:	4602      	mov	r2, r0
 800f76e:	4621      	mov	r1, r4
 800f770:	4658      	mov	r0, fp
 800f772:	4614      	mov	r4, r2
 800f774:	f7f1 fb1e 	bl	8000db4 <__aeabi_fmul>
 800f778:	4601      	mov	r1, r0
 800f77a:	4620      	mov	r0, r4
 800f77c:	f7f1 fa12 	bl	8000ba4 <__addsf3>
 800f780:	4601      	mov	r1, r0
 800f782:	68b8      	ldr	r0, [r7, #8]
 800f784:	f7f1 fa0c 	bl	8000ba0 <__aeabi_fsub>
 800f788:	9902      	ldr	r1, [sp, #8]
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	4602      	mov	r2, r0
 800f78e:	461e      	mov	r6, r3
 800f790:	9803      	ldr	r0, [sp, #12]
 800f792:	9302      	str	r3, [sp, #8]
 800f794:	9277      	str	r2, [sp, #476]	; 0x1dc
 800f796:	f7f1 fa03 	bl	8000ba0 <__aeabi_fsub>
 800f79a:	4631      	mov	r1, r6
 800f79c:	f7f1 fa02 	bl	8000ba4 <__addsf3>
 800f7a0:	4602      	mov	r2, r0
 800f7a2:	693b      	ldr	r3, [r7, #16]
 800f7a4:	4629      	mov	r1, r5
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	9305      	str	r3, [sp, #20]
 800f7aa:	9227      	str	r2, [sp, #156]	; 0x9c
 800f7ac:	9278      	str	r2, [sp, #480]	; 0x1e0
 800f7ae:	f7f1 f9f7 	bl	8000ba0 <__aeabi_fsub>
 800f7b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f7b4:	4602      	mov	r2, r0
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	697b      	ldr	r3, [r7, #20]
 800f7ba:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800f7be:	461c      	mov	r4, r3
 800f7c0:	930d      	str	r3, [sp, #52]	; 0x34
 800f7c2:	9228      	str	r2, [sp, #160]	; 0xa0
 800f7c4:	9279      	str	r2, [sp, #484]	; 0x1e4
 800f7c6:	f7f1 f9eb 	bl	8000ba0 <__aeabi_fsub>
 800f7ca:	4621      	mov	r1, r4
 800f7cc:	f7f1 f9ea 	bl	8000ba4 <__addsf3>
 800f7d0:	4603      	mov	r3, r0
 800f7d2:	9329      	str	r3, [sp, #164]	; 0xa4
 800f7d4:	937a      	str	r3, [sp, #488]	; 0x1e8
 800f7d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f7d8:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800f7da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f7dc:	937e      	str	r3, [sp, #504]	; 0x1f8
 800f7de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f7e0:	4620      	mov	r0, r4
 800f7e2:	4995      	ldr	r1, [pc, #596]	; (800fa38 <kalman_3gyro.constprop.0+0x1e3c>)
 800f7e4:	957f      	str	r5, [sp, #508]	; 0x1fc
 800f7e6:	9380      	str	r3, [sp, #512]	; 0x200
 800f7e8:	f7f1 fc82 	bl	80010f0 <__aeabi_fcmplt>
 800f7ec:	2800      	cmp	r0, #0
 800f7ee:	f000 8113 	beq.w	800fa18 <kalman_3gyro.constprop.0+0x1e1c>
 800f7f2:	4620      	mov	r0, r4
 800f7f4:	4991      	ldr	r1, [pc, #580]	; (800fa3c <kalman_3gyro.constprop.0+0x1e40>)
 800f7f6:	f7f1 fc99 	bl	800112c <__aeabi_fcmpgt>
 800f7fa:	2800      	cmp	r0, #0
 800f7fc:	f000 810c 	beq.w	800fa18 <kalman_3gyro.constprop.0+0x1e1c>
 800f800:	4621      	mov	r1, r4
 800f802:	4628      	mov	r0, r5
 800f804:	f7f1 f9cc 	bl	8000ba0 <__aeabi_fsub>
 800f808:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800f80a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800f80e:	f7f1 f9c9 	bl	8000ba4 <__addsf3>
 800f812:	2100      	movs	r1, #0
 800f814:	4604      	mov	r4, r0
 800f816:	f7f1 fc89 	bl	800112c <__aeabi_fcmpgt>
 800f81a:	2800      	cmp	r0, #0
 800f81c:	f000 813e 	beq.w	800fa9c <kalman_3gyro.constprop.0+0x1ea0>
 800f820:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800f824:	4620      	mov	r0, r4
 800f826:	f7f1 fc63 	bl	80010f0 <__aeabi_fcmplt>
 800f82a:	2800      	cmp	r0, #0
 800f82c:	f002 8371 	beq.w	8011f12 <kalman_3gyro.constprop.0+0x4316>
 800f830:	4983      	ldr	r1, [pc, #524]	; (800fa40 <kalman_3gyro.constprop.0+0x1e44>)
 800f832:	4620      	mov	r0, r4
 800f834:	f7f1 fc5c 	bl	80010f0 <__aeabi_fcmplt>
 800f838:	4982      	ldr	r1, [pc, #520]	; (800fa44 <kalman_3gyro.constprop.0+0x1e48>)
 800f83a:	2800      	cmp	r0, #0
 800f83c:	f042 84e1 	bne.w	8012202 <kalman_3gyro.constprop.0+0x4606>
 800f840:	4620      	mov	r0, r4
 800f842:	f7f1 fc55 	bl	80010f0 <__aeabi_fcmplt>
 800f846:	2800      	cmp	r0, #0
 800f848:	f002 84e1 	beq.w	801220e <kalman_3gyro.constprop.0+0x4612>
 800f84c:	4620      	mov	r0, r4
 800f84e:	497e      	ldr	r1, [pc, #504]	; (800fa48 <kalman_3gyro.constprop.0+0x1e4c>)
 800f850:	f7f1 fc62 	bl	8001118 <__aeabi_fcmpge>
 800f854:	2800      	cmp	r0, #0
 800f856:	f042 87ee 	bne.w	8012836 <kalman_3gyro.constprop.0+0x4c3a>
 800f85a:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
 800f85e:	4620      	mov	r0, r4
 800f860:	497a      	ldr	r1, [pc, #488]	; (800fa4c <kalman_3gyro.constprop.0+0x1e50>)
 800f862:	f7f1 fc59 	bl	8001118 <__aeabi_fcmpge>
 800f866:	2800      	cmp	r0, #0
 800f868:	f002 87fa 	beq.w	8012860 <kalman_3gyro.constprop.0+0x4c64>
 800f86c:	4620      	mov	r0, r4
 800f86e:	4978      	ldr	r1, [pc, #480]	; (800fa50 <kalman_3gyro.constprop.0+0x1e54>)
 800f870:	f7f1 fc3e 	bl	80010f0 <__aeabi_fcmplt>
 800f874:	2800      	cmp	r0, #0
 800f876:	f002 87fa 	beq.w	801286e <kalman_3gyro.constprop.0+0x4c72>
 800f87a:	4974      	ldr	r1, [pc, #464]	; (800fa4c <kalman_3gyro.constprop.0+0x1e50>)
 800f87c:	4620      	mov	r0, r4
 800f87e:	f7f1 f98f 	bl	8000ba0 <__aeabi_fsub>
 800f882:	4974      	ldr	r1, [pc, #464]	; (800fa54 <kalman_3gyro.constprop.0+0x1e58>)
 800f884:	f7f1 fa96 	bl	8000db4 <__aeabi_fmul>
 800f888:	4973      	ldr	r1, [pc, #460]	; (800fa58 <kalman_3gyro.constprop.0+0x1e5c>)
 800f88a:	f7f1 fa93 	bl	8000db4 <__aeabi_fmul>
 800f88e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800f892:	f7f1 f987 	bl	8000ba4 <__addsf3>
 800f896:	4606      	mov	r6, r0
 800f898:	4620      	mov	r0, r4
 800f89a:	4970      	ldr	r1, [pc, #448]	; (800fa5c <kalman_3gyro.constprop.0+0x1e60>)
 800f89c:	f7f1 fc3c 	bl	8001118 <__aeabi_fcmpge>
 800f8a0:	2800      	cmp	r0, #0
 800f8a2:	f002 87fa 	beq.w	801289a <kalman_3gyro.constprop.0+0x4c9e>
 800f8a6:	4620      	mov	r0, r4
 800f8a8:	496d      	ldr	r1, [pc, #436]	; (800fa60 <kalman_3gyro.constprop.0+0x1e64>)
 800f8aa:	f7f1 fc21 	bl	80010f0 <__aeabi_fcmplt>
 800f8ae:	2800      	cmp	r0, #0
 800f8b0:	f002 87fa 	beq.w	80128a8 <kalman_3gyro.constprop.0+0x4cac>
 800f8b4:	4969      	ldr	r1, [pc, #420]	; (800fa5c <kalman_3gyro.constprop.0+0x1e60>)
 800f8b6:	4620      	mov	r0, r4
 800f8b8:	f7f1 f972 	bl	8000ba0 <__aeabi_fsub>
 800f8bc:	4969      	ldr	r1, [pc, #420]	; (800fa64 <kalman_3gyro.constprop.0+0x1e68>)
 800f8be:	f7f1 fa79 	bl	8000db4 <__aeabi_fmul>
 800f8c2:	4969      	ldr	r1, [pc, #420]	; (800fa68 <kalman_3gyro.constprop.0+0x1e6c>)
 800f8c4:	f7f1 fa76 	bl	8000db4 <__aeabi_fmul>
 800f8c8:	4968      	ldr	r1, [pc, #416]	; (800fa6c <kalman_3gyro.constprop.0+0x1e70>)
 800f8ca:	f7f1 f96b 	bl	8000ba4 <__addsf3>
 800f8ce:	4606      	mov	r6, r0
 800f8d0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800f8d4:	4620      	mov	r0, r4
 800f8d6:	f7f1 fc1f 	bl	8001118 <__aeabi_fcmpge>
 800f8da:	b170      	cbz	r0, 800f8fa <kalman_3gyro.constprop.0+0x1cfe>
 800f8dc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800f8e0:	4620      	mov	r0, r4
 800f8e2:	f7f1 f95d 	bl	8000ba0 <__aeabi_fsub>
 800f8e6:	4962      	ldr	r1, [pc, #392]	; (800fa70 <kalman_3gyro.constprop.0+0x1e74>)
 800f8e8:	f7f1 fa64 	bl	8000db4 <__aeabi_fmul>
 800f8ec:	4601      	mov	r1, r0
 800f8ee:	f7f1 f959 	bl	8000ba4 <__addsf3>
 800f8f2:	4960      	ldr	r1, [pc, #384]	; (800fa74 <kalman_3gyro.constprop.0+0x1e78>)
 800f8f4:	f7f1 f956 	bl	8000ba4 <__addsf3>
 800f8f8:	4606      	mov	r6, r0
 800f8fa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800f8fe:	4630      	mov	r0, r6
 800f900:	f7f1 f950 	bl	8000ba4 <__addsf3>
 800f904:	4601      	mov	r1, r0
 800f906:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800f90a:	f7f1 fb07 	bl	8000f1c <__aeabi_fdiv>
 800f90e:	494e      	ldr	r1, [pc, #312]	; (800fa48 <kalman_3gyro.constprop.0+0x1e4c>)
 800f910:	4607      	mov	r7, r0
 800f912:	f7f1 fc01 	bl	8001118 <__aeabi_fcmpge>
 800f916:	b900      	cbnz	r0, 800f91a <kalman_3gyro.constprop.0+0x1d1e>
 800f918:	4f4b      	ldr	r7, [pc, #300]	; (800fa48 <kalman_3gyro.constprop.0+0x1e4c>)
 800f91a:	4957      	ldr	r1, [pc, #348]	; (800fa78 <kalman_3gyro.constprop.0+0x1e7c>)
 800f91c:	4638      	mov	r0, r7
 800f91e:	f7f1 fa49 	bl	8000db4 <__aeabi_fmul>
 800f922:	4948      	ldr	r1, [pc, #288]	; (800fa44 <kalman_3gyro.constprop.0+0x1e48>)
 800f924:	4605      	mov	r5, r0
 800f926:	4638      	mov	r0, r7
 800f928:	f7f1 fa44 	bl	8000db4 <__aeabi_fmul>
 800f92c:	4944      	ldr	r1, [pc, #272]	; (800fa40 <kalman_3gyro.constprop.0+0x1e44>)
 800f92e:	4682      	mov	sl, r0
 800f930:	4620      	mov	r0, r4
 800f932:	f7f1 fbdd 	bl	80010f0 <__aeabi_fcmplt>
 800f936:	4943      	ldr	r1, [pc, #268]	; (800fa44 <kalman_3gyro.constprop.0+0x1e48>)
 800f938:	2800      	cmp	r0, #0
 800f93a:	f003 801f 	beq.w	801297c <kalman_3gyro.constprop.0+0x4d80>
 800f93e:	4620      	mov	r0, r4
 800f940:	f7f1 fbea 	bl	8001118 <__aeabi_fcmpge>
 800f944:	2800      	cmp	r0, #0
 800f946:	f003 801f 	beq.w	8012988 <kalman_3gyro.constprop.0+0x4d8c>
 800f94a:	4620      	mov	r0, r4
 800f94c:	493e      	ldr	r1, [pc, #248]	; (800fa48 <kalman_3gyro.constprop.0+0x1e4c>)
 800f94e:	f7f1 fbcf 	bl	80010f0 <__aeabi_fcmplt>
 800f952:	2800      	cmp	r0, #0
 800f954:	f002 87c0 	beq.w	80128d8 <kalman_3gyro.constprop.0+0x4cdc>
 800f958:	493a      	ldr	r1, [pc, #232]	; (800fa44 <kalman_3gyro.constprop.0+0x1e48>)
 800f95a:	4620      	mov	r0, r4
 800f95c:	f7f1 f920 	bl	8000ba0 <__aeabi_fsub>
 800f960:	4946      	ldr	r1, [pc, #280]	; (800fa7c <kalman_3gyro.constprop.0+0x1e80>)
 800f962:	f7f1 fa27 	bl	8000db4 <__aeabi_fmul>
 800f966:	4946      	ldr	r1, [pc, #280]	; (800fa80 <kalman_3gyro.constprop.0+0x1e84>)
 800f968:	f7f1 fa24 	bl	8000db4 <__aeabi_fmul>
 800f96c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800f970:	f7f1 f918 	bl	8000ba4 <__addsf3>
 800f974:	4683      	mov	fp, r0
 800f976:	4620      	mov	r0, r4
 800f978:	4934      	ldr	r1, [pc, #208]	; (800fa4c <kalman_3gyro.constprop.0+0x1e50>)
 800f97a:	f7f1 fbcd 	bl	8001118 <__aeabi_fcmpge>
 800f97e:	2800      	cmp	r0, #0
 800f980:	f002 87bf 	beq.w	8012902 <kalman_3gyro.constprop.0+0x4d06>
 800f984:	4620      	mov	r0, r4
 800f986:	4932      	ldr	r1, [pc, #200]	; (800fa50 <kalman_3gyro.constprop.0+0x1e54>)
 800f988:	f7f1 fbb2 	bl	80010f0 <__aeabi_fcmplt>
 800f98c:	2800      	cmp	r0, #0
 800f98e:	f002 87bf 	beq.w	8012910 <kalman_3gyro.constprop.0+0x4d14>
 800f992:	492e      	ldr	r1, [pc, #184]	; (800fa4c <kalman_3gyro.constprop.0+0x1e50>)
 800f994:	4620      	mov	r0, r4
 800f996:	f7f1 f903 	bl	8000ba0 <__aeabi_fsub>
 800f99a:	493a      	ldr	r1, [pc, #232]	; (800fa84 <kalman_3gyro.constprop.0+0x1e88>)
 800f99c:	f7f1 fa0a 	bl	8000db4 <__aeabi_fmul>
 800f9a0:	492d      	ldr	r1, [pc, #180]	; (800fa58 <kalman_3gyro.constprop.0+0x1e5c>)
 800f9a2:	f7f1 fa07 	bl	8000db4 <__aeabi_fmul>
 800f9a6:	4938      	ldr	r1, [pc, #224]	; (800fa88 <kalman_3gyro.constprop.0+0x1e8c>)
 800f9a8:	f7f1 f8fc 	bl	8000ba4 <__addsf3>
 800f9ac:	4683      	mov	fp, r0
 800f9ae:	4620      	mov	r0, r4
 800f9b0:	492a      	ldr	r1, [pc, #168]	; (800fa5c <kalman_3gyro.constprop.0+0x1e60>)
 800f9b2:	f7f1 fbb1 	bl	8001118 <__aeabi_fcmpge>
 800f9b6:	2800      	cmp	r0, #0
 800f9b8:	f002 87c1 	beq.w	801293e <kalman_3gyro.constprop.0+0x4d42>
 800f9bc:	4620      	mov	r0, r4
 800f9be:	4928      	ldr	r1, [pc, #160]	; (800fa60 <kalman_3gyro.constprop.0+0x1e64>)
 800f9c0:	f7f1 fb96 	bl	80010f0 <__aeabi_fcmplt>
 800f9c4:	2800      	cmp	r0, #0
 800f9c6:	f002 87c1 	beq.w	801294c <kalman_3gyro.constprop.0+0x4d50>
 800f9ca:	4924      	ldr	r1, [pc, #144]	; (800fa5c <kalman_3gyro.constprop.0+0x1e60>)
 800f9cc:	4620      	mov	r0, r4
 800f9ce:	f7f1 f8e7 	bl	8000ba0 <__aeabi_fsub>
 800f9d2:	492e      	ldr	r1, [pc, #184]	; (800fa8c <kalman_3gyro.constprop.0+0x1e90>)
 800f9d4:	f7f1 f9ee 	bl	8000db4 <__aeabi_fmul>
 800f9d8:	4923      	ldr	r1, [pc, #140]	; (800fa68 <kalman_3gyro.constprop.0+0x1e6c>)
 800f9da:	f7f1 f9eb 	bl	8000db4 <__aeabi_fmul>
 800f9de:	492c      	ldr	r1, [pc, #176]	; (800fa90 <kalman_3gyro.constprop.0+0x1e94>)
 800f9e0:	f7f1 f8e0 	bl	8000ba4 <__addsf3>
 800f9e4:	4683      	mov	fp, r0
 800f9e6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800f9ea:	4620      	mov	r0, r4
 800f9ec:	f7f1 fb94 	bl	8001118 <__aeabi_fcmpge>
 800f9f0:	2800      	cmp	r0, #0
 800f9f2:	f002 8295 	beq.w	8011f20 <kalman_3gyro.constprop.0+0x4324>
 800f9f6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800f9fa:	4620      	mov	r0, r4
 800f9fc:	f7f1 f8d0 	bl	8000ba0 <__aeabi_fsub>
 800fa00:	4924      	ldr	r1, [pc, #144]	; (800fa94 <kalman_3gyro.constprop.0+0x1e98>)
 800fa02:	f7f1 f9d7 	bl	8000db4 <__aeabi_fmul>
 800fa06:	4601      	mov	r1, r0
 800fa08:	f7f1 f8cc 	bl	8000ba4 <__addsf3>
 800fa0c:	4922      	ldr	r1, [pc, #136]	; (800fa98 <kalman_3gyro.constprop.0+0x1e9c>)
 800fa0e:	f7f1 f8c9 	bl	8000ba4 <__addsf3>
 800fa12:	4683      	mov	fp, r0
 800fa14:	f002 ba84 	b.w	8011f20 <kalman_3gyro.constprop.0+0x4324>
 800fa18:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800fa1c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800fa1e:	e6f1      	b.n	800f804 <kalman_3gyro.constprop.0+0x1c08>
 800fa20:	7853      	ldrb	r3, [r2, #1]
 800fa22:	9304      	str	r3, [sp, #16]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	f002 8282 	beq.w	8011f2e <kalman_3gyro.constprop.0+0x4332>
 800fa2a:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
 800fa2e:	931d      	str	r3, [sp, #116]	; 0x74
 800fa30:	2300      	movs	r3, #0
 800fa32:	9304      	str	r3, [sp, #16]
 800fa34:	4613      	mov	r3, r2
 800fa36:	e5ad      	b.n	800f594 <kalman_3gyro.constprop.0+0x1998>
 800fa38:	3f99999a 	.word	0x3f99999a
 800fa3c:	3f4ccccd 	.word	0x3f4ccccd
 800fa40:	3ba3d70a 	.word	0x3ba3d70a
 800fa44:	3c23d70a 	.word	0x3c23d70a
 800fa48:	3c75c28f 	.word	0x3c75c28f
 800fa4c:	3cf5c28f 	.word	0x3cf5c28f
 800fa50:	3d4ccccd 	.word	0x3d4ccccd
 800fa54:	40400000 	.word	0x40400000
 800fa58:	4247ffff 	.word	0x4247ffff
 800fa5c:	3dcccccd 	.word	0x3dcccccd
 800fa60:	3e4ccccd 	.word	0x3e4ccccd
 800fa64:	42d40000 	.word	0x42d40000
 800fa68:	41200000 	.word	0x41200000
 800fa6c:	41500000 	.word	0x41500000
 800fa70:	46979000 	.word	0x46979000
 800fa74:	4415c000 	.word	0x4415c000
 800fa78:	3b449ba6 	.word	0x3b449ba6
 800fa7c:	3d4cccc0 	.word	0x3d4cccc0
 800fa80:	43480000 	.word	0x43480000
 800fa84:	3eb33334 	.word	0x3eb33334
 800fa88:	3f933333 	.word	0x3f933333
 800fa8c:	410c0000 	.word	0x410c0000
 800fa90:	3fe00000 	.word	0x3fe00000
 800fa94:	42c80000 	.word	0x42c80000
 800fa98:	424a0000 	.word	0x424a0000
 800fa9c:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 800faa0:	465e      	mov	r6, fp
 800faa2:	465f      	mov	r7, fp
 800faa4:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 800fd68 <kalman_3gyro.constprop.0+0x216c>
 800faa8:	4da7      	ldr	r5, [pc, #668]	; (800fd48 <kalman_3gyro.constprop.0+0x214c>)
 800faaa:	9906      	ldr	r1, [sp, #24]
 800faac:	9807      	ldr	r0, [sp, #28]
 800faae:	f7f1 f981 	bl	8000db4 <__aeabi_fmul>
 800fab2:	9969      	ldr	r1, [sp, #420]	; 0x1a4
 800fab4:	4680      	mov	r8, r0
 800fab6:	f7f1 f97d 	bl	8000db4 <__aeabi_fmul>
 800faba:	4603      	mov	r3, r0
 800fabc:	4641      	mov	r1, r8
 800fabe:	9006      	str	r0, [sp, #24]
 800fac0:	986a      	ldr	r0, [sp, #424]	; 0x1a8
 800fac2:	9369      	str	r3, [sp, #420]	; 0x1a4
 800fac4:	f7f1 f976 	bl	8000db4 <__aeabi_fmul>
 800fac8:	4603      	mov	r3, r0
 800faca:	4641      	mov	r1, r8
 800facc:	986b      	ldr	r0, [sp, #428]	; 0x1ac
 800face:	936a      	str	r3, [sp, #424]	; 0x1a8
 800fad0:	f7f1 f970 	bl	8000db4 <__aeabi_fmul>
 800fad4:	4603      	mov	r3, r0
 800fad6:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 800fad8:	9808      	ldr	r0, [sp, #32]
 800fada:	936b      	str	r3, [sp, #428]	; 0x1ac
 800fadc:	f7f1 f96a 	bl	8000db4 <__aeabi_fmul>
 800fae0:	4603      	mov	r3, r0
 800fae2:	991e      	ldr	r1, [sp, #120]	; 0x78
 800fae4:	936c      	str	r3, [sp, #432]	; 0x1b0
 800fae6:	9303      	str	r3, [sp, #12]
 800fae8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800faea:	4608      	mov	r0, r1
 800faec:	936d      	str	r3, [sp, #436]	; 0x1b4
 800faee:	936e      	str	r3, [sp, #440]	; 0x1b8
 800faf0:	f7f1 f858 	bl	8000ba4 <__addsf3>
 800faf4:	4631      	mov	r1, r6
 800faf6:	f7f1 f95d 	bl	8000db4 <__aeabi_fmul>
 800fafa:	4680      	mov	r8, r0
 800fafc:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800fafe:	9542      	str	r5, [sp, #264]	; 0x108
 800fb00:	4608      	mov	r0, r1
 800fb02:	f8cd 81c8 	str.w	r8, [sp, #456]	; 0x1c8
 800fb06:	f7f1 f84d 	bl	8000ba4 <__addsf3>
 800fb0a:	4631      	mov	r1, r6
 800fb0c:	f7f1 f952 	bl	8000db4 <__aeabi_fmul>
 800fb10:	9b00      	ldr	r3, [sp, #0]
 800fb12:	9914      	ldr	r1, [sp, #80]	; 0x50
 800fb14:	7b1a      	ldrb	r2, [r3, #12]
 800fb16:	4605      	mov	r5, r0
 800fb18:	9073      	str	r0, [sp, #460]	; 0x1cc
 800fb1a:	f8cd a10c 	str.w	sl, [sp, #268]	; 0x10c
 800fb1e:	9174      	str	r1, [sp, #464]	; 0x1d0
 800fb20:	2a00      	cmp	r2, #0
 800fb22:	f001 8612 	beq.w	801174a <kalman_3gyro.constprop.0+0x3b4e>
 800fb26:	9b03      	ldr	r3, [sp, #12]
 800fb28:	4630      	mov	r0, r6
 800fb2a:	4619      	mov	r1, r3
 800fb2c:	f7f1 f942 	bl	8000db4 <__aeabi_fmul>
 800fb30:	4603      	mov	r3, r0
 800fb32:	4639      	mov	r1, r7
 800fb34:	9820      	ldr	r0, [sp, #128]	; 0x80
 800fb36:	936c      	str	r3, [sp, #432]	; 0x1b0
 800fb38:	f7f1 f93c 	bl	8000db4 <__aeabi_fmul>
 800fb3c:	4603      	mov	r3, r0
 800fb3e:	4631      	mov	r1, r6
 800fb40:	9810      	ldr	r0, [sp, #64]	; 0x40
 800fb42:	933c      	str	r3, [sp, #240]	; 0xf0
 800fb44:	9303      	str	r3, [sp, #12]
 800fb46:	f7f1 f935 	bl	8000db4 <__aeabi_fmul>
 800fb4a:	4602      	mov	r2, r0
 800fb4c:	9b03      	ldr	r3, [sp, #12]
 800fb4e:	4631      	mov	r1, r6
 800fb50:	4630      	mov	r0, r6
 800fb52:	933d      	str	r3, [sp, #244]	; 0xf4
 800fb54:	933e      	str	r3, [sp, #248]	; 0xf8
 800fb56:	926d      	str	r2, [sp, #436]	; 0x1b4
 800fb58:	926e      	str	r2, [sp, #440]	; 0x1b8
 800fb5a:	f7f1 f823 	bl	8000ba4 <__addsf3>
 800fb5e:	4601      	mov	r1, r0
 800fb60:	4628      	mov	r0, r5
 800fb62:	f7f1 f927 	bl	8000db4 <__aeabi_fmul>
 800fb66:	4605      	mov	r5, r0
 800fb68:	4639      	mov	r1, r7
 800fb6a:	4650      	mov	r0, sl
 800fb6c:	9573      	str	r5, [sp, #460]	; 0x1cc
 800fb6e:	f7f1 f921 	bl	8000db4 <__aeabi_fmul>
 800fb72:	9b00      	ldr	r3, [sp, #0]
 800fb74:	9043      	str	r0, [sp, #268]	; 0x10c
 800fb76:	7b5e      	ldrb	r6, [r3, #13]
 800fb78:	7b9f      	ldrb	r7, [r3, #14]
 800fb7a:	f88d 6090 	strb.w	r6, [sp, #144]	; 0x90
 800fb7e:	f88d 6091 	strb.w	r6, [sp, #145]	; 0x91
 800fb82:	f88d 6092 	strb.w	r6, [sp, #146]	; 0x92
 800fb86:	f88d 7093 	strb.w	r7, [sp, #147]	; 0x93
 800fb8a:	f88d 7094 	strb.w	r7, [sp, #148]	; 0x94
 800fb8e:	f88d 7095 	strb.w	r7, [sp, #149]	; 0x95
 800fb92:	b157      	cbz	r7, 800fbaa <kalman_3gyro.constprop.0+0x1fae>
 800fb94:	4620      	mov	r0, r4
 800fb96:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800fb9a:	f7f1 fac7 	bl	800112c <__aeabi_fcmpgt>
 800fb9e:	b120      	cbz	r0, 800fbaa <kalman_3gyro.constprop.0+0x1fae>
 800fba0:	2300      	movs	r3, #0
 800fba2:	f88d 3093 	strb.w	r3, [sp, #147]	; 0x93
 800fba6:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
 800fbaa:	2100      	movs	r1, #0
 800fbac:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fbae:	f7f1 fabd 	bl	800112c <__aeabi_fcmpgt>
 800fbb2:	b150      	cbz	r0, 800fbca <kalman_3gyro.constprop.0+0x1fce>
 800fbb4:	9b00      	ldr	r3, [sp, #0]
 800fbb6:	9901      	ldr	r1, [sp, #4]
 800fbb8:	f8d3 0190 	ldr.w	r0, [r3, #400]	; 0x190
 800fbbc:	f7f1 faac 	bl	8001118 <__aeabi_fcmpge>
 800fbc0:	b118      	cbz	r0, 800fbca <kalman_3gyro.constprop.0+0x1fce>
 800fbc2:	9b04      	ldr	r3, [sp, #16]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	f002 8208 	beq.w	8011fda <kalman_3gyro.constprop.0+0x43de>
 800fbca:	b136      	cbz	r6, 800fbda <kalman_3gyro.constprop.0+0x1fde>
 800fbcc:	f240 1201 	movw	r2, #257	; 0x101
 800fbd0:	2301      	movs	r3, #1
 800fbd2:	f8ad 2090 	strh.w	r2, [sp, #144]	; 0x90
 800fbd6:	f88d 3092 	strb.w	r3, [sp, #146]	; 0x92
 800fbda:	2301      	movs	r3, #1
 800fbdc:	9304      	str	r3, [sp, #16]
 800fbde:	f88d 3099 	strb.w	r3, [sp, #153]	; 0x99
 800fbe2:	f88d 309b 	strb.w	r3, [sp, #155]	; 0x9b
 800fbe6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800fbe8:	4958      	ldr	r1, [pc, #352]	; (800fd4c <kalman_3gyro.constprop.0+0x2150>)
 800fbea:	4620      	mov	r0, r4
 800fbec:	f7f1 fa9e 	bl	800112c <__aeabi_fcmpgt>
 800fbf0:	b938      	cbnz	r0, 800fc02 <kalman_3gyro.constprop.0+0x2006>
 800fbf2:	4620      	mov	r0, r4
 800fbf4:	4956      	ldr	r1, [pc, #344]	; (800fd50 <kalman_3gyro.constprop.0+0x2154>)
 800fbf6:	f7f1 fa7b 	bl	80010f0 <__aeabi_fcmplt>
 800fbfa:	b910      	cbnz	r0, 800fc02 <kalman_3gyro.constprop.0+0x2006>
 800fbfc:	2e00      	cmp	r6, #0
 800fbfe:	f042 824e 	bne.w	801209e <kalman_3gyro.constprop.0+0x44a2>
 800fc02:	2300      	movs	r3, #0
 800fc04:	f8ad 3090 	strh.w	r3, [sp, #144]	; 0x90
 800fc08:	f88d 3092 	strb.w	r3, [sp, #146]	; 0x92
 800fc0c:	f88d 3099 	strb.w	r3, [sp, #153]	; 0x99
 800fc10:	f88d 309b 	strb.w	r3, [sp, #155]	; 0x9b
 800fc14:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800fc16:	494f      	ldr	r1, [pc, #316]	; (800fd54 <kalman_3gyro.constprop.0+0x2158>)
 800fc18:	4620      	mov	r0, r4
 800fc1a:	f7f1 fa87 	bl	800112c <__aeabi_fcmpgt>
 800fc1e:	b938      	cbnz	r0, 800fc30 <kalman_3gyro.constprop.0+0x2034>
 800fc20:	4620      	mov	r0, r4
 800fc22:	494d      	ldr	r1, [pc, #308]	; (800fd58 <kalman_3gyro.constprop.0+0x215c>)
 800fc24:	f7f1 fa64 	bl	80010f0 <__aeabi_fcmplt>
 800fc28:	b910      	cbnz	r0, 800fc30 <kalman_3gyro.constprop.0+0x2034>
 800fc2a:	2f00      	cmp	r7, #0
 800fc2c:	f042 82af 	bne.w	801218e <kalman_3gyro.constprop.0+0x4592>
 800fc30:	2300      	movs	r3, #0
 800fc32:	f88d 3093 	strb.w	r3, [sp, #147]	; 0x93
 800fc36:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
 800fc3a:	f88d 3099 	strb.w	r3, [sp, #153]	; 0x99
 800fc3e:	f88d 309a 	strb.w	r3, [sp, #154]	; 0x9a
 800fc42:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800fc44:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800fc48:	4630      	mov	r0, r6
 800fc4a:	f7f1 fa6f 	bl	800112c <__aeabi_fcmpgt>
 800fc4e:	2800      	cmp	r0, #0
 800fc50:	f001 856a 	beq.w	8011728 <kalman_3gyro.constprop.0+0x3b2c>
 800fc54:	2500      	movs	r5, #0
 800fc56:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800fc5a:	4630      	mov	r0, r6
 800fc5c:	f8ad 5090 	strh.w	r5, [sp, #144]	; 0x90
 800fc60:	f88d 5092 	strb.w	r5, [sp, #146]	; 0x92
 800fc64:	f7f0 ff9e 	bl	8000ba4 <__addsf3>
 800fc68:	4601      	mov	r1, r0
 800fc6a:	f7f0 ff9b 	bl	8000ba4 <__addsf3>
 800fc6e:	4604      	mov	r4, r0
 800fc70:	4640      	mov	r0, r8
 800fc72:	4621      	mov	r1, r4
 800fc74:	f7f1 f89e 	bl	8000db4 <__aeabi_fmul>
 800fc78:	4603      	mov	r3, r0
 800fc7a:	4621      	mov	r1, r4
 800fc7c:	9814      	ldr	r0, [sp, #80]	; 0x50
 800fc7e:	9372      	str	r3, [sp, #456]	; 0x1c8
 800fc80:	f7f1 f898 	bl	8000db4 <__aeabi_fmul>
 800fc84:	4603      	mov	r3, r0
 800fc86:	4935      	ldr	r1, [pc, #212]	; (800fd5c <kalman_3gyro.constprop.0+0x2160>)
 800fc88:	4630      	mov	r0, r6
 800fc8a:	9374      	str	r3, [sp, #464]	; 0x1d0
 800fc8c:	f7f1 fa4e 	bl	800112c <__aeabi_fcmpgt>
 800fc90:	b118      	cbz	r0, 800fc9a <kalman_3gyro.constprop.0+0x209e>
 800fc92:	f88d 5099 	strb.w	r5, [sp, #153]	; 0x99
 800fc96:	f88d 509b 	strb.w	r5, [sp, #155]	; 0x9b
 800fc9a:	9a00      	ldr	r2, [sp, #0]
 800fc9c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800fc9e:	2b0e      	cmp	r3, #14
 800fca0:	dc01      	bgt.n	800fca6 <kalman_3gyro.constprop.0+0x20aa>
 800fca2:	3305      	adds	r3, #5
 800fca4:	6593      	str	r3, [r2, #88]	; 0x58
 800fca6:	9916      	ldr	r1, [sp, #88]	; 0x58
 800fca8:	9815      	ldr	r0, [sp, #84]	; 0x54
 800fcaa:	f7f1 fa3f 	bl	800112c <__aeabi_fcmpgt>
 800fcae:	2800      	cmp	r0, #0
 800fcb0:	f000 8339 	beq.w	8010326 <kalman_3gyro.constprop.0+0x272a>
 800fcb4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800fcb6:	981a      	ldr	r0, [sp, #104]	; 0x68
 800fcb8:	f7f1 fa38 	bl	800112c <__aeabi_fcmpgt>
 800fcbc:	2800      	cmp	r0, #0
 800fcbe:	f000 8332 	beq.w	8010326 <kalman_3gyro.constprop.0+0x272a>
 800fcc2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800fcc4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800fcc6:	f7f1 fa31 	bl	800112c <__aeabi_fcmpgt>
 800fcca:	2800      	cmp	r0, #0
 800fccc:	f000 832b 	beq.w	8010326 <kalman_3gyro.constprop.0+0x272a>
 800fcd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcd2:	4923      	ldr	r1, [pc, #140]	; (800fd60 <kalman_3gyro.constprop.0+0x2164>)
 800fcd4:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800fcd8:	f02a 4000 	bic.w	r0, sl, #2147483648	; 0x80000000
 800fcdc:	f7f1 fa08 	bl	80010f0 <__aeabi_fcmplt>
 800fce0:	2800      	cmp	r0, #0
 800fce2:	f000 8320 	beq.w	8010326 <kalman_3gyro.constprop.0+0x272a>
 800fce6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800fce8:	491d      	ldr	r1, [pc, #116]	; (800fd60 <kalman_3gyro.constprop.0+0x2164>)
 800fcea:	69e3      	ldr	r3, [r4, #28]
 800fcec:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800fcf0:	9303      	str	r3, [sp, #12]
 800fcf2:	f7f1 f9fd 	bl	80010f0 <__aeabi_fcmplt>
 800fcf6:	2800      	cmp	r0, #0
 800fcf8:	f000 8315 	beq.w	8010326 <kalman_3gyro.constprop.0+0x272a>
 800fcfc:	6a23      	ldr	r3, [r4, #32]
 800fcfe:	4918      	ldr	r1, [pc, #96]	; (800fd60 <kalman_3gyro.constprop.0+0x2164>)
 800fd00:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800fd04:	9304      	str	r3, [sp, #16]
 800fd06:	f7f1 f9f3 	bl	80010f0 <__aeabi_fcmplt>
 800fd0a:	2800      	cmp	r0, #0
 800fd0c:	f000 830b 	beq.w	8010326 <kalman_3gyro.constprop.0+0x272a>
 800fd10:	9b02      	ldr	r3, [sp, #8]
 800fd12:	4914      	ldr	r1, [pc, #80]	; (800fd64 <kalman_3gyro.constprop.0+0x2168>)
 800fd14:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800fd18:	f7f1 f9ea 	bl	80010f0 <__aeabi_fcmplt>
 800fd1c:	2800      	cmp	r0, #0
 800fd1e:	f000 8302 	beq.w	8010326 <kalman_3gyro.constprop.0+0x272a>
 800fd22:	9b05      	ldr	r3, [sp, #20]
 800fd24:	490f      	ldr	r1, [pc, #60]	; (800fd64 <kalman_3gyro.constprop.0+0x2168>)
 800fd26:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800fd2a:	f7f1 f9e1 	bl	80010f0 <__aeabi_fcmplt>
 800fd2e:	2800      	cmp	r0, #0
 800fd30:	f000 82f9 	beq.w	8010326 <kalman_3gyro.constprop.0+0x272a>
 800fd34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fd36:	490b      	ldr	r1, [pc, #44]	; (800fd64 <kalman_3gyro.constprop.0+0x2168>)
 800fd38:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800fd3c:	f7f1 f9d8 	bl	80010f0 <__aeabi_fcmplt>
 800fd40:	2800      	cmp	r0, #0
 800fd42:	f000 82f0 	beq.w	8010326 <kalman_3gyro.constprop.0+0x272a>
 800fd46:	e011      	b.n	800fd6c <kalman_3gyro.constprop.0+0x2170>
 800fd48:	3b449ba6 	.word	0x3b449ba6
 800fd4c:	3fb33333 	.word	0x3fb33333
 800fd50:	3ecccccd 	.word	0x3ecccccd
 800fd54:	3f8f5c29 	.word	0x3f8f5c29
 800fd58:	3f59999a 	.word	0x3f59999a
 800fd5c:	40400000 	.word	0x40400000
 800fd60:	3e4ccccd 	.word	0x3e4ccccd
 800fd64:	3f99999a 	.word	0x3f99999a
 800fd68:	3c23d70a 	.word	0x3c23d70a
 800fd6c:	9b00      	ldr	r3, [sp, #0]
 800fd6e:	f893 21a0 	ldrb.w	r2, [r3, #416]	; 0x1a0
 800fd72:	f8d3 4798 	ldr.w	r4, [r3, #1944]	; 0x798
 800fd76:	2a09      	cmp	r2, #9
 800fd78:	f8d3 77a4 	ldr.w	r7, [r3, #1956]	; 0x7a4
 800fd7c:	461e      	mov	r6, r3
 800fd7e:	bf8c      	ite	hi
 800fd80:	230a      	movhi	r3, #10
 800fd82:	2305      	movls	r3, #5
 800fd84:	4620      	mov	r0, r4
 800fd86:	4639      	mov	r1, r7
 800fd88:	9302      	str	r3, [sp, #8]
 800fd8a:	9205      	str	r2, [sp, #20]
 800fd8c:	f7f1 f9c4 	bl	8001118 <__aeabi_fcmpge>
 800fd90:	f8d6 3794 	ldr.w	r3, [r6, #1940]	; 0x794
 800fd94:	4625      	mov	r5, r4
 800fd96:	9306      	str	r3, [sp, #24]
 800fd98:	2800      	cmp	r0, #0
 800fd9a:	f003 8338 	beq.w	801340e <kalman_3gyro.constprop.0+0x5812>
 800fd9e:	4639      	mov	r1, r7
 800fda0:	4620      	mov	r0, r4
 800fda2:	f7f1 f9af 	bl	8001104 <__aeabi_fcmple>
 800fda6:	46a0      	mov	r8, r4
 800fda8:	2800      	cmp	r0, #0
 800fdaa:	f003 8339 	beq.w	8013420 <kalman_3gyro.constprop.0+0x5824>
 800fdae:	4639      	mov	r1, r7
 800fdb0:	4620      	mov	r0, r4
 800fdb2:	f7f0 fef7 	bl	8000ba4 <__addsf3>
 800fdb6:	9b00      	ldr	r3, [sp, #0]
 800fdb8:	4604      	mov	r4, r0
 800fdba:	f8d3 77b0 	ldr.w	r7, [r3, #1968]	; 0x7b0
 800fdbe:	4628      	mov	r0, r5
 800fdc0:	4639      	mov	r1, r7
 800fdc2:	f7f1 f9a9 	bl	8001118 <__aeabi_fcmpge>
 800fdc6:	2800      	cmp	r0, #0
 800fdc8:	f003 8327 	beq.w	801341a <kalman_3gyro.constprop.0+0x581e>
 800fdcc:	4639      	mov	r1, r7
 800fdce:	4640      	mov	r0, r8
 800fdd0:	f7f1 f998 	bl	8001104 <__aeabi_fcmple>
 800fdd4:	2800      	cmp	r0, #0
 800fdd6:	f003 831d 	beq.w	8013414 <kalman_3gyro.constprop.0+0x5818>
 800fdda:	4639      	mov	r1, r7
 800fddc:	4620      	mov	r0, r4
 800fdde:	f7f0 fee1 	bl	8000ba4 <__addsf3>
 800fde2:	9b00      	ldr	r3, [sp, #0]
 800fde4:	4606      	mov	r6, r0
 800fde6:	f8d3 77bc 	ldr.w	r7, [r3, #1980]	; 0x7bc
 800fdea:	4628      	mov	r0, r5
 800fdec:	4639      	mov	r1, r7
 800fdee:	f7f1 f993 	bl	8001118 <__aeabi_fcmpge>
 800fdf2:	2800      	cmp	r0, #0
 800fdf4:	f003 8320 	beq.w	8013438 <kalman_3gyro.constprop.0+0x583c>
 800fdf8:	4639      	mov	r1, r7
 800fdfa:	4640      	mov	r0, r8
 800fdfc:	4644      	mov	r4, r8
 800fdfe:	f7f1 f981 	bl	8001104 <__aeabi_fcmple>
 800fe02:	2800      	cmp	r0, #0
 800fe04:	f003 8315 	beq.w	8013432 <kalman_3gyro.constprop.0+0x5836>
 800fe08:	4639      	mov	r1, r7
 800fe0a:	4630      	mov	r0, r6
 800fe0c:	f7f0 feca 	bl	8000ba4 <__addsf3>
 800fe10:	462e      	mov	r6, r5
 800fe12:	9b00      	ldr	r3, [sp, #0]
 800fe14:	4605      	mov	r5, r0
 800fe16:	f8d3 77c8 	ldr.w	r7, [r3, #1992]	; 0x7c8
 800fe1a:	4630      	mov	r0, r6
 800fe1c:	4639      	mov	r1, r7
 800fe1e:	f7f1 f97b 	bl	8001118 <__aeabi_fcmpge>
 800fe22:	2800      	cmp	r0, #0
 800fe24:	f003 8302 	beq.w	801342c <kalman_3gyro.constprop.0+0x5830>
 800fe28:	4639      	mov	r1, r7
 800fe2a:	4620      	mov	r0, r4
 800fe2c:	f7f1 f96a 	bl	8001104 <__aeabi_fcmple>
 800fe30:	2800      	cmp	r0, #0
 800fe32:	f003 82f8 	beq.w	8013426 <kalman_3gyro.constprop.0+0x582a>
 800fe36:	4628      	mov	r0, r5
 800fe38:	4639      	mov	r1, r7
 800fe3a:	f7f0 feb3 	bl	8000ba4 <__addsf3>
 800fe3e:	9b02      	ldr	r3, [sp, #8]
 800fe40:	4605      	mov	r5, r0
 800fe42:	2b05      	cmp	r3, #5
 800fe44:	d069      	beq.n	800ff1a <kalman_3gyro.constprop.0+0x231e>
 800fe46:	9b00      	ldr	r3, [sp, #0]
 800fe48:	4630      	mov	r0, r6
 800fe4a:	f8d3 77d4 	ldr.w	r7, [r3, #2004]	; 0x7d4
 800fe4e:	4639      	mov	r1, r7
 800fe50:	f7f1 f962 	bl	8001118 <__aeabi_fcmpge>
 800fe54:	2800      	cmp	r0, #0
 800fe56:	f003 8322 	beq.w	801349e <kalman_3gyro.constprop.0+0x58a2>
 800fe5a:	4639      	mov	r1, r7
 800fe5c:	4620      	mov	r0, r4
 800fe5e:	f7f1 f951 	bl	8001104 <__aeabi_fcmple>
 800fe62:	b900      	cbnz	r0, 800fe66 <kalman_3gyro.constprop.0+0x226a>
 800fe64:	463c      	mov	r4, r7
 800fe66:	4639      	mov	r1, r7
 800fe68:	4628      	mov	r0, r5
 800fe6a:	f7f0 fe9b 	bl	8000ba4 <__addsf3>
 800fe6e:	4635      	mov	r5, r6
 800fe70:	9b00      	ldr	r3, [sp, #0]
 800fe72:	4606      	mov	r6, r0
 800fe74:	f8d3 77e0 	ldr.w	r7, [r3, #2016]	; 0x7e0
 800fe78:	4628      	mov	r0, r5
 800fe7a:	4639      	mov	r1, r7
 800fe7c:	f7f1 f94c 	bl	8001118 <__aeabi_fcmpge>
 800fe80:	b900      	cbnz	r0, 800fe84 <kalman_3gyro.constprop.0+0x2288>
 800fe82:	463d      	mov	r5, r7
 800fe84:	4639      	mov	r1, r7
 800fe86:	4620      	mov	r0, r4
 800fe88:	f7f1 f93c 	bl	8001104 <__aeabi_fcmple>
 800fe8c:	b900      	cbnz	r0, 800fe90 <kalman_3gyro.constprop.0+0x2294>
 800fe8e:	463c      	mov	r4, r7
 800fe90:	4639      	mov	r1, r7
 800fe92:	4630      	mov	r0, r6
 800fe94:	f7f0 fe86 	bl	8000ba4 <__addsf3>
 800fe98:	9b00      	ldr	r3, [sp, #0]
 800fe9a:	4606      	mov	r6, r0
 800fe9c:	f8d3 77ec 	ldr.w	r7, [r3, #2028]	; 0x7ec
 800fea0:	4628      	mov	r0, r5
 800fea2:	4639      	mov	r1, r7
 800fea4:	f7f1 f938 	bl	8001118 <__aeabi_fcmpge>
 800fea8:	b900      	cbnz	r0, 800feac <kalman_3gyro.constprop.0+0x22b0>
 800feaa:	463d      	mov	r5, r7
 800feac:	4639      	mov	r1, r7
 800feae:	4620      	mov	r0, r4
 800feb0:	f7f1 f928 	bl	8001104 <__aeabi_fcmple>
 800feb4:	b900      	cbnz	r0, 800feb8 <kalman_3gyro.constprop.0+0x22bc>
 800feb6:	463c      	mov	r4, r7
 800feb8:	4639      	mov	r1, r7
 800feba:	4630      	mov	r0, r6
 800febc:	f7f0 fe72 	bl	8000ba4 <__addsf3>
 800fec0:	462e      	mov	r6, r5
 800fec2:	9b00      	ldr	r3, [sp, #0]
 800fec4:	4605      	mov	r5, r0
 800fec6:	f8d3 77f8 	ldr.w	r7, [r3, #2040]	; 0x7f8
 800feca:	4630      	mov	r0, r6
 800fecc:	4639      	mov	r1, r7
 800fece:	f7f1 f923 	bl	8001118 <__aeabi_fcmpge>
 800fed2:	b900      	cbnz	r0, 800fed6 <kalman_3gyro.constprop.0+0x22da>
 800fed4:	463e      	mov	r6, r7
 800fed6:	4639      	mov	r1, r7
 800fed8:	4620      	mov	r0, r4
 800feda:	f7f1 f913 	bl	8001104 <__aeabi_fcmple>
 800fede:	b900      	cbnz	r0, 800fee2 <kalman_3gyro.constprop.0+0x22e6>
 800fee0:	463c      	mov	r4, r7
 800fee2:	4628      	mov	r0, r5
 800fee4:	4639      	mov	r1, r7
 800fee6:	f7f0 fe5d 	bl	8000ba4 <__addsf3>
 800feea:	9b02      	ldr	r3, [sp, #8]
 800feec:	4605      	mov	r5, r0
 800feee:	2b0a      	cmp	r3, #10
 800fef0:	d113      	bne.n	800ff1a <kalman_3gyro.constprop.0+0x231e>
 800fef2:	9b00      	ldr	r3, [sp, #0]
 800fef4:	4630      	mov	r0, r6
 800fef6:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
 800fefa:	4639      	mov	r1, r7
 800fefc:	f7f1 f90c 	bl	8001118 <__aeabi_fcmpge>
 800ff00:	b900      	cbnz	r0, 800ff04 <kalman_3gyro.constprop.0+0x2308>
 800ff02:	463e      	mov	r6, r7
 800ff04:	4639      	mov	r1, r7
 800ff06:	4620      	mov	r0, r4
 800ff08:	f7f1 f8fc 	bl	8001104 <__aeabi_fcmple>
 800ff0c:	b900      	cbnz	r0, 800ff10 <kalman_3gyro.constprop.0+0x2314>
 800ff0e:	463c      	mov	r4, r7
 800ff10:	4628      	mov	r0, r5
 800ff12:	4639      	mov	r1, r7
 800ff14:	f7f0 fe46 	bl	8000ba4 <__addsf3>
 800ff18:	4605      	mov	r5, r0
 800ff1a:	4628      	mov	r0, r5
 800ff1c:	49a2      	ldr	r1, [pc, #648]	; (80101a8 <kalman_3gyro.constprop.0+0x25ac>)
 800ff1e:	f7f0 ff49 	bl	8000db4 <__aeabi_fmul>
 800ff22:	4603      	mov	r3, r0
 800ff24:	4621      	mov	r1, r4
 800ff26:	4630      	mov	r0, r6
 800ff28:	461c      	mov	r4, r3
 800ff2a:	f7f0 fe39 	bl	8000ba0 <__aeabi_fsub>
 800ff2e:	9d06      	ldr	r5, [sp, #24]
 800ff30:	4629      	mov	r1, r5
 800ff32:	f7f0 ff3f 	bl	8000db4 <__aeabi_fmul>
 800ff36:	499d      	ldr	r1, [pc, #628]	; (80101ac <kalman_3gyro.constprop.0+0x25b0>)
 800ff38:	f7f1 f8f8 	bl	800112c <__aeabi_fcmpgt>
 800ff3c:	2800      	cmp	r0, #0
 800ff3e:	f040 81f2 	bne.w	8010326 <kalman_3gyro.constprop.0+0x272a>
 800ff42:	4629      	mov	r1, r5
 800ff44:	f024 4000 	bic.w	r0, r4, #2147483648	; 0x80000000
 800ff48:	f7f0 ff34 	bl	8000db4 <__aeabi_fmul>
 800ff4c:	4998      	ldr	r1, [pc, #608]	; (80101b0 <kalman_3gyro.constprop.0+0x25b4>)
 800ff4e:	f7f1 f8ed 	bl	800112c <__aeabi_fcmpgt>
 800ff52:	2800      	cmp	r0, #0
 800ff54:	f040 81e7 	bne.w	8010326 <kalman_3gyro.constprop.0+0x272a>
 800ff58:	9b00      	ldr	r3, [sp, #0]
 800ff5a:	f8d3 479c 	ldr.w	r4, [r3, #1948]	; 0x79c
 800ff5e:	f8d3 77a8 	ldr.w	r7, [r3, #1960]	; 0x7a8
 800ff62:	4620      	mov	r0, r4
 800ff64:	4639      	mov	r1, r7
 800ff66:	f7f1 f8d7 	bl	8001118 <__aeabi_fcmpge>
 800ff6a:	4625      	mov	r5, r4
 800ff6c:	2800      	cmp	r0, #0
 800ff6e:	f003 8269 	beq.w	8013444 <kalman_3gyro.constprop.0+0x5848>
 800ff72:	4639      	mov	r1, r7
 800ff74:	4620      	mov	r0, r4
 800ff76:	f7f1 f8c5 	bl	8001104 <__aeabi_fcmple>
 800ff7a:	46a0      	mov	r8, r4
 800ff7c:	2800      	cmp	r0, #0
 800ff7e:	f003 825e 	beq.w	801343e <kalman_3gyro.constprop.0+0x5842>
 800ff82:	4639      	mov	r1, r7
 800ff84:	4620      	mov	r0, r4
 800ff86:	f7f0 fe0d 	bl	8000ba4 <__addsf3>
 800ff8a:	9b00      	ldr	r3, [sp, #0]
 800ff8c:	4604      	mov	r4, r0
 800ff8e:	f8d3 77b4 	ldr.w	r7, [r3, #1972]	; 0x7b4
 800ff92:	4628      	mov	r0, r5
 800ff94:	4639      	mov	r1, r7
 800ff96:	f7f1 f8bf 	bl	8001118 <__aeabi_fcmpge>
 800ff9a:	2800      	cmp	r0, #0
 800ff9c:	f003 8264 	beq.w	8013468 <kalman_3gyro.constprop.0+0x586c>
 800ffa0:	4639      	mov	r1, r7
 800ffa2:	4640      	mov	r0, r8
 800ffa4:	f7f1 f8ae 	bl	8001104 <__aeabi_fcmple>
 800ffa8:	2800      	cmp	r0, #0
 800ffaa:	f003 825a 	beq.w	8013462 <kalman_3gyro.constprop.0+0x5866>
 800ffae:	4639      	mov	r1, r7
 800ffb0:	4620      	mov	r0, r4
 800ffb2:	f7f0 fdf7 	bl	8000ba4 <__addsf3>
 800ffb6:	9b00      	ldr	r3, [sp, #0]
 800ffb8:	4606      	mov	r6, r0
 800ffba:	f8d3 77c0 	ldr.w	r7, [r3, #1984]	; 0x7c0
 800ffbe:	4628      	mov	r0, r5
 800ffc0:	4639      	mov	r1, r7
 800ffc2:	f7f1 f8a9 	bl	8001118 <__aeabi_fcmpge>
 800ffc6:	2800      	cmp	r0, #0
 800ffc8:	f003 8248 	beq.w	801345c <kalman_3gyro.constprop.0+0x5860>
 800ffcc:	4639      	mov	r1, r7
 800ffce:	4640      	mov	r0, r8
 800ffd0:	4644      	mov	r4, r8
 800ffd2:	f7f1 f897 	bl	8001104 <__aeabi_fcmple>
 800ffd6:	2800      	cmp	r0, #0
 800ffd8:	f003 823d 	beq.w	8013456 <kalman_3gyro.constprop.0+0x585a>
 800ffdc:	4639      	mov	r1, r7
 800ffde:	4630      	mov	r0, r6
 800ffe0:	f7f0 fde0 	bl	8000ba4 <__addsf3>
 800ffe4:	462e      	mov	r6, r5
 800ffe6:	9b00      	ldr	r3, [sp, #0]
 800ffe8:	4605      	mov	r5, r0
 800ffea:	f8d3 77cc 	ldr.w	r7, [r3, #1996]	; 0x7cc
 800ffee:	4630      	mov	r0, r6
 800fff0:	4639      	mov	r1, r7
 800fff2:	f7f1 f891 	bl	8001118 <__aeabi_fcmpge>
 800fff6:	2800      	cmp	r0, #0
 800fff8:	f003 822a 	beq.w	8013450 <kalman_3gyro.constprop.0+0x5854>
 800fffc:	4639      	mov	r1, r7
 800fffe:	4620      	mov	r0, r4
 8010000:	f7f1 f880 	bl	8001104 <__aeabi_fcmple>
 8010004:	2800      	cmp	r0, #0
 8010006:	f003 8220 	beq.w	801344a <kalman_3gyro.constprop.0+0x584e>
 801000a:	4628      	mov	r0, r5
 801000c:	4639      	mov	r1, r7
 801000e:	f7f0 fdc9 	bl	8000ba4 <__addsf3>
 8010012:	9b02      	ldr	r3, [sp, #8]
 8010014:	4605      	mov	r5, r0
 8010016:	2b05      	cmp	r3, #5
 8010018:	d069      	beq.n	80100ee <kalman_3gyro.constprop.0+0x24f2>
 801001a:	9b00      	ldr	r3, [sp, #0]
 801001c:	4630      	mov	r0, r6
 801001e:	f8d3 77d8 	ldr.w	r7, [r3, #2008]	; 0x7d8
 8010022:	4639      	mov	r1, r7
 8010024:	f7f1 f878 	bl	8001118 <__aeabi_fcmpge>
 8010028:	2800      	cmp	r0, #0
 801002a:	f003 823b 	beq.w	80134a4 <kalman_3gyro.constprop.0+0x58a8>
 801002e:	4639      	mov	r1, r7
 8010030:	4620      	mov	r0, r4
 8010032:	f7f1 f867 	bl	8001104 <__aeabi_fcmple>
 8010036:	b900      	cbnz	r0, 801003a <kalman_3gyro.constprop.0+0x243e>
 8010038:	463c      	mov	r4, r7
 801003a:	4639      	mov	r1, r7
 801003c:	4628      	mov	r0, r5
 801003e:	f7f0 fdb1 	bl	8000ba4 <__addsf3>
 8010042:	4635      	mov	r5, r6
 8010044:	9b00      	ldr	r3, [sp, #0]
 8010046:	4606      	mov	r6, r0
 8010048:	f8d3 77e4 	ldr.w	r7, [r3, #2020]	; 0x7e4
 801004c:	4628      	mov	r0, r5
 801004e:	4639      	mov	r1, r7
 8010050:	f7f1 f862 	bl	8001118 <__aeabi_fcmpge>
 8010054:	b900      	cbnz	r0, 8010058 <kalman_3gyro.constprop.0+0x245c>
 8010056:	463d      	mov	r5, r7
 8010058:	4639      	mov	r1, r7
 801005a:	4620      	mov	r0, r4
 801005c:	f7f1 f852 	bl	8001104 <__aeabi_fcmple>
 8010060:	b900      	cbnz	r0, 8010064 <kalman_3gyro.constprop.0+0x2468>
 8010062:	463c      	mov	r4, r7
 8010064:	4639      	mov	r1, r7
 8010066:	4630      	mov	r0, r6
 8010068:	f7f0 fd9c 	bl	8000ba4 <__addsf3>
 801006c:	9b00      	ldr	r3, [sp, #0]
 801006e:	4606      	mov	r6, r0
 8010070:	f8d3 77f0 	ldr.w	r7, [r3, #2032]	; 0x7f0
 8010074:	4628      	mov	r0, r5
 8010076:	4639      	mov	r1, r7
 8010078:	f7f1 f84e 	bl	8001118 <__aeabi_fcmpge>
 801007c:	b900      	cbnz	r0, 8010080 <kalman_3gyro.constprop.0+0x2484>
 801007e:	463d      	mov	r5, r7
 8010080:	4639      	mov	r1, r7
 8010082:	4620      	mov	r0, r4
 8010084:	f7f1 f83e 	bl	8001104 <__aeabi_fcmple>
 8010088:	b900      	cbnz	r0, 801008c <kalman_3gyro.constprop.0+0x2490>
 801008a:	463c      	mov	r4, r7
 801008c:	4639      	mov	r1, r7
 801008e:	4630      	mov	r0, r6
 8010090:	f7f0 fd88 	bl	8000ba4 <__addsf3>
 8010094:	462e      	mov	r6, r5
 8010096:	9b00      	ldr	r3, [sp, #0]
 8010098:	4605      	mov	r5, r0
 801009a:	f8d3 77fc 	ldr.w	r7, [r3, #2044]	; 0x7fc
 801009e:	4630      	mov	r0, r6
 80100a0:	4639      	mov	r1, r7
 80100a2:	f7f1 f839 	bl	8001118 <__aeabi_fcmpge>
 80100a6:	b900      	cbnz	r0, 80100aa <kalman_3gyro.constprop.0+0x24ae>
 80100a8:	463e      	mov	r6, r7
 80100aa:	4639      	mov	r1, r7
 80100ac:	4620      	mov	r0, r4
 80100ae:	f7f1 f829 	bl	8001104 <__aeabi_fcmple>
 80100b2:	b900      	cbnz	r0, 80100b6 <kalman_3gyro.constprop.0+0x24ba>
 80100b4:	463c      	mov	r4, r7
 80100b6:	4628      	mov	r0, r5
 80100b8:	4639      	mov	r1, r7
 80100ba:	f7f0 fd73 	bl	8000ba4 <__addsf3>
 80100be:	9b02      	ldr	r3, [sp, #8]
 80100c0:	4605      	mov	r5, r0
 80100c2:	2b0a      	cmp	r3, #10
 80100c4:	d113      	bne.n	80100ee <kalman_3gyro.constprop.0+0x24f2>
 80100c6:	9b00      	ldr	r3, [sp, #0]
 80100c8:	4630      	mov	r0, r6
 80100ca:	f8d3 7808 	ldr.w	r7, [r3, #2056]	; 0x808
 80100ce:	4639      	mov	r1, r7
 80100d0:	f7f1 f822 	bl	8001118 <__aeabi_fcmpge>
 80100d4:	b900      	cbnz	r0, 80100d8 <kalman_3gyro.constprop.0+0x24dc>
 80100d6:	463e      	mov	r6, r7
 80100d8:	4639      	mov	r1, r7
 80100da:	4620      	mov	r0, r4
 80100dc:	f7f1 f812 	bl	8001104 <__aeabi_fcmple>
 80100e0:	b900      	cbnz	r0, 80100e4 <kalman_3gyro.constprop.0+0x24e8>
 80100e2:	463c      	mov	r4, r7
 80100e4:	4628      	mov	r0, r5
 80100e6:	4639      	mov	r1, r7
 80100e8:	f7f0 fd5c 	bl	8000ba4 <__addsf3>
 80100ec:	4605      	mov	r5, r0
 80100ee:	4628      	mov	r0, r5
 80100f0:	492d      	ldr	r1, [pc, #180]	; (80101a8 <kalman_3gyro.constprop.0+0x25ac>)
 80100f2:	f7f0 fe5f 	bl	8000db4 <__aeabi_fmul>
 80100f6:	4603      	mov	r3, r0
 80100f8:	4621      	mov	r1, r4
 80100fa:	4630      	mov	r0, r6
 80100fc:	461c      	mov	r4, r3
 80100fe:	f7f0 fd4f 	bl	8000ba0 <__aeabi_fsub>
 8010102:	9d06      	ldr	r5, [sp, #24]
 8010104:	4629      	mov	r1, r5
 8010106:	f7f0 fe55 	bl	8000db4 <__aeabi_fmul>
 801010a:	4928      	ldr	r1, [pc, #160]	; (80101ac <kalman_3gyro.constprop.0+0x25b0>)
 801010c:	f7f1 f80e 	bl	800112c <__aeabi_fcmpgt>
 8010110:	2800      	cmp	r0, #0
 8010112:	f040 8108 	bne.w	8010326 <kalman_3gyro.constprop.0+0x272a>
 8010116:	4629      	mov	r1, r5
 8010118:	f024 4000 	bic.w	r0, r4, #2147483648	; 0x80000000
 801011c:	f7f0 fe4a 	bl	8000db4 <__aeabi_fmul>
 8010120:	4923      	ldr	r1, [pc, #140]	; (80101b0 <kalman_3gyro.constprop.0+0x25b4>)
 8010122:	f7f1 f803 	bl	800112c <__aeabi_fcmpgt>
 8010126:	2800      	cmp	r0, #0
 8010128:	f040 80fd 	bne.w	8010326 <kalman_3gyro.constprop.0+0x272a>
 801012c:	9b00      	ldr	r3, [sp, #0]
 801012e:	f8d3 47a0 	ldr.w	r4, [r3, #1952]	; 0x7a0
 8010132:	f8d3 57ac 	ldr.w	r5, [r3, #1964]	; 0x7ac
 8010136:	4620      	mov	r0, r4
 8010138:	4629      	mov	r1, r5
 801013a:	f7f0 ffed 	bl	8001118 <__aeabi_fcmpge>
 801013e:	4626      	mov	r6, r4
 8010140:	2800      	cmp	r0, #0
 8010142:	f003 81a9 	beq.w	8013498 <kalman_3gyro.constprop.0+0x589c>
 8010146:	4629      	mov	r1, r5
 8010148:	4620      	mov	r0, r4
 801014a:	f7f0 ffdb 	bl	8001104 <__aeabi_fcmple>
 801014e:	46a0      	mov	r8, r4
 8010150:	2800      	cmp	r0, #0
 8010152:	f003 819e 	beq.w	8013492 <kalman_3gyro.constprop.0+0x5896>
 8010156:	4629      	mov	r1, r5
 8010158:	4620      	mov	r0, r4
 801015a:	f7f0 fd23 	bl	8000ba4 <__addsf3>
 801015e:	9b00      	ldr	r3, [sp, #0]
 8010160:	4605      	mov	r5, r0
 8010162:	f8d3 77b8 	ldr.w	r7, [r3, #1976]	; 0x7b8
 8010166:	4631      	mov	r1, r6
 8010168:	4638      	mov	r0, r7
 801016a:	f7f0 ffd5 	bl	8001118 <__aeabi_fcmpge>
 801016e:	463c      	mov	r4, r7
 8010170:	2800      	cmp	r0, #0
 8010172:	f003 818b 	beq.w	801348c <kalman_3gyro.constprop.0+0x5890>
 8010176:	4641      	mov	r1, r8
 8010178:	4638      	mov	r0, r7
 801017a:	f7f0 ffc3 	bl	8001104 <__aeabi_fcmple>
 801017e:	463e      	mov	r6, r7
 8010180:	2800      	cmp	r0, #0
 8010182:	f003 8180 	beq.w	8013486 <kalman_3gyro.constprop.0+0x588a>
 8010186:	4629      	mov	r1, r5
 8010188:	4638      	mov	r0, r7
 801018a:	f7f0 fd0b 	bl	8000ba4 <__addsf3>
 801018e:	9b00      	ldr	r3, [sp, #0]
 8010190:	4605      	mov	r5, r0
 8010192:	f8d3 77c4 	ldr.w	r7, [r3, #1988]	; 0x7c4
 8010196:	4621      	mov	r1, r4
 8010198:	4638      	mov	r0, r7
 801019a:	f7f0 ffbd 	bl	8001118 <__aeabi_fcmpge>
 801019e:	46b8      	mov	r8, r7
 80101a0:	2800      	cmp	r0, #0
 80101a2:	f003 816d 	beq.w	8013480 <kalman_3gyro.constprop.0+0x5884>
 80101a6:	e005      	b.n	80101b4 <kalman_3gyro.constprop.0+0x25b8>
 80101a8:	3dcccccd 	.word	0x3dcccccd
 80101ac:	3be56041 	.word	0x3be56041
 80101b0:	3e333333 	.word	0x3e333333
 80101b4:	4631      	mov	r1, r6
 80101b6:	4638      	mov	r0, r7
 80101b8:	f7f0 ffa4 	bl	8001104 <__aeabi_fcmple>
 80101bc:	463c      	mov	r4, r7
 80101be:	2800      	cmp	r0, #0
 80101c0:	f003 815b 	beq.w	801347a <kalman_3gyro.constprop.0+0x587e>
 80101c4:	4629      	mov	r1, r5
 80101c6:	4638      	mov	r0, r7
 80101c8:	f7f0 fcec 	bl	8000ba4 <__addsf3>
 80101cc:	9b00      	ldr	r3, [sp, #0]
 80101ce:	4606      	mov	r6, r0
 80101d0:	f8d3 77d0 	ldr.w	r7, [r3, #2000]	; 0x7d0
 80101d4:	4640      	mov	r0, r8
 80101d6:	4639      	mov	r1, r7
 80101d8:	f7f0 ff9e 	bl	8001118 <__aeabi_fcmpge>
 80101dc:	2800      	cmp	r0, #0
 80101de:	f003 8149 	beq.w	8013474 <kalman_3gyro.constprop.0+0x5878>
 80101e2:	4621      	mov	r1, r4
 80101e4:	4638      	mov	r0, r7
 80101e6:	f7f0 ff8d 	bl	8001104 <__aeabi_fcmple>
 80101ea:	463d      	mov	r5, r7
 80101ec:	2800      	cmp	r0, #0
 80101ee:	f003 813e 	beq.w	801346e <kalman_3gyro.constprop.0+0x5872>
 80101f2:	4631      	mov	r1, r6
 80101f4:	4638      	mov	r0, r7
 80101f6:	f7f0 fcd5 	bl	8000ba4 <__addsf3>
 80101fa:	9b02      	ldr	r3, [sp, #8]
 80101fc:	4604      	mov	r4, r0
 80101fe:	2b05      	cmp	r3, #5
 8010200:	d068      	beq.n	80102d4 <kalman_3gyro.constprop.0+0x26d8>
 8010202:	9b00      	ldr	r3, [sp, #0]
 8010204:	4640      	mov	r0, r8
 8010206:	f8d3 77dc 	ldr.w	r7, [r3, #2012]	; 0x7dc
 801020a:	4639      	mov	r1, r7
 801020c:	f7f0 ff84 	bl	8001118 <__aeabi_fcmpge>
 8010210:	b900      	cbnz	r0, 8010214 <kalman_3gyro.constprop.0+0x2618>
 8010212:	46b8      	mov	r8, r7
 8010214:	4639      	mov	r1, r7
 8010216:	4628      	mov	r0, r5
 8010218:	f7f0 ff74 	bl	8001104 <__aeabi_fcmple>
 801021c:	b900      	cbnz	r0, 8010220 <kalman_3gyro.constprop.0+0x2624>
 801021e:	463d      	mov	r5, r7
 8010220:	4621      	mov	r1, r4
 8010222:	4638      	mov	r0, r7
 8010224:	f7f0 fcbe 	bl	8000ba4 <__addsf3>
 8010228:	9b00      	ldr	r3, [sp, #0]
 801022a:	4606      	mov	r6, r0
 801022c:	f8d3 77e8 	ldr.w	r7, [r3, #2024]	; 0x7e8
 8010230:	4640      	mov	r0, r8
 8010232:	4639      	mov	r1, r7
 8010234:	4644      	mov	r4, r8
 8010236:	f7f0 ff6f 	bl	8001118 <__aeabi_fcmpge>
 801023a:	b900      	cbnz	r0, 801023e <kalman_3gyro.constprop.0+0x2642>
 801023c:	463c      	mov	r4, r7
 801023e:	4639      	mov	r1, r7
 8010240:	4628      	mov	r0, r5
 8010242:	f7f0 ff5f 	bl	8001104 <__aeabi_fcmple>
 8010246:	b900      	cbnz	r0, 801024a <kalman_3gyro.constprop.0+0x264e>
 8010248:	463d      	mov	r5, r7
 801024a:	4639      	mov	r1, r7
 801024c:	4630      	mov	r0, r6
 801024e:	f7f0 fca9 	bl	8000ba4 <__addsf3>
 8010252:	9b00      	ldr	r3, [sp, #0]
 8010254:	4606      	mov	r6, r0
 8010256:	f8d3 77f4 	ldr.w	r7, [r3, #2036]	; 0x7f4
 801025a:	4620      	mov	r0, r4
 801025c:	4639      	mov	r1, r7
 801025e:	f7f0 ff5b 	bl	8001118 <__aeabi_fcmpge>
 8010262:	b900      	cbnz	r0, 8010266 <kalman_3gyro.constprop.0+0x266a>
 8010264:	463c      	mov	r4, r7
 8010266:	4639      	mov	r1, r7
 8010268:	4628      	mov	r0, r5
 801026a:	f7f0 ff4b 	bl	8001104 <__aeabi_fcmple>
 801026e:	b900      	cbnz	r0, 8010272 <kalman_3gyro.constprop.0+0x2676>
 8010270:	463d      	mov	r5, r7
 8010272:	4639      	mov	r1, r7
 8010274:	4630      	mov	r0, r6
 8010276:	f7f0 fc95 	bl	8000ba4 <__addsf3>
 801027a:	46a0      	mov	r8, r4
 801027c:	9b00      	ldr	r3, [sp, #0]
 801027e:	4604      	mov	r4, r0
 8010280:	f8d3 6800 	ldr.w	r6, [r3, #2048]	; 0x800
 8010284:	4640      	mov	r0, r8
 8010286:	4631      	mov	r1, r6
 8010288:	f7f0 ff46 	bl	8001118 <__aeabi_fcmpge>
 801028c:	b900      	cbnz	r0, 8010290 <kalman_3gyro.constprop.0+0x2694>
 801028e:	46b0      	mov	r8, r6
 8010290:	4631      	mov	r1, r6
 8010292:	4628      	mov	r0, r5
 8010294:	f7f0 ff36 	bl	8001104 <__aeabi_fcmple>
 8010298:	b900      	cbnz	r0, 801029c <kalman_3gyro.constprop.0+0x26a0>
 801029a:	4635      	mov	r5, r6
 801029c:	4620      	mov	r0, r4
 801029e:	4631      	mov	r1, r6
 80102a0:	f7f0 fc80 	bl	8000ba4 <__addsf3>
 80102a4:	9b02      	ldr	r3, [sp, #8]
 80102a6:	4604      	mov	r4, r0
 80102a8:	2b0a      	cmp	r3, #10
 80102aa:	d113      	bne.n	80102d4 <kalman_3gyro.constprop.0+0x26d8>
 80102ac:	9b00      	ldr	r3, [sp, #0]
 80102ae:	4640      	mov	r0, r8
 80102b0:	f8d3 680c 	ldr.w	r6, [r3, #2060]	; 0x80c
 80102b4:	4631      	mov	r1, r6
 80102b6:	f7f0 ff2f 	bl	8001118 <__aeabi_fcmpge>
 80102ba:	b900      	cbnz	r0, 80102be <kalman_3gyro.constprop.0+0x26c2>
 80102bc:	46b0      	mov	r8, r6
 80102be:	4631      	mov	r1, r6
 80102c0:	4628      	mov	r0, r5
 80102c2:	f7f0 ff1f 	bl	8001104 <__aeabi_fcmple>
 80102c6:	b900      	cbnz	r0, 80102ca <kalman_3gyro.constprop.0+0x26ce>
 80102c8:	4635      	mov	r5, r6
 80102ca:	4620      	mov	r0, r4
 80102cc:	4631      	mov	r1, r6
 80102ce:	f7f0 fc69 	bl	8000ba4 <__addsf3>
 80102d2:	4604      	mov	r4, r0
 80102d4:	4620      	mov	r0, r4
 80102d6:	4985      	ldr	r1, [pc, #532]	; (80104ec <kalman_3gyro.constprop.0+0x28f0>)
 80102d8:	f7f0 fd6c 	bl	8000db4 <__aeabi_fmul>
 80102dc:	4629      	mov	r1, r5
 80102de:	4604      	mov	r4, r0
 80102e0:	4640      	mov	r0, r8
 80102e2:	f7f0 fc5d 	bl	8000ba0 <__aeabi_fsub>
 80102e6:	9d06      	ldr	r5, [sp, #24]
 80102e8:	4629      	mov	r1, r5
 80102ea:	f7f0 fd63 	bl	8000db4 <__aeabi_fmul>
 80102ee:	4980      	ldr	r1, [pc, #512]	; (80104f0 <kalman_3gyro.constprop.0+0x28f4>)
 80102f0:	f7f0 ff1c 	bl	800112c <__aeabi_fcmpgt>
 80102f4:	b9b8      	cbnz	r0, 8010326 <kalman_3gyro.constprop.0+0x272a>
 80102f6:	4629      	mov	r1, r5
 80102f8:	f024 4000 	bic.w	r0, r4, #2147483648	; 0x80000000
 80102fc:	f7f0 fd5a 	bl	8000db4 <__aeabi_fmul>
 8010300:	497c      	ldr	r1, [pc, #496]	; (80104f4 <kalman_3gyro.constprop.0+0x28f8>)
 8010302:	f7f0 ff13 	bl	800112c <__aeabi_fcmpgt>
 8010306:	4606      	mov	r6, r0
 8010308:	b968      	cbnz	r0, 8010326 <kalman_3gyro.constprop.0+0x272a>
 801030a:	9b00      	ldr	r3, [sp, #0]
 801030c:	795b      	ldrb	r3, [r3, #5]
 801030e:	2b00      	cmp	r3, #0
 8010310:	f000 80f4 	beq.w	80104fc <kalman_3gyro.constprop.0+0x2900>
 8010314:	f003 04fd 	and.w	r4, r3, #253	; 0xfd
 8010318:	2c01      	cmp	r4, #1
 801031a:	f003 80c6 	beq.w	80134aa <kalman_3gyro.constprop.0+0x58ae>
 801031e:	461c      	mov	r4, r3
 8010320:	2301      	movs	r3, #1
 8010322:	9303      	str	r3, [sp, #12]
 8010324:	e00f      	b.n	8010346 <kalman_3gyro.constprop.0+0x274a>
 8010326:	2300      	movs	r3, #0
 8010328:	9a00      	ldr	r2, [sp, #0]
 801032a:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
 801032e:	7954      	ldrb	r4, [r2, #5]
 8010330:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
 8010334:	2c00      	cmp	r4, #0
 8010336:	f000 80e2 	beq.w	80104fe <kalman_3gyro.constprop.0+0x2902>
 801033a:	f004 02fd 	and.w	r2, r4, #253	; 0xfd
 801033e:	2a01      	cmp	r2, #1
 8010340:	f001 87c7 	beq.w	80122d2 <kalman_3gyro.constprop.0+0x46d6>
 8010344:	9303      	str	r3, [sp, #12]
 8010346:	2c02      	cmp	r4, #2
 8010348:	f042 8328 	bne.w	801299c <kalman_3gyro.constprop.0+0x4da0>
 801034c:	f240 1201 	movw	r2, #257	; 0x101
 8010350:	2301      	movs	r3, #1
 8010352:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010354:	9816      	ldr	r0, [sp, #88]	; 0x58
 8010356:	f8ad 2096 	strh.w	r2, [sp, #150]	; 0x96
 801035a:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
 801035e:	f7f0 fddd 	bl	8000f1c <__aeabi_fdiv>
 8010362:	4605      	mov	r5, r0
 8010364:	991a      	ldr	r1, [sp, #104]	; 0x68
 8010366:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8010368:	9527      	str	r5, [sp, #156]	; 0x9c
 801036a:	f7f0 fdd7 	bl	8000f1c <__aeabi_fdiv>
 801036e:	4606      	mov	r6, r0
 8010370:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8010372:	981c      	ldr	r0, [sp, #112]	; 0x70
 8010374:	9628      	str	r6, [sp, #160]	; 0xa0
 8010376:	f7f0 fdd1 	bl	8000f1c <__aeabi_fdiv>
 801037a:	4604      	mov	r4, r0
 801037c:	9b00      	ldr	r3, [sp, #0]
 801037e:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8010382:	f8d3 0190 	ldr.w	r0, [r3, #400]	; 0x190
 8010386:	9429      	str	r4, [sp, #164]	; 0xa4
 8010388:	f7f0 fd14 	bl	8000db4 <__aeabi_fmul>
 801038c:	9901      	ldr	r1, [sp, #4]
 801038e:	f7f0 fec3 	bl	8001118 <__aeabi_fcmpge>
 8010392:	4607      	mov	r7, r0
 8010394:	2800      	cmp	r0, #0
 8010396:	f002 8303 	beq.w	80129a0 <kalman_3gyro.constprop.0+0x4da4>
 801039a:	9b00      	ldr	r3, [sp, #0]
 801039c:	f893 41a4 	ldrb.w	r4, [r3, #420]	; 0x1a4
 80103a0:	2c00      	cmp	r4, #0
 80103a2:	f003 800f 	beq.w	80133c4 <kalman_3gyro.constprop.0+0x57c8>
 80103a6:	461a      	mov	r2, r3
 80103a8:	f8b3 31a6 	ldrh.w	r3, [r3, #422]	; 0x1a6
 80103ac:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80103b0:	3301      	adds	r3, #1
 80103b2:	f8a2 31a6 	strh.w	r3, [r2, #422]	; 0x1a6
 80103b6:	4613      	mov	r3, r2
 80103b8:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80103bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80103c0:	f5b3 0f8c 	cmp.w	r3, #4587520	; 0x460000
 80103c4:	f003 8164 	beq.w	8013690 <kalman_3gyro.constprop.0+0x5a94>
 80103c8:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 80103cc:	f002 8356 	beq.w	8012a7c <kalman_3gyro.constprop.0+0x4e80>
 80103d0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80103d2:	f7f0 fcef 	bl	8000db4 <__aeabi_fmul>
 80103d6:	9011      	str	r0, [sp, #68]	; 0x44
 80103d8:	2c00      	cmp	r4, #0
 80103da:	f042 8357 	bne.w	8012a8c <kalman_3gyro.constprop.0+0x4e90>
 80103de:	9b00      	ldr	r3, [sp, #0]
 80103e0:	f04f 35ff 	mov.w	r5, #4294967295
 80103e4:	f503 77ac 	add.w	r7, r3, #344	; 0x158
 80103e8:	463c      	mov	r4, r7
 80103ea:	ae2a      	add	r6, sp, #168	; 0xa8
 80103ec:	f8d4 0640 	ldr.w	r0, [r4, #1600]	; 0x640
 80103f0:	3501      	adds	r5, #1
 80103f2:	f5a4 78ae 	sub.w	r8, r4, #348	; 0x15c
 80103f6:	f8d8 17a8 	ldr.w	r1, [r8, #1960]	; 0x7a8
 80103fa:	f108 080c 	add.w	r8, r8, #12
 80103fe:	f7f0 fbd1 	bl	8000ba4 <__addsf3>
 8010402:	4544      	cmp	r4, r8
 8010404:	d1f7      	bne.n	80103f6 <kalman_3gyro.constprop.0+0x27fa>
 8010406:	2d02      	cmp	r5, #2
 8010408:	f846 0b04 	str.w	r0, [r6], #4
 801040c:	f104 0404 	add.w	r4, r4, #4
 8010410:	d1ec      	bne.n	80103ec <kalman_3gyro.constprop.0+0x27f0>
 8010412:	4939      	ldr	r1, [pc, #228]	; (80104f8 <kalman_3gyro.constprop.0+0x28fc>)
 8010414:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8010416:	f7f0 fccd 	bl	8000db4 <__aeabi_fmul>
 801041a:	4606      	mov	r6, r0
 801041c:	4936      	ldr	r1, [pc, #216]	; (80104f8 <kalman_3gyro.constprop.0+0x28fc>)
 801041e:	982b      	ldr	r0, [sp, #172]	; 0xac
 8010420:	9601      	str	r6, [sp, #4]
 8010422:	f7f0 fcc7 	bl	8000db4 <__aeabi_fmul>
 8010426:	4603      	mov	r3, r0
 8010428:	4933      	ldr	r1, [pc, #204]	; (80104f8 <kalman_3gyro.constprop.0+0x28fc>)
 801042a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801042c:	9302      	str	r3, [sp, #8]
 801042e:	f7f0 fcc1 	bl	8000db4 <__aeabi_fmul>
 8010432:	463c      	mov	r4, r7
 8010434:	9b00      	ldr	r3, [sp, #0]
 8010436:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
 801043a:	9004      	str	r0, [sp, #16]
 801043c:	f503 75b2 	add.w	r5, r3, #356	; 0x164
 8010440:	9705      	str	r7, [sp, #20]
 8010442:	f8d4 71f0 	ldr.w	r7, [r4, #496]	; 0x1f0
 8010446:	f5a4 76ae 	sub.w	r6, r4, #348	; 0x15c
 801044a:	f8d6 8358 	ldr.w	r8, [r6, #856]	; 0x358
 801044e:	4638      	mov	r0, r7
 8010450:	4641      	mov	r1, r8
 8010452:	f7f0 fe57 	bl	8001104 <__aeabi_fcmple>
 8010456:	360c      	adds	r6, #12
 8010458:	b900      	cbnz	r0, 801045c <kalman_3gyro.constprop.0+0x2860>
 801045a:	4647      	mov	r7, r8
 801045c:	42b4      	cmp	r4, r6
 801045e:	d1f4      	bne.n	801044a <kalman_3gyro.constprop.0+0x284e>
 8010460:	3404      	adds	r4, #4
 8010462:	42ac      	cmp	r4, r5
 8010464:	f84a 7b04 	str.w	r7, [sl], #4
 8010468:	d1eb      	bne.n	8010442 <kalman_3gyro.constprop.0+0x2846>
 801046a:	9d00      	ldr	r5, [sp, #0]
 801046c:	9901      	ldr	r1, [sp, #4]
 801046e:	f8d5 4794 	ldr.w	r4, [r5, #1940]	; 0x794
 8010472:	9f05      	ldr	r7, [sp, #20]
 8010474:	4620      	mov	r0, r4
 8010476:	f7f0 fc9d 	bl	8000db4 <__aeabi_fmul>
 801047a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801047c:	f7f0 fb90 	bl	8000ba0 <__aeabi_fsub>
 8010480:	4680      	mov	r8, r0
 8010482:	9902      	ldr	r1, [sp, #8]
 8010484:	4620      	mov	r0, r4
 8010486:	f8cd 80a8 	str.w	r8, [sp, #168]	; 0xa8
 801048a:	f7f0 fc93 	bl	8000db4 <__aeabi_fmul>
 801048e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8010490:	f7f0 fb86 	bl	8000ba0 <__aeabi_fsub>
 8010494:	4603      	mov	r3, r0
 8010496:	9904      	ldr	r1, [sp, #16]
 8010498:	9002      	str	r0, [sp, #8]
 801049a:	4620      	mov	r0, r4
 801049c:	932b      	str	r3, [sp, #172]	; 0xac
 801049e:	f7f0 fc89 	bl	8000db4 <__aeabi_fmul>
 80104a2:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80104a4:	f7f0 fb7c 	bl	8000ba0 <__aeabi_fsub>
 80104a8:	786b      	ldrb	r3, [r5, #1]
 80104aa:	4682      	mov	sl, r0
 80104ac:	902c      	str	r0, [sp, #176]	; 0xb0
 80104ae:	b13b      	cbz	r3, 80104c0 <kalman_3gyro.constprop.0+0x28c4>
 80104b0:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80104b4:	9822      	ldr	r0, [sp, #136]	; 0x88
 80104b6:	f7f0 fe1b 	bl	80010f0 <__aeabi_fcmplt>
 80104ba:	2800      	cmp	r0, #0
 80104bc:	f043 81bc 	bne.w	8013838 <kalman_3gyro.constprop.0+0x5c3c>
 80104c0:	9b00      	ldr	r3, [sp, #0]
 80104c2:	f893 21a1 	ldrb.w	r2, [r3, #417]	; 0x1a1
 80104c6:	2a1e      	cmp	r2, #30
 80104c8:	f003 8153 	beq.w	8013772 <kalman_3gyro.constprop.0+0x5b76>
 80104cc:	2aff      	cmp	r2, #255	; 0xff
 80104ce:	f102 0301 	add.w	r3, r2, #1
 80104d2:	bf08      	it	eq
 80104d4:	23ff      	moveq	r3, #255	; 0xff
 80104d6:	f04f 0200 	mov.w	r2, #0
 80104da:	9900      	ldr	r1, [sp, #0]
 80104dc:	bf18      	it	ne
 80104de:	b2db      	uxtbne	r3, r3
 80104e0:	9c03      	ldr	r4, [sp, #12]
 80104e2:	f881 31a1 	strb.w	r3, [r1, #417]	; 0x1a1
 80104e6:	f881 21a3 	strb.w	r2, [r1, #419]	; 0x1a3
 80104ea:	e01a      	b.n	8010522 <kalman_3gyro.constprop.0+0x2926>
 80104ec:	3dcccccd 	.word	0x3dcccccd
 80104f0:	3be56041 	.word	0x3be56041
 80104f4:	3e333333 	.word	0x3e333333
 80104f8:	3d088889 	.word	0x3d088889
 80104fc:	2401      	movs	r4, #1
 80104fe:	2300      	movs	r3, #0
 8010500:	9800      	ldr	r0, [sp, #0]
 8010502:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
 8010506:	f8d0 11bc 	ldr.w	r1, [r0, #444]	; 0x1bc
 801050a:	f8d0 21c0 	ldr.w	r2, [r0, #448]	; 0x1c0
 801050e:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
 8010512:	f880 31a3 	strb.w	r3, [r0, #419]	; 0x1a3
 8010516:	7043      	strb	r3, [r0, #1]
 8010518:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
 801051c:	917b      	str	r1, [sp, #492]	; 0x1ec
 801051e:	927c      	str	r2, [sp, #496]	; 0x1f0
 8010520:	937d      	str	r3, [sp, #500]	; 0x1f4
 8010522:	4658      	mov	r0, fp
 8010524:	496e      	ldr	r1, [pc, #440]	; (80106e0 <kalman_3gyro.constprop.0+0x2ae4>)
 8010526:	f7f0 fdf7 	bl	8001118 <__aeabi_fcmpge>
 801052a:	2800      	cmp	r0, #0
 801052c:	f001 80ed 	beq.w	801170a <kalman_3gyro.constprop.0+0x3b0e>
 8010530:	2300      	movs	r3, #0
 8010532:	9a00      	ldr	r2, [sp, #0]
 8010534:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
 8010538:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
 801053c:	f882 31a2 	strb.w	r3, [r2, #418]	; 0x1a2
 8010540:	2c01      	cmp	r4, #1
 8010542:	d122      	bne.n	801058a <kalman_3gyro.constprop.0+0x298e>
 8010544:	f04f 517d 	mov.w	r1, #1061158912	; 0x3f400000
 8010548:	986c      	ldr	r0, [sp, #432]	; 0x1b0
 801054a:	f7f0 fc33 	bl	8000db4 <__aeabi_fmul>
 801054e:	993c      	ldr	r1, [sp, #240]	; 0xf0
 8010550:	906c      	str	r0, [sp, #432]	; 0x1b0
 8010552:	4608      	mov	r0, r1
 8010554:	f7f0 fb26 	bl	8000ba4 <__addsf3>
 8010558:	4603      	mov	r3, r0
 801055a:	f04f 517d 	mov.w	r1, #1061158912	; 0x3f400000
 801055e:	986d      	ldr	r0, [sp, #436]	; 0x1b4
 8010560:	933c      	str	r3, [sp, #240]	; 0xf0
 8010562:	f7f0 fc27 	bl	8000db4 <__aeabi_fmul>
 8010566:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8010568:	906d      	str	r0, [sp, #436]	; 0x1b4
 801056a:	4608      	mov	r0, r1
 801056c:	f7f0 fb1a 	bl	8000ba4 <__addsf3>
 8010570:	4603      	mov	r3, r0
 8010572:	f04f 517d 	mov.w	r1, #1061158912	; 0x3f400000
 8010576:	986e      	ldr	r0, [sp, #440]	; 0x1b8
 8010578:	933d      	str	r3, [sp, #244]	; 0xf4
 801057a:	f7f0 fc1b 	bl	8000db4 <__aeabi_fmul>
 801057e:	993e      	ldr	r1, [sp, #248]	; 0xf8
 8010580:	906e      	str	r0, [sp, #440]	; 0x1b8
 8010582:	4608      	mov	r0, r1
 8010584:	f7f0 fb0e 	bl	8000ba4 <__addsf3>
 8010588:	903e      	str	r0, [sp, #248]	; 0xf8
 801058a:	993c      	ldr	r1, [sp, #240]	; 0xf0
 801058c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801058e:	4608      	mov	r0, r1
 8010590:	956f      	str	r5, [sp, #444]	; 0x1bc
 8010592:	9570      	str	r5, [sp, #448]	; 0x1c0
 8010594:	9571      	str	r5, [sp, #452]	; 0x1c4
 8010596:	f7f0 fc0d 	bl	8000db4 <__aeabi_fmul>
 801059a:	9c00      	ldr	r4, [sp, #0]
 801059c:	4601      	mov	r1, r0
 801059e:	f8d4 01d4 	ldr.w	r0, [r4, #468]	; 0x1d4
 80105a2:	f7f0 faff 	bl	8000ba4 <__addsf3>
 80105a6:	993d      	ldr	r1, [sp, #244]	; 0xf4
 80105a8:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
 80105ac:	4608      	mov	r0, r1
 80105ae:	f7f0 fc01 	bl	8000db4 <__aeabi_fmul>
 80105b2:	4601      	mov	r1, r0
 80105b4:	f8d4 01fc 	ldr.w	r0, [r4, #508]	; 0x1fc
 80105b8:	f7f0 faf4 	bl	8000ba4 <__addsf3>
 80105bc:	993e      	ldr	r1, [sp, #248]	; 0xf8
 80105be:	f8c4 01fc 	str.w	r0, [r4, #508]	; 0x1fc
 80105c2:	4608      	mov	r0, r1
 80105c4:	f7f0 fbf6 	bl	8000db4 <__aeabi_fmul>
 80105c8:	4601      	mov	r1, r0
 80105ca:	f8d4 0224 	ldr.w	r0, [r4, #548]	; 0x224
 80105ce:	f7f0 fae9 	bl	8000ba4 <__addsf3>
 80105d2:	993f      	ldr	r1, [sp, #252]	; 0xfc
 80105d4:	f8c4 0224 	str.w	r0, [r4, #548]	; 0x224
 80105d8:	4608      	mov	r0, r1
 80105da:	f7f0 fbeb 	bl	8000db4 <__aeabi_fmul>
 80105de:	4601      	mov	r1, r0
 80105e0:	f8d4 024c 	ldr.w	r0, [r4, #588]	; 0x24c
 80105e4:	f7f0 fade 	bl	8000ba4 <__addsf3>
 80105e8:	9940      	ldr	r1, [sp, #256]	; 0x100
 80105ea:	f8c4 024c 	str.w	r0, [r4, #588]	; 0x24c
 80105ee:	4608      	mov	r0, r1
 80105f0:	f7f0 fbe0 	bl	8000db4 <__aeabi_fmul>
 80105f4:	4601      	mov	r1, r0
 80105f6:	f8d4 0274 	ldr.w	r0, [r4, #628]	; 0x274
 80105fa:	f7f0 fad3 	bl	8000ba4 <__addsf3>
 80105fe:	9941      	ldr	r1, [sp, #260]	; 0x104
 8010600:	f8c4 0274 	str.w	r0, [r4, #628]	; 0x274
 8010604:	4608      	mov	r0, r1
 8010606:	f7f0 fbd5 	bl	8000db4 <__aeabi_fmul>
 801060a:	4601      	mov	r1, r0
 801060c:	f8d4 029c 	ldr.w	r0, [r4, #668]	; 0x29c
 8010610:	f7f0 fac8 	bl	8000ba4 <__addsf3>
 8010614:	9942      	ldr	r1, [sp, #264]	; 0x108
 8010616:	f8c4 029c 	str.w	r0, [r4, #668]	; 0x29c
 801061a:	4608      	mov	r0, r1
 801061c:	f7f0 fbca 	bl	8000db4 <__aeabi_fmul>
 8010620:	4601      	mov	r1, r0
 8010622:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 8010626:	f7f0 fabd 	bl	8000ba4 <__addsf3>
 801062a:	9943      	ldr	r1, [sp, #268]	; 0x10c
 801062c:	f8c4 02c4 	str.w	r0, [r4, #708]	; 0x2c4
 8010630:	4608      	mov	r0, r1
 8010632:	f7f0 fbbf 	bl	8000db4 <__aeabi_fmul>
 8010636:	4601      	mov	r1, r0
 8010638:	f8d4 02ec 	ldr.w	r0, [r4, #748]	; 0x2ec
 801063c:	f7f0 fab2 	bl	8000ba4 <__addsf3>
 8010640:	9944      	ldr	r1, [sp, #272]	; 0x110
 8010642:	f8c4 02ec 	str.w	r0, [r4, #748]	; 0x2ec
 8010646:	4608      	mov	r0, r1
 8010648:	f7f0 fbb4 	bl	8000db4 <__aeabi_fmul>
 801064c:	4601      	mov	r1, r0
 801064e:	f8d4 0314 	ldr.w	r0, [r4, #788]	; 0x314
 8010652:	f7f0 faa7 	bl	8000ba4 <__addsf3>
 8010656:	9969      	ldr	r1, [sp, #420]	; 0x1a4
 8010658:	f8c4 0314 	str.w	r0, [r4, #788]	; 0x314
 801065c:	4608      	mov	r0, r1
 801065e:	f7f0 fba9 	bl	8000db4 <__aeabi_fmul>
 8010662:	996a      	ldr	r1, [sp, #424]	; 0x1a8
 8010664:	9081      	str	r0, [sp, #516]	; 0x204
 8010666:	4608      	mov	r0, r1
 8010668:	f7f0 fba4 	bl	8000db4 <__aeabi_fmul>
 801066c:	996b      	ldr	r1, [sp, #428]	; 0x1ac
 801066e:	9082      	str	r0, [sp, #520]	; 0x208
 8010670:	4608      	mov	r0, r1
 8010672:	f7f0 fb9f 	bl	8000db4 <__aeabi_fmul>
 8010676:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 8010678:	9083      	str	r0, [sp, #524]	; 0x20c
 801067a:	4608      	mov	r0, r1
 801067c:	f7f0 fb9a 	bl	8000db4 <__aeabi_fmul>
 8010680:	996d      	ldr	r1, [sp, #436]	; 0x1b4
 8010682:	9084      	str	r0, [sp, #528]	; 0x210
 8010684:	4608      	mov	r0, r1
 8010686:	f7f0 fb95 	bl	8000db4 <__aeabi_fmul>
 801068a:	996e      	ldr	r1, [sp, #440]	; 0x1b8
 801068c:	9085      	str	r0, [sp, #532]	; 0x214
 801068e:	4608      	mov	r0, r1
 8010690:	f7f0 fb90 	bl	8000db4 <__aeabi_fmul>
 8010694:	4603      	mov	r3, r0
 8010696:	4629      	mov	r1, r5
 8010698:	4628      	mov	r0, r5
 801069a:	9386      	str	r3, [sp, #536]	; 0x218
 801069c:	f7f0 fb8a 	bl	8000db4 <__aeabi_fmul>
 80106a0:	4603      	mov	r3, r0
 80106a2:	9972      	ldr	r1, [sp, #456]	; 0x1c8
 80106a4:	9087      	str	r0, [sp, #540]	; 0x21c
 80106a6:	4608      	mov	r0, r1
 80106a8:	9388      	str	r3, [sp, #544]	; 0x220
 80106aa:	9389      	str	r3, [sp, #548]	; 0x224
 80106ac:	f7f0 fb82 	bl	8000db4 <__aeabi_fmul>
 80106b0:	9973      	ldr	r1, [sp, #460]	; 0x1cc
 80106b2:	908a      	str	r0, [sp, #552]	; 0x228
 80106b4:	4608      	mov	r0, r1
 80106b6:	f7f0 fb7d 	bl	8000db4 <__aeabi_fmul>
 80106ba:	9974      	ldr	r1, [sp, #464]	; 0x1d0
 80106bc:	908b      	str	r0, [sp, #556]	; 0x22c
 80106be:	4608      	mov	r0, r1
 80106c0:	f7f0 fb78 	bl	8000db4 <__aeabi_fmul>
 80106c4:	ab24      	add	r3, sp, #144	; 0x90
 80106c6:	930d      	str	r3, [sp, #52]	; 0x34
 80106c8:	f50d 63c0 	add.w	r3, sp, #1536	; 0x600
 80106cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80106ce:	2300      	movs	r3, #0
 80106d0:	930a      	str	r3, [sp, #40]	; 0x28
 80106d2:	f504 73ea 	add.w	r3, r4, #468	; 0x1d4
 80106d6:	f04f 0a00 	mov.w	sl, #0
 80106da:	908c      	str	r0, [sp, #560]	; 0x230
 80106dc:	9318      	str	r3, [sp, #96]	; 0x60
 80106de:	e00a      	b.n	80106f6 <kalman_3gyro.constprop.0+0x2afa>
 80106e0:	42480000 	.word	0x42480000
 80106e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80106e8:	3301      	adds	r3, #1
 80106ea:	3204      	adds	r2, #4
 80106ec:	2b0c      	cmp	r3, #12
 80106ee:	930a      	str	r3, [sp, #40]	; 0x28
 80106f0:	920b      	str	r2, [sp, #44]	; 0x2c
 80106f2:	f000 8740 	beq.w	8011576 <kalman_3gyro.constprop.0+0x397a>
 80106f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80106f8:	f812 3b01 	ldrb.w	r3, [r2], #1
 80106fc:	920d      	str	r2, [sp, #52]	; 0x34
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d0f0      	beq.n	80106e4 <kalman_3gyro.constprop.0+0x2ae8>
 8010702:	ae8c      	add	r6, sp, #560	; 0x230
 8010704:	46b0      	mov	r8, r6
 8010706:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010708:	f8cd a234 	str.w	sl, [sp, #564]	; 0x234
 801070c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801070e:	681f      	ldr	r7, [r3, #0]
 8010710:	9201      	str	r2, [sp, #4]
 8010712:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8010716:	f8d3 b030 	ldr.w	fp, [r3, #48]	; 0x30
 801071a:	9202      	str	r2, [sp, #8]
 801071c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8010720:	f8cd a238 	str.w	sl, [sp, #568]	; 0x238
 8010724:	9203      	str	r2, [sp, #12]
 8010726:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 801072a:	f8cd a23c 	str.w	sl, [sp, #572]	; 0x23c
 801072e:	9204      	str	r2, [sp, #16]
 8010730:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 8010734:	f8cd a240 	str.w	sl, [sp, #576]	; 0x240
 8010738:	9205      	str	r2, [sp, #20]
 801073a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 801073e:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8010742:	9206      	str	r2, [sp, #24]
 8010744:	9307      	str	r3, [sp, #28]
 8010746:	9b00      	ldr	r3, [sp, #0]
 8010748:	f8cd a244 	str.w	sl, [sp, #580]	; 0x244
 801074c:	f503 74e8 	add.w	r4, r3, #464	; 0x1d0
 8010750:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8010754:	e9cd 3608 	strd	r3, r6, [sp, #32]
 8010758:	f8cd a248 	str.w	sl, [sp, #584]	; 0x248
 801075c:	f8cd a24c 	str.w	sl, [sp, #588]	; 0x24c
 8010760:	f8cd a250 	str.w	sl, [sp, #592]	; 0x250
 8010764:	f8cd a254 	str.w	sl, [sp, #596]	; 0x254
 8010768:	f854 6f04 	ldr.w	r6, [r4, #4]!
 801076c:	4651      	mov	r1, sl
 801076e:	4630      	mov	r0, r6
 8010770:	f7f0 fcb4 	bl	80010dc <__aeabi_fcmpeq>
 8010774:	f858 5f04 	ldr.w	r5, [r8, #4]!
 8010778:	b968      	cbnz	r0, 8010796 <kalman_3gyro.constprop.0+0x2b9a>
 801077a:	4651      	mov	r1, sl
 801077c:	4638      	mov	r0, r7
 801077e:	f7f0 fcad 	bl	80010dc <__aeabi_fcmpeq>
 8010782:	b940      	cbnz	r0, 8010796 <kalman_3gyro.constprop.0+0x2b9a>
 8010784:	4631      	mov	r1, r6
 8010786:	4638      	mov	r0, r7
 8010788:	f7f0 fb14 	bl	8000db4 <__aeabi_fmul>
 801078c:	4601      	mov	r1, r0
 801078e:	4628      	mov	r0, r5
 8010790:	f7f0 fa08 	bl	8000ba4 <__addsf3>
 8010794:	4605      	mov	r5, r0
 8010796:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010798:	4651      	mov	r1, sl
 801079a:	4630      	mov	r0, r6
 801079c:	f7f0 fc9e 	bl	80010dc <__aeabi_fcmpeq>
 80107a0:	b968      	cbnz	r0, 80107be <kalman_3gyro.constprop.0+0x2bc2>
 80107a2:	4651      	mov	r1, sl
 80107a4:	4658      	mov	r0, fp
 80107a6:	f7f0 fc99 	bl	80010dc <__aeabi_fcmpeq>
 80107aa:	b940      	cbnz	r0, 80107be <kalman_3gyro.constprop.0+0x2bc2>
 80107ac:	4631      	mov	r1, r6
 80107ae:	4658      	mov	r0, fp
 80107b0:	f7f0 fb00 	bl	8000db4 <__aeabi_fmul>
 80107b4:	4601      	mov	r1, r0
 80107b6:	4628      	mov	r0, r5
 80107b8:	f7f0 f9f4 	bl	8000ba4 <__addsf3>
 80107bc:	4605      	mov	r5, r0
 80107be:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 80107c0:	4651      	mov	r1, sl
 80107c2:	4630      	mov	r0, r6
 80107c4:	f7f0 fc8a 	bl	80010dc <__aeabi_fcmpeq>
 80107c8:	b968      	cbnz	r0, 80107e6 <kalman_3gyro.constprop.0+0x2bea>
 80107ca:	4651      	mov	r1, sl
 80107cc:	9801      	ldr	r0, [sp, #4]
 80107ce:	f7f0 fc85 	bl	80010dc <__aeabi_fcmpeq>
 80107d2:	b940      	cbnz	r0, 80107e6 <kalman_3gyro.constprop.0+0x2bea>
 80107d4:	4631      	mov	r1, r6
 80107d6:	9801      	ldr	r0, [sp, #4]
 80107d8:	f7f0 faec 	bl	8000db4 <__aeabi_fmul>
 80107dc:	4601      	mov	r1, r0
 80107de:	4628      	mov	r0, r5
 80107e0:	f7f0 f9e0 	bl	8000ba4 <__addsf3>
 80107e4:	4605      	mov	r5, r0
 80107e6:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 80107e8:	4651      	mov	r1, sl
 80107ea:	4630      	mov	r0, r6
 80107ec:	f7f0 fc76 	bl	80010dc <__aeabi_fcmpeq>
 80107f0:	b968      	cbnz	r0, 801080e <kalman_3gyro.constprop.0+0x2c12>
 80107f2:	4651      	mov	r1, sl
 80107f4:	9802      	ldr	r0, [sp, #8]
 80107f6:	f7f0 fc71 	bl	80010dc <__aeabi_fcmpeq>
 80107fa:	b940      	cbnz	r0, 801080e <kalman_3gyro.constprop.0+0x2c12>
 80107fc:	4631      	mov	r1, r6
 80107fe:	9802      	ldr	r0, [sp, #8]
 8010800:	f7f0 fad8 	bl	8000db4 <__aeabi_fmul>
 8010804:	4601      	mov	r1, r0
 8010806:	4628      	mov	r0, r5
 8010808:	f7f0 f9cc 	bl	8000ba4 <__addsf3>
 801080c:	4605      	mov	r5, r0
 801080e:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
 8010812:	4651      	mov	r1, sl
 8010814:	4630      	mov	r0, r6
 8010816:	f7f0 fc61 	bl	80010dc <__aeabi_fcmpeq>
 801081a:	b968      	cbnz	r0, 8010838 <kalman_3gyro.constprop.0+0x2c3c>
 801081c:	4651      	mov	r1, sl
 801081e:	9803      	ldr	r0, [sp, #12]
 8010820:	f7f0 fc5c 	bl	80010dc <__aeabi_fcmpeq>
 8010824:	b940      	cbnz	r0, 8010838 <kalman_3gyro.constprop.0+0x2c3c>
 8010826:	4631      	mov	r1, r6
 8010828:	9803      	ldr	r0, [sp, #12]
 801082a:	f7f0 fac3 	bl	8000db4 <__aeabi_fmul>
 801082e:	4601      	mov	r1, r0
 8010830:	4628      	mov	r0, r5
 8010832:	f7f0 f9b7 	bl	8000ba4 <__addsf3>
 8010836:	4605      	mov	r5, r0
 8010838:	f8d4 60b4 	ldr.w	r6, [r4, #180]	; 0xb4
 801083c:	4651      	mov	r1, sl
 801083e:	4630      	mov	r0, r6
 8010840:	f7f0 fc4c 	bl	80010dc <__aeabi_fcmpeq>
 8010844:	b968      	cbnz	r0, 8010862 <kalman_3gyro.constprop.0+0x2c66>
 8010846:	4651      	mov	r1, sl
 8010848:	9804      	ldr	r0, [sp, #16]
 801084a:	f7f0 fc47 	bl	80010dc <__aeabi_fcmpeq>
 801084e:	b940      	cbnz	r0, 8010862 <kalman_3gyro.constprop.0+0x2c66>
 8010850:	4631      	mov	r1, r6
 8010852:	9804      	ldr	r0, [sp, #16]
 8010854:	f7f0 faae 	bl	8000db4 <__aeabi_fmul>
 8010858:	4601      	mov	r1, r0
 801085a:	4628      	mov	r0, r5
 801085c:	f7f0 f9a2 	bl	8000ba4 <__addsf3>
 8010860:	4605      	mov	r5, r0
 8010862:	f8d4 60d8 	ldr.w	r6, [r4, #216]	; 0xd8
 8010866:	4651      	mov	r1, sl
 8010868:	4630      	mov	r0, r6
 801086a:	f7f0 fc37 	bl	80010dc <__aeabi_fcmpeq>
 801086e:	b968      	cbnz	r0, 801088c <kalman_3gyro.constprop.0+0x2c90>
 8010870:	4651      	mov	r1, sl
 8010872:	9805      	ldr	r0, [sp, #20]
 8010874:	f7f0 fc32 	bl	80010dc <__aeabi_fcmpeq>
 8010878:	b940      	cbnz	r0, 801088c <kalman_3gyro.constprop.0+0x2c90>
 801087a:	4631      	mov	r1, r6
 801087c:	9805      	ldr	r0, [sp, #20]
 801087e:	f7f0 fa99 	bl	8000db4 <__aeabi_fmul>
 8010882:	4601      	mov	r1, r0
 8010884:	4628      	mov	r0, r5
 8010886:	f7f0 f98d 	bl	8000ba4 <__addsf3>
 801088a:	4605      	mov	r5, r0
 801088c:	f8d4 60fc 	ldr.w	r6, [r4, #252]	; 0xfc
 8010890:	4651      	mov	r1, sl
 8010892:	4630      	mov	r0, r6
 8010894:	f7f0 fc22 	bl	80010dc <__aeabi_fcmpeq>
 8010898:	b968      	cbnz	r0, 80108b6 <kalman_3gyro.constprop.0+0x2cba>
 801089a:	4651      	mov	r1, sl
 801089c:	9806      	ldr	r0, [sp, #24]
 801089e:	f7f0 fc1d 	bl	80010dc <__aeabi_fcmpeq>
 80108a2:	b940      	cbnz	r0, 80108b6 <kalman_3gyro.constprop.0+0x2cba>
 80108a4:	4631      	mov	r1, r6
 80108a6:	9806      	ldr	r0, [sp, #24]
 80108a8:	f7f0 fa84 	bl	8000db4 <__aeabi_fmul>
 80108ac:	4601      	mov	r1, r0
 80108ae:	4628      	mov	r0, r5
 80108b0:	f7f0 f978 	bl	8000ba4 <__addsf3>
 80108b4:	4605      	mov	r5, r0
 80108b6:	f8d4 6120 	ldr.w	r6, [r4, #288]	; 0x120
 80108ba:	4651      	mov	r1, sl
 80108bc:	4630      	mov	r0, r6
 80108be:	f7f0 fc0d 	bl	80010dc <__aeabi_fcmpeq>
 80108c2:	b968      	cbnz	r0, 80108e0 <kalman_3gyro.constprop.0+0x2ce4>
 80108c4:	4651      	mov	r1, sl
 80108c6:	9807      	ldr	r0, [sp, #28]
 80108c8:	f7f0 fc08 	bl	80010dc <__aeabi_fcmpeq>
 80108cc:	b940      	cbnz	r0, 80108e0 <kalman_3gyro.constprop.0+0x2ce4>
 80108ce:	4631      	mov	r1, r6
 80108d0:	9807      	ldr	r0, [sp, #28]
 80108d2:	f7f0 fa6f 	bl	8000db4 <__aeabi_fmul>
 80108d6:	4601      	mov	r1, r0
 80108d8:	4628      	mov	r0, r5
 80108da:	f7f0 f963 	bl	8000ba4 <__addsf3>
 80108de:	4605      	mov	r5, r0
 80108e0:	9b08      	ldr	r3, [sp, #32]
 80108e2:	f8c8 5000 	str.w	r5, [r8]
 80108e6:	429c      	cmp	r4, r3
 80108e8:	f47f af3e 	bne.w	8010768 <kalman_3gyro.constprop.0+0x2b6c>
 80108ec:	4651      	mov	r1, sl
 80108ee:	4638      	mov	r0, r7
 80108f0:	f7f0 fbf4 	bl	80010dc <__aeabi_fcmpeq>
 80108f4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80108f6:	9d8d      	ldr	r5, [sp, #564]	; 0x234
 80108f8:	2800      	cmp	r0, #0
 80108fa:	f000 85f2 	beq.w	80114e2 <kalman_3gyro.constprop.0+0x38e6>
 80108fe:	463c      	mov	r4, r7
 8010900:	4651      	mov	r1, sl
 8010902:	4658      	mov	r0, fp
 8010904:	f7f0 fbea 	bl	80010dc <__aeabi_fcmpeq>
 8010908:	9b8e      	ldr	r3, [sp, #568]	; 0x238
 801090a:	2800      	cmp	r0, #0
 801090c:	f000 85d5 	beq.w	80114ba <kalman_3gyro.constprop.0+0x38be>
 8010910:	930e      	str	r3, [sp, #56]	; 0x38
 8010912:	4651      	mov	r1, sl
 8010914:	9801      	ldr	r0, [sp, #4]
 8010916:	f7f0 fbe1 	bl	80010dc <__aeabi_fcmpeq>
 801091a:	9b8f      	ldr	r3, [sp, #572]	; 0x23c
 801091c:	2800      	cmp	r0, #0
 801091e:	f000 85b8 	beq.w	8011492 <kalman_3gyro.constprop.0+0x3896>
 8010922:	930c      	str	r3, [sp, #48]	; 0x30
 8010924:	4651      	mov	r1, sl
 8010926:	9802      	ldr	r0, [sp, #8]
 8010928:	f7f0 fbd8 	bl	80010dc <__aeabi_fcmpeq>
 801092c:	9b90      	ldr	r3, [sp, #576]	; 0x240
 801092e:	2800      	cmp	r0, #0
 8010930:	f000 859b 	beq.w	801146a <kalman_3gyro.constprop.0+0x386e>
 8010934:	930f      	str	r3, [sp, #60]	; 0x3c
 8010936:	4651      	mov	r1, sl
 8010938:	9803      	ldr	r0, [sp, #12]
 801093a:	f7f0 fbcf 	bl	80010dc <__aeabi_fcmpeq>
 801093e:	9b91      	ldr	r3, [sp, #580]	; 0x244
 8010940:	2800      	cmp	r0, #0
 8010942:	f000 857e 	beq.w	8011442 <kalman_3gyro.constprop.0+0x3846>
 8010946:	9309      	str	r3, [sp, #36]	; 0x24
 8010948:	4651      	mov	r1, sl
 801094a:	9804      	ldr	r0, [sp, #16]
 801094c:	f7f0 fbc6 	bl	80010dc <__aeabi_fcmpeq>
 8010950:	9b92      	ldr	r3, [sp, #584]	; 0x248
 8010952:	2800      	cmp	r0, #0
 8010954:	f000 8561 	beq.w	801141a <kalman_3gyro.constprop.0+0x381e>
 8010958:	9311      	str	r3, [sp, #68]	; 0x44
 801095a:	4651      	mov	r1, sl
 801095c:	9805      	ldr	r0, [sp, #20]
 801095e:	f7f0 fbbd 	bl	80010dc <__aeabi_fcmpeq>
 8010962:	f8dd 824c 	ldr.w	r8, [sp, #588]	; 0x24c
 8010966:	b968      	cbnz	r0, 8010984 <kalman_3gyro.constprop.0+0x2d88>
 8010968:	4651      	mov	r1, sl
 801096a:	4640      	mov	r0, r8
 801096c:	f7f0 fbb6 	bl	80010dc <__aeabi_fcmpeq>
 8010970:	b940      	cbnz	r0, 8010984 <kalman_3gyro.constprop.0+0x2d88>
 8010972:	9905      	ldr	r1, [sp, #20]
 8010974:	4640      	mov	r0, r8
 8010976:	f7f0 fa1d 	bl	8000db4 <__aeabi_fmul>
 801097a:	4601      	mov	r1, r0
 801097c:	4620      	mov	r0, r4
 801097e:	f7f0 f911 	bl	8000ba4 <__addsf3>
 8010982:	4604      	mov	r4, r0
 8010984:	4651      	mov	r1, sl
 8010986:	9806      	ldr	r0, [sp, #24]
 8010988:	f7f0 fba8 	bl	80010dc <__aeabi_fcmpeq>
 801098c:	9b94      	ldr	r3, [sp, #592]	; 0x250
 801098e:	2800      	cmp	r0, #0
 8010990:	f000 8530 	beq.w	80113f4 <kalman_3gyro.constprop.0+0x37f8>
 8010994:	9308      	str	r3, [sp, #32]
 8010996:	4651      	mov	r1, sl
 8010998:	9807      	ldr	r0, [sp, #28]
 801099a:	f7f0 fb9f 	bl	80010dc <__aeabi_fcmpeq>
 801099e:	9b95      	ldr	r3, [sp, #596]	; 0x254
 80109a0:	b980      	cbnz	r0, 80109c4 <kalman_3gyro.constprop.0+0x2dc8>
 80109a2:	4618      	mov	r0, r3
 80109a4:	4651      	mov	r1, sl
 80109a6:	9310      	str	r3, [sp, #64]	; 0x40
 80109a8:	f7f0 fb98 	bl	80010dc <__aeabi_fcmpeq>
 80109ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80109ae:	b948      	cbnz	r0, 80109c4 <kalman_3gyro.constprop.0+0x2dc8>
 80109b0:	4618      	mov	r0, r3
 80109b2:	9907      	ldr	r1, [sp, #28]
 80109b4:	f7f0 f9fe 	bl	8000db4 <__aeabi_fmul>
 80109b8:	4601      	mov	r1, r0
 80109ba:	4620      	mov	r0, r4
 80109bc:	f7f0 f8f2 	bl	8000ba4 <__addsf3>
 80109c0:	4604      	mov	r4, r0
 80109c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80109c4:	9317      	str	r3, [sp, #92]	; 0x5c
 80109c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80109c8:	aa81      	add	r2, sp, #516	; 0x204
 80109ca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80109ce:	4620      	mov	r0, r4
 80109d0:	f7f0 f8e8 	bl	8000ba4 <__addsf3>
 80109d4:	4601      	mov	r1, r0
 80109d6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80109da:	f7f0 fa9f 	bl	8000f1c <__aeabi_fdiv>
 80109de:	4604      	mov	r4, r0
 80109e0:	4628      	mov	r0, r5
 80109e2:	4621      	mov	r1, r4
 80109e4:	f7f0 f9e6 	bl	8000db4 <__aeabi_fmul>
 80109e8:	4602      	mov	r2, r0
 80109ea:	4621      	mov	r1, r4
 80109ec:	9016      	str	r0, [sp, #88]	; 0x58
 80109ee:	980e      	ldr	r0, [sp, #56]	; 0x38
 80109f0:	928d      	str	r2, [sp, #564]	; 0x234
 80109f2:	f7f0 f9df 	bl	8000db4 <__aeabi_fmul>
 80109f6:	4602      	mov	r2, r0
 80109f8:	4621      	mov	r1, r4
 80109fa:	9015      	str	r0, [sp, #84]	; 0x54
 80109fc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80109fe:	928e      	str	r2, [sp, #568]	; 0x238
 8010a00:	f7f0 f9d8 	bl	8000db4 <__aeabi_fmul>
 8010a04:	4602      	mov	r2, r0
 8010a06:	4621      	mov	r1, r4
 8010a08:	900e      	str	r0, [sp, #56]	; 0x38
 8010a0a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8010a0c:	928f      	str	r2, [sp, #572]	; 0x23c
 8010a0e:	f7f0 f9d1 	bl	8000db4 <__aeabi_fmul>
 8010a12:	4602      	mov	r2, r0
 8010a14:	4621      	mov	r1, r4
 8010a16:	9010      	str	r0, [sp, #64]	; 0x40
 8010a18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010a1a:	9290      	str	r2, [sp, #576]	; 0x240
 8010a1c:	f7f0 f9ca 	bl	8000db4 <__aeabi_fmul>
 8010a20:	4602      	mov	r2, r0
 8010a22:	4621      	mov	r1, r4
 8010a24:	9013      	str	r0, [sp, #76]	; 0x4c
 8010a26:	9811      	ldr	r0, [sp, #68]	; 0x44
 8010a28:	9291      	str	r2, [sp, #580]	; 0x244
 8010a2a:	f7f0 f9c3 	bl	8000db4 <__aeabi_fmul>
 8010a2e:	4602      	mov	r2, r0
 8010a30:	4621      	mov	r1, r4
 8010a32:	9011      	str	r0, [sp, #68]	; 0x44
 8010a34:	4640      	mov	r0, r8
 8010a36:	9292      	str	r2, [sp, #584]	; 0x248
 8010a38:	f7f0 f9bc 	bl	8000db4 <__aeabi_fmul>
 8010a3c:	4602      	mov	r2, r0
 8010a3e:	4621      	mov	r1, r4
 8010a40:	9014      	str	r0, [sp, #80]	; 0x50
 8010a42:	9808      	ldr	r0, [sp, #32]
 8010a44:	9293      	str	r2, [sp, #588]	; 0x24c
 8010a46:	f7f0 f9b5 	bl	8000db4 <__aeabi_fmul>
 8010a4a:	4602      	mov	r2, r0
 8010a4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010a4e:	9012      	str	r0, [sp, #72]	; 0x48
 8010a50:	4621      	mov	r1, r4
 8010a52:	4618      	mov	r0, r3
 8010a54:	9294      	str	r2, [sp, #592]	; 0x250
 8010a56:	f7f0 f9ad 	bl	8000db4 <__aeabi_fmul>
 8010a5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a5c:	900f      	str	r0, [sp, #60]	; 0x3c
 8010a5e:	2b05      	cmp	r3, #5
 8010a60:	9095      	str	r0, [sp, #596]	; 0x254
 8010a62:	f340 84c2 	ble.w	80113ea <kalman_3gyro.constprop.0+0x37ee>
 8010a66:	4651      	mov	r1, sl
 8010a68:	4638      	mov	r0, r7
 8010a6a:	f7f0 fb37 	bl	80010dc <__aeabi_fcmpeq>
 8010a6e:	2800      	cmp	r0, #0
 8010a70:	f040 863c 	bne.w	80116ec <kalman_3gyro.constprop.0+0x3af0>
 8010a74:	9b00      	ldr	r3, [sp, #0]
 8010a76:	4651      	mov	r1, sl
 8010a78:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
 8010a7c:	4620      	mov	r0, r4
 8010a7e:	f7f0 fb2d 	bl	80010dc <__aeabi_fcmpeq>
 8010a82:	b920      	cbnz	r0, 8010a8e <kalman_3gyro.constprop.0+0x2e92>
 8010a84:	4620      	mov	r0, r4
 8010a86:	4639      	mov	r1, r7
 8010a88:	f7f0 f994 	bl	8000db4 <__aeabi_fmul>
 8010a8c:	4604      	mov	r4, r0
 8010a8e:	4651      	mov	r1, sl
 8010a90:	4658      	mov	r0, fp
 8010a92:	f7f0 fb23 	bl	80010dc <__aeabi_fcmpeq>
 8010a96:	b980      	cbnz	r0, 8010aba <kalman_3gyro.constprop.0+0x2ebe>
 8010a98:	9b00      	ldr	r3, [sp, #0]
 8010a9a:	4651      	mov	r1, sl
 8010a9c:	f8d3 51b4 	ldr.w	r5, [r3, #436]	; 0x1b4
 8010aa0:	4628      	mov	r0, r5
 8010aa2:	f7f0 fb1b 	bl	80010dc <__aeabi_fcmpeq>
 8010aa6:	b940      	cbnz	r0, 8010aba <kalman_3gyro.constprop.0+0x2ebe>
 8010aa8:	4659      	mov	r1, fp
 8010aaa:	4628      	mov	r0, r5
 8010aac:	f7f0 f982 	bl	8000db4 <__aeabi_fmul>
 8010ab0:	4601      	mov	r1, r0
 8010ab2:	4620      	mov	r0, r4
 8010ab4:	f7f0 f876 	bl	8000ba4 <__addsf3>
 8010ab8:	4604      	mov	r4, r0
 8010aba:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010abe:	4651      	mov	r1, sl
 8010ac0:	4640      	mov	r0, r8
 8010ac2:	f7f0 fb0b 	bl	80010dc <__aeabi_fcmpeq>
 8010ac6:	b980      	cbnz	r0, 8010aea <kalman_3gyro.constprop.0+0x2eee>
 8010ac8:	9b00      	ldr	r3, [sp, #0]
 8010aca:	4651      	mov	r1, sl
 8010acc:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
 8010ad0:	4628      	mov	r0, r5
 8010ad2:	f7f0 fb03 	bl	80010dc <__aeabi_fcmpeq>
 8010ad6:	b940      	cbnz	r0, 8010aea <kalman_3gyro.constprop.0+0x2eee>
 8010ad8:	4641      	mov	r1, r8
 8010ada:	4628      	mov	r0, r5
 8010adc:	f7f0 f96a 	bl	8000db4 <__aeabi_fmul>
 8010ae0:	4601      	mov	r1, r0
 8010ae2:	4620      	mov	r0, r4
 8010ae4:	f7f0 f85e 	bl	8000ba4 <__addsf3>
 8010ae8:	4604      	mov	r4, r0
 8010aea:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8010aee:	4651      	mov	r1, sl
 8010af0:	4640      	mov	r0, r8
 8010af2:	f7f0 faf3 	bl	80010dc <__aeabi_fcmpeq>
 8010af6:	b980      	cbnz	r0, 8010b1a <kalman_3gyro.constprop.0+0x2f1e>
 8010af8:	9b00      	ldr	r3, [sp, #0]
 8010afa:	4651      	mov	r1, sl
 8010afc:	f8d3 51bc 	ldr.w	r5, [r3, #444]	; 0x1bc
 8010b00:	4628      	mov	r0, r5
 8010b02:	f7f0 faeb 	bl	80010dc <__aeabi_fcmpeq>
 8010b06:	b940      	cbnz	r0, 8010b1a <kalman_3gyro.constprop.0+0x2f1e>
 8010b08:	4641      	mov	r1, r8
 8010b0a:	4628      	mov	r0, r5
 8010b0c:	f7f0 f952 	bl	8000db4 <__aeabi_fmul>
 8010b10:	4601      	mov	r1, r0
 8010b12:	4620      	mov	r0, r4
 8010b14:	f7f0 f846 	bl	8000ba4 <__addsf3>
 8010b18:	4604      	mov	r4, r0
 8010b1a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8010b1e:	4651      	mov	r1, sl
 8010b20:	4640      	mov	r0, r8
 8010b22:	f7f0 fadb 	bl	80010dc <__aeabi_fcmpeq>
 8010b26:	b980      	cbnz	r0, 8010b4a <kalman_3gyro.constprop.0+0x2f4e>
 8010b28:	9b00      	ldr	r3, [sp, #0]
 8010b2a:	4651      	mov	r1, sl
 8010b2c:	f8d3 51c0 	ldr.w	r5, [r3, #448]	; 0x1c0
 8010b30:	4628      	mov	r0, r5
 8010b32:	f7f0 fad3 	bl	80010dc <__aeabi_fcmpeq>
 8010b36:	b940      	cbnz	r0, 8010b4a <kalman_3gyro.constprop.0+0x2f4e>
 8010b38:	4641      	mov	r1, r8
 8010b3a:	4628      	mov	r0, r5
 8010b3c:	f7f0 f93a 	bl	8000db4 <__aeabi_fmul>
 8010b40:	4601      	mov	r1, r0
 8010b42:	4620      	mov	r0, r4
 8010b44:	f7f0 f82e 	bl	8000ba4 <__addsf3>
 8010b48:	4604      	mov	r4, r0
 8010b4a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010b4e:	4651      	mov	r1, sl
 8010b50:	4640      	mov	r0, r8
 8010b52:	f7f0 fac3 	bl	80010dc <__aeabi_fcmpeq>
 8010b56:	b980      	cbnz	r0, 8010b7a <kalman_3gyro.constprop.0+0x2f7e>
 8010b58:	9b00      	ldr	r3, [sp, #0]
 8010b5a:	4651      	mov	r1, sl
 8010b5c:	f8d3 51c4 	ldr.w	r5, [r3, #452]	; 0x1c4
 8010b60:	4628      	mov	r0, r5
 8010b62:	f7f0 fabb 	bl	80010dc <__aeabi_fcmpeq>
 8010b66:	b940      	cbnz	r0, 8010b7a <kalman_3gyro.constprop.0+0x2f7e>
 8010b68:	4641      	mov	r1, r8
 8010b6a:	4628      	mov	r0, r5
 8010b6c:	f7f0 f922 	bl	8000db4 <__aeabi_fmul>
 8010b70:	4601      	mov	r1, r0
 8010b72:	4620      	mov	r0, r4
 8010b74:	f7f0 f816 	bl	8000ba4 <__addsf3>
 8010b78:	4604      	mov	r4, r0
 8010b7a:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8010b7e:	4651      	mov	r1, sl
 8010b80:	4640      	mov	r0, r8
 8010b82:	f7f0 faab 	bl	80010dc <__aeabi_fcmpeq>
 8010b86:	b980      	cbnz	r0, 8010baa <kalman_3gyro.constprop.0+0x2fae>
 8010b88:	9b00      	ldr	r3, [sp, #0]
 8010b8a:	4651      	mov	r1, sl
 8010b8c:	f8d3 51c8 	ldr.w	r5, [r3, #456]	; 0x1c8
 8010b90:	4628      	mov	r0, r5
 8010b92:	f7f0 faa3 	bl	80010dc <__aeabi_fcmpeq>
 8010b96:	b940      	cbnz	r0, 8010baa <kalman_3gyro.constprop.0+0x2fae>
 8010b98:	4641      	mov	r1, r8
 8010b9a:	4628      	mov	r0, r5
 8010b9c:	f7f0 f90a 	bl	8000db4 <__aeabi_fmul>
 8010ba0:	4601      	mov	r1, r0
 8010ba2:	4620      	mov	r0, r4
 8010ba4:	f7ef fffe 	bl	8000ba4 <__addsf3>
 8010ba8:	4604      	mov	r4, r0
 8010baa:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8010bae:	4651      	mov	r1, sl
 8010bb0:	4640      	mov	r0, r8
 8010bb2:	f7f0 fa93 	bl	80010dc <__aeabi_fcmpeq>
 8010bb6:	b980      	cbnz	r0, 8010bda <kalman_3gyro.constprop.0+0x2fde>
 8010bb8:	9b00      	ldr	r3, [sp, #0]
 8010bba:	4651      	mov	r1, sl
 8010bbc:	f8d3 51cc 	ldr.w	r5, [r3, #460]	; 0x1cc
 8010bc0:	4628      	mov	r0, r5
 8010bc2:	f7f0 fa8b 	bl	80010dc <__aeabi_fcmpeq>
 8010bc6:	b940      	cbnz	r0, 8010bda <kalman_3gyro.constprop.0+0x2fde>
 8010bc8:	4641      	mov	r1, r8
 8010bca:	4628      	mov	r0, r5
 8010bcc:	f7f0 f8f2 	bl	8000db4 <__aeabi_fmul>
 8010bd0:	4601      	mov	r1, r0
 8010bd2:	4620      	mov	r0, r4
 8010bd4:	f7ef ffe6 	bl	8000ba4 <__addsf3>
 8010bd8:	4604      	mov	r4, r0
 8010bda:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8010bde:	4651      	mov	r1, sl
 8010be0:	4640      	mov	r0, r8
 8010be2:	f7f0 fa7b 	bl	80010dc <__aeabi_fcmpeq>
 8010be6:	b980      	cbnz	r0, 8010c0a <kalman_3gyro.constprop.0+0x300e>
 8010be8:	9b00      	ldr	r3, [sp, #0]
 8010bea:	4651      	mov	r1, sl
 8010bec:	f8d3 51d0 	ldr.w	r5, [r3, #464]	; 0x1d0
 8010bf0:	4628      	mov	r0, r5
 8010bf2:	f7f0 fa73 	bl	80010dc <__aeabi_fcmpeq>
 8010bf6:	b940      	cbnz	r0, 8010c0a <kalman_3gyro.constprop.0+0x300e>
 8010bf8:	4641      	mov	r1, r8
 8010bfa:	4628      	mov	r0, r5
 8010bfc:	f7f0 f8da 	bl	8000db4 <__aeabi_fmul>
 8010c00:	4601      	mov	r1, r0
 8010c02:	4620      	mov	r0, r4
 8010c04:	f7ef ffce 	bl	8000ba4 <__addsf3>
 8010c08:	4604      	mov	r4, r0
 8010c0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c0c:	aa75      	add	r2, sp, #468	; 0x1d4
 8010c0e:	4621      	mov	r1, r4
 8010c10:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010c14:	f7ef ffc4 	bl	8000ba0 <__aeabi_fsub>
 8010c18:	900c      	str	r0, [sp, #48]	; 0x30
 8010c1a:	464d      	mov	r5, r9
 8010c1c:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8010c20:	2100      	movs	r1, #0
 8010c22:	4648      	mov	r0, r9
 8010c24:	f006 ff62 	bl	8017aec <memset>
 8010c28:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8010c2c:	f8cd 9020 	str.w	r9, [sp, #32]
 8010c30:	f856 4f04 	ldr.w	r4, [r6, #4]!
 8010c34:	4651      	mov	r1, sl
 8010c36:	4620      	mov	r0, r4
 8010c38:	f7f0 fa50 	bl	80010dc <__aeabi_fcmpeq>
 8010c3c:	2800      	cmp	r0, #0
 8010c3e:	f040 8088 	bne.w	8010d52 <kalman_3gyro.constprop.0+0x3156>
 8010c42:	4651      	mov	r1, sl
 8010c44:	4638      	mov	r0, r7
 8010c46:	f7f0 fa49 	bl	80010dc <__aeabi_fcmpeq>
 8010c4a:	b940      	cbnz	r0, 8010c5e <kalman_3gyro.constprop.0+0x3062>
 8010c4c:	4621      	mov	r1, r4
 8010c4e:	4638      	mov	r0, r7
 8010c50:	f7f0 f8b0 	bl	8000db4 <__aeabi_fmul>
 8010c54:	4601      	mov	r1, r0
 8010c56:	6828      	ldr	r0, [r5, #0]
 8010c58:	f7ef ffa4 	bl	8000ba4 <__addsf3>
 8010c5c:	6028      	str	r0, [r5, #0]
 8010c5e:	4651      	mov	r1, sl
 8010c60:	4658      	mov	r0, fp
 8010c62:	f7f0 fa3b 	bl	80010dc <__aeabi_fcmpeq>
 8010c66:	b940      	cbnz	r0, 8010c7a <kalman_3gyro.constprop.0+0x307e>
 8010c68:	4621      	mov	r1, r4
 8010c6a:	4658      	mov	r0, fp
 8010c6c:	f7f0 f8a2 	bl	8000db4 <__aeabi_fmul>
 8010c70:	4601      	mov	r1, r0
 8010c72:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8010c74:	f7ef ff96 	bl	8000ba4 <__addsf3>
 8010c78:	6268      	str	r0, [r5, #36]	; 0x24
 8010c7a:	4651      	mov	r1, sl
 8010c7c:	9801      	ldr	r0, [sp, #4]
 8010c7e:	f7f0 fa2d 	bl	80010dc <__aeabi_fcmpeq>
 8010c82:	b940      	cbnz	r0, 8010c96 <kalman_3gyro.constprop.0+0x309a>
 8010c84:	4621      	mov	r1, r4
 8010c86:	9801      	ldr	r0, [sp, #4]
 8010c88:	f7f0 f894 	bl	8000db4 <__aeabi_fmul>
 8010c8c:	4601      	mov	r1, r0
 8010c8e:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8010c90:	f7ef ff88 	bl	8000ba4 <__addsf3>
 8010c94:	64a8      	str	r0, [r5, #72]	; 0x48
 8010c96:	4651      	mov	r1, sl
 8010c98:	9802      	ldr	r0, [sp, #8]
 8010c9a:	f7f0 fa1f 	bl	80010dc <__aeabi_fcmpeq>
 8010c9e:	b940      	cbnz	r0, 8010cb2 <kalman_3gyro.constprop.0+0x30b6>
 8010ca0:	4621      	mov	r1, r4
 8010ca2:	9802      	ldr	r0, [sp, #8]
 8010ca4:	f7f0 f886 	bl	8000db4 <__aeabi_fmul>
 8010ca8:	4601      	mov	r1, r0
 8010caa:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8010cac:	f7ef ff7a 	bl	8000ba4 <__addsf3>
 8010cb0:	66e8      	str	r0, [r5, #108]	; 0x6c
 8010cb2:	4651      	mov	r1, sl
 8010cb4:	9803      	ldr	r0, [sp, #12]
 8010cb6:	f7f0 fa11 	bl	80010dc <__aeabi_fcmpeq>
 8010cba:	b950      	cbnz	r0, 8010cd2 <kalman_3gyro.constprop.0+0x30d6>
 8010cbc:	4621      	mov	r1, r4
 8010cbe:	9803      	ldr	r0, [sp, #12]
 8010cc0:	f7f0 f878 	bl	8000db4 <__aeabi_fmul>
 8010cc4:	4601      	mov	r1, r0
 8010cc6:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
 8010cca:	f7ef ff6b 	bl	8000ba4 <__addsf3>
 8010cce:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
 8010cd2:	4651      	mov	r1, sl
 8010cd4:	9804      	ldr	r0, [sp, #16]
 8010cd6:	f7f0 fa01 	bl	80010dc <__aeabi_fcmpeq>
 8010cda:	b950      	cbnz	r0, 8010cf2 <kalman_3gyro.constprop.0+0x30f6>
 8010cdc:	4621      	mov	r1, r4
 8010cde:	9804      	ldr	r0, [sp, #16]
 8010ce0:	f7f0 f868 	bl	8000db4 <__aeabi_fmul>
 8010ce4:	4601      	mov	r1, r0
 8010ce6:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
 8010cea:	f7ef ff5b 	bl	8000ba4 <__addsf3>
 8010cee:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
 8010cf2:	4651      	mov	r1, sl
 8010cf4:	9805      	ldr	r0, [sp, #20]
 8010cf6:	f7f0 f9f1 	bl	80010dc <__aeabi_fcmpeq>
 8010cfa:	b950      	cbnz	r0, 8010d12 <kalman_3gyro.constprop.0+0x3116>
 8010cfc:	4621      	mov	r1, r4
 8010cfe:	9805      	ldr	r0, [sp, #20]
 8010d00:	f7f0 f858 	bl	8000db4 <__aeabi_fmul>
 8010d04:	4601      	mov	r1, r0
 8010d06:	f8d5 00d8 	ldr.w	r0, [r5, #216]	; 0xd8
 8010d0a:	f7ef ff4b 	bl	8000ba4 <__addsf3>
 8010d0e:	f8c5 00d8 	str.w	r0, [r5, #216]	; 0xd8
 8010d12:	4651      	mov	r1, sl
 8010d14:	9806      	ldr	r0, [sp, #24]
 8010d16:	f7f0 f9e1 	bl	80010dc <__aeabi_fcmpeq>
 8010d1a:	b950      	cbnz	r0, 8010d32 <kalman_3gyro.constprop.0+0x3136>
 8010d1c:	4621      	mov	r1, r4
 8010d1e:	9806      	ldr	r0, [sp, #24]
 8010d20:	f7f0 f848 	bl	8000db4 <__aeabi_fmul>
 8010d24:	4601      	mov	r1, r0
 8010d26:	f8d5 00fc 	ldr.w	r0, [r5, #252]	; 0xfc
 8010d2a:	f7ef ff3b 	bl	8000ba4 <__addsf3>
 8010d2e:	f8c5 00fc 	str.w	r0, [r5, #252]	; 0xfc
 8010d32:	4651      	mov	r1, sl
 8010d34:	4640      	mov	r0, r8
 8010d36:	f7f0 f9d1 	bl	80010dc <__aeabi_fcmpeq>
 8010d3a:	b950      	cbnz	r0, 8010d52 <kalman_3gyro.constprop.0+0x3156>
 8010d3c:	4621      	mov	r1, r4
 8010d3e:	4640      	mov	r0, r8
 8010d40:	f7f0 f838 	bl	8000db4 <__aeabi_fmul>
 8010d44:	4601      	mov	r1, r0
 8010d46:	f8d5 0120 	ldr.w	r0, [r5, #288]	; 0x120
 8010d4a:	f7ef ff2b 	bl	8000ba4 <__addsf3>
 8010d4e:	f8c5 0120 	str.w	r0, [r5, #288]	; 0x120
 8010d52:	ab95      	add	r3, sp, #596	; 0x254
 8010d54:	42b3      	cmp	r3, r6
 8010d56:	f105 0504 	add.w	r5, r5, #4
 8010d5a:	f47f af69 	bne.w	8010c30 <kalman_3gyro.constprop.0+0x3034>
 8010d5e:	f20d 48bc 	addw	r8, sp, #1212	; 0x4bc
 8010d62:	4646      	mov	r6, r8
 8010d64:	2508      	movs	r5, #8
 8010d66:	2700      	movs	r7, #0
 8010d68:	9c08      	ldr	r4, [sp, #32]
 8010d6a:	e063      	b.n	8010e34 <kalman_3gyro.constprop.0+0x3238>
 8010d6c:	6823      	ldr	r3, [r4, #0]
 8010d6e:	2f01      	cmp	r7, #1
 8010d70:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010d74:	f8c6 a004 	str.w	sl, [r6, #4]
 8010d78:	6023      	str	r3, [r4, #0]
 8010d7a:	f1a5 0207 	sub.w	r2, r5, #7
 8010d7e:	f000 82d7 	beq.w	8011330 <kalman_3gyro.constprop.0+0x3734>
 8010d82:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8010d86:	2f02      	cmp	r7, #2
 8010d88:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010d8c:	f849 3022 	str.w	r3, [r9, r2, lsl #2]
 8010d90:	f8c6 a008 	str.w	sl, [r6, #8]
 8010d94:	f1a5 0206 	sub.w	r2, r5, #6
 8010d98:	f000 82b7 	beq.w	801130a <kalman_3gyro.constprop.0+0x370e>
 8010d9c:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8010da0:	2f03      	cmp	r7, #3
 8010da2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010da6:	f849 3022 	str.w	r3, [r9, r2, lsl #2]
 8010daa:	f8c6 a00c 	str.w	sl, [r6, #12]
 8010dae:	f1a5 0205 	sub.w	r2, r5, #5
 8010db2:	d15f      	bne.n	8010e74 <kalman_3gyro.constprop.0+0x3278>
 8010db4:	68e1      	ldr	r1, [r4, #12]
 8010db6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8010dba:	f7ef fef1 	bl	8000ba0 <__aeabi_fsub>
 8010dbe:	1f2a      	subs	r2, r5, #4
 8010dc0:	60e0      	str	r0, [r4, #12]
 8010dc2:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8010dc6:	f8c6 a010 	str.w	sl, [r6, #16]
 8010dca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010dce:	f849 3022 	str.w	r3, [r9, r2, lsl #2]
 8010dd2:	1eea      	subs	r2, r5, #3
 8010dd4:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8010dd8:	f8c6 a014 	str.w	sl, [r6, #20]
 8010ddc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010de0:	f849 3022 	str.w	r3, [r9, r2, lsl #2]
 8010de4:	f8c6 a018 	str.w	sl, [r6, #24]
 8010de8:	1eaa      	subs	r2, r5, #2
 8010dea:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8010dee:	2f07      	cmp	r7, #7
 8010df0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010df4:	f849 3022 	str.w	r3, [r9, r2, lsl #2]
 8010df8:	f8c6 a01c 	str.w	sl, [r6, #28]
 8010dfc:	f105 32ff 	add.w	r2, r5, #4294967295
 8010e00:	f040 808a 	bne.w	8010f18 <kalman_3gyro.constprop.0+0x331c>
 8010e04:	69e1      	ldr	r1, [r4, #28]
 8010e06:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8010e0a:	f7ef fec9 	bl	8000ba0 <__aeabi_fsub>
 8010e0e:	f8c6 a020 	str.w	sl, [r6, #32]
 8010e12:	61e0      	str	r0, [r4, #28]
 8010e14:	f859 3025 	ldr.w	r3, [r9, r5, lsl #2]
 8010e18:	3701      	adds	r7, #1
 8010e1a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010e1e:	2f09      	cmp	r7, #9
 8010e20:	f849 3025 	str.w	r3, [r9, r5, lsl #2]
 8010e24:	f106 0624 	add.w	r6, r6, #36	; 0x24
 8010e28:	f104 0424 	add.w	r4, r4, #36	; 0x24
 8010e2c:	f105 0509 	add.w	r5, r5, #9
 8010e30:	f000 8084 	beq.w	8010f3c <kalman_3gyro.constprop.0+0x3340>
 8010e34:	f8c6 a000 	str.w	sl, [r6]
 8010e38:	2f00      	cmp	r7, #0
 8010e3a:	d197      	bne.n	8010d6c <kalman_3gyro.constprop.0+0x3170>
 8010e3c:	f8d9 1000 	ldr.w	r1, [r9]
 8010e40:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8010e44:	f7ef feac 	bl	8000ba0 <__aeabi_fsub>
 8010e48:	1fea      	subs	r2, r5, #7
 8010e4a:	6020      	str	r0, [r4, #0]
 8010e4c:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8010e50:	f8c6 a004 	str.w	sl, [r6, #4]
 8010e54:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010e58:	f849 3022 	str.w	r3, [r9, r2, lsl #2]
 8010e5c:	1faa      	subs	r2, r5, #6
 8010e5e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8010e62:	f8c6 a008 	str.w	sl, [r6, #8]
 8010e66:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010e6a:	f849 3022 	str.w	r3, [r9, r2, lsl #2]
 8010e6e:	f8c6 a00c 	str.w	sl, [r6, #12]
 8010e72:	1f6a      	subs	r2, r5, #5
 8010e74:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8010e78:	2f04      	cmp	r7, #4
 8010e7a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010e7e:	f849 3022 	str.w	r3, [r9, r2, lsl #2]
 8010e82:	f8c6 a010 	str.w	sl, [r6, #16]
 8010e86:	f1a5 0204 	sub.w	r2, r5, #4
 8010e8a:	d02a      	beq.n	8010ee2 <kalman_3gyro.constprop.0+0x32e6>
 8010e8c:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8010e90:	2f05      	cmp	r7, #5
 8010e92:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010e96:	f849 3022 	str.w	r3, [r9, r2, lsl #2]
 8010e9a:	f8c6 a014 	str.w	sl, [r6, #20]
 8010e9e:	f1a5 0203 	sub.w	r2, r5, #3
 8010ea2:	f000 8221 	beq.w	80112e8 <kalman_3gyro.constprop.0+0x36ec>
 8010ea6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8010eaa:	2f06      	cmp	r7, #6
 8010eac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010eb0:	f849 3022 	str.w	r3, [r9, r2, lsl #2]
 8010eb4:	f8c6 a018 	str.w	sl, [r6, #24]
 8010eb8:	f1a5 0202 	sub.w	r2, r5, #2
 8010ebc:	d195      	bne.n	8010dea <kalman_3gyro.constprop.0+0x31ee>
 8010ebe:	69a1      	ldr	r1, [r4, #24]
 8010ec0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8010ec4:	f7ef fe6c 	bl	8000ba0 <__aeabi_fsub>
 8010ec8:	1e6a      	subs	r2, r5, #1
 8010eca:	61a0      	str	r0, [r4, #24]
 8010ecc:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8010ed0:	f8c6 a01c 	str.w	sl, [r6, #28]
 8010ed4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010ed8:	f8c6 a020 	str.w	sl, [r6, #32]
 8010edc:	f849 3022 	str.w	r3, [r9, r2, lsl #2]
 8010ee0:	e798      	b.n	8010e14 <kalman_3gyro.constprop.0+0x3218>
 8010ee2:	6921      	ldr	r1, [r4, #16]
 8010ee4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8010ee8:	f7ef fe5a 	bl	8000ba0 <__aeabi_fsub>
 8010eec:	1eea      	subs	r2, r5, #3
 8010eee:	6120      	str	r0, [r4, #16]
 8010ef0:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8010ef4:	f8c6 a014 	str.w	sl, [r6, #20]
 8010ef8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010efc:	f849 3022 	str.w	r3, [r9, r2, lsl #2]
 8010f00:	1eaa      	subs	r2, r5, #2
 8010f02:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8010f06:	f8c6 a018 	str.w	sl, [r6, #24]
 8010f0a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010f0e:	f849 3022 	str.w	r3, [r9, r2, lsl #2]
 8010f12:	f8c6 a01c 	str.w	sl, [r6, #28]
 8010f16:	1e6a      	subs	r2, r5, #1
 8010f18:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8010f1c:	2f08      	cmp	r7, #8
 8010f1e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010f22:	f8c6 a020 	str.w	sl, [r6, #32]
 8010f26:	f849 3022 	str.w	r3, [r9, r2, lsl #2]
 8010f2a:	f47f af73 	bne.w	8010e14 <kalman_3gyro.constprop.0+0x3218>
 8010f2e:	6a21      	ldr	r1, [r4, #32]
 8010f30:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8010f34:	f7ef fe34 	bl	8000ba0 <__aeabi_fsub>
 8010f38:	f849 0025 	str.w	r0, [r9, r5, lsl #2]
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	aedd      	add	r6, sp, #884	; 0x374
 8010f40:	9308      	str	r3, [sp, #32]
 8010f42:	f856 3f04 	ldr.w	r3, [r6, #4]!
 8010f46:	2500      	movs	r5, #0
 8010f48:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8010f4a:	f8d6 b0fc 	ldr.w	fp, [r6, #252]	; 0xfc
 8010f4e:	9201      	str	r2, [sp, #4]
 8010f50:	6cb2      	ldr	r2, [r6, #72]	; 0x48
 8010f52:	f8d6 7120 	ldr.w	r7, [r6, #288]	; 0x120
 8010f56:	9202      	str	r2, [sp, #8]
 8010f58:	6ef2      	ldr	r2, [r6, #108]	; 0x6c
 8010f5a:	9609      	str	r6, [sp, #36]	; 0x24
 8010f5c:	9203      	str	r2, [sp, #12]
 8010f5e:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8010f62:	9c00      	ldr	r4, [sp, #0]
 8010f64:	9204      	str	r2, [sp, #16]
 8010f66:	f8d6 20b4 	ldr.w	r2, [r6, #180]	; 0xb4
 8010f6a:	9205      	str	r2, [sp, #20]
 8010f6c:	f8d6 20d8 	ldr.w	r2, [r6, #216]	; 0xd8
 8010f70:	461e      	mov	r6, r3
 8010f72:	9206      	str	r2, [sp, #24]
 8010f74:	4651      	mov	r1, sl
 8010f76:	4630      	mov	r0, r6
 8010f78:	f7f0 f8b0 	bl	80010dc <__aeabi_fcmpeq>
 8010f7c:	b998      	cbnz	r0, 8010fa6 <kalman_3gyro.constprop.0+0x33aa>
 8010f7e:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 8010f82:	4651      	mov	r1, sl
 8010f84:	4618      	mov	r0, r3
 8010f86:	9307      	str	r3, [sp, #28]
 8010f88:	f7f0 f8a8 	bl	80010dc <__aeabi_fcmpeq>
 8010f8c:	b958      	cbnz	r0, 8010fa6 <kalman_3gyro.constprop.0+0x33aa>
 8010f8e:	9b07      	ldr	r3, [sp, #28]
 8010f90:	4630      	mov	r0, r6
 8010f92:	4619      	mov	r1, r3
 8010f94:	f7ef ff0e 	bl	8000db4 <__aeabi_fmul>
 8010f98:	4601      	mov	r1, r0
 8010f9a:	f858 0005 	ldr.w	r0, [r8, r5]
 8010f9e:	f7ef fe01 	bl	8000ba4 <__addsf3>
 8010fa2:	f848 0005 	str.w	r0, [r8, r5]
 8010fa6:	4651      	mov	r1, sl
 8010fa8:	9801      	ldr	r0, [sp, #4]
 8010faa:	f7f0 f897 	bl	80010dc <__aeabi_fcmpeq>
 8010fae:	b998      	cbnz	r0, 8010fd8 <kalman_3gyro.constprop.0+0x33dc>
 8010fb0:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
 8010fb4:	4651      	mov	r1, sl
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	9307      	str	r3, [sp, #28]
 8010fba:	f7f0 f88f 	bl	80010dc <__aeabi_fcmpeq>
 8010fbe:	b958      	cbnz	r0, 8010fd8 <kalman_3gyro.constprop.0+0x33dc>
 8010fc0:	9b07      	ldr	r3, [sp, #28]
 8010fc2:	9801      	ldr	r0, [sp, #4]
 8010fc4:	4619      	mov	r1, r3
 8010fc6:	f7ef fef5 	bl	8000db4 <__aeabi_fmul>
 8010fca:	4601      	mov	r1, r0
 8010fcc:	f858 0005 	ldr.w	r0, [r8, r5]
 8010fd0:	f7ef fde8 	bl	8000ba4 <__addsf3>
 8010fd4:	f848 0005 	str.w	r0, [r8, r5]
 8010fd8:	4651      	mov	r1, sl
 8010fda:	9802      	ldr	r0, [sp, #8]
 8010fdc:	f7f0 f87e 	bl	80010dc <__aeabi_fcmpeq>
 8010fe0:	b998      	cbnz	r0, 801100a <kalman_3gyro.constprop.0+0x340e>
 8010fe2:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
 8010fe6:	4651      	mov	r1, sl
 8010fe8:	4618      	mov	r0, r3
 8010fea:	9307      	str	r3, [sp, #28]
 8010fec:	f7f0 f876 	bl	80010dc <__aeabi_fcmpeq>
 8010ff0:	b958      	cbnz	r0, 801100a <kalman_3gyro.constprop.0+0x340e>
 8010ff2:	9b07      	ldr	r3, [sp, #28]
 8010ff4:	9802      	ldr	r0, [sp, #8]
 8010ff6:	4619      	mov	r1, r3
 8010ff8:	f7ef fedc 	bl	8000db4 <__aeabi_fmul>
 8010ffc:	4601      	mov	r1, r0
 8010ffe:	f858 0005 	ldr.w	r0, [r8, r5]
 8011002:	f7ef fdcf 	bl	8000ba4 <__addsf3>
 8011006:	f848 0005 	str.w	r0, [r8, r5]
 801100a:	4651      	mov	r1, sl
 801100c:	9803      	ldr	r0, [sp, #12]
 801100e:	f7f0 f865 	bl	80010dc <__aeabi_fcmpeq>
 8011012:	b998      	cbnz	r0, 801103c <kalman_3gyro.constprop.0+0x3440>
 8011014:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 8011018:	4651      	mov	r1, sl
 801101a:	4618      	mov	r0, r3
 801101c:	9307      	str	r3, [sp, #28]
 801101e:	f7f0 f85d 	bl	80010dc <__aeabi_fcmpeq>
 8011022:	b958      	cbnz	r0, 801103c <kalman_3gyro.constprop.0+0x3440>
 8011024:	9b07      	ldr	r3, [sp, #28]
 8011026:	9803      	ldr	r0, [sp, #12]
 8011028:	4619      	mov	r1, r3
 801102a:	f7ef fec3 	bl	8000db4 <__aeabi_fmul>
 801102e:	4601      	mov	r1, r0
 8011030:	f858 0005 	ldr.w	r0, [r8, r5]
 8011034:	f7ef fdb6 	bl	8000ba4 <__addsf3>
 8011038:	f848 0005 	str.w	r0, [r8, r5]
 801103c:	4651      	mov	r1, sl
 801103e:	9804      	ldr	r0, [sp, #16]
 8011040:	f7f0 f84c 	bl	80010dc <__aeabi_fcmpeq>
 8011044:	b998      	cbnz	r0, 801106e <kalman_3gyro.constprop.0+0x3472>
 8011046:	f8d4 31e4 	ldr.w	r3, [r4, #484]	; 0x1e4
 801104a:	4651      	mov	r1, sl
 801104c:	4618      	mov	r0, r3
 801104e:	9307      	str	r3, [sp, #28]
 8011050:	f7f0 f844 	bl	80010dc <__aeabi_fcmpeq>
 8011054:	b958      	cbnz	r0, 801106e <kalman_3gyro.constprop.0+0x3472>
 8011056:	9b07      	ldr	r3, [sp, #28]
 8011058:	9804      	ldr	r0, [sp, #16]
 801105a:	4619      	mov	r1, r3
 801105c:	f7ef feaa 	bl	8000db4 <__aeabi_fmul>
 8011060:	4601      	mov	r1, r0
 8011062:	f858 0005 	ldr.w	r0, [r8, r5]
 8011066:	f7ef fd9d 	bl	8000ba4 <__addsf3>
 801106a:	f848 0005 	str.w	r0, [r8, r5]
 801106e:	4651      	mov	r1, sl
 8011070:	9805      	ldr	r0, [sp, #20]
 8011072:	f7f0 f833 	bl	80010dc <__aeabi_fcmpeq>
 8011076:	b998      	cbnz	r0, 80110a0 <kalman_3gyro.constprop.0+0x34a4>
 8011078:	f8d4 31e8 	ldr.w	r3, [r4, #488]	; 0x1e8
 801107c:	4651      	mov	r1, sl
 801107e:	4618      	mov	r0, r3
 8011080:	9307      	str	r3, [sp, #28]
 8011082:	f7f0 f82b 	bl	80010dc <__aeabi_fcmpeq>
 8011086:	b958      	cbnz	r0, 80110a0 <kalman_3gyro.constprop.0+0x34a4>
 8011088:	9b07      	ldr	r3, [sp, #28]
 801108a:	9805      	ldr	r0, [sp, #20]
 801108c:	4619      	mov	r1, r3
 801108e:	f7ef fe91 	bl	8000db4 <__aeabi_fmul>
 8011092:	4601      	mov	r1, r0
 8011094:	f858 0005 	ldr.w	r0, [r8, r5]
 8011098:	f7ef fd84 	bl	8000ba4 <__addsf3>
 801109c:	f848 0005 	str.w	r0, [r8, r5]
 80110a0:	4651      	mov	r1, sl
 80110a2:	9806      	ldr	r0, [sp, #24]
 80110a4:	f7f0 f81a 	bl	80010dc <__aeabi_fcmpeq>
 80110a8:	b998      	cbnz	r0, 80110d2 <kalman_3gyro.constprop.0+0x34d6>
 80110aa:	f8d4 31ec 	ldr.w	r3, [r4, #492]	; 0x1ec
 80110ae:	4651      	mov	r1, sl
 80110b0:	4618      	mov	r0, r3
 80110b2:	9307      	str	r3, [sp, #28]
 80110b4:	f7f0 f812 	bl	80010dc <__aeabi_fcmpeq>
 80110b8:	b958      	cbnz	r0, 80110d2 <kalman_3gyro.constprop.0+0x34d6>
 80110ba:	9b07      	ldr	r3, [sp, #28]
 80110bc:	9806      	ldr	r0, [sp, #24]
 80110be:	4619      	mov	r1, r3
 80110c0:	f7ef fe78 	bl	8000db4 <__aeabi_fmul>
 80110c4:	4601      	mov	r1, r0
 80110c6:	f858 0005 	ldr.w	r0, [r8, r5]
 80110ca:	f7ef fd6b 	bl	8000ba4 <__addsf3>
 80110ce:	f848 0005 	str.w	r0, [r8, r5]
 80110d2:	4651      	mov	r1, sl
 80110d4:	4658      	mov	r0, fp
 80110d6:	f7f0 f801 	bl	80010dc <__aeabi_fcmpeq>
 80110da:	b998      	cbnz	r0, 8011104 <kalman_3gyro.constprop.0+0x3508>
 80110dc:	f8d4 31f0 	ldr.w	r3, [r4, #496]	; 0x1f0
 80110e0:	4651      	mov	r1, sl
 80110e2:	4618      	mov	r0, r3
 80110e4:	9307      	str	r3, [sp, #28]
 80110e6:	f7ef fff9 	bl	80010dc <__aeabi_fcmpeq>
 80110ea:	b958      	cbnz	r0, 8011104 <kalman_3gyro.constprop.0+0x3508>
 80110ec:	9b07      	ldr	r3, [sp, #28]
 80110ee:	4658      	mov	r0, fp
 80110f0:	4619      	mov	r1, r3
 80110f2:	f7ef fe5f 	bl	8000db4 <__aeabi_fmul>
 80110f6:	4601      	mov	r1, r0
 80110f8:	f858 0005 	ldr.w	r0, [r8, r5]
 80110fc:	f7ef fd52 	bl	8000ba4 <__addsf3>
 8011100:	f848 0005 	str.w	r0, [r8, r5]
 8011104:	4651      	mov	r1, sl
 8011106:	4638      	mov	r0, r7
 8011108:	f7ef ffe8 	bl	80010dc <__aeabi_fcmpeq>
 801110c:	b998      	cbnz	r0, 8011136 <kalman_3gyro.constprop.0+0x353a>
 801110e:	f8d4 31f4 	ldr.w	r3, [r4, #500]	; 0x1f4
 8011112:	4651      	mov	r1, sl
 8011114:	4618      	mov	r0, r3
 8011116:	9307      	str	r3, [sp, #28]
 8011118:	f7ef ffe0 	bl	80010dc <__aeabi_fcmpeq>
 801111c:	b958      	cbnz	r0, 8011136 <kalman_3gyro.constprop.0+0x353a>
 801111e:	9b07      	ldr	r3, [sp, #28]
 8011120:	4638      	mov	r0, r7
 8011122:	4619      	mov	r1, r3
 8011124:	f7ef fe46 	bl	8000db4 <__aeabi_fmul>
 8011128:	4601      	mov	r1, r0
 801112a:	f858 0005 	ldr.w	r0, [r8, r5]
 801112e:	f7ef fd39 	bl	8000ba4 <__addsf3>
 8011132:	f848 0005 	str.w	r0, [r8, r5]
 8011136:	3524      	adds	r5, #36	; 0x24
 8011138:	f5b5 7fa2 	cmp.w	r5, #324	; 0x144
 801113c:	f104 0424 	add.w	r4, r4, #36	; 0x24
 8011140:	f47f af18 	bne.w	8010f74 <kalman_3gyro.constprop.0+0x3378>
 8011144:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8011148:	3301      	adds	r3, #1
 801114a:	2b09      	cmp	r3, #9
 801114c:	9308      	str	r3, [sp, #32]
 801114e:	f108 0804 	add.w	r8, r8, #4
 8011152:	f47f aef6 	bne.w	8010f42 <kalman_3gyro.constprop.0+0x3346>
 8011156:	f20d 41bc 	addw	r1, sp, #1212	; 0x4bc
 801115a:	462a      	mov	r2, r5
 801115c:	9818      	ldr	r0, [sp, #96]	; 0x60
 801115e:	f006 fcb7 	bl	8017ad0 <memcpy>
 8011162:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8011164:	4651      	mov	r1, sl
 8011166:	4620      	mov	r0, r4
 8011168:	f7ef ffb8 	bl	80010dc <__aeabi_fcmpeq>
 801116c:	2800      	cmp	r0, #0
 801116e:	f040 811a 	bne.w	80113a6 <kalman_3gyro.constprop.0+0x37aa>
 8011172:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011174:	4651      	mov	r1, sl
 8011176:	4628      	mov	r0, r5
 8011178:	f7ef ffb0 	bl	80010dc <__aeabi_fcmpeq>
 801117c:	2800      	cmp	r0, #0
 801117e:	f040 8112 	bne.w	80113a6 <kalman_3gyro.constprop.0+0x37aa>
 8011182:	4621      	mov	r1, r4
 8011184:	4628      	mov	r0, r5
 8011186:	f7ef fe15 	bl	8000db4 <__aeabi_fmul>
 801118a:	4651      	mov	r1, sl
 801118c:	4604      	mov	r4, r0
 801118e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8011190:	f7ef ffa4 	bl	80010dc <__aeabi_fcmpeq>
 8011194:	2800      	cmp	r0, #0
 8011196:	f000 8299 	beq.w	80116cc <kalman_3gyro.constprop.0+0x3ad0>
 801119a:	4651      	mov	r1, sl
 801119c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801119e:	f7ef ff9d 	bl	80010dc <__aeabi_fcmpeq>
 80111a2:	2800      	cmp	r0, #0
 80111a4:	f040 810f 	bne.w	80113c6 <kalman_3gyro.constprop.0+0x37ca>
 80111a8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80111aa:	980c      	ldr	r0, [sp, #48]	; 0x30
 80111ac:	f7ef fe02 	bl	8000db4 <__aeabi_fmul>
 80111b0:	4651      	mov	r1, sl
 80111b2:	4606      	mov	r6, r0
 80111b4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80111b6:	f7ef ff91 	bl	80010dc <__aeabi_fcmpeq>
 80111ba:	2800      	cmp	r0, #0
 80111bc:	f000 80c0 	beq.w	8011340 <kalman_3gyro.constprop.0+0x3744>
 80111c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80111c2:	9610      	str	r6, [sp, #64]	; 0x40
 80111c4:	930e      	str	r3, [sp, #56]	; 0x38
 80111c6:	4651      	mov	r1, sl
 80111c8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80111ca:	f7ef ff87 	bl	80010dc <__aeabi_fcmpeq>
 80111ce:	2800      	cmp	r0, #0
 80111d0:	f040 80c6 	bne.w	8011360 <kalman_3gyro.constprop.0+0x3764>
 80111d4:	4651      	mov	r1, sl
 80111d6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80111d8:	f7ef ff80 	bl	80010dc <__aeabi_fcmpeq>
 80111dc:	2800      	cmp	r0, #0
 80111de:	f040 82fa 	bne.w	80117d6 <kalman_3gyro.constprop.0+0x3bda>
 80111e2:	4655      	mov	r5, sl
 80111e4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80111e6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80111e8:	f7ef fde4 	bl	8000db4 <__aeabi_fmul>
 80111ec:	4651      	mov	r1, sl
 80111ee:	4606      	mov	r6, r0
 80111f0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80111f2:	f7ef ff73 	bl	80010dc <__aeabi_fcmpeq>
 80111f6:	2800      	cmp	r0, #0
 80111f8:	f000 8190 	beq.w	801151c <kalman_3gyro.constprop.0+0x3920>
 80111fc:	9611      	str	r6, [sp, #68]	; 0x44
 80111fe:	9513      	str	r5, [sp, #76]	; 0x4c
 8011200:	4651      	mov	r1, sl
 8011202:	9814      	ldr	r0, [sp, #80]	; 0x50
 8011204:	f7ef ff6a 	bl	80010dc <__aeabi_fcmpeq>
 8011208:	2800      	cmp	r0, #0
 801120a:	f040 8196 	bne.w	801153a <kalman_3gyro.constprop.0+0x393e>
 801120e:	4651      	mov	r1, sl
 8011210:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011212:	f7ef ff63 	bl	80010dc <__aeabi_fcmpeq>
 8011216:	2800      	cmp	r0, #0
 8011218:	f040 80b2 	bne.w	8011380 <kalman_3gyro.constprop.0+0x3784>
 801121c:	4655      	mov	r5, sl
 801121e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8011220:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011222:	f7ef fdc7 	bl	8000db4 <__aeabi_fmul>
 8011226:	4651      	mov	r1, sl
 8011228:	4606      	mov	r6, r0
 801122a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801122c:	f7ef ff56 	bl	80010dc <__aeabi_fcmpeq>
 8011230:	2800      	cmp	r0, #0
 8011232:	f000 82ca 	beq.w	80117ca <kalman_3gyro.constprop.0+0x3bce>
 8011236:	9612      	str	r6, [sp, #72]	; 0x48
 8011238:	9514      	str	r5, [sp, #80]	; 0x50
 801123a:	4651      	mov	r1, sl
 801123c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801123e:	f7ef ff4d 	bl	80010dc <__aeabi_fcmpeq>
 8011242:	2800      	cmp	r0, #0
 8011244:	f040 80ac 	bne.w	80113a0 <kalman_3gyro.constprop.0+0x37a4>
 8011248:	4651      	mov	r1, sl
 801124a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801124c:	f7ef ff46 	bl	80010dc <__aeabi_fcmpeq>
 8011250:	2800      	cmp	r0, #0
 8011252:	f040 82b5 	bne.w	80117c0 <kalman_3gyro.constprop.0+0x3bc4>
 8011256:	4655      	mov	r5, sl
 8011258:	990c      	ldr	r1, [sp, #48]	; 0x30
 801125a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801125c:	f7ef fdaa 	bl	8000db4 <__aeabi_fmul>
 8011260:	950c      	str	r5, [sp, #48]	; 0x30
 8011262:	900f      	str	r0, [sp, #60]	; 0x3c
 8011264:	4621      	mov	r1, r4
 8011266:	9c00      	ldr	r4, [sp, #0]
 8011268:	f8d4 01b0 	ldr.w	r0, [r4, #432]	; 0x1b0
 801126c:	f7ef fc9a 	bl	8000ba4 <__addsf3>
 8011270:	990e      	ldr	r1, [sp, #56]	; 0x38
 8011272:	f8c4 01b0 	str.w	r0, [r4, #432]	; 0x1b0
 8011276:	f8d4 01b4 	ldr.w	r0, [r4, #436]	; 0x1b4
 801127a:	f7ef fc93 	bl	8000ba4 <__addsf3>
 801127e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8011280:	f8c4 01b4 	str.w	r0, [r4, #436]	; 0x1b4
 8011284:	f8d4 01b8 	ldr.w	r0, [r4, #440]	; 0x1b8
 8011288:	f7ef fc8c 	bl	8000ba4 <__addsf3>
 801128c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801128e:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
 8011292:	f8d4 01bc 	ldr.w	r0, [r4, #444]	; 0x1bc
 8011296:	f7ef fc85 	bl	8000ba4 <__addsf3>
 801129a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801129c:	f8c4 01bc 	str.w	r0, [r4, #444]	; 0x1bc
 80112a0:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
 80112a4:	f7ef fc7e 	bl	8000ba4 <__addsf3>
 80112a8:	9914      	ldr	r1, [sp, #80]	; 0x50
 80112aa:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
 80112ae:	f8d4 01c4 	ldr.w	r0, [r4, #452]	; 0x1c4
 80112b2:	f7ef fc77 	bl	8000ba4 <__addsf3>
 80112b6:	9912      	ldr	r1, [sp, #72]	; 0x48
 80112b8:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
 80112bc:	f8d4 01c8 	ldr.w	r0, [r4, #456]	; 0x1c8
 80112c0:	f7ef fc70 	bl	8000ba4 <__addsf3>
 80112c4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80112c6:	f8c4 01c8 	str.w	r0, [r4, #456]	; 0x1c8
 80112ca:	f8d4 01cc 	ldr.w	r0, [r4, #460]	; 0x1cc
 80112ce:	f7ef fc69 	bl	8000ba4 <__addsf3>
 80112d2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80112d4:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
 80112d8:	f8d4 01d0 	ldr.w	r0, [r4, #464]	; 0x1d0
 80112dc:	f7ef fc62 	bl	8000ba4 <__addsf3>
 80112e0:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0
 80112e4:	f7ff b9fe 	b.w	80106e4 <kalman_3gyro.constprop.0+0x2ae8>
 80112e8:	6961      	ldr	r1, [r4, #20]
 80112ea:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80112ee:	f7ef fc57 	bl	8000ba0 <__aeabi_fsub>
 80112f2:	1eaa      	subs	r2, r5, #2
 80112f4:	6160      	str	r0, [r4, #20]
 80112f6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80112fa:	f8c6 a018 	str.w	sl, [r6, #24]
 80112fe:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011302:	f849 3022 	str.w	r3, [r9, r2, lsl #2]
 8011306:	1e6a      	subs	r2, r5, #1
 8011308:	e5e0      	b.n	8010ecc <kalman_3gyro.constprop.0+0x32d0>
 801130a:	68a1      	ldr	r1, [r4, #8]
 801130c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8011310:	f7ef fc46 	bl	8000ba0 <__aeabi_fsub>
 8011314:	1f6a      	subs	r2, r5, #5
 8011316:	60a0      	str	r0, [r4, #8]
 8011318:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801131c:	f8c6 a00c 	str.w	sl, [r6, #12]
 8011320:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011324:	f849 3022 	str.w	r3, [r9, r2, lsl #2]
 8011328:	f8c6 a010 	str.w	sl, [r6, #16]
 801132c:	1f2a      	subs	r2, r5, #4
 801132e:	e5ad      	b.n	8010e8c <kalman_3gyro.constprop.0+0x3290>
 8011330:	6861      	ldr	r1, [r4, #4]
 8011332:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8011336:	f7ef fc33 	bl	8000ba0 <__aeabi_fsub>
 801133a:	1faa      	subs	r2, r5, #6
 801133c:	6060      	str	r0, [r4, #4]
 801133e:	e58e      	b.n	8010e5e <kalman_3gyro.constprop.0+0x3262>
 8011340:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011342:	930e      	str	r3, [sp, #56]	; 0x38
 8011344:	9910      	ldr	r1, [sp, #64]	; 0x40
 8011346:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011348:	f7ef fd34 	bl	8000db4 <__aeabi_fmul>
 801134c:	4651      	mov	r1, sl
 801134e:	4605      	mov	r5, r0
 8011350:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8011352:	f7ef fec3 	bl	80010dc <__aeabi_fcmpeq>
 8011356:	2800      	cmp	r0, #0
 8011358:	f000 8230 	beq.w	80117bc <kalman_3gyro.constprop.0+0x3bc0>
 801135c:	9513      	str	r5, [sp, #76]	; 0x4c
 801135e:	9610      	str	r6, [sp, #64]	; 0x40
 8011360:	4651      	mov	r1, sl
 8011362:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011364:	f7ef feba 	bl	80010dc <__aeabi_fcmpeq>
 8011368:	2800      	cmp	r0, #0
 801136a:	f47f af49 	bne.w	8011200 <kalman_3gyro.constprop.0+0x3604>
 801136e:	4651      	mov	r1, sl
 8011370:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011372:	f7ef feb3 	bl	80010dc <__aeabi_fcmpeq>
 8011376:	2800      	cmp	r0, #0
 8011378:	f000 8229 	beq.w	80117ce <kalman_3gyro.constprop.0+0x3bd2>
 801137c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801137e:	9311      	str	r3, [sp, #68]	; 0x44
 8011380:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8011382:	4651      	mov	r1, sl
 8011384:	4628      	mov	r0, r5
 8011386:	f7ef fea9 	bl	80010dc <__aeabi_fcmpeq>
 801138a:	2800      	cmp	r0, #0
 801138c:	f000 81b6 	beq.w	80116fc <kalman_3gyro.constprop.0+0x3b00>
 8011390:	4651      	mov	r1, sl
 8011392:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8011394:	9514      	str	r5, [sp, #80]	; 0x50
 8011396:	f7ef fea1 	bl	80010dc <__aeabi_fcmpeq>
 801139a:	2800      	cmp	r0, #0
 801139c:	f43f af54 	beq.w	8011248 <kalman_3gyro.constprop.0+0x364c>
 80113a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80113a2:	930c      	str	r3, [sp, #48]	; 0x30
 80113a4:	e75e      	b.n	8011264 <kalman_3gyro.constprop.0+0x3668>
 80113a6:	4651      	mov	r1, sl
 80113a8:	9815      	ldr	r0, [sp, #84]	; 0x54
 80113aa:	f7ef fe97 	bl	80010dc <__aeabi_fcmpeq>
 80113ae:	4651      	mov	r1, sl
 80113b0:	2800      	cmp	r0, #0
 80113b2:	f040 80a4 	bne.w	80114fe <kalman_3gyro.constprop.0+0x3902>
 80113b6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80113b8:	f7ef fe90 	bl	80010dc <__aeabi_fcmpeq>
 80113bc:	2800      	cmp	r0, #0
 80113be:	f000 8184 	beq.w	80116ca <kalman_3gyro.constprop.0+0x3ace>
 80113c2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80113c4:	940e      	str	r4, [sp, #56]	; 0x38
 80113c6:	4651      	mov	r1, sl
 80113c8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80113ca:	f7ef fe87 	bl	80010dc <__aeabi_fcmpeq>
 80113ce:	2800      	cmp	r0, #0
 80113d0:	f47f aef9 	bne.w	80111c6 <kalman_3gyro.constprop.0+0x35ca>
 80113d4:	4651      	mov	r1, sl
 80113d6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80113d8:	f7ef fe80 	bl	80010dc <__aeabi_fcmpeq>
 80113dc:	2800      	cmp	r0, #0
 80113de:	f000 81f8 	beq.w	80117d2 <kalman_3gyro.constprop.0+0x3bd6>
 80113e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80113e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80113e6:	9310      	str	r3, [sp, #64]	; 0x40
 80113e8:	e7ba      	b.n	8011360 <kalman_3gyro.constprop.0+0x3764>
 80113ea:	aa75      	add	r2, sp, #468	; 0x1d4
 80113ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80113f0:	930c      	str	r3, [sp, #48]	; 0x30
 80113f2:	e412      	b.n	8010c1a <kalman_3gyro.constprop.0+0x301e>
 80113f4:	4651      	mov	r1, sl
 80113f6:	4618      	mov	r0, r3
 80113f8:	9308      	str	r3, [sp, #32]
 80113fa:	f7ef fe6f 	bl	80010dc <__aeabi_fcmpeq>
 80113fe:	2800      	cmp	r0, #0
 8011400:	f47f aac9 	bne.w	8010996 <kalman_3gyro.constprop.0+0x2d9a>
 8011404:	9906      	ldr	r1, [sp, #24]
 8011406:	9808      	ldr	r0, [sp, #32]
 8011408:	f7ef fcd4 	bl	8000db4 <__aeabi_fmul>
 801140c:	4601      	mov	r1, r0
 801140e:	4620      	mov	r0, r4
 8011410:	f7ef fbc8 	bl	8000ba4 <__addsf3>
 8011414:	4604      	mov	r4, r0
 8011416:	f7ff babe 	b.w	8010996 <kalman_3gyro.constprop.0+0x2d9a>
 801141a:	4651      	mov	r1, sl
 801141c:	4618      	mov	r0, r3
 801141e:	4698      	mov	r8, r3
 8011420:	9311      	str	r3, [sp, #68]	; 0x44
 8011422:	f7ef fe5b 	bl	80010dc <__aeabi_fcmpeq>
 8011426:	2800      	cmp	r0, #0
 8011428:	f47f aa97 	bne.w	801095a <kalman_3gyro.constprop.0+0x2d5e>
 801142c:	9904      	ldr	r1, [sp, #16]
 801142e:	4640      	mov	r0, r8
 8011430:	f7ef fcc0 	bl	8000db4 <__aeabi_fmul>
 8011434:	4601      	mov	r1, r0
 8011436:	4620      	mov	r0, r4
 8011438:	f7ef fbb4 	bl	8000ba4 <__addsf3>
 801143c:	4604      	mov	r4, r0
 801143e:	f7ff ba8c 	b.w	801095a <kalman_3gyro.constprop.0+0x2d5e>
 8011442:	4651      	mov	r1, sl
 8011444:	4618      	mov	r0, r3
 8011446:	4698      	mov	r8, r3
 8011448:	9309      	str	r3, [sp, #36]	; 0x24
 801144a:	f7ef fe47 	bl	80010dc <__aeabi_fcmpeq>
 801144e:	2800      	cmp	r0, #0
 8011450:	f47f aa7a 	bne.w	8010948 <kalman_3gyro.constprop.0+0x2d4c>
 8011454:	9903      	ldr	r1, [sp, #12]
 8011456:	4640      	mov	r0, r8
 8011458:	f7ef fcac 	bl	8000db4 <__aeabi_fmul>
 801145c:	4601      	mov	r1, r0
 801145e:	4620      	mov	r0, r4
 8011460:	f7ef fba0 	bl	8000ba4 <__addsf3>
 8011464:	4604      	mov	r4, r0
 8011466:	f7ff ba6f 	b.w	8010948 <kalman_3gyro.constprop.0+0x2d4c>
 801146a:	4651      	mov	r1, sl
 801146c:	4618      	mov	r0, r3
 801146e:	4698      	mov	r8, r3
 8011470:	930f      	str	r3, [sp, #60]	; 0x3c
 8011472:	f7ef fe33 	bl	80010dc <__aeabi_fcmpeq>
 8011476:	2800      	cmp	r0, #0
 8011478:	f47f aa5d 	bne.w	8010936 <kalman_3gyro.constprop.0+0x2d3a>
 801147c:	9902      	ldr	r1, [sp, #8]
 801147e:	4640      	mov	r0, r8
 8011480:	f7ef fc98 	bl	8000db4 <__aeabi_fmul>
 8011484:	4601      	mov	r1, r0
 8011486:	4620      	mov	r0, r4
 8011488:	f7ef fb8c 	bl	8000ba4 <__addsf3>
 801148c:	4604      	mov	r4, r0
 801148e:	f7ff ba52 	b.w	8010936 <kalman_3gyro.constprop.0+0x2d3a>
 8011492:	4651      	mov	r1, sl
 8011494:	4618      	mov	r0, r3
 8011496:	4698      	mov	r8, r3
 8011498:	930c      	str	r3, [sp, #48]	; 0x30
 801149a:	f7ef fe1f 	bl	80010dc <__aeabi_fcmpeq>
 801149e:	2800      	cmp	r0, #0
 80114a0:	f47f aa40 	bne.w	8010924 <kalman_3gyro.constprop.0+0x2d28>
 80114a4:	9901      	ldr	r1, [sp, #4]
 80114a6:	4640      	mov	r0, r8
 80114a8:	f7ef fc84 	bl	8000db4 <__aeabi_fmul>
 80114ac:	4601      	mov	r1, r0
 80114ae:	4620      	mov	r0, r4
 80114b0:	f7ef fb78 	bl	8000ba4 <__addsf3>
 80114b4:	4604      	mov	r4, r0
 80114b6:	f7ff ba35 	b.w	8010924 <kalman_3gyro.constprop.0+0x2d28>
 80114ba:	4651      	mov	r1, sl
 80114bc:	4618      	mov	r0, r3
 80114be:	4698      	mov	r8, r3
 80114c0:	930e      	str	r3, [sp, #56]	; 0x38
 80114c2:	f7ef fe0b 	bl	80010dc <__aeabi_fcmpeq>
 80114c6:	2800      	cmp	r0, #0
 80114c8:	f47f aa23 	bne.w	8010912 <kalman_3gyro.constprop.0+0x2d16>
 80114cc:	4659      	mov	r1, fp
 80114ce:	4640      	mov	r0, r8
 80114d0:	f7ef fc70 	bl	8000db4 <__aeabi_fmul>
 80114d4:	4601      	mov	r1, r0
 80114d6:	4620      	mov	r0, r4
 80114d8:	f7ef fb64 	bl	8000ba4 <__addsf3>
 80114dc:	4604      	mov	r4, r0
 80114de:	f7ff ba18 	b.w	8010912 <kalman_3gyro.constprop.0+0x2d16>
 80114e2:	4651      	mov	r1, sl
 80114e4:	4628      	mov	r0, r5
 80114e6:	f7ef fdf9 	bl	80010dc <__aeabi_fcmpeq>
 80114ea:	2800      	cmp	r0, #0
 80114ec:	f040 8101 	bne.w	80116f2 <kalman_3gyro.constprop.0+0x3af6>
 80114f0:	4639      	mov	r1, r7
 80114f2:	4628      	mov	r0, r5
 80114f4:	f7ef fc5e 	bl	8000db4 <__aeabi_fmul>
 80114f8:	4604      	mov	r4, r0
 80114fa:	f7ff ba01 	b.w	8010900 <kalman_3gyro.constprop.0+0x2d04>
 80114fe:	980e      	ldr	r0, [sp, #56]	; 0x38
 8011500:	f7ef fdec 	bl	80010dc <__aeabi_fcmpeq>
 8011504:	2800      	cmp	r0, #0
 8011506:	f040 80f7 	bne.w	80116f8 <kalman_3gyro.constprop.0+0x3afc>
 801150a:	4651      	mov	r1, sl
 801150c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801150e:	f7ef fde5 	bl	80010dc <__aeabi_fcmpeq>
 8011512:	2800      	cmp	r0, #0
 8011514:	f47f af55 	bne.w	80113c2 <kalman_3gyro.constprop.0+0x37c6>
 8011518:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801151a:	e645      	b.n	80111a8 <kalman_3gyro.constprop.0+0x35ac>
 801151c:	9513      	str	r5, [sp, #76]	; 0x4c
 801151e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011520:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011522:	f7ef fc47 	bl	8000db4 <__aeabi_fmul>
 8011526:	4651      	mov	r1, sl
 8011528:	4605      	mov	r5, r0
 801152a:	9814      	ldr	r0, [sp, #80]	; 0x50
 801152c:	f7ef fdd6 	bl	80010dc <__aeabi_fcmpeq>
 8011530:	2800      	cmp	r0, #0
 8011532:	f000 8141 	beq.w	80117b8 <kalman_3gyro.constprop.0+0x3bbc>
 8011536:	9514      	str	r5, [sp, #80]	; 0x50
 8011538:	9611      	str	r6, [sp, #68]	; 0x44
 801153a:	4651      	mov	r1, sl
 801153c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801153e:	f7ef fdcd 	bl	80010dc <__aeabi_fcmpeq>
 8011542:	2800      	cmp	r0, #0
 8011544:	f47f ae79 	bne.w	801123a <kalman_3gyro.constprop.0+0x363e>
 8011548:	4651      	mov	r1, sl
 801154a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801154c:	f7ef fdc6 	bl	80010dc <__aeabi_fcmpeq>
 8011550:	2800      	cmp	r0, #0
 8011552:	f040 8510 	bne.w	8011f76 <kalman_3gyro.constprop.0+0x437a>
 8011556:	4656      	mov	r6, sl
 8011558:	9912      	ldr	r1, [sp, #72]	; 0x48
 801155a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801155c:	f7ef fc2a 	bl	8000db4 <__aeabi_fmul>
 8011560:	4651      	mov	r1, sl
 8011562:	4605      	mov	r5, r0
 8011564:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8011566:	f7ef fdb9 	bl	80010dc <__aeabi_fcmpeq>
 801156a:	2800      	cmp	r0, #0
 801156c:	f000 812b 	beq.w	80117c6 <kalman_3gyro.constprop.0+0x3bca>
 8011570:	950c      	str	r5, [sp, #48]	; 0x30
 8011572:	9612      	str	r6, [sp, #72]	; 0x48
 8011574:	e676      	b.n	8011264 <kalman_3gyro.constprop.0+0x3668>
 8011576:	9f00      	ldr	r7, [sp, #0]
 8011578:	f8d7 61b0 	ldr.w	r6, [r7, #432]	; 0x1b0
 801157c:	f8d7 51b4 	ldr.w	r5, [r7, #436]	; 0x1b4
 8011580:	4631      	mov	r1, r6
 8011582:	4630      	mov	r0, r6
 8011584:	f7ef fc16 	bl	8000db4 <__aeabi_fmul>
 8011588:	4629      	mov	r1, r5
 801158a:	4604      	mov	r4, r0
 801158c:	4628      	mov	r0, r5
 801158e:	f7ef fc11 	bl	8000db4 <__aeabi_fmul>
 8011592:	4601      	mov	r1, r0
 8011594:	4620      	mov	r0, r4
 8011596:	f7ef fb05 	bl	8000ba4 <__addsf3>
 801159a:	f8d7 41b8 	ldr.w	r4, [r7, #440]	; 0x1b8
 801159e:	4607      	mov	r7, r0
 80115a0:	4621      	mov	r1, r4
 80115a2:	4620      	mov	r0, r4
 80115a4:	f7ef fc06 	bl	8000db4 <__aeabi_fmul>
 80115a8:	4601      	mov	r1, r0
 80115aa:	4638      	mov	r0, r7
 80115ac:	f7ef fafa 	bl	8000ba4 <__addsf3>
 80115b0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80115b4:	4607      	mov	r7, r0
 80115b6:	f7ef fd9b 	bl	80010f0 <__aeabi_fcmplt>
 80115ba:	2800      	cmp	r0, #0
 80115bc:	f040 80e0 	bne.w	8011780 <kalman_3gyro.constprop.0+0x3b84>
 80115c0:	4638      	mov	r0, r7
 80115c2:	f007 f933 	bl	801882c <sqrtf>
 80115c6:	4601      	mov	r1, r0
 80115c8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80115cc:	f7ef fca6 	bl	8000f1c <__aeabi_fdiv>
 80115d0:	4607      	mov	r7, r0
 80115d2:	4630      	mov	r0, r6
 80115d4:	4639      	mov	r1, r7
 80115d6:	f7ef fbed 	bl	8000db4 <__aeabi_fmul>
 80115da:	4639      	mov	r1, r7
 80115dc:	4680      	mov	r8, r0
 80115de:	4628      	mov	r0, r5
 80115e0:	f7ef fbe8 	bl	8000db4 <__aeabi_fmul>
 80115e4:	4603      	mov	r3, r0
 80115e6:	4639      	mov	r1, r7
 80115e8:	4620      	mov	r0, r4
 80115ea:	461f      	mov	r7, r3
 80115ec:	f7ef fbe2 	bl	8000db4 <__aeabi_fmul>
 80115f0:	2300      	movs	r3, #0
 80115f2:	4602      	mov	r2, r0
 80115f4:	f8dd 17e8 	ldr.w	r1, [sp, #2024]	; 0x7e8
 80115f8:	933b      	str	r3, [sp, #236]	; 0xec
 80115fa:	608a      	str	r2, [r1, #8]
 80115fc:	aa30      	add	r2, sp, #192	; 0xc0
 80115fe:	60cb      	str	r3, [r1, #12]
 8011600:	4608      	mov	r0, r1
 8011602:	f8c1 8000 	str.w	r8, [r1]
 8011606:	604f      	str	r7, [r1, #4]
 8011608:	4611      	mov	r1, r2
 801160a:	9638      	str	r6, [sp, #224]	; 0xe0
 801160c:	9539      	str	r5, [sp, #228]	; 0xe4
 801160e:	943a      	str	r4, [sp, #232]	; 0xe8
 8011610:	f7fb f928 	bl	800c864 <qmult>
 8011614:	9f31      	ldr	r7, [sp, #196]	; 0xc4
 8011616:	f8dd 80c0 	ldr.w	r8, [sp, #192]	; 0xc0
 801161a:	4639      	mov	r1, r7
 801161c:	4638      	mov	r0, r7
 801161e:	f7ef fbc9 	bl	8000db4 <__aeabi_fmul>
 8011622:	4641      	mov	r1, r8
 8011624:	4604      	mov	r4, r0
 8011626:	4640      	mov	r0, r8
 8011628:	f7ef fbc4 	bl	8000db4 <__aeabi_fmul>
 801162c:	4601      	mov	r1, r0
 801162e:	4620      	mov	r0, r4
 8011630:	f7ef fab8 	bl	8000ba4 <__addsf3>
 8011634:	4604      	mov	r4, r0
 8011636:	9e32      	ldr	r6, [sp, #200]	; 0xc8
 8011638:	4631      	mov	r1, r6
 801163a:	4630      	mov	r0, r6
 801163c:	f7ef fbba 	bl	8000db4 <__aeabi_fmul>
 8011640:	4621      	mov	r1, r4
 8011642:	f7ef faaf 	bl	8000ba4 <__addsf3>
 8011646:	4604      	mov	r4, r0
 8011648:	9d33      	ldr	r5, [sp, #204]	; 0xcc
 801164a:	4629      	mov	r1, r5
 801164c:	4628      	mov	r0, r5
 801164e:	f7ef fbb1 	bl	8000db4 <__aeabi_fmul>
 8011652:	4621      	mov	r1, r4
 8011654:	f7ef faa6 	bl	8000ba4 <__addsf3>
 8011658:	f007 f8e8 	bl	801882c <sqrtf>
 801165c:	4601      	mov	r1, r0
 801165e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8011662:	f7ef fc5b 	bl	8000f1c <__aeabi_fdiv>
 8011666:	4604      	mov	r4, r0
 8011668:	4640      	mov	r0, r8
 801166a:	4621      	mov	r1, r4
 801166c:	f7ef fba2 	bl	8000db4 <__aeabi_fmul>
 8011670:	f8dd 37e4 	ldr.w	r3, [sp, #2020]	; 0x7e4
 8011674:	4621      	mov	r1, r4
 8011676:	6018      	str	r0, [r3, #0]
 8011678:	4638      	mov	r0, r7
 801167a:	f7ef fb9b 	bl	8000db4 <__aeabi_fmul>
 801167e:	f8dd 37e4 	ldr.w	r3, [sp, #2020]	; 0x7e4
 8011682:	4621      	mov	r1, r4
 8011684:	6058      	str	r0, [r3, #4]
 8011686:	4630      	mov	r0, r6
 8011688:	f7ef fb94 	bl	8000db4 <__aeabi_fmul>
 801168c:	f8dd 37e4 	ldr.w	r3, [sp, #2020]	; 0x7e4
 8011690:	4621      	mov	r1, r4
 8011692:	6098      	str	r0, [r3, #8]
 8011694:	4628      	mov	r0, r5
 8011696:	f7ef fb8d 	bl	8000db4 <__aeabi_fmul>
 801169a:	f8dd 37e4 	ldr.w	r3, [sp, #2020]	; 0x7e4
 801169e:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80116a0:	ae4e      	add	r6, sp, #312	; 0x138
 80116a2:	60d8      	str	r0, [r3, #12]
 80116a4:	af56      	add	r7, sp, #344	; 0x158
 80116a6:	4634      	mov	r4, r6
 80116a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80116aa:	42bc      	cmp	r4, r7
 80116ac:	6028      	str	r0, [r5, #0]
 80116ae:	6069      	str	r1, [r5, #4]
 80116b0:	60aa      	str	r2, [r5, #8]
 80116b2:	60eb      	str	r3, [r5, #12]
 80116b4:	f106 0610 	add.w	r6, r6, #16
 80116b8:	f105 0510 	add.w	r5, r5, #16
 80116bc:	d1f3      	bne.n	80116a6 <kalman_3gyro.constprop.0+0x3aaa>
 80116be:	6830      	ldr	r0, [r6, #0]
 80116c0:	6028      	str	r0, [r5, #0]
 80116c2:	f20d 7db4 	addw	sp, sp, #1972	; 0x7b4
 80116c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116ca:	4654      	mov	r4, sl
 80116cc:	9815      	ldr	r0, [sp, #84]	; 0x54
 80116ce:	990c      	ldr	r1, [sp, #48]	; 0x30
 80116d0:	f7ef fb70 	bl	8000db4 <__aeabi_fmul>
 80116d4:	4603      	mov	r3, r0
 80116d6:	4651      	mov	r1, sl
 80116d8:	980e      	ldr	r0, [sp, #56]	; 0x38
 80116da:	461d      	mov	r5, r3
 80116dc:	9315      	str	r3, [sp, #84]	; 0x54
 80116de:	f7ef fcfd 	bl	80010dc <__aeabi_fcmpeq>
 80116e2:	2800      	cmp	r0, #0
 80116e4:	f43f ad60 	beq.w	80111a8 <kalman_3gyro.constprop.0+0x35ac>
 80116e8:	950e      	str	r5, [sp, #56]	; 0x38
 80116ea:	e66c      	b.n	80113c6 <kalman_3gyro.constprop.0+0x37ca>
 80116ec:	463c      	mov	r4, r7
 80116ee:	f7ff b9ce 	b.w	8010a8e <kalman_3gyro.constprop.0+0x2e92>
 80116f2:	462c      	mov	r4, r5
 80116f4:	f7ff b904 	b.w	8010900 <kalman_3gyro.constprop.0+0x2d04>
 80116f8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80116fa:	e664      	b.n	80113c6 <kalman_3gyro.constprop.0+0x37ca>
 80116fc:	2300      	movs	r3, #0
 80116fe:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8011702:	9312      	str	r3, [sp, #72]	; 0x48
 8011704:	9314      	str	r3, [sp, #80]	; 0x50
 8011706:	930f      	str	r3, [sp, #60]	; 0x3c
 8011708:	e5ac      	b.n	8011264 <kalman_3gyro.constprop.0+0x3668>
 801170a:	9a00      	ldr	r2, [sp, #0]
 801170c:	f892 31a2 	ldrb.w	r3, [r2, #418]	; 0x1a2
 8011710:	2b31      	cmp	r3, #49	; 0x31
 8011712:	f63e af15 	bhi.w	8010540 <kalman_3gyro.constprop.0+0x2944>
 8011716:	3301      	adds	r3, #1
 8011718:	f882 31a2 	strb.w	r3, [r2, #418]	; 0x1a2
 801171c:	f8ad 0096 	strh.w	r0, [sp, #150]	; 0x96
 8011720:	f88d 0098 	strb.w	r0, [sp, #152]	; 0x98
 8011724:	f7fe bf0c 	b.w	8010540 <kalman_3gyro.constprop.0+0x2944>
 8011728:	9b00      	ldr	r3, [sp, #0]
 801172a:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 801172c:	2d00      	cmp	r5, #0
 801172e:	f340 8427 	ble.w	8011f80 <kalman_3gyro.constprop.0+0x4384>
 8011732:	3d01      	subs	r5, #1
 8011734:	659d      	str	r5, [r3, #88]	; 0x58
 8011736:	f8ad 0090 	strh.w	r0, [sp, #144]	; 0x90
 801173a:	f88d 0092 	strb.w	r0, [sp, #146]	; 0x92
 801173e:	f88d 0099 	strb.w	r0, [sp, #153]	; 0x99
 8011742:	f88d 009b 	strb.w	r0, [sp, #155]	; 0x9b
 8011746:	f7fe baae 	b.w	800fca6 <kalman_3gyro.constprop.0+0x20aa>
 801174a:	7b5e      	ldrb	r6, [r3, #13]
 801174c:	7b9f      	ldrb	r7, [r3, #14]
 801174e:	f88d 6090 	strb.w	r6, [sp, #144]	; 0x90
 8011752:	f88d 6091 	strb.w	r6, [sp, #145]	; 0x91
 8011756:	f88d 6092 	strb.w	r6, [sp, #146]	; 0x92
 801175a:	f88d 7093 	strb.w	r7, [sp, #147]	; 0x93
 801175e:	f88d 7094 	strb.w	r7, [sp, #148]	; 0x94
 8011762:	f88d 7095 	strb.w	r7, [sp, #149]	; 0x95
 8011766:	f7fe ba20 	b.w	800fbaa <kalman_3gyro.constprop.0+0x1fae>
 801176a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 801176e:	f7fd bef8 	b.w	800f562 <kalman_3gyro.constprop.0+0x1966>
 8011772:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8011776:	f7fd ba96 	b.w	800eca6 <kalman_3gyro.constprop.0+0x10aa>
 801177a:	2600      	movs	r6, #0
 801177c:	f7fd ba81 	b.w	800ec82 <kalman_3gyro.constprop.0+0x1086>
 8011780:	4639      	mov	r1, r7
 8011782:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8011786:	f7ef fa0b 	bl	8000ba0 <__aeabi_fsub>
 801178a:	f007 f84f 	bl	801882c <sqrtf>
 801178e:	462f      	mov	r7, r5
 8011790:	4622      	mov	r2, r4
 8011792:	4603      	mov	r3, r0
 8011794:	46b0      	mov	r8, r6
 8011796:	e72d      	b.n	80115f4 <kalman_3gyro.constprop.0+0x39f8>
 8011798:	f109 4900 	add.w	r9, r9, #2147483648	; 0x80000000
 801179c:	f7fd ba53 	b.w	800ec46 <kalman_3gyro.constprop.0+0x104a>
 80117a0:	f04f 0900 	mov.w	r9, #0
 80117a4:	f7fd ba3d 	b.w	800ec22 <kalman_3gyro.constprop.0+0x1026>
 80117a8:	f109 4900 	add.w	r9, r9, #2147483648	; 0x80000000
 80117ac:	f7fd ba1c 	b.w	800ebe8 <kalman_3gyro.constprop.0+0xfec>
 80117b0:	f04f 0900 	mov.w	r9, #0
 80117b4:	f7fd ba06 	b.w	800ebc4 <kalman_3gyro.constprop.0+0xfc8>
 80117b8:	9611      	str	r6, [sp, #68]	; 0x44
 80117ba:	e530      	b.n	801121e <kalman_3gyro.constprop.0+0x3622>
 80117bc:	9610      	str	r6, [sp, #64]	; 0x40
 80117be:	e511      	b.n	80111e4 <kalman_3gyro.constprop.0+0x35e8>
 80117c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80117c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80117c4:	e54e      	b.n	8011264 <kalman_3gyro.constprop.0+0x3668>
 80117c6:	9612      	str	r6, [sp, #72]	; 0x48
 80117c8:	e546      	b.n	8011258 <kalman_3gyro.constprop.0+0x365c>
 80117ca:	9514      	str	r5, [sp, #80]	; 0x50
 80117cc:	e6c4      	b.n	8011558 <kalman_3gyro.constprop.0+0x395c>
 80117ce:	4656      	mov	r6, sl
 80117d0:	e6a5      	b.n	801151e <kalman_3gyro.constprop.0+0x3922>
 80117d2:	4656      	mov	r6, sl
 80117d4:	e5b6      	b.n	8011344 <kalman_3gyro.constprop.0+0x3748>
 80117d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80117d8:	9313      	str	r3, [sp, #76]	; 0x4c
 80117da:	e5c1      	b.n	8011360 <kalman_3gyro.constprop.0+0x3764>
 80117dc:	2200      	movs	r2, #0
 80117de:	9900      	ldr	r1, [sp, #0]
 80117e0:	4bb6      	ldr	r3, [pc, #728]	; (8011abc <kalman_3gyro.constprop.0+0x3ec0>)
 80117e2:	f881 2318 	strb.w	r2, [r1, #792]	; 0x318
 80117e6:	f8c1 34b4 	str.w	r3, [r1, #1204]	; 0x4b4
 80117ea:	4ab5      	ldr	r2, [pc, #724]	; (8011ac0 <kalman_3gyro.constprop.0+0x3ec4>)
 80117ec:	4bb5      	ldr	r3, [pc, #724]	; (8011ac4 <kalman_3gyro.constprop.0+0x3ec8>)
 80117ee:	f891 74b1 	ldrb.w	r7, [r1, #1201]	; 0x4b1
 80117f2:	f8c1 2624 	str.w	r2, [r1, #1572]	; 0x624
 80117f6:	f8c1 3794 	str.w	r3, [r1, #1940]	; 0x794
 80117fa:	2f00      	cmp	r7, #0
 80117fc:	f000 80aa 	beq.w	8011954 <kalman_3gyro.constprop.0+0x3d58>
 8011800:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8011804:	eb01 0387 	add.w	r3, r1, r7, lsl #2
 8011808:	460c      	mov	r4, r1
 801180a:	f04f 4596 	mov.w	r5, #1258291200	; 0x4b000000
 801180e:	f04f 597c 	mov.w	r9, #1056964608	; 0x3f000000
 8011812:	4ead      	ldr	r6, [pc, #692]	; (8011ac8 <kalman_3gyro.constprop.0+0x3ecc>)
 8011814:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 8011ad0 <kalman_3gyro.constprop.0+0x3ed4>
 8011818:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 8011ad4 <kalman_3gyro.constprop.0+0x3ed8>
 801181c:	9301      	str	r3, [sp, #4]
 801181e:	e067      	b.n	80118f0 <kalman_3gyro.constprop.0+0x3cf4>
 8011820:	4658      	mov	r0, fp
 8011822:	4651      	mov	r1, sl
 8011824:	f7ef fc82 	bl	800112c <__aeabi_fcmpgt>
 8011828:	2800      	cmp	r0, #0
 801182a:	f040 8144 	bne.w	8011ab6 <kalman_3gyro.constprop.0+0x3eba>
 801182e:	4638      	mov	r0, r7
 8011830:	4649      	mov	r1, r9
 8011832:	f7ef f9b5 	bl	8000ba0 <__aeabi_fsub>
 8011836:	f7ee fe57 	bl	80004e8 <__aeabi_f2d>
 801183a:	f006 fdd1 	bl	80183e0 <ceil>
 801183e:	f7ef f95b 	bl	8000af8 <__aeabi_d2f>
 8011842:	4607      	mov	r7, r0
 8011844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011846:	f8c4 74b8 	str.w	r7, [r4, #1208]	; 0x4b8
 801184a:	f8d3 b004 	ldr.w	fp, [r3, #4]
 801184e:	4631      	mov	r1, r6
 8011850:	4658      	mov	r0, fp
 8011852:	f7ef faaf 	bl	8000db4 <__aeabi_fmul>
 8011856:	4629      	mov	r1, r5
 8011858:	4607      	mov	r7, r0
 801185a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801185e:	f7ef fc47 	bl	80010f0 <__aeabi_fcmplt>
 8011862:	b1c0      	cbz	r0, 8011896 <kalman_3gyro.constprop.0+0x3c9a>
 8011864:	4641      	mov	r1, r8
 8011866:	4658      	mov	r0, fp
 8011868:	f7ef fc56 	bl	8001118 <__aeabi_fcmpge>
 801186c:	2800      	cmp	r0, #0
 801186e:	f040 8110 	bne.w	8011a92 <kalman_3gyro.constprop.0+0x3e96>
 8011872:	4658      	mov	r0, fp
 8011874:	4651      	mov	r1, sl
 8011876:	f7ef fc59 	bl	800112c <__aeabi_fcmpgt>
 801187a:	2800      	cmp	r0, #0
 801187c:	f040 8118 	bne.w	8011ab0 <kalman_3gyro.constprop.0+0x3eb4>
 8011880:	4638      	mov	r0, r7
 8011882:	4649      	mov	r1, r9
 8011884:	f7ef f98c 	bl	8000ba0 <__aeabi_fsub>
 8011888:	f7ee fe2e 	bl	80004e8 <__aeabi_f2d>
 801188c:	f006 fda8 	bl	80183e0 <ceil>
 8011890:	f7ef f932 	bl	8000af8 <__aeabi_d2f>
 8011894:	4607      	mov	r7, r0
 8011896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011898:	f8c4 74bc 	str.w	r7, [r4, #1212]	; 0x4bc
 801189c:	689f      	ldr	r7, [r3, #8]
 801189e:	4631      	mov	r1, r6
 80118a0:	4638      	mov	r0, r7
 80118a2:	f7ef fa87 	bl	8000db4 <__aeabi_fmul>
 80118a6:	4629      	mov	r1, r5
 80118a8:	4683      	mov	fp, r0
 80118aa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80118ae:	f7ef fc1f 	bl	80010f0 <__aeabi_fcmplt>
 80118b2:	b1b8      	cbz	r0, 80118e4 <kalman_3gyro.constprop.0+0x3ce8>
 80118b4:	4641      	mov	r1, r8
 80118b6:	4638      	mov	r0, r7
 80118b8:	f7ef fc2e 	bl	8001118 <__aeabi_fcmpge>
 80118bc:	2800      	cmp	r0, #0
 80118be:	d138      	bne.n	8011932 <kalman_3gyro.constprop.0+0x3d36>
 80118c0:	4638      	mov	r0, r7
 80118c2:	4651      	mov	r1, sl
 80118c4:	f7ef fc32 	bl	800112c <__aeabi_fcmpgt>
 80118c8:	2800      	cmp	r0, #0
 80118ca:	f040 80ee 	bne.w	8011aaa <kalman_3gyro.constprop.0+0x3eae>
 80118ce:	4658      	mov	r0, fp
 80118d0:	4649      	mov	r1, r9
 80118d2:	f7ef f965 	bl	8000ba0 <__aeabi_fsub>
 80118d6:	f7ee fe07 	bl	80004e8 <__aeabi_f2d>
 80118da:	f006 fd81 	bl	80183e0 <ceil>
 80118de:	f7ef f90b 	bl	8000af8 <__aeabi_d2f>
 80118e2:	4683      	mov	fp, r0
 80118e4:	9b01      	ldr	r3, [sp, #4]
 80118e6:	f8c4 b4c0 	str.w	fp, [r4, #1216]	; 0x4c0
 80118ea:	340c      	adds	r4, #12
 80118ec:	429c      	cmp	r4, r3
 80118ee:	d031      	beq.n	8011954 <kalman_3gyro.constprop.0+0x3d58>
 80118f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118f2:	4631      	mov	r1, r6
 80118f4:	f8d3 b000 	ldr.w	fp, [r3]
 80118f8:	4658      	mov	r0, fp
 80118fa:	f7ef fa5b 	bl	8000db4 <__aeabi_fmul>
 80118fe:	4629      	mov	r1, r5
 8011900:	4607      	mov	r7, r0
 8011902:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8011906:	f7ef fbf3 	bl	80010f0 <__aeabi_fcmplt>
 801190a:	2800      	cmp	r0, #0
 801190c:	d09a      	beq.n	8011844 <kalman_3gyro.constprop.0+0x3c48>
 801190e:	4641      	mov	r1, r8
 8011910:	4658      	mov	r0, fp
 8011912:	f7ef fc01 	bl	8001118 <__aeabi_fcmpge>
 8011916:	2800      	cmp	r0, #0
 8011918:	d082      	beq.n	8011820 <kalman_3gyro.constprop.0+0x3c24>
 801191a:	4638      	mov	r0, r7
 801191c:	4649      	mov	r1, r9
 801191e:	f7ef f941 	bl	8000ba4 <__addsf3>
 8011922:	f7ee fde1 	bl	80004e8 <__aeabi_f2d>
 8011926:	f006 fddb 	bl	80184e0 <floor>
 801192a:	f7ef f8e5 	bl	8000af8 <__aeabi_d2f>
 801192e:	4607      	mov	r7, r0
 8011930:	e788      	b.n	8011844 <kalman_3gyro.constprop.0+0x3c48>
 8011932:	4658      	mov	r0, fp
 8011934:	4649      	mov	r1, r9
 8011936:	f7ef f935 	bl	8000ba4 <__addsf3>
 801193a:	f7ee fdd5 	bl	80004e8 <__aeabi_f2d>
 801193e:	f006 fdcf 	bl	80184e0 <floor>
 8011942:	f7ef f8d9 	bl	8000af8 <__aeabi_d2f>
 8011946:	4683      	mov	fp, r0
 8011948:	9b01      	ldr	r3, [sp, #4]
 801194a:	f8c4 b4c0 	str.w	fp, [r4, #1216]	; 0x4c0
 801194e:	340c      	adds	r4, #12
 8011950:	429c      	cmp	r4, r3
 8011952:	d1cd      	bne.n	80118f0 <kalman_3gyro.constprop.0+0x3cf4>
 8011954:	9b00      	ldr	r3, [sp, #0]
 8011956:	f893 7621 	ldrb.w	r7, [r3, #1569]	; 0x621
 801195a:	2f00      	cmp	r7, #0
 801195c:	f000 80d1 	beq.w	8011b02 <kalman_3gyro.constprop.0+0x3f06>
 8011960:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8011964:	461c      	mov	r4, r3
 8011966:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 801196a:	f04f 4596 	mov.w	r5, #1258291200	; 0x4b000000
 801196e:	f04f 597c 	mov.w	r9, #1056964608	; 0x3f000000
 8011972:	4e56      	ldr	r6, [pc, #344]	; (8011acc <kalman_3gyro.constprop.0+0x3ed0>)
 8011974:	f8df 8160 	ldr.w	r8, [pc, #352]	; 8011ad8 <kalman_3gyro.constprop.0+0x3edc>
 8011978:	f8df a160 	ldr.w	sl, [pc, #352]	; 8011adc <kalman_3gyro.constprop.0+0x3ee0>
 801197c:	9301      	str	r3, [sp, #4]
 801197e:	e067      	b.n	8011a50 <kalman_3gyro.constprop.0+0x3e54>
 8011980:	4658      	mov	r0, fp
 8011982:	4651      	mov	r1, sl
 8011984:	f7ef fbd2 	bl	800112c <__aeabi_fcmpgt>
 8011988:	2800      	cmp	r0, #0
 801198a:	f040 816b 	bne.w	8011c64 <kalman_3gyro.constprop.0+0x4068>
 801198e:	4638      	mov	r0, r7
 8011990:	4649      	mov	r1, r9
 8011992:	f7ef f905 	bl	8000ba0 <__aeabi_fsub>
 8011996:	f7ee fda7 	bl	80004e8 <__aeabi_f2d>
 801199a:	f006 fd21 	bl	80183e0 <ceil>
 801199e:	f7ef f8ab 	bl	8000af8 <__aeabi_d2f>
 80119a2:	4607      	mov	r7, r0
 80119a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119a6:	f8c4 7628 	str.w	r7, [r4, #1576]	; 0x628
 80119aa:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80119ae:	4631      	mov	r1, r6
 80119b0:	4658      	mov	r0, fp
 80119b2:	f7ef f9ff 	bl	8000db4 <__aeabi_fmul>
 80119b6:	4629      	mov	r1, r5
 80119b8:	4607      	mov	r7, r0
 80119ba:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80119be:	f7ef fb97 	bl	80010f0 <__aeabi_fcmplt>
 80119c2:	b1c0      	cbz	r0, 80119f6 <kalman_3gyro.constprop.0+0x3dfa>
 80119c4:	4641      	mov	r1, r8
 80119c6:	4658      	mov	r0, fp
 80119c8:	f7ef fba6 	bl	8001118 <__aeabi_fcmpge>
 80119cc:	2800      	cmp	r0, #0
 80119ce:	f040 8137 	bne.w	8011c40 <kalman_3gyro.constprop.0+0x4044>
 80119d2:	4658      	mov	r0, fp
 80119d4:	4651      	mov	r1, sl
 80119d6:	f7ef fba9 	bl	800112c <__aeabi_fcmpgt>
 80119da:	2800      	cmp	r0, #0
 80119dc:	f040 813f 	bne.w	8011c5e <kalman_3gyro.constprop.0+0x4062>
 80119e0:	4638      	mov	r0, r7
 80119e2:	4649      	mov	r1, r9
 80119e4:	f7ef f8dc 	bl	8000ba0 <__aeabi_fsub>
 80119e8:	f7ee fd7e 	bl	80004e8 <__aeabi_f2d>
 80119ec:	f006 fcf8 	bl	80183e0 <ceil>
 80119f0:	f7ef f882 	bl	8000af8 <__aeabi_d2f>
 80119f4:	4607      	mov	r7, r0
 80119f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119f8:	f8c4 762c 	str.w	r7, [r4, #1580]	; 0x62c
 80119fc:	695f      	ldr	r7, [r3, #20]
 80119fe:	4631      	mov	r1, r6
 8011a00:	4638      	mov	r0, r7
 8011a02:	f7ef f9d7 	bl	8000db4 <__aeabi_fmul>
 8011a06:	4629      	mov	r1, r5
 8011a08:	4683      	mov	fp, r0
 8011a0a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8011a0e:	f7ef fb6f 	bl	80010f0 <__aeabi_fcmplt>
 8011a12:	b1b8      	cbz	r0, 8011a44 <kalman_3gyro.constprop.0+0x3e48>
 8011a14:	4641      	mov	r1, r8
 8011a16:	4638      	mov	r0, r7
 8011a18:	f7ef fb7e 	bl	8001118 <__aeabi_fcmpge>
 8011a1c:	2800      	cmp	r0, #0
 8011a1e:	d15f      	bne.n	8011ae0 <kalman_3gyro.constprop.0+0x3ee4>
 8011a20:	4638      	mov	r0, r7
 8011a22:	4651      	mov	r1, sl
 8011a24:	f7ef fb82 	bl	800112c <__aeabi_fcmpgt>
 8011a28:	2800      	cmp	r0, #0
 8011a2a:	f040 8115 	bne.w	8011c58 <kalman_3gyro.constprop.0+0x405c>
 8011a2e:	4658      	mov	r0, fp
 8011a30:	4649      	mov	r1, r9
 8011a32:	f7ef f8b5 	bl	8000ba0 <__aeabi_fsub>
 8011a36:	f7ee fd57 	bl	80004e8 <__aeabi_f2d>
 8011a3a:	f006 fcd1 	bl	80183e0 <ceil>
 8011a3e:	f7ef f85b 	bl	8000af8 <__aeabi_d2f>
 8011a42:	4683      	mov	fp, r0
 8011a44:	9b01      	ldr	r3, [sp, #4]
 8011a46:	f8c4 b630 	str.w	fp, [r4, #1584]	; 0x630
 8011a4a:	340c      	adds	r4, #12
 8011a4c:	42a3      	cmp	r3, r4
 8011a4e:	d058      	beq.n	8011b02 <kalman_3gyro.constprop.0+0x3f06>
 8011a50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a52:	4631      	mov	r1, r6
 8011a54:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8011a58:	4658      	mov	r0, fp
 8011a5a:	f7ef f9ab 	bl	8000db4 <__aeabi_fmul>
 8011a5e:	4629      	mov	r1, r5
 8011a60:	4607      	mov	r7, r0
 8011a62:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8011a66:	f7ef fb43 	bl	80010f0 <__aeabi_fcmplt>
 8011a6a:	2800      	cmp	r0, #0
 8011a6c:	d09a      	beq.n	80119a4 <kalman_3gyro.constprop.0+0x3da8>
 8011a6e:	4641      	mov	r1, r8
 8011a70:	4658      	mov	r0, fp
 8011a72:	f7ef fb51 	bl	8001118 <__aeabi_fcmpge>
 8011a76:	2800      	cmp	r0, #0
 8011a78:	d082      	beq.n	8011980 <kalman_3gyro.constprop.0+0x3d84>
 8011a7a:	4638      	mov	r0, r7
 8011a7c:	4649      	mov	r1, r9
 8011a7e:	f7ef f891 	bl	8000ba4 <__addsf3>
 8011a82:	f7ee fd31 	bl	80004e8 <__aeabi_f2d>
 8011a86:	f006 fd2b 	bl	80184e0 <floor>
 8011a8a:	f7ef f835 	bl	8000af8 <__aeabi_d2f>
 8011a8e:	4607      	mov	r7, r0
 8011a90:	e788      	b.n	80119a4 <kalman_3gyro.constprop.0+0x3da8>
 8011a92:	4638      	mov	r0, r7
 8011a94:	4649      	mov	r1, r9
 8011a96:	f7ef f885 	bl	8000ba4 <__addsf3>
 8011a9a:	f7ee fd25 	bl	80004e8 <__aeabi_f2d>
 8011a9e:	f006 fd1f 	bl	80184e0 <floor>
 8011aa2:	f7ef f829 	bl	8000af8 <__aeabi_d2f>
 8011aa6:	4607      	mov	r7, r0
 8011aa8:	e6f5      	b.n	8011896 <kalman_3gyro.constprop.0+0x3c9a>
 8011aaa:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
 8011aae:	e719      	b.n	80118e4 <kalman_3gyro.constprop.0+0x3ce8>
 8011ab0:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8011ab4:	e6ef      	b.n	8011896 <kalman_3gyro.constprop.0+0x3c9a>
 8011ab6:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8011aba:	e6c3      	b.n	8011844 <kalman_3gyro.constprop.0+0x3c48>
 8011abc:	3a7001e0 	.word	0x3a7001e0
 8011ac0:	3a000100 	.word	0x3a000100
 8011ac4:	3a8c0118 	.word	0x3a8c0118
 8011ac8:	44888777 	.word	0x44888777
 8011acc:	44fffe00 	.word	0x44fffe00
 8011ad0:	39f001e1 	.word	0x39f001e1
 8011ad4:	b9f001e1 	.word	0xb9f001e1
 8011ad8:	39800100 	.word	0x39800100
 8011adc:	b9800100 	.word	0xb9800100
 8011ae0:	4658      	mov	r0, fp
 8011ae2:	4649      	mov	r1, r9
 8011ae4:	f7ef f85e 	bl	8000ba4 <__addsf3>
 8011ae8:	f7ee fcfe 	bl	80004e8 <__aeabi_f2d>
 8011aec:	f006 fcf8 	bl	80184e0 <floor>
 8011af0:	f7ef f802 	bl	8000af8 <__aeabi_d2f>
 8011af4:	4683      	mov	fp, r0
 8011af6:	9b01      	ldr	r3, [sp, #4]
 8011af8:	f8c4 b630 	str.w	fp, [r4, #1584]	; 0x630
 8011afc:	340c      	adds	r4, #12
 8011afe:	42a3      	cmp	r3, r4
 8011b00:	d1a6      	bne.n	8011a50 <kalman_3gyro.constprop.0+0x3e54>
 8011b02:	9b00      	ldr	r3, [sp, #0]
 8011b04:	f893 7791 	ldrb.w	r7, [r3, #1937]	; 0x791
 8011b08:	2f00      	cmp	r7, #0
 8011b0a:	f43c a97a 	beq.w	800de02 <kalman_3gyro.constprop.0+0x206>
 8011b0e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8011b12:	461c      	mov	r4, r3
 8011b14:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8011b18:	f04f 4596 	mov.w	r5, #1258291200	; 0x4b000000
 8011b1c:	f04f 597c 	mov.w	r9, #1056964608	; 0x3f000000
 8011b20:	4e62      	ldr	r6, [pc, #392]	; (8011cac <kalman_3gyro.constprop.0+0x40b0>)
 8011b22:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8011cb0 <kalman_3gyro.constprop.0+0x40b4>
 8011b26:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8011cb4 <kalman_3gyro.constprop.0+0x40b8>
 8011b2a:	9301      	str	r3, [sp, #4]
 8011b2c:	e067      	b.n	8011bfe <kalman_3gyro.constprop.0+0x4002>
 8011b2e:	4658      	mov	r0, fp
 8011b30:	4651      	mov	r1, sl
 8011b32:	f7ef fafb 	bl	800112c <__aeabi_fcmpgt>
 8011b36:	2800      	cmp	r0, #0
 8011b38:	f040 80b2 	bne.w	8011ca0 <kalman_3gyro.constprop.0+0x40a4>
 8011b3c:	4638      	mov	r0, r7
 8011b3e:	4649      	mov	r1, r9
 8011b40:	f7ef f82e 	bl	8000ba0 <__aeabi_fsub>
 8011b44:	f7ee fcd0 	bl	80004e8 <__aeabi_f2d>
 8011b48:	f006 fc4a 	bl	80183e0 <ceil>
 8011b4c:	f7ee ffd4 	bl	8000af8 <__aeabi_d2f>
 8011b50:	4607      	mov	r7, r0
 8011b52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b54:	f8c4 7798 	str.w	r7, [r4, #1944]	; 0x798
 8011b58:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 8011b5c:	4631      	mov	r1, r6
 8011b5e:	4658      	mov	r0, fp
 8011b60:	f7ef f928 	bl	8000db4 <__aeabi_fmul>
 8011b64:	4629      	mov	r1, r5
 8011b66:	4607      	mov	r7, r0
 8011b68:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8011b6c:	f7ef fac0 	bl	80010f0 <__aeabi_fcmplt>
 8011b70:	b1c0      	cbz	r0, 8011ba4 <kalman_3gyro.constprop.0+0x3fa8>
 8011b72:	4641      	mov	r1, r8
 8011b74:	4658      	mov	r0, fp
 8011b76:	f7ef facf 	bl	8001118 <__aeabi_fcmpge>
 8011b7a:	2800      	cmp	r0, #0
 8011b7c:	f040 8081 	bne.w	8011c82 <kalman_3gyro.constprop.0+0x4086>
 8011b80:	4658      	mov	r0, fp
 8011b82:	4651      	mov	r1, sl
 8011b84:	f7ef fad2 	bl	800112c <__aeabi_fcmpgt>
 8011b88:	2800      	cmp	r0, #0
 8011b8a:	f040 8086 	bne.w	8011c9a <kalman_3gyro.constprop.0+0x409e>
 8011b8e:	4638      	mov	r0, r7
 8011b90:	4649      	mov	r1, r9
 8011b92:	f7ef f805 	bl	8000ba0 <__aeabi_fsub>
 8011b96:	f7ee fca7 	bl	80004e8 <__aeabi_f2d>
 8011b9a:	f006 fc21 	bl	80183e0 <ceil>
 8011b9e:	f7ee ffab 	bl	8000af8 <__aeabi_d2f>
 8011ba2:	4607      	mov	r7, r0
 8011ba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ba6:	f8c4 779c 	str.w	r7, [r4, #1948]	; 0x79c
 8011baa:	6a1f      	ldr	r7, [r3, #32]
 8011bac:	4631      	mov	r1, r6
 8011bae:	4638      	mov	r0, r7
 8011bb0:	f7ef f900 	bl	8000db4 <__aeabi_fmul>
 8011bb4:	4629      	mov	r1, r5
 8011bb6:	4683      	mov	fp, r0
 8011bb8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8011bbc:	f7ef fa98 	bl	80010f0 <__aeabi_fcmplt>
 8011bc0:	b1b0      	cbz	r0, 8011bf0 <kalman_3gyro.constprop.0+0x3ff4>
 8011bc2:	4641      	mov	r1, r8
 8011bc4:	4638      	mov	r0, r7
 8011bc6:	f7ef faa7 	bl	8001118 <__aeabi_fcmpge>
 8011bca:	2800      	cmp	r0, #0
 8011bcc:	d14d      	bne.n	8011c6a <kalman_3gyro.constprop.0+0x406e>
 8011bce:	4638      	mov	r0, r7
 8011bd0:	4651      	mov	r1, sl
 8011bd2:	f7ef faab 	bl	800112c <__aeabi_fcmpgt>
 8011bd6:	2800      	cmp	r0, #0
 8011bd8:	d165      	bne.n	8011ca6 <kalman_3gyro.constprop.0+0x40aa>
 8011bda:	4658      	mov	r0, fp
 8011bdc:	4649      	mov	r1, r9
 8011bde:	f7ee ffdf 	bl	8000ba0 <__aeabi_fsub>
 8011be2:	f7ee fc81 	bl	80004e8 <__aeabi_f2d>
 8011be6:	f006 fbfb 	bl	80183e0 <ceil>
 8011bea:	f7ee ff85 	bl	8000af8 <__aeabi_d2f>
 8011bee:	4683      	mov	fp, r0
 8011bf0:	9b01      	ldr	r3, [sp, #4]
 8011bf2:	f8c4 b7a0 	str.w	fp, [r4, #1952]	; 0x7a0
 8011bf6:	340c      	adds	r4, #12
 8011bf8:	42a3      	cmp	r3, r4
 8011bfa:	f43c a902 	beq.w	800de02 <kalman_3gyro.constprop.0+0x206>
 8011bfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c00:	4631      	mov	r1, r6
 8011c02:	f8d3 b018 	ldr.w	fp, [r3, #24]
 8011c06:	4658      	mov	r0, fp
 8011c08:	f7ef f8d4 	bl	8000db4 <__aeabi_fmul>
 8011c0c:	4629      	mov	r1, r5
 8011c0e:	4607      	mov	r7, r0
 8011c10:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8011c14:	f7ef fa6c 	bl	80010f0 <__aeabi_fcmplt>
 8011c18:	2800      	cmp	r0, #0
 8011c1a:	d09a      	beq.n	8011b52 <kalman_3gyro.constprop.0+0x3f56>
 8011c1c:	4641      	mov	r1, r8
 8011c1e:	4658      	mov	r0, fp
 8011c20:	f7ef fa7a 	bl	8001118 <__aeabi_fcmpge>
 8011c24:	2800      	cmp	r0, #0
 8011c26:	d082      	beq.n	8011b2e <kalman_3gyro.constprop.0+0x3f32>
 8011c28:	4638      	mov	r0, r7
 8011c2a:	4649      	mov	r1, r9
 8011c2c:	f7ee ffba 	bl	8000ba4 <__addsf3>
 8011c30:	f7ee fc5a 	bl	80004e8 <__aeabi_f2d>
 8011c34:	f006 fc54 	bl	80184e0 <floor>
 8011c38:	f7ee ff5e 	bl	8000af8 <__aeabi_d2f>
 8011c3c:	4607      	mov	r7, r0
 8011c3e:	e788      	b.n	8011b52 <kalman_3gyro.constprop.0+0x3f56>
 8011c40:	4638      	mov	r0, r7
 8011c42:	4649      	mov	r1, r9
 8011c44:	f7ee ffae 	bl	8000ba4 <__addsf3>
 8011c48:	f7ee fc4e 	bl	80004e8 <__aeabi_f2d>
 8011c4c:	f006 fc48 	bl	80184e0 <floor>
 8011c50:	f7ee ff52 	bl	8000af8 <__aeabi_d2f>
 8011c54:	4607      	mov	r7, r0
 8011c56:	e6ce      	b.n	80119f6 <kalman_3gyro.constprop.0+0x3dfa>
 8011c58:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
 8011c5c:	e6f2      	b.n	8011a44 <kalman_3gyro.constprop.0+0x3e48>
 8011c5e:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8011c62:	e6c8      	b.n	80119f6 <kalman_3gyro.constprop.0+0x3dfa>
 8011c64:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8011c68:	e69c      	b.n	80119a4 <kalman_3gyro.constprop.0+0x3da8>
 8011c6a:	4658      	mov	r0, fp
 8011c6c:	4649      	mov	r1, r9
 8011c6e:	f7ee ff99 	bl	8000ba4 <__addsf3>
 8011c72:	f7ee fc39 	bl	80004e8 <__aeabi_f2d>
 8011c76:	f006 fc33 	bl	80184e0 <floor>
 8011c7a:	f7ee ff3d 	bl	8000af8 <__aeabi_d2f>
 8011c7e:	4683      	mov	fp, r0
 8011c80:	e7b6      	b.n	8011bf0 <kalman_3gyro.constprop.0+0x3ff4>
 8011c82:	4638      	mov	r0, r7
 8011c84:	4649      	mov	r1, r9
 8011c86:	f7ee ff8d 	bl	8000ba4 <__addsf3>
 8011c8a:	f7ee fc2d 	bl	80004e8 <__aeabi_f2d>
 8011c8e:	f006 fc27 	bl	80184e0 <floor>
 8011c92:	f7ee ff31 	bl	8000af8 <__aeabi_d2f>
 8011c96:	4607      	mov	r7, r0
 8011c98:	e784      	b.n	8011ba4 <kalman_3gyro.constprop.0+0x3fa8>
 8011c9a:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8011c9e:	e781      	b.n	8011ba4 <kalman_3gyro.constprop.0+0x3fa8>
 8011ca0:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8011ca4:	e755      	b.n	8011b52 <kalman_3gyro.constprop.0+0x3f56>
 8011ca6:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
 8011caa:	e7a1      	b.n	8011bf0 <kalman_3gyro.constprop.0+0x3ff4>
 8011cac:	446a0ccd 	.word	0x446a0ccd
 8011cb0:	3a0c0118 	.word	0x3a0c0118
 8011cb4:	ba0c0118 	.word	0xba0c0118
 8011cb8:	2200      	movs	r2, #0
 8011cba:	f8dd 07e0 	ldr.w	r0, [sp, #2016]	; 0x7e0
 8011cbe:	f8dd 37e0 	ldr.w	r3, [sp, #2016]	; 0x7e0
 8011cc2:	f8dd 17e0 	ldr.w	r1, [sp, #2016]	; 0x7e0
 8011cc6:	781b      	ldrb	r3, [r3, #0]
 8011cc8:	6885      	ldr	r5, [r0, #8]
 8011cca:	9800      	ldr	r0, [sp, #0]
 8011ccc:	68cc      	ldr	r4, [r1, #12]
 8011cce:	6849      	ldr	r1, [r1, #4]
 8011cd0:	f880 21ac 	strb.w	r2, [r0, #428]	; 0x1ac
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	f040 8164 	bne.w	8011fa2 <kalman_3gyro.constprop.0+0x43a6>
 8011cda:	48c5      	ldr	r0, [pc, #788]	; (8011ff0 <kalman_3gyro.constprop.0+0x43f4>)
 8011cdc:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 8011ce0:	9f00      	ldr	r7, [sp, #0]
 8011ce2:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8011ce6:	f8c7 01c8 	str.w	r0, [r7, #456]	; 0x1c8
 8011cea:	f8c7 51cc 	str.w	r5, [r7, #460]	; 0x1cc
 8011cee:	f8c7 51d0 	str.w	r5, [r7, #464]	; 0x1d0
 8011cf2:	2100      	movs	r1, #0
 8011cf4:	f507 70ea 	add.w	r0, r7, #468	; 0x1d4
 8011cf8:	f005 fef8 	bl	8017aec <memset>
 8011cfc:	68bc      	ldr	r4, [r7, #8]
 8011cfe:	4bbd      	ldr	r3, [pc, #756]	; (8011ff4 <kalman_3gyro.constprop.0+0x43f8>)
 8011d00:	4620      	mov	r0, r4
 8011d02:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8011d06:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8011d0a:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8011d0e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8011d12:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 8011d16:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8011d1a:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 8011d1e:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8011d22:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 8011d26:	49b4      	ldr	r1, [pc, #720]	; (8011ff8 <kalman_3gyro.constprop.0+0x43fc>)
 8011d28:	f7ef f844 	bl	8000db4 <__aeabi_fmul>
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
 8011d32:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
 8011d36:	f8c7 50c4 	str.w	r5, [r7, #196]	; 0xc4
 8011d3a:	f8c7 512c 	str.w	r5, [r7, #300]	; 0x12c
 8011d3e:	f8c7 50cc 	str.w	r5, [r7, #204]	; 0xcc
 8011d42:	f8c7 5134 	str.w	r5, [r7, #308]	; 0x134
 8011d46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011d4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8011d4e:	4680      	mov	r8, r0
 8011d50:	49aa      	ldr	r1, [pc, #680]	; (8011ffc <kalman_3gyro.constprop.0+0x4400>)
 8011d52:	4620      	mov	r0, r4
 8011d54:	f7ef f82e 	bl	8000db4 <__aeabi_fmul>
 8011d58:	4ba9      	ldr	r3, [pc, #676]	; (8012000 <kalman_3gyro.constprop.0+0x4404>)
 8011d5a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 8011d5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8011d62:	4620      	mov	r0, r4
 8011d64:	49a7      	ldr	r1, [pc, #668]	; (8012004 <kalman_3gyro.constprop.0+0x4408>)
 8011d66:	f7ef f825 	bl	8000db4 <__aeabi_fmul>
 8011d6a:	4ba7      	ldr	r3, [pc, #668]	; (8012008 <kalman_3gyro.constprop.0+0x440c>)
 8011d6c:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
 8011d70:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8011d74:	4620      	mov	r0, r4
 8011d76:	49a5      	ldr	r1, [pc, #660]	; (801200c <kalman_3gyro.constprop.0+0x4410>)
 8011d78:	f7ef f81c 	bl	8000db4 <__aeabi_fmul>
 8011d7c:	463e      	mov	r6, r7
 8011d7e:	4fa4      	ldr	r7, [pc, #656]	; (8012010 <kalman_3gyro.constprop.0+0x4414>)
 8011d80:	4605      	mov	r5, r0
 8011d82:	f8c6 00d8 	str.w	r0, [r6, #216]	; 0xd8
 8011d86:	f8c6 70dc 	str.w	r7, [r6, #220]	; 0xdc
 8011d8a:	4620      	mov	r0, r4
 8011d8c:	49a1      	ldr	r1, [pc, #644]	; (8012014 <kalman_3gyro.constprop.0+0x4418>)
 8011d8e:	f7ef f811 	bl	8000db4 <__aeabi_fmul>
 8011d92:	4ba1      	ldr	r3, [pc, #644]	; (8012018 <kalman_3gyro.constprop.0+0x441c>)
 8011d94:	f8c6 0140 	str.w	r0, [r6, #320]	; 0x140
 8011d98:	f8c6 3144 	str.w	r3, [r6, #324]	; 0x144
 8011d9c:	4620      	mov	r0, r4
 8011d9e:	499f      	ldr	r1, [pc, #636]	; (801201c <kalman_3gyro.constprop.0+0x4420>)
 8011da0:	f7ef f808 	bl	8000db4 <__aeabi_fmul>
 8011da4:	f8c6 70e4 	str.w	r7, [r6, #228]	; 0xe4
 8011da8:	f8c6 00e0 	str.w	r0, [r6, #224]	; 0xe0
 8011dac:	499c      	ldr	r1, [pc, #624]	; (8012020 <kalman_3gyro.constprop.0+0x4424>)
 8011dae:	4620      	mov	r0, r4
 8011db0:	f7ef f800 	bl	8000db4 <__aeabi_fmul>
 8011db4:	4b9b      	ldr	r3, [pc, #620]	; (8012024 <kalman_3gyro.constprop.0+0x4428>)
 8011db6:	f8c6 0148 	str.w	r0, [r6, #328]	; 0x148
 8011dba:	f8c6 314c 	str.w	r3, [r6, #332]	; 0x14c
 8011dbe:	4620      	mov	r0, r4
 8011dc0:	4999      	ldr	r1, [pc, #612]	; (8012028 <kalman_3gyro.constprop.0+0x442c>)
 8011dc2:	f7ee fff7 	bl	8000db4 <__aeabi_fmul>
 8011dc6:	4f99      	ldr	r7, [pc, #612]	; (801202c <kalman_3gyro.constprop.0+0x4430>)
 8011dc8:	4b99      	ldr	r3, [pc, #612]	; (8012030 <kalman_3gyro.constprop.0+0x4434>)
 8011dca:	f8c6 5150 	str.w	r5, [r6, #336]	; 0x150
 8011dce:	f8c6 00e8 	str.w	r0, [r6, #232]	; 0xe8
 8011dd2:	f8c6 30ec 	str.w	r3, [r6, #236]	; 0xec
 8011dd6:	f8c6 7154 	str.w	r7, [r6, #340]	; 0x154
 8011dda:	4620      	mov	r0, r4
 8011ddc:	4995      	ldr	r1, [pc, #596]	; (8012034 <kalman_3gyro.constprop.0+0x4438>)
 8011dde:	f7ee ffe9 	bl	8000db4 <__aeabi_fmul>
 8011de2:	4d95      	ldr	r5, [pc, #596]	; (8012038 <kalman_3gyro.constprop.0+0x443c>)
 8011de4:	4b95      	ldr	r3, [pc, #596]	; (801203c <kalman_3gyro.constprop.0+0x4440>)
 8011de6:	f8c6 00f0 	str.w	r0, [r6, #240]	; 0xf0
 8011dea:	f8c6 0158 	str.w	r0, [r6, #344]	; 0x158
 8011dee:	f8c6 50f4 	str.w	r5, [r6, #244]	; 0xf4
 8011df2:	f8c6 315c 	str.w	r3, [r6, #348]	; 0x15c
 8011df6:	4620      	mov	r0, r4
 8011df8:	4991      	ldr	r1, [pc, #580]	; (8012040 <kalman_3gyro.constprop.0+0x4444>)
 8011dfa:	f7ee ffdb 	bl	8000db4 <__aeabi_fmul>
 8011dfe:	4a91      	ldr	r2, [pc, #580]	; (8012044 <kalman_3gyro.constprop.0+0x4448>)
 8011e00:	4b91      	ldr	r3, [pc, #580]	; (8012048 <kalman_3gyro.constprop.0+0x444c>)
 8011e02:	f8c6 00f8 	str.w	r0, [r6, #248]	; 0xf8
 8011e06:	f8c6 0160 	str.w	r0, [r6, #352]	; 0x160
 8011e0a:	f8c6 20fc 	str.w	r2, [r6, #252]	; 0xfc
 8011e0e:	f8c6 3164 	str.w	r3, [r6, #356]	; 0x164
 8011e12:	4620      	mov	r0, r4
 8011e14:	498d      	ldr	r1, [pc, #564]	; (801204c <kalman_3gyro.constprop.0+0x4450>)
 8011e16:	f7ee ffcd 	bl	8000db4 <__aeabi_fmul>
 8011e1a:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 8011e1e:	4b8c      	ldr	r3, [pc, #560]	; (8012050 <kalman_3gyro.constprop.0+0x4454>)
 8011e20:	f8c6 2104 	str.w	r2, [r6, #260]	; 0x104
 8011e24:	4629      	mov	r1, r5
 8011e26:	f8c6 0100 	str.w	r0, [r6, #256]	; 0x100
 8011e2a:	f8c6 0168 	str.w	r0, [r6, #360]	; 0x168
 8011e2e:	f8c6 316c 	str.w	r3, [r6, #364]	; 0x16c
 8011e32:	4620      	mov	r0, r4
 8011e34:	9600      	str	r6, [sp, #0]
 8011e36:	f7ee ffbd 	bl	8000db4 <__aeabi_fmul>
 8011e3a:	4b86      	ldr	r3, [pc, #536]	; (8012054 <kalman_3gyro.constprop.0+0x4458>)
 8011e3c:	f8c6 0108 	str.w	r0, [r6, #264]	; 0x108
 8011e40:	f8c6 0170 	str.w	r0, [r6, #368]	; 0x170
 8011e44:	f8c6 710c 	str.w	r7, [r6, #268]	; 0x10c
 8011e48:	f8c6 3174 	str.w	r3, [r6, #372]	; 0x174
 8011e4c:	4620      	mov	r0, r4
 8011e4e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8011e52:	f7ee ffaf 	bl	8000db4 <__aeabi_fmul>
 8011e56:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8011e5a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8011e5e:	f8c6 0110 	str.w	r0, [r6, #272]	; 0x110
 8011e62:	f8c6 0178 	str.w	r0, [r6, #376]	; 0x178
 8011e66:	f8c6 3114 	str.w	r3, [r6, #276]	; 0x114
 8011e6a:	f8c6 517c 	str.w	r5, [r6, #380]	; 0x17c
 8011e6e:	4620      	mov	r0, r4
 8011e70:	4979      	ldr	r1, [pc, #484]	; (8012058 <kalman_3gyro.constprop.0+0x445c>)
 8011e72:	f7ee ff9f 	bl	8000db4 <__aeabi_fmul>
 8011e76:	4637      	mov	r7, r6
 8011e78:	f8c6 511c 	str.w	r5, [r6, #284]	; 0x11c
 8011e7c:	f8c6 0118 	str.w	r0, [r6, #280]	; 0x118
 8011e80:	4976      	ldr	r1, [pc, #472]	; (801205c <kalman_3gyro.constprop.0+0x4460>)
 8011e82:	4620      	mov	r0, r4
 8011e84:	f7ee ff96 	bl	8000db4 <__aeabi_fmul>
 8011e88:	f8c6 8190 	str.w	r8, [r6, #400]	; 0x190
 8011e8c:	f04f 567c 	mov.w	r6, #1056964608	; 0x3f000000
 8011e90:	4973      	ldr	r1, [pc, #460]	; (8012060 <kalman_3gyro.constprop.0+0x4464>)
 8011e92:	4a74      	ldr	r2, [pc, #464]	; (8012064 <kalman_3gyro.constprop.0+0x4468>)
 8011e94:	f8df c1dc 	ldr.w	ip, [pc, #476]	; 8012074 <kalman_3gyro.constprop.0+0x4478>
 8011e98:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8011e9c:	f8c7 5124 	str.w	r5, [r7, #292]	; 0x124
 8011ea0:	f8c7 4188 	str.w	r4, [r7, #392]	; 0x188
 8011ea4:	4d6c      	ldr	r5, [pc, #432]	; (8012058 <kalman_3gyro.constprop.0+0x445c>)
 8011ea6:	787c      	ldrb	r4, [r7, #1]
 8011ea8:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
 8011eac:	f8c7 1184 	str.w	r1, [r7, #388]	; 0x184
 8011eb0:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
 8011eb4:	f8c7 c19c 	str.w	ip, [r7, #412]	; 0x19c
 8011eb8:	f8c7 6198 	str.w	r6, [r7, #408]	; 0x198
 8011ebc:	f8c7 5194 	str.w	r5, [r7, #404]	; 0x194
 8011ec0:	b95c      	cbnz	r4, 8011eda <kalman_3gyro.constprop.0+0x42de>
 8011ec2:	f8d7 3940 	ldr.w	r3, [r7, #2368]	; 0x940
 8011ec6:	f8d7 2944 	ldr.w	r2, [r7, #2372]	; 0x944
 8011eca:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8011ece:	f8d7 3948 	ldr.w	r3, [r7, #2376]	; 0x948
 8011ed2:	f8c7 21c0 	str.w	r2, [r7, #448]	; 0x1c0
 8011ed6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8011eda:	2300      	movs	r3, #0
 8011edc:	9a00      	ldr	r2, [sp, #0]
 8011ede:	7053      	strb	r3, [r2, #1]
 8011ee0:	f7fb bf89 	b.w	800ddf6 <kalman_3gyro.constprop.0+0x1fa>
 8011ee4:	9814      	ldr	r0, [sp, #80]	; 0x50
 8011ee6:	9906      	ldr	r1, [sp, #24]
 8011ee8:	f7ee ff64 	bl	8000db4 <__aeabi_fmul>
 8011eec:	4603      	mov	r3, r0
 8011eee:	9a00      	ldr	r2, [sp, #0]
 8011ef0:	f8d2 212c 	ldr.w	r2, [r2, #300]	; 0x12c
 8011ef4:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011ef6:	4611      	mov	r1, r2
 8011ef8:	9208      	str	r2, [sp, #32]
 8011efa:	9314      	str	r3, [sp, #80]	; 0x50
 8011efc:	f7ee ff5a 	bl	8000db4 <__aeabi_fmul>
 8011f00:	9010      	str	r0, [sp, #64]	; 0x40
 8011f02:	f7fd baff 	b.w	800f504 <kalman_3gyro.constprop.0+0x1908>
 8011f06:	483a      	ldr	r0, [pc, #232]	; (8011ff0 <kalman_3gyro.constprop.0+0x43f4>)
 8011f08:	f7fb bfd6 	b.w	800deb8 <kalman_3gyro.constprop.0+0x2bc>
 8011f0c:	4839      	ldr	r0, [pc, #228]	; (8011ff4 <kalman_3gyro.constprop.0+0x43f8>)
 8011f0e:	f7fd bb28 	b.w	800f562 <kalman_3gyro.constprop.0+0x1966>
 8011f12:	f8df a164 	ldr.w	sl, [pc, #356]	; 8012078 <kalman_3gyro.constprop.0+0x447c>
 8011f16:	4d54      	ldr	r5, [pc, #336]	; (8012068 <kalman_3gyro.constprop.0+0x446c>)
 8011f18:	4f54      	ldr	r7, [pc, #336]	; (801206c <kalman_3gyro.constprop.0+0x4470>)
 8011f1a:	4e55      	ldr	r6, [pc, #340]	; (8012070 <kalman_3gyro.constprop.0+0x4474>)
 8011f1c:	f8df b15c 	ldr.w	fp, [pc, #348]	; 801207c <kalman_3gyro.constprop.0+0x4480>
 8011f20:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011f22:	4659      	mov	r1, fp
 8011f24:	f7ee ff46 	bl	8000db4 <__aeabi_fmul>
 8011f28:	9011      	str	r0, [sp, #68]	; 0x44
 8011f2a:	f7fd bdbe 	b.w	800faaa <kalman_3gyro.constprop.0+0x1eae>
 8011f2e:	4651      	mov	r1, sl
 8011f30:	4658      	mov	r0, fp
 8011f32:	4616      	mov	r6, r2
 8011f34:	f7ee fe36 	bl	8000ba4 <__addsf3>
 8011f38:	4601      	mov	r1, r0
 8011f3a:	9802      	ldr	r0, [sp, #8]
 8011f3c:	f7ee fe32 	bl	8000ba4 <__addsf3>
 8011f40:	4601      	mov	r1, r0
 8011f42:	4640      	mov	r0, r8
 8011f44:	f7ee fe2e 	bl	8000ba4 <__addsf3>
 8011f48:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8011f4c:	f7ee ff32 	bl	8000db4 <__aeabi_fmul>
 8011f50:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8011f54:	4605      	mov	r5, r0
 8011f56:	6970      	ldr	r0, [r6, #20]
 8011f58:	f7ee ff2c 	bl	8000db4 <__aeabi_fmul>
 8011f5c:	4601      	mov	r1, r0
 8011f5e:	4628      	mov	r0, r5
 8011f60:	f7ef f8c6 	bl	80010f0 <__aeabi_fcmplt>
 8011f64:	2800      	cmp	r0, #0
 8011f66:	f040 81c6 	bne.w	80122f6 <kalman_3gyro.constprop.0+0x46fa>
 8011f6a:	f8d6 31cc 	ldr.w	r3, [r6, #460]	; 0x1cc
 8011f6e:	931d      	str	r3, [sp, #116]	; 0x74
 8011f70:	4633      	mov	r3, r6
 8011f72:	f7fd bb0f 	b.w	800f594 <kalman_3gyro.constprop.0+0x1998>
 8011f76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011f78:	9312      	str	r3, [sp, #72]	; 0x48
 8011f7a:	930f      	str	r3, [sp, #60]	; 0x3c
 8011f7c:	f7ff b972 	b.w	8011264 <kalman_3gyro.constprop.0+0x3668>
 8011f80:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 8011f82:	461e      	mov	r6, r3
 8011f84:	2c00      	cmp	r4, #0
 8011f86:	f340 8176 	ble.w	8012276 <kalman_3gyro.constprop.0+0x467a>
 8011f8a:	f04f 517b 	mov.w	r1, #1052770304	; 0x3ec00000
 8011f8e:	9821      	ldr	r0, [sp, #132]	; 0x84
 8011f90:	f7ef f8cc 	bl	800112c <__aeabi_fcmpgt>
 8011f94:	2800      	cmp	r0, #0
 8011f96:	f000 816e 	beq.w	8012276 <kalman_3gyro.constprop.0+0x467a>
 8011f9a:	3c01      	subs	r4, #1
 8011f9c:	65f4      	str	r4, [r6, #92]	; 0x5c
 8011f9e:	f7fd be82 	b.w	800fca6 <kalman_3gyro.constprop.0+0x20aa>
 8011fa2:	4608      	mov	r0, r1
 8011fa4:	f7ee ff06 	bl	8000db4 <__aeabi_fmul>
 8011fa8:	4629      	mov	r1, r5
 8011faa:	4605      	mov	r5, r0
 8011fac:	4608      	mov	r0, r1
 8011fae:	f7ee ff01 	bl	8000db4 <__aeabi_fmul>
 8011fb2:	4601      	mov	r1, r0
 8011fb4:	4628      	mov	r0, r5
 8011fb6:	f7ee fdf5 	bl	8000ba4 <__addsf3>
 8011fba:	4621      	mov	r1, r4
 8011fbc:	4605      	mov	r5, r0
 8011fbe:	4620      	mov	r0, r4
 8011fc0:	f7ee fef8 	bl	8000db4 <__aeabi_fmul>
 8011fc4:	4601      	mov	r1, r0
 8011fc6:	4628      	mov	r0, r5
 8011fc8:	f7ee fdec 	bl	8000ba4 <__addsf3>
 8011fcc:	f006 fc2e 	bl	801882c <sqrtf>
 8011fd0:	4601      	mov	r1, r0
 8011fd2:	4620      	mov	r0, r4
 8011fd4:	f7ee ffa2 	bl	8000f1c <__aeabi_fdiv>
 8011fd8:	e680      	b.n	8011cdc <kalman_3gyro.constprop.0+0x40e0>
 8011fda:	f8ad 3090 	strh.w	r3, [sp, #144]	; 0x90
 8011fde:	f88d 3092 	strb.w	r3, [sp, #146]	; 0x92
 8011fe2:	f88d 3099 	strb.w	r3, [sp, #153]	; 0x99
 8011fe6:	f88d 309b 	strb.w	r3, [sp, #155]	; 0x9b
 8011fea:	f7fd bdfc 	b.w	800fbe6 <kalman_3gyro.constprop.0+0x1fea>
 8011fee:	bf00      	nop
 8011ff0:	bf666666 	.word	0xbf666666
 8011ff4:	40a00000 	.word	0x40a00000
 8011ff8:	3ca3d70a 	.word	0x3ca3d70a
 8011ffc:	3d072b02 	.word	0x3d072b02
 8012000:	3ee66666 	.word	0x3ee66666
 8012004:	3cb43958 	.word	0x3cb43958
 8012008:	3f866666 	.word	0x3f866666
 801200c:	3d4ccccd 	.word	0x3d4ccccd
 8012010:	3eb33333 	.word	0x3eb33333
 8012014:	3cf5c28f 	.word	0x3cf5c28f
 8012018:	3f8ccccd 	.word	0x3f8ccccd
 801201c:	3d75c28f 	.word	0x3d75c28f
 8012020:	3d23d70a 	.word	0x3d23d70a
 8012024:	3f933333 	.word	0x3f933333
 8012028:	3d8f5c29 	.word	0x3d8f5c29
 801202c:	3f99999a 	.word	0x3f99999a
 8012030:	3ebd70a4 	.word	0x3ebd70a4
 8012034:	3dcccccd 	.word	0x3dcccccd
 8012038:	3ecccccd 	.word	0x3ecccccd
 801203c:	3fa66666 	.word	0x3fa66666
 8012040:	3e4ccccd 	.word	0x3e4ccccd
 8012044:	3f19999a 	.word	0x3f19999a
 8012048:	3fb9999a 	.word	0x3fb9999a
 801204c:	3e99999a 	.word	0x3e99999a
 8012050:	3fcccccd 	.word	0x3fcccccd
 8012054:	3fe66666 	.word	0x3fe66666
 8012058:	3f4ccccd 	.word	0x3f4ccccd
 801205c:	3f666666 	.word	0x3f666666
 8012060:	40200000 	.word	0x40200000
 8012064:	40400000 	.word	0x40400000
 8012068:	383cbe62 	.word	0x383cbe62
 801206c:	3c75c28f 	.word	0x3c75c28f
 8012070:	469c3e00 	.word	0x469c3e00
 8012074:	3f333333 	.word	0x3f333333
 8012078:	391d4951 	.word	0x391d4951
 801207c:	43168000 	.word	0x43168000
 8012080:	9b00      	ldr	r3, [sp, #0]
 8012082:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8012086:	9306      	str	r3, [sp, #24]
 8012088:	f7fd b879 	b.w	800f17e <kalman_3gyro.constprop.0+0x1582>
 801208c:	9814      	ldr	r0, [sp, #80]	; 0x50
 801208e:	9906      	ldr	r1, [sp, #24]
 8012090:	f7ee fe90 	bl	8000db4 <__aeabi_fmul>
 8012094:	9a00      	ldr	r2, [sp, #0]
 8012096:	4603      	mov	r3, r0
 8012098:	f8d2 218c 	ldr.w	r2, [r2, #396]	; 0x18c
 801209c:	e72a      	b.n	8011ef4 <kalman_3gyro.constprop.0+0x42f8>
 801209e:	f89d 3090 	ldrb.w	r3, [sp, #144]	; 0x90
 80120a2:	2b01      	cmp	r3, #1
 80120a4:	d003      	beq.n	80120ae <kalman_3gyro.constprop.0+0x44b2>
 80120a6:	9b04      	ldr	r3, [sp, #16]
 80120a8:	2b01      	cmp	r3, #1
 80120aa:	f47d adb3 	bne.w	800fc14 <kalman_3gyro.constprop.0+0x2018>
 80120ae:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80120b0:	9e06      	ldr	r6, [sp, #24]
 80120b2:	4620      	mov	r0, r4
 80120b4:	4631      	mov	r1, r6
 80120b6:	f7ef f82f 	bl	8001118 <__aeabi_fcmpge>
 80120ba:	2800      	cmp	r0, #0
 80120bc:	f000 87aa 	beq.w	8013014 <kalman_3gyro.constprop.0+0x5418>
 80120c0:	9469      	str	r4, [sp, #420]	; 0x1a4
 80120c2:	946a      	str	r4, [sp, #424]	; 0x1a8
 80120c4:	946b      	str	r4, [sp, #428]	; 0x1ac
 80120c6:	f7fd bda5 	b.w	800fc14 <kalman_3gyro.constprop.0+0x2018>
 80120ca:	4628      	mov	r0, r5
 80120cc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80120d0:	f7ee fd66 	bl	8000ba0 <__aeabi_fsub>
 80120d4:	f7ee fa08 	bl	80004e8 <__aeabi_f2d>
 80120d8:	f006 f982 	bl	80183e0 <ceil>
 80120dc:	f7ee fd0c 	bl	8000af8 <__aeabi_d2f>
 80120e0:	4605      	mov	r5, r0
 80120e2:	f7fc babc 	b.w	800e65e <kalman_3gyro.constprop.0+0xa62>
 80120e6:	4620      	mov	r0, r4
 80120e8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80120ec:	f7ee fd58 	bl	8000ba0 <__aeabi_fsub>
 80120f0:	f7ee f9fa 	bl	80004e8 <__aeabi_f2d>
 80120f4:	f006 f974 	bl	80183e0 <ceil>
 80120f8:	f7ee fcfe 	bl	8000af8 <__aeabi_d2f>
 80120fc:	4604      	mov	r4, r0
 80120fe:	f7fc baca 	b.w	800e696 <kalman_3gyro.constprop.0+0xa9a>
 8012102:	4630      	mov	r0, r6
 8012104:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8012108:	f7ee fd4a 	bl	8000ba0 <__aeabi_fsub>
 801210c:	f7ee f9ec 	bl	80004e8 <__aeabi_f2d>
 8012110:	f006 f966 	bl	80183e0 <ceil>
 8012114:	f7ee fcf0 	bl	8000af8 <__aeabi_d2f>
 8012118:	4606      	mov	r6, r0
 801211a:	f7fc bad8 	b.w	800e6ce <kalman_3gyro.constprop.0+0xad2>
 801211e:	4630      	mov	r0, r6
 8012120:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8012124:	f7ee fd3c 	bl	8000ba0 <__aeabi_fsub>
 8012128:	f7ee f9de 	bl	80004e8 <__aeabi_f2d>
 801212c:	f006 f958 	bl	80183e0 <ceil>
 8012130:	f7ee fce2 	bl	8000af8 <__aeabi_d2f>
 8012134:	4606      	mov	r6, r0
 8012136:	f7fc b96c 	b.w	800e412 <kalman_3gyro.constprop.0+0x816>
 801213a:	4620      	mov	r0, r4
 801213c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8012140:	f7ee fd2e 	bl	8000ba0 <__aeabi_fsub>
 8012144:	f7ee f9d0 	bl	80004e8 <__aeabi_f2d>
 8012148:	f006 f94a 	bl	80183e0 <ceil>
 801214c:	f7ee fcd4 	bl	8000af8 <__aeabi_d2f>
 8012150:	4604      	mov	r4, r0
 8012152:	f7fc b97a 	b.w	800e44a <kalman_3gyro.constprop.0+0x84e>
 8012156:	4628      	mov	r0, r5
 8012158:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 801215c:	f7ee fd20 	bl	8000ba0 <__aeabi_fsub>
 8012160:	f7ee f9c2 	bl	80004e8 <__aeabi_f2d>
 8012164:	f006 f93c 	bl	80183e0 <ceil>
 8012168:	f7ee fcc6 	bl	8000af8 <__aeabi_d2f>
 801216c:	4605      	mov	r5, r0
 801216e:	f7fc b9d4 	b.w	800e51a <kalman_3gyro.constprop.0+0x91e>
 8012172:	4620      	mov	r0, r4
 8012174:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8012178:	f7ee fd12 	bl	8000ba0 <__aeabi_fsub>
 801217c:	f7ee f9b4 	bl	80004e8 <__aeabi_f2d>
 8012180:	f006 f92e 	bl	80183e0 <ceil>
 8012184:	f7ee fcb8 	bl	8000af8 <__aeabi_d2f>
 8012188:	4604      	mov	r4, r0
 801218a:	f7fc b9e5 	b.w	800e558 <kalman_3gyro.constprop.0+0x95c>
 801218e:	4620      	mov	r0, r4
 8012190:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8012194:	f7ee fd04 	bl	8000ba0 <__aeabi_fsub>
 8012198:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 801219c:	4606      	mov	r6, r0
 801219e:	4629      	mov	r1, r5
 80121a0:	4620      	mov	r0, r4
 80121a2:	f7ee ffb9 	bl	8001118 <__aeabi_fcmpge>
 80121a6:	b900      	cbnz	r0, 80121aa <kalman_3gyro.constprop.0+0x45ae>
 80121a8:	462c      	mov	r4, r5
 80121aa:	4631      	mov	r1, r6
 80121ac:	4630      	mov	r0, r6
 80121ae:	9473      	str	r4, [sp, #460]	; 0x1cc
 80121b0:	f7ee fe00 	bl	8000db4 <__aeabi_fmul>
 80121b4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80121b8:	4604      	mov	r4, r0
 80121ba:	f7ee ffb7 	bl	800112c <__aeabi_fcmpgt>
 80121be:	2800      	cmp	r0, #0
 80121c0:	f43d ad3f 	beq.w	800fc42 <kalman_3gyro.constprop.0+0x2046>
 80121c4:	9d6c      	ldr	r5, [sp, #432]	; 0x1b0
 80121c6:	4629      	mov	r1, r5
 80121c8:	4628      	mov	r0, r5
 80121ca:	f7ee fdf3 	bl	8000db4 <__aeabi_fmul>
 80121ce:	4601      	mov	r1, r0
 80121d0:	4620      	mov	r0, r4
 80121d2:	f7ee ffab 	bl	800112c <__aeabi_fcmpgt>
 80121d6:	2800      	cmp	r0, #0
 80121d8:	f43d ad33 	beq.w	800fc42 <kalman_3gyro.constprop.0+0x2046>
 80121dc:	4621      	mov	r1, r4
 80121de:	4628      	mov	r0, r5
 80121e0:	f7ee fde8 	bl	8000db4 <__aeabi_fmul>
 80121e4:	4603      	mov	r3, r0
 80121e6:	4621      	mov	r1, r4
 80121e8:	986d      	ldr	r0, [sp, #436]	; 0x1b4
 80121ea:	936c      	str	r3, [sp, #432]	; 0x1b0
 80121ec:	f7ee fde2 	bl	8000db4 <__aeabi_fmul>
 80121f0:	4603      	mov	r3, r0
 80121f2:	4621      	mov	r1, r4
 80121f4:	986e      	ldr	r0, [sp, #440]	; 0x1b8
 80121f6:	936d      	str	r3, [sp, #436]	; 0x1b4
 80121f8:	f7ee fddc 	bl	8000db4 <__aeabi_fmul>
 80121fc:	906e      	str	r0, [sp, #440]	; 0x1b8
 80121fe:	f7fd bd20 	b.w	800fc42 <kalman_3gyro.constprop.0+0x2046>
 8012202:	4620      	mov	r0, r4
 8012204:	f7ee ff88 	bl	8001118 <__aeabi_fcmpge>
 8012208:	2800      	cmp	r0, #0
 801220a:	f43d ab1f 	beq.w	800f84c <kalman_3gyro.constprop.0+0x1c50>
 801220e:	4620      	mov	r0, r4
 8012210:	4959      	ldr	r1, [pc, #356]	; (8012378 <kalman_3gyro.constprop.0+0x477c>)
 8012212:	f7ee ff6d 	bl	80010f0 <__aeabi_fcmplt>
 8012216:	2800      	cmp	r0, #0
 8012218:	f000 830d 	beq.w	8012836 <kalman_3gyro.constprop.0+0x4c3a>
 801221c:	4957      	ldr	r1, [pc, #348]	; (801237c <kalman_3gyro.constprop.0+0x4780>)
 801221e:	4620      	mov	r0, r4
 8012220:	f7ee fcbe 	bl	8000ba0 <__aeabi_fsub>
 8012224:	4956      	ldr	r1, [pc, #344]	; (8012380 <kalman_3gyro.constprop.0+0x4784>)
 8012226:	f7ee fdc5 	bl	8000db4 <__aeabi_fmul>
 801222a:	4956      	ldr	r1, [pc, #344]	; (8012384 <kalman_3gyro.constprop.0+0x4788>)
 801222c:	f7ee fdc2 	bl	8000db4 <__aeabi_fmul>
 8012230:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8012234:	f7ee fcb6 	bl	8000ba4 <__addsf3>
 8012238:	4606      	mov	r6, r0
 801223a:	f7fd bb10 	b.w	800f85e <kalman_3gyro.constprop.0+0x1c62>
 801223e:	4628      	mov	r0, r5
 8012240:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8012244:	f7ee fcac 	bl	8000ba0 <__aeabi_fsub>
 8012248:	f7ee f94e 	bl	80004e8 <__aeabi_f2d>
 801224c:	f006 f8c8 	bl	80183e0 <ceil>
 8012250:	f7ee fc52 	bl	8000af8 <__aeabi_d2f>
 8012254:	4605      	mov	r5, r0
 8012256:	f7fc b8c0 	b.w	800e3da <kalman_3gyro.constprop.0+0x7de>
 801225a:	4630      	mov	r0, r6
 801225c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8012260:	f7ee fc9e 	bl	8000ba0 <__aeabi_fsub>
 8012264:	f7ee f940 	bl	80004e8 <__aeabi_f2d>
 8012268:	f006 f8ba 	bl	80183e0 <ceil>
 801226c:	f7ee fc44 	bl	8000af8 <__aeabi_d2f>
 8012270:	4606      	mov	r6, r0
 8012272:	f7fc b98d 	b.w	800e590 <kalman_3gyro.constprop.0+0x994>
 8012276:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 801227a:	981a      	ldr	r0, [sp, #104]	; 0x68
 801227c:	f7ee fd9a 	bl	8000db4 <__aeabi_fmul>
 8012280:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8012282:	f7ee ff53 	bl	800112c <__aeabi_fcmpgt>
 8012286:	2800      	cmp	r0, #0
 8012288:	f43d ad0d 	beq.w	800fca6 <kalman_3gyro.constprop.0+0x20aa>
 801228c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8012290:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8012292:	f7ee fd8f 	bl	8000db4 <__aeabi_fmul>
 8012296:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012298:	f7ee ff48 	bl	800112c <__aeabi_fcmpgt>
 801229c:	2800      	cmp	r0, #0
 801229e:	f43d ad02 	beq.w	800fca6 <kalman_3gyro.constprop.0+0x20aa>
 80122a2:	9915      	ldr	r1, [sp, #84]	; 0x54
 80122a4:	4608      	mov	r0, r1
 80122a6:	f7ee fc7d 	bl	8000ba4 <__addsf3>
 80122aa:	9916      	ldr	r1, [sp, #88]	; 0x58
 80122ac:	f7ee ff20 	bl	80010f0 <__aeabi_fcmplt>
 80122b0:	2800      	cmp	r0, #0
 80122b2:	f001 81fc 	beq.w	80136ae <kalman_3gyro.constprop.0+0x5ab2>
 80122b6:	2300      	movs	r3, #0
 80122b8:	9a00      	ldr	r2, [sp, #0]
 80122ba:	3503      	adds	r5, #3
 80122bc:	6595      	str	r5, [r2, #88]	; 0x58
 80122be:	f8ad 3090 	strh.w	r3, [sp, #144]	; 0x90
 80122c2:	f88d 3092 	strb.w	r3, [sp, #146]	; 0x92
 80122c6:	f88d 3099 	strb.w	r3, [sp, #153]	; 0x99
 80122ca:	f88d 309b 	strb.w	r3, [sp, #155]	; 0x9b
 80122ce:	f7fd bcea 	b.w	800fca6 <kalman_3gyro.constprop.0+0x20aa>
 80122d2:	461c      	mov	r4, r3
 80122d4:	2300      	movs	r3, #0
 80122d6:	9800      	ldr	r0, [sp, #0]
 80122d8:	f8d0 11bc 	ldr.w	r1, [r0, #444]	; 0x1bc
 80122dc:	f8d0 21c0 	ldr.w	r2, [r0, #448]	; 0x1c0
 80122e0:	f880 31a0 	strb.w	r3, [r0, #416]	; 0x1a0
 80122e4:	f880 31a3 	strb.w	r3, [r0, #419]	; 0x1a3
 80122e8:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
 80122ec:	917b      	str	r1, [sp, #492]	; 0x1ec
 80122ee:	927c      	str	r2, [sp, #496]	; 0x1f0
 80122f0:	937d      	str	r3, [sp, #500]	; 0x1f4
 80122f2:	f7fe b916 	b.w	8010522 <kalman_3gyro.constprop.0+0x2926>
 80122f6:	a930      	add	r1, sp, #192	; 0xc0
 80122f8:	a84e      	add	r0, sp, #312	; 0x138
 80122fa:	f7fa fc95 	bl	800cc28 <b_dcm2q>
 80122fe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8012302:	9c00      	ldr	r4, [sp, #0]
 8012304:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012306:	9904      	ldr	r1, [sp, #16]
 8012308:	f8c4 21c8 	str.w	r2, [r4, #456]	; 0x1c8
 801230c:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
 8012310:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8012314:	f504 70ea 	add.w	r0, r4, #468	; 0x1d4
 8012318:	f005 fbe8 	bl	8017aec <memset>
 801231c:	4b1a      	ldr	r3, [pc, #104]	; (8012388 <kalman_3gyro.constprop.0+0x478c>)
 801231e:	4626      	mov	r6, r4
 8012320:	f8c4 31d4 	str.w	r3, [r4, #468]	; 0x1d4
 8012324:	f8c4 31fc 	str.w	r3, [r4, #508]	; 0x1fc
 8012328:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
 801232c:	f8c4 324c 	str.w	r3, [r4, #588]	; 0x24c
 8012330:	f8c4 3274 	str.w	r3, [r4, #628]	; 0x274
 8012334:	f8c4 329c 	str.w	r3, [r4, #668]	; 0x29c
 8012338:	f8c4 32c4 	str.w	r3, [r4, #708]	; 0x2c4
 801233c:	f8c4 32ec 	str.w	r3, [r4, #748]	; 0x2ec
 8012340:	f8c4 3314 	str.w	r3, [r4, #788]	; 0x314
 8012344:	f8dd 37e0 	ldr.w	r3, [sp, #2016]	; 0x7e0
 8012348:	7818      	ldrb	r0, [r3, #0]
 801234a:	f7ee fcdf 	bl	8000d0c <__aeabi_i2f>
 801234e:	2100      	movs	r1, #0
 8012350:	f7ee fec4 	bl	80010dc <__aeabi_fcmpeq>
 8012354:	2800      	cmp	r0, #0
 8012356:	f000 8660 	beq.w	801301a <kalman_3gyro.constprop.0+0x541e>
 801235a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801235c:	2201      	movs	r2, #1
 801235e:	9204      	str	r2, [sp, #16]
 8012360:	9a00      	ldr	r2, [sp, #0]
 8012362:	2300      	movs	r3, #0
 8012364:	6891      	ldr	r1, [r2, #8]
 8012366:	7013      	strb	r3, [r2, #0]
 8012368:	910a      	str	r1, [sp, #40]	; 0x28
 801236a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 801236e:	4613      	mov	r3, r2
 8012370:	911d      	str	r1, [sp, #116]	; 0x74
 8012372:	f7fd b90f 	b.w	800f594 <kalman_3gyro.constprop.0+0x1998>
 8012376:	bf00      	nop
 8012378:	3c75c28f 	.word	0x3c75c28f
 801237c:	3c23d70a 	.word	0x3c23d70a
 8012380:	3f19999a 	.word	0x3f19999a
 8012384:	43480000 	.word	0x43480000
 8012388:	40a00000 	.word	0x40a00000
 801238c:	f8d4 40c8 	ldr.w	r4, [r4, #200]	; 0xc8
 8012390:	4638      	mov	r0, r7
 8012392:	4621      	mov	r1, r4
 8012394:	f7ee fec0 	bl	8001118 <__aeabi_fcmpge>
 8012398:	2800      	cmp	r0, #0
 801239a:	f001 8034 	beq.w	8013406 <kalman_3gyro.constprop.0+0x580a>
 801239e:	9e00      	ldr	r6, [sp, #0]
 80123a0:	9801      	ldr	r0, [sp, #4]
 80123a2:	f8d6 50d0 	ldr.w	r5, [r6, #208]	; 0xd0
 80123a6:	4629      	mov	r1, r5
 80123a8:	f7ee fea2 	bl	80010f0 <__aeabi_fcmplt>
 80123ac:	2800      	cmp	r0, #0
 80123ae:	f000 865b 	beq.w	8013068 <kalman_3gyro.constprop.0+0x546c>
 80123b2:	f8d6 70cc 	ldr.w	r7, [r6, #204]	; 0xcc
 80123b6:	f8d6 00d4 	ldr.w	r0, [r6, #212]	; 0xd4
 80123ba:	4639      	mov	r1, r7
 80123bc:	f7ee fbf0 	bl	8000ba0 <__aeabi_fsub>
 80123c0:	4621      	mov	r1, r4
 80123c2:	4606      	mov	r6, r0
 80123c4:	9801      	ldr	r0, [sp, #4]
 80123c6:	f7ee fbeb 	bl	8000ba0 <__aeabi_fsub>
 80123ca:	4601      	mov	r1, r0
 80123cc:	4630      	mov	r0, r6
 80123ce:	f7ee fcf1 	bl	8000db4 <__aeabi_fmul>
 80123d2:	4621      	mov	r1, r4
 80123d4:	4604      	mov	r4, r0
 80123d6:	4628      	mov	r0, r5
 80123d8:	f7ee fbe2 	bl	8000ba0 <__aeabi_fsub>
 80123dc:	4601      	mov	r1, r0
 80123de:	4620      	mov	r0, r4
 80123e0:	f7ee fd9c 	bl	8000f1c <__aeabi_fdiv>
 80123e4:	4639      	mov	r1, r7
 80123e6:	f7ee fbdd 	bl	8000ba4 <__addsf3>
 80123ea:	9006      	str	r0, [sp, #24]
 80123ec:	9b00      	ldr	r3, [sp, #0]
 80123ee:	9801      	ldr	r0, [sp, #4]
 80123f0:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
 80123f4:	4621      	mov	r1, r4
 80123f6:	f7ee fe8f 	bl	8001118 <__aeabi_fcmpge>
 80123fa:	2800      	cmp	r0, #0
 80123fc:	f000 865e 	beq.w	80130bc <kalman_3gyro.constprop.0+0x54c0>
 8012400:	9e00      	ldr	r6, [sp, #0]
 8012402:	9801      	ldr	r0, [sp, #4]
 8012404:	f8d6 50e0 	ldr.w	r5, [r6, #224]	; 0xe0
 8012408:	4629      	mov	r1, r5
 801240a:	f7ee fe71 	bl	80010f0 <__aeabi_fcmplt>
 801240e:	2800      	cmp	r0, #0
 8012410:	f001 808d 	beq.w	801352e <kalman_3gyro.constprop.0+0x5932>
 8012414:	f8d6 70dc 	ldr.w	r7, [r6, #220]	; 0xdc
 8012418:	f8d6 00e4 	ldr.w	r0, [r6, #228]	; 0xe4
 801241c:	4639      	mov	r1, r7
 801241e:	f7ee fbbf 	bl	8000ba0 <__aeabi_fsub>
 8012422:	4621      	mov	r1, r4
 8012424:	4606      	mov	r6, r0
 8012426:	9801      	ldr	r0, [sp, #4]
 8012428:	f7ee fbba 	bl	8000ba0 <__aeabi_fsub>
 801242c:	4601      	mov	r1, r0
 801242e:	4630      	mov	r0, r6
 8012430:	f7ee fcc0 	bl	8000db4 <__aeabi_fmul>
 8012434:	4621      	mov	r1, r4
 8012436:	4604      	mov	r4, r0
 8012438:	4628      	mov	r0, r5
 801243a:	f7ee fbb1 	bl	8000ba0 <__aeabi_fsub>
 801243e:	4601      	mov	r1, r0
 8012440:	4620      	mov	r0, r4
 8012442:	f7ee fd6b 	bl	8000f1c <__aeabi_fdiv>
 8012446:	4639      	mov	r1, r7
 8012448:	f7ee fbac 	bl	8000ba4 <__addsf3>
 801244c:	9006      	str	r0, [sp, #24]
 801244e:	9b00      	ldr	r3, [sp, #0]
 8012450:	9901      	ldr	r1, [sp, #4]
 8012452:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 8012456:	4620      	mov	r0, r4
 8012458:	f7ee fe54 	bl	8001104 <__aeabi_fcmple>
 801245c:	2800      	cmp	r0, #0
 801245e:	f000 865e 	beq.w	801311e <kalman_3gyro.constprop.0+0x5522>
 8012462:	9e00      	ldr	r6, [sp, #0]
 8012464:	9901      	ldr	r1, [sp, #4]
 8012466:	f8d6 50f0 	ldr.w	r5, [r6, #240]	; 0xf0
 801246a:	4628      	mov	r0, r5
 801246c:	f7ee fe5e 	bl	800112c <__aeabi_fcmpgt>
 8012470:	2800      	cmp	r0, #0
 8012472:	f001 8057 	beq.w	8013524 <kalman_3gyro.constprop.0+0x5928>
 8012476:	f8d6 70ec 	ldr.w	r7, [r6, #236]	; 0xec
 801247a:	f8d6 00f4 	ldr.w	r0, [r6, #244]	; 0xf4
 801247e:	4639      	mov	r1, r7
 8012480:	f7ee fb8e 	bl	8000ba0 <__aeabi_fsub>
 8012484:	4621      	mov	r1, r4
 8012486:	4606      	mov	r6, r0
 8012488:	9801      	ldr	r0, [sp, #4]
 801248a:	f7ee fb89 	bl	8000ba0 <__aeabi_fsub>
 801248e:	4601      	mov	r1, r0
 8012490:	4630      	mov	r0, r6
 8012492:	f7ee fc8f 	bl	8000db4 <__aeabi_fmul>
 8012496:	4621      	mov	r1, r4
 8012498:	4604      	mov	r4, r0
 801249a:	4628      	mov	r0, r5
 801249c:	f7ee fb80 	bl	8000ba0 <__aeabi_fsub>
 80124a0:	4601      	mov	r1, r0
 80124a2:	4620      	mov	r0, r4
 80124a4:	f7ee fd3a 	bl	8000f1c <__aeabi_fdiv>
 80124a8:	4639      	mov	r1, r7
 80124aa:	f7ee fb7b 	bl	8000ba4 <__addsf3>
 80124ae:	9006      	str	r0, [sp, #24]
 80124b0:	9b00      	ldr	r3, [sp, #0]
 80124b2:	9901      	ldr	r1, [sp, #4]
 80124b4:	f8d3 40f8 	ldr.w	r4, [r3, #248]	; 0xf8
 80124b8:	4620      	mov	r0, r4
 80124ba:	f7ee fe23 	bl	8001104 <__aeabi_fcmple>
 80124be:	2800      	cmp	r0, #0
 80124c0:	f000 865e 	beq.w	8013180 <kalman_3gyro.constprop.0+0x5584>
 80124c4:	9e00      	ldr	r6, [sp, #0]
 80124c6:	9901      	ldr	r1, [sp, #4]
 80124c8:	f8d6 5100 	ldr.w	r5, [r6, #256]	; 0x100
 80124cc:	4628      	mov	r0, r5
 80124ce:	f7ee fe2d 	bl	800112c <__aeabi_fcmpgt>
 80124d2:	2800      	cmp	r0, #0
 80124d4:	f001 8017 	beq.w	8013506 <kalman_3gyro.constprop.0+0x590a>
 80124d8:	f8d6 70fc 	ldr.w	r7, [r6, #252]	; 0xfc
 80124dc:	f8d6 0104 	ldr.w	r0, [r6, #260]	; 0x104
 80124e0:	4639      	mov	r1, r7
 80124e2:	f7ee fb5d 	bl	8000ba0 <__aeabi_fsub>
 80124e6:	4621      	mov	r1, r4
 80124e8:	4606      	mov	r6, r0
 80124ea:	9801      	ldr	r0, [sp, #4]
 80124ec:	f7ee fb58 	bl	8000ba0 <__aeabi_fsub>
 80124f0:	4601      	mov	r1, r0
 80124f2:	4630      	mov	r0, r6
 80124f4:	f7ee fc5e 	bl	8000db4 <__aeabi_fmul>
 80124f8:	4621      	mov	r1, r4
 80124fa:	4604      	mov	r4, r0
 80124fc:	4628      	mov	r0, r5
 80124fe:	f7ee fb4f 	bl	8000ba0 <__aeabi_fsub>
 8012502:	4601      	mov	r1, r0
 8012504:	4620      	mov	r0, r4
 8012506:	f7ee fd09 	bl	8000f1c <__aeabi_fdiv>
 801250a:	4639      	mov	r1, r7
 801250c:	f7ee fb4a 	bl	8000ba4 <__addsf3>
 8012510:	9006      	str	r0, [sp, #24]
 8012512:	9b00      	ldr	r3, [sp, #0]
 8012514:	9801      	ldr	r0, [sp, #4]
 8012516:	f8d3 4108 	ldr.w	r4, [r3, #264]	; 0x108
 801251a:	4621      	mov	r1, r4
 801251c:	f7ee fdfc 	bl	8001118 <__aeabi_fcmpge>
 8012520:	2800      	cmp	r0, #0
 8012522:	f000 865e 	beq.w	80131e2 <kalman_3gyro.constprop.0+0x55e6>
 8012526:	9e00      	ldr	r6, [sp, #0]
 8012528:	9801      	ldr	r0, [sp, #4]
 801252a:	f8d6 5110 	ldr.w	r5, [r6, #272]	; 0x110
 801252e:	4629      	mov	r1, r5
 8012530:	f7ee fdde 	bl	80010f0 <__aeabi_fcmplt>
 8012534:	2800      	cmp	r0, #0
 8012536:	f000 87e1 	beq.w	80134fc <kalman_3gyro.constprop.0+0x5900>
 801253a:	f8d6 710c 	ldr.w	r7, [r6, #268]	; 0x10c
 801253e:	f8d6 0114 	ldr.w	r0, [r6, #276]	; 0x114
 8012542:	4639      	mov	r1, r7
 8012544:	f7ee fb2c 	bl	8000ba0 <__aeabi_fsub>
 8012548:	4621      	mov	r1, r4
 801254a:	4606      	mov	r6, r0
 801254c:	9801      	ldr	r0, [sp, #4]
 801254e:	f7ee fb27 	bl	8000ba0 <__aeabi_fsub>
 8012552:	4601      	mov	r1, r0
 8012554:	4630      	mov	r0, r6
 8012556:	f7ee fc2d 	bl	8000db4 <__aeabi_fmul>
 801255a:	4621      	mov	r1, r4
 801255c:	4604      	mov	r4, r0
 801255e:	4628      	mov	r0, r5
 8012560:	f7ee fb1e 	bl	8000ba0 <__aeabi_fsub>
 8012564:	4601      	mov	r1, r0
 8012566:	4620      	mov	r0, r4
 8012568:	f7ee fcd8 	bl	8000f1c <__aeabi_fdiv>
 801256c:	4639      	mov	r1, r7
 801256e:	f7ee fb19 	bl	8000ba4 <__addsf3>
 8012572:	9006      	str	r0, [sp, #24]
 8012574:	9b00      	ldr	r3, [sp, #0]
 8012576:	9801      	ldr	r0, [sp, #4]
 8012578:	f8d3 4118 	ldr.w	r4, [r3, #280]	; 0x118
 801257c:	4621      	mov	r1, r4
 801257e:	f7ee fdcb 	bl	8001118 <__aeabi_fcmpge>
 8012582:	2800      	cmp	r0, #0
 8012584:	f43c adfb 	beq.w	800f17e <kalman_3gyro.constprop.0+0x1582>
 8012588:	9e00      	ldr	r6, [sp, #0]
 801258a:	9801      	ldr	r0, [sp, #4]
 801258c:	f8d6 5120 	ldr.w	r5, [r6, #288]	; 0x120
 8012590:	4629      	mov	r1, r5
 8012592:	f7ee fdad 	bl	80010f0 <__aeabi_fcmplt>
 8012596:	2800      	cmp	r0, #0
 8012598:	f43c adf1 	beq.w	800f17e <kalman_3gyro.constprop.0+0x1582>
 801259c:	f8d6 711c 	ldr.w	r7, [r6, #284]	; 0x11c
 80125a0:	f8d6 0124 	ldr.w	r0, [r6, #292]	; 0x124
 80125a4:	4639      	mov	r1, r7
 80125a6:	f7ee fafb 	bl	8000ba0 <__aeabi_fsub>
 80125aa:	4621      	mov	r1, r4
 80125ac:	4606      	mov	r6, r0
 80125ae:	9801      	ldr	r0, [sp, #4]
 80125b0:	f7ee faf6 	bl	8000ba0 <__aeabi_fsub>
 80125b4:	4601      	mov	r1, r0
 80125b6:	4630      	mov	r0, r6
 80125b8:	f7ee fbfc 	bl	8000db4 <__aeabi_fmul>
 80125bc:	4621      	mov	r1, r4
 80125be:	4604      	mov	r4, r0
 80125c0:	4628      	mov	r0, r5
 80125c2:	f7ee faed 	bl	8000ba0 <__aeabi_fsub>
 80125c6:	4601      	mov	r1, r0
 80125c8:	4620      	mov	r0, r4
 80125ca:	f7ee fca7 	bl	8000f1c <__aeabi_fdiv>
 80125ce:	4639      	mov	r1, r7
 80125d0:	f7ee fae8 	bl	8000ba4 <__addsf3>
 80125d4:	9006      	str	r0, [sp, #24]
 80125d6:	f7fc bdd2 	b.w	800f17e <kalman_3gyro.constprop.0+0x1582>
 80125da:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
 80125de:	4639      	mov	r1, r7
 80125e0:	4620      	mov	r0, r4
 80125e2:	f7ee fd8f 	bl	8001104 <__aeabi_fcmple>
 80125e6:	2800      	cmp	r0, #0
 80125e8:	f000 86fa 	beq.w	80133e0 <kalman_3gyro.constprop.0+0x57e4>
 80125ec:	9e00      	ldr	r6, [sp, #0]
 80125ee:	9901      	ldr	r1, [sp, #4]
 80125f0:	f8d6 5138 	ldr.w	r5, [r6, #312]	; 0x138
 80125f4:	4628      	mov	r0, r5
 80125f6:	f7ee fd99 	bl	800112c <__aeabi_fcmpgt>
 80125fa:	2800      	cmp	r0, #0
 80125fc:	f000 860b 	beq.w	8013216 <kalman_3gyro.constprop.0+0x561a>
 8012600:	f8d6 7134 	ldr.w	r7, [r6, #308]	; 0x134
 8012604:	f8d6 013c 	ldr.w	r0, [r6, #316]	; 0x13c
 8012608:	4639      	mov	r1, r7
 801260a:	f7ee fac9 	bl	8000ba0 <__aeabi_fsub>
 801260e:	4621      	mov	r1, r4
 8012610:	4606      	mov	r6, r0
 8012612:	9801      	ldr	r0, [sp, #4]
 8012614:	f7ee fac4 	bl	8000ba0 <__aeabi_fsub>
 8012618:	4601      	mov	r1, r0
 801261a:	4630      	mov	r0, r6
 801261c:	f7ee fbca 	bl	8000db4 <__aeabi_fmul>
 8012620:	4621      	mov	r1, r4
 8012622:	4604      	mov	r4, r0
 8012624:	4628      	mov	r0, r5
 8012626:	f7ee fabb 	bl	8000ba0 <__aeabi_fsub>
 801262a:	4601      	mov	r1, r0
 801262c:	4620      	mov	r0, r4
 801262e:	f7ee fc75 	bl	8000f1c <__aeabi_fdiv>
 8012632:	4639      	mov	r1, r7
 8012634:	f7ee fab6 	bl	8000ba4 <__addsf3>
 8012638:	9008      	str	r0, [sp, #32]
 801263a:	9b00      	ldr	r3, [sp, #0]
 801263c:	9901      	ldr	r1, [sp, #4]
 801263e:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
 8012642:	4620      	mov	r0, r4
 8012644:	f7ee fd5e 	bl	8001104 <__aeabi_fcmple>
 8012648:	2800      	cmp	r0, #0
 801264a:	f000 860e 	beq.w	801326a <kalman_3gyro.constprop.0+0x566e>
 801264e:	9e00      	ldr	r6, [sp, #0]
 8012650:	9901      	ldr	r1, [sp, #4]
 8012652:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
 8012656:	4628      	mov	r0, r5
 8012658:	f7ee fd68 	bl	800112c <__aeabi_fcmpgt>
 801265c:	2800      	cmp	r0, #0
 801265e:	f000 875c 	beq.w	801351a <kalman_3gyro.constprop.0+0x591e>
 8012662:	f8d6 7144 	ldr.w	r7, [r6, #324]	; 0x144
 8012666:	f8d6 014c 	ldr.w	r0, [r6, #332]	; 0x14c
 801266a:	4639      	mov	r1, r7
 801266c:	f7ee fa98 	bl	8000ba0 <__aeabi_fsub>
 8012670:	4621      	mov	r1, r4
 8012672:	4606      	mov	r6, r0
 8012674:	9801      	ldr	r0, [sp, #4]
 8012676:	f7ee fa93 	bl	8000ba0 <__aeabi_fsub>
 801267a:	4601      	mov	r1, r0
 801267c:	4630      	mov	r0, r6
 801267e:	f7ee fb99 	bl	8000db4 <__aeabi_fmul>
 8012682:	4621      	mov	r1, r4
 8012684:	4604      	mov	r4, r0
 8012686:	4628      	mov	r0, r5
 8012688:	f7ee fa8a 	bl	8000ba0 <__aeabi_fsub>
 801268c:	4601      	mov	r1, r0
 801268e:	4620      	mov	r0, r4
 8012690:	f7ee fc44 	bl	8000f1c <__aeabi_fdiv>
 8012694:	4639      	mov	r1, r7
 8012696:	f7ee fa85 	bl	8000ba4 <__addsf3>
 801269a:	9008      	str	r0, [sp, #32]
 801269c:	9b00      	ldr	r3, [sp, #0]
 801269e:	9901      	ldr	r1, [sp, #4]
 80126a0:	f8d3 4150 	ldr.w	r4, [r3, #336]	; 0x150
 80126a4:	4620      	mov	r0, r4
 80126a6:	f7ee fd2d 	bl	8001104 <__aeabi_fcmple>
 80126aa:	2800      	cmp	r0, #0
 80126ac:	f000 860e 	beq.w	80132cc <kalman_3gyro.constprop.0+0x56d0>
 80126b0:	9e00      	ldr	r6, [sp, #0]
 80126b2:	9901      	ldr	r1, [sp, #4]
 80126b4:	f8d6 5158 	ldr.w	r5, [r6, #344]	; 0x158
 80126b8:	4628      	mov	r0, r5
 80126ba:	f7ee fd37 	bl	800112c <__aeabi_fcmpgt>
 80126be:	2800      	cmp	r0, #0
 80126c0:	f000 8726 	beq.w	8013510 <kalman_3gyro.constprop.0+0x5914>
 80126c4:	f8d6 7154 	ldr.w	r7, [r6, #340]	; 0x154
 80126c8:	f8d6 015c 	ldr.w	r0, [r6, #348]	; 0x15c
 80126cc:	4639      	mov	r1, r7
 80126ce:	f7ee fa67 	bl	8000ba0 <__aeabi_fsub>
 80126d2:	4621      	mov	r1, r4
 80126d4:	4606      	mov	r6, r0
 80126d6:	9801      	ldr	r0, [sp, #4]
 80126d8:	f7ee fa62 	bl	8000ba0 <__aeabi_fsub>
 80126dc:	4601      	mov	r1, r0
 80126de:	4630      	mov	r0, r6
 80126e0:	f7ee fb68 	bl	8000db4 <__aeabi_fmul>
 80126e4:	4621      	mov	r1, r4
 80126e6:	4604      	mov	r4, r0
 80126e8:	4628      	mov	r0, r5
 80126ea:	f7ee fa59 	bl	8000ba0 <__aeabi_fsub>
 80126ee:	4601      	mov	r1, r0
 80126f0:	4620      	mov	r0, r4
 80126f2:	f7ee fc13 	bl	8000f1c <__aeabi_fdiv>
 80126f6:	4639      	mov	r1, r7
 80126f8:	f7ee fa54 	bl	8000ba4 <__addsf3>
 80126fc:	9008      	str	r0, [sp, #32]
 80126fe:	9b00      	ldr	r3, [sp, #0]
 8012700:	9901      	ldr	r1, [sp, #4]
 8012702:	f8d3 4160 	ldr.w	r4, [r3, #352]	; 0x160
 8012706:	4620      	mov	r0, r4
 8012708:	f7ee fcfc 	bl	8001104 <__aeabi_fcmple>
 801270c:	2800      	cmp	r0, #0
 801270e:	f000 860e 	beq.w	801332e <kalman_3gyro.constprop.0+0x5732>
 8012712:	9e00      	ldr	r6, [sp, #0]
 8012714:	9901      	ldr	r1, [sp, #4]
 8012716:	f8d6 5168 	ldr.w	r5, [r6, #360]	; 0x168
 801271a:	4628      	mov	r0, r5
 801271c:	f7ee fd06 	bl	800112c <__aeabi_fcmpgt>
 8012720:	2800      	cmp	r0, #0
 8012722:	f000 86db 	beq.w	80134dc <kalman_3gyro.constprop.0+0x58e0>
 8012726:	f8d6 7164 	ldr.w	r7, [r6, #356]	; 0x164
 801272a:	f8d6 016c 	ldr.w	r0, [r6, #364]	; 0x16c
 801272e:	4639      	mov	r1, r7
 8012730:	f7ee fa36 	bl	8000ba0 <__aeabi_fsub>
 8012734:	4621      	mov	r1, r4
 8012736:	4606      	mov	r6, r0
 8012738:	9801      	ldr	r0, [sp, #4]
 801273a:	f7ee fa31 	bl	8000ba0 <__aeabi_fsub>
 801273e:	4601      	mov	r1, r0
 8012740:	4630      	mov	r0, r6
 8012742:	f7ee fb37 	bl	8000db4 <__aeabi_fmul>
 8012746:	4621      	mov	r1, r4
 8012748:	4604      	mov	r4, r0
 801274a:	4628      	mov	r0, r5
 801274c:	f7ee fa28 	bl	8000ba0 <__aeabi_fsub>
 8012750:	4601      	mov	r1, r0
 8012752:	4620      	mov	r0, r4
 8012754:	f7ee fbe2 	bl	8000f1c <__aeabi_fdiv>
 8012758:	4639      	mov	r1, r7
 801275a:	f7ee fa23 	bl	8000ba4 <__addsf3>
 801275e:	9008      	str	r0, [sp, #32]
 8012760:	9b00      	ldr	r3, [sp, #0]
 8012762:	9801      	ldr	r0, [sp, #4]
 8012764:	f8d3 4170 	ldr.w	r4, [r3, #368]	; 0x170
 8012768:	4621      	mov	r1, r4
 801276a:	f7ee fcd5 	bl	8001118 <__aeabi_fcmpge>
 801276e:	2800      	cmp	r0, #0
 8012770:	f000 860e 	beq.w	8013390 <kalman_3gyro.constprop.0+0x5794>
 8012774:	9e00      	ldr	r6, [sp, #0]
 8012776:	9801      	ldr	r0, [sp, #4]
 8012778:	f8d6 5178 	ldr.w	r5, [r6, #376]	; 0x178
 801277c:	4629      	mov	r1, r5
 801277e:	f7ee fcb7 	bl	80010f0 <__aeabi_fcmplt>
 8012782:	2800      	cmp	r0, #0
 8012784:	f000 86b5 	beq.w	80134f2 <kalman_3gyro.constprop.0+0x58f6>
 8012788:	f8d6 7174 	ldr.w	r7, [r6, #372]	; 0x174
 801278c:	f8d6 017c 	ldr.w	r0, [r6, #380]	; 0x17c
 8012790:	4639      	mov	r1, r7
 8012792:	f7ee fa05 	bl	8000ba0 <__aeabi_fsub>
 8012796:	4621      	mov	r1, r4
 8012798:	4606      	mov	r6, r0
 801279a:	9801      	ldr	r0, [sp, #4]
 801279c:	f7ee fa00 	bl	8000ba0 <__aeabi_fsub>
 80127a0:	4601      	mov	r1, r0
 80127a2:	4630      	mov	r0, r6
 80127a4:	f7ee fb06 	bl	8000db4 <__aeabi_fmul>
 80127a8:	4621      	mov	r1, r4
 80127aa:	4604      	mov	r4, r0
 80127ac:	4628      	mov	r0, r5
 80127ae:	f7ee f9f7 	bl	8000ba0 <__aeabi_fsub>
 80127b2:	4601      	mov	r1, r0
 80127b4:	4620      	mov	r0, r4
 80127b6:	f7ee fbb1 	bl	8000f1c <__aeabi_fdiv>
 80127ba:	4639      	mov	r1, r7
 80127bc:	f7ee f9f2 	bl	8000ba4 <__addsf3>
 80127c0:	9008      	str	r0, [sp, #32]
 80127c2:	9b00      	ldr	r3, [sp, #0]
 80127c4:	9801      	ldr	r0, [sp, #4]
 80127c6:	f8d3 4180 	ldr.w	r4, [r3, #384]	; 0x180
 80127ca:	4621      	mov	r1, r4
 80127cc:	f7ee fca4 	bl	8001118 <__aeabi_fcmpge>
 80127d0:	b320      	cbz	r0, 801281c <kalman_3gyro.constprop.0+0x4c20>
 80127d2:	9e00      	ldr	r6, [sp, #0]
 80127d4:	9801      	ldr	r0, [sp, #4]
 80127d6:	f8d6 5188 	ldr.w	r5, [r6, #392]	; 0x188
 80127da:	4629      	mov	r1, r5
 80127dc:	f7ee fc88 	bl	80010f0 <__aeabi_fcmplt>
 80127e0:	b1e0      	cbz	r0, 801281c <kalman_3gyro.constprop.0+0x4c20>
 80127e2:	f8d6 7184 	ldr.w	r7, [r6, #388]	; 0x184
 80127e6:	f8d6 018c 	ldr.w	r0, [r6, #396]	; 0x18c
 80127ea:	4639      	mov	r1, r7
 80127ec:	f7ee f9d8 	bl	8000ba0 <__aeabi_fsub>
 80127f0:	4621      	mov	r1, r4
 80127f2:	4606      	mov	r6, r0
 80127f4:	9801      	ldr	r0, [sp, #4]
 80127f6:	f7ee f9d3 	bl	8000ba0 <__aeabi_fsub>
 80127fa:	4601      	mov	r1, r0
 80127fc:	4630      	mov	r0, r6
 80127fe:	f7ee fad9 	bl	8000db4 <__aeabi_fmul>
 8012802:	4621      	mov	r1, r4
 8012804:	4604      	mov	r4, r0
 8012806:	4628      	mov	r0, r5
 8012808:	f7ee f9ca 	bl	8000ba0 <__aeabi_fsub>
 801280c:	4601      	mov	r1, r0
 801280e:	4620      	mov	r0, r4
 8012810:	f7ee fb84 	bl	8000f1c <__aeabi_fdiv>
 8012814:	4639      	mov	r1, r7
 8012816:	f7ee f9c5 	bl	8000ba4 <__addsf3>
 801281a:	9008      	str	r0, [sp, #32]
 801281c:	9814      	ldr	r0, [sp, #80]	; 0x50
 801281e:	9906      	ldr	r1, [sp, #24]
 8012820:	f7ee fac8 	bl	8000db4 <__aeabi_fmul>
 8012824:	4603      	mov	r3, r0
 8012826:	9908      	ldr	r1, [sp, #32]
 8012828:	9810      	ldr	r0, [sp, #64]	; 0x40
 801282a:	9314      	str	r3, [sp, #80]	; 0x50
 801282c:	f7ee fac2 	bl	8000db4 <__aeabi_fmul>
 8012830:	9010      	str	r0, [sp, #64]	; 0x40
 8012832:	f7fc be67 	b.w	800f504 <kalman_3gyro.constprop.0+0x1908>
 8012836:	4620      	mov	r0, r4
 8012838:	497e      	ldr	r1, [pc, #504]	; (8012a34 <kalman_3gyro.constprop.0+0x4e38>)
 801283a:	f7ee fc59 	bl	80010f0 <__aeabi_fcmplt>
 801283e:	2800      	cmp	r0, #0
 8012840:	f43d a814 	beq.w	800f86c <kalman_3gyro.constprop.0+0x1c70>
 8012844:	497c      	ldr	r1, [pc, #496]	; (8012a38 <kalman_3gyro.constprop.0+0x4e3c>)
 8012846:	4620      	mov	r0, r4
 8012848:	f7ee f9aa 	bl	8000ba0 <__aeabi_fsub>
 801284c:	497b      	ldr	r1, [pc, #492]	; (8012a3c <kalman_3gyro.constprop.0+0x4e40>)
 801284e:	f7ee fab1 	bl	8000db4 <__aeabi_fmul>
 8012852:	497b      	ldr	r1, [pc, #492]	; (8012a40 <kalman_3gyro.constprop.0+0x4e44>)
 8012854:	f7ee faae 	bl	8000db4 <__aeabi_fmul>
 8012858:	497a      	ldr	r1, [pc, #488]	; (8012a44 <kalman_3gyro.constprop.0+0x4e48>)
 801285a:	f7ee f9a3 	bl	8000ba4 <__addsf3>
 801285e:	4606      	mov	r6, r0
 8012860:	4620      	mov	r0, r4
 8012862:	4979      	ldr	r1, [pc, #484]	; (8012a48 <kalman_3gyro.constprop.0+0x4e4c>)
 8012864:	f7ee fc58 	bl	8001118 <__aeabi_fcmpge>
 8012868:	2800      	cmp	r0, #0
 801286a:	f43d a815 	beq.w	800f898 <kalman_3gyro.constprop.0+0x1c9c>
 801286e:	4620      	mov	r0, r4
 8012870:	4976      	ldr	r1, [pc, #472]	; (8012a4c <kalman_3gyro.constprop.0+0x4e50>)
 8012872:	f7ee fc3d 	bl	80010f0 <__aeabi_fcmplt>
 8012876:	2800      	cmp	r0, #0
 8012878:	f43d a815 	beq.w	800f8a6 <kalman_3gyro.constprop.0+0x1caa>
 801287c:	4972      	ldr	r1, [pc, #456]	; (8012a48 <kalman_3gyro.constprop.0+0x4e4c>)
 801287e:	4620      	mov	r0, r4
 8012880:	f7ee f98e 	bl	8000ba0 <__aeabi_fsub>
 8012884:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8012888:	f7ee fa94 	bl	8000db4 <__aeabi_fmul>
 801288c:	4970      	ldr	r1, [pc, #448]	; (8012a50 <kalman_3gyro.constprop.0+0x4e54>)
 801288e:	f7ee fa91 	bl	8000db4 <__aeabi_fmul>
 8012892:	4970      	ldr	r1, [pc, #448]	; (8012a54 <kalman_3gyro.constprop.0+0x4e58>)
 8012894:	f7ee f986 	bl	8000ba4 <__addsf3>
 8012898:	4606      	mov	r6, r0
 801289a:	4620      	mov	r0, r4
 801289c:	496e      	ldr	r1, [pc, #440]	; (8012a58 <kalman_3gyro.constprop.0+0x4e5c>)
 801289e:	f7ee fc3b 	bl	8001118 <__aeabi_fcmpge>
 80128a2:	2800      	cmp	r0, #0
 80128a4:	f43d a814 	beq.w	800f8d0 <kalman_3gyro.constprop.0+0x1cd4>
 80128a8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80128ac:	4620      	mov	r0, r4
 80128ae:	f7ee fc1f 	bl	80010f0 <__aeabi_fcmplt>
 80128b2:	2800      	cmp	r0, #0
 80128b4:	f43d a812 	beq.w	800f8dc <kalman_3gyro.constprop.0+0x1ce0>
 80128b8:	4967      	ldr	r1, [pc, #412]	; (8012a58 <kalman_3gyro.constprop.0+0x4e5c>)
 80128ba:	4620      	mov	r0, r4
 80128bc:	f7ee f970 	bl	8000ba0 <__aeabi_fsub>
 80128c0:	4966      	ldr	r1, [pc, #408]	; (8012a5c <kalman_3gyro.constprop.0+0x4e60>)
 80128c2:	f7ee fa77 	bl	8000db4 <__aeabi_fmul>
 80128c6:	4966      	ldr	r1, [pc, #408]	; (8012a60 <kalman_3gyro.constprop.0+0x4e64>)
 80128c8:	f7ee fa74 	bl	8000db4 <__aeabi_fmul>
 80128cc:	4965      	ldr	r1, [pc, #404]	; (8012a64 <kalman_3gyro.constprop.0+0x4e68>)
 80128ce:	f7ee f969 	bl	8000ba4 <__addsf3>
 80128d2:	4606      	mov	r6, r0
 80128d4:	f7fd b811 	b.w	800f8fa <kalman_3gyro.constprop.0+0x1cfe>
 80128d8:	4620      	mov	r0, r4
 80128da:	4956      	ldr	r1, [pc, #344]	; (8012a34 <kalman_3gyro.constprop.0+0x4e38>)
 80128dc:	f7ee fc08 	bl	80010f0 <__aeabi_fcmplt>
 80128e0:	2800      	cmp	r0, #0
 80128e2:	f43d a84f 	beq.w	800f984 <kalman_3gyro.constprop.0+0x1d88>
 80128e6:	4954      	ldr	r1, [pc, #336]	; (8012a38 <kalman_3gyro.constprop.0+0x4e3c>)
 80128e8:	4620      	mov	r0, r4
 80128ea:	f7ee f959 	bl	8000ba0 <__aeabi_fsub>
 80128ee:	495e      	ldr	r1, [pc, #376]	; (8012a68 <kalman_3gyro.constprop.0+0x4e6c>)
 80128f0:	f7ee fa60 	bl	8000db4 <__aeabi_fmul>
 80128f4:	4952      	ldr	r1, [pc, #328]	; (8012a40 <kalman_3gyro.constprop.0+0x4e44>)
 80128f6:	f7ee fa5d 	bl	8000db4 <__aeabi_fmul>
 80128fa:	495c      	ldr	r1, [pc, #368]	; (8012a6c <kalman_3gyro.constprop.0+0x4e70>)
 80128fc:	f7ee f952 	bl	8000ba4 <__addsf3>
 8012900:	4683      	mov	fp, r0
 8012902:	4620      	mov	r0, r4
 8012904:	4950      	ldr	r1, [pc, #320]	; (8012a48 <kalman_3gyro.constprop.0+0x4e4c>)
 8012906:	f7ee fc07 	bl	8001118 <__aeabi_fcmpge>
 801290a:	2800      	cmp	r0, #0
 801290c:	f43d a84f 	beq.w	800f9ae <kalman_3gyro.constprop.0+0x1db2>
 8012910:	4620      	mov	r0, r4
 8012912:	494e      	ldr	r1, [pc, #312]	; (8012a4c <kalman_3gyro.constprop.0+0x4e50>)
 8012914:	f7ee fbec 	bl	80010f0 <__aeabi_fcmplt>
 8012918:	2800      	cmp	r0, #0
 801291a:	f43d a84f 	beq.w	800f9bc <kalman_3gyro.constprop.0+0x1dc0>
 801291e:	494a      	ldr	r1, [pc, #296]	; (8012a48 <kalman_3gyro.constprop.0+0x4e4c>)
 8012920:	4620      	mov	r0, r4
 8012922:	f7ee f93d 	bl	8000ba0 <__aeabi_fsub>
 8012926:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 801292a:	f7ee fa43 	bl	8000db4 <__aeabi_fmul>
 801292e:	4948      	ldr	r1, [pc, #288]	; (8012a50 <kalman_3gyro.constprop.0+0x4e54>)
 8012930:	f7ee fa40 	bl	8000db4 <__aeabi_fmul>
 8012934:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8012938:	f7ee f934 	bl	8000ba4 <__addsf3>
 801293c:	4683      	mov	fp, r0
 801293e:	4620      	mov	r0, r4
 8012940:	4945      	ldr	r1, [pc, #276]	; (8012a58 <kalman_3gyro.constprop.0+0x4e5c>)
 8012942:	f7ee fbe9 	bl	8001118 <__aeabi_fcmpge>
 8012946:	2800      	cmp	r0, #0
 8012948:	f43d a84d 	beq.w	800f9e6 <kalman_3gyro.constprop.0+0x1dea>
 801294c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8012950:	4620      	mov	r0, r4
 8012952:	f7ee fbcd 	bl	80010f0 <__aeabi_fcmplt>
 8012956:	2800      	cmp	r0, #0
 8012958:	f43d a84d 	beq.w	800f9f6 <kalman_3gyro.constprop.0+0x1dfa>
 801295c:	493e      	ldr	r1, [pc, #248]	; (8012a58 <kalman_3gyro.constprop.0+0x4e5c>)
 801295e:	4620      	mov	r0, r4
 8012960:	f7ee f91e 	bl	8000ba0 <__aeabi_fsub>
 8012964:	4942      	ldr	r1, [pc, #264]	; (8012a70 <kalman_3gyro.constprop.0+0x4e74>)
 8012966:	f7ee fa25 	bl	8000db4 <__aeabi_fmul>
 801296a:	493d      	ldr	r1, [pc, #244]	; (8012a60 <kalman_3gyro.constprop.0+0x4e64>)
 801296c:	f7ee fa22 	bl	8000db4 <__aeabi_fmul>
 8012970:	4940      	ldr	r1, [pc, #256]	; (8012a74 <kalman_3gyro.constprop.0+0x4e78>)
 8012972:	f7ee f917 	bl	8000ba4 <__addsf3>
 8012976:	4683      	mov	fp, r0
 8012978:	f7ff bad2 	b.w	8011f20 <kalman_3gyro.constprop.0+0x4324>
 801297c:	4620      	mov	r0, r4
 801297e:	f7ee fbb7 	bl	80010f0 <__aeabi_fcmplt>
 8012982:	2800      	cmp	r0, #0
 8012984:	f43c afe1 	beq.w	800f94a <kalman_3gyro.constprop.0+0x1d4e>
 8012988:	4620      	mov	r0, r4
 801298a:	492b      	ldr	r1, [pc, #172]	; (8012a38 <kalman_3gyro.constprop.0+0x4e3c>)
 801298c:	f7ee fbc4 	bl	8001118 <__aeabi_fcmpge>
 8012990:	2800      	cmp	r0, #0
 8012992:	d1a1      	bne.n	80128d8 <kalman_3gyro.constprop.0+0x4cdc>
 8012994:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 8012998:	f7fc bfed 	b.w	800f976 <kalman_3gyro.constprop.0+0x1d7a>
 801299c:	9c03      	ldr	r4, [sp, #12]
 801299e:	e499      	b.n	80122d4 <kalman_3gyro.constprop.0+0x46d8>
 80129a0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80129a2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80129a4:	f7ee fbc2 	bl	800112c <__aeabi_fcmpgt>
 80129a8:	b348      	cbz	r0, 80129fe <kalman_3gyro.constprop.0+0x4e02>
 80129aa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80129ac:	981a      	ldr	r0, [sp, #104]	; 0x68
 80129ae:	f7ee fbbd 	bl	800112c <__aeabi_fcmpgt>
 80129b2:	b320      	cbz	r0, 80129fe <kalman_3gyro.constprop.0+0x4e02>
 80129b4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80129b6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80129b8:	f7ee fbb8 	bl	800112c <__aeabi_fcmpgt>
 80129bc:	b1f8      	cbz	r0, 80129fe <kalman_3gyro.constprop.0+0x4e02>
 80129be:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 80129c2:	9822      	ldr	r0, [sp, #136]	; 0x88
 80129c4:	f7ee fb94 	bl	80010f0 <__aeabi_fcmplt>
 80129c8:	b1c8      	cbz	r0, 80129fe <kalman_3gyro.constprop.0+0x4e02>
 80129ca:	4631      	mov	r1, r6
 80129cc:	4628      	mov	r0, r5
 80129ce:	f7ee f8e9 	bl	8000ba4 <__addsf3>
 80129d2:	4601      	mov	r1, r0
 80129d4:	4620      	mov	r0, r4
 80129d6:	f7ee f8e5 	bl	8000ba4 <__addsf3>
 80129da:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80129de:	f7ee fb87 	bl	80010f0 <__aeabi_fcmplt>
 80129e2:	b160      	cbz	r0, 80129fe <kalman_3gyro.constprop.0+0x4e02>
 80129e4:	9c00      	ldr	r4, [sp, #0]
 80129e6:	9811      	ldr	r0, [sp, #68]	; 0x44
 80129e8:	f8a4 71a6 	strh.w	r7, [r4, #422]	; 0x1a6
 80129ec:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80129f0:	f7ee f9e0 	bl	8000db4 <__aeabi_fmul>
 80129f4:	f894 41a4 	ldrb.w	r4, [r4, #420]	; 0x1a4
 80129f8:	9011      	str	r0, [sp, #68]	; 0x44
 80129fa:	f7fd bced 	b.w	80103d8 <kalman_3gyro.constprop.0+0x27dc>
 80129fe:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8012a00:	2100      	movs	r1, #0
 8012a02:	4628      	mov	r0, r5
 8012a04:	f7ee fb92 	bl	800112c <__aeabi_fcmpgt>
 8012a08:	b158      	cbz	r0, 8012a22 <kalman_3gyro.constprop.0+0x4e26>
 8012a0a:	4628      	mov	r0, r5
 8012a0c:	491a      	ldr	r1, [pc, #104]	; (8012a78 <kalman_3gyro.constprop.0+0x4e7c>)
 8012a0e:	f7ee fb6f 	bl	80010f0 <__aeabi_fcmplt>
 8012a12:	2800      	cmp	r0, #0
 8012a14:	f040 865c 	bne.w	80136d0 <kalman_3gyro.constprop.0+0x5ad4>
 8012a18:	9811      	ldr	r0, [sp, #68]	; 0x44
 8012a1a:	490e      	ldr	r1, [pc, #56]	; (8012a54 <kalman_3gyro.constprop.0+0x4e58>)
 8012a1c:	f7ee f9ca 	bl	8000db4 <__aeabi_fmul>
 8012a20:	9011      	str	r0, [sp, #68]	; 0x44
 8012a22:	2300      	movs	r3, #0
 8012a24:	9a00      	ldr	r2, [sp, #0]
 8012a26:	f892 41a4 	ldrb.w	r4, [r2, #420]	; 0x1a4
 8012a2a:	f8a2 31a6 	strh.w	r3, [r2, #422]	; 0x1a6
 8012a2e:	f7fd bcd3 	b.w	80103d8 <kalman_3gyro.constprop.0+0x27dc>
 8012a32:	bf00      	nop
 8012a34:	3cf5c28f 	.word	0x3cf5c28f
 8012a38:	3c75c28f 	.word	0x3c75c28f
 8012a3c:	3ecccccc 	.word	0x3ecccccc
 8012a40:	42855556 	.word	0x42855556
 8012a44:	3fcccccd 	.word	0x3fcccccd
 8012a48:	3d4ccccd 	.word	0x3d4ccccd
 8012a4c:	3dcccccd 	.word	0x3dcccccd
 8012a50:	41a00000 	.word	0x41a00000
 8012a54:	40a00000 	.word	0x40a00000
 8012a58:	3e4ccccd 	.word	0x3e4ccccd
 8012a5c:	43f00000 	.word	0x43f00000
 8012a60:	40555555 	.word	0x40555555
 8012a64:	42ee0000 	.word	0x42ee0000
 8012a68:	3dccccd0 	.word	0x3dccccd0
 8012a6c:	3f866666 	.word	0x3f866666
 8012a70:	42200000 	.word	0x42200000
 8012a74:	41280000 	.word	0x41280000
 8012a78:	41200000 	.word	0x41200000
 8012a7c:	2301      	movs	r3, #1
 8012a7e:	9a00      	ldr	r2, [sp, #0]
 8012a80:	9811      	ldr	r0, [sp, #68]	; 0x44
 8012a82:	f882 31a4 	strb.w	r3, [r2, #420]	; 0x1a4
 8012a86:	f7ee f995 	bl	8000db4 <__aeabi_fmul>
 8012a8a:	9011      	str	r0, [sp, #68]	; 0x44
 8012a8c:	9d00      	ldr	r5, [sp, #0]
 8012a8e:	f8d5 1618 	ldr.w	r1, [r5, #1560]	; 0x618
 8012a92:	f8d5 8614 	ldr.w	r8, [r5, #1556]	; 0x614
 8012a96:	460c      	mov	r4, r1
 8012a98:	4640      	mov	r0, r8
 8012a9a:	4641      	mov	r1, r8
 8012a9c:	f7ee f98a 	bl	8000db4 <__aeabi_fmul>
 8012aa0:	4621      	mov	r1, r4
 8012aa2:	4604      	mov	r4, r0
 8012aa4:	4608      	mov	r0, r1
 8012aa6:	9101      	str	r1, [sp, #4]
 8012aa8:	f7ee f984 	bl	8000db4 <__aeabi_fmul>
 8012aac:	4601      	mov	r1, r0
 8012aae:	4620      	mov	r0, r4
 8012ab0:	f7ee f878 	bl	8000ba4 <__addsf3>
 8012ab4:	f8d5 a61c 	ldr.w	sl, [r5, #1564]	; 0x61c
 8012ab8:	4604      	mov	r4, r0
 8012aba:	4651      	mov	r1, sl
 8012abc:	4650      	mov	r0, sl
 8012abe:	f7ee f979 	bl	8000db4 <__aeabi_fmul>
 8012ac2:	4601      	mov	r1, r0
 8012ac4:	4620      	mov	r0, r4
 8012ac6:	f7ee f86d 	bl	8000ba4 <__addsf3>
 8012aca:	f005 feaf 	bl	801882c <sqrtf>
 8012ace:	f8d5 6784 	ldr.w	r6, [r5, #1924]	; 0x784
 8012ad2:	9002      	str	r0, [sp, #8]
 8012ad4:	4631      	mov	r1, r6
 8012ad6:	4630      	mov	r0, r6
 8012ad8:	f7ee f96c 	bl	8000db4 <__aeabi_fmul>
 8012adc:	462f      	mov	r7, r5
 8012ade:	f8d5 5788 	ldr.w	r5, [r5, #1928]	; 0x788
 8012ae2:	4604      	mov	r4, r0
 8012ae4:	4629      	mov	r1, r5
 8012ae6:	4628      	mov	r0, r5
 8012ae8:	f7ee f964 	bl	8000db4 <__aeabi_fmul>
 8012aec:	4601      	mov	r1, r0
 8012aee:	4620      	mov	r0, r4
 8012af0:	f7ee f858 	bl	8000ba4 <__addsf3>
 8012af4:	f8d7 478c 	ldr.w	r4, [r7, #1932]	; 0x78c
 8012af8:	4607      	mov	r7, r0
 8012afa:	4621      	mov	r1, r4
 8012afc:	4620      	mov	r0, r4
 8012afe:	f7ee f959 	bl	8000db4 <__aeabi_fmul>
 8012b02:	4601      	mov	r1, r0
 8012b04:	4638      	mov	r0, r7
 8012b06:	f7ee f84d 	bl	8000ba4 <__addsf3>
 8012b0a:	f005 fe8f 	bl	801882c <sqrtf>
 8012b0e:	4601      	mov	r1, r0
 8012b10:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8012b14:	f7ee fa02 	bl	8000f1c <__aeabi_fdiv>
 8012b18:	4607      	mov	r7, r0
 8012b1a:	4630      	mov	r0, r6
 8012b1c:	4639      	mov	r1, r7
 8012b1e:	f7ee f949 	bl	8000db4 <__aeabi_fmul>
 8012b22:	4602      	mov	r2, r0
 8012b24:	4639      	mov	r1, r7
 8012b26:	4628      	mov	r0, r5
 8012b28:	922d      	str	r2, [sp, #180]	; 0xb4
 8012b2a:	f7ee f943 	bl	8000db4 <__aeabi_fmul>
 8012b2e:	4602      	mov	r2, r0
 8012b30:	4639      	mov	r1, r7
 8012b32:	4620      	mov	r0, r4
 8012b34:	922e      	str	r2, [sp, #184]	; 0xb8
 8012b36:	f7ee f93d 	bl	8000db4 <__aeabi_fmul>
 8012b3a:	4602      	mov	r2, r0
 8012b3c:	9b02      	ldr	r3, [sp, #8]
 8012b3e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8012b42:	4619      	mov	r1, r3
 8012b44:	922f      	str	r2, [sp, #188]	; 0xbc
 8012b46:	f7ee f9e9 	bl	8000f1c <__aeabi_fdiv>
 8012b4a:	4604      	mov	r4, r0
 8012b4c:	4640      	mov	r0, r8
 8012b4e:	4621      	mov	r1, r4
 8012b50:	f7ee f930 	bl	8000db4 <__aeabi_fmul>
 8012b54:	4603      	mov	r3, r0
 8012b56:	4621      	mov	r1, r4
 8012b58:	9801      	ldr	r0, [sp, #4]
 8012b5a:	9327      	str	r3, [sp, #156]	; 0x9c
 8012b5c:	f7ee f92a 	bl	8000db4 <__aeabi_fmul>
 8012b60:	4603      	mov	r3, r0
 8012b62:	4621      	mov	r1, r4
 8012b64:	4650      	mov	r0, sl
 8012b66:	9328      	str	r3, [sp, #160]	; 0xa0
 8012b68:	f7ee f924 	bl	8000db4 <__aeabi_fmul>
 8012b6c:	4603      	mov	r3, r0
 8012b6e:	ae60      	add	r6, sp, #384	; 0x180
 8012b70:	4635      	mov	r5, r6
 8012b72:	aa57      	add	r2, sp, #348	; 0x15c
 8012b74:	a927      	add	r1, sp, #156	; 0x9c
 8012b76:	a82d      	add	r0, sp, #180	; 0xb4
 8012b78:	9329      	str	r3, [sp, #164]	; 0xa4
 8012b7a:	f7f9 ff5f 	bl	800ca3c <getRotationMatrix>
 8012b7e:	46b4      	mov	ip, r6
 8012b80:	af57      	add	r7, sp, #348	; 0x15c
 8012b82:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012b84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012b86:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012b88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012b8a:	683f      	ldr	r7, [r7, #0]
 8012b8c:	f20d 44bc 	addw	r4, sp, #1212	; 0x4bc
 8012b90:	602f      	str	r7, [r5, #0]
 8012b92:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012b96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012b98:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012b9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012b9e:	e9d6 5300 	ldrd	r5, r3, [r6]
 8012ba2:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 8012ba6:	f023 4800 	bic.w	r8, r3, #2147483648	; 0x80000000
 8012baa:	4628      	mov	r0, r5
 8012bac:	4641      	mov	r1, r8
 8012bae:	6027      	str	r7, [r4, #0]
 8012bb0:	f7ee fa9e 	bl	80010f0 <__aeabi_fcmplt>
 8012bb4:	2800      	cmp	r0, #0
 8012bb6:	f040 8417 	bne.w	80133e8 <kalman_3gyro.constprop.0+0x57ec>
 8012bba:	2303      	movs	r3, #3
 8012bbc:	2704      	movs	r7, #4
 8012bbe:	f04f 0e06 	mov.w	lr, #6
 8012bc2:	9308      	str	r3, [sp, #32]
 8012bc4:	2307      	movs	r3, #7
 8012bc6:	2400      	movs	r4, #0
 8012bc8:	46ba      	mov	sl, r7
 8012bca:	f04f 0801 	mov.w	r8, #1
 8012bce:	e9cd 3e04 	strd	r3, lr, [sp, #16]
 8012bd2:	9402      	str	r4, [sp, #8]
 8012bd4:	68b3      	ldr	r3, [r6, #8]
 8012bd6:	4629      	mov	r1, r5
 8012bd8:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8012bdc:	f7ee faa6 	bl	800112c <__aeabi_fcmpgt>
 8012be0:	2800      	cmp	r0, #0
 8012be2:	f000 8471 	beq.w	80134c8 <kalman_3gyro.constprop.0+0x58cc>
 8012be6:	2308      	movs	r3, #8
 8012be8:	461c      	mov	r4, r3
 8012bea:	9305      	str	r3, [sp, #20]
 8012bec:	2307      	movs	r3, #7
 8012bee:	9304      	str	r3, [sp, #16]
 8012bf0:	2305      	movs	r3, #5
 8012bf2:	9308      	str	r3, [sp, #32]
 8012bf4:	2300      	movs	r3, #0
 8012bf6:	2704      	movs	r7, #4
 8012bf8:	9301      	str	r3, [sp, #4]
 8012bfa:	2302      	movs	r3, #2
 8012bfc:	46ba      	mov	sl, r7
 8012bfe:	2506      	movs	r5, #6
 8012c00:	f04f 0801 	mov.w	r8, #1
 8012c04:	9302      	str	r3, [sp, #8]
 8012c06:	5931      	ldr	r1, [r6, r4]
 8012c08:	f856 000a 	ldr.w	r0, [r6, sl]
 8012c0c:	f7ee f986 	bl	8000f1c <__aeabi_fdiv>
 8012c10:	f20d 43bc 	addw	r3, sp, #1212	; 0x4bc
 8012c14:	9c01      	ldr	r4, [sp, #4]
 8012c16:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8012c1a:	9b02      	ldr	r3, [sp, #8]
 8012c1c:	f20d 42bc 	addw	r2, sp, #1212	; 0x4bc
 8012c20:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8012c24:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8012c28:	f7ee f978 	bl	8000f1c <__aeabi_fdiv>
 8012c2c:	f20d 42bc 	addw	r2, sp, #1212	; 0x4bc
 8012c30:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8012c34:	f852 6028 	ldr.w	r6, [r2, r8, lsl #2]
 8012c38:	9401      	str	r4, [sp, #4]
 8012c3a:	9c08      	ldr	r4, [sp, #32]
 8012c3c:	f20d 41bc 	addw	r1, sp, #1212	; 0x4bc
 8012c40:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
 8012c44:	4682      	mov	sl, r0
 8012c46:	4630      	mov	r0, r6
 8012c48:	f7ee f8b4 	bl	8000db4 <__aeabi_fmul>
 8012c4c:	f20d 42bc 	addw	r2, sp, #1212	; 0x4bc
 8012c50:	4601      	mov	r1, r0
 8012c52:	f852 0027 	ldr.w	r0, [r2, r7, lsl #2]
 8012c56:	f7ed ffa3 	bl	8000ba0 <__aeabi_fsub>
 8012c5a:	f20d 42bc 	addw	r2, sp, #1212	; 0x4bc
 8012c5e:	f842 0027 	str.w	r0, [r2, r7, lsl #2]
 8012c62:	f20d 41bc 	addw	r1, sp, #1212	; 0x4bc
 8012c66:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
 8012c6a:	4650      	mov	r0, sl
 8012c6c:	f7ee f8a2 	bl	8000db4 <__aeabi_fmul>
 8012c70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012c72:	4601      	mov	r1, r0
 8012c74:	f20d 40bc 	addw	r0, sp, #1212	; 0x4bc
 8012c78:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8012c7c:	f7ed ff90 	bl	8000ba0 <__aeabi_fsub>
 8012c80:	4604      	mov	r4, r0
 8012c82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012c84:	f20d 40bc 	addw	r0, sp, #1212	; 0x4bc
 8012c88:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
 8012c8c:	4630      	mov	r0, r6
 8012c8e:	9e05      	ldr	r6, [sp, #20]
 8012c90:	f20d 4cbc 	addw	ip, sp, #1212	; 0x4bc
 8012c94:	f85c 1026 	ldr.w	r1, [ip, r6, lsl #2]
 8012c98:	f7ee f88c 	bl	8000db4 <__aeabi_fmul>
 8012c9c:	9e04      	ldr	r6, [sp, #16]
 8012c9e:	f20d 4cbc 	addw	ip, sp, #1212	; 0x4bc
 8012ca2:	4601      	mov	r1, r0
 8012ca4:	f85c 0026 	ldr.w	r0, [ip, r6, lsl #2]
 8012ca8:	f7ed ff7a 	bl	8000ba0 <__aeabi_fsub>
 8012cac:	9b05      	ldr	r3, [sp, #20]
 8012cae:	f20d 4ebc 	addw	lr, sp, #1212	; 0x4bc
 8012cb2:	f84e 0026 	str.w	r0, [lr, r6, lsl #2]
 8012cb6:	f85e 1023 	ldr.w	r1, [lr, r3, lsl #2]
 8012cba:	4650      	mov	r0, sl
 8012cbc:	f7ee f87a 	bl	8000db4 <__aeabi_fmul>
 8012cc0:	4601      	mov	r1, r0
 8012cc2:	f20d 40bc 	addw	r0, sp, #1212	; 0x4bc
 8012cc6:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8012cca:	f7ed ff69 	bl	8000ba0 <__aeabi_fsub>
 8012cce:	f20d 4cbc 	addw	ip, sp, #1212	; 0x4bc
 8012cd2:	f84c 0025 	str.w	r0, [ip, r5, lsl #2]
 8012cd6:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 8012cda:	f024 4000 	bic.w	r0, r4, #2147483648	; 0x80000000
 8012cde:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8012ce2:	f7ee fa23 	bl	800112c <__aeabi_fcmpgt>
 8012ce6:	b148      	cbz	r0, 8012cfc <kalman_3gyro.constprop.0+0x5100>
 8012ce8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012cea:	4629      	mov	r1, r5
 8012cec:	4643      	mov	r3, r8
 8012cee:	970b      	str	r7, [sp, #44]	; 0x2c
 8012cf0:	4635      	mov	r5, r6
 8012cf2:	4617      	mov	r7, r2
 8012cf4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012cf8:	9104      	str	r1, [sp, #16]
 8012cfa:	9301      	str	r3, [sp, #4]
 8012cfc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8012cfe:	f20d 43bc 	addw	r3, sp, #1212	; 0x4bc
 8012d02:	f20d 42bc 	addw	r2, sp, #1212	; 0x4bc
 8012d06:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 8012d0a:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8012d0e:	f7ee f905 	bl	8000f1c <__aeabi_fdiv>
 8012d12:	f20d 43bc 	addw	r3, sp, #1212	; 0x4bc
 8012d16:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012d1a:	9b04      	ldr	r3, [sp, #16]
 8012d1c:	f20d 42bc 	addw	r2, sp, #1212	; 0x4bc
 8012d20:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8012d24:	4682      	mov	sl, r0
 8012d26:	f7ee f845 	bl	8000db4 <__aeabi_fmul>
 8012d2a:	f20d 42bc 	addw	r2, sp, #1212	; 0x4bc
 8012d2e:	4601      	mov	r1, r0
 8012d30:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8012d34:	f7ed ff34 	bl	8000ba0 <__aeabi_fsub>
 8012d38:	4601      	mov	r1, r0
 8012d3a:	f20d 42bc 	addw	r2, sp, #1212	; 0x4bc
 8012d3e:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
 8012d42:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8012d46:	f7ee f8e9 	bl	8000f1c <__aeabi_fdiv>
 8012d4a:	4603      	mov	r3, r0
 8012d4c:	f20d 42bc 	addw	r2, sp, #1212	; 0x4bc
 8012d50:	f852 1027 	ldr.w	r1, [r2, r7, lsl #2]
 8012d54:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8012d58:	461f      	mov	r7, r3
 8012d5a:	f7ee f8df 	bl	8000f1c <__aeabi_fdiv>
 8012d5e:	4603      	mov	r3, r0
 8012d60:	9c02      	ldr	r4, [sp, #8]
 8012d62:	f20d 41bc 	addw	r1, sp, #1212	; 0x4bc
 8012d66:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
 8012d6a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8012d6e:	9306      	str	r3, [sp, #24]
 8012d70:	f7ee f8d4 	bl	8000f1c <__aeabi_fdiv>
 8012d74:	4602      	mov	r2, r0
 8012d76:	f50d 60f6 	add.w	r0, sp, #1968	; 0x7b0
 8012d7a:	eb00 0184 	add.w	r1, r0, r4, lsl #2
 8012d7e:	f5a1 61cf 	sub.w	r1, r1, #1656	; 0x678
 8012d82:	680e      	ldr	r6, [r1, #0]
 8012d84:	f20d 40bc 	addw	r0, sp, #1212	; 0x4bc
 8012d88:	f850 0028 	ldr.w	r0, [r0, r8, lsl #2]
 8012d8c:	4631      	mov	r1, r6
 8012d8e:	9207      	str	r2, [sp, #28]
 8012d90:	9402      	str	r4, [sp, #8]
 8012d92:	900a      	str	r0, [sp, #40]	; 0x28
 8012d94:	f7ee f80e 	bl	8000db4 <__aeabi_fmul>
 8012d98:	f50d 65f6 	add.w	r5, sp, #1968	; 0x7b0
 8012d9c:	eb05 0488 	add.w	r4, r5, r8, lsl #2
 8012da0:	f5a4 64cf 	sub.w	r4, r4, #1656	; 0x678
 8012da4:	4601      	mov	r1, r0
 8012da6:	6820      	ldr	r0, [r4, #0]
 8012da8:	f7ed fefa 	bl	8000ba0 <__aeabi_fsub>
 8012dac:	9d01      	ldr	r5, [sp, #4]
 8012dae:	f20d 4cbc 	addw	ip, sp, #1212	; 0x4bc
 8012db2:	f85c c025 	ldr.w	ip, [ip, r5, lsl #2]
 8012db6:	f50d 6ef6 	add.w	lr, sp, #1968	; 0x7b0
 8012dba:	4604      	mov	r4, r0
 8012dbc:	4631      	mov	r1, r6
 8012dbe:	4660      	mov	r0, ip
 8012dc0:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8012dc4:	eb0e 0585 	add.w	r5, lr, r5, lsl #2
 8012dc8:	f7ed fff4 	bl	8000db4 <__aeabi_fmul>
 8012dcc:	f5a5 65cf 	sub.w	r5, r5, #1656	; 0x678
 8012dd0:	4601      	mov	r1, r0
 8012dd2:	6828      	ldr	r0, [r5, #0]
 8012dd4:	f7ed fee4 	bl	8000ba0 <__aeabi_fsub>
 8012dd8:	4651      	mov	r1, sl
 8012dda:	4605      	mov	r5, r0
 8012ddc:	4620      	mov	r0, r4
 8012dde:	f7ed ffe9 	bl	8000db4 <__aeabi_fmul>
 8012de2:	4601      	mov	r1, r0
 8012de4:	4628      	mov	r0, r5
 8012de6:	f7ed fedb 	bl	8000ba0 <__aeabi_fsub>
 8012dea:	4639      	mov	r1, r7
 8012dec:	f7ed ffe2 	bl	8000db4 <__aeabi_fmul>
 8012df0:	9b04      	ldr	r3, [sp, #16]
 8012df2:	f20d 4ebc 	addw	lr, sp, #1212	; 0x4bc
 8012df6:	f85e e023 	ldr.w	lr, [lr, r3, lsl #2]
 8012dfa:	4605      	mov	r5, r0
 8012dfc:	4671      	mov	r1, lr
 8012dfe:	f8cd e010 	str.w	lr, [sp, #16]
 8012e02:	9059      	str	r0, [sp, #356]	; 0x164
 8012e04:	f7ed ffd6 	bl	8000db4 <__aeabi_fmul>
 8012e08:	4601      	mov	r1, r0
 8012e0a:	4620      	mov	r0, r4
 8012e0c:	f7ed fec8 	bl	8000ba0 <__aeabi_fsub>
 8012e10:	9906      	ldr	r1, [sp, #24]
 8012e12:	f7ed ffcf 	bl	8000db4 <__aeabi_fmul>
 8012e16:	4604      	mov	r4, r0
 8012e18:	9b05      	ldr	r3, [sp, #20]
 8012e1a:	f20d 4cbc 	addw	ip, sp, #1212	; 0x4bc
 8012e1e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8012e22:	4628      	mov	r0, r5
 8012e24:	4611      	mov	r1, r2
 8012e26:	920c      	str	r2, [sp, #48]	; 0x30
 8012e28:	9458      	str	r4, [sp, #352]	; 0x160
 8012e2a:	f7ed ffc3 	bl	8000db4 <__aeabi_fmul>
 8012e2e:	4601      	mov	r1, r0
 8012e30:	4630      	mov	r0, r6
 8012e32:	f7ed feb5 	bl	8000ba0 <__aeabi_fsub>
 8012e36:	4601      	mov	r1, r0
 8012e38:	9b08      	ldr	r3, [sp, #32]
 8012e3a:	f20d 46bc 	addw	r6, sp, #1212	; 0x4bc
 8012e3e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8012e42:	4620      	mov	r0, r4
 8012e44:	460c      	mov	r4, r1
 8012e46:	4619      	mov	r1, r3
 8012e48:	9305      	str	r3, [sp, #20]
 8012e4a:	f7ed ffb3 	bl	8000db4 <__aeabi_fmul>
 8012e4e:	4601      	mov	r1, r0
 8012e50:	4620      	mov	r0, r4
 8012e52:	f7ed fea5 	bl	8000ba0 <__aeabi_fsub>
 8012e56:	9907      	ldr	r1, [sp, #28]
 8012e58:	f7ed ffac 	bl	8000db4 <__aeabi_fmul>
 8012e5c:	4605      	mov	r5, r0
 8012e5e:	9b02      	ldr	r3, [sp, #8]
 8012e60:	f50d 66f6 	add.w	r6, sp, #1968	; 0x7b0
 8012e64:	eb06 0183 	add.w	r1, r6, r3, lsl #2
 8012e68:	f2a1 616c 	subw	r1, r1, #1644	; 0x66c
 8012e6c:	680e      	ldr	r6, [r1, #0]
 8012e6e:	f50d 63f6 	add.w	r3, sp, #1968	; 0x7b0
 8012e72:	4631      	mov	r1, r6
 8012e74:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012e76:	eb03 0488 	add.w	r4, r3, r8, lsl #2
 8012e7a:	9557      	str	r5, [sp, #348]	; 0x15c
 8012e7c:	f7ed ff9a 	bl	8000db4 <__aeabi_fmul>
 8012e80:	f2a4 646c 	subw	r4, r4, #1644	; 0x66c
 8012e84:	4601      	mov	r1, r0
 8012e86:	6820      	ldr	r0, [r4, #0]
 8012e88:	f7ed fe8a 	bl	8000ba0 <__aeabi_fsub>
 8012e8c:	9a01      	ldr	r2, [sp, #4]
 8012e8e:	f50d 63f6 	add.w	r3, sp, #1968	; 0x7b0
 8012e92:	4605      	mov	r5, r0
 8012e94:	4631      	mov	r1, r6
 8012e96:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8012e98:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012e9c:	f7ed ff8a 	bl	8000db4 <__aeabi_fmul>
 8012ea0:	f2a4 646c 	subw	r4, r4, #1644	; 0x66c
 8012ea4:	4601      	mov	r1, r0
 8012ea6:	6820      	ldr	r0, [r4, #0]
 8012ea8:	f7ed fe7a 	bl	8000ba0 <__aeabi_fsub>
 8012eac:	4629      	mov	r1, r5
 8012eae:	4604      	mov	r4, r0
 8012eb0:	4650      	mov	r0, sl
 8012eb2:	f7ed ff7f 	bl	8000db4 <__aeabi_fmul>
 8012eb6:	4601      	mov	r1, r0
 8012eb8:	4620      	mov	r0, r4
 8012eba:	f7ed fe71 	bl	8000ba0 <__aeabi_fsub>
 8012ebe:	4639      	mov	r1, r7
 8012ec0:	f7ed ff78 	bl	8000db4 <__aeabi_fmul>
 8012ec4:	4604      	mov	r4, r0
 8012ec6:	9804      	ldr	r0, [sp, #16]
 8012ec8:	4621      	mov	r1, r4
 8012eca:	945c      	str	r4, [sp, #368]	; 0x170
 8012ecc:	f7ed ff72 	bl	8000db4 <__aeabi_fmul>
 8012ed0:	4601      	mov	r1, r0
 8012ed2:	4628      	mov	r0, r5
 8012ed4:	f7ed fe64 	bl	8000ba0 <__aeabi_fsub>
 8012ed8:	9906      	ldr	r1, [sp, #24]
 8012eda:	f7ed ff6b 	bl	8000db4 <__aeabi_fmul>
 8012ede:	4605      	mov	r5, r0
 8012ee0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012ee2:	4621      	mov	r1, r4
 8012ee4:	4610      	mov	r0, r2
 8012ee6:	9208      	str	r2, [sp, #32]
 8012ee8:	955b      	str	r5, [sp, #364]	; 0x16c
 8012eea:	f7ed ff63 	bl	8000db4 <__aeabi_fmul>
 8012eee:	4601      	mov	r1, r0
 8012ef0:	4630      	mov	r0, r6
 8012ef2:	f7ed fe55 	bl	8000ba0 <__aeabi_fsub>
 8012ef6:	9b05      	ldr	r3, [sp, #20]
 8012ef8:	4629      	mov	r1, r5
 8012efa:	4604      	mov	r4, r0
 8012efc:	4618      	mov	r0, r3
 8012efe:	f7ed ff59 	bl	8000db4 <__aeabi_fmul>
 8012f02:	4601      	mov	r1, r0
 8012f04:	4620      	mov	r0, r4
 8012f06:	f7ed fe4b 	bl	8000ba0 <__aeabi_fsub>
 8012f0a:	9907      	ldr	r1, [sp, #28]
 8012f0c:	f7ed ff52 	bl	8000db4 <__aeabi_fmul>
 8012f10:	4605      	mov	r5, r0
 8012f12:	9c02      	ldr	r4, [sp, #8]
 8012f14:	f50d 66f6 	add.w	r6, sp, #1968	; 0x7b0
 8012f18:	eb06 0184 	add.w	r1, r6, r4, lsl #2
 8012f1c:	f5a1 61cc 	sub.w	r1, r1, #1632	; 0x660
 8012f20:	680e      	ldr	r6, [r1, #0]
 8012f22:	f50d 63f6 	add.w	r3, sp, #1968	; 0x7b0
 8012f26:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012f28:	4630      	mov	r0, r6
 8012f2a:	eb03 0488 	add.w	r4, r3, r8, lsl #2
 8012f2e:	955a      	str	r5, [sp, #360]	; 0x168
 8012f30:	f7ed ff40 	bl	8000db4 <__aeabi_fmul>
 8012f34:	f5a4 64cc 	sub.w	r4, r4, #1632	; 0x660
 8012f38:	4601      	mov	r1, r0
 8012f3a:	6820      	ldr	r0, [r4, #0]
 8012f3c:	f7ed fe30 	bl	8000ba0 <__aeabi_fsub>
 8012f40:	9a01      	ldr	r2, [sp, #4]
 8012f42:	f50d 63f6 	add.w	r3, sp, #1968	; 0x7b0
 8012f46:	4605      	mov	r5, r0
 8012f48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012f4a:	4630      	mov	r0, r6
 8012f4c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012f50:	f7ed ff30 	bl	8000db4 <__aeabi_fmul>
 8012f54:	f5a4 64cc 	sub.w	r4, r4, #1632	; 0x660
 8012f58:	4601      	mov	r1, r0
 8012f5a:	6820      	ldr	r0, [r4, #0]
 8012f5c:	f7ed fe20 	bl	8000ba0 <__aeabi_fsub>
 8012f60:	4629      	mov	r1, r5
 8012f62:	4604      	mov	r4, r0
 8012f64:	4650      	mov	r0, sl
 8012f66:	f7ed ff25 	bl	8000db4 <__aeabi_fmul>
 8012f6a:	4601      	mov	r1, r0
 8012f6c:	4620      	mov	r0, r4
 8012f6e:	f7ed fe17 	bl	8000ba0 <__aeabi_fsub>
 8012f72:	4639      	mov	r1, r7
 8012f74:	f7ed ff1e 	bl	8000db4 <__aeabi_fmul>
 8012f78:	9904      	ldr	r1, [sp, #16]
 8012f7a:	4604      	mov	r4, r0
 8012f7c:	905f      	str	r0, [sp, #380]	; 0x17c
 8012f7e:	f7ed ff19 	bl	8000db4 <__aeabi_fmul>
 8012f82:	4601      	mov	r1, r0
 8012f84:	4628      	mov	r0, r5
 8012f86:	f7ed fe0b 	bl	8000ba0 <__aeabi_fsub>
 8012f8a:	9906      	ldr	r1, [sp, #24]
 8012f8c:	f7ed ff12 	bl	8000db4 <__aeabi_fmul>
 8012f90:	4605      	mov	r5, r0
 8012f92:	9a08      	ldr	r2, [sp, #32]
 8012f94:	4620      	mov	r0, r4
 8012f96:	4611      	mov	r1, r2
 8012f98:	955e      	str	r5, [sp, #376]	; 0x178
 8012f9a:	f7ed ff0b 	bl	8000db4 <__aeabi_fmul>
 8012f9e:	4601      	mov	r1, r0
 8012fa0:	4630      	mov	r0, r6
 8012fa2:	f7ed fdfd 	bl	8000ba0 <__aeabi_fsub>
 8012fa6:	9b05      	ldr	r3, [sp, #20]
 8012fa8:	4604      	mov	r4, r0
 8012faa:	4619      	mov	r1, r3
 8012fac:	4628      	mov	r0, r5
 8012fae:	f7ed ff01 	bl	8000db4 <__aeabi_fmul>
 8012fb2:	4601      	mov	r1, r0
 8012fb4:	4620      	mov	r0, r4
 8012fb6:	f7ed fdf3 	bl	8000ba0 <__aeabi_fsub>
 8012fba:	9907      	ldr	r1, [sp, #28]
 8012fbc:	f7ed fefa 	bl	8000db4 <__aeabi_fmul>
 8012fc0:	4603      	mov	r3, r0
 8012fc2:	a938      	add	r1, sp, #224	; 0xe0
 8012fc4:	a857      	add	r0, sp, #348	; 0x15c
 8012fc6:	935d      	str	r3, [sp, #372]	; 0x174
 8012fc8:	f7f9 fe2e 	bl	800cc28 <b_dcm2q>
 8012fcc:	9938      	ldr	r1, [sp, #224]	; 0xe0
 8012fce:	9c39      	ldr	r4, [sp, #228]	; 0xe4
 8012fd0:	4608      	mov	r0, r1
 8012fd2:	f7ed fde7 	bl	8000ba4 <__addsf3>
 8012fd6:	4603      	mov	r3, r0
 8012fd8:	4621      	mov	r1, r4
 8012fda:	4620      	mov	r0, r4
 8012fdc:	9327      	str	r3, [sp, #156]	; 0x9c
 8012fde:	f7ed fde1 	bl	8000ba4 <__addsf3>
 8012fe2:	993a      	ldr	r1, [sp, #232]	; 0xe8
 8012fe4:	9028      	str	r0, [sp, #160]	; 0xa0
 8012fe6:	4608      	mov	r0, r1
 8012fe8:	f7ed fddc 	bl	8000ba4 <__addsf3>
 8012fec:	9b00      	ldr	r3, [sp, #0]
 8012fee:	9029      	str	r0, [sp, #164]	; 0xa4
 8012ff0:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	f43d a9f2 	beq.w	80103de <kalman_3gyro.constprop.0+0x27e2>
 8012ffa:	2300      	movs	r3, #0
 8012ffc:	9a00      	ldr	r2, [sp, #0]
 8012ffe:	9c03      	ldr	r4, [sp, #12]
 8013000:	f882 31a0 	strb.w	r3, [r2, #416]	; 0x1a0
 8013004:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
 8013008:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
 801300c:	f882 31a3 	strb.w	r3, [r2, #419]	; 0x1a3
 8013010:	f7fd ba87 	b.w	8010522 <kalman_3gyro.constprop.0+0x2926>
 8013014:	4634      	mov	r4, r6
 8013016:	f7ff b853 	b.w	80120c0 <kalman_3gyro.constprop.0+0x44c4>
 801301a:	f8dd 37e0 	ldr.w	r3, [sp, #2016]	; 0x7e0
 801301e:	6859      	ldr	r1, [r3, #4]
 8013020:	689c      	ldr	r4, [r3, #8]
 8013022:	4608      	mov	r0, r1
 8013024:	f7ed fec6 	bl	8000db4 <__aeabi_fmul>
 8013028:	4621      	mov	r1, r4
 801302a:	4604      	mov	r4, r0
 801302c:	4608      	mov	r0, r1
 801302e:	f7ed fec1 	bl	8000db4 <__aeabi_fmul>
 8013032:	4601      	mov	r1, r0
 8013034:	4620      	mov	r0, r4
 8013036:	f7ed fdb5 	bl	8000ba4 <__addsf3>
 801303a:	f8dd 37e0 	ldr.w	r3, [sp, #2016]	; 0x7e0
 801303e:	4605      	mov	r5, r0
 8013040:	68dc      	ldr	r4, [r3, #12]
 8013042:	4621      	mov	r1, r4
 8013044:	4620      	mov	r0, r4
 8013046:	f7ed feb5 	bl	8000db4 <__aeabi_fmul>
 801304a:	4601      	mov	r1, r0
 801304c:	4628      	mov	r0, r5
 801304e:	f7ed fda9 	bl	8000ba4 <__addsf3>
 8013052:	f005 fbeb 	bl	801882c <sqrtf>
 8013056:	4601      	mov	r1, r0
 8013058:	4620      	mov	r0, r4
 801305a:	f7ed ff5f 	bl	8000f1c <__aeabi_fdiv>
 801305e:	4604      	mov	r4, r0
 8013060:	f8c6 01c8 	str.w	r0, [r6, #456]	; 0x1c8
 8013064:	f7ff b97a 	b.w	801235c <kalman_3gyro.constprop.0+0x4760>
 8013068:	2300      	movs	r3, #0
 801306a:	462c      	mov	r4, r5
 801306c:	9306      	str	r3, [sp, #24]
 801306e:	9e00      	ldr	r6, [sp, #0]
 8013070:	9801      	ldr	r0, [sp, #4]
 8013072:	f8d6 50d8 	ldr.w	r5, [r6, #216]	; 0xd8
 8013076:	4629      	mov	r1, r5
 8013078:	f7ee f83a 	bl	80010f0 <__aeabi_fcmplt>
 801307c:	2800      	cmp	r0, #0
 801307e:	f000 8253 	beq.w	8013528 <kalman_3gyro.constprop.0+0x592c>
 8013082:	f8d6 70d4 	ldr.w	r7, [r6, #212]	; 0xd4
 8013086:	f8d6 00dc 	ldr.w	r0, [r6, #220]	; 0xdc
 801308a:	4639      	mov	r1, r7
 801308c:	f7ed fd88 	bl	8000ba0 <__aeabi_fsub>
 8013090:	4621      	mov	r1, r4
 8013092:	4606      	mov	r6, r0
 8013094:	9801      	ldr	r0, [sp, #4]
 8013096:	f7ed fd83 	bl	8000ba0 <__aeabi_fsub>
 801309a:	4601      	mov	r1, r0
 801309c:	4630      	mov	r0, r6
 801309e:	f7ed fe89 	bl	8000db4 <__aeabi_fmul>
 80130a2:	4621      	mov	r1, r4
 80130a4:	4604      	mov	r4, r0
 80130a6:	4628      	mov	r0, r5
 80130a8:	f7ed fd7a 	bl	8000ba0 <__aeabi_fsub>
 80130ac:	4601      	mov	r1, r0
 80130ae:	4620      	mov	r0, r4
 80130b0:	f7ed ff34 	bl	8000f1c <__aeabi_fdiv>
 80130b4:	4639      	mov	r1, r7
 80130b6:	f7ed fd75 	bl	8000ba4 <__addsf3>
 80130ba:	9006      	str	r0, [sp, #24]
 80130bc:	9b00      	ldr	r3, [sp, #0]
 80130be:	9801      	ldr	r0, [sp, #4]
 80130c0:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
 80130c4:	4621      	mov	r1, r4
 80130c6:	f7ee f827 	bl	8001118 <__aeabi_fcmpge>
 80130ca:	2800      	cmp	r0, #0
 80130cc:	f43f a9bf 	beq.w	801244e <kalman_3gyro.constprop.0+0x4852>
 80130d0:	9e00      	ldr	r6, [sp, #0]
 80130d2:	9801      	ldr	r0, [sp, #4]
 80130d4:	f8d6 50e8 	ldr.w	r5, [r6, #232]	; 0xe8
 80130d8:	4629      	mov	r1, r5
 80130da:	f7ee f809 	bl	80010f0 <__aeabi_fcmplt>
 80130de:	2800      	cmp	r0, #0
 80130e0:	f000 821d 	beq.w	801351e <kalman_3gyro.constprop.0+0x5922>
 80130e4:	f8d6 70e4 	ldr.w	r7, [r6, #228]	; 0xe4
 80130e8:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
 80130ec:	4639      	mov	r1, r7
 80130ee:	f7ed fd57 	bl	8000ba0 <__aeabi_fsub>
 80130f2:	4621      	mov	r1, r4
 80130f4:	4606      	mov	r6, r0
 80130f6:	9801      	ldr	r0, [sp, #4]
 80130f8:	f7ed fd52 	bl	8000ba0 <__aeabi_fsub>
 80130fc:	4601      	mov	r1, r0
 80130fe:	4630      	mov	r0, r6
 8013100:	f7ed fe58 	bl	8000db4 <__aeabi_fmul>
 8013104:	4621      	mov	r1, r4
 8013106:	4604      	mov	r4, r0
 8013108:	4628      	mov	r0, r5
 801310a:	f7ed fd49 	bl	8000ba0 <__aeabi_fsub>
 801310e:	4601      	mov	r1, r0
 8013110:	4620      	mov	r0, r4
 8013112:	f7ed ff03 	bl	8000f1c <__aeabi_fdiv>
 8013116:	4639      	mov	r1, r7
 8013118:	f7ed fd44 	bl	8000ba4 <__addsf3>
 801311c:	9006      	str	r0, [sp, #24]
 801311e:	9b00      	ldr	r3, [sp, #0]
 8013120:	9901      	ldr	r1, [sp, #4]
 8013122:	f8d3 40f0 	ldr.w	r4, [r3, #240]	; 0xf0
 8013126:	4620      	mov	r0, r4
 8013128:	f7ed ffec 	bl	8001104 <__aeabi_fcmple>
 801312c:	2800      	cmp	r0, #0
 801312e:	f43f a9bf 	beq.w	80124b0 <kalman_3gyro.constprop.0+0x48b4>
 8013132:	9e00      	ldr	r6, [sp, #0]
 8013134:	9901      	ldr	r1, [sp, #4]
 8013136:	f8d6 50f8 	ldr.w	r5, [r6, #248]	; 0xf8
 801313a:	4628      	mov	r0, r5
 801313c:	f7ed fff6 	bl	800112c <__aeabi_fcmpgt>
 8013140:	2800      	cmp	r0, #0
 8013142:	f000 81dd 	beq.w	8013500 <kalman_3gyro.constprop.0+0x5904>
 8013146:	f8d6 70f4 	ldr.w	r7, [r6, #244]	; 0xf4
 801314a:	f8d6 00fc 	ldr.w	r0, [r6, #252]	; 0xfc
 801314e:	4639      	mov	r1, r7
 8013150:	f7ed fd26 	bl	8000ba0 <__aeabi_fsub>
 8013154:	4621      	mov	r1, r4
 8013156:	4606      	mov	r6, r0
 8013158:	9801      	ldr	r0, [sp, #4]
 801315a:	f7ed fd21 	bl	8000ba0 <__aeabi_fsub>
 801315e:	4601      	mov	r1, r0
 8013160:	4630      	mov	r0, r6
 8013162:	f7ed fe27 	bl	8000db4 <__aeabi_fmul>
 8013166:	4621      	mov	r1, r4
 8013168:	4604      	mov	r4, r0
 801316a:	4628      	mov	r0, r5
 801316c:	f7ed fd18 	bl	8000ba0 <__aeabi_fsub>
 8013170:	4601      	mov	r1, r0
 8013172:	4620      	mov	r0, r4
 8013174:	f7ed fed2 	bl	8000f1c <__aeabi_fdiv>
 8013178:	4639      	mov	r1, r7
 801317a:	f7ed fd13 	bl	8000ba4 <__addsf3>
 801317e:	9006      	str	r0, [sp, #24]
 8013180:	9b00      	ldr	r3, [sp, #0]
 8013182:	9901      	ldr	r1, [sp, #4]
 8013184:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
 8013188:	4620      	mov	r0, r4
 801318a:	f7ed ffbb 	bl	8001104 <__aeabi_fcmple>
 801318e:	2800      	cmp	r0, #0
 8013190:	f43f a9bf 	beq.w	8012512 <kalman_3gyro.constprop.0+0x4916>
 8013194:	9e00      	ldr	r6, [sp, #0]
 8013196:	9901      	ldr	r1, [sp, #4]
 8013198:	f8d6 5108 	ldr.w	r5, [r6, #264]	; 0x108
 801319c:	4628      	mov	r0, r5
 801319e:	f7ed ffc5 	bl	800112c <__aeabi_fcmpgt>
 80131a2:	2800      	cmp	r0, #0
 80131a4:	f000 81a7 	beq.w	80134f6 <kalman_3gyro.constprop.0+0x58fa>
 80131a8:	f8d6 7104 	ldr.w	r7, [r6, #260]	; 0x104
 80131ac:	f8d6 010c 	ldr.w	r0, [r6, #268]	; 0x10c
 80131b0:	4639      	mov	r1, r7
 80131b2:	f7ed fcf5 	bl	8000ba0 <__aeabi_fsub>
 80131b6:	4621      	mov	r1, r4
 80131b8:	4606      	mov	r6, r0
 80131ba:	9801      	ldr	r0, [sp, #4]
 80131bc:	f7ed fcf0 	bl	8000ba0 <__aeabi_fsub>
 80131c0:	4601      	mov	r1, r0
 80131c2:	4630      	mov	r0, r6
 80131c4:	f7ed fdf6 	bl	8000db4 <__aeabi_fmul>
 80131c8:	4621      	mov	r1, r4
 80131ca:	4604      	mov	r4, r0
 80131cc:	4628      	mov	r0, r5
 80131ce:	f7ed fce7 	bl	8000ba0 <__aeabi_fsub>
 80131d2:	4601      	mov	r1, r0
 80131d4:	4620      	mov	r0, r4
 80131d6:	f7ed fea1 	bl	8000f1c <__aeabi_fdiv>
 80131da:	4639      	mov	r1, r7
 80131dc:	f7ed fce2 	bl	8000ba4 <__addsf3>
 80131e0:	9006      	str	r0, [sp, #24]
 80131e2:	9b00      	ldr	r3, [sp, #0]
 80131e4:	9901      	ldr	r1, [sp, #4]
 80131e6:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
 80131ea:	4620      	mov	r0, r4
 80131ec:	f7ed ff8a 	bl	8001104 <__aeabi_fcmple>
 80131f0:	2800      	cmp	r0, #0
 80131f2:	f43f a9bf 	beq.w	8012574 <kalman_3gyro.constprop.0+0x4978>
 80131f6:	9e00      	ldr	r6, [sp, #0]
 80131f8:	9901      	ldr	r1, [sp, #4]
 80131fa:	f8d6 5118 	ldr.w	r5, [r6, #280]	; 0x118
 80131fe:	4628      	mov	r0, r5
 8013200:	f7ed ff94 	bl	800112c <__aeabi_fcmpgt>
 8013204:	2800      	cmp	r0, #0
 8013206:	f000 816e 	beq.w	80134e6 <kalman_3gyro.constprop.0+0x58ea>
 801320a:	f8d6 7114 	ldr.w	r7, [r6, #276]	; 0x114
 801320e:	f8d6 011c 	ldr.w	r0, [r6, #284]	; 0x11c
 8013212:	f7ff b9c7 	b.w	80125a4 <kalman_3gyro.constprop.0+0x49a8>
 8013216:	2300      	movs	r3, #0
 8013218:	462c      	mov	r4, r5
 801321a:	9308      	str	r3, [sp, #32]
 801321c:	9e00      	ldr	r6, [sp, #0]
 801321e:	9901      	ldr	r1, [sp, #4]
 8013220:	f8d6 5140 	ldr.w	r5, [r6, #320]	; 0x140
 8013224:	4628      	mov	r0, r5
 8013226:	f7ed ff81 	bl	800112c <__aeabi_fcmpgt>
 801322a:	2800      	cmp	r0, #0
 801322c:	f000 815e 	beq.w	80134ec <kalman_3gyro.constprop.0+0x58f0>
 8013230:	f8d6 713c 	ldr.w	r7, [r6, #316]	; 0x13c
 8013234:	f8d6 0144 	ldr.w	r0, [r6, #324]	; 0x144
 8013238:	4639      	mov	r1, r7
 801323a:	f7ed fcb1 	bl	8000ba0 <__aeabi_fsub>
 801323e:	4621      	mov	r1, r4
 8013240:	4606      	mov	r6, r0
 8013242:	9801      	ldr	r0, [sp, #4]
 8013244:	f7ed fcac 	bl	8000ba0 <__aeabi_fsub>
 8013248:	4601      	mov	r1, r0
 801324a:	4630      	mov	r0, r6
 801324c:	f7ed fdb2 	bl	8000db4 <__aeabi_fmul>
 8013250:	4621      	mov	r1, r4
 8013252:	4604      	mov	r4, r0
 8013254:	4628      	mov	r0, r5
 8013256:	f7ed fca3 	bl	8000ba0 <__aeabi_fsub>
 801325a:	4601      	mov	r1, r0
 801325c:	4620      	mov	r0, r4
 801325e:	f7ed fe5d 	bl	8000f1c <__aeabi_fdiv>
 8013262:	4639      	mov	r1, r7
 8013264:	f7ed fc9e 	bl	8000ba4 <__addsf3>
 8013268:	9008      	str	r0, [sp, #32]
 801326a:	9b00      	ldr	r3, [sp, #0]
 801326c:	9901      	ldr	r1, [sp, #4]
 801326e:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8013272:	4620      	mov	r0, r4
 8013274:	f7ed ff46 	bl	8001104 <__aeabi_fcmple>
 8013278:	2800      	cmp	r0, #0
 801327a:	f43f aa0f 	beq.w	801269c <kalman_3gyro.constprop.0+0x4aa0>
 801327e:	9e00      	ldr	r6, [sp, #0]
 8013280:	9901      	ldr	r1, [sp, #4]
 8013282:	f8d6 5150 	ldr.w	r5, [r6, #336]	; 0x150
 8013286:	4628      	mov	r0, r5
 8013288:	f7ed ff50 	bl	800112c <__aeabi_fcmpgt>
 801328c:	2800      	cmp	r0, #0
 801328e:	f000 8141 	beq.w	8013514 <kalman_3gyro.constprop.0+0x5918>
 8013292:	f8d6 714c 	ldr.w	r7, [r6, #332]	; 0x14c
 8013296:	f8d6 0154 	ldr.w	r0, [r6, #340]	; 0x154
 801329a:	4639      	mov	r1, r7
 801329c:	f7ed fc80 	bl	8000ba0 <__aeabi_fsub>
 80132a0:	4621      	mov	r1, r4
 80132a2:	4606      	mov	r6, r0
 80132a4:	9801      	ldr	r0, [sp, #4]
 80132a6:	f7ed fc7b 	bl	8000ba0 <__aeabi_fsub>
 80132aa:	4601      	mov	r1, r0
 80132ac:	4630      	mov	r0, r6
 80132ae:	f7ed fd81 	bl	8000db4 <__aeabi_fmul>
 80132b2:	4621      	mov	r1, r4
 80132b4:	4604      	mov	r4, r0
 80132b6:	4628      	mov	r0, r5
 80132b8:	f7ed fc72 	bl	8000ba0 <__aeabi_fsub>
 80132bc:	4601      	mov	r1, r0
 80132be:	4620      	mov	r0, r4
 80132c0:	f7ed fe2c 	bl	8000f1c <__aeabi_fdiv>
 80132c4:	4639      	mov	r1, r7
 80132c6:	f7ed fc6d 	bl	8000ba4 <__addsf3>
 80132ca:	9008      	str	r0, [sp, #32]
 80132cc:	9b00      	ldr	r3, [sp, #0]
 80132ce:	9901      	ldr	r1, [sp, #4]
 80132d0:	f8d3 4158 	ldr.w	r4, [r3, #344]	; 0x158
 80132d4:	4620      	mov	r0, r4
 80132d6:	f7ed ff15 	bl	8001104 <__aeabi_fcmple>
 80132da:	2800      	cmp	r0, #0
 80132dc:	f43f aa0f 	beq.w	80126fe <kalman_3gyro.constprop.0+0x4b02>
 80132e0:	9e00      	ldr	r6, [sp, #0]
 80132e2:	9901      	ldr	r1, [sp, #4]
 80132e4:	f8d6 5160 	ldr.w	r5, [r6, #352]	; 0x160
 80132e8:	4628      	mov	r0, r5
 80132ea:	f7ed ff1f 	bl	800112c <__aeabi_fcmpgt>
 80132ee:	2800      	cmp	r0, #0
 80132f0:	f000 810b 	beq.w	801350a <kalman_3gyro.constprop.0+0x590e>
 80132f4:	f8d6 715c 	ldr.w	r7, [r6, #348]	; 0x15c
 80132f8:	f8d6 0164 	ldr.w	r0, [r6, #356]	; 0x164
 80132fc:	4639      	mov	r1, r7
 80132fe:	f7ed fc4f 	bl	8000ba0 <__aeabi_fsub>
 8013302:	4621      	mov	r1, r4
 8013304:	4606      	mov	r6, r0
 8013306:	9801      	ldr	r0, [sp, #4]
 8013308:	f7ed fc4a 	bl	8000ba0 <__aeabi_fsub>
 801330c:	4601      	mov	r1, r0
 801330e:	4630      	mov	r0, r6
 8013310:	f7ed fd50 	bl	8000db4 <__aeabi_fmul>
 8013314:	4621      	mov	r1, r4
 8013316:	4604      	mov	r4, r0
 8013318:	4628      	mov	r0, r5
 801331a:	f7ed fc41 	bl	8000ba0 <__aeabi_fsub>
 801331e:	4601      	mov	r1, r0
 8013320:	4620      	mov	r0, r4
 8013322:	f7ed fdfb 	bl	8000f1c <__aeabi_fdiv>
 8013326:	4639      	mov	r1, r7
 8013328:	f7ed fc3c 	bl	8000ba4 <__addsf3>
 801332c:	9008      	str	r0, [sp, #32]
 801332e:	9b00      	ldr	r3, [sp, #0]
 8013330:	9801      	ldr	r0, [sp, #4]
 8013332:	f8d3 4168 	ldr.w	r4, [r3, #360]	; 0x168
 8013336:	4621      	mov	r1, r4
 8013338:	f7ed feee 	bl	8001118 <__aeabi_fcmpge>
 801333c:	2800      	cmp	r0, #0
 801333e:	f43f aa0f 	beq.w	8012760 <kalman_3gyro.constprop.0+0x4b64>
 8013342:	9e00      	ldr	r6, [sp, #0]
 8013344:	9801      	ldr	r0, [sp, #4]
 8013346:	f8d6 5170 	ldr.w	r5, [r6, #368]	; 0x170
 801334a:	4629      	mov	r1, r5
 801334c:	f7ed fed0 	bl	80010f0 <__aeabi_fcmplt>
 8013350:	2800      	cmp	r0, #0
 8013352:	f000 80c0 	beq.w	80134d6 <kalman_3gyro.constprop.0+0x58da>
 8013356:	f8d6 716c 	ldr.w	r7, [r6, #364]	; 0x16c
 801335a:	f8d6 0174 	ldr.w	r0, [r6, #372]	; 0x174
 801335e:	4639      	mov	r1, r7
 8013360:	f7ed fc1e 	bl	8000ba0 <__aeabi_fsub>
 8013364:	4621      	mov	r1, r4
 8013366:	4606      	mov	r6, r0
 8013368:	9801      	ldr	r0, [sp, #4]
 801336a:	f7ed fc19 	bl	8000ba0 <__aeabi_fsub>
 801336e:	4601      	mov	r1, r0
 8013370:	4630      	mov	r0, r6
 8013372:	f7ed fd1f 	bl	8000db4 <__aeabi_fmul>
 8013376:	4621      	mov	r1, r4
 8013378:	4604      	mov	r4, r0
 801337a:	4628      	mov	r0, r5
 801337c:	f7ed fc10 	bl	8000ba0 <__aeabi_fsub>
 8013380:	4601      	mov	r1, r0
 8013382:	4620      	mov	r0, r4
 8013384:	f7ed fdca 	bl	8000f1c <__aeabi_fdiv>
 8013388:	4639      	mov	r1, r7
 801338a:	f7ed fc0b 	bl	8000ba4 <__addsf3>
 801338e:	9008      	str	r0, [sp, #32]
 8013390:	9b00      	ldr	r3, [sp, #0]
 8013392:	9801      	ldr	r0, [sp, #4]
 8013394:	f8d3 4178 	ldr.w	r4, [r3, #376]	; 0x178
 8013398:	4621      	mov	r1, r4
 801339a:	f7ed febd 	bl	8001118 <__aeabi_fcmpge>
 801339e:	2800      	cmp	r0, #0
 80133a0:	f43f aa0f 	beq.w	80127c2 <kalman_3gyro.constprop.0+0x4bc6>
 80133a4:	9e00      	ldr	r6, [sp, #0]
 80133a6:	9801      	ldr	r0, [sp, #4]
 80133a8:	f8d6 5180 	ldr.w	r5, [r6, #384]	; 0x180
 80133ac:	4629      	mov	r1, r5
 80133ae:	f7ed fe9f 	bl	80010f0 <__aeabi_fcmplt>
 80133b2:	2800      	cmp	r0, #0
 80133b4:	f000 8094 	beq.w	80134e0 <kalman_3gyro.constprop.0+0x58e4>
 80133b8:	f8d6 717c 	ldr.w	r7, [r6, #380]	; 0x17c
 80133bc:	f8d6 0184 	ldr.w	r0, [r6, #388]	; 0x184
 80133c0:	f7ff ba13 	b.w	80127ea <kalman_3gyro.constprop.0+0x4bee>
 80133c4:	461a      	mov	r2, r3
 80133c6:	f8b3 31a6 	ldrh.w	r3, [r3, #422]	; 0x1a6
 80133ca:	3301      	adds	r3, #1
 80133cc:	b29b      	uxth	r3, r3
 80133ce:	2b31      	cmp	r3, #49	; 0x31
 80133d0:	f8a2 31a6 	strh.w	r3, [r2, #422]	; 0x1a6
 80133d4:	f200 81c9 	bhi.w	801376a <kalman_3gyro.constprop.0+0x5b6e>
 80133d8:	4613      	mov	r3, r2
 80133da:	49bb      	ldr	r1, [pc, #748]	; (80136c8 <kalman_3gyro.constprop.0+0x5acc>)
 80133dc:	f7fc bfec 	b.w	80103b8 <kalman_3gyro.constprop.0+0x27bc>
 80133e0:	2300      	movs	r3, #0
 80133e2:	9308      	str	r3, [sp, #32]
 80133e4:	f7fb bf0f 	b.w	800f206 <kalman_3gyro.constprop.0+0x160a>
 80133e8:	2306      	movs	r3, #6
 80133ea:	2207      	movs	r2, #7
 80133ec:	f04f 0a00 	mov.w	sl, #0
 80133f0:	2404      	movs	r4, #4
 80133f2:	e9cd 3204 	strd	r3, r2, [sp, #16]
 80133f6:	2301      	movs	r3, #1
 80133f8:	4645      	mov	r5, r8
 80133fa:	2703      	movs	r7, #3
 80133fc:	46d0      	mov	r8, sl
 80133fe:	9408      	str	r4, [sp, #32]
 8013400:	9302      	str	r3, [sp, #8]
 8013402:	f7ff bbe7 	b.w	8012bd4 <kalman_3gyro.constprop.0+0x4fd8>
 8013406:	2300      	movs	r3, #0
 8013408:	9306      	str	r3, [sp, #24]
 801340a:	f7fb bfea 	b.w	800f3e2 <kalman_3gyro.constprop.0+0x17e6>
 801340e:	463d      	mov	r5, r7
 8013410:	f7fc bcc5 	b.w	800fd9e <kalman_3gyro.constprop.0+0x21a2>
 8013414:	46b8      	mov	r8, r7
 8013416:	f7fc bce0 	b.w	800fdda <kalman_3gyro.constprop.0+0x21de>
 801341a:	463d      	mov	r5, r7
 801341c:	f7fc bcd6 	b.w	800fdcc <kalman_3gyro.constprop.0+0x21d0>
 8013420:	46b8      	mov	r8, r7
 8013422:	f7fc bcc4 	b.w	800fdae <kalman_3gyro.constprop.0+0x21b2>
 8013426:	463c      	mov	r4, r7
 8013428:	f7fc bd05 	b.w	800fe36 <kalman_3gyro.constprop.0+0x223a>
 801342c:	463e      	mov	r6, r7
 801342e:	f7fc bcfb 	b.w	800fe28 <kalman_3gyro.constprop.0+0x222c>
 8013432:	463c      	mov	r4, r7
 8013434:	f7fc bce8 	b.w	800fe08 <kalman_3gyro.constprop.0+0x220c>
 8013438:	463d      	mov	r5, r7
 801343a:	f7fc bcdd 	b.w	800fdf8 <kalman_3gyro.constprop.0+0x21fc>
 801343e:	46b8      	mov	r8, r7
 8013440:	f7fc bd9f 	b.w	800ff82 <kalman_3gyro.constprop.0+0x2386>
 8013444:	463d      	mov	r5, r7
 8013446:	f7fc bd94 	b.w	800ff72 <kalman_3gyro.constprop.0+0x2376>
 801344a:	463c      	mov	r4, r7
 801344c:	f7fc bddd 	b.w	801000a <kalman_3gyro.constprop.0+0x240e>
 8013450:	463e      	mov	r6, r7
 8013452:	f7fc bdd3 	b.w	800fffc <kalman_3gyro.constprop.0+0x2400>
 8013456:	463c      	mov	r4, r7
 8013458:	f7fc bdc0 	b.w	800ffdc <kalman_3gyro.constprop.0+0x23e0>
 801345c:	463d      	mov	r5, r7
 801345e:	f7fc bdb5 	b.w	800ffcc <kalman_3gyro.constprop.0+0x23d0>
 8013462:	46b8      	mov	r8, r7
 8013464:	f7fc bda3 	b.w	800ffae <kalman_3gyro.constprop.0+0x23b2>
 8013468:	463d      	mov	r5, r7
 801346a:	f7fc bd99 	b.w	800ffa0 <kalman_3gyro.constprop.0+0x23a4>
 801346e:	4625      	mov	r5, r4
 8013470:	f7fc bebf 	b.w	80101f2 <kalman_3gyro.constprop.0+0x25f6>
 8013474:	46b8      	mov	r8, r7
 8013476:	f7fc beb4 	b.w	80101e2 <kalman_3gyro.constprop.0+0x25e6>
 801347a:	4634      	mov	r4, r6
 801347c:	f7fc bea2 	b.w	80101c4 <kalman_3gyro.constprop.0+0x25c8>
 8013480:	46a0      	mov	r8, r4
 8013482:	f7fc be97 	b.w	80101b4 <kalman_3gyro.constprop.0+0x25b8>
 8013486:	4646      	mov	r6, r8
 8013488:	f7fc be7d 	b.w	8010186 <kalman_3gyro.constprop.0+0x258a>
 801348c:	4634      	mov	r4, r6
 801348e:	f7fc be72 	b.w	8010176 <kalman_3gyro.constprop.0+0x257a>
 8013492:	46a8      	mov	r8, r5
 8013494:	f7fc be5f 	b.w	8010156 <kalman_3gyro.constprop.0+0x255a>
 8013498:	462e      	mov	r6, r5
 801349a:	f7fc be54 	b.w	8010146 <kalman_3gyro.constprop.0+0x254a>
 801349e:	463e      	mov	r6, r7
 80134a0:	f7fc bcdb 	b.w	800fe5a <kalman_3gyro.constprop.0+0x225e>
 80134a4:	463e      	mov	r6, r7
 80134a6:	f7fc bdc2 	b.w	801002e <kalman_3gyro.constprop.0+0x2432>
 80134aa:	9b05      	ldr	r3, [sp, #20]
 80134ac:	2b0a      	cmp	r3, #10
 80134ae:	d040      	beq.n	8013532 <kalman_3gyro.constprop.0+0x5936>
 80134b0:	9a00      	ldr	r2, [sp, #0]
 80134b2:	3301      	adds	r3, #1
 80134b4:	f882 31a0 	strb.w	r3, [r2, #416]	; 0x1a0
 80134b8:	f8ad 0096 	strh.w	r0, [sp, #150]	; 0x96
 80134bc:	f88d 0098 	strb.w	r0, [sp, #152]	; 0x98
 80134c0:	f882 01a3 	strb.w	r0, [r2, #419]	; 0x1a3
 80134c4:	f7fd b82d 	b.w	8010522 <kalman_3gyro.constprop.0+0x2926>
 80134c8:	2305      	movs	r3, #5
 80134ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80134cc:	2302      	movs	r3, #2
 80134ce:	2508      	movs	r5, #8
 80134d0:	9301      	str	r3, [sp, #4]
 80134d2:	f7ff bb98 	b.w	8012c06 <kalman_3gyro.constprop.0+0x500a>
 80134d6:	462c      	mov	r4, r5
 80134d8:	f7ff b94c 	b.w	8012774 <kalman_3gyro.constprop.0+0x4b78>
 80134dc:	462c      	mov	r4, r5
 80134de:	e730      	b.n	8013342 <kalman_3gyro.constprop.0+0x5746>
 80134e0:	462c      	mov	r4, r5
 80134e2:	f7ff b976 	b.w	80127d2 <kalman_3gyro.constprop.0+0x4bd6>
 80134e6:	462c      	mov	r4, r5
 80134e8:	f7ff b84e 	b.w	8012588 <kalman_3gyro.constprop.0+0x498c>
 80134ec:	462c      	mov	r4, r5
 80134ee:	f7ff b8ae 	b.w	801264e <kalman_3gyro.constprop.0+0x4a52>
 80134f2:	462c      	mov	r4, r5
 80134f4:	e756      	b.n	80133a4 <kalman_3gyro.constprop.0+0x57a8>
 80134f6:	462c      	mov	r4, r5
 80134f8:	f7ff b815 	b.w	8012526 <kalman_3gyro.constprop.0+0x492a>
 80134fc:	462c      	mov	r4, r5
 80134fe:	e67a      	b.n	80131f6 <kalman_3gyro.constprop.0+0x55fa>
 8013500:	462c      	mov	r4, r5
 8013502:	f7fe bfdf 	b.w	80124c4 <kalman_3gyro.constprop.0+0x48c8>
 8013506:	462c      	mov	r4, r5
 8013508:	e644      	b.n	8013194 <kalman_3gyro.constprop.0+0x5598>
 801350a:	462c      	mov	r4, r5
 801350c:	f7ff b901 	b.w	8012712 <kalman_3gyro.constprop.0+0x4b16>
 8013510:	462c      	mov	r4, r5
 8013512:	e6e5      	b.n	80132e0 <kalman_3gyro.constprop.0+0x56e4>
 8013514:	462c      	mov	r4, r5
 8013516:	f7ff b8cb 	b.w	80126b0 <kalman_3gyro.constprop.0+0x4ab4>
 801351a:	462c      	mov	r4, r5
 801351c:	e6af      	b.n	801327e <kalman_3gyro.constprop.0+0x5682>
 801351e:	462c      	mov	r4, r5
 8013520:	f7fe bf9f 	b.w	8012462 <kalman_3gyro.constprop.0+0x4866>
 8013524:	462c      	mov	r4, r5
 8013526:	e604      	b.n	8013132 <kalman_3gyro.constprop.0+0x5536>
 8013528:	462c      	mov	r4, r5
 801352a:	f7fe bf69 	b.w	8012400 <kalman_3gyro.constprop.0+0x4804>
 801352e:	462c      	mov	r4, r5
 8013530:	e5ce      	b.n	80130d0 <kalman_3gyro.constprop.0+0x54d4>
 8013532:	9a00      	ldr	r2, [sp, #0]
 8013534:	f240 1301 	movw	r3, #257	; 0x101
 8013538:	4615      	mov	r5, r2
 801353a:	f8d2 17a4 	ldr.w	r1, [r2, #1956]	; 0x7a4
 801353e:	f8d2 0798 	ldr.w	r0, [r2, #1944]	; 0x798
 8013542:	9f04      	ldr	r7, [sp, #16]
 8013544:	9a03      	ldr	r2, [sp, #12]
 8013546:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
 801354a:	927c      	str	r2, [sp, #496]	; 0x1f0
 801354c:	977d      	str	r7, [sp, #500]	; 0x1f4
 801354e:	f8cd a1ec 	str.w	sl, [sp, #492]	; 0x1ec
 8013552:	f88d 4098 	strb.w	r4, [sp, #152]	; 0x98
 8013556:	f7ed fb25 	bl	8000ba4 <__addsf3>
 801355a:	f8d5 17b0 	ldr.w	r1, [r5, #1968]	; 0x7b0
 801355e:	f7ed fb21 	bl	8000ba4 <__addsf3>
 8013562:	f8d5 17bc 	ldr.w	r1, [r5, #1980]	; 0x7bc
 8013566:	f7ed fb1d 	bl	8000ba4 <__addsf3>
 801356a:	f8d5 17c8 	ldr.w	r1, [r5, #1992]	; 0x7c8
 801356e:	f7ed fb19 	bl	8000ba4 <__addsf3>
 8013572:	f8d5 17d4 	ldr.w	r1, [r5, #2004]	; 0x7d4
 8013576:	f7ed fb15 	bl	8000ba4 <__addsf3>
 801357a:	f8d5 17e0 	ldr.w	r1, [r5, #2016]	; 0x7e0
 801357e:	f7ed fb11 	bl	8000ba4 <__addsf3>
 8013582:	f8d5 17ec 	ldr.w	r1, [r5, #2028]	; 0x7ec
 8013586:	f7ed fb0d 	bl	8000ba4 <__addsf3>
 801358a:	f8d5 17f8 	ldr.w	r1, [r5, #2040]	; 0x7f8
 801358e:	f7ed fb09 	bl	8000ba4 <__addsf3>
 8013592:	f8d5 17a8 	ldr.w	r1, [r5, #1960]	; 0x7a8
 8013596:	4607      	mov	r7, r0
 8013598:	f8d5 079c 	ldr.w	r0, [r5, #1948]	; 0x79c
 801359c:	f7ed fb02 	bl	8000ba4 <__addsf3>
 80135a0:	f8d5 17b4 	ldr.w	r1, [r5, #1972]	; 0x7b4
 80135a4:	f7ed fafe 	bl	8000ba4 <__addsf3>
 80135a8:	f8d5 17c0 	ldr.w	r1, [r5, #1984]	; 0x7c0
 80135ac:	f7ed fafa 	bl	8000ba4 <__addsf3>
 80135b0:	f8d5 17cc 	ldr.w	r1, [r5, #1996]	; 0x7cc
 80135b4:	f7ed faf6 	bl	8000ba4 <__addsf3>
 80135b8:	f8d5 17d8 	ldr.w	r1, [r5, #2008]	; 0x7d8
 80135bc:	f7ed faf2 	bl	8000ba4 <__addsf3>
 80135c0:	f8d5 17e4 	ldr.w	r1, [r5, #2020]	; 0x7e4
 80135c4:	f7ed faee 	bl	8000ba4 <__addsf3>
 80135c8:	f8d5 17f0 	ldr.w	r1, [r5, #2032]	; 0x7f0
 80135cc:	f7ed faea 	bl	8000ba4 <__addsf3>
 80135d0:	f8d5 17fc 	ldr.w	r1, [r5, #2044]	; 0x7fc
 80135d4:	f7ed fae6 	bl	8000ba4 <__addsf3>
 80135d8:	f8d5 1808 	ldr.w	r1, [r5, #2056]	; 0x808
 80135dc:	f7ed fae2 	bl	8000ba4 <__addsf3>
 80135e0:	f8d5 17ac 	ldr.w	r1, [r5, #1964]	; 0x7ac
 80135e4:	4680      	mov	r8, r0
 80135e6:	f8d5 07a0 	ldr.w	r0, [r5, #1952]	; 0x7a0
 80135ea:	f7ed fadb 	bl	8000ba4 <__addsf3>
 80135ee:	f8d5 17b8 	ldr.w	r1, [r5, #1976]	; 0x7b8
 80135f2:	f7ed fad7 	bl	8000ba4 <__addsf3>
 80135f6:	f8d5 17c4 	ldr.w	r1, [r5, #1988]	; 0x7c4
 80135fa:	f7ed fad3 	bl	8000ba4 <__addsf3>
 80135fe:	f8d5 17d0 	ldr.w	r1, [r5, #2000]	; 0x7d0
 8013602:	f7ed facf 	bl	8000ba4 <__addsf3>
 8013606:	f8d5 17dc 	ldr.w	r1, [r5, #2012]	; 0x7dc
 801360a:	f7ed facb 	bl	8000ba4 <__addsf3>
 801360e:	f8d5 17e8 	ldr.w	r1, [r5, #2024]	; 0x7e8
 8013612:	f7ed fac7 	bl	8000ba4 <__addsf3>
 8013616:	f8d5 17f4 	ldr.w	r1, [r5, #2036]	; 0x7f4
 801361a:	f7ed fac3 	bl	8000ba4 <__addsf3>
 801361e:	f8d5 1800 	ldr.w	r1, [r5, #2048]	; 0x800
 8013622:	f7ed fabf 	bl	8000ba4 <__addsf3>
 8013626:	f8d5 180c 	ldr.w	r1, [r5, #2060]	; 0x80c
 801362a:	9500      	str	r5, [sp, #0]
 801362c:	f7ed faba 	bl	8000ba4 <__addsf3>
 8013630:	9b00      	ldr	r3, [sp, #0]
 8013632:	4605      	mov	r5, r0
 8013634:	f8d3 1804 	ldr.w	r1, [r3, #2052]	; 0x804
 8013638:	4638      	mov	r0, r7
 801363a:	f7ed fab3 	bl	8000ba4 <__addsf3>
 801363e:	4923      	ldr	r1, [pc, #140]	; (80136cc <kalman_3gyro.constprop.0+0x5ad0>)
 8013640:	f7ed fbb8 	bl	8000db4 <__aeabi_fmul>
 8013644:	4603      	mov	r3, r0
 8013646:	4921      	ldr	r1, [pc, #132]	; (80136cc <kalman_3gyro.constprop.0+0x5ad0>)
 8013648:	4640      	mov	r0, r8
 801364a:	f8cd 34bc 	str.w	r3, [sp, #1212]	; 0x4bc
 801364e:	f7ed fbb1 	bl	8000db4 <__aeabi_fmul>
 8013652:	4603      	mov	r3, r0
 8013654:	491d      	ldr	r1, [pc, #116]	; (80136cc <kalman_3gyro.constprop.0+0x5ad0>)
 8013656:	4628      	mov	r0, r5
 8013658:	f8cd 34c0 	str.w	r3, [sp, #1216]	; 0x4c0
 801365c:	f7ed fbaa 	bl	8000db4 <__aeabi_fmul>
 8013660:	9a00      	ldr	r2, [sp, #0]
 8013662:	f8cd 04c4 	str.w	r0, [sp, #1220]	; 0x4c4
 8013666:	4611      	mov	r1, r2
 8013668:	f892 31a3 	ldrb.w	r3, [r2, #419]	; 0x1a3
 801366c:	7852      	ldrb	r2, [r2, #1]
 801366e:	3301      	adds	r3, #1
 8013670:	f881 31a3 	strb.w	r3, [r1, #419]	; 0x1a3
 8013674:	2a00      	cmp	r2, #0
 8013676:	f43c af54 	beq.w	8010522 <kalman_3gyro.constprop.0+0x2926>
 801367a:	9a03      	ldr	r2, [sp, #12]
 801367c:	9f04      	ldr	r7, [sp, #16]
 801367e:	f8c1 a1bc 	str.w	sl, [r1, #444]	; 0x1bc
 8013682:	f8c1 21c0 	str.w	r2, [r1, #448]	; 0x1c0
 8013686:	f8c1 71c4 	str.w	r7, [r1, #452]	; 0x1c4
 801368a:	704e      	strb	r6, [r1, #1]
 801368c:	f7fc bf49 	b.w	8010522 <kalman_3gyro.constprop.0+0x2926>
 8013690:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8013694:	9a00      	ldr	r2, [sp, #0]
 8013696:	9811      	ldr	r0, [sp, #68]	; 0x44
 8013698:	f8c2 324c 	str.w	r3, [r2, #588]	; 0x24c
 801369c:	f8c2 3274 	str.w	r3, [r2, #628]	; 0x274
 80136a0:	f8c2 329c 	str.w	r3, [r2, #668]	; 0x29c
 80136a4:	f7ed fb86 	bl	8000db4 <__aeabi_fmul>
 80136a8:	9011      	str	r0, [sp, #68]	; 0x44
 80136aa:	f7fc be95 	b.w	80103d8 <kalman_3gyro.constprop.0+0x27dc>
 80136ae:	2c00      	cmp	r4, #0
 80136b0:	f340 812a 	ble.w	8013908 <kalman_3gyro.constprop.0+0x5d0c>
 80136b4:	f8ad 0090 	strh.w	r0, [sp, #144]	; 0x90
 80136b8:	f88d 0092 	strb.w	r0, [sp, #146]	; 0x92
 80136bc:	f88d 0099 	strb.w	r0, [sp, #153]	; 0x99
 80136c0:	f88d 009b 	strb.w	r0, [sp, #155]	; 0x9b
 80136c4:	f7fc baef 	b.w	800fca6 <kalman_3gyro.constprop.0+0x20aa>
 80136c8:	3eaaaaab 	.word	0x3eaaaaab
 80136cc:	3dcccccd 	.word	0x3dcccccd
 80136d0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80136d4:	4628      	mov	r0, r5
 80136d6:	f7ed fd0b 	bl	80010f0 <__aeabi_fcmplt>
 80136da:	2800      	cmp	r0, #0
 80136dc:	d066      	beq.n	80137ac <kalman_3gyro.constprop.0+0x5bb0>
 80136de:	4999      	ldr	r1, [pc, #612]	; (8013944 <kalman_3gyro.constprop.0+0x5d48>)
 80136e0:	4628      	mov	r0, r5
 80136e2:	f7ed fb67 	bl	8000db4 <__aeabi_fmul>
 80136e6:	4601      	mov	r1, r0
 80136e8:	f7ed fa5c 	bl	8000ba4 <__addsf3>
 80136ec:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80136f0:	f7ed fa58 	bl	8000ba4 <__addsf3>
 80136f4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80136f8:	4604      	mov	r4, r0
 80136fa:	4628      	mov	r0, r5
 80136fc:	f7ed fd0c 	bl	8001118 <__aeabi_fcmpge>
 8013700:	2800      	cmp	r0, #0
 8013702:	d069      	beq.n	80137d8 <kalman_3gyro.constprop.0+0x5bdc>
 8013704:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8013708:	4628      	mov	r0, r5
 801370a:	f7ed fcf1 	bl	80010f0 <__aeabi_fcmplt>
 801370e:	2800      	cmp	r0, #0
 8013710:	d069      	beq.n	80137e6 <kalman_3gyro.constprop.0+0x5bea>
 8013712:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8013716:	4628      	mov	r0, r5
 8013718:	f7ed fa42 	bl	8000ba0 <__aeabi_fsub>
 801371c:	498a      	ldr	r1, [pc, #552]	; (8013948 <kalman_3gyro.constprop.0+0x5d4c>)
 801371e:	f7ed fb49 	bl	8000db4 <__aeabi_fmul>
 8013722:	498a      	ldr	r1, [pc, #552]	; (801394c <kalman_3gyro.constprop.0+0x5d50>)
 8013724:	f7ed fa3e 	bl	8000ba4 <__addsf3>
 8013728:	4604      	mov	r4, r0
 801372a:	4628      	mov	r0, r5
 801372c:	4988      	ldr	r1, [pc, #544]	; (8013950 <kalman_3gyro.constprop.0+0x5d54>)
 801372e:	f7ed fcf3 	bl	8001118 <__aeabi_fcmpge>
 8013732:	2800      	cmp	r0, #0
 8013734:	d06b      	beq.n	801380e <kalman_3gyro.constprop.0+0x5c12>
 8013736:	4628      	mov	r0, r5
 8013738:	4986      	ldr	r1, [pc, #536]	; (8013954 <kalman_3gyro.constprop.0+0x5d58>)
 801373a:	f7ed fcd9 	bl	80010f0 <__aeabi_fcmplt>
 801373e:	2800      	cmp	r0, #0
 8013740:	d06b      	beq.n	801381a <kalman_3gyro.constprop.0+0x5c1e>
 8013742:	4983      	ldr	r1, [pc, #524]	; (8013950 <kalman_3gyro.constprop.0+0x5d54>)
 8013744:	4628      	mov	r0, r5
 8013746:	f7ed fa2b 	bl	8000ba0 <__aeabi_fsub>
 801374a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 801374e:	f7ed fb31 	bl	8000db4 <__aeabi_fmul>
 8013752:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8013756:	f7ed fa25 	bl	8000ba4 <__addsf3>
 801375a:	4604      	mov	r4, r0
 801375c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801375e:	4621      	mov	r1, r4
 8013760:	f7ed fb28 	bl	8000db4 <__aeabi_fmul>
 8013764:	9011      	str	r0, [sp, #68]	; 0x44
 8013766:	f7ff b95c 	b.w	8012a22 <kalman_3gyro.constprop.0+0x4e26>
 801376a:	4613      	mov	r3, r2
 801376c:	497a      	ldr	r1, [pc, #488]	; (8013958 <kalman_3gyro.constprop.0+0x5d5c>)
 801376e:	f7fc be23 	b.w	80103b8 <kalman_3gyro.constprop.0+0x27bc>
 8013772:	f8b3 31a6 	ldrh.w	r3, [r3, #422]	; 0x1a6
 8013776:	2b27      	cmp	r3, #39	; 0x27
 8013778:	f200 80dc 	bhi.w	8013934 <kalman_3gyro.constprop.0+0x5d38>
 801377c:	9b02      	ldr	r3, [sp, #8]
 801377e:	f8cd 81ec 	str.w	r8, [sp, #492]	; 0x1ec
 8013782:	937c      	str	r3, [sp, #496]	; 0x1f0
 8013784:	f8cd a1f4 	str.w	sl, [sp, #500]	; 0x1f4
 8013788:	2201      	movs	r2, #1
 801378a:	9900      	ldr	r1, [sp, #0]
 801378c:	9c03      	ldr	r4, [sp, #12]
 801378e:	f8b1 31a8 	ldrh.w	r3, [r1, #424]	; 0x1a8
 8013792:	f881 21a3 	strb.w	r2, [r1, #419]	; 0x1a3
 8013796:	4413      	add	r3, r2
 8013798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801379c:	bf0c      	ite	eq
 801379e:	f64f 73ff 	movweq	r3, #65535	; 0xffff
 80137a2:	b29b      	uxthne	r3, r3
 80137a4:	f8a1 31a8 	strh.w	r3, [r1, #424]	; 0x1a8
 80137a8:	f7fc bebb 	b.w	8010522 <kalman_3gyro.constprop.0+0x2926>
 80137ac:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80137b0:	4628      	mov	r0, r5
 80137b2:	f7ed fc9d 	bl	80010f0 <__aeabi_fcmplt>
 80137b6:	2800      	cmp	r0, #0
 80137b8:	d0a4      	beq.n	8013704 <kalman_3gyro.constprop.0+0x5b08>
 80137ba:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80137be:	4628      	mov	r0, r5
 80137c0:	f7ed f9ee 	bl	8000ba0 <__aeabi_fsub>
 80137c4:	495f      	ldr	r1, [pc, #380]	; (8013944 <kalman_3gyro.constprop.0+0x5d48>)
 80137c6:	f7ed faf5 	bl	8000db4 <__aeabi_fmul>
 80137ca:	4601      	mov	r1, r0
 80137cc:	f7ed f9ea 	bl	8000ba4 <__addsf3>
 80137d0:	4962      	ldr	r1, [pc, #392]	; (801395c <kalman_3gyro.constprop.0+0x5d60>)
 80137d2:	f7ed f9e7 	bl	8000ba4 <__addsf3>
 80137d6:	4604      	mov	r4, r0
 80137d8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80137dc:	4628      	mov	r0, r5
 80137de:	f7ed fc9b 	bl	8001118 <__aeabi_fcmpge>
 80137e2:	2800      	cmp	r0, #0
 80137e4:	d0a1      	beq.n	801372a <kalman_3gyro.constprop.0+0x5b2e>
 80137e6:	4628      	mov	r0, r5
 80137e8:	4959      	ldr	r1, [pc, #356]	; (8013950 <kalman_3gyro.constprop.0+0x5d54>)
 80137ea:	f7ed fc81 	bl	80010f0 <__aeabi_fcmplt>
 80137ee:	2800      	cmp	r0, #0
 80137f0:	d0a1      	beq.n	8013736 <kalman_3gyro.constprop.0+0x5b3a>
 80137f2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80137f6:	4628      	mov	r0, r5
 80137f8:	f7ed f9d2 	bl	8000ba0 <__aeabi_fsub>
 80137fc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8013800:	f7ed fad8 	bl	8000db4 <__aeabi_fmul>
 8013804:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8013808:	f7ed f9cc 	bl	8000ba4 <__addsf3>
 801380c:	4604      	mov	r4, r0
 801380e:	4628      	mov	r0, r5
 8013810:	4950      	ldr	r1, [pc, #320]	; (8013954 <kalman_3gyro.constprop.0+0x5d58>)
 8013812:	f7ed fc81 	bl	8001118 <__aeabi_fcmpge>
 8013816:	2800      	cmp	r0, #0
 8013818:	d0a0      	beq.n	801375c <kalman_3gyro.constprop.0+0x5b60>
 801381a:	494e      	ldr	r1, [pc, #312]	; (8013954 <kalman_3gyro.constprop.0+0x5d58>)
 801381c:	4628      	mov	r0, r5
 801381e:	f7ed f9bf 	bl	8000ba0 <__aeabi_fsub>
 8013822:	4601      	mov	r1, r0
 8013824:	f7ed f9be 	bl	8000ba4 <__addsf3>
 8013828:	494d      	ldr	r1, [pc, #308]	; (8013960 <kalman_3gyro.constprop.0+0x5d64>)
 801382a:	f7ed fac3 	bl	8000db4 <__aeabi_fmul>
 801382e:	4948      	ldr	r1, [pc, #288]	; (8013950 <kalman_3gyro.constprop.0+0x5d54>)
 8013830:	f7ed f9b8 	bl	8000ba4 <__addsf3>
 8013834:	4604      	mov	r4, r0
 8013836:	e791      	b.n	801375c <kalman_3gyro.constprop.0+0x5b60>
 8013838:	ab2d      	add	r3, sp, #180	; 0xb4
 801383a:	9304      	str	r3, [sp, #16]
 801383c:	f04f 33ff 	mov.w	r3, #4294967295
 8013840:	9301      	str	r3, [sp, #4]
 8013842:	f8d7 61f0 	ldr.w	r6, [r7, #496]	; 0x1f0
 8013846:	f5a7 75ae 	sub.w	r5, r7, #348	; 0x15c
 801384a:	4632      	mov	r2, r6
 801384c:	462c      	mov	r4, r5
 801384e:	9b01      	ldr	r3, [sp, #4]
 8013850:	3301      	adds	r3, #1
 8013852:	9301      	str	r3, [sp, #4]
 8013854:	f8d4 1358 	ldr.w	r1, [r4, #856]	; 0x358
 8013858:	4610      	mov	r0, r2
 801385a:	f7ed f9a3 	bl	8000ba4 <__addsf3>
 801385e:	340c      	adds	r4, #12
 8013860:	42a7      	cmp	r7, r4
 8013862:	4602      	mov	r2, r0
 8013864:	d1f6      	bne.n	8013854 <kalman_3gyro.constprop.0+0x5c58>
 8013866:	493f      	ldr	r1, [pc, #252]	; (8013964 <kalman_3gyro.constprop.0+0x5d68>)
 8013868:	f7ed faa4 	bl	8000db4 <__aeabi_fmul>
 801386c:	4604      	mov	r4, r0
 801386e:	4630      	mov	r0, r6
 8013870:	4621      	mov	r1, r4
 8013872:	f7ed f995 	bl	8000ba0 <__aeabi_fsub>
 8013876:	4601      	mov	r1, r0
 8013878:	f7ed fa9c 	bl	8000db4 <__aeabi_fmul>
 801387c:	4606      	mov	r6, r0
 801387e:	f8d5 0358 	ldr.w	r0, [r5, #856]	; 0x358
 8013882:	4621      	mov	r1, r4
 8013884:	f7ed f98c 	bl	8000ba0 <__aeabi_fsub>
 8013888:	4601      	mov	r1, r0
 801388a:	f7ed fa93 	bl	8000db4 <__aeabi_fmul>
 801388e:	4601      	mov	r1, r0
 8013890:	4630      	mov	r0, r6
 8013892:	f7ed f987 	bl	8000ba4 <__addsf3>
 8013896:	350c      	adds	r5, #12
 8013898:	42af      	cmp	r7, r5
 801389a:	4606      	mov	r6, r0
 801389c:	d1ef      	bne.n	801387e <kalman_3gyro.constprop.0+0x5c82>
 801389e:	4932      	ldr	r1, [pc, #200]	; (8013968 <kalman_3gyro.constprop.0+0x5d6c>)
 80138a0:	f7ed fa88 	bl	8000db4 <__aeabi_fmul>
 80138a4:	9b04      	ldr	r3, [sp, #16]
 80138a6:	3704      	adds	r7, #4
 80138a8:	f843 0b04 	str.w	r0, [r3], #4
 80138ac:	9304      	str	r3, [sp, #16]
 80138ae:	9b01      	ldr	r3, [sp, #4]
 80138b0:	2b02      	cmp	r3, #2
 80138b2:	d1c6      	bne.n	8013842 <kalman_3gyro.constprop.0+0x5c46>
 80138b4:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 80138b6:	4628      	mov	r0, r5
 80138b8:	f004 ffb8 	bl	801882c <sqrtf>
 80138bc:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
 80138be:	902d      	str	r0, [sp, #180]	; 0xb4
 80138c0:	4630      	mov	r0, r6
 80138c2:	f004 ffb3 	bl	801882c <sqrtf>
 80138c6:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 80138c8:	902e      	str	r0, [sp, #184]	; 0xb8
 80138ca:	4620      	mov	r0, r4
 80138cc:	f004 ffae 	bl	801882c <sqrtf>
 80138d0:	4603      	mov	r3, r0
 80138d2:	4631      	mov	r1, r6
 80138d4:	4628      	mov	r0, r5
 80138d6:	932f      	str	r3, [sp, #188]	; 0xbc
 80138d8:	f7ed f964 	bl	8000ba4 <__addsf3>
 80138dc:	4621      	mov	r1, r4
 80138de:	f7ed f961 	bl	8000ba4 <__addsf3>
 80138e2:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 80138e6:	f7ed fc03 	bl	80010f0 <__aeabi_fcmplt>
 80138ea:	2800      	cmp	r0, #0
 80138ec:	f43c ade8 	beq.w	80104c0 <kalman_3gyro.constprop.0+0x28c4>
 80138f0:	2300      	movs	r3, #0
 80138f2:	9a02      	ldr	r2, [sp, #8]
 80138f4:	9c03      	ldr	r4, [sp, #12]
 80138f6:	927c      	str	r2, [sp, #496]	; 0x1f0
 80138f8:	9a00      	ldr	r2, [sp, #0]
 80138fa:	f8cd 81ec 	str.w	r8, [sp, #492]	; 0x1ec
 80138fe:	f8cd a1f4 	str.w	sl, [sp, #500]	; 0x1f4
 8013902:	7053      	strb	r3, [r2, #1]
 8013904:	f7fc be0d 	b.w	8010522 <kalman_3gyro.constprop.0+0x2926>
 8013908:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 801390c:	9869      	ldr	r0, [sp, #420]	; 0x1a4
 801390e:	f7ed fa51 	bl	8000db4 <__aeabi_fmul>
 8013912:	4603      	mov	r3, r0
 8013914:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8013918:	986a      	ldr	r0, [sp, #424]	; 0x1a8
 801391a:	9369      	str	r3, [sp, #420]	; 0x1a4
 801391c:	f7ed fa4a 	bl	8000db4 <__aeabi_fmul>
 8013920:	4603      	mov	r3, r0
 8013922:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8013926:	986b      	ldr	r0, [sp, #428]	; 0x1ac
 8013928:	936a      	str	r3, [sp, #424]	; 0x1a8
 801392a:	f7ed fa43 	bl	8000db4 <__aeabi_fmul>
 801392e:	906b      	str	r0, [sp, #428]	; 0x1ac
 8013930:	f7fc b9b9 	b.w	800fca6 <kalman_3gyro.constprop.0+0x20aa>
 8013934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013936:	6999      	ldr	r1, [r3, #24]
 8013938:	69da      	ldr	r2, [r3, #28]
 801393a:	6a1b      	ldr	r3, [r3, #32]
 801393c:	917b      	str	r1, [sp, #492]	; 0x1ec
 801393e:	927c      	str	r2, [sp, #496]	; 0x1f0
 8013940:	937d      	str	r3, [sp, #500]	; 0x1f4
 8013942:	e721      	b.n	8013788 <kalman_3gyro.constprop.0+0x5b8c>
 8013944:	3dccccd0 	.word	0x3dccccd0
 8013948:	3e999998 	.word	0x3e999998
 801394c:	3f99999a 	.word	0x3f99999a
 8013950:	40400000 	.word	0x40400000
 8013954:	40a00000 	.word	0x40a00000
 8013958:	3e4cccce 	.word	0x3e4cccce
 801395c:	3f8ccccd 	.word	0x3f8ccccd
 8013960:	3e4ccccd 	.word	0x3e4ccccd
 8013964:	3d088889 	.word	0x3d088889
 8013968:	3d0d3dcb 	.word	0x3d0d3dcb
 801396c:	00000000 	.word	0x00000000

08013970 <iNemoEngine_API_Update>:
 8013970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013974:	b0c9      	sub	sp, #292	; 0x124
 8013976:	9308      	str	r3, [sp, #32]
 8013978:	9b52      	ldr	r3, [sp, #328]	; 0x148
 801397a:	4604      	mov	r4, r0
 801397c:	460d      	mov	r5, r1
 801397e:	4616      	mov	r6, r2
 8013980:	2b00      	cmp	r3, #0
 8013982:	f000 826b 	beq.w	8013e5c <iNemoEngine_API_Update+0x4ec>
 8013986:	4632      	mov	r2, r6
 8013988:	46b6      	mov	lr, r6
 801398a:	f852 0f0c 	ldr.w	r0, [r2, #12]!
 801398e:	f10d 0cec 	add.w	ip, sp, #236	; 0xec
 8013992:	6851      	ldr	r1, [r2, #4]
 8013994:	6892      	ldr	r2, [r2, #8]
 8013996:	af38      	add	r7, sp, #224	; 0xe0
 8013998:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 801399c:	6830      	ldr	r0, [r6, #0]
 801399e:	6871      	ldr	r1, [r6, #4]
 80139a0:	68b2      	ldr	r2, [r6, #8]
 80139a2:	f894 6978 	ldrb.w	r6, [r4, #2424]	; 0x978
 80139a6:	c707      	stmia	r7!, {r0, r1, r2}
 80139a8:	f85e 0f18 	ldr.w	r0, [lr, #24]!
 80139ac:	ab3e      	add	r3, sp, #248	; 0xf8
 80139ae:	f8de 1004 	ldr.w	r1, [lr, #4]
 80139b2:	f8de 2008 	ldr.w	r2, [lr, #8]
 80139b6:	c307      	stmia	r3!, {r0, r1, r2}
 80139b8:	b12e      	cbz	r6, 80139c6 <iNemoEngine_API_Update+0x56>
 80139ba:	f8b4 2950 	ldrh.w	r2, [r4, #2384]	; 0x950
 80139be:	7923      	ldrb	r3, [r4, #4]
 80139c0:	429a      	cmp	r2, r3
 80139c2:	f080 82da 	bcs.w	8013f7a <iNemoEngine_API_Update+0x60a>
 80139c6:	2300      	movs	r3, #0
 80139c8:	f104 093a 	add.w	r9, r4, #58	; 0x3a
 80139cc:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 80139d0:	4649      	mov	r1, r9
 80139d2:	4640      	mov	r0, r8
 80139d4:	aa3b      	add	r2, sp, #236	; 0xec
 80139d6:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
 80139da:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 80139de:	af13      	add	r7, sp, #76	; 0x4c
 80139e0:	f7f8 fcb8 	bl	800c354 <rotVect>
 80139e4:	aa3e      	add	r2, sp, #248	; 0xf8
 80139e6:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 80139ea:	a810      	add	r0, sp, #64	; 0x40
 80139ec:	f7f8 fcb2 	bl	800c354 <rotVect>
 80139f0:	4638      	mov	r0, r7
 80139f2:	aa38      	add	r2, sp, #224	; 0xe0
 80139f4:	f104 0143 	add.w	r1, r4, #67	; 0x43
 80139f8:	f7f8 fcac 	bl	800c354 <rotVect>
 80139fc:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8013a00:	b923      	cbnz	r3, 8013a0c <iNemoEngine_API_Update+0x9c>
 8013a02:	2200      	movs	r2, #0
 8013a04:	4ba1      	ldr	r3, [pc, #644]	; (8013c8c <iNemoEngine_API_Update+0x31c>)
 8013a06:	9213      	str	r2, [sp, #76]	; 0x4c
 8013a08:	9314      	str	r3, [sp, #80]	; 0x50
 8013a0a:	9315      	str	r3, [sp, #84]	; 0x54
 8013a0c:	f8d4 694c 	ldr.w	r6, [r4, #2380]	; 0x94c
 8013a10:	2e09      	cmp	r6, #9
 8013a12:	d875      	bhi.n	8013b00 <iNemoEngine_API_Update+0x190>
 8013a14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013a16:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8013a1a:	4619      	mov	r1, r3
 8013a1c:	4618      	mov	r0, r3
 8013a1e:	930a      	str	r3, [sp, #40]	; 0x28
 8013a20:	f7ed f9c8 	bl	8000db4 <__aeabi_fmul>
 8013a24:	4659      	mov	r1, fp
 8013a26:	4682      	mov	sl, r0
 8013a28:	4658      	mov	r0, fp
 8013a2a:	f7ed f9c3 	bl	8000db4 <__aeabi_fmul>
 8013a2e:	4601      	mov	r1, r0
 8013a30:	4650      	mov	r0, sl
 8013a32:	f7ed f8b7 	bl	8000ba4 <__addsf3>
 8013a36:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8013a3a:	9009      	str	r0, [sp, #36]	; 0x24
 8013a3c:	4651      	mov	r1, sl
 8013a3e:	4650      	mov	r0, sl
 8013a40:	f7ed f9b8 	bl	8000db4 <__aeabi_fmul>
 8013a44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013a46:	4601      	mov	r1, r0
 8013a48:	4610      	mov	r0, r2
 8013a4a:	f7ed f8ab 	bl	8000ba4 <__addsf3>
 8013a4e:	f7ec fd4b 	bl	80004e8 <__aeabi_f2d>
 8013a52:	f004 fe85 	bl	8018760 <sqrt>
 8013a56:	f7ed f84f 	bl	8000af8 <__aeabi_d2f>
 8013a5a:	4601      	mov	r1, r0
 8013a5c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8013a60:	f7ed fa5c 	bl	8000f1c <__aeabi_fdiv>
 8013a64:	4601      	mov	r1, r0
 8013a66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a68:	9109      	str	r1, [sp, #36]	; 0x24
 8013a6a:	4618      	mov	r0, r3
 8013a6c:	f7ed f9a2 	bl	8000db4 <__aeabi_fmul>
 8013a70:	4603      	mov	r3, r0
 8013a72:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013a74:	4658      	mov	r0, fp
 8013a76:	930d      	str	r3, [sp, #52]	; 0x34
 8013a78:	f7ed f99c 	bl	8000db4 <__aeabi_fmul>
 8013a7c:	4603      	mov	r3, r0
 8013a7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013a80:	4650      	mov	r0, sl
 8013a82:	930e      	str	r3, [sp, #56]	; 0x38
 8013a84:	f7ed f996 	bl	8000db4 <__aeabi_fmul>
 8013a88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013a8a:	900f      	str	r0, [sp, #60]	; 0x3c
 8013a8c:	4619      	mov	r1, r3
 8013a8e:	4618      	mov	r0, r3
 8013a90:	930a      	str	r3, [sp, #40]	; 0x28
 8013a92:	f7ed f98f 	bl	8000db4 <__aeabi_fmul>
 8013a96:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 8013a9a:	4682      	mov	sl, r0
 8013a9c:	4659      	mov	r1, fp
 8013a9e:	4658      	mov	r0, fp
 8013aa0:	f7ed f988 	bl	8000db4 <__aeabi_fmul>
 8013aa4:	4601      	mov	r1, r0
 8013aa6:	4650      	mov	r0, sl
 8013aa8:	f7ed f87c 	bl	8000ba4 <__addsf3>
 8013aac:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8013ab0:	9009      	str	r0, [sp, #36]	; 0x24
 8013ab2:	4651      	mov	r1, sl
 8013ab4:	4650      	mov	r0, sl
 8013ab6:	f7ed f97d 	bl	8000db4 <__aeabi_fmul>
 8013aba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013abc:	4601      	mov	r1, r0
 8013abe:	4610      	mov	r0, r2
 8013ac0:	f7ed f870 	bl	8000ba4 <__addsf3>
 8013ac4:	f7ec fd10 	bl	80004e8 <__aeabi_f2d>
 8013ac8:	f004 fe4a 	bl	8018760 <sqrt>
 8013acc:	f7ed f814 	bl	8000af8 <__aeabi_d2f>
 8013ad0:	4601      	mov	r1, r0
 8013ad2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8013ad6:	f7ed fa21 	bl	8000f1c <__aeabi_fdiv>
 8013ada:	4601      	mov	r1, r0
 8013adc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ade:	9109      	str	r1, [sp, #36]	; 0x24
 8013ae0:	4618      	mov	r0, r3
 8013ae2:	f7ed f967 	bl	8000db4 <__aeabi_fmul>
 8013ae6:	4603      	mov	r3, r0
 8013ae8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013aea:	4658      	mov	r0, fp
 8013aec:	9313      	str	r3, [sp, #76]	; 0x4c
 8013aee:	f7ed f961 	bl	8000db4 <__aeabi_fmul>
 8013af2:	4603      	mov	r3, r0
 8013af4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013af6:	4650      	mov	r0, sl
 8013af8:	9314      	str	r3, [sp, #80]	; 0x50
 8013afa:	f7ed f95b 	bl	8000db4 <__aeabi_fmul>
 8013afe:	9015      	str	r0, [sp, #84]	; 0x54
 8013b00:	f894 a004 	ldrb.w	sl, [r4, #4]
 8013b04:	f8b4 3950 	ldrh.w	r3, [r4, #2384]	; 0x950
 8013b08:	4553      	cmp	r3, sl
 8013b0a:	f080 80cf 	bcs.w	8013cac <iNemoEngine_API_Update+0x33c>
 8013b0e:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8013b12:	3601      	adds	r6, #1
 8013b14:	4649      	mov	r1, r9
 8013b16:	4640      	mov	r0, r8
 8013b18:	f8c4 694c 	str.w	r6, [r4, #2380]	; 0x94c
 8013b1c:	aa3b      	add	r2, sp, #236	; 0xec
 8013b1e:	f7f8 fc19 	bl	800c354 <rotVect>
 8013b22:	f8d4 0930 	ldr.w	r0, [r4, #2352]	; 0x930
 8013b26:	f8d4 1934 	ldr.w	r1, [r4, #2356]	; 0x934
 8013b2a:	f8d4 2938 	ldr.w	r2, [r4, #2360]	; 0x938
 8013b2e:	f8d4 393c 	ldr.w	r3, [r4, #2364]	; 0x93c
 8013b32:	60e8      	str	r0, [r5, #12]
 8013b34:	6129      	str	r1, [r5, #16]
 8013b36:	61ab      	str	r3, [r5, #24]
 8013b38:	616a      	str	r2, [r5, #20]
 8013b3a:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8013b3e:	f105 0328 	add.w	r3, r5, #40	; 0x28
 8013b42:	4641      	mov	r1, r8
 8013b44:	e9cd 3200 	strd	r3, r2, [sp]
 8013b48:	f105 000c 	add.w	r0, r5, #12
 8013b4c:	462a      	mov	r2, r5
 8013b4e:	f105 031c 	add.w	r3, r5, #28
 8013b52:	f7f9 ff6f 	bl	800da34 <output_update>
 8013b56:	682e      	ldr	r6, [r5, #0]
 8013b58:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8013b5c:	4630      	mov	r0, r6
 8013b5e:	f004 fd9d 	bl	801869c <sinf>
 8013b62:	4607      	mov	r7, r0
 8013b64:	4630      	mov	r0, r6
 8013b66:	f004 fd3b 	bl	80185e0 <cosf>
 8013b6a:	4639      	mov	r1, r7
 8013b6c:	4681      	mov	r9, r0
 8013b6e:	4638      	mov	r0, r7
 8013b70:	f7ed f920 	bl	8000db4 <__aeabi_fmul>
 8013b74:	2100      	movs	r1, #0
 8013b76:	f7ed f91d 	bl	8000db4 <__aeabi_fmul>
 8013b7a:	4649      	mov	r1, r9
 8013b7c:	4607      	mov	r7, r0
 8013b7e:	4648      	mov	r0, r9
 8013b80:	f7ed f918 	bl	8000db4 <__aeabi_fmul>
 8013b84:	2100      	movs	r1, #0
 8013b86:	f7ed f915 	bl	8000db4 <__aeabi_fmul>
 8013b8a:	4601      	mov	r1, r0
 8013b8c:	4638      	mov	r0, r7
 8013b8e:	f7ed f809 	bl	8000ba4 <__addsf3>
 8013b92:	493f      	ldr	r1, [pc, #252]	; (8013c90 <iNemoEngine_API_Update+0x320>)
 8013b94:	4607      	mov	r7, r0
 8013b96:	f028 4000 	bic.w	r0, r8, #2147483648	; 0x80000000
 8013b9a:	f7ed faa9 	bl	80010f0 <__aeabi_fcmplt>
 8013b9e:	2800      	cmp	r0, #0
 8013ba0:	d06b      	beq.n	8013c7a <iNemoEngine_API_Update+0x30a>
 8013ba2:	4640      	mov	r0, r8
 8013ba4:	f004 fdb4 	bl	8018710 <tanf>
 8013ba8:	4601      	mov	r1, r0
 8013baa:	f7ed f903 	bl	8000db4 <__aeabi_fmul>
 8013bae:	4639      	mov	r1, r7
 8013bb0:	f7ed f900 	bl	8000db4 <__aeabi_fmul>
 8013bb4:	9907      	ldr	r1, [sp, #28]
 8013bb6:	f7ec fff5 	bl	8000ba4 <__addsf3>
 8013bba:	f004 fe37 	bl	801882c <sqrtf>
 8013bbe:	4601      	mov	r1, r0
 8013bc0:	f7ec fff0 	bl	8000ba4 <__addsf3>
 8013bc4:	4933      	ldr	r1, [pc, #204]	; (8013c94 <iNemoEngine_API_Update+0x324>)
 8013bc6:	4607      	mov	r7, r0
 8013bc8:	f7ed fa9c 	bl	8001104 <__aeabi_fcmple>
 8013bcc:	b900      	cbnz	r0, 8013bd0 <iNemoEngine_API_Update+0x260>
 8013bce:	4f31      	ldr	r7, [pc, #196]	; (8013c94 <iNemoEngine_API_Update+0x324>)
 8013bd0:	4638      	mov	r0, r7
 8013bd2:	4931      	ldr	r1, [pc, #196]	; (8013c98 <iNemoEngine_API_Update+0x328>)
 8013bd4:	f7ed faa0 	bl	8001118 <__aeabi_fcmpge>
 8013bd8:	b900      	cbnz	r0, 8013bdc <iNemoEngine_API_Update+0x26c>
 8013bda:	4f2f      	ldr	r7, [pc, #188]	; (8013c98 <iNemoEngine_API_Update+0x328>)
 8013bdc:	63af      	str	r7, [r5, #56]	; 0x38
 8013bde:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d135      	bne.n	8013c52 <iNemoEngine_API_Update+0x2e2>
 8013be6:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8013ca8 <iNemoEngine_API_Update+0x338>
 8013bea:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8013bec:	f8da 3000 	ldr.w	r3, [sl]
 8013bf0:	6a29      	ldr	r1, [r5, #32]
 8013bf2:	69e8      	ldr	r0, [r5, #28]
 8013bf4:	f7f8 fc84 	bl	800c500 <findDirection>
 8013bf8:	68ef      	ldr	r7, [r5, #12]
 8013bfa:	f8d5 8010 	ldr.w	r8, [r5, #16]
 8013bfe:	696c      	ldr	r4, [r5, #20]
 8013c00:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8013c04:	f8ca 0000 	str.w	r0, [sl]
 8013c08:	2805      	cmp	r0, #5
 8013c0a:	f200 83e9 	bhi.w	80143e0 <iNemoEngine_API_Update+0xa70>
 8013c0e:	e8df f010 	tbh	[pc, r0, lsl #1]
 8013c12:	000b      	.short	0x000b
 8013c14:	00060128 	.word	0x00060128
 8013c18:	0006016e 	.word	0x0006016e
 8013c1c:	000b      	.short	0x000b
 8013c1e:	4630      	mov	r0, r6
 8013c20:	491e      	ldr	r1, [pc, #120]	; (8013c9c <iNemoEngine_API_Update+0x32c>)
 8013c22:	f7ec ffbf 	bl	8000ba4 <__addsf3>
 8013c26:	4606      	mov	r6, r0
 8013c28:	4630      	mov	r0, r6
 8013c2a:	491d      	ldr	r1, [pc, #116]	; (8013ca0 <iNemoEngine_API_Update+0x330>)
 8013c2c:	f7ed fa74 	bl	8001118 <__aeabi_fcmpge>
 8013c30:	b120      	cbz	r0, 8013c3c <iNemoEngine_API_Update+0x2cc>
 8013c32:	4630      	mov	r0, r6
 8013c34:	491a      	ldr	r1, [pc, #104]	; (8013ca0 <iNemoEngine_API_Update+0x330>)
 8013c36:	f7ec ffb3 	bl	8000ba0 <__aeabi_fsub>
 8013c3a:	4606      	mov	r6, r0
 8013c3c:	2100      	movs	r1, #0
 8013c3e:	4630      	mov	r0, r6
 8013c40:	f7ed fa56 	bl	80010f0 <__aeabi_fcmplt>
 8013c44:	2800      	cmp	r0, #0
 8013c46:	f040 8100 	bne.w	8013e4a <iNemoEngine_API_Update+0x4da>
 8013c4a:	636e      	str	r6, [r5, #52]	; 0x34
 8013c4c:	b049      	add	sp, #292	; 0x124
 8013c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c52:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8013c54:	f8df a050 	ldr.w	sl, [pc, #80]	; 8013ca8 <iNemoEngine_API_Update+0x338>
 8013c58:	696c      	ldr	r4, [r5, #20]
 8013c5a:	f8da 3000 	ldr.w	r3, [sl]
 8013c5e:	69e9      	ldr	r1, [r5, #28]
 8013c60:	6a28      	ldr	r0, [r5, #32]
 8013c62:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8013c66:	f7f8 fc4b 	bl	800c500 <findDirection>
 8013c6a:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 8013c6e:	692f      	ldr	r7, [r5, #16]
 8013c70:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8013c74:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8013c78:	e7c4      	b.n	8013c04 <iNemoEngine_API_Update+0x294>
 8013c7a:	4638      	mov	r0, r7
 8013c7c:	4909      	ldr	r1, [pc, #36]	; (8013ca4 <iNemoEngine_API_Update+0x334>)
 8013c7e:	f7ed f899 	bl	8000db4 <__aeabi_fmul>
 8013c82:	9907      	ldr	r1, [sp, #28]
 8013c84:	f7ec ff8e 	bl	8000ba4 <__addsf3>
 8013c88:	e797      	b.n	8013bba <iNemoEngine_API_Update+0x24a>
 8013c8a:	bf00      	nop
 8013c8c:	3f333333 	.word	0x3f333333
 8013c90:	3fbc430e 	.word	0x3fbc430e
 8013c94:	40490fdb 	.word	0x40490fdb
 8013c98:	3c8efa35 	.word	0x3c8efa35
 8013c9c:	43340000 	.word	0x43340000
 8013ca0:	43b40000 	.word	0x43b40000
 8013ca4:	42c6ab07 	.word	0x42c6ab07
 8013ca8:	20000128 	.word	0x20000128
 8013cac:	2600      	movs	r6, #0
 8013cae:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8013cb2:	ab2f      	add	r3, sp, #188	; 0xbc
 8013cb4:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8013cb8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013cbc:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8013cc0:	f8a4 6950 	strh.w	r6, [r4, #2384]	; 0x950
 8013cc4:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8013cc8:	49b3      	ldr	r1, [pc, #716]	; (8013f98 <iNemoEngine_API_Update+0x628>)
 8013cca:	f8d4 095c 	ldr.w	r0, [r4, #2396]	; 0x95c
 8013cce:	f7ed f871 	bl	8000db4 <__aeabi_fmul>
 8013cd2:	2600      	movs	r6, #0
 8013cd4:	4603      	mov	r3, r0
 8013cd6:	49b0      	ldr	r1, [pc, #704]	; (8013f98 <iNemoEngine_API_Update+0x628>)
 8013cd8:	f8d4 0960 	ldr.w	r0, [r4, #2400]	; 0x960
 8013cdc:	f8c4 695c 	str.w	r6, [r4, #2396]	; 0x95c
 8013ce0:	9332      	str	r3, [sp, #200]	; 0xc8
 8013ce2:	f7ed f867 	bl	8000db4 <__aeabi_fmul>
 8013ce6:	4603      	mov	r3, r0
 8013ce8:	49ab      	ldr	r1, [pc, #684]	; (8013f98 <iNemoEngine_API_Update+0x628>)
 8013cea:	f8d4 0964 	ldr.w	r0, [r4, #2404]	; 0x964
 8013cee:	f8c4 6960 	str.w	r6, [r4, #2400]	; 0x960
 8013cf2:	9333      	str	r3, [sp, #204]	; 0xcc
 8013cf4:	f7ed f85e 	bl	8000db4 <__aeabi_fmul>
 8013cf8:	4603      	mov	r3, r0
 8013cfa:	f8c4 6964 	str.w	r6, [r4, #2404]	; 0x964
 8013cfe:	4650      	mov	r0, sl
 8013d00:	9334      	str	r3, [sp, #208]	; 0xd0
 8013d02:	f7ec ffff 	bl	8000d04 <__aeabi_ui2f>
 8013d06:	9908      	ldr	r1, [sp, #32]
 8013d08:	f7ed f854 	bl	8000db4 <__aeabi_fmul>
 8013d0c:	4607      	mov	r7, r0
 8013d0e:	48a3      	ldr	r0, [pc, #652]	; (8013f9c <iNemoEngine_API_Update+0x62c>)
 8013d10:	4639      	mov	r1, r7
 8013d12:	f7ed f903 	bl	8000f1c <__aeabi_fdiv>
 8013d16:	f004 fd89 	bl	801882c <sqrtf>
 8013d1a:	4606      	mov	r6, r0
 8013d1c:	48a0      	ldr	r0, [pc, #640]	; (8013fa0 <iNemoEngine_API_Update+0x630>)
 8013d1e:	4631      	mov	r1, r6
 8013d20:	f7ed f8fc 	bl	8000f1c <__aeabi_fdiv>
 8013d24:	499f      	ldr	r1, [pc, #636]	; (8013fa4 <iNemoEngine_API_Update+0x634>)
 8013d26:	4683      	mov	fp, r0
 8013d28:	4630      	mov	r0, r6
 8013d2a:	f7ed f843 	bl	8000db4 <__aeabi_fmul>
 8013d2e:	499e      	ldr	r1, [pc, #632]	; (8013fa8 <iNemoEngine_API_Update+0x638>)
 8013d30:	4682      	mov	sl, r0
 8013d32:	4630      	mov	r0, r6
 8013d34:	f7ed f83e 	bl	8000db4 <__aeabi_fmul>
 8013d38:	4603      	mov	r3, r0
 8013d3a:	499c      	ldr	r1, [pc, #624]	; (8013fac <iNemoEngine_API_Update+0x63c>)
 8013d3c:	4630      	mov	r0, r6
 8013d3e:	9308      	str	r3, [sp, #32]
 8013d40:	f7ed f838 	bl	8000db4 <__aeabi_fmul>
 8013d44:	7963      	ldrb	r3, [r4, #5]
 8013d46:	9009      	str	r0, [sp, #36]	; 0x24
 8013d48:	2b01      	cmp	r3, #1
 8013d4a:	f000 8175 	beq.w	8014038 <iNemoEngine_API_Update+0x6c8>
 8013d4e:	2b02      	cmp	r3, #2
 8013d50:	f000 8169 	beq.w	8014026 <iNemoEngine_API_Update+0x6b6>
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	f000 8137 	beq.w	8013fc8 <iNemoEngine_API_Update+0x658>
 8013d5a:	4995      	ldr	r1, [pc, #596]	; (8013fb0 <iNemoEngine_API_Update+0x640>)
 8013d5c:	6960      	ldr	r0, [r4, #20]
 8013d5e:	f7ed f829 	bl	8000db4 <__aeabi_fmul>
 8013d62:	4603      	mov	r3, r0
 8013d64:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8013d68:	4630      	mov	r0, r6
 8013d6a:	9307      	str	r3, [sp, #28]
 8013d6c:	f7ed f822 	bl	8000db4 <__aeabi_fmul>
 8013d70:	4606      	mov	r6, r0
 8013d72:	4b90      	ldr	r3, [pc, #576]	; (8013fb4 <iNemoEngine_API_Update+0x644>)
 8013d74:	8862      	ldrh	r2, [r4, #2]
 8013d76:	1e51      	subs	r1, r2, #1
 8013d78:	2912      	cmp	r1, #18
 8013d7a:	f200 812d 	bhi.w	8013fd8 <iNemoEngine_API_Update+0x668>
 8013d7e:	3201      	adds	r2, #1
 8013d80:	b210      	sxth	r0, r2
 8013d82:	b292      	uxth	r2, r2
 8013d84:	2a03      	cmp	r2, #3
 8013d86:	8060      	strh	r0, [r4, #2]
 8013d88:	f240 815a 	bls.w	8014040 <iNemoEngine_API_Update+0x6d0>
 8013d8c:	930a      	str	r3, [sp, #40]	; 0x28
 8013d8e:	f7ec ffbd 	bl	8000d0c <__aeabi_i2f>
 8013d92:	4989      	ldr	r1, [pc, #548]	; (8013fb8 <iNemoEngine_API_Update+0x648>)
 8013d94:	f7ed f80e 	bl	8000db4 <__aeabi_fmul>
 8013d98:	4602      	mov	r2, r0
 8013d9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d9c:	4611      	mov	r1, r2
 8013d9e:	4658      	mov	r0, fp
 8013da0:	930b      	str	r3, [sp, #44]	; 0x2c
 8013da2:	920a      	str	r2, [sp, #40]	; 0x28
 8013da4:	f7ed f8ba 	bl	8000f1c <__aeabi_fdiv>
 8013da8:	4684      	mov	ip, r0
 8013daa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013dac:	4650      	mov	r0, sl
 8013dae:	4611      	mov	r1, r2
 8013db0:	f8cd c098 	str.w	ip, [sp, #152]	; 0x98
 8013db4:	f7ec fffe 	bl	8000db4 <__aeabi_fmul>
 8013db8:	4684      	mov	ip, r0
 8013dba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013dbc:	9808      	ldr	r0, [sp, #32]
 8013dbe:	f8cd c09c 	str.w	ip, [sp, #156]	; 0x9c
 8013dc2:	f8cd c0a0 	str.w	ip, [sp, #160]	; 0xa0
 8013dc6:	9629      	str	r6, [sp, #164]	; 0xa4
 8013dc8:	f7ec fff4 	bl	8000db4 <__aeabi_fmul>
 8013dcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013dce:	4611      	mov	r1, r2
 8013dd0:	f7ec fff0 	bl	8000db4 <__aeabi_fmul>
 8013dd4:	4602      	mov	r2, r0
 8013dd6:	4979      	ldr	r1, [pc, #484]	; (8013fbc <iNemoEngine_API_Update+0x64c>)
 8013dd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013dda:	922a      	str	r2, [sp, #168]	; 0xa8
 8013ddc:	f7ec ffea 	bl	8000db4 <__aeabi_fmul>
 8013de0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013de2:	902b      	str	r0, [sp, #172]	; 0xac
 8013de4:	a91a      	add	r1, sp, #104	; 0x68
 8013de6:	9102      	str	r1, [sp, #8]
 8013de8:	9907      	ldr	r1, [sp, #28]
 8013dea:	aa22      	add	r2, sp, #136	; 0x88
 8013dec:	ae1e      	add	r6, sp, #120	; 0x78
 8013dee:	e9cd 6203 	strd	r6, r2, [sp, #12]
 8013df2:	4620      	mov	r0, r4
 8013df4:	9701      	str	r7, [sp, #4]
 8013df6:	9100      	str	r1, [sp, #0]
 8013df8:	aa26      	add	r2, sp, #152	; 0x98
 8013dfa:	4641      	mov	r1, r8
 8013dfc:	f7f9 fefe 	bl	800dbfc <kalman_3gyro.constprop.0>
 8013e00:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013e02:	f8d4 c1c0 	ldr.w	ip, [r4, #448]	; 0x1c0
 8013e06:	f8d4 71c4 	ldr.w	r7, [r4, #452]	; 0x1c4
 8013e0a:	f8d4 e1bc 	ldr.w	lr, [r4, #444]	; 0x1bc
 8013e0e:	9e52      	ldr	r6, [sp, #328]	; 0x148
 8013e10:	f8c4 c944 	str.w	ip, [r4, #2372]	; 0x944
 8013e14:	f8c4 7948 	str.w	r7, [r4, #2376]	; 0x948
 8013e18:	f8c4 e940 	str.w	lr, [r4, #2368]	; 0x940
 8013e1c:	6030      	str	r0, [r6, #0]
 8013e1e:	6071      	str	r1, [r6, #4]
 8013e20:	60b2      	str	r2, [r6, #8]
 8013e22:	60f3      	str	r3, [r6, #12]
 8013e24:	f8dd c078 	ldr.w	ip, [sp, #120]	; 0x78
 8013e28:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8013e2a:	9820      	ldr	r0, [sp, #128]	; 0x80
 8013e2c:	9921      	ldr	r1, [sp, #132]	; 0x84
 8013e2e:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 8013e32:	f8d4 694c 	ldr.w	r6, [r4, #2380]	; 0x94c
 8013e36:	9307      	str	r3, [sp, #28]
 8013e38:	f8c4 c930 	str.w	ip, [r4, #2352]	; 0x930
 8013e3c:	f8c4 7934 	str.w	r7, [r4, #2356]	; 0x934
 8013e40:	f8c4 0938 	str.w	r0, [r4, #2360]	; 0x938
 8013e44:	f8c4 193c 	str.w	r1, [r4, #2364]	; 0x93c
 8013e48:	e663      	b.n	8013b12 <iNemoEngine_API_Update+0x1a2>
 8013e4a:	4630      	mov	r0, r6
 8013e4c:	495c      	ldr	r1, [pc, #368]	; (8013fc0 <iNemoEngine_API_Update+0x650>)
 8013e4e:	f7ec fea9 	bl	8000ba4 <__addsf3>
 8013e52:	4606      	mov	r6, r0
 8013e54:	636e      	str	r6, [r5, #52]	; 0x34
 8013e56:	b049      	add	sp, #292	; 0x124
 8013e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e5c:	ab16      	add	r3, sp, #88	; 0x58
 8013e5e:	9352      	str	r3, [sp, #328]	; 0x148
 8013e60:	e591      	b.n	8013986 <iNemoEngine_API_Update+0x16>
 8013e62:	4649      	mov	r1, r9
 8013e64:	4648      	mov	r0, r9
 8013e66:	f7ec ffa5 	bl	8000db4 <__aeabi_fmul>
 8013e6a:	4639      	mov	r1, r7
 8013e6c:	4606      	mov	r6, r0
 8013e6e:	4638      	mov	r0, r7
 8013e70:	f7ec ffa0 	bl	8000db4 <__aeabi_fmul>
 8013e74:	4601      	mov	r1, r0
 8013e76:	4630      	mov	r0, r6
 8013e78:	f7ec fe94 	bl	8000ba4 <__addsf3>
 8013e7c:	4641      	mov	r1, r8
 8013e7e:	4606      	mov	r6, r0
 8013e80:	4640      	mov	r0, r8
 8013e82:	f7ec ff97 	bl	8000db4 <__aeabi_fmul>
 8013e86:	4601      	mov	r1, r0
 8013e88:	4630      	mov	r0, r6
 8013e8a:	f7ec fe89 	bl	8000ba0 <__aeabi_fsub>
 8013e8e:	4621      	mov	r1, r4
 8013e90:	4606      	mov	r6, r0
 8013e92:	4620      	mov	r0, r4
 8013e94:	f7ec ff8e 	bl	8000db4 <__aeabi_fmul>
 8013e98:	4601      	mov	r1, r0
 8013e9a:	4630      	mov	r0, r6
 8013e9c:	f7ec fe80 	bl	8000ba0 <__aeabi_fsub>
 8013ea0:	f7ec fb22 	bl	80004e8 <__aeabi_f2d>
 8013ea4:	4682      	mov	sl, r0
 8013ea6:	468b      	mov	fp, r1
 8013ea8:	4638      	mov	r0, r7
 8013eaa:	4641      	mov	r1, r8
 8013eac:	f7ec ff82 	bl	8000db4 <__aeabi_fmul>
 8013eb0:	4649      	mov	r1, r9
 8013eb2:	4606      	mov	r6, r0
 8013eb4:	4620      	mov	r0, r4
 8013eb6:	f7ec ff7d 	bl	8000db4 <__aeabi_fmul>
 8013eba:	4601      	mov	r1, r0
 8013ebc:	4630      	mov	r0, r6
 8013ebe:	f7ec fe71 	bl	8000ba4 <__addsf3>
 8013ec2:	4601      	mov	r1, r0
 8013ec4:	f7ec fe6e 	bl	8000ba4 <__addsf3>
 8013ec8:	f7ec fb0e 	bl	80004e8 <__aeabi_f2d>
 8013ecc:	4652      	mov	r2, sl
 8013ece:	465b      	mov	r3, fp
 8013ed0:	f004 fc44 	bl	801875c <atan2>
 8013ed4:	a32e      	add	r3, pc, #184	; (adr r3, 8013f90 <iNemoEngine_API_Update+0x620>)
 8013ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013eda:	f7ec fb5d 	bl	8000598 <__aeabi_dmul>
 8013ede:	2200      	movs	r2, #0
 8013ee0:	4b38      	ldr	r3, [pc, #224]	; (8013fc4 <iNemoEngine_API_Update+0x654>)
 8013ee2:	f7ec f9a1 	bl	8000228 <__aeabi_dsub>
 8013ee6:	f7ec fe07 	bl	8000af8 <__aeabi_d2f>
 8013eea:	4606      	mov	r6, r0
 8013eec:	e69c      	b.n	8013c28 <iNemoEngine_API_Update+0x2b8>
 8013eee:	4649      	mov	r1, r9
 8013ef0:	4648      	mov	r0, r9
 8013ef2:	f7ec ff5f 	bl	8000db4 <__aeabi_fmul>
 8013ef6:	4639      	mov	r1, r7
 8013ef8:	4606      	mov	r6, r0
 8013efa:	4638      	mov	r0, r7
 8013efc:	f7ec ff5a 	bl	8000db4 <__aeabi_fmul>
 8013f00:	4601      	mov	r1, r0
 8013f02:	4630      	mov	r0, r6
 8013f04:	f7ec fe4e 	bl	8000ba4 <__addsf3>
 8013f08:	4641      	mov	r1, r8
 8013f0a:	4606      	mov	r6, r0
 8013f0c:	4640      	mov	r0, r8
 8013f0e:	f7ec ff51 	bl	8000db4 <__aeabi_fmul>
 8013f12:	4601      	mov	r1, r0
 8013f14:	4630      	mov	r0, r6
 8013f16:	f7ec fe43 	bl	8000ba0 <__aeabi_fsub>
 8013f1a:	4621      	mov	r1, r4
 8013f1c:	4606      	mov	r6, r0
 8013f1e:	4620      	mov	r0, r4
 8013f20:	f7ec ff48 	bl	8000db4 <__aeabi_fmul>
 8013f24:	4601      	mov	r1, r0
 8013f26:	4630      	mov	r0, r6
 8013f28:	f7ec fe3a 	bl	8000ba0 <__aeabi_fsub>
 8013f2c:	f7ec fadc 	bl	80004e8 <__aeabi_f2d>
 8013f30:	4682      	mov	sl, r0
 8013f32:	468b      	mov	fp, r1
 8013f34:	4638      	mov	r0, r7
 8013f36:	4641      	mov	r1, r8
 8013f38:	f7ec ff3c 	bl	8000db4 <__aeabi_fmul>
 8013f3c:	4649      	mov	r1, r9
 8013f3e:	4606      	mov	r6, r0
 8013f40:	4620      	mov	r0, r4
 8013f42:	f7ec ff37 	bl	8000db4 <__aeabi_fmul>
 8013f46:	4601      	mov	r1, r0
 8013f48:	4630      	mov	r0, r6
 8013f4a:	f7ec fe2b 	bl	8000ba4 <__addsf3>
 8013f4e:	4601      	mov	r1, r0
 8013f50:	f7ec fe28 	bl	8000ba4 <__addsf3>
 8013f54:	f7ec fac8 	bl	80004e8 <__aeabi_f2d>
 8013f58:	4652      	mov	r2, sl
 8013f5a:	465b      	mov	r3, fp
 8013f5c:	f004 fbfe 	bl	801875c <atan2>
 8013f60:	a30b      	add	r3, pc, #44	; (adr r3, 8013f90 <iNemoEngine_API_Update+0x620>)
 8013f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f66:	f7ec fb17 	bl	8000598 <__aeabi_dmul>
 8013f6a:	2200      	movs	r2, #0
 8013f6c:	4b15      	ldr	r3, [pc, #84]	; (8013fc4 <iNemoEngine_API_Update+0x654>)
 8013f6e:	f7ec f95d 	bl	800022c <__adddf3>
 8013f72:	f7ec fdc1 	bl	8000af8 <__aeabi_d2f>
 8013f76:	4606      	mov	r6, r0
 8013f78:	e656      	b.n	8013c28 <iNemoEngine_API_Update+0x2b8>
 8013f7a:	f9b4 3974 	ldrsh.w	r3, [r4, #2420]	; 0x974
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	dd70      	ble.n	8014064 <iNemoEngine_API_Update+0x6f4>
 8013f82:	3b01      	subs	r3, #1
 8013f84:	f8a4 3974 	strh.w	r3, [r4, #2420]	; 0x974
 8013f88:	e51d      	b.n	80139c6 <iNemoEngine_API_Update+0x56>
 8013f8a:	bf00      	nop
 8013f8c:	f3af 8000 	nop.w
 8013f90:	20000000 	.word	0x20000000
 8013f94:	404ca5dc 	.word	0x404ca5dc
 8013f98:	3c8efa35 	.word	0x3c8efa35
 8013f9c:	3c03126f 	.word	0x3c03126f
 8013fa0:	3b656042 	.word	0x3b656042
 8013fa4:	3ed93dd9 	.word	0x3ed93dd9
 8013fa8:	3fb50481 	.word	0x3fb50481
 8013fac:	3e4ccccd 	.word	0x3e4ccccd
 8013fb0:	42c80000 	.word	0x42c80000
 8013fb4:	3a83126f 	.word	0x3a83126f
 8013fb8:	3d4ccccd 	.word	0x3d4ccccd
 8013fbc:	3f333333 	.word	0x3f333333
 8013fc0:	43b40000 	.word	0x43b40000
 8013fc4:	40568000 	.word	0x40568000
 8013fc8:	8862      	ldrh	r2, [r4, #2]
 8013fca:	4b1e      	ldr	r3, [pc, #120]	; (8014044 <iNemoEngine_API_Update+0x6d4>)
 8013fcc:	1e51      	subs	r1, r2, #1
 8013fce:	2912      	cmp	r1, #18
 8013fd0:	9307      	str	r3, [sp, #28]
 8013fd2:	4b1d      	ldr	r3, [pc, #116]	; (8014048 <iNemoEngine_API_Update+0x6d8>)
 8013fd4:	f67f aed3 	bls.w	8013d7e <iNemoEngine_API_Update+0x40e>
 8013fd8:	491c      	ldr	r1, [pc, #112]	; (801404c <iNemoEngine_API_Update+0x6dc>)
 8013fda:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8013fdc:	930a      	str	r3, [sp, #40]	; 0x28
 8013fde:	f7ec fde1 	bl	8000ba4 <__addsf3>
 8013fe2:	4601      	mov	r1, r0
 8013fe4:	4658      	mov	r0, fp
 8013fe6:	f7ec ff99 	bl	8000f1c <__aeabi_fdiv>
 8013fea:	4602      	mov	r2, r0
 8013fec:	4651      	mov	r1, sl
 8013fee:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8013ff0:	9226      	str	r2, [sp, #152]	; 0x98
 8013ff2:	f7ec fedf 	bl	8000db4 <__aeabi_fmul>
 8013ff6:	4602      	mov	r2, r0
 8013ff8:	4651      	mov	r1, sl
 8013ffa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8013ffc:	9227      	str	r2, [sp, #156]	; 0x9c
 8013ffe:	f7ec fed9 	bl	8000db4 <__aeabi_fmul>
 8014002:	4602      	mov	r2, r0
 8014004:	9908      	ldr	r1, [sp, #32]
 8014006:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8014008:	9228      	str	r2, [sp, #160]	; 0xa0
 801400a:	9629      	str	r6, [sp, #164]	; 0xa4
 801400c:	f7ec fed2 	bl	8000db4 <__aeabi_fmul>
 8014010:	4602      	mov	r2, r0
 8014012:	490f      	ldr	r1, [pc, #60]	; (8014050 <iNemoEngine_API_Update+0x6e0>)
 8014014:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014016:	922a      	str	r2, [sp, #168]	; 0xa8
 8014018:	f7ec fecc 	bl	8000db4 <__aeabi_fmul>
 801401c:	2200      	movs	r2, #0
 801401e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014020:	902b      	str	r0, [sp, #172]	; 0xac
 8014022:	8062      	strh	r2, [r4, #2]
 8014024:	e6de      	b.n	8013de4 <iNemoEngine_API_Update+0x474>
 8014026:	4630      	mov	r0, r6
 8014028:	490a      	ldr	r1, [pc, #40]	; (8014054 <iNemoEngine_API_Update+0x6e4>)
 801402a:	f7ec fec3 	bl	8000db4 <__aeabi_fmul>
 801402e:	6963      	ldr	r3, [r4, #20]
 8014030:	4606      	mov	r6, r0
 8014032:	9307      	str	r3, [sp, #28]
 8014034:	4b08      	ldr	r3, [pc, #32]	; (8014058 <iNemoEngine_API_Update+0x6e8>)
 8014036:	e69d      	b.n	8013d74 <iNemoEngine_API_Update+0x404>
 8014038:	6963      	ldr	r3, [r4, #20]
 801403a:	9307      	str	r3, [sp, #28]
 801403c:	4b07      	ldr	r3, [pc, #28]	; (801405c <iNemoEngine_API_Update+0x6ec>)
 801403e:	e699      	b.n	8013d74 <iNemoEngine_API_Update+0x404>
 8014040:	4a07      	ldr	r2, [pc, #28]	; (8014060 <iNemoEngine_API_Update+0x6f0>)
 8014042:	e6ab      	b.n	8013d9c <iNemoEngine_API_Update+0x42c>
 8014044:	3dcccccd 	.word	0x3dcccccd
 8014048:	3a83126f 	.word	0x3a83126f
 801404c:	358637bd 	.word	0x358637bd
 8014050:	3f333333 	.word	0x3f333333
 8014054:	40a00000 	.word	0x40a00000
 8014058:	3727c5ac 	.word	0x3727c5ac
 801405c:	3ac49ba6 	.word	0x3ac49ba6
 8014060:	3e4ccccd 	.word	0x3e4ccccd
 8014064:	49c5      	ldr	r1, [pc, #788]	; (801437c <iNemoEngine_API_Update+0xa0c>)
 8014066:	f8d4 04b4 	ldr.w	r0, [r4, #1204]	; 0x4b4
 801406a:	f7ec fea3 	bl	8000db4 <__aeabi_fmul>
 801406e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8014072:	4606      	mov	r6, r0
 8014074:	f8d4 04b8 	ldr.w	r0, [r4, #1208]	; 0x4b8
 8014078:	f7ec fe9c 	bl	8000db4 <__aeabi_fmul>
 801407c:	f8d4 14c4 	ldr.w	r1, [r4, #1220]	; 0x4c4
 8014080:	f7ec fd8e 	bl	8000ba0 <__aeabi_fsub>
 8014084:	f8d4 14dc 	ldr.w	r1, [r4, #1244]	; 0x4dc
 8014088:	f7ec fd8c 	bl	8000ba4 <__addsf3>
 801408c:	f8d4 14e8 	ldr.w	r1, [r4, #1256]	; 0x4e8
 8014090:	4607      	mov	r7, r0
 8014092:	4608      	mov	r0, r1
 8014094:	f7ec fd86 	bl	8000ba4 <__addsf3>
 8014098:	4601      	mov	r1, r0
 801409a:	4638      	mov	r0, r7
 801409c:	f7ec fd82 	bl	8000ba4 <__addsf3>
 80140a0:	4631      	mov	r1, r6
 80140a2:	f7ec fe87 	bl	8000db4 <__aeabi_fmul>
 80140a6:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80140aa:	4681      	mov	r9, r0
 80140ac:	f8d4 04bc 	ldr.w	r0, [r4, #1212]	; 0x4bc
 80140b0:	f7ec fe80 	bl	8000db4 <__aeabi_fmul>
 80140b4:	f8d4 14c8 	ldr.w	r1, [r4, #1224]	; 0x4c8
 80140b8:	f7ec fd72 	bl	8000ba0 <__aeabi_fsub>
 80140bc:	f8d4 14e0 	ldr.w	r1, [r4, #1248]	; 0x4e0
 80140c0:	f7ec fd70 	bl	8000ba4 <__addsf3>
 80140c4:	f8d4 14ec 	ldr.w	r1, [r4, #1260]	; 0x4ec
 80140c8:	4607      	mov	r7, r0
 80140ca:	4608      	mov	r0, r1
 80140cc:	f7ec fd6a 	bl	8000ba4 <__addsf3>
 80140d0:	4601      	mov	r1, r0
 80140d2:	4638      	mov	r0, r7
 80140d4:	f7ec fd66 	bl	8000ba4 <__addsf3>
 80140d8:	4631      	mov	r1, r6
 80140da:	f7ec fe6b 	bl	8000db4 <__aeabi_fmul>
 80140de:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80140e2:	4680      	mov	r8, r0
 80140e4:	f8d4 04c0 	ldr.w	r0, [r4, #1216]	; 0x4c0
 80140e8:	f7ec fe64 	bl	8000db4 <__aeabi_fmul>
 80140ec:	f8d4 14cc 	ldr.w	r1, [r4, #1228]	; 0x4cc
 80140f0:	f7ec fd56 	bl	8000ba0 <__aeabi_fsub>
 80140f4:	f8d4 14e4 	ldr.w	r1, [r4, #1252]	; 0x4e4
 80140f8:	f7ec fd54 	bl	8000ba4 <__addsf3>
 80140fc:	f8d4 14f0 	ldr.w	r1, [r4, #1264]	; 0x4f0
 8014100:	4607      	mov	r7, r0
 8014102:	4608      	mov	r0, r1
 8014104:	f7ec fd4e 	bl	8000ba4 <__addsf3>
 8014108:	4601      	mov	r1, r0
 801410a:	4638      	mov	r0, r7
 801410c:	f7ec fd4a 	bl	8000ba4 <__addsf3>
 8014110:	4631      	mov	r1, r6
 8014112:	f7ec fe4f 	bl	8000db4 <__aeabi_fmul>
 8014116:	4649      	mov	r1, r9
 8014118:	4607      	mov	r7, r0
 801411a:	4648      	mov	r0, r9
 801411c:	f7ec fe4a 	bl	8000db4 <__aeabi_fmul>
 8014120:	4641      	mov	r1, r8
 8014122:	4606      	mov	r6, r0
 8014124:	4640      	mov	r0, r8
 8014126:	f7ec fe45 	bl	8000db4 <__aeabi_fmul>
 801412a:	4601      	mov	r1, r0
 801412c:	4630      	mov	r0, r6
 801412e:	f7ec fd39 	bl	8000ba4 <__addsf3>
 8014132:	4639      	mov	r1, r7
 8014134:	4606      	mov	r6, r0
 8014136:	4638      	mov	r0, r7
 8014138:	f7ec fe3c 	bl	8000db4 <__aeabi_fmul>
 801413c:	4601      	mov	r1, r0
 801413e:	4630      	mov	r0, r6
 8014140:	f7ec fd30 	bl	8000ba4 <__addsf3>
 8014144:	f004 fb72 	bl	801882c <sqrtf>
 8014148:	498c      	ldr	r1, [pc, #560]	; (801437c <iNemoEngine_API_Update+0xa0c>)
 801414a:	4681      	mov	r9, r0
 801414c:	f8d4 0624 	ldr.w	r0, [r4, #1572]	; 0x624
 8014150:	f7ec fe30 	bl	8000db4 <__aeabi_fmul>
 8014154:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8014158:	4606      	mov	r6, r0
 801415a:	f8d4 0628 	ldr.w	r0, [r4, #1576]	; 0x628
 801415e:	f7ec fe29 	bl	8000db4 <__aeabi_fmul>
 8014162:	f8d4 1634 	ldr.w	r1, [r4, #1588]	; 0x634
 8014166:	f7ec fd1b 	bl	8000ba0 <__aeabi_fsub>
 801416a:	f8d4 164c 	ldr.w	r1, [r4, #1612]	; 0x64c
 801416e:	f7ec fd19 	bl	8000ba4 <__addsf3>
 8014172:	f8d4 1658 	ldr.w	r1, [r4, #1624]	; 0x658
 8014176:	4607      	mov	r7, r0
 8014178:	4608      	mov	r0, r1
 801417a:	f7ec fd13 	bl	8000ba4 <__addsf3>
 801417e:	4601      	mov	r1, r0
 8014180:	4638      	mov	r0, r7
 8014182:	f7ec fd0f 	bl	8000ba4 <__addsf3>
 8014186:	4631      	mov	r1, r6
 8014188:	f7ec fe14 	bl	8000db4 <__aeabi_fmul>
 801418c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8014190:	4682      	mov	sl, r0
 8014192:	f8d4 062c 	ldr.w	r0, [r4, #1580]	; 0x62c
 8014196:	f7ec fe0d 	bl	8000db4 <__aeabi_fmul>
 801419a:	f8d4 1638 	ldr.w	r1, [r4, #1592]	; 0x638
 801419e:	f7ec fcff 	bl	8000ba0 <__aeabi_fsub>
 80141a2:	f8d4 1650 	ldr.w	r1, [r4, #1616]	; 0x650
 80141a6:	f7ec fcfd 	bl	8000ba4 <__addsf3>
 80141aa:	f8d4 165c 	ldr.w	r1, [r4, #1628]	; 0x65c
 80141ae:	4607      	mov	r7, r0
 80141b0:	4608      	mov	r0, r1
 80141b2:	f7ec fcf7 	bl	8000ba4 <__addsf3>
 80141b6:	4601      	mov	r1, r0
 80141b8:	4638      	mov	r0, r7
 80141ba:	f7ec fcf3 	bl	8000ba4 <__addsf3>
 80141be:	4631      	mov	r1, r6
 80141c0:	f7ec fdf8 	bl	8000db4 <__aeabi_fmul>
 80141c4:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80141c8:	4680      	mov	r8, r0
 80141ca:	f8d4 0630 	ldr.w	r0, [r4, #1584]	; 0x630
 80141ce:	f7ec fdf1 	bl	8000db4 <__aeabi_fmul>
 80141d2:	f8d4 163c 	ldr.w	r1, [r4, #1596]	; 0x63c
 80141d6:	f7ec fce3 	bl	8000ba0 <__aeabi_fsub>
 80141da:	f8d4 1654 	ldr.w	r1, [r4, #1620]	; 0x654
 80141de:	f7ec fce1 	bl	8000ba4 <__addsf3>
 80141e2:	f8d4 1660 	ldr.w	r1, [r4, #1632]	; 0x660
 80141e6:	4607      	mov	r7, r0
 80141e8:	4608      	mov	r0, r1
 80141ea:	f7ec fcdb 	bl	8000ba4 <__addsf3>
 80141ee:	4601      	mov	r1, r0
 80141f0:	4638      	mov	r0, r7
 80141f2:	f7ec fcd7 	bl	8000ba4 <__addsf3>
 80141f6:	4631      	mov	r1, r6
 80141f8:	f7ec fddc 	bl	8000db4 <__aeabi_fmul>
 80141fc:	4651      	mov	r1, sl
 80141fe:	4607      	mov	r7, r0
 8014200:	4650      	mov	r0, sl
 8014202:	f7ec fdd7 	bl	8000db4 <__aeabi_fmul>
 8014206:	4641      	mov	r1, r8
 8014208:	4606      	mov	r6, r0
 801420a:	4640      	mov	r0, r8
 801420c:	f7ec fdd2 	bl	8000db4 <__aeabi_fmul>
 8014210:	4601      	mov	r1, r0
 8014212:	4630      	mov	r0, r6
 8014214:	f7ec fcc6 	bl	8000ba4 <__addsf3>
 8014218:	4639      	mov	r1, r7
 801421a:	4606      	mov	r6, r0
 801421c:	4638      	mov	r0, r7
 801421e:	f7ec fdc9 	bl	8000db4 <__aeabi_fmul>
 8014222:	4601      	mov	r1, r0
 8014224:	4630      	mov	r0, r6
 8014226:	f7ec fcbd 	bl	8000ba4 <__addsf3>
 801422a:	f004 faff 	bl	801882c <sqrtf>
 801422e:	4953      	ldr	r1, [pc, #332]	; (801437c <iNemoEngine_API_Update+0xa0c>)
 8014230:	4683      	mov	fp, r0
 8014232:	f8d4 0794 	ldr.w	r0, [r4, #1940]	; 0x794
 8014236:	f7ec fdbd 	bl	8000db4 <__aeabi_fmul>
 801423a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 801423e:	4606      	mov	r6, r0
 8014240:	f8d4 0798 	ldr.w	r0, [r4, #1944]	; 0x798
 8014244:	f7ec fdb6 	bl	8000db4 <__aeabi_fmul>
 8014248:	f8d4 17a4 	ldr.w	r1, [r4, #1956]	; 0x7a4
 801424c:	f7ec fca8 	bl	8000ba0 <__aeabi_fsub>
 8014250:	f8d4 17bc 	ldr.w	r1, [r4, #1980]	; 0x7bc
 8014254:	f7ec fca6 	bl	8000ba4 <__addsf3>
 8014258:	f8d4 17c8 	ldr.w	r1, [r4, #1992]	; 0x7c8
 801425c:	4607      	mov	r7, r0
 801425e:	4608      	mov	r0, r1
 8014260:	f7ec fca0 	bl	8000ba4 <__addsf3>
 8014264:	4601      	mov	r1, r0
 8014266:	4638      	mov	r0, r7
 8014268:	f7ec fc9c 	bl	8000ba4 <__addsf3>
 801426c:	4631      	mov	r1, r6
 801426e:	f7ec fda1 	bl	8000db4 <__aeabi_fmul>
 8014272:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8014276:	4680      	mov	r8, r0
 8014278:	f8d4 079c 	ldr.w	r0, [r4, #1948]	; 0x79c
 801427c:	f7ec fd9a 	bl	8000db4 <__aeabi_fmul>
 8014280:	f8d4 17a8 	ldr.w	r1, [r4, #1960]	; 0x7a8
 8014284:	f7ec fc8c 	bl	8000ba0 <__aeabi_fsub>
 8014288:	f8d4 17c0 	ldr.w	r1, [r4, #1984]	; 0x7c0
 801428c:	f7ec fc8a 	bl	8000ba4 <__addsf3>
 8014290:	f8d4 17cc 	ldr.w	r1, [r4, #1996]	; 0x7cc
 8014294:	4607      	mov	r7, r0
 8014296:	4608      	mov	r0, r1
 8014298:	f7ec fc84 	bl	8000ba4 <__addsf3>
 801429c:	4601      	mov	r1, r0
 801429e:	4638      	mov	r0, r7
 80142a0:	f7ec fc80 	bl	8000ba4 <__addsf3>
 80142a4:	4631      	mov	r1, r6
 80142a6:	f7ec fd85 	bl	8000db4 <__aeabi_fmul>
 80142aa:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80142ae:	4607      	mov	r7, r0
 80142b0:	f8d4 07a0 	ldr.w	r0, [r4, #1952]	; 0x7a0
 80142b4:	f7ec fd7e 	bl	8000db4 <__aeabi_fmul>
 80142b8:	f8d4 17ac 	ldr.w	r1, [r4, #1964]	; 0x7ac
 80142bc:	f7ec fc70 	bl	8000ba0 <__aeabi_fsub>
 80142c0:	f8d4 17c4 	ldr.w	r1, [r4, #1988]	; 0x7c4
 80142c4:	f7ec fc6e 	bl	8000ba4 <__addsf3>
 80142c8:	f8d4 17d0 	ldr.w	r1, [r4, #2000]	; 0x7d0
 80142cc:	4682      	mov	sl, r0
 80142ce:	4608      	mov	r0, r1
 80142d0:	f7ec fc68 	bl	8000ba4 <__addsf3>
 80142d4:	4601      	mov	r1, r0
 80142d6:	4650      	mov	r0, sl
 80142d8:	f7ec fc64 	bl	8000ba4 <__addsf3>
 80142dc:	4631      	mov	r1, r6
 80142de:	f7ec fd69 	bl	8000db4 <__aeabi_fmul>
 80142e2:	4641      	mov	r1, r8
 80142e4:	4606      	mov	r6, r0
 80142e6:	4640      	mov	r0, r8
 80142e8:	f7ec fd64 	bl	8000db4 <__aeabi_fmul>
 80142ec:	4639      	mov	r1, r7
 80142ee:	4607      	mov	r7, r0
 80142f0:	4608      	mov	r0, r1
 80142f2:	f7ec fd5f 	bl	8000db4 <__aeabi_fmul>
 80142f6:	4601      	mov	r1, r0
 80142f8:	4638      	mov	r0, r7
 80142fa:	f7ec fc53 	bl	8000ba4 <__addsf3>
 80142fe:	4631      	mov	r1, r6
 8014300:	4606      	mov	r6, r0
 8014302:	4608      	mov	r0, r1
 8014304:	f7ec fd56 	bl	8000db4 <__aeabi_fmul>
 8014308:	4601      	mov	r1, r0
 801430a:	4630      	mov	r0, r6
 801430c:	f7ec fc4a 	bl	8000ba4 <__addsf3>
 8014310:	f004 fa8c 	bl	801882c <sqrtf>
 8014314:	f9b4 6976 	ldrsh.w	r6, [r4, #2422]	; 0x976
 8014318:	4682      	mov	sl, r0
 801431a:	4630      	mov	r0, r6
 801431c:	f7ec fcf6 	bl	8000d0c <__aeabi_i2f>
 8014320:	3601      	adds	r6, #1
 8014322:	4680      	mov	r8, r0
 8014324:	4630      	mov	r0, r6
 8014326:	f7ec fcf1 	bl	8000d0c <__aeabi_i2f>
 801432a:	4601      	mov	r1, r0
 801432c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8014330:	f7ec fdf4 	bl	8000f1c <__aeabi_fdiv>
 8014334:	4607      	mov	r7, r0
 8014336:	f8d4 196c 	ldr.w	r1, [r4, #2412]	; 0x96c
 801433a:	4640      	mov	r0, r8
 801433c:	f7ec fd3a 	bl	8000db4 <__aeabi_fmul>
 8014340:	4649      	mov	r1, r9
 8014342:	f7ec fc2f 	bl	8000ba4 <__addsf3>
 8014346:	4639      	mov	r1, r7
 8014348:	f7ec fd34 	bl	8000db4 <__aeabi_fmul>
 801434c:	4681      	mov	r9, r0
 801434e:	f8d4 1968 	ldr.w	r1, [r4, #2408]	; 0x968
 8014352:	4640      	mov	r0, r8
 8014354:	f8c4 996c 	str.w	r9, [r4, #2412]	; 0x96c
 8014358:	f7ec fd2c 	bl	8000db4 <__aeabi_fmul>
 801435c:	4659      	mov	r1, fp
 801435e:	f7ec fc21 	bl	8000ba4 <__addsf3>
 8014362:	4639      	mov	r1, r7
 8014364:	f7ec fd26 	bl	8000db4 <__aeabi_fmul>
 8014368:	4683      	mov	fp, r0
 801436a:	f8d4 1970 	ldr.w	r1, [r4, #2416]	; 0x970
 801436e:	4640      	mov	r0, r8
 8014370:	f8c4 b968 	str.w	fp, [r4, #2408]	; 0x968
 8014374:	f7ec fd1e 	bl	8000db4 <__aeabi_fmul>
 8014378:	e002      	b.n	8014380 <iNemoEngine_API_Update+0xa10>
 801437a:	bf00      	nop
 801437c:	3dcccccd 	.word	0x3dcccccd
 8014380:	4651      	mov	r1, sl
 8014382:	f7ec fc0f 	bl	8000ba4 <__addsf3>
 8014386:	4639      	mov	r1, r7
 8014388:	f7ec fd14 	bl	8000db4 <__aeabi_fmul>
 801438c:	b236      	sxth	r6, r6
 801438e:	f5b6 7ffa 	cmp.w	r6, #500	; 0x1f4
 8014392:	4607      	mov	r7, r0
 8014394:	f8a4 6976 	strh.w	r6, [r4, #2422]	; 0x976
 8014398:	f8c4 0970 	str.w	r0, [r4, #2416]	; 0x970
 801439c:	f47f ab13 	bne.w	80139c6 <iNemoEngine_API_Update+0x56>
 80143a0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80143a4:	4658      	mov	r0, fp
 80143a6:	f7ec fd05 	bl	8000db4 <__aeabi_fmul>
 80143aa:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80143ae:	61e0      	str	r0, [r4, #28]
 80143b0:	4638      	mov	r0, r7
 80143b2:	f7ec fcff 	bl	8000db4 <__aeabi_fmul>
 80143b6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80143ba:	6220      	str	r0, [r4, #32]
 80143bc:	4648      	mov	r0, r9
 80143be:	f7ec fcf9 	bl	8000db4 <__aeabi_fmul>
 80143c2:	2300      	movs	r3, #0
 80143c4:	2200      	movs	r2, #0
 80143c6:	61a0      	str	r0, [r4, #24]
 80143c8:	f8a4 2976 	strh.w	r2, [r4, #2422]	; 0x976
 80143cc:	f884 2978 	strb.w	r2, [r4, #2424]	; 0x978
 80143d0:	f8c4 396c 	str.w	r3, [r4, #2412]	; 0x96c
 80143d4:	f8c4 3968 	str.w	r3, [r4, #2408]	; 0x968
 80143d8:	f8c4 3970 	str.w	r3, [r4, #2416]	; 0x970
 80143dc:	f7ff baf3 	b.w	80139c6 <iNemoEngine_API_Update+0x56>
 80143e0:	2600      	movs	r6, #0
 80143e2:	e432      	b.n	8013c4a <iNemoEngine_API_Update+0x2da>

080143e4 <MEMS_getSensorData_I16>:
 80143e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80143e8:	4686      	mov	lr, r0
 80143ea:	8900      	ldrh	r0, [r0, #8]
 80143ec:	f9be 4002 	ldrsh.w	r4, [lr, #2]
 80143f0:	f8de 500c 	ldr.w	r5, [lr, #12]
 80143f4:	1e43      	subs	r3, r0, #1
 80143f6:	4290      	cmp	r0, r2
 80143f8:	fb04 5313 	mls	r3, r4, r3, r5
 80143fc:	fa1f f982 	uxth.w	r9, r2
 8014400:	d94d      	bls.n	801449e <MEMS_getSensorData_I16+0xba>
 8014402:	eba0 0802 	sub.w	r8, r0, r2
 8014406:	46cc      	mov	ip, r9
 8014408:	f8a1 9004 	strh.w	r9, [r1, #4]
 801440c:	600b      	str	r3, [r1, #0]
 801440e:	fa5f f888 	uxtb.w	r8, r8
 8014412:	f1b9 0f00 	cmp.w	r9, #0
 8014416:	d018      	beq.n	801444a <MEMS_getSensorData_I16+0x66>
 8014418:	2300      	movs	r3, #0
 801441a:	688e      	ldr	r6, [r1, #8]
 801441c:	f8de 5010 	ldr.w	r5, [lr, #16]
 8014420:	f815 1033 	ldrb.w	r1, [r5, r3, lsl #3]
 8014424:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 8014428:	f806 1033 	strb.w	r1, [r6, r3, lsl #3]
 801442c:	f8d4 7002 	ldr.w	r7, [r4, #2]
 8014430:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
 8014434:	f8c1 7002 	str.w	r7, [r1, #2]
 8014438:	3301      	adds	r3, #1
 801443a:	88e7      	ldrh	r7, [r4, #6]
 801443c:	b2dc      	uxtb	r4, r3
 801443e:	4564      	cmp	r4, ip
 8014440:	4623      	mov	r3, r4
 8014442:	80cf      	strh	r7, [r1, #6]
 8014444:	d3ec      	bcc.n	8014420 <MEMS_getSensorData_I16+0x3c>
 8014446:	4548      	cmp	r0, r9
 8014448:	d930      	bls.n	80144ac <MEMS_getSensorData_I16+0xc8>
 801444a:	eba0 0309 	sub.w	r3, r0, r9
 801444e:	b29b      	uxth	r3, r3
 8014450:	f8ae 3008 	strh.w	r3, [lr, #8]
 8014454:	f1b8 0f00 	cmp.w	r8, #0
 8014458:	d01f      	beq.n	801449a <MEMS_getSensorData_I16+0xb6>
 801445a:	2400      	movs	r4, #0
 801445c:	f8de 3010 	ldr.w	r3, [lr, #16]
 8014460:	f108 38ff 	add.w	r8, r8, #4294967295
 8014464:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8014468:	f103 000a 	add.w	r0, r3, #10
 801446c:	fa5f f888 	uxtb.w	r8, r8
 8014470:	3202      	adds	r2, #2
 8014472:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
 8014476:	3302      	adds	r3, #2
 8014478:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 801447c:	3308      	adds	r3, #8
 801447e:	f803 1c0a 	strb.w	r1, [r3, #-10]
 8014482:	6811      	ldr	r1, [r2, #0]
 8014484:	3208      	adds	r2, #8
 8014486:	f843 1c08 	str.w	r1, [r3, #-8]
 801448a:	f932 1c04 	ldrsh.w	r1, [r2, #-4]
 801448e:	f823 1c04 	strh.w	r1, [r3, #-4]
 8014492:	4283      	cmp	r3, r0
 8014494:	f802 4c0a 	strb.w	r4, [r2, #-10]
 8014498:	d1ee      	bne.n	8014478 <MEMS_getSensorData_I16+0x94>
 801449a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801449e:	8088      	strh	r0, [r1, #4]
 80144a0:	600b      	str	r3, [r1, #0]
 80144a2:	b128      	cbz	r0, 80144b0 <MEMS_getSensorData_I16+0xcc>
 80144a4:	4684      	mov	ip, r0
 80144a6:	f04f 0800 	mov.w	r8, #0
 80144aa:	e7b5      	b.n	8014418 <MEMS_getSensorData_I16+0x34>
 80144ac:	2300      	movs	r3, #0
 80144ae:	e7cf      	b.n	8014450 <MEMS_getSensorData_I16+0x6c>
 80144b0:	f8ae 0008 	strh.w	r0, [lr, #8]
 80144b4:	e7f1      	b.n	801449a <MEMS_getSensorData_I16+0xb6>
 80144b6:	bf00      	nop

080144b8 <MEMS_SolveLinearEq>:
 80144b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144bc:	2500      	movs	r5, #0
 80144be:	b0b1      	sub	sp, #196	; 0xc4
 80144c0:	461f      	mov	r7, r3
 80144c2:	4614      	mov	r4, r2
 80144c4:	2200      	movs	r2, #0
 80144c6:	9307      	str	r3, [sp, #28]
 80144c8:	4603      	mov	r3, r0
 80144ca:	460e      	mov	r6, r1
 80144cc:	983a      	ldr	r0, [sp, #232]	; 0xe8
 80144ce:	9106      	str	r1, [sp, #24]
 80144d0:	6002      	str	r2, [r0, #0]
 80144d2:	4629      	mov	r1, r5
 80144d4:	2240      	movs	r2, #64	; 0x40
 80144d6:	603d      	str	r5, [r7, #0]
 80144d8:	607d      	str	r5, [r7, #4]
 80144da:	60bd      	str	r5, [r7, #8]
 80144dc:	60fd      	str	r5, [r7, #12]
 80144de:	a810      	add	r0, sp, #64	; 0x40
 80144e0:	9302      	str	r3, [sp, #8]
 80144e2:	e9cd 5508 	strd	r5, r5, [sp, #32]
 80144e6:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
 80144ea:	f003 faff 	bl	8017aec <memset>
 80144ee:	4629      	mov	r1, r5
 80144f0:	2240      	movs	r2, #64	; 0x40
 80144f2:	a820      	add	r0, sp, #128	; 0x80
 80144f4:	f003 fafa 	bl	8017aec <memset>
 80144f8:	68f3      	ldr	r3, [r6, #12]
 80144fa:	49ab      	ldr	r1, [pc, #684]	; (80147a8 <MEMS_SolveLinearEq+0x2f0>)
 80144fc:	4618      	mov	r0, r3
 80144fe:	9305      	str	r3, [sp, #20]
 8014500:	f7ec fdf6 	bl	80010f0 <__aeabi_fcmplt>
 8014504:	2800      	cmp	r0, #0
 8014506:	f040 8095 	bne.w	8014634 <MEMS_SolveLinearEq+0x17c>
 801450a:	9b02      	ldr	r3, [sp, #8]
 801450c:	781a      	ldrb	r2, [r3, #0]
 801450e:	7859      	ldrb	r1, [r3, #1]
 8014510:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8014514:	428a      	cmp	r2, r1
 8014516:	f000 8091 	beq.w	801463c <MEMS_SolveLinearEq+0x184>
 801451a:	4608      	mov	r0, r1
 801451c:	3301      	adds	r3, #1
 801451e:	9103      	str	r1, [sp, #12]
 8014520:	1a99      	subs	r1, r3, r2
 8014522:	fb91 f3f0 	sdiv	r3, r1, r0
 8014526:	fb00 1313 	mls	r3, r0, r3, r1
 801452a:	2b00      	cmp	r3, #0
 801452c:	bfbc      	itt	lt
 801452e:	4601      	movlt	r1, r0
 8014530:	185b      	addlt	r3, r3, r1
 8014532:	b21b      	sxth	r3, r3
 8014534:	2a00      	cmp	r2, #0
 8014536:	f000 8256 	beq.w	80149e6 <MEMS_SolveLinearEq+0x52e>
 801453a:	4699      	mov	r9, r3
 801453c:	9b06      	ldr	r3, [sp, #24]
 801453e:	3a01      	subs	r2, #1
 8014540:	6859      	ldr	r1, [r3, #4]
 8014542:	f8d3 b000 	ldr.w	fp, [r3]
 8014546:	b2d2      	uxtb	r2, r2
 8014548:	689b      	ldr	r3, [r3, #8]
 801454a:	3201      	adds	r2, #1
 801454c:	9301      	str	r3, [sp, #4]
 801454e:	eb02 0309 	add.w	r3, r2, r9
 8014552:	9100      	str	r1, [sp, #0]
 8014554:	9304      	str	r3, [sp, #16]
 8014556:	9b03      	ldr	r3, [sp, #12]
 8014558:	fb99 f5f3 	sdiv	r5, r9, r3
 801455c:	fb03 9515 	mls	r5, r3, r5, r9
 8014560:	9b02      	ldr	r3, [sp, #8]
 8014562:	b2ed      	uxtb	r5, r5
 8014564:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8014568:	f9b5 0022 	ldrsh.w	r0, [r5, #34]	; 0x22
 801456c:	f7ec fbce 	bl	8000d0c <__aeabi_i2f>
 8014570:	4621      	mov	r1, r4
 8014572:	f7ec fc1f 	bl	8000db4 <__aeabi_fmul>
 8014576:	4659      	mov	r1, fp
 8014578:	4607      	mov	r7, r0
 801457a:	f7ec fb11 	bl	8000ba0 <__aeabi_fsub>
 801457e:	4680      	mov	r8, r0
 8014580:	f9b5 0024 	ldrsh.w	r0, [r5, #36]	; 0x24
 8014584:	f7ec fbc2 	bl	8000d0c <__aeabi_i2f>
 8014588:	4621      	mov	r1, r4
 801458a:	f7ec fc13 	bl	8000db4 <__aeabi_fmul>
 801458e:	9900      	ldr	r1, [sp, #0]
 8014590:	4606      	mov	r6, r0
 8014592:	f7ec fb05 	bl	8000ba0 <__aeabi_fsub>
 8014596:	4682      	mov	sl, r0
 8014598:	f9b5 0026 	ldrsh.w	r0, [r5, #38]	; 0x26
 801459c:	f7ec fbb6 	bl	8000d0c <__aeabi_i2f>
 80145a0:	4621      	mov	r1, r4
 80145a2:	f7ec fc07 	bl	8000db4 <__aeabi_fmul>
 80145a6:	9901      	ldr	r1, [sp, #4]
 80145a8:	4605      	mov	r5, r0
 80145aa:	f7ec faf9 	bl	8000ba0 <__aeabi_fsub>
 80145ae:	4684      	mov	ip, r0
 80145b0:	4641      	mov	r1, r8
 80145b2:	4640      	mov	r0, r8
 80145b4:	46e0      	mov	r8, ip
 80145b6:	f7ec fbfd 	bl	8000db4 <__aeabi_fmul>
 80145ba:	4651      	mov	r1, sl
 80145bc:	4682      	mov	sl, r0
 80145be:	4608      	mov	r0, r1
 80145c0:	f7ec fbf8 	bl	8000db4 <__aeabi_fmul>
 80145c4:	4601      	mov	r1, r0
 80145c6:	4650      	mov	r0, sl
 80145c8:	f7ec faec 	bl	8000ba4 <__addsf3>
 80145cc:	4641      	mov	r1, r8
 80145ce:	4680      	mov	r8, r0
 80145d0:	4608      	mov	r0, r1
 80145d2:	f7ec fbef 	bl	8000db4 <__aeabi_fmul>
 80145d6:	4601      	mov	r1, r0
 80145d8:	4640      	mov	r0, r8
 80145da:	f7ec fae3 	bl	8000ba4 <__addsf3>
 80145de:	4973      	ldr	r1, [pc, #460]	; (80147ac <MEMS_SolveLinearEq+0x2f4>)
 80145e0:	4680      	mov	r8, r0
 80145e2:	f7ec fd85 	bl	80010f0 <__aeabi_fcmplt>
 80145e6:	b388      	cbz	r0, 801464c <MEMS_SolveLinearEq+0x194>
 80145e8:	9b04      	ldr	r3, [sp, #16]
 80145ea:	f109 0901 	add.w	r9, r9, #1
 80145ee:	454b      	cmp	r3, r9
 80145f0:	d1b1      	bne.n	8014556 <MEMS_SolveLinearEq+0x9e>
 80145f2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80145f4:	2401      	movs	r4, #1
 80145f6:	2100      	movs	r1, #0
 80145f8:	4623      	mov	r3, r4
 80145fa:	e006      	b.n	801460a <MEMS_SolveLinearEq+0x152>
 80145fc:	a830      	add	r0, sp, #192	; 0xc0
 80145fe:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8014602:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8014606:	f852 0c80 	ldr.w	r0, [r2, #-128]
 801460a:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 801460e:	3301      	adds	r3, #1
 8014610:	ad30      	add	r5, sp, #192	; 0xc0
 8014612:	b2db      	uxtb	r3, r3
 8014614:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8014618:	2b04      	cmp	r3, #4
 801461a:	f842 0c80 	str.w	r0, [r2, #-128]
 801461e:	460a      	mov	r2, r1
 8014620:	d1ec      	bne.n	80145fc <MEMS_SolveLinearEq+0x144>
 8014622:	1c63      	adds	r3, r4, #1
 8014624:	b2db      	uxtb	r3, r3
 8014626:	2b04      	cmp	r3, #4
 8014628:	f000 80c2 	beq.w	80147b0 <MEMS_SolveLinearEq+0x2f8>
 801462c:	4622      	mov	r2, r4
 801462e:	4621      	mov	r1, r4
 8014630:	461c      	mov	r4, r3
 8014632:	e7e3      	b.n	80145fc <MEMS_SolveLinearEq+0x144>
 8014634:	2000      	movs	r0, #0
 8014636:	b031      	add	sp, #196	; 0xc4
 8014638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801463c:	1c59      	adds	r1, r3, #1
 801463e:	fb91 f3f2 	sdiv	r3, r1, r2
 8014642:	fb02 1313 	mls	r3, r2, r3, r1
 8014646:	9203      	str	r2, [sp, #12]
 8014648:	b21b      	sxth	r3, r3
 801464a:	e773      	b.n	8014534 <MEMS_SolveLinearEq+0x7c>
 801464c:	4640      	mov	r0, r8
 801464e:	f004 f8ed 	bl	801882c <sqrtf>
 8014652:	4680      	mov	r8, r0
 8014654:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8014658:	4641      	mov	r1, r8
 801465a:	f7ec fc5f 	bl	8000f1c <__aeabi_fdiv>
 801465e:	4639      	mov	r1, r7
 8014660:	4607      	mov	r7, r0
 8014662:	4658      	mov	r0, fp
 8014664:	f7ec fa9c 	bl	8000ba0 <__aeabi_fsub>
 8014668:	4639      	mov	r1, r7
 801466a:	f7ec fba3 	bl	8000db4 <__aeabi_fmul>
 801466e:	4602      	mov	r2, r0
 8014670:	4631      	mov	r1, r6
 8014672:	9800      	ldr	r0, [sp, #0]
 8014674:	4616      	mov	r6, r2
 8014676:	f7ec fa93 	bl	8000ba0 <__aeabi_fsub>
 801467a:	4639      	mov	r1, r7
 801467c:	f7ec fb9a 	bl	8000db4 <__aeabi_fmul>
 8014680:	4629      	mov	r1, r5
 8014682:	4682      	mov	sl, r0
 8014684:	9801      	ldr	r0, [sp, #4]
 8014686:	f7ec fa8b 	bl	8000ba0 <__aeabi_fsub>
 801468a:	4639      	mov	r1, r7
 801468c:	f7ec fb92 	bl	8000db4 <__aeabi_fmul>
 8014690:	4641      	mov	r1, r8
 8014692:	4605      	mov	r5, r0
 8014694:	9805      	ldr	r0, [sp, #20]
 8014696:	f7ec fa83 	bl	8000ba0 <__aeabi_fsub>
 801469a:	4631      	mov	r1, r6
 801469c:	4607      	mov	r7, r0
 801469e:	f7ec fb89 	bl	8000db4 <__aeabi_fmul>
 80146a2:	4601      	mov	r1, r0
 80146a4:	9808      	ldr	r0, [sp, #32]
 80146a6:	f7ec fa7d 	bl	8000ba4 <__addsf3>
 80146aa:	4684      	mov	ip, r0
 80146ac:	4631      	mov	r1, r6
 80146ae:	4630      	mov	r0, r6
 80146b0:	f8cd c020 	str.w	ip, [sp, #32]
 80146b4:	f7ec fb7e 	bl	8000db4 <__aeabi_fmul>
 80146b8:	4601      	mov	r1, r0
 80146ba:	9810      	ldr	r0, [sp, #64]	; 0x40
 80146bc:	f7ec fa72 	bl	8000ba4 <__addsf3>
 80146c0:	4684      	mov	ip, r0
 80146c2:	4651      	mov	r1, sl
 80146c4:	4630      	mov	r0, r6
 80146c6:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 80146ca:	f7ec fb73 	bl	8000db4 <__aeabi_fmul>
 80146ce:	4601      	mov	r1, r0
 80146d0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80146d2:	f7ec fa67 	bl	8000ba4 <__addsf3>
 80146d6:	4684      	mov	ip, r0
 80146d8:	4629      	mov	r1, r5
 80146da:	4630      	mov	r0, r6
 80146dc:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 80146e0:	f7ec fb68 	bl	8000db4 <__aeabi_fmul>
 80146e4:	4601      	mov	r1, r0
 80146e6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80146e8:	f7ec fa5c 	bl	8000ba4 <__addsf3>
 80146ec:	4684      	mov	ip, r0
 80146ee:	4631      	mov	r1, r6
 80146f0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80146f2:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 80146f6:	f7ec fa53 	bl	8000ba0 <__aeabi_fsub>
 80146fa:	4606      	mov	r6, r0
 80146fc:	4651      	mov	r1, sl
 80146fe:	4638      	mov	r0, r7
 8014700:	9613      	str	r6, [sp, #76]	; 0x4c
 8014702:	f7ec fb57 	bl	8000db4 <__aeabi_fmul>
 8014706:	4601      	mov	r1, r0
 8014708:	9809      	ldr	r0, [sp, #36]	; 0x24
 801470a:	f7ec fa4b 	bl	8000ba4 <__addsf3>
 801470e:	4606      	mov	r6, r0
 8014710:	4651      	mov	r1, sl
 8014712:	4650      	mov	r0, sl
 8014714:	9609      	str	r6, [sp, #36]	; 0x24
 8014716:	f7ec fb4d 	bl	8000db4 <__aeabi_fmul>
 801471a:	4601      	mov	r1, r0
 801471c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801471e:	f7ec fa41 	bl	8000ba4 <__addsf3>
 8014722:	4606      	mov	r6, r0
 8014724:	4629      	mov	r1, r5
 8014726:	4650      	mov	r0, sl
 8014728:	9615      	str	r6, [sp, #84]	; 0x54
 801472a:	f7ec fb43 	bl	8000db4 <__aeabi_fmul>
 801472e:	4601      	mov	r1, r0
 8014730:	9816      	ldr	r0, [sp, #88]	; 0x58
 8014732:	f7ec fa37 	bl	8000ba4 <__addsf3>
 8014736:	4651      	mov	r1, sl
 8014738:	9016      	str	r0, [sp, #88]	; 0x58
 801473a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801473c:	f7ec fa30 	bl	8000ba0 <__aeabi_fsub>
 8014740:	4602      	mov	r2, r0
 8014742:	4629      	mov	r1, r5
 8014744:	4638      	mov	r0, r7
 8014746:	9217      	str	r2, [sp, #92]	; 0x5c
 8014748:	f7ec fb34 	bl	8000db4 <__aeabi_fmul>
 801474c:	4601      	mov	r1, r0
 801474e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014750:	f7ec fa28 	bl	8000ba4 <__addsf3>
 8014754:	4602      	mov	r2, r0
 8014756:	4629      	mov	r1, r5
 8014758:	4628      	mov	r0, r5
 801475a:	920a      	str	r2, [sp, #40]	; 0x28
 801475c:	f7ec fb2a 	bl	8000db4 <__aeabi_fmul>
 8014760:	4601      	mov	r1, r0
 8014762:	981a      	ldr	r0, [sp, #104]	; 0x68
 8014764:	f7ec fa1e 	bl	8000ba4 <__addsf3>
 8014768:	4602      	mov	r2, r0
 801476a:	4629      	mov	r1, r5
 801476c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801476e:	921a      	str	r2, [sp, #104]	; 0x68
 8014770:	f7ec fa16 	bl	8000ba0 <__aeabi_fsub>
 8014774:	4602      	mov	r2, r0
 8014776:	9905      	ldr	r1, [sp, #20]
 8014778:	4640      	mov	r0, r8
 801477a:	921b      	str	r2, [sp, #108]	; 0x6c
 801477c:	f7ec fa10 	bl	8000ba0 <__aeabi_fsub>
 8014780:	4601      	mov	r1, r0
 8014782:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014784:	f7ec fa0e 	bl	8000ba4 <__addsf3>
 8014788:	4602      	mov	r2, r0
 801478a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 801478e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8014790:	920b      	str	r2, [sp, #44]	; 0x2c
 8014792:	f7ec fa07 	bl	8000ba4 <__addsf3>
 8014796:	9b04      	ldr	r3, [sp, #16]
 8014798:	f109 0901 	add.w	r9, r9, #1
 801479c:	4599      	cmp	r9, r3
 801479e:	901f      	str	r0, [sp, #124]	; 0x7c
 80147a0:	f47f aed9 	bne.w	8014556 <MEMS_SolveLinearEq+0x9e>
 80147a4:	e725      	b.n	80145f2 <MEMS_SolveLinearEq+0x13a>
 80147a6:	bf00      	nop
 80147a8:	3dcccccd 	.word	0x3dcccccd
 80147ac:	2b8cbccb 	.word	0x2b8cbccb
 80147b0:	2240      	movs	r2, #64	; 0x40
 80147b2:	2100      	movs	r1, #0
 80147b4:	ac10      	add	r4, sp, #64	; 0x40
 80147b6:	a820      	add	r0, sp, #128	; 0x80
 80147b8:	46a1      	mov	r9, r4
 80147ba:	f003 f997 	bl	8017aec <memset>
 80147be:	f04f 0800 	mov.w	r8, #0
 80147c2:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80149f0 <MEMS_SolveLinearEq+0x538>
 80147c6:	ad20      	add	r5, sp, #128	; 0x80
 80147c8:	fa4f fa88 	sxtb.w	sl, r8
 80147cc:	f1b8 0f00 	cmp.w	r8, #0
 80147d0:	f000 80d1 	beq.w	8014976 <MEMS_SolveLinearEq+0x4be>
 80147d4:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80147d6:	4659      	mov	r1, fp
 80147d8:	f026 4000 	bic.w	r0, r6, #2147483648	; 0x80000000
 80147dc:	f7ec fc88 	bl	80010f0 <__aeabi_fcmplt>
 80147e0:	2800      	cmp	r0, #0
 80147e2:	f47f af27 	bne.w	8014634 <MEMS_SolveLinearEq+0x17c>
 80147e6:	4631      	mov	r1, r6
 80147e8:	6820      	ldr	r0, [r4, #0]
 80147ea:	f7ec fb97 	bl	8000f1c <__aeabi_fdiv>
 80147ee:	6028      	str	r0, [r5, #0]
 80147f0:	9924      	ldr	r1, [sp, #144]	; 0x90
 80147f2:	4606      	mov	r6, r0
 80147f4:	f7ec fade 	bl	8000db4 <__aeabi_fmul>
 80147f8:	f1ba 0f01 	cmp.w	sl, #1
 80147fc:	f000 80c9 	beq.w	8014992 <MEMS_SolveLinearEq+0x4da>
 8014800:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8014802:	9000      	str	r0, [sp, #0]
 8014804:	4659      	mov	r1, fp
 8014806:	f027 4000 	bic.w	r0, r7, #2147483648	; 0x80000000
 801480a:	f7ec fc71 	bl	80010f0 <__aeabi_fcmplt>
 801480e:	2800      	cmp	r0, #0
 8014810:	f47f af10 	bne.w	8014634 <MEMS_SolveLinearEq+0x17c>
 8014814:	9b00      	ldr	r3, [sp, #0]
 8014816:	6860      	ldr	r0, [r4, #4]
 8014818:	4619      	mov	r1, r3
 801481a:	f7ec f9c1 	bl	8000ba0 <__aeabi_fsub>
 801481e:	4639      	mov	r1, r7
 8014820:	f7ec fb7c 	bl	8000f1c <__aeabi_fdiv>
 8014824:	6068      	str	r0, [r5, #4]
 8014826:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8014828:	4607      	mov	r7, r0
 801482a:	f7ec fac3 	bl	8000db4 <__aeabi_fmul>
 801482e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8014830:	9000      	str	r0, [sp, #0]
 8014832:	4630      	mov	r0, r6
 8014834:	f7ec fabe 	bl	8000db4 <__aeabi_fmul>
 8014838:	9b00      	ldr	r3, [sp, #0]
 801483a:	4601      	mov	r1, r0
 801483c:	4618      	mov	r0, r3
 801483e:	f7ec f9b1 	bl	8000ba4 <__addsf3>
 8014842:	f1ba 0f02 	cmp.w	sl, #2
 8014846:	f000 80b7 	beq.w	80149b8 <MEMS_SolveLinearEq+0x500>
 801484a:	f8dd a0a8 	ldr.w	sl, [sp, #168]	; 0xa8
 801484e:	9000      	str	r0, [sp, #0]
 8014850:	4659      	mov	r1, fp
 8014852:	f02a 4000 	bic.w	r0, sl, #2147483648	; 0x80000000
 8014856:	f7ec fc4b 	bl	80010f0 <__aeabi_fcmplt>
 801485a:	2800      	cmp	r0, #0
 801485c:	f47f aeea 	bne.w	8014634 <MEMS_SolveLinearEq+0x17c>
 8014860:	9b00      	ldr	r3, [sp, #0]
 8014862:	68a0      	ldr	r0, [r4, #8]
 8014864:	4619      	mov	r1, r3
 8014866:	f7ec f99b 	bl	8000ba0 <__aeabi_fsub>
 801486a:	4651      	mov	r1, sl
 801486c:	f7ec fb56 	bl	8000f1c <__aeabi_fdiv>
 8014870:	60a8      	str	r0, [r5, #8]
 8014872:	4682      	mov	sl, r0
 8014874:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8014876:	4630      	mov	r0, r6
 8014878:	f7ec fa9c 	bl	8000db4 <__aeabi_fmul>
 801487c:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801487e:	4606      	mov	r6, r0
 8014880:	4638      	mov	r0, r7
 8014882:	f7ec fa97 	bl	8000db4 <__aeabi_fmul>
 8014886:	4601      	mov	r1, r0
 8014888:	4630      	mov	r0, r6
 801488a:	f7ec f98b 	bl	8000ba4 <__addsf3>
 801488e:	4606      	mov	r6, r0
 8014890:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8014892:	4650      	mov	r0, sl
 8014894:	f7ec fa8e 	bl	8000db4 <__aeabi_fmul>
 8014898:	4631      	mov	r1, r6
 801489a:	f7ec f983 	bl	8000ba4 <__addsf3>
 801489e:	f8d9 7000 	ldr.w	r7, [r9]
 80148a2:	4606      	mov	r6, r0
 80148a4:	4601      	mov	r1, r0
 80148a6:	4638      	mov	r0, r7
 80148a8:	f7ec fc40 	bl	800112c <__aeabi_fcmpgt>
 80148ac:	2800      	cmp	r0, #0
 80148ae:	f43f aec1 	beq.w	8014634 <MEMS_SolveLinearEq+0x17c>
 80148b2:	4631      	mov	r1, r6
 80148b4:	4638      	mov	r0, r7
 80148b6:	f7ec f973 	bl	8000ba0 <__aeabi_fsub>
 80148ba:	f003 ffb7 	bl	801882c <sqrtf>
 80148be:	60e8      	str	r0, [r5, #12]
 80148c0:	f108 0801 	add.w	r8, r8, #1
 80148c4:	f1b8 0f04 	cmp.w	r8, #4
 80148c8:	f104 0410 	add.w	r4, r4, #16
 80148cc:	f105 0510 	add.w	r5, r5, #16
 80148d0:	f109 0914 	add.w	r9, r9, #20
 80148d4:	f47f af78 	bne.w	80147c8 <MEMS_SolveLinearEq+0x310>
 80148d8:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
 80148dc:	2500      	movs	r5, #0
 80148de:	aa08      	add	r2, sp, #32
 80148e0:	9907      	ldr	r1, [sp, #28]
 80148e2:	a820      	add	r0, sp, #128	; 0x80
 80148e4:	f7f8 fb42 	bl	800cf6c <llEvaluate.constprop.0>
 80148e8:	4b40      	ldr	r3, [pc, #256]	; (80149ec <MEMS_SolveLinearEq+0x534>)
 80148ea:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 80148ec:	f8df 8104 	ldr.w	r8, [pc, #260]	; 80149f4 <MEMS_SolveLinearEq+0x53c>
 80148f0:	6013      	str	r3, [r2, #0]
 80148f2:	ac0c      	add	r4, sp, #48	; 0x30
 80148f4:	f10d 0920 	add.w	r9, sp, #32
 80148f8:	af0b      	add	r7, sp, #44	; 0x2c
 80148fa:	2300      	movs	r3, #0
 80148fc:	a90c      	add	r1, sp, #48	; 0x30
 80148fe:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8014902:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8014906:	a820      	add	r0, sp, #128	; 0x80
 8014908:	aa08      	add	r2, sp, #32
 801490a:	f849 6b04 	str.w	r6, [r9], #4
 801490e:	f7f8 fb2d 	bl	800cf6c <llEvaluate.constprop.0>
 8014912:	f854 bb04 	ldr.w	fp, [r4], #4
 8014916:	4629      	mov	r1, r5
 8014918:	4658      	mov	r0, fp
 801491a:	f7ec fc07 	bl	800112c <__aeabi_fcmpgt>
 801491e:	b320      	cbz	r0, 801496a <MEMS_SolveLinearEq+0x4b2>
 8014920:	4658      	mov	r0, fp
 8014922:	f003 ff83 	bl	801882c <sqrtf>
 8014926:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8014928:	4683      	mov	fp, r0
 801492a:	f8d3 a000 	ldr.w	sl, [r3]
 801492e:	4601      	mov	r1, r0
 8014930:	4650      	mov	r0, sl
 8014932:	f7ec fbf1 	bl	8001118 <__aeabi_fcmpge>
 8014936:	b900      	cbnz	r0, 801493a <MEMS_SolveLinearEq+0x482>
 8014938:	46da      	mov	sl, fp
 801493a:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 801493c:	454f      	cmp	r7, r9
 801493e:	f8c3 a000 	str.w	sl, [r3]
 8014942:	d1da      	bne.n	80148fa <MEMS_SolveLinearEq+0x442>
 8014944:	9b06      	ldr	r3, [sp, #24]
 8014946:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 801494a:	68d8      	ldr	r0, [r3, #12]
 801494c:	f7ec fa32 	bl	8000db4 <__aeabi_fmul>
 8014950:	4604      	mov	r4, r0
 8014952:	9d07      	ldr	r5, [sp, #28]
 8014954:	4621      	mov	r1, r4
 8014956:	68e8      	ldr	r0, [r5, #12]
 8014958:	f7ec fbca 	bl	80010f0 <__aeabi_fcmplt>
 801495c:	2800      	cmp	r0, #0
 801495e:	d03e      	beq.n	80149de <MEMS_SolveLinearEq+0x526>
 8014960:	2001      	movs	r0, #1
 8014962:	60ec      	str	r4, [r5, #12]
 8014964:	b031      	add	sp, #196	; 0xc4
 8014966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801496a:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 801496c:	454f      	cmp	r7, r9
 801496e:	f8c3 8000 	str.w	r8, [r3]
 8014972:	d1c2      	bne.n	80148fa <MEMS_SolveLinearEq+0x442>
 8014974:	e7e6      	b.n	8014944 <MEMS_SolveLinearEq+0x48c>
 8014976:	f8d9 6000 	ldr.w	r6, [r9]
 801497a:	2100      	movs	r1, #0
 801497c:	4630      	mov	r0, r6
 801497e:	f7ec fbd5 	bl	800112c <__aeabi_fcmpgt>
 8014982:	2800      	cmp	r0, #0
 8014984:	f43f ae56 	beq.w	8014634 <MEMS_SolveLinearEq+0x17c>
 8014988:	4630      	mov	r0, r6
 801498a:	f003 ff4f 	bl	801882c <sqrtf>
 801498e:	6028      	str	r0, [r5, #0]
 8014990:	e796      	b.n	80148c0 <MEMS_SolveLinearEq+0x408>
 8014992:	f8d9 6000 	ldr.w	r6, [r9]
 8014996:	4601      	mov	r1, r0
 8014998:	9000      	str	r0, [sp, #0]
 801499a:	4630      	mov	r0, r6
 801499c:	f7ec fbc6 	bl	800112c <__aeabi_fcmpgt>
 80149a0:	2800      	cmp	r0, #0
 80149a2:	f43f ae47 	beq.w	8014634 <MEMS_SolveLinearEq+0x17c>
 80149a6:	9b00      	ldr	r3, [sp, #0]
 80149a8:	4630      	mov	r0, r6
 80149aa:	4619      	mov	r1, r3
 80149ac:	f7ec f8f8 	bl	8000ba0 <__aeabi_fsub>
 80149b0:	f003 ff3c 	bl	801882c <sqrtf>
 80149b4:	6068      	str	r0, [r5, #4]
 80149b6:	e783      	b.n	80148c0 <MEMS_SolveLinearEq+0x408>
 80149b8:	f8d9 6000 	ldr.w	r6, [r9]
 80149bc:	4601      	mov	r1, r0
 80149be:	9000      	str	r0, [sp, #0]
 80149c0:	4630      	mov	r0, r6
 80149c2:	f7ec fbb3 	bl	800112c <__aeabi_fcmpgt>
 80149c6:	2800      	cmp	r0, #0
 80149c8:	f43f ae34 	beq.w	8014634 <MEMS_SolveLinearEq+0x17c>
 80149cc:	9b00      	ldr	r3, [sp, #0]
 80149ce:	4630      	mov	r0, r6
 80149d0:	4619      	mov	r1, r3
 80149d2:	f7ec f8e5 	bl	8000ba0 <__aeabi_fsub>
 80149d6:	f003 ff29 	bl	801882c <sqrtf>
 80149da:	60a8      	str	r0, [r5, #8]
 80149dc:	e770      	b.n	80148c0 <MEMS_SolveLinearEq+0x408>
 80149de:	2001      	movs	r0, #1
 80149e0:	b031      	add	sp, #196	; 0xc4
 80149e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149e6:	2000      	movs	r0, #0
 80149e8:	e604      	b.n	80145f4 <MEMS_SolveLinearEq+0x13c>
 80149ea:	bf00      	nop
 80149ec:	3dcccccd 	.word	0x3dcccccd
 80149f0:	358637bd 	.word	0x358637bd
 80149f4:	41200000 	.word	0x41200000

080149f8 <MEMS_EIG3>:
 80149f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149fc:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8014a00:	4605      	mov	r5, r0
 8014a02:	b08f      	sub	sp, #60	; 0x3c
 8014a04:	460c      	mov	r4, r1
 8014a06:	4640      	mov	r0, r8
 8014a08:	4641      	mov	r1, r8
 8014a0a:	f7ec f9d3 	bl	8000db4 <__aeabi_fmul>
 8014a0e:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8014a12:	4606      	mov	r6, r0
 8014a14:	4649      	mov	r1, r9
 8014a16:	4648      	mov	r0, r9
 8014a18:	f7ec f9cc 	bl	8000db4 <__aeabi_fmul>
 8014a1c:	4601      	mov	r1, r0
 8014a1e:	4630      	mov	r0, r6
 8014a20:	f7ec f8c0 	bl	8000ba4 <__addsf3>
 8014a24:	692f      	ldr	r7, [r5, #16]
 8014a26:	4606      	mov	r6, r0
 8014a28:	4639      	mov	r1, r7
 8014a2a:	4638      	mov	r0, r7
 8014a2c:	f7ec f9c2 	bl	8000db4 <__aeabi_fmul>
 8014a30:	4601      	mov	r1, r0
 8014a32:	4630      	mov	r0, r6
 8014a34:	f7ec f8b6 	bl	8000ba4 <__addsf3>
 8014a38:	498a      	ldr	r1, [pc, #552]	; (8014c64 <MEMS_EIG3+0x26c>)
 8014a3a:	4606      	mov	r6, r0
 8014a3c:	f7ec fb58 	bl	80010f0 <__aeabi_fcmplt>
 8014a40:	b140      	cbz	r0, 8014a54 <MEMS_EIG3+0x5c>
 8014a42:	682b      	ldr	r3, [r5, #0]
 8014a44:	6023      	str	r3, [r4, #0]
 8014a46:	68eb      	ldr	r3, [r5, #12]
 8014a48:	6063      	str	r3, [r4, #4]
 8014a4a:	696b      	ldr	r3, [r5, #20]
 8014a4c:	60a3      	str	r3, [r4, #8]
 8014a4e:	b00f      	add	sp, #60	; 0x3c
 8014a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a54:	68ea      	ldr	r2, [r5, #12]
 8014a56:	f8d5 a000 	ldr.w	sl, [r5]
 8014a5a:	696d      	ldr	r5, [r5, #20]
 8014a5c:	4611      	mov	r1, r2
 8014a5e:	4650      	mov	r0, sl
 8014a60:	9202      	str	r2, [sp, #8]
 8014a62:	f7ec f89f 	bl	8000ba4 <__addsf3>
 8014a66:	4629      	mov	r1, r5
 8014a68:	9501      	str	r5, [sp, #4]
 8014a6a:	f7ec f89b 	bl	8000ba4 <__addsf3>
 8014a6e:	497e      	ldr	r1, [pc, #504]	; (8014c68 <MEMS_EIG3+0x270>)
 8014a70:	f7ec f9a0 	bl	8000db4 <__aeabi_fmul>
 8014a74:	4605      	mov	r5, r0
 8014a76:	4650      	mov	r0, sl
 8014a78:	4629      	mov	r1, r5
 8014a7a:	f7ec f891 	bl	8000ba0 <__aeabi_fsub>
 8014a7e:	9a02      	ldr	r2, [sp, #8]
 8014a80:	4682      	mov	sl, r0
 8014a82:	4629      	mov	r1, r5
 8014a84:	4610      	mov	r0, r2
 8014a86:	9203      	str	r2, [sp, #12]
 8014a88:	f7ec f88a 	bl	8000ba0 <__aeabi_fsub>
 8014a8c:	4629      	mov	r1, r5
 8014a8e:	4683      	mov	fp, r0
 8014a90:	9801      	ldr	r0, [sp, #4]
 8014a92:	f7ec f885 	bl	8000ba0 <__aeabi_fsub>
 8014a96:	4603      	mov	r3, r0
 8014a98:	4651      	mov	r1, sl
 8014a9a:	4650      	mov	r0, sl
 8014a9c:	9302      	str	r3, [sp, #8]
 8014a9e:	f7ec f989 	bl	8000db4 <__aeabi_fmul>
 8014aa2:	4659      	mov	r1, fp
 8014aa4:	4683      	mov	fp, r0
 8014aa6:	4608      	mov	r0, r1
 8014aa8:	f7ec f984 	bl	8000db4 <__aeabi_fmul>
 8014aac:	4601      	mov	r1, r0
 8014aae:	4658      	mov	r0, fp
 8014ab0:	f7ec f878 	bl	8000ba4 <__addsf3>
 8014ab4:	4631      	mov	r1, r6
 8014ab6:	4606      	mov	r6, r0
 8014ab8:	4608      	mov	r0, r1
 8014aba:	f7ec f873 	bl	8000ba4 <__addsf3>
 8014abe:	4601      	mov	r1, r0
 8014ac0:	4630      	mov	r0, r6
 8014ac2:	f7ec f86f 	bl	8000ba4 <__addsf3>
 8014ac6:	9b02      	ldr	r3, [sp, #8]
 8014ac8:	4606      	mov	r6, r0
 8014aca:	4619      	mov	r1, r3
 8014acc:	4618      	mov	r0, r3
 8014ace:	f7ec f971 	bl	8000db4 <__aeabi_fmul>
 8014ad2:	4601      	mov	r1, r0
 8014ad4:	4630      	mov	r0, r6
 8014ad6:	f7ec f865 	bl	8000ba4 <__addsf3>
 8014ada:	4964      	ldr	r1, [pc, #400]	; (8014c6c <MEMS_EIG3+0x274>)
 8014adc:	f7ec f96a 	bl	8000db4 <__aeabi_fmul>
 8014ae0:	f003 fea4 	bl	801882c <sqrtf>
 8014ae4:	4683      	mov	fp, r0
 8014ae6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8014aea:	4659      	mov	r1, fp
 8014aec:	f7ec fa16 	bl	8000f1c <__aeabi_fdiv>
 8014af0:	4641      	mov	r1, r8
 8014af2:	4606      	mov	r6, r0
 8014af4:	f7ec f95e 	bl	8000db4 <__aeabi_fmul>
 8014af8:	4649      	mov	r1, r9
 8014afa:	4680      	mov	r8, r0
 8014afc:	4630      	mov	r0, r6
 8014afe:	f7ec f959 	bl	8000db4 <__aeabi_fmul>
 8014b02:	9a03      	ldr	r2, [sp, #12]
 8014b04:	4681      	mov	r9, r0
 8014b06:	4629      	mov	r1, r5
 8014b08:	4610      	mov	r0, r2
 8014b0a:	f7ec f849 	bl	8000ba0 <__aeabi_fsub>
 8014b0e:	4631      	mov	r1, r6
 8014b10:	f7ec f950 	bl	8000db4 <__aeabi_fmul>
 8014b14:	4602      	mov	r2, r0
 8014b16:	4639      	mov	r1, r7
 8014b18:	4630      	mov	r0, r6
 8014b1a:	9202      	str	r2, [sp, #8]
 8014b1c:	f7ec f94a 	bl	8000db4 <__aeabi_fmul>
 8014b20:	4629      	mov	r1, r5
 8014b22:	4607      	mov	r7, r0
 8014b24:	9801      	ldr	r0, [sp, #4]
 8014b26:	f7ec f83b 	bl	8000ba0 <__aeabi_fsub>
 8014b2a:	4631      	mov	r1, r6
 8014b2c:	f7ec f942 	bl	8000db4 <__aeabi_fmul>
 8014b30:	4603      	mov	r3, r0
 8014b32:	9a02      	ldr	r2, [sp, #8]
 8014b34:	4619      	mov	r1, r3
 8014b36:	4610      	mov	r0, r2
 8014b38:	9203      	str	r2, [sp, #12]
 8014b3a:	9302      	str	r3, [sp, #8]
 8014b3c:	f7ec f93a 	bl	8000db4 <__aeabi_fmul>
 8014b40:	4639      	mov	r1, r7
 8014b42:	9001      	str	r0, [sp, #4]
 8014b44:	4638      	mov	r0, r7
 8014b46:	f7ec f935 	bl	8000db4 <__aeabi_fmul>
 8014b4a:	4601      	mov	r1, r0
 8014b4c:	9801      	ldr	r0, [sp, #4]
 8014b4e:	f7ec f827 	bl	8000ba0 <__aeabi_fsub>
 8014b52:	4684      	mov	ip, r0
 8014b54:	4631      	mov	r1, r6
 8014b56:	4650      	mov	r0, sl
 8014b58:	4666      	mov	r6, ip
 8014b5a:	f7ec f92b 	bl	8000db4 <__aeabi_fmul>
 8014b5e:	4601      	mov	r1, r0
 8014b60:	4630      	mov	r0, r6
 8014b62:	f7ec f927 	bl	8000db4 <__aeabi_fmul>
 8014b66:	4641      	mov	r1, r8
 8014b68:	4606      	mov	r6, r0
 8014b6a:	4638      	mov	r0, r7
 8014b6c:	f7ec f922 	bl	8000db4 <__aeabi_fmul>
 8014b70:	9a03      	ldr	r2, [sp, #12]
 8014b72:	4682      	mov	sl, r0
 8014b74:	4649      	mov	r1, r9
 8014b76:	4610      	mov	r0, r2
 8014b78:	f7ec f91c 	bl	8000db4 <__aeabi_fmul>
 8014b7c:	4601      	mov	r1, r0
 8014b7e:	4650      	mov	r0, sl
 8014b80:	f7ec f80e 	bl	8000ba0 <__aeabi_fsub>
 8014b84:	4649      	mov	r1, r9
 8014b86:	f7ec f915 	bl	8000db4 <__aeabi_fmul>
 8014b8a:	4601      	mov	r1, r0
 8014b8c:	4630      	mov	r0, r6
 8014b8e:	f7ec f809 	bl	8000ba4 <__addsf3>
 8014b92:	4649      	mov	r1, r9
 8014b94:	4606      	mov	r6, r0
 8014b96:	4638      	mov	r0, r7
 8014b98:	f7ec f90c 	bl	8000db4 <__aeabi_fmul>
 8014b9c:	9b02      	ldr	r3, [sp, #8]
 8014b9e:	4607      	mov	r7, r0
 8014ba0:	4619      	mov	r1, r3
 8014ba2:	4640      	mov	r0, r8
 8014ba4:	f7ec f906 	bl	8000db4 <__aeabi_fmul>
 8014ba8:	4601      	mov	r1, r0
 8014baa:	4638      	mov	r0, r7
 8014bac:	f7eb fff8 	bl	8000ba0 <__aeabi_fsub>
 8014bb0:	4641      	mov	r1, r8
 8014bb2:	f7ec f8ff 	bl	8000db4 <__aeabi_fmul>
 8014bb6:	4601      	mov	r1, r0
 8014bb8:	4630      	mov	r0, r6
 8014bba:	f7eb fff3 	bl	8000ba4 <__addsf3>
 8014bbe:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8014bc2:	4606      	mov	r6, r0
 8014bc4:	f7ec fa9e 	bl	8001104 <__aeabi_fcmple>
 8014bc8:	b958      	cbnz	r0, 8014be2 <MEMS_EIG3+0x1ea>
 8014bca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8014bce:	4630      	mov	r0, r6
 8014bd0:	f7ec faa2 	bl	8001118 <__aeabi_fcmpge>
 8014bd4:	2800      	cmp	r0, #0
 8014bd6:	d02f      	beq.n	8014c38 <MEMS_EIG3+0x240>
 8014bd8:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
 8014bdc:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8014c78 <MEMS_EIG3+0x280>
 8014be0:	e003      	b.n	8014bea <MEMS_EIG3+0x1f2>
 8014be2:	f06f 4641 	mvn.w	r6, #3238002688	; 0xc1000000
 8014be6:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8014c7c <MEMS_EIG3+0x284>
 8014bea:	4659      	mov	r1, fp
 8014bec:	4658      	mov	r0, fp
 8014bee:	f7eb ffd9 	bl	8000ba4 <__addsf3>
 8014bf2:	4631      	mov	r1, r6
 8014bf4:	4607      	mov	r7, r0
 8014bf6:	f7ec f8dd 	bl	8000db4 <__aeabi_fmul>
 8014bfa:	4629      	mov	r1, r5
 8014bfc:	f7eb ffd2 	bl	8000ba4 <__addsf3>
 8014c00:	4606      	mov	r6, r0
 8014c02:	4641      	mov	r1, r8
 8014c04:	4638      	mov	r0, r7
 8014c06:	6026      	str	r6, [r4, #0]
 8014c08:	f7ec f8d4 	bl	8000db4 <__aeabi_fmul>
 8014c0c:	4629      	mov	r1, r5
 8014c0e:	f7eb ffc9 	bl	8000ba4 <__addsf3>
 8014c12:	4607      	mov	r7, r0
 8014c14:	4916      	ldr	r1, [pc, #88]	; (8014c70 <MEMS_EIG3+0x278>)
 8014c16:	4628      	mov	r0, r5
 8014c18:	60a7      	str	r7, [r4, #8]
 8014c1a:	f7ec f8cb 	bl	8000db4 <__aeabi_fmul>
 8014c1e:	4639      	mov	r1, r7
 8014c20:	4605      	mov	r5, r0
 8014c22:	4630      	mov	r0, r6
 8014c24:	f7eb ffbe 	bl	8000ba4 <__addsf3>
 8014c28:	4601      	mov	r1, r0
 8014c2a:	4628      	mov	r0, r5
 8014c2c:	f7eb ffb8 	bl	8000ba0 <__aeabi_fsub>
 8014c30:	6060      	str	r0, [r4, #4]
 8014c32:	b00f      	add	sp, #60	; 0x3c
 8014c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c38:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8014c3c:	4630      	mov	r0, r6
 8014c3e:	f7ec f8b9 	bl	8000db4 <__aeabi_fmul>
 8014c42:	f003 fdb1 	bl	80187a8 <acosf>
 8014c46:	4908      	ldr	r1, [pc, #32]	; (8014c68 <MEMS_EIG3+0x270>)
 8014c48:	f7ec f8b4 	bl	8000db4 <__aeabi_fmul>
 8014c4c:	4607      	mov	r7, r0
 8014c4e:	f003 fcc7 	bl	80185e0 <cosf>
 8014c52:	4908      	ldr	r1, [pc, #32]	; (8014c74 <MEMS_EIG3+0x27c>)
 8014c54:	4606      	mov	r6, r0
 8014c56:	4638      	mov	r0, r7
 8014c58:	f7eb ffa4 	bl	8000ba4 <__addsf3>
 8014c5c:	f003 fcc0 	bl	80185e0 <cosf>
 8014c60:	4680      	mov	r8, r0
 8014c62:	e7c2      	b.n	8014bea <MEMS_EIG3+0x1f2>
 8014c64:	358637bd 	.word	0x358637bd
 8014c68:	3eaaaaab 	.word	0x3eaaaaab
 8014c6c:	3e2aaaab 	.word	0x3e2aaaab
 8014c70:	40400000 	.word	0x40400000
 8014c74:	40060a92 	.word	0x40060a92
 8014c78:	bf000001 	.word	0xbf000001
 8014c7c:	bf800000 	.word	0xbf800000

08014c80 <MEMS_runMagCal>:
 8014c80:	2282      	movs	r2, #130	; 0x82
 8014c82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c86:	460c      	mov	r4, r1
 8014c88:	4682      	mov	sl, r0
 8014c8a:	f2ad 5d1c 	subw	sp, sp, #1308	; 0x51c
 8014c8e:	4608      	mov	r0, r1
 8014c90:	ab42      	add	r3, sp, #264	; 0x108
 8014c92:	9108      	str	r1, [sp, #32]
 8014c94:	a923      	add	r1, sp, #140	; 0x8c
 8014c96:	f8ad 2090 	strh.w	r2, [sp, #144]	; 0x90
 8014c9a:	9325      	str	r3, [sp, #148]	; 0x94
 8014c9c:	f7ff fba2 	bl	80143e4 <MEMS_getSensorData_I16>
 8014ca0:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 8014ca4:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8014ca8:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8014caa:	1e58      	subs	r0, r3, #1
 8014cac:	910e      	str	r1, [sp, #56]	; 0x38
 8014cae:	fb00 1102 	mla	r1, r0, r2, r1
 8014cb2:	900b      	str	r0, [sp, #44]	; 0x2c
 8014cb4:	910d      	str	r1, [sp, #52]	; 0x34
 8014cb6:	f8ca 1038 	str.w	r1, [sl, #56]	; 0x38
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	f001 8031 	beq.w	8015d22 <MEMS_runMagCal+0x10a2>
 8014cc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014cc4:	f8da 2008 	ldr.w	r2, [sl, #8]
 8014cc8:	f501 31c3 	add.w	r1, r1, #99840	; 0x18600
 8014ccc:	fb00 f002 	mul.w	r0, r0, r2
 8014cd0:	31a0      	adds	r1, #160	; 0xa0
 8014cd2:	4281      	cmp	r1, r0
 8014cd4:	f081 8029 	bcs.w	8015d2a <MEMS_runMagCal+0x10aa>
 8014cd8:	3a00      	subs	r2, #0
 8014cda:	bf18      	it	ne
 8014cdc:	2201      	movne	r2, #1
 8014cde:	2100      	movs	r1, #0
 8014ce0:	e9ca 2201 	strd	r2, r2, [sl, #4]
 8014ce4:	f88a 108c 	strb.w	r1, [sl, #140]	; 0x8c
 8014ce8:	f8ca 100c 	str.w	r1, [sl, #12]
 8014cec:	2200      	movs	r2, #0
 8014cee:	21ff      	movs	r1, #255	; 0xff
 8014cf0:	e9ca 2225 	strd	r2, r2, [sl, #148]	; 0x94
 8014cf4:	e9ca 2227 	strd	r2, r2, [sl, #156]	; 0x9c
 8014cf8:	e9ca 2229 	strd	r2, r2, [sl, #164]	; 0xa4
 8014cfc:	f88a 108e 	strb.w	r1, [sl, #142]	; 0x8e
 8014d00:	2600      	movs	r6, #0
 8014d02:	2200      	movs	r2, #0
 8014d04:	9825      	ldr	r0, [sp, #148]	; 0x94
 8014d06:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8014d0a:	9009      	str	r0, [sp, #36]	; 0x24
 8014d0c:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
 8014d10:	4634      	mov	r4, r6
 8014d12:	2803      	cmp	r0, #3
 8014d14:	900a      	str	r0, [sp, #40]	; 0x28
 8014d16:	bf28      	it	cs
 8014d18:	2003      	movcs	r0, #3
 8014d1a:	4615      	mov	r5, r2
 8014d1c:	46b3      	mov	fp, r6
 8014d1e:	9105      	str	r1, [sp, #20]
 8014d20:	9104      	str	r1, [sp, #16]
 8014d22:	9102      	str	r1, [sp, #8]
 8014d24:	9908      	ldr	r1, [sp, #32]
 8014d26:	4fa3      	ldr	r7, [pc, #652]	; (8014fb4 <MEMS_runMagCal+0x334>)
 8014d28:	6849      	ldr	r1, [r1, #4]
 8014d2a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8014d2e:	9703      	str	r7, [sp, #12]
 8014d30:	9706      	str	r7, [sp, #24]
 8014d32:	9007      	str	r0, [sp, #28]
 8014d34:	910f      	str	r1, [sp, #60]	; 0x3c
 8014d36:	9219      	str	r2, [sp, #100]	; 0x64
 8014d38:	930c      	str	r3, [sp, #48]	; 0x30
 8014d3a:	f898 1000 	ldrb.w	r1, [r8]
 8014d3e:	f10b 0301 	add.w	r3, fp, #1
 8014d42:	2900      	cmp	r1, #0
 8014d44:	d061      	beq.n	8014e0a <MEMS_runMagCal+0x18a>
 8014d46:	f9b8 0002 	ldrsh.w	r0, [r8, #2]
 8014d4a:	fa4f fb83 	sxtb.w	fp, r3
 8014d4e:	9b06      	ldr	r3, [sp, #24]
 8014d50:	4283      	cmp	r3, r0
 8014d52:	bfb8      	it	lt
 8014d54:	4603      	movlt	r3, r0
 8014d56:	9306      	str	r3, [sp, #24]
 8014d58:	9b02      	ldr	r3, [sp, #8]
 8014d5a:	4283      	cmp	r3, r0
 8014d5c:	bfa8      	it	ge
 8014d5e:	4603      	movge	r3, r0
 8014d60:	9302      	str	r3, [sp, #8]
 8014d62:	f7eb ffd3 	bl	8000d0c <__aeabi_i2f>
 8014d66:	f8da 105c 	ldr.w	r1, [sl, #92]	; 0x5c
 8014d6a:	f7eb ff19 	bl	8000ba0 <__aeabi_fsub>
 8014d6e:	f8da 1068 	ldr.w	r1, [sl, #104]	; 0x68
 8014d72:	f7ec f81f 	bl	8000db4 <__aeabi_fmul>
 8014d76:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 8014d7a:	9a03      	ldr	r2, [sp, #12]
 8014d7c:	4681      	mov	r9, r0
 8014d7e:	429a      	cmp	r2, r3
 8014d80:	bfb8      	it	lt
 8014d82:	461a      	movlt	r2, r3
 8014d84:	9203      	str	r2, [sp, #12]
 8014d86:	9a04      	ldr	r2, [sp, #16]
 8014d88:	4618      	mov	r0, r3
 8014d8a:	429a      	cmp	r2, r3
 8014d8c:	bfa8      	it	ge
 8014d8e:	461a      	movge	r2, r3
 8014d90:	9204      	str	r2, [sp, #16]
 8014d92:	f7eb ffbb 	bl	8000d0c <__aeabi_i2f>
 8014d96:	f8da 1060 	ldr.w	r1, [sl, #96]	; 0x60
 8014d9a:	f7eb ff01 	bl	8000ba0 <__aeabi_fsub>
 8014d9e:	f8da 1078 	ldr.w	r1, [sl, #120]	; 0x78
 8014da2:	f7ec f807 	bl	8000db4 <__aeabi_fmul>
 8014da6:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 8014daa:	9b05      	ldr	r3, [sp, #20]
 8014dac:	428f      	cmp	r7, r1
 8014dae:	bfb8      	it	lt
 8014db0:	460f      	movlt	r7, r1
 8014db2:	428b      	cmp	r3, r1
 8014db4:	bfa8      	it	ge
 8014db6:	460b      	movge	r3, r1
 8014db8:	4606      	mov	r6, r0
 8014dba:	4608      	mov	r0, r1
 8014dbc:	9305      	str	r3, [sp, #20]
 8014dbe:	f7eb ffa5 	bl	8000d0c <__aeabi_i2f>
 8014dc2:	f8da 1064 	ldr.w	r1, [sl, #100]	; 0x64
 8014dc6:	f7eb feeb 	bl	8000ba0 <__aeabi_fsub>
 8014dca:	f8da 1088 	ldr.w	r1, [sl, #136]	; 0x88
 8014dce:	f7eb fff1 	bl	8000db4 <__aeabi_fmul>
 8014dd2:	4684      	mov	ip, r0
 8014dd4:	4649      	mov	r1, r9
 8014dd6:	4648      	mov	r0, r9
 8014dd8:	46e1      	mov	r9, ip
 8014dda:	f7eb ffeb 	bl	8000db4 <__aeabi_fmul>
 8014dde:	4631      	mov	r1, r6
 8014de0:	4606      	mov	r6, r0
 8014de2:	4608      	mov	r0, r1
 8014de4:	f7eb ffe6 	bl	8000db4 <__aeabi_fmul>
 8014de8:	4601      	mov	r1, r0
 8014dea:	4630      	mov	r0, r6
 8014dec:	f7eb feda 	bl	8000ba4 <__addsf3>
 8014df0:	4629      	mov	r1, r5
 8014df2:	f7eb fed7 	bl	8000ba4 <__addsf3>
 8014df6:	4649      	mov	r1, r9
 8014df8:	4605      	mov	r5, r0
 8014dfa:	4648      	mov	r0, r9
 8014dfc:	f7eb ffda 	bl	8000db4 <__aeabi_fmul>
 8014e00:	4601      	mov	r1, r0
 8014e02:	4628      	mov	r0, r5
 8014e04:	f7eb fece 	bl	8000ba4 <__addsf3>
 8014e08:	4605      	mov	r5, r0
 8014e0a:	9b07      	ldr	r3, [sp, #28]
 8014e0c:	3401      	adds	r4, #1
 8014e0e:	b2a4      	uxth	r4, r4
 8014e10:	429c      	cmp	r4, r3
 8014e12:	f108 0808 	add.w	r8, r8, #8
 8014e16:	d990      	bls.n	8014d3a <MEMS_runMagCal+0xba>
 8014e18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014e1a:	465e      	mov	r6, fp
 8014e1c:	42a3      	cmp	r3, r4
 8014e1e:	f04f 0300 	mov.w	r3, #0
 8014e22:	9307      	str	r3, [sp, #28]
 8014e24:	f240 80c8 	bls.w	8014fb8 <MEMS_runMagCal+0x338>
 8014e28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014e2c:	1b1b      	subs	r3, r3, r4
 8014e2e:	b29b      	uxth	r3, r3
 8014e30:	4423      	add	r3, r4
 8014e32:	f102 0b08 	add.w	fp, r2, #8
 8014e36:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 8014e3a:	463a      	mov	r2, r7
 8014e3c:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8014e40:	930c      	str	r3, [sp, #48]	; 0x30
 8014e42:	7823      	ldrb	r3, [r4, #0]
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	f000 80ae 	beq.w	8014fa6 <MEMS_runMagCal+0x326>
 8014e4a:	f9b4 b002 	ldrsh.w	fp, [r4, #2]
 8014e4e:	920a      	str	r2, [sp, #40]	; 0x28
 8014e50:	4658      	mov	r0, fp
 8014e52:	f7eb ff5b 	bl	8000d0c <__aeabi_i2f>
 8014e56:	f8da 105c 	ldr.w	r1, [sl, #92]	; 0x5c
 8014e5a:	f7eb fea1 	bl	8000ba0 <__aeabi_fsub>
 8014e5e:	f8da 1068 	ldr.w	r1, [sl, #104]	; 0x68
 8014e62:	f7eb ffa7 	bl	8000db4 <__aeabi_fmul>
 8014e66:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 8014e6a:	9009      	str	r0, [sp, #36]	; 0x24
 8014e6c:	4648      	mov	r0, r9
 8014e6e:	f7eb ff4d 	bl	8000d0c <__aeabi_i2f>
 8014e72:	f8da 1060 	ldr.w	r1, [sl, #96]	; 0x60
 8014e76:	f7eb fe93 	bl	8000ba0 <__aeabi_fsub>
 8014e7a:	f8da 1078 	ldr.w	r1, [sl, #120]	; 0x78
 8014e7e:	f7eb ff99 	bl	8000db4 <__aeabi_fmul>
 8014e82:	f9b4 8006 	ldrsh.w	r8, [r4, #6]
 8014e86:	4607      	mov	r7, r0
 8014e88:	4640      	mov	r0, r8
 8014e8a:	f7eb ff3f 	bl	8000d0c <__aeabi_i2f>
 8014e8e:	f8da 1064 	ldr.w	r1, [sl, #100]	; 0x64
 8014e92:	f7eb fe85 	bl	8000ba0 <__aeabi_fsub>
 8014e96:	f8da 1088 	ldr.w	r1, [sl, #136]	; 0x88
 8014e9a:	f7eb ff8b 	bl	8000db4 <__aeabi_fmul>
 8014e9e:	4684      	mov	ip, r0
 8014ea0:	4639      	mov	r1, r7
 8014ea2:	4638      	mov	r0, r7
 8014ea4:	4667      	mov	r7, ip
 8014ea6:	f7eb ff85 	bl	8000db4 <__aeabi_fmul>
 8014eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014eac:	9009      	str	r0, [sp, #36]	; 0x24
 8014eae:	4619      	mov	r1, r3
 8014eb0:	4618      	mov	r0, r3
 8014eb2:	f7eb ff7f 	bl	8000db4 <__aeabi_fmul>
 8014eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014eb8:	4601      	mov	r1, r0
 8014eba:	4618      	mov	r0, r3
 8014ebc:	f7eb fe72 	bl	8000ba4 <__addsf3>
 8014ec0:	4629      	mov	r1, r5
 8014ec2:	f7eb fe6f 	bl	8000ba4 <__addsf3>
 8014ec6:	4639      	mov	r1, r7
 8014ec8:	4605      	mov	r5, r0
 8014eca:	4638      	mov	r0, r7
 8014ecc:	f7eb ff72 	bl	8000db4 <__aeabi_fmul>
 8014ed0:	4601      	mov	r1, r0
 8014ed2:	4628      	mov	r0, r5
 8014ed4:	f7eb fe66 	bl	8000ba4 <__addsf3>
 8014ed8:	f934 1c16 	ldrsh.w	r1, [r4, #-22]
 8014edc:	f934 3c06 	ldrsh.w	r3, [r4, #-6]
 8014ee0:	4605      	mov	r5, r0
 8014ee2:	f934 0c1e 	ldrsh.w	r0, [r4, #-30]
 8014ee6:	1a5b      	subs	r3, r3, r1
 8014ee8:	ebab 0000 	sub.w	r0, fp, r0
 8014eec:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8014ef0:	f7eb ff0c 	bl	8000d0c <__aeabi_i2f>
 8014ef4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8014ef8:	f7ec f95e 	bl	80011b8 <__aeabi_f2uiz>
 8014efc:	f7eb ff02 	bl	8000d04 <__aeabi_ui2f>
 8014f00:	f934 3c04 	ldrsh.w	r3, [r4, #-4]
 8014f04:	4607      	mov	r7, r0
 8014f06:	f934 1c14 	ldrsh.w	r1, [r4, #-20]
 8014f0a:	f934 0c1c 	ldrsh.w	r0, [r4, #-28]
 8014f0e:	1a5b      	subs	r3, r3, r1
 8014f10:	eba9 0000 	sub.w	r0, r9, r0
 8014f14:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8014f18:	f7eb fef8 	bl	8000d0c <__aeabi_i2f>
 8014f1c:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 8014f20:	4638      	mov	r0, r7
 8014f22:	f7eb fe3f 	bl	8000ba4 <__addsf3>
 8014f26:	f934 7c12 	ldrsh.w	r7, [r4, #-18]
 8014f2a:	f934 1c1a 	ldrsh.w	r1, [r4, #-26]
 8014f2e:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
 8014f32:	eba8 0101 	sub.w	r1, r8, r1
 8014f36:	1bdb      	subs	r3, r3, r7
 8014f38:	4607      	mov	r7, r0
 8014f3a:	eb03 0041 	add.w	r0, r3, r1, lsl #1
 8014f3e:	f7eb fee5 	bl	8000d0c <__aeabi_i2f>
 8014f42:	4603      	mov	r3, r0
 8014f44:	4638      	mov	r0, r7
 8014f46:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8014f4a:	f7ec f935 	bl	80011b8 <__aeabi_f2uiz>
 8014f4e:	f7eb fed9 	bl	8000d04 <__aeabi_ui2f>
 8014f52:	4601      	mov	r1, r0
 8014f54:	4638      	mov	r0, r7
 8014f56:	f7eb fe25 	bl	8000ba4 <__addsf3>
 8014f5a:	f7ec f92d 	bl	80011b8 <__aeabi_f2uiz>
 8014f5e:	9b06      	ldr	r3, [sp, #24]
 8014f60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014f62:	455b      	cmp	r3, fp
 8014f64:	bfb8      	it	lt
 8014f66:	465b      	movlt	r3, fp
 8014f68:	9306      	str	r3, [sp, #24]
 8014f6a:	9b02      	ldr	r3, [sp, #8]
 8014f6c:	3601      	adds	r6, #1
 8014f6e:	455b      	cmp	r3, fp
 8014f70:	bfa8      	it	ge
 8014f72:	465b      	movge	r3, fp
 8014f74:	9302      	str	r3, [sp, #8]
 8014f76:	9b03      	ldr	r3, [sp, #12]
 8014f78:	b276      	sxtb	r6, r6
 8014f7a:	454b      	cmp	r3, r9
 8014f7c:	bfb8      	it	lt
 8014f7e:	464b      	movlt	r3, r9
 8014f80:	9303      	str	r3, [sp, #12]
 8014f82:	9b04      	ldr	r3, [sp, #16]
 8014f84:	454b      	cmp	r3, r9
 8014f86:	bfa8      	it	ge
 8014f88:	464b      	movge	r3, r9
 8014f8a:	9304      	str	r3, [sp, #16]
 8014f8c:	9b05      	ldr	r3, [sp, #20]
 8014f8e:	4542      	cmp	r2, r8
 8014f90:	bfb8      	it	lt
 8014f92:	4642      	movlt	r2, r8
 8014f94:	4543      	cmp	r3, r8
 8014f96:	bfa8      	it	ge
 8014f98:	4643      	movge	r3, r8
 8014f9a:	9305      	str	r3, [sp, #20]
 8014f9c:	9b07      	ldr	r3, [sp, #28]
 8014f9e:	4283      	cmp	r3, r0
 8014fa0:	bf38      	it	cc
 8014fa2:	4603      	movcc	r3, r0
 8014fa4:	9307      	str	r3, [sp, #28]
 8014fa6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014fa8:	3408      	adds	r4, #8
 8014faa:	42a3      	cmp	r3, r4
 8014fac:	f47f af49 	bne.w	8014e42 <MEMS_runMagCal+0x1c2>
 8014fb0:	4617      	mov	r7, r2
 8014fb2:	e001      	b.n	8014fb8 <MEMS_runMagCal+0x338>
 8014fb4:	ffff8000 	.word	0xffff8000
 8014fb8:	2e00      	cmp	r6, #0
 8014fba:	f000 86c3 	beq.w	8015d44 <MEMS_runMagCal+0x10c4>
 8014fbe:	9c06      	ldr	r4, [sp, #24]
 8014fc0:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 8014fc4:	f280 86bd 	bge.w	8015d42 <MEMS_runMagCal+0x10c2>
 8014fc8:	9b02      	ldr	r3, [sp, #8]
 8014fca:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 8014fce:	f2c0 86b8 	blt.w	8015d42 <MEMS_runMagCal+0x10c2>
 8014fd2:	9a03      	ldr	r2, [sp, #12]
 8014fd4:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8014fd8:	f280 86b3 	bge.w	8015d42 <MEMS_runMagCal+0x10c2>
 8014fdc:	9904      	ldr	r1, [sp, #16]
 8014fde:	f511 4f80 	cmn.w	r1, #16384	; 0x4000
 8014fe2:	f2c0 86ae 	blt.w	8015d42 <MEMS_runMagCal+0x10c2>
 8014fe6:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
 8014fea:	f280 86aa 	bge.w	8015d42 <MEMS_runMagCal+0x10c2>
 8014fee:	9805      	ldr	r0, [sp, #20]
 8014ff0:	f510 4f80 	cmn.w	r0, #16384	; 0x4000
 8014ff4:	f2c0 86a5 	blt.w	8015d42 <MEMS_runMagCal+0x10c2>
 8014ff8:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 8014ffc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8015000:	4659      	mov	r1, fp
 8015002:	f7eb ff8b 	bl	8000f1c <__aeabi_fdiv>
 8015006:	4603      	mov	r3, r0
 8015008:	4630      	mov	r0, r6
 801500a:	461e      	mov	r6, r3
 801500c:	f7eb fe7e 	bl	8000d0c <__aeabi_i2f>
 8015010:	4601      	mov	r1, r0
 8015012:	4628      	mov	r0, r5
 8015014:	f7eb ff82 	bl	8000f1c <__aeabi_fdiv>
 8015018:	9b02      	ldr	r3, [sp, #8]
 801501a:	1ae4      	subs	r4, r4, r3
 801501c:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8015020:	eba2 0803 	sub.w	r8, r2, r3
 8015024:	f003 fc02 	bl	801882c <sqrtf>
 8015028:	4601      	mov	r1, r0
 801502a:	4658      	mov	r0, fp
 801502c:	f7eb fec2 	bl	8000db4 <__aeabi_fmul>
 8015030:	4544      	cmp	r4, r8
 8015032:	4622      	mov	r2, r4
 8015034:	bfb8      	it	lt
 8015036:	4642      	movlt	r2, r8
 8015038:	9b05      	ldr	r3, [sp, #20]
 801503a:	4605      	mov	r5, r0
 801503c:	1aff      	subs	r7, r7, r3
 801503e:	42ba      	cmp	r2, r7
 8015040:	4610      	mov	r0, r2
 8015042:	bfb8      	it	lt
 8015044:	4638      	movlt	r0, r7
 8015046:	f7eb fe61 	bl	8000d0c <__aeabi_i2f>
 801504a:	4681      	mov	r9, r0
 801504c:	492a      	ldr	r1, [pc, #168]	; (80150f8 <MEMS_runMagCal+0x478>)
 801504e:	4630      	mov	r0, r6
 8015050:	f7eb feb0 	bl	8000db4 <__aeabi_fmul>
 8015054:	4649      	mov	r1, r9
 8015056:	f7ec f84b 	bl	80010f0 <__aeabi_fcmplt>
 801505a:	2800      	cmp	r0, #0
 801505c:	f040 8671 	bne.w	8015d42 <MEMS_runMagCal+0x10c2>
 8015060:	9807      	ldr	r0, [sp, #28]
 8015062:	f7eb fe4f 	bl	8000d04 <__aeabi_ui2f>
 8015066:	4659      	mov	r1, fp
 8015068:	f7eb fea4 	bl	8000db4 <__aeabi_fmul>
 801506c:	4923      	ldr	r1, [pc, #140]	; (80150fc <MEMS_runMagCal+0x47c>)
 801506e:	f7ec f85d 	bl	800112c <__aeabi_fcmpgt>
 8015072:	2800      	cmp	r0, #0
 8015074:	f040 8665 	bne.w	8015d42 <MEMS_runMagCal+0x10c2>
 8015078:	4630      	mov	r0, r6
 801507a:	4921      	ldr	r1, [pc, #132]	; (8015100 <MEMS_runMagCal+0x480>)
 801507c:	f7eb fe9a 	bl	8000db4 <__aeabi_fmul>
 8015080:	4649      	mov	r1, r9
 8015082:	4606      	mov	r6, r0
 8015084:	f7ec f852 	bl	800112c <__aeabi_fcmpgt>
 8015088:	2800      	cmp	r0, #0
 801508a:	f041 827e 	bne.w	801658a <MEMS_runMagCal+0x190a>
 801508e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8015092:	4630      	mov	r0, r6
 8015094:	f7eb fe8e 	bl	8000db4 <__aeabi_fmul>
 8015098:	4601      	mov	r1, r0
 801509a:	4648      	mov	r0, r9
 801509c:	f7ec f846 	bl	800112c <__aeabi_fcmpgt>
 80150a0:	2800      	cmp	r0, #0
 80150a2:	f001 8070 	beq.w	8016186 <MEMS_runMagCal+0x1506>
 80150a6:	4631      	mov	r1, r6
 80150a8:	4630      	mov	r0, r6
 80150aa:	f7eb fd7b 	bl	8000ba4 <__addsf3>
 80150ae:	4603      	mov	r3, r0
 80150b0:	4620      	mov	r0, r4
 80150b2:	461c      	mov	r4, r3
 80150b4:	f7eb fe2a 	bl	8000d0c <__aeabi_i2f>
 80150b8:	4621      	mov	r1, r4
 80150ba:	f7ec f837 	bl	800112c <__aeabi_fcmpgt>
 80150be:	2800      	cmp	r0, #0
 80150c0:	f001 8061 	beq.w	8016186 <MEMS_runMagCal+0x1506>
 80150c4:	4640      	mov	r0, r8
 80150c6:	f7eb fe21 	bl	8000d0c <__aeabi_i2f>
 80150ca:	4601      	mov	r1, r0
 80150cc:	4620      	mov	r0, r4
 80150ce:	f7ec f80f 	bl	80010f0 <__aeabi_fcmplt>
 80150d2:	2800      	cmp	r0, #0
 80150d4:	f001 8057 	beq.w	8016186 <MEMS_runMagCal+0x1506>
 80150d8:	4638      	mov	r0, r7
 80150da:	f7eb fe17 	bl	8000d0c <__aeabi_i2f>
 80150de:	4601      	mov	r1, r0
 80150e0:	4620      	mov	r0, r4
 80150e2:	f7ec f805 	bl	80010f0 <__aeabi_fcmplt>
 80150e6:	2300      	movs	r3, #0
 80150e8:	9305      	str	r3, [sp, #20]
 80150ea:	1ac3      	subs	r3, r0, r3
 80150ec:	bf18      	it	ne
 80150ee:	2301      	movne	r3, #1
 80150f0:	930c      	str	r3, [sp, #48]	; 0x30
 80150f2:	f001 b84a 	b.w	801618a <MEMS_runMagCal+0x150a>
 80150f6:	bf00      	nop
 80150f8:	43020000 	.word	0x43020000
 80150fc:	447a0000 	.word	0x447a0000
 8015100:	40a00000 	.word	0x40a00000
 8015104:	2d05      	cmp	r5, #5
 8015106:	f241 81fb 	bls.w	8016500 <MEMS_runMagCal+0x1880>
 801510a:	2b05      	cmp	r3, #5
 801510c:	f241 81f8 	bls.w	8016500 <MEMS_runMagCal+0x1880>
 8015110:	2905      	cmp	r1, #5
 8015112:	f241 81f5 	bls.w	8016500 <MEMS_runMagCal+0x1880>
 8015116:	f99a 208e 	ldrsb.w	r2, [sl, #142]	; 0x8e
 801511a:	f89a 308d 	ldrb.w	r3, [sl, #141]	; 0x8d
 801511e:	9202      	str	r2, [sp, #8]
 8015120:	9a07      	ldr	r2, [sp, #28]
 8015122:	9303      	str	r3, [sp, #12]
 8015124:	429a      	cmp	r2, r3
 8015126:	f001 84bd 	beq.w	8016aa4 <MEMS_runMagCal+0x1e24>
 801512a:	4619      	mov	r1, r3
 801512c:	9b02      	ldr	r3, [sp, #8]
 801512e:	468b      	mov	fp, r1
 8015130:	3301      	adds	r3, #1
 8015132:	930b      	str	r3, [sp, #44]	; 0x2c
 8015134:	1a9b      	subs	r3, r3, r2
 8015136:	fb93 f2f1 	sdiv	r2, r3, r1
 801513a:	fb01 3212 	mls	r2, r1, r2, r3
 801513e:	2a00      	cmp	r2, #0
 8015140:	bfbc      	itt	lt
 8015142:	460b      	movlt	r3, r1
 8015144:	18d2      	addlt	r2, r2, r3
 8015146:	b212      	sxth	r2, r2
 8015148:	eb0a 03c2 	add.w	r3, sl, r2, lsl #3
 801514c:	f9b3 80ae 	ldrsh.w	r8, [r3, #174]	; 0xae
 8015150:	f9b3 70b0 	ldrsh.w	r7, [r3, #176]	; 0xb0
 8015154:	f9b3 50b2 	ldrsh.w	r5, [r3, #178]	; 0xb2
 8015158:	4644      	mov	r4, r8
 801515a:	46a9      	mov	r9, r5
 801515c:	463e      	mov	r6, r7
 801515e:	9b07      	ldr	r3, [sp, #28]
 8015160:	f103 3cff 	add.w	ip, r3, #4294967295
 8015164:	fa5f fc8c 	uxtb.w	ip, ip
 8015168:	f10c 0c01 	add.w	ip, ip, #1
 801516c:	4494      	add	ip, r2
 801516e:	fb92 f3fb 	sdiv	r3, r2, fp
 8015172:	fb0b 2313 	mls	r3, fp, r3, r2
 8015176:	b2db      	uxtb	r3, r3
 8015178:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 801517c:	f9b3 00ae 	ldrsh.w	r0, [r3, #174]	; 0xae
 8015180:	f9b3 10b0 	ldrsh.w	r1, [r3, #176]	; 0xb0
 8015184:	4580      	cmp	r8, r0
 8015186:	bfb8      	it	lt
 8015188:	4680      	movlt	r8, r0
 801518a:	4284      	cmp	r4, r0
 801518c:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8015190:	bfa8      	it	ge
 8015192:	4604      	movge	r4, r0
 8015194:	428f      	cmp	r7, r1
 8015196:	bfb8      	it	lt
 8015198:	460f      	movlt	r7, r1
 801519a:	428e      	cmp	r6, r1
 801519c:	bfa8      	it	ge
 801519e:	460e      	movge	r6, r1
 80151a0:	429d      	cmp	r5, r3
 80151a2:	bfb8      	it	lt
 80151a4:	461d      	movlt	r5, r3
 80151a6:	3201      	adds	r2, #1
 80151a8:	4599      	cmp	r9, r3
 80151aa:	bfa8      	it	ge
 80151ac:	4699      	movge	r9, r3
 80151ae:	4594      	cmp	ip, r2
 80151b0:	d1dd      	bne.n	801516e <MEMS_runMagCal+0x4ee>
 80151b2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80151b4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80151b8:	f7eb feb0 	bl	8000f1c <__aeabi_fdiv>
 80151bc:	499d      	ldr	r1, [pc, #628]	; (8015434 <MEMS_runMagCal+0x7b4>)
 80151be:	9006      	str	r0, [sp, #24]
 80151c0:	f7eb fdf8 	bl	8000db4 <__aeabi_fmul>
 80151c4:	f89a 3040 	ldrb.w	r3, [sl, #64]	; 0x40
 80151c8:	eba8 0404 	sub.w	r4, r8, r4
 80151cc:	1bbe      	subs	r6, r7, r6
 80151ce:	eba5 0909 	sub.w	r9, r5, r9
 80151d2:	4680      	mov	r8, r0
 80151d4:	b224      	sxth	r4, r4
 80151d6:	b236      	sxth	r6, r6
 80151d8:	fa0f f989 	sxth.w	r9, r9
 80151dc:	2b00      	cmp	r3, #0
 80151de:	f041 845b 	bne.w	8016a98 <MEMS_runMagCal+0x1e18>
 80151e2:	f89a 3058 	ldrb.w	r3, [sl, #88]	; 0x58
 80151e6:	fab3 f383 	clz	r3, r3
 80151ea:	095b      	lsrs	r3, r3, #5
 80151ec:	9304      	str	r3, [sp, #16]
 80151ee:	4620      	mov	r0, r4
 80151f0:	f7eb fd8c 	bl	8000d0c <__aeabi_i2f>
 80151f4:	4990      	ldr	r1, [pc, #576]	; (8015438 <MEMS_runMagCal+0x7b8>)
 80151f6:	4607      	mov	r7, r0
 80151f8:	4640      	mov	r0, r8
 80151fa:	f7eb fddb 	bl	8000db4 <__aeabi_fmul>
 80151fe:	4605      	mov	r5, r0
 8015200:	4638      	mov	r0, r7
 8015202:	4629      	mov	r1, r5
 8015204:	f7eb ff92 	bl	800112c <__aeabi_fcmpgt>
 8015208:	2800      	cmp	r0, #0
 801520a:	f041 8428 	bne.w	8016a5e <MEMS_runMagCal+0x1dde>
 801520e:	4630      	mov	r0, r6
 8015210:	f7eb fd7c 	bl	8000d0c <__aeabi_i2f>
 8015214:	4601      	mov	r1, r0
 8015216:	900f      	str	r0, [sp, #60]	; 0x3c
 8015218:	4628      	mov	r0, r5
 801521a:	f7eb ff69 	bl	80010f0 <__aeabi_fcmplt>
 801521e:	2800      	cmp	r0, #0
 8015220:	f041 841d 	bne.w	8016a5e <MEMS_runMagCal+0x1dde>
 8015224:	4648      	mov	r0, r9
 8015226:	f7eb fd71 	bl	8000d0c <__aeabi_i2f>
 801522a:	4601      	mov	r1, r0
 801522c:	9010      	str	r0, [sp, #64]	; 0x40
 801522e:	4628      	mov	r0, r5
 8015230:	f7eb ff5e 	bl	80010f0 <__aeabi_fcmplt>
 8015234:	2800      	cmp	r0, #0
 8015236:	f041 8412 	bne.w	8016a5e <MEMS_runMagCal+0x1dde>
 801523a:	42a6      	cmp	r6, r4
 801523c:	4633      	mov	r3, r6
 801523e:	bfb8      	it	lt
 8015240:	4623      	movlt	r3, r4
 8015242:	45a1      	cmp	r9, r4
 8015244:	464a      	mov	r2, r9
 8015246:	bfa8      	it	ge
 8015248:	4622      	movge	r2, r4
 801524a:	454b      	cmp	r3, r9
 801524c:	4619      	mov	r1, r3
 801524e:	bfb8      	it	lt
 8015250:	4649      	movlt	r1, r9
 8015252:	42b2      	cmp	r2, r6
 8015254:	4613      	mov	r3, r2
 8015256:	bfa8      	it	ge
 8015258:	4633      	movge	r3, r6
 801525a:	42a1      	cmp	r1, r4
 801525c:	9102      	str	r1, [sp, #8]
 801525e:	f341 844b 	ble.w	8016af8 <MEMS_runMagCal+0x1e78>
 8015262:	429c      	cmp	r4, r3
 8015264:	bfb8      	it	lt
 8015266:	461c      	movlt	r4, r3
 8015268:	460a      	mov	r2, r1
 801526a:	4625      	mov	r5, r4
 801526c:	42b2      	cmp	r2, r6
 801526e:	dd02      	ble.n	8015276 <MEMS_runMagCal+0x5f6>
 8015270:	42b3      	cmp	r3, r6
 8015272:	bfb8      	it	lt
 8015274:	4635      	movlt	r5, r6
 8015276:	9a02      	ldr	r2, [sp, #8]
 8015278:	4591      	cmp	r9, r2
 801527a:	da02      	bge.n	8015282 <MEMS_runMagCal+0x602>
 801527c:	4599      	cmp	r9, r3
 801527e:	bfc8      	it	gt
 8015280:	464d      	movgt	r5, r9
 8015282:	9309      	str	r3, [sp, #36]	; 0x24
 8015284:	9b04      	ldr	r3, [sp, #16]
 8015286:	2b00      	cmp	r3, #0
 8015288:	f001 8102 	beq.w	8016490 <MEMS_runMagCal+0x1810>
 801528c:	4639      	mov	r1, r7
 801528e:	4640      	mov	r0, r8
 8015290:	f7eb ff4c 	bl	800112c <__aeabi_fcmpgt>
 8015294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015296:	b970      	cbnz	r0, 80152b6 <MEMS_runMagCal+0x636>
 8015298:	4640      	mov	r0, r8
 801529a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801529c:	f7eb ff46 	bl	800112c <__aeabi_fcmpgt>
 80152a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152a2:	b940      	cbnz	r0, 80152b6 <MEMS_runMagCal+0x636>
 80152a4:	4640      	mov	r0, r8
 80152a6:	9910      	ldr	r1, [sp, #64]	; 0x40
 80152a8:	f7eb ff40 	bl	800112c <__aeabi_fcmpgt>
 80152ac:	1e03      	subs	r3, r0, #0
 80152ae:	bf18      	it	ne
 80152b0:	2301      	movne	r3, #1
 80152b2:	9304      	str	r3, [sp, #16]
 80152b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152b6:	9e02      	ldr	r6, [sp, #8]
 80152b8:	9309      	str	r3, [sp, #36]	; 0x24
 80152ba:	4630      	mov	r0, r6
 80152bc:	f7eb fd26 	bl	8000d0c <__aeabi_i2f>
 80152c0:	495e      	ldr	r1, [pc, #376]	; (801543c <MEMS_runMagCal+0x7bc>)
 80152c2:	4604      	mov	r4, r0
 80152c4:	4640      	mov	r0, r8
 80152c6:	f7eb fd75 	bl	8000db4 <__aeabi_fmul>
 80152ca:	4601      	mov	r1, r0
 80152cc:	4620      	mov	r0, r4
 80152ce:	f7eb ff23 	bl	8001118 <__aeabi_fcmpge>
 80152d2:	2800      	cmp	r0, #0
 80152d4:	f001 8414 	beq.w	8016b00 <MEMS_runMagCal+0x1e80>
 80152d8:	4628      	mov	r0, r5
 80152da:	f7eb fd17 	bl	8000d0c <__aeabi_i2f>
 80152de:	4958      	ldr	r1, [pc, #352]	; (8015440 <MEMS_runMagCal+0x7c0>)
 80152e0:	4604      	mov	r4, r0
 80152e2:	4640      	mov	r0, r8
 80152e4:	f7eb fd66 	bl	8000db4 <__aeabi_fmul>
 80152e8:	4601      	mov	r1, r0
 80152ea:	4620      	mov	r0, r4
 80152ec:	f7eb ff14 	bl	8001118 <__aeabi_fcmpge>
 80152f0:	2800      	cmp	r0, #0
 80152f2:	f001 8405 	beq.w	8016b00 <MEMS_runMagCal+0x1e80>
 80152f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152f8:	ebb6 0f43 	cmp.w	r6, r3, lsl #1
 80152fc:	f281 8400 	bge.w	8016b00 <MEMS_runMagCal+0x1e80>
 8015300:	4618      	mov	r0, r3
 8015302:	f7eb fd03 	bl	8000d0c <__aeabi_i2f>
 8015306:	494f      	ldr	r1, [pc, #316]	; (8015444 <MEMS_runMagCal+0x7c4>)
 8015308:	f7eb fd54 	bl	8000db4 <__aeabi_fmul>
 801530c:	4601      	mov	r1, r0
 801530e:	4640      	mov	r0, r8
 8015310:	f7eb feee 	bl	80010f0 <__aeabi_fcmplt>
 8015314:	2800      	cmp	r0, #0
 8015316:	f001 83f3 	beq.w	8016b00 <MEMS_runMagCal+0x1e80>
 801531a:	9b07      	ldr	r3, [sp, #28]
 801531c:	9a03      	ldr	r2, [sp, #12]
 801531e:	4293      	cmp	r3, r2
 8015320:	f001 8421 	beq.w	8016b66 <MEMS_runMagCal+0x1ee6>
 8015324:	461a      	mov	r2, r3
 8015326:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015328:	1a9b      	subs	r3, r3, r2
 801532a:	fb93 f4fb 	sdiv	r4, r3, fp
 801532e:	fb0b 3414 	mls	r4, fp, r4, r3
 8015332:	2c00      	cmp	r4, #0
 8015334:	bfbc      	itt	lt
 8015336:	9b03      	ldrlt	r3, [sp, #12]
 8015338:	18e4      	addlt	r4, r4, r3
 801533a:	b224      	sxth	r4, r4
 801533c:	9b05      	ldr	r3, [sp, #20]
 801533e:	b264      	sxtb	r4, r4
 8015340:	4698      	mov	r8, r3
 8015342:	9e07      	ldr	r6, [sp, #28]
 8015344:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8015346:	9309      	str	r3, [sp, #36]	; 0x24
 8015348:	f1c4 0901 	rsb	r9, r4, #1
 801534c:	4622      	mov	r2, r4
 801534e:	fb92 f1fb 	sdiv	r1, r2, fp
 8015352:	3401      	adds	r4, #1
 8015354:	fb94 f3fb 	sdiv	r3, r4, fp
 8015358:	fb0b 2111 	mls	r1, fp, r1, r2
 801535c:	fb0b 4313 	mls	r3, fp, r3, r4
 8015360:	b24a      	sxtb	r2, r1
 8015362:	2a00      	cmp	r2, #0
 8015364:	b25b      	sxtb	r3, r3
 8015366:	da02      	bge.n	801536e <MEMS_runMagCal+0x6ee>
 8015368:	9a03      	ldr	r2, [sp, #12]
 801536a:	4411      	add	r1, r2
 801536c:	b24a      	sxtb	r2, r1
 801536e:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 8015372:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 8015376:	f9b3 00ae 	ldrsh.w	r0, [r3, #174]	; 0xae
 801537a:	f9b2 10ae 	ldrsh.w	r1, [r2, #174]	; 0xae
 801537e:	f9b3 50b0 	ldrsh.w	r5, [r3, #176]	; 0xb0
 8015382:	ebb0 0c01 	subs.w	ip, r0, r1
 8015386:	bf44      	itt	mi
 8015388:	1a09      	submi	r1, r1, r0
 801538a:	fa0f fc81 	sxthmi.w	ip, r1
 801538e:	f9b2 10b0 	ldrsh.w	r1, [r2, #176]	; 0xb0
 8015392:	bf58      	it	pl
 8015394:	fa0f fc8c 	sxthpl.w	ip, ip
 8015398:	1a68      	subs	r0, r5, r1
 801539a:	bf44      	itt	mi
 801539c:	1b49      	submi	r1, r1, r5
 801539e:	b208      	sxthmi	r0, r1
 80153a0:	f9b3 50b2 	ldrsh.w	r5, [r3, #178]	; 0xb2
 80153a4:	f9b2 10b2 	ldrsh.w	r1, [r2, #178]	; 0xb2
 80153a8:	bf58      	it	pl
 80153aa:	b200      	sxthpl	r0, r0
 80153ac:	ebb5 0e01 	subs.w	lr, r5, r1
 80153b0:	bf48      	it	mi
 80153b2:	eba1 0e05 	submi.w	lr, r1, r5
 80153b6:	f8b3 50ac 	ldrh.w	r5, [r3, #172]	; 0xac
 80153ba:	f8b2 30ac 	ldrh.w	r3, [r2, #172]	; 0xac
 80153be:	fa0f fe8e 	sxth.w	lr, lr
 80153c2:	1aed      	subs	r5, r5, r3
 80153c4:	b22d      	sxth	r5, r5
 80153c6:	2d00      	cmp	r5, #0
 80153c8:	dd20      	ble.n	801540c <MEMS_runMagCal+0x78c>
 80153ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80153ce:	4460      	add	r0, ip
 80153d0:	4470      	add	r0, lr
 80153d2:	fb03 f000 	mul.w	r0, r3, r0
 80153d6:	f7eb fc99 	bl	8000d0c <__aeabi_i2f>
 80153da:	4639      	mov	r1, r7
 80153dc:	f7eb fcea 	bl	8000db4 <__aeabi_fmul>
 80153e0:	4603      	mov	r3, r0
 80153e2:	4628      	mov	r0, r5
 80153e4:	461d      	mov	r5, r3
 80153e6:	f7eb fc91 	bl	8000d0c <__aeabi_i2f>
 80153ea:	4601      	mov	r1, r0
 80153ec:	4628      	mov	r0, r5
 80153ee:	f7eb fd95 	bl	8000f1c <__aeabi_fdiv>
 80153f2:	f7eb febb 	bl	800116c <__aeabi_f2iz>
 80153f6:	b203      	sxth	r3, r0
 80153f8:	f108 0801 	add.w	r8, r8, #1
 80153fc:	2b96      	cmp	r3, #150	; 0x96
 80153fe:	fa5f f888 	uxtb.w	r8, r8
 8015402:	dd03      	ble.n	801540c <MEMS_runMagCal+0x78c>
 8015404:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015406:	3301      	adds	r3, #1
 8015408:	b2db      	uxtb	r3, r3
 801540a:	9309      	str	r3, [sp, #36]	; 0x24
 801540c:	eb09 0304 	add.w	r3, r9, r4
 8015410:	b2db      	uxtb	r3, r3
 8015412:	429e      	cmp	r6, r3
 8015414:	d89a      	bhi.n	801534c <MEMS_runMagCal+0x6cc>
 8015416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015418:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 801541c:	45c3      	cmp	fp, r8
 801541e:	f341 806f 	ble.w	8016500 <MEMS_runMagCal+0x1880>
 8015422:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015424:	b983      	cbnz	r3, 8015448 <MEMS_runMagCal+0x7c8>
 8015426:	f89a 3058 	ldrb.w	r3, [sl, #88]	; 0x58
 801542a:	3b02      	subs	r3, #2
 801542c:	2b01      	cmp	r3, #1
 801542e:	f241 83d5 	bls.w	8016bdc <MEMS_runMagCal+0x1f5c>
 8015432:	e009      	b.n	8015448 <MEMS_runMagCal+0x7c8>
 8015434:	42340000 	.word	0x42340000
 8015438:	40400000 	.word	0x40400000
 801543c:	3faccccd 	.word	0x3faccccd
 8015440:	3f900000 	.word	0x3f900000
 8015444:	3fa00000 	.word	0x3fa00000
 8015448:	2220      	movs	r2, #32
 801544a:	2100      	movs	r1, #0
 801544c:	a831      	add	r0, sp, #196	; 0xc4
 801544e:	f002 fb4d 	bl	8017aec <memset>
 8015452:	2300      	movs	r3, #0
 8015454:	f89a 008c 	ldrb.w	r0, [sl, #140]	; 0x8c
 8015458:	f89a 108d 	ldrb.w	r1, [sl, #141]	; 0x8d
 801545c:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
 8015460:	4288      	cmp	r0, r1
 8015462:	f99a 208e 	ldrsb.w	r2, [sl, #142]	; 0x8e
 8015466:	9003      	str	r0, [sp, #12]
 8015468:	932b      	str	r3, [sp, #172]	; 0xac
 801546a:	f001 83ac 	beq.w	8016bc6 <MEMS_runMagCal+0x1f46>
 801546e:	460b      	mov	r3, r1
 8015470:	9903      	ldr	r1, [sp, #12]
 8015472:	3201      	adds	r2, #1
 8015474:	1a52      	subs	r2, r2, r1
 8015476:	fb92 fbf3 	sdiv	fp, r2, r3
 801547a:	fb03 221b 	mls	r2, r3, fp, r2
 801547e:	2a00      	cmp	r2, #0
 8015480:	bfb8      	it	lt
 8015482:	18d2      	addlt	r2, r2, r3
 8015484:	fa0f fb82 	sxth.w	fp, r2
 8015488:	460a      	mov	r2, r1
 801548a:	2a00      	cmp	r2, #0
 801548c:	f001 83e6 	beq.w	8016c5c <MEMS_runMagCal+0x1fdc>
 8015490:	f04f 0800 	mov.w	r8, #0
 8015494:	3a01      	subs	r2, #1
 8015496:	fa5f f982 	uxtb.w	r9, r2
 801549a:	f109 0901 	add.w	r9, r9, #1
 801549e:	465f      	mov	r7, fp
 80154a0:	44d9      	add	r9, fp
 80154a2:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80154a6:	4645      	mov	r5, r8
 80154a8:	4646      	mov	r6, r8
 80154aa:	469b      	mov	fp, r3
 80154ac:	9207      	str	r2, [sp, #28]
 80154ae:	fb97 f4fb 	sdiv	r4, r7, fp
 80154b2:	fb0b 7414 	mls	r4, fp, r4, r7
 80154b6:	b2e4      	uxtb	r4, r4
 80154b8:	eb0a 04c4 	add.w	r4, sl, r4, lsl #3
 80154bc:	f9b4 00ae 	ldrsh.w	r0, [r4, #174]	; 0xae
 80154c0:	f7eb fc24 	bl	8000d0c <__aeabi_i2f>
 80154c4:	4601      	mov	r1, r0
 80154c6:	4630      	mov	r0, r6
 80154c8:	f7eb fb6c 	bl	8000ba4 <__addsf3>
 80154cc:	4606      	mov	r6, r0
 80154ce:	f9b4 00b0 	ldrsh.w	r0, [r4, #176]	; 0xb0
 80154d2:	f7eb fc1b 	bl	8000d0c <__aeabi_i2f>
 80154d6:	4601      	mov	r1, r0
 80154d8:	4628      	mov	r0, r5
 80154da:	f7eb fb63 	bl	8000ba4 <__addsf3>
 80154de:	4605      	mov	r5, r0
 80154e0:	f9b4 00b2 	ldrsh.w	r0, [r4, #178]	; 0xb2
 80154e4:	f7eb fc12 	bl	8000d0c <__aeabi_i2f>
 80154e8:	4601      	mov	r1, r0
 80154ea:	4640      	mov	r0, r8
 80154ec:	f7eb fb5a 	bl	8000ba4 <__addsf3>
 80154f0:	3701      	adds	r7, #1
 80154f2:	454f      	cmp	r7, r9
 80154f4:	4680      	mov	r8, r0
 80154f6:	d1da      	bne.n	80154ae <MEMS_runMagCal+0x82e>
 80154f8:	9803      	ldr	r0, [sp, #12]
 80154fa:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 80154fe:	f8cd 80ac 	str.w	r8, [sp, #172]	; 0xac
 8015502:	9629      	str	r6, [sp, #164]	; 0xa4
 8015504:	952a      	str	r5, [sp, #168]	; 0xa8
 8015506:	f7eb fc01 	bl	8000d0c <__aeabi_i2f>
 801550a:	4601      	mov	r1, r0
 801550c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8015510:	f7eb fd04 	bl	8000f1c <__aeabi_fdiv>
 8015514:	4631      	mov	r1, r6
 8015516:	4604      	mov	r4, r0
 8015518:	f7eb fc4c 	bl	8000db4 <__aeabi_fmul>
 801551c:	4602      	mov	r2, r0
 801551e:	4629      	mov	r1, r5
 8015520:	4620      	mov	r0, r4
 8015522:	920b      	str	r2, [sp, #44]	; 0x2c
 8015524:	f7eb fc46 	bl	8000db4 <__aeabi_fmul>
 8015528:	4602      	mov	r2, r0
 801552a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801552e:	4641      	mov	r1, r8
 8015530:	465f      	mov	r7, fp
 8015532:	f04f 0800 	mov.w	r8, #0
 8015536:	4620      	mov	r0, r4
 8015538:	9209      	str	r2, [sp, #36]	; 0x24
 801553a:	f7eb fc3b 	bl	8000db4 <__aeabi_fmul>
 801553e:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8015542:	46c3      	mov	fp, r8
 8015544:	3201      	adds	r2, #1
 8015546:	19d3      	adds	r3, r2, r7
 8015548:	9310      	str	r3, [sp, #64]	; 0x40
 801554a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801554c:	46c1      	mov	r9, r8
 801554e:	9311      	str	r3, [sp, #68]	; 0x44
 8015550:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 8015554:	463b      	mov	r3, r7
 8015556:	4642      	mov	r2, r8
 8015558:	4647      	mov	r7, r8
 801555a:	46c2      	mov	sl, r8
 801555c:	900c      	str	r0, [sp, #48]	; 0x30
 801555e:	9207      	str	r2, [sp, #28]
 8015560:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015562:	9303      	str	r3, [sp, #12]
 8015564:	fb93 f6f2 	sdiv	r6, r3, r2
 8015568:	fb02 3616 	mls	r6, r2, r6, r3
 801556c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801556e:	b2f6      	uxtb	r6, r6
 8015570:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8015574:	f9b6 00ae 	ldrsh.w	r0, [r6, #174]	; 0xae
 8015578:	f7eb fbc8 	bl	8000d0c <__aeabi_i2f>
 801557c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801557e:	f7eb fb0f 	bl	8000ba0 <__aeabi_fsub>
 8015582:	4605      	mov	r5, r0
 8015584:	f9b6 00b0 	ldrsh.w	r0, [r6, #176]	; 0xb0
 8015588:	f7eb fbc0 	bl	8000d0c <__aeabi_i2f>
 801558c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801558e:	f7eb fb07 	bl	8000ba0 <__aeabi_fsub>
 8015592:	4604      	mov	r4, r0
 8015594:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	; 0xb2
 8015598:	f7eb fbb8 	bl	8000d0c <__aeabi_i2f>
 801559c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801559e:	f7eb faff 	bl	8000ba0 <__aeabi_fsub>
 80155a2:	4629      	mov	r1, r5
 80155a4:	4606      	mov	r6, r0
 80155a6:	4628      	mov	r0, r5
 80155a8:	f7eb fc04 	bl	8000db4 <__aeabi_fmul>
 80155ac:	4601      	mov	r1, r0
 80155ae:	4648      	mov	r0, r9
 80155b0:	f7eb faf8 	bl	8000ba4 <__addsf3>
 80155b4:	4621      	mov	r1, r4
 80155b6:	4681      	mov	r9, r0
 80155b8:	4628      	mov	r0, r5
 80155ba:	f7eb fbfb 	bl	8000db4 <__aeabi_fmul>
 80155be:	4601      	mov	r1, r0
 80155c0:	4638      	mov	r0, r7
 80155c2:	f7eb faef 	bl	8000ba4 <__addsf3>
 80155c6:	4631      	mov	r1, r6
 80155c8:	4607      	mov	r7, r0
 80155ca:	4628      	mov	r0, r5
 80155cc:	f7eb fbf2 	bl	8000db4 <__aeabi_fmul>
 80155d0:	4601      	mov	r1, r0
 80155d2:	4658      	mov	r0, fp
 80155d4:	f7eb fae6 	bl	8000ba4 <__addsf3>
 80155d8:	4621      	mov	r1, r4
 80155da:	4683      	mov	fp, r0
 80155dc:	4620      	mov	r0, r4
 80155de:	f7eb fbe9 	bl	8000db4 <__aeabi_fmul>
 80155e2:	4601      	mov	r1, r0
 80155e4:	4640      	mov	r0, r8
 80155e6:	f7eb fadd 	bl	8000ba4 <__addsf3>
 80155ea:	4631      	mov	r1, r6
 80155ec:	4680      	mov	r8, r0
 80155ee:	4620      	mov	r0, r4
 80155f0:	f7eb fbe0 	bl	8000db4 <__aeabi_fmul>
 80155f4:	4601      	mov	r1, r0
 80155f6:	4650      	mov	r0, sl
 80155f8:	f7eb fad4 	bl	8000ba4 <__addsf3>
 80155fc:	4631      	mov	r1, r6
 80155fe:	4682      	mov	sl, r0
 8015600:	4630      	mov	r0, r6
 8015602:	f7eb fbd7 	bl	8000db4 <__aeabi_fmul>
 8015606:	9a07      	ldr	r2, [sp, #28]
 8015608:	4601      	mov	r1, r0
 801560a:	4610      	mov	r0, r2
 801560c:	f7eb faca 	bl	8000ba4 <__addsf3>
 8015610:	9b03      	ldr	r3, [sp, #12]
 8015612:	9910      	ldr	r1, [sp, #64]	; 0x40
 8015614:	3301      	adds	r3, #1
 8015616:	4299      	cmp	r1, r3
 8015618:	4602      	mov	r2, r0
 801561a:	d1a0      	bne.n	801555e <MEMS_runMagCal+0x8de>
 801561c:	4651      	mov	r1, sl
 801561e:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8015622:	f8cd 90c4 	str.w	r9, [sp, #196]	; 0xc4
 8015626:	9732      	str	r7, [sp, #200]	; 0xc8
 8015628:	f8cd b0cc 	str.w	fp, [sp, #204]	; 0xcc
 801562c:	f8cd 80d0 	str.w	r8, [sp, #208]	; 0xd0
 8015630:	9135      	str	r1, [sp, #212]	; 0xd4
 8015632:	9036      	str	r0, [sp, #216]	; 0xd8
 8015634:	a926      	add	r1, sp, #152	; 0x98
 8015636:	a831      	add	r0, sp, #196	; 0xc4
 8015638:	f7ff f9de 	bl	80149f8 <MEMS_EIG3>
 801563c:	f8dd 909c 	ldr.w	r9, [sp, #156]	; 0x9c
 8015640:	f8dd 8098 	ldr.w	r8, [sp, #152]	; 0x98
 8015644:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8015648:	f028 4700 	bic.w	r7, r8, #2147483648	; 0x80000000
 801564c:	4630      	mov	r0, r6
 801564e:	4639      	mov	r1, r7
 8015650:	f7eb fd58 	bl	8001104 <__aeabi_fcmple>
 8015654:	4635      	mov	r5, r6
 8015656:	b900      	cbnz	r0, 801565a <MEMS_runMagCal+0x9da>
 8015658:	463d      	mov	r5, r7
 801565a:	f8dd b0a0 	ldr.w	fp, [sp, #160]	; 0xa0
 801565e:	4628      	mov	r0, r5
 8015660:	f02b 4400 	bic.w	r4, fp, #2147483648	; 0x80000000
 8015664:	4621      	mov	r1, r4
 8015666:	f7eb fd4d 	bl	8001104 <__aeabi_fcmple>
 801566a:	b900      	cbnz	r0, 801566e <MEMS_runMagCal+0x9ee>
 801566c:	4625      	mov	r5, r4
 801566e:	4639      	mov	r1, r7
 8015670:	4630      	mov	r0, r6
 8015672:	f7eb fd51 	bl	8001118 <__aeabi_fcmpge>
 8015676:	b900      	cbnz	r0, 801567a <MEMS_runMagCal+0x9fa>
 8015678:	463e      	mov	r6, r7
 801567a:	4631      	mov	r1, r6
 801567c:	4620      	mov	r0, r4
 801567e:	f7eb fd4b 	bl	8001118 <__aeabi_fcmpge>
 8015682:	b900      	cbnz	r0, 8015686 <MEMS_runMagCal+0xa06>
 8015684:	4634      	mov	r4, r6
 8015686:	49a6      	ldr	r1, [pc, #664]	; (8015920 <MEMS_runMagCal+0xca0>)
 8015688:	4628      	mov	r0, r5
 801568a:	f7eb fb93 	bl	8000db4 <__aeabi_fmul>
 801568e:	4601      	mov	r1, r0
 8015690:	4620      	mov	r0, r4
 8015692:	f7eb fd4b 	bl	800112c <__aeabi_fcmpgt>
 8015696:	2800      	cmp	r0, #0
 8015698:	f041 8284 	bne.w	8016ba4 <MEMS_runMagCal+0x1f24>
 801569c:	4628      	mov	r0, r5
 801569e:	49a1      	ldr	r1, [pc, #644]	; (8015924 <MEMS_runMagCal+0xca4>)
 80156a0:	f7eb fb88 	bl	8000db4 <__aeabi_fmul>
 80156a4:	4601      	mov	r1, r0
 80156a6:	4620      	mov	r0, r4
 80156a8:	f7eb fd40 	bl	800112c <__aeabi_fcmpgt>
 80156ac:	f89a 508c 	ldrb.w	r5, [sl, #140]	; 0x8c
 80156b0:	b110      	cbz	r0, 80156b8 <MEMS_runMagCal+0xa38>
 80156b2:	2d22      	cmp	r5, #34	; 0x22
 80156b4:	f241 8276 	bls.w	8016ba4 <MEMS_runMagCal+0x1f24>
 80156b8:	4641      	mov	r1, r8
 80156ba:	4648      	mov	r0, r9
 80156bc:	f7eb fa72 	bl	8000ba4 <__addsf3>
 80156c0:	4659      	mov	r1, fp
 80156c2:	f7eb fa6f 	bl	8000ba4 <__addsf3>
 80156c6:	4604      	mov	r4, r0
 80156c8:	4628      	mov	r0, r5
 80156ca:	f7eb fb1f 	bl	8000d0c <__aeabi_i2f>
 80156ce:	4601      	mov	r1, r0
 80156d0:	4620      	mov	r0, r4
 80156d2:	f7eb fc23 	bl	8000f1c <__aeabi_fdiv>
 80156d6:	f003 f8a9 	bl	801882c <sqrtf>
 80156da:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80156dc:	4601      	mov	r1, r0
 80156de:	4628      	mov	r0, r5
 80156e0:	f7eb fb68 	bl	8000db4 <__aeabi_fmul>
 80156e4:	4990      	ldr	r1, [pc, #576]	; (8015928 <MEMS_runMagCal+0xca8>)
 80156e6:	4604      	mov	r4, r0
 80156e8:	f7eb fd20 	bl	800112c <__aeabi_fcmpgt>
 80156ec:	2800      	cmp	r0, #0
 80156ee:	f041 8259 	bne.w	8016ba4 <MEMS_runMagCal+0x1f24>
 80156f2:	4620      	mov	r0, r4
 80156f4:	498b      	ldr	r1, [pc, #556]	; (8015924 <MEMS_runMagCal+0xca4>)
 80156f6:	f7eb fcfb 	bl	80010f0 <__aeabi_fcmplt>
 80156fa:	4603      	mov	r3, r0
 80156fc:	2800      	cmp	r0, #0
 80156fe:	f041 8251 	bne.w	8016ba4 <MEMS_runMagCal+0x1f24>
 8015702:	4629      	mov	r1, r5
 8015704:	4889      	ldr	r0, [pc, #548]	; (801592c <MEMS_runMagCal+0xcac>)
 8015706:	e9cd 3335 	strd	r3, r3, [sp, #212]	; 0xd4
 801570a:	9338      	str	r3, [sp, #224]	; 0xe0
 801570c:	f7eb fc06 	bl	8000f1c <__aeabi_fdiv>
 8015710:	4604      	mov	r4, r0
 8015712:	9802      	ldr	r0, [sp, #8]
 8015714:	f7eb fafa 	bl	8000d0c <__aeabi_i2f>
 8015718:	4621      	mov	r1, r4
 801571a:	f7eb fce9 	bl	80010f0 <__aeabi_fcmplt>
 801571e:	b920      	cbnz	r0, 801572a <MEMS_runMagCal+0xaaa>
 8015720:	4620      	mov	r0, r4
 8015722:	f7eb fd23 	bl	800116c <__aeabi_f2iz>
 8015726:	b203      	sxth	r3, r0
 8015728:	9302      	str	r3, [sp, #8]
 801572a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801572c:	4880      	ldr	r0, [pc, #512]	; (8015930 <MEMS_runMagCal+0xcb0>)
 801572e:	f7eb fbf5 	bl	8000f1c <__aeabi_fdiv>
 8015732:	4604      	mov	r4, r0
 8015734:	9802      	ldr	r0, [sp, #8]
 8015736:	f7eb fae9 	bl	8000d0c <__aeabi_i2f>
 801573a:	4621      	mov	r1, r4
 801573c:	f7eb fcf6 	bl	800112c <__aeabi_fcmpgt>
 8015740:	b920      	cbnz	r0, 801574c <MEMS_runMagCal+0xacc>
 8015742:	4620      	mov	r0, r4
 8015744:	f7eb fd12 	bl	800116c <__aeabi_f2iz>
 8015748:	b203      	sxth	r3, r0
 801574a:	9302      	str	r3, [sp, #8]
 801574c:	9802      	ldr	r0, [sp, #8]
 801574e:	f7eb fadd 	bl	8000d0c <__aeabi_i2f>
 8015752:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015754:	f7eb fb2e 	bl	8000db4 <__aeabi_fmul>
 8015758:	4976      	ldr	r1, [pc, #472]	; (8015934 <MEMS_runMagCal+0xcb4>)
 801575a:	4604      	mov	r4, r0
 801575c:	f7eb fce6 	bl	800112c <__aeabi_fcmpgt>
 8015760:	2800      	cmp	r0, #0
 8015762:	f001 8296 	beq.w	8016c92 <MEMS_runMagCal+0x2012>
 8015766:	4620      	mov	r0, r4
 8015768:	4973      	ldr	r1, [pc, #460]	; (8015938 <MEMS_runMagCal+0xcb8>)
 801576a:	f7eb fcc1 	bl	80010f0 <__aeabi_fcmplt>
 801576e:	2800      	cmp	r0, #0
 8015770:	f001 828f 	beq.w	8016c92 <MEMS_runMagCal+0x2012>
 8015774:	4620      	mov	r0, r4
 8015776:	4971      	ldr	r1, [pc, #452]	; (801593c <MEMS_runMagCal+0xcbc>)
 8015778:	f7eb fb1c 	bl	8000db4 <__aeabi_fmul>
 801577c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8015780:	f7eb fa10 	bl	8000ba4 <__addsf3>
 8015784:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8015788:	f7eb fb14 	bl	8000db4 <__aeabi_fmul>
 801578c:	4604      	mov	r4, r0
 801578e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8015790:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015792:	4628      	mov	r0, r5
 8015794:	f7eb fb0e 	bl	8000db4 <__aeabi_fmul>
 8015798:	4603      	mov	r3, r0
 801579a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801579c:	4628      	mov	r0, r5
 801579e:	9331      	str	r3, [sp, #196]	; 0xc4
 80157a0:	f7eb fb08 	bl	8000db4 <__aeabi_fmul>
 80157a4:	4603      	mov	r3, r0
 80157a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80157a8:	4628      	mov	r0, r5
 80157aa:	9332      	str	r3, [sp, #200]	; 0xc8
 80157ac:	f7eb fb02 	bl	8000db4 <__aeabi_fmul>
 80157b0:	4603      	mov	r3, r0
 80157b2:	495f      	ldr	r1, [pc, #380]	; (8015930 <MEMS_runMagCal+0xcb0>)
 80157b4:	4620      	mov	r0, r4
 80157b6:	9333      	str	r3, [sp, #204]	; 0xcc
 80157b8:	f7eb fafc 	bl	8000db4 <__aeabi_fmul>
 80157bc:	2700      	movs	r7, #0
 80157be:	9e05      	ldr	r6, [sp, #20]
 80157c0:	9034      	str	r0, [sp, #208]	; 0xd0
 80157c2:	9037      	str	r0, [sp, #220]	; 0xdc
 80157c4:	f10d 08e4 	add.w	r8, sp, #228	; 0xe4
 80157c8:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 80157cc:	4643      	mov	r3, r8
 80157ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80157d0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80157d2:	f8cd 9000 	str.w	r9, [sp]
 80157d6:	a931      	add	r1, sp, #196	; 0xc4
 80157d8:	f7fe fe6e 	bl	80144b8 <MEMS_SolveLinearEq>
 80157dc:	2800      	cmp	r0, #0
 80157de:	f001 8275 	beq.w	8016ccc <MEMS_runMagCal+0x204c>
 80157e2:	f8d8 5000 	ldr.w	r5, [r8]
 80157e6:	9831      	ldr	r0, [sp, #196]	; 0xc4
 80157e8:	4629      	mov	r1, r5
 80157ea:	f7eb f9db 	bl	8000ba4 <__addsf3>
 80157ee:	4602      	mov	r2, r0
 80157f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80157f4:	9832      	ldr	r0, [sp, #200]	; 0xc8
 80157f6:	4619      	mov	r1, r3
 80157f8:	9302      	str	r3, [sp, #8]
 80157fa:	9231      	str	r2, [sp, #196]	; 0xc4
 80157fc:	f7eb f9d2 	bl	8000ba4 <__addsf3>
 8015800:	4602      	mov	r2, r0
 8015802:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015806:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8015808:	4621      	mov	r1, r4
 801580a:	9232      	str	r2, [sp, #200]	; 0xc8
 801580c:	f7eb f9ca 	bl	8000ba4 <__addsf3>
 8015810:	4602      	mov	r2, r0
 8015812:	f8d8 b00c 	ldr.w	fp, [r8, #12]
 8015816:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8015818:	4659      	mov	r1, fp
 801581a:	9233      	str	r2, [sp, #204]	; 0xcc
 801581c:	f7eb f9c2 	bl	8000ba4 <__addsf3>
 8015820:	4602      	mov	r2, r0
 8015822:	9b02      	ldr	r3, [sp, #8]
 8015824:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 8015828:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801582c:	4628      	mov	r0, r5
 801582e:	9102      	str	r1, [sp, #8]
 8015830:	9234      	str	r2, [sp, #208]	; 0xd0
 8015832:	f7eb fc71 	bl	8001118 <__aeabi_fcmpge>
 8015836:	b908      	cbnz	r0, 801583c <MEMS_runMagCal+0xbbc>
 8015838:	9902      	ldr	r1, [sp, #8]
 801583a:	460d      	mov	r5, r1
 801583c:	4639      	mov	r1, r7
 801583e:	4628      	mov	r0, r5
 8015840:	f7eb fc6a 	bl	8001118 <__aeabi_fcmpge>
 8015844:	b900      	cbnz	r0, 8015848 <MEMS_runMagCal+0xbc8>
 8015846:	463d      	mov	r5, r7
 8015848:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801584c:	4629      	mov	r1, r5
 801584e:	4620      	mov	r0, r4
 8015850:	f7eb fc62 	bl	8001118 <__aeabi_fcmpge>
 8015854:	b900      	cbnz	r0, 8015858 <MEMS_runMagCal+0xbd8>
 8015856:	462c      	mov	r4, r5
 8015858:	4620      	mov	r0, r4
 801585a:	4939      	ldr	r1, [pc, #228]	; (8015940 <MEMS_runMagCal+0xcc0>)
 801585c:	f7eb fc48 	bl	80010f0 <__aeabi_fcmplt>
 8015860:	f02b 4b00 	bic.w	fp, fp, #2147483648	; 0x80000000
 8015864:	b130      	cbz	r0, 8015874 <MEMS_runMagCal+0xbf4>
 8015866:	4658      	mov	r0, fp
 8015868:	4936      	ldr	r1, [pc, #216]	; (8015944 <MEMS_runMagCal+0xcc4>)
 801586a:	f7eb fc41 	bl	80010f0 <__aeabi_fcmplt>
 801586e:	b108      	cbz	r0, 8015874 <MEMS_runMagCal+0xbf4>
 8015870:	2e01      	cmp	r6, #1
 8015872:	d803      	bhi.n	801587c <MEMS_runMagCal+0xbfc>
 8015874:	3601      	adds	r6, #1
 8015876:	b2f6      	uxtb	r6, r6
 8015878:	2e05      	cmp	r6, #5
 801587a:	d1a7      	bne.n	80157cc <MEMS_runMagCal+0xb4c>
 801587c:	465d      	mov	r5, fp
 801587e:	4620      	mov	r0, r4
 8015880:	4931      	ldr	r1, [pc, #196]	; (8015948 <MEMS_runMagCal+0xcc8>)
 8015882:	f7eb fc53 	bl	800112c <__aeabi_fcmpgt>
 8015886:	b968      	cbnz	r0, 80158a4 <MEMS_runMagCal+0xc24>
 8015888:	4628      	mov	r0, r5
 801588a:	4930      	ldr	r1, [pc, #192]	; (801594c <MEMS_runMagCal+0xccc>)
 801588c:	f7eb fc4e 	bl	800112c <__aeabi_fcmpgt>
 8015890:	b940      	cbnz	r0, 80158a4 <MEMS_runMagCal+0xc24>
 8015892:	9d34      	ldr	r5, [sp, #208]	; 0xd0
 8015894:	492e      	ldr	r1, [pc, #184]	; (8015950 <MEMS_runMagCal+0xcd0>)
 8015896:	4628      	mov	r0, r5
 8015898:	f7eb fc34 	bl	8001104 <__aeabi_fcmple>
 801589c:	4604      	mov	r4, r0
 801589e:	2800      	cmp	r0, #0
 80158a0:	f001 822e 	beq.w	8016d00 <MEMS_runMagCal+0x2080>
 80158a4:	2300      	movs	r3, #0
 80158a6:	4a2b      	ldr	r2, [pc, #172]	; (8015954 <MEMS_runMagCal+0xcd4>)
 80158a8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80158aa:	ad3a      	add	r5, sp, #232	; 0xe8
 80158ac:	4c20      	ldr	r4, [pc, #128]	; (8015930 <MEMS_runMagCal+0xcb0>)
 80158ae:	e9c5 3300 	strd	r3, r3, [r5]
 80158b2:	e9c5 3304 	strd	r3, r3, [r5, #16]
 80158b6:	f8c9 2000 	str.w	r2, [r9]
 80158ba:	60ab      	str	r3, [r5, #8]
 80158bc:	61ab      	str	r3, [r5, #24]
 80158be:	4639      	mov	r1, r7
 80158c0:	9831      	ldr	r0, [sp, #196]	; 0xc4
 80158c2:	9437      	str	r4, [sp, #220]	; 0xdc
 80158c4:	f7eb fb2a 	bl	8000f1c <__aeabi_fdiv>
 80158c8:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80158ca:	4683      	mov	fp, r0
 80158cc:	4620      	mov	r0, r4
 80158ce:	f7eb fb25 	bl	8000f1c <__aeabi_fdiv>
 80158d2:	4606      	mov	r6, r0
 80158d4:	4639      	mov	r1, r7
 80158d6:	9832      	ldr	r0, [sp, #200]	; 0xc8
 80158d8:	f8c8 6000 	str.w	r6, [r8]
 80158dc:	f7eb fb1e 	bl	8000f1c <__aeabi_fdiv>
 80158e0:	4603      	mov	r3, r0
 80158e2:	4639      	mov	r1, r7
 80158e4:	9833      	ldr	r0, [sp, #204]	; 0xcc
 80158e6:	f8c8 6010 	str.w	r6, [r8, #16]
 80158ea:	9302      	str	r3, [sp, #8]
 80158ec:	f7eb fb16 	bl	8000f1c <__aeabi_fdiv>
 80158f0:	4627      	mov	r7, r4
 80158f2:	f8c8 6020 	str.w	r6, [r8, #32]
 80158f6:	9003      	str	r0, [sp, #12]
 80158f8:	4639      	mov	r1, r7
 80158fa:	4620      	mov	r0, r4
 80158fc:	f7eb fb0e 	bl	8000f1c <__aeabi_fdiv>
 8015900:	4601      	mov	r1, r0
 8015902:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8015906:	f7eb f94b 	bl	8000ba0 <__aeabi_fsub>
 801590a:	4607      	mov	r7, r0
 801590c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8015910:	4630      	mov	r0, r6
 8015912:	f7eb f945 	bl	8000ba0 <__aeabi_fsub>
 8015916:	4910      	ldr	r1, [pc, #64]	; (8015958 <MEMS_runMagCal+0xcd8>)
 8015918:	4604      	mov	r4, r0
 801591a:	4630      	mov	r0, r6
 801591c:	e01e      	b.n	801595c <MEMS_runMagCal+0xcdc>
 801591e:	bf00      	nop
 8015920:	41c80000 	.word	0x41c80000
 8015924:	41a00000 	.word	0x41a00000
 8015928:	42960000 	.word	0x42960000
 801592c:	430d0000 	.word	0x430d0000
 8015930:	423c0000 	.word	0x423c0000
 8015934:	41966667 	.word	0x41966667
 8015938:	433c0000 	.word	0x433c0000
 801593c:	3c2e4c41 	.word	0x3c2e4c41
 8015940:	3e99999a 	.word	0x3e99999a
 8015944:	3f666666 	.word	0x3f666666
 8015948:	40400000 	.word	0x40400000
 801594c:	400ccccd 	.word	0x400ccccd
 8015950:	3dcccccd 	.word	0x3dcccccd
 8015954:	41f00001 	.word	0x41f00001
 8015958:	3f8ccccd 	.word	0x3f8ccccd
 801595c:	f7eb f920 	bl	8000ba0 <__aeabi_fsub>
 8015960:	49c7      	ldr	r1, [pc, #796]	; (8015c80 <MEMS_runMagCal+0x1000>)
 8015962:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8015966:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801596a:	f7eb fbc1 	bl	80010f0 <__aeabi_fcmplt>
 801596e:	2800      	cmp	r0, #0
 8015970:	f041 819c 	bne.w	8016cac <MEMS_runMagCal+0x202c>
 8015974:	4620      	mov	r0, r4
 8015976:	49c3      	ldr	r1, [pc, #780]	; (8015c84 <MEMS_runMagCal+0x1004>)
 8015978:	f7eb fbce 	bl	8001118 <__aeabi_fcmpge>
 801597c:	2800      	cmp	r0, #0
 801597e:	f041 80fa 	bne.w	8016b76 <MEMS_runMagCal+0x1ef6>
 8015982:	4638      	mov	r0, r7
 8015984:	49c0      	ldr	r1, [pc, #768]	; (8015c88 <MEMS_runMagCal+0x1008>)
 8015986:	f7eb fbb3 	bl	80010f0 <__aeabi_fcmplt>
 801598a:	2800      	cmp	r0, #0
 801598c:	f041 80f3 	bne.w	8016b76 <MEMS_runMagCal+0x1ef6>
 8015990:	4658      	mov	r0, fp
 8015992:	f002 fe5d 	bl	8018650 <roundf>
 8015996:	f7eb fbe9 	bl	800116c <__aeabi_f2iz>
 801599a:	4603      	mov	r3, r0
 801599c:	9802      	ldr	r0, [sp, #8]
 801599e:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
 80159a2:	f002 fe55 	bl	8018650 <roundf>
 80159a6:	f7eb fbe1 	bl	800116c <__aeabi_f2iz>
 80159aa:	4603      	mov	r3, r0
 80159ac:	9803      	ldr	r0, [sp, #12]
 80159ae:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
 80159b2:	f002 fe4d 	bl	8018650 <roundf>
 80159b6:	f7eb fbd9 	bl	800116c <__aeabi_f2iz>
 80159ba:	4603      	mov	r3, r0
 80159bc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80159be:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
 80159c2:	f7eb f99f 	bl	8000d04 <__aeabi_ui2f>
 80159c6:	49b1      	ldr	r1, [pc, #708]	; (8015c8c <MEMS_runMagCal+0x100c>)
 80159c8:	f7eb f9f4 	bl	8000db4 <__aeabi_fmul>
 80159cc:	f002 fe40 	bl	8018650 <roundf>
 80159d0:	f7eb fbf2 	bl	80011b8 <__aeabi_f2uiz>
 80159d4:	ae1f      	add	r6, sp, #124	; 0x7c
 80159d6:	aa1c      	add	r2, sp, #112	; 0x70
 80159d8:	f10d 0b6c 	add.w	fp, sp, #108	; 0x6c
 80159dc:	4631      	mov	r1, r6
 80159de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80159e0:	f8ca 0004 	str.w	r0, [sl, #4]
 80159e4:	e9cd 2b00 	strd	r2, fp, [sp]
 80159e8:	980e      	ldr	r0, [sp, #56]	; 0x38
 80159ea:	4642      	mov	r2, r8
 80159ec:	f7f7 fbd8 	bl	800d1a0 <getMagStats.constprop.0>
 80159f0:	f7eb f98c 	bl	8000d0c <__aeabi_i2f>
 80159f4:	231e      	movs	r3, #30
 80159f6:	f89a 208c 	ldrb.w	r2, [sl, #140]	; 0x8c
 80159fa:	4604      	mov	r4, r0
 80159fc:	fb03 f002 	mul.w	r0, r3, r2
 8015a00:	9202      	str	r2, [sp, #8]
 8015a02:	f7eb f983 	bl	8000d0c <__aeabi_i2f>
 8015a06:	49a2      	ldr	r1, [pc, #648]	; (8015c90 <MEMS_runMagCal+0x1010>)
 8015a08:	f7eb f9d4 	bl	8000db4 <__aeabi_fmul>
 8015a0c:	4601      	mov	r1, r0
 8015a0e:	4620      	mov	r0, r4
 8015a10:	f7eb fb8c 	bl	800112c <__aeabi_fcmpgt>
 8015a14:	b968      	cbnz	r0, 8015a32 <MEMS_runMagCal+0xdb2>
 8015a16:	499f      	ldr	r1, [pc, #636]	; (8015c94 <MEMS_runMagCal+0x1014>)
 8015a18:	f8db 0000 	ldr.w	r0, [fp]
 8015a1c:	f7eb fb86 	bl	800112c <__aeabi_fcmpgt>
 8015a20:	2800      	cmp	r0, #0
 8015a22:	f001 813a 	beq.w	8016c9a <MEMS_runMagCal+0x201a>
 8015a26:	f89a 3040 	ldrb.w	r3, [sl, #64]	; 0x40
 8015a2a:	fab3 f383 	clz	r3, r3
 8015a2e:	095b      	lsrs	r3, r3, #5
 8015a30:	9305      	str	r3, [sp, #20]
 8015a32:	f8db 1000 	ldr.w	r1, [fp]
 8015a36:	f8dd b018 	ldr.w	fp, [sp, #24]
 8015a3a:	f8da 4004 	ldr.w	r4, [sl, #4]
 8015a3e:	4658      	mov	r0, fp
 8015a40:	942c      	str	r4, [sp, #176]	; 0xb0
 8015a42:	f7eb f9b7 	bl	8000db4 <__aeabi_fmul>
 8015a46:	4639      	mov	r1, r7
 8015a48:	f7eb fa68 	bl	8000f1c <__aeabi_fdiv>
 8015a4c:	f002 fe00 	bl	8018650 <roundf>
 8015a50:	f7eb fbb2 	bl	80011b8 <__aeabi_f2uiz>
 8015a54:	4603      	mov	r3, r0
 8015a56:	f8d9 1000 	ldr.w	r1, [r9]
 8015a5a:	4658      	mov	r0, fp
 8015a5c:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
 8015a60:	f7eb f9a8 	bl	8000db4 <__aeabi_fmul>
 8015a64:	f002 fdf4 	bl	8018650 <roundf>
 8015a68:	f7eb fba6 	bl	80011b8 <__aeabi_f2uiz>
 8015a6c:	4602      	mov	r2, r0
 8015a6e:	6830      	ldr	r0, [r6, #0]
 8015a70:	88b3      	ldrh	r3, [r6, #4]
 8015a72:	4989      	ldr	r1, [pc, #548]	; (8015c98 <MEMS_runMagCal+0x1018>)
 8015a74:	f8cd 00b6 	str.w	r0, [sp, #182]	; 0xb6
 8015a78:	f8d8 0000 	ldr.w	r0, [r8]
 8015a7c:	f88d 20b5 	strb.w	r2, [sp, #181]	; 0xb5
 8015a80:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
 8015a84:	f7eb f996 	bl	8000db4 <__aeabi_fmul>
 8015a88:	f7eb fb96 	bl	80011b8 <__aeabi_f2uiz>
 8015a8c:	4982      	ldr	r1, [pc, #520]	; (8015c98 <MEMS_runMagCal+0x1018>)
 8015a8e:	fa1f f980 	uxth.w	r9, r0
 8015a92:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8015a96:	f8ad 90bc 	strh.w	r9, [sp, #188]	; 0xbc
 8015a9a:	f7eb f98b 	bl	8000db4 <__aeabi_fmul>
 8015a9e:	f7eb fb8b 	bl	80011b8 <__aeabi_f2uiz>
 8015aa2:	497d      	ldr	r1, [pc, #500]	; (8015c98 <MEMS_runMagCal+0x1018>)
 8015aa4:	b287      	uxth	r7, r0
 8015aa6:	f8d8 0020 	ldr.w	r0, [r8, #32]
 8015aaa:	f8ad 70be 	strh.w	r7, [sp, #190]	; 0xbe
 8015aae:	f7eb f981 	bl	8000db4 <__aeabi_fmul>
 8015ab2:	f7eb fb81 	bl	80011b8 <__aeabi_f2uiz>
 8015ab6:	9b04      	ldr	r3, [sp, #16]
 8015ab8:	9a05      	ldr	r2, [sp, #20]
 8015aba:	2b01      	cmp	r3, #1
 8015abc:	bf04      	itt	eq
 8015abe:	23ff      	moveq	r3, #255	; 0xff
 8015ac0:	f88d 30b4 	strbeq.w	r3, [sp, #180]	; 0xb4
 8015ac4:	2300      	movs	r3, #0
 8015ac6:	b286      	uxth	r6, r0
 8015ac8:	f8ad 60c0 	strh.w	r6, [sp, #192]	; 0xc0
 8015acc:	f88a 3000 	strb.w	r3, [sl]
 8015ad0:	2a00      	cmp	r2, #0
 8015ad2:	f000 8126 	beq.w	8015d22 <MEMS_runMagCal+0x10a2>
 8015ad6:	f89a 2040 	ldrb.w	r2, [sl, #64]	; 0x40
 8015ada:	f88a 3001 	strb.w	r3, [sl, #1]
 8015ade:	2a00      	cmp	r2, #0
 8015ae0:	f040 85a4 	bne.w	801662c <MEMS_runMagCal+0x19ac>
 8015ae4:	f10a 0368 	add.w	r3, sl, #104	; 0x68
 8015ae8:	930b      	str	r3, [sp, #44]	; 0x2c
 8015aea:	ab1a      	add	r3, sp, #104	; 0x68
 8015aec:	930a      	str	r3, [sp, #40]	; 0x28
 8015aee:	2601      	movs	r6, #1
 8015af0:	ad2c      	add	r5, sp, #176	; 0xb0
 8015af2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015af4:	f8ca 0044 	str.w	r0, [sl, #68]	; 0x44
 8015af8:	6828      	ldr	r0, [r5, #0]
 8015afa:	f8ca 204c 	str.w	r2, [sl, #76]	; 0x4c
 8015afe:	f8ca 1048 	str.w	r1, [sl, #72]	; 0x48
 8015b02:	f8ca 0054 	str.w	r0, [sl, #84]	; 0x54
 8015b06:	f8ca 3050 	str.w	r3, [sl, #80]	; 0x50
 8015b0a:	f9bd 00b6 	ldrsh.w	r0, [sp, #182]	; 0xb6
 8015b0e:	f88a 6040 	strb.w	r6, [sl, #64]	; 0x40
 8015b12:	f88a 6059 	strb.w	r6, [sl, #89]	; 0x59
 8015b16:	f7eb f8f9 	bl	8000d0c <__aeabi_i2f>
 8015b1a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8015b1e:	4603      	mov	r3, r0
 8015b20:	9007      	str	r0, [sp, #28]
 8015b22:	f8bd 00bc 	ldrh.w	r0, [sp, #188]	; 0xbc
 8015b26:	f8ca 305c 	str.w	r3, [sl, #92]	; 0x5c
 8015b2a:	fb05 f000 	mul.w	r0, r5, r0
 8015b2e:	f7eb f8ed 	bl	8000d0c <__aeabi_i2f>
 8015b32:	495a      	ldr	r1, [pc, #360]	; (8015c9c <MEMS_runMagCal+0x101c>)
 8015b34:	f7eb f93e 	bl	8000db4 <__aeabi_fmul>
 8015b38:	4603      	mov	r3, r0
 8015b3a:	9004      	str	r0, [sp, #16]
 8015b3c:	f8ca 3068 	str.w	r3, [sl, #104]	; 0x68
 8015b40:	f9bd 00b8 	ldrsh.w	r0, [sp, #184]	; 0xb8
 8015b44:	f7eb f8e2 	bl	8000d0c <__aeabi_i2f>
 8015b48:	4603      	mov	r3, r0
 8015b4a:	9006      	str	r0, [sp, #24]
 8015b4c:	f8bd 00be 	ldrh.w	r0, [sp, #190]	; 0xbe
 8015b50:	f8ca 3060 	str.w	r3, [sl, #96]	; 0x60
 8015b54:	fb05 f000 	mul.w	r0, r5, r0
 8015b58:	f7eb f8d8 	bl	8000d0c <__aeabi_i2f>
 8015b5c:	494f      	ldr	r1, [pc, #316]	; (8015c9c <MEMS_runMagCal+0x101c>)
 8015b5e:	f7eb f929 	bl	8000db4 <__aeabi_fmul>
 8015b62:	4681      	mov	r9, r0
 8015b64:	f9bd 00ba 	ldrsh.w	r0, [sp, #186]	; 0xba
 8015b68:	f8ca 9078 	str.w	r9, [sl, #120]	; 0x78
 8015b6c:	f7eb f8ce 	bl	8000d0c <__aeabi_i2f>
 8015b70:	4603      	mov	r3, r0
 8015b72:	9003      	str	r0, [sp, #12]
 8015b74:	f8bd 00c0 	ldrh.w	r0, [sp, #192]	; 0xc0
 8015b78:	f8ca 3064 	str.w	r3, [sl, #100]	; 0x64
 8015b7c:	fb05 f000 	mul.w	r0, r5, r0
 8015b80:	f7eb f8c4 	bl	8000d0c <__aeabi_i2f>
 8015b84:	4945      	ldr	r1, [pc, #276]	; (8015c9c <MEMS_runMagCal+0x101c>)
 8015b86:	f7eb f915 	bl	8000db4 <__aeabi_fmul>
 8015b8a:	23ff      	movs	r3, #255	; 0xff
 8015b8c:	f88a 3012 	strb.w	r3, [sl, #18]
 8015b90:	9b02      	ldr	r3, [sp, #8]
 8015b92:	4680      	mov	r8, r0
 8015b94:	f8ca 4008 	str.w	r4, [sl, #8]
 8015b98:	f8ca 0088 	str.w	r0, [sl, #136]	; 0x88
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	f000 87a3 	beq.w	8016ae8 <MEMS_runMagCal+0x1e68>
 8015ba2:	9b08      	ldr	r3, [sp, #32]
 8015ba4:	493e      	ldr	r1, [pc, #248]	; (8015ca0 <MEMS_runMagCal+0x1020>)
 8015ba6:	685b      	ldr	r3, [r3, #4]
 8015ba8:	2600      	movs	r6, #0
 8015baa:	4618      	mov	r0, r3
 8015bac:	930c      	str	r3, [sp, #48]	; 0x30
 8015bae:	f7eb f901 	bl	8000db4 <__aeabi_fmul>
 8015bb2:	f89a 308d 	ldrb.w	r3, [sl, #141]	; 0x8d
 8015bb6:	9008      	str	r0, [sp, #32]
 8015bb8:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8015bbc:	f04f 35ff 	mov.w	r5, #4294967295
 8015bc0:	4698      	mov	r8, r3
 8015bc2:	4630      	mov	r0, r6
 8015bc4:	f89a b011 	ldrb.w	fp, [sl, #17]
 8015bc8:	fb90 f4f8 	sdiv	r4, r0, r8
 8015bcc:	1c69      	adds	r1, r5, #1
 8015bce:	fb91 f5fb 	sdiv	r5, r1, fp
 8015bd2:	fb08 0414 	mls	r4, r8, r4, r0
 8015bd6:	b2e4      	uxtb	r4, r4
 8015bd8:	eb0a 04c4 	add.w	r4, sl, r4, lsl #3
 8015bdc:	f9b4 00ae 	ldrsh.w	r0, [r4, #174]	; 0xae
 8015be0:	fb0b 1515 	mls	r5, fp, r5, r1
 8015be4:	f7eb f892 	bl	8000d0c <__aeabi_i2f>
 8015be8:	9907      	ldr	r1, [sp, #28]
 8015bea:	f7ea ffd9 	bl	8000ba0 <__aeabi_fsub>
 8015bee:	9904      	ldr	r1, [sp, #16]
 8015bf0:	f7eb f8e0 	bl	8000db4 <__aeabi_fmul>
 8015bf4:	4607      	mov	r7, r0
 8015bf6:	f9b4 00b0 	ldrsh.w	r0, [r4, #176]	; 0xb0
 8015bfa:	f7eb f887 	bl	8000d0c <__aeabi_i2f>
 8015bfe:	9906      	ldr	r1, [sp, #24]
 8015c00:	f7ea ffce 	bl	8000ba0 <__aeabi_fsub>
 8015c04:	4649      	mov	r1, r9
 8015c06:	f7eb f8d5 	bl	8000db4 <__aeabi_fmul>
 8015c0a:	4601      	mov	r1, r0
 8015c0c:	f9b4 00b2 	ldrsh.w	r0, [r4, #178]	; 0xb2
 8015c10:	460c      	mov	r4, r1
 8015c12:	f7eb f87b 	bl	8000d0c <__aeabi_i2f>
 8015c16:	9903      	ldr	r1, [sp, #12]
 8015c18:	f7ea ffc2 	bl	8000ba0 <__aeabi_fsub>
 8015c1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015c1e:	f7eb f8c9 	bl	8000db4 <__aeabi_fmul>
 8015c22:	4684      	mov	ip, r0
 8015c24:	4639      	mov	r1, r7
 8015c26:	4638      	mov	r0, r7
 8015c28:	4667      	mov	r7, ip
 8015c2a:	f7eb f8c3 	bl	8000db4 <__aeabi_fmul>
 8015c2e:	4621      	mov	r1, r4
 8015c30:	4604      	mov	r4, r0
 8015c32:	4608      	mov	r0, r1
 8015c34:	f7eb f8be 	bl	8000db4 <__aeabi_fmul>
 8015c38:	4601      	mov	r1, r0
 8015c3a:	4620      	mov	r0, r4
 8015c3c:	f7ea ffb2 	bl	8000ba4 <__addsf3>
 8015c40:	4639      	mov	r1, r7
 8015c42:	4604      	mov	r4, r0
 8015c44:	4638      	mov	r0, r7
 8015c46:	f7eb f8b5 	bl	8000db4 <__aeabi_fmul>
 8015c4a:	4601      	mov	r1, r0
 8015c4c:	4620      	mov	r0, r4
 8015c4e:	f7ea ffa9 	bl	8000ba4 <__addsf3>
 8015c52:	f002 fdeb 	bl	801882c <sqrtf>
 8015c56:	9908      	ldr	r1, [sp, #32]
 8015c58:	f7eb f8ac 	bl	8000db4 <__aeabi_fmul>
 8015c5c:	f7eb faac 	bl	80011b8 <__aeabi_f2uiz>
 8015c60:	b26d      	sxtb	r5, r5
 8015c62:	9b02      	ldr	r3, [sp, #8]
 8015c64:	3601      	adds	r6, #1
 8015c66:	b236      	sxth	r6, r6
 8015c68:	f105 0408 	add.w	r4, r5, #8
 8015c6c:	eb0a 0444 	add.w	r4, sl, r4, lsl #1
 8015c70:	429e      	cmp	r6, r3
 8015c72:	80a0      	strh	r0, [r4, #4]
 8015c74:	4630      	mov	r0, r6
 8015c76:	dba7      	blt.n	8015bc8 <MEMS_runMagCal+0xf48>
 8015c78:	f88a 5012 	strb.w	r5, [sl, #18]
 8015c7c:	e012      	b.n	8015ca4 <MEMS_runMagCal+0x1024>
 8015c7e:	bf00      	nop
 8015c80:	3f266666 	.word	0x3f266666
 8015c84:	3eb33333 	.word	0x3eb33333
 8015c88:	3f19999a 	.word	0x3f19999a
 8015c8c:	3a83126f 	.word	0x3a83126f
 8015c90:	3c23d70a 	.word	0x3c23d70a
 8015c94:	41200000 	.word	0x41200000
 8015c98:	447a0000 	.word	0x447a0000
 8015c9c:	358637bd 	.word	0x358637bd
 8015ca0:	42c80000 	.word	0x42c80000
 8015ca4:	455b      	cmp	r3, fp
 8015ca6:	bf28      	it	cs
 8015ca8:	465b      	movcs	r3, fp
 8015caa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8015cac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015cae:	9501      	str	r5, [sp, #4]
 8015cb0:	f88a 3010 	strb.w	r3, [sl, #16]
 8015cb4:	ab19      	add	r3, sp, #100	; 0x64
 8015cb6:	9300      	str	r3, [sp, #0]
 8015cb8:	f10d 01b6 	add.w	r1, sp, #182	; 0xb6
 8015cbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015cbe:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015cc0:	f7f7 fa6e 	bl	800d1a0 <getMagStats.constprop.0>
 8015cc4:	4975      	ldr	r1, [pc, #468]	; (8015e9c <MEMS_runMagCal+0x121c>)
 8015cc6:	9819      	ldr	r0, [sp, #100]	; 0x64
 8015cc8:	f7ea ff6a 	bl	8000ba0 <__aeabi_fsub>
 8015ccc:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8015cd0:	4620      	mov	r0, r4
 8015cd2:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8015cd6:	f7eb fa0b 	bl	80010f0 <__aeabi_fcmplt>
 8015cda:	682d      	ldr	r5, [r5, #0]
 8015cdc:	b138      	cbz	r0, 8015cee <MEMS_runMagCal+0x106e>
 8015cde:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8015ce2:	4628      	mov	r0, r5
 8015ce4:	f7eb fa04 	bl	80010f0 <__aeabi_fcmplt>
 8015ce8:	2800      	cmp	r0, #0
 8015cea:	f040 86f9 	bne.w	8016ae0 <MEMS_runMagCal+0x1e60>
 8015cee:	4620      	mov	r0, r4
 8015cf0:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8015cf4:	f7eb f9fc 	bl	80010f0 <__aeabi_fcmplt>
 8015cf8:	b148      	cbz	r0, 8015d0e <MEMS_runMagCal+0x108e>
 8015cfa:	4628      	mov	r0, r5
 8015cfc:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8015d00:	f7eb f9f6 	bl	80010f0 <__aeabi_fcmplt>
 8015d04:	2800      	cmp	r0, #0
 8015d06:	9b05      	ldr	r3, [sp, #20]
 8015d08:	bf18      	it	ne
 8015d0a:	2302      	movne	r3, #2
 8015d0c:	9305      	str	r3, [sp, #20]
 8015d0e:	f89d 30b4 	ldrb.w	r3, [sp, #180]	; 0xb4
 8015d12:	9a05      	ldr	r2, [sp, #20]
 8015d14:	2bc8      	cmp	r3, #200	; 0xc8
 8015d16:	f88a 2058 	strb.w	r2, [sl, #88]	; 0x58
 8015d1a:	d902      	bls.n	8015d22 <MEMS_runMagCal+0x10a2>
 8015d1c:	2302      	movs	r3, #2
 8015d1e:	f88a 3058 	strb.w	r3, [sl, #88]	; 0x58
 8015d22:	f20d 5d1c 	addw	sp, sp, #1308	; 0x51c
 8015d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d2a:	f8da 0090 	ldr.w	r0, [sl, #144]	; 0x90
 8015d2e:	4281      	cmp	r1, r0
 8015d30:	f4fe afd2 	bcc.w	8014cd8 <MEMS_runMagCal+0x58>
 8015d34:	f89a 208c 	ldrb.w	r2, [sl, #140]	; 0x8c
 8015d38:	2a00      	cmp	r2, #0
 8015d3a:	f47e afe1 	bne.w	8014d00 <MEMS_runMagCal+0x80>
 8015d3e:	f7fe bfd5 	b.w	8014cec <MEMS_runMagCal+0x6c>
 8015d42:	2602      	movs	r6, #2
 8015d44:	2300      	movs	r3, #0
 8015d46:	930c      	str	r3, [sp, #48]	; 0x30
 8015d48:	9305      	str	r3, [sp, #20]
 8015d4a:	4628      	mov	r0, r5
 8015d4c:	4954      	ldr	r1, [pc, #336]	; (8015ea0 <MEMS_runMagCal+0x1220>)
 8015d4e:	f7eb f9cf 	bl	80010f0 <__aeabi_fcmplt>
 8015d52:	2800      	cmp	r0, #0
 8015d54:	f000 81b3 	beq.w	80160be <MEMS_runMagCal+0x143e>
 8015d58:	4628      	mov	r0, r5
 8015d5a:	4952      	ldr	r1, [pc, #328]	; (8015ea4 <MEMS_runMagCal+0x1224>)
 8015d5c:	f7eb f82a 	bl	8000db4 <__aeabi_fmul>
 8015d60:	f89a 3058 	ldrb.w	r3, [sl, #88]	; 0x58
 8015d64:	4607      	mov	r7, r0
 8015d66:	2b01      	cmp	r3, #1
 8015d68:	9019      	str	r0, [sp, #100]	; 0x64
 8015d6a:	d90f      	bls.n	8015d8c <MEMS_runMagCal+0x110c>
 8015d6c:	f7eb fa24 	bl	80011b8 <__aeabi_f2uiz>
 8015d70:	b280      	uxth	r0, r0
 8015d72:	28c7      	cmp	r0, #199	; 0xc7
 8015d74:	f200 87a3 	bhi.w	8016cbe <MEMS_runMagCal+0x203e>
 8015d78:	2300      	movs	r3, #0
 8015d7a:	22ff      	movs	r2, #255	; 0xff
 8015d7c:	f88a 3058 	strb.w	r3, [sl, #88]	; 0x58
 8015d80:	f88a 308c 	strb.w	r3, [sl, #140]	; 0x8c
 8015d84:	f88a 3040 	strb.w	r3, [sl, #64]	; 0x40
 8015d88:	f88a 208e 	strb.w	r2, [sl, #142]	; 0x8e
 8015d8c:	2e00      	cmp	r6, #0
 8015d8e:	f040 81a0 	bne.w	80160d2 <MEMS_runMagCal+0x1452>
 8015d92:	f99a 3012 	ldrsb.w	r3, [sl, #18]
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	f2c0 8374 	blt.w	8016484 <MEMS_runMagCal+0x1804>
 8015d9c:	f89a 5011 	ldrb.w	r5, [sl, #17]
 8015da0:	1c5a      	adds	r2, r3, #1
 8015da2:	fbb2 f3f5 	udiv	r3, r2, r5
 8015da6:	fb05 2313 	mls	r3, r5, r3, r2
 8015daa:	b25b      	sxtb	r3, r3
 8015dac:	4698      	mov	r8, r3
 8015dae:	f89a 4010 	ldrb.w	r4, [sl, #16]
 8015db2:	4638      	mov	r0, r7
 8015db4:	3401      	adds	r4, #1
 8015db6:	42ac      	cmp	r4, r5
 8015db8:	bfa8      	it	ge
 8015dba:	462c      	movge	r4, r5
 8015dbc:	fa5f f984 	uxtb.w	r9, r4
 8015dc0:	f88a 3012 	strb.w	r3, [sl, #18]
 8015dc4:	f88a 9010 	strb.w	r9, [sl, #16]
 8015dc8:	f002 fc42 	bl	8018650 <roundf>
 8015dcc:	f7eb f9f4 	bl	80011b8 <__aeabi_f2uiz>
 8015dd0:	f108 0708 	add.w	r7, r8, #8
 8015dd4:	eb0a 0747 	add.w	r7, sl, r7, lsl #1
 8015dd8:	80b8      	strh	r0, [r7, #4]
 8015dda:	2e00      	cmp	r6, #0
 8015ddc:	f040 8179 	bne.w	80160d2 <MEMS_runMagCal+0x1452>
 8015de0:	f8da 700c 	ldr.w	r7, [sl, #12]
 8015de4:	b127      	cbz	r7, 8015df0 <MEMS_runMagCal+0x1170>
 8015de6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015de8:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8015dec:	429a      	cmp	r2, r3
 8015dee:	d398      	bcc.n	8015d22 <MEMS_runMagCal+0x10a2>
 8015df0:	9b05      	ldr	r3, [sp, #20]
 8015df2:	2b01      	cmp	r3, #1
 8015df4:	d095      	beq.n	8015d22 <MEMS_runMagCal+0x10a2>
 8015df6:	f89a b058 	ldrb.w	fp, [sl, #88]	; 0x58
 8015dfa:	f1ab 0302 	sub.w	r3, fp, #2
 8015dfe:	2b01      	cmp	r3, #1
 8015e00:	f240 8181 	bls.w	8016106 <MEMS_runMagCal+0x1486>
 8015e04:	9e08      	ldr	r6, [sp, #32]
 8015e06:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8015e0a:	6875      	ldr	r5, [r6, #4]
 8015e0c:	4629      	mov	r1, r5
 8015e0e:	f7eb f885 	bl	8000f1c <__aeabi_fdiv>
 8015e12:	4925      	ldr	r1, [pc, #148]	; (8015ea8 <MEMS_runMagCal+0x1228>)
 8015e14:	4604      	mov	r4, r0
 8015e16:	f7ea ffcd 	bl	8000db4 <__aeabi_fmul>
 8015e1a:	4924      	ldr	r1, [pc, #144]	; (8015eac <MEMS_runMagCal+0x122c>)
 8015e1c:	9011      	str	r0, [sp, #68]	; 0x44
 8015e1e:	f7ea ffc9 	bl	8000db4 <__aeabi_fmul>
 8015e22:	f7eb f9c9 	bl	80011b8 <__aeabi_f2uiz>
 8015e26:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015e28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015e2a:	f9b6 6002 	ldrsh.w	r6, [r6, #2]
 8015e2e:	f8da 3090 	ldr.w	r3, [sl, #144]	; 0x90
 8015e32:	fb02 1606 	mla	r6, r2, r6, r1
 8015e36:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
 8015e3a:	3210      	adds	r2, #16
 8015e3c:	f10a 018c 	add.w	r1, sl, #140	; 0x8c
 8015e40:	42b2      	cmp	r2, r6
 8015e42:	fa1f f980 	uxth.w	r9, r0
 8015e46:	910e      	str	r1, [sp, #56]	; 0x38
 8015e48:	f080 8150 	bcs.w	80160ec <MEMS_runMagCal+0x146c>
 8015e4c:	f242 3228 	movw	r2, #9000	; 0x2328
 8015e50:	f89a 008c 	ldrb.w	r0, [sl, #140]	; 0x8c
 8015e54:	4296      	cmp	r6, r2
 8015e56:	f89a 708d 	ldrb.w	r7, [sl, #141]	; 0x8d
 8015e5a:	bf16      	itet	ne
 8015e5c:	f5a6 560c 	subne.w	r6, r6, #8960	; 0x2300
 8015e60:	2600      	moveq	r6, #0
 8015e62:	3e28      	subne	r6, #40	; 0x28
 8015e64:	42b8      	cmp	r0, r7
 8015e66:	f99a 108e 	ldrsb.w	r1, [sl, #142]	; 0x8e
 8015e6a:	f000 83c5 	beq.w	80165f8 <MEMS_runMagCal+0x1978>
 8015e6e:	3101      	adds	r1, #1
 8015e70:	1a0a      	subs	r2, r1, r0
 8015e72:	fb92 f1f7 	sdiv	r1, r2, r7
 8015e76:	fb07 2111 	mls	r1, r7, r1, r2
 8015e7a:	2900      	cmp	r1, #0
 8015e7c:	bfb8      	it	lt
 8015e7e:	19c9      	addlt	r1, r1, r7
 8015e80:	b209      	sxth	r1, r1
 8015e82:	2800      	cmp	r0, #0
 8015e84:	d039      	beq.n	8015efa <MEMS_runMagCal+0x127a>
 8015e86:	3801      	subs	r0, #1
 8015e88:	b280      	uxth	r0, r0
 8015e8a:	3001      	adds	r0, #1
 8015e8c:	eba3 0c06 	sub.w	ip, r3, r6
 8015e90:	f8dd e014 	ldr.w	lr, [sp, #20]
 8015e94:	4408      	add	r0, r1
 8015e96:	fa1f fc8c 	uxth.w	ip, ip
 8015e9a:	e00c      	b.n	8015eb6 <MEMS_runMagCal+0x1236>
 8015e9c:	423c0000 	.word	0x423c0000
 8015ea0:	4423d666 	.word	0x4423d666
 8015ea4:	42c80000 	.word	0x42c80000
 8015ea8:	40400000 	.word	0x40400000
 8015eac:	427c0000 	.word	0x427c0000
 8015eb0:	3101      	adds	r1, #1
 8015eb2:	4288      	cmp	r0, r1
 8015eb4:	d01b      	beq.n	8015eee <MEMS_runMagCal+0x126e>
 8015eb6:	fb91 f3f7 	sdiv	r3, r1, r7
 8015eba:	fb07 1313 	mls	r3, r7, r3, r1
 8015ebe:	b2db      	uxtb	r3, r3
 8015ec0:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 8015ec4:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8015ec8:	4462      	add	r2, ip
 8015eca:	b212      	sxth	r2, r2
 8015ecc:	2a00      	cmp	r2, #0
 8015ece:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8015ed2:	daed      	bge.n	8015eb0 <MEMS_runMagCal+0x1230>
 8015ed4:	f89a 308c 	ldrb.w	r3, [sl, #140]	; 0x8c
 8015ed8:	1e5a      	subs	r2, r3, #1
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	f000 82cf 	beq.w	801647e <MEMS_runMagCal+0x17fe>
 8015ee0:	3101      	adds	r1, #1
 8015ee2:	4288      	cmp	r0, r1
 8015ee4:	f04f 0e01 	mov.w	lr, #1
 8015ee8:	f88a 208c 	strb.w	r2, [sl, #140]	; 0x8c
 8015eec:	d1e3      	bne.n	8015eb6 <MEMS_runMagCal+0x1236>
 8015eee:	f1be 0f01 	cmp.w	lr, #1
 8015ef2:	f000 85ad 	beq.w	8016a50 <MEMS_runMagCal+0x1dd0>
 8015ef6:	f89a 008c 	ldrb.w	r0, [sl, #140]	; 0x8c
 8015efa:	f8ca 6090 	str.w	r6, [sl, #144]	; 0x90
 8015efe:	2800      	cmp	r0, #0
 8015f00:	f000 80fa 	beq.w	80160f8 <MEMS_runMagCal+0x1478>
 8015f04:	f99a 308e 	ldrsb.w	r3, [sl, #142]	; 0x8e
 8015f08:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8015f0a:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 8015f0e:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	; 0xac
 8015f12:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8015f16:	3308      	adds	r3, #8
 8015f18:	441e      	add	r6, r3
 8015f1a:	42b2      	cmp	r2, r6
 8015f1c:	f200 8374 	bhi.w	8016608 <MEMS_runMagCal+0x1988>
 8015f20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015f22:	b923      	cbnz	r3, 8015f2e <MEMS_runMagCal+0x12ae>
 8015f24:	f89a 308c 	ldrb.w	r3, [sl, #140]	; 0x8c
 8015f28:	2b0a      	cmp	r3, #10
 8015f2a:	f240 80e9 	bls.w	8016100 <MEMS_runMagCal+0x1480>
 8015f2e:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 8015f32:	9304      	str	r3, [sp, #16]
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	f000 80e3 	beq.w	8016100 <MEMS_runMagCal+0x1480>
 8015f3a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8015f3c:	4631      	mov	r1, r6
 8015f3e:	4630      	mov	r0, r6
 8015f40:	f7ea ff38 	bl	8000db4 <__aeabi_fmul>
 8015f44:	49a8      	ldr	r1, [pc, #672]	; (80161e8 <MEMS_runMagCal+0x1568>)
 8015f46:	f7ea ff35 	bl	8000db4 <__aeabi_fmul>
 8015f4a:	4603      	mov	r3, r0
 8015f4c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8015f50:	4630      	mov	r0, r6
 8015f52:	9310      	str	r3, [sp, #64]	; 0x40
 8015f54:	f7ea ff2e 	bl	8000db4 <__aeabi_fmul>
 8015f58:	4603      	mov	r3, r0
 8015f5a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8015f5e:	4620      	mov	r0, r4
 8015f60:	9316      	str	r3, [sp, #88]	; 0x58
 8015f62:	f7ea ff27 	bl	8000db4 <__aeabi_fmul>
 8015f66:	4603      	mov	r3, r0
 8015f68:	2400      	movs	r4, #0
 8015f6a:	4628      	mov	r0, r5
 8015f6c:	499f      	ldr	r1, [pc, #636]	; (80161ec <MEMS_runMagCal+0x156c>)
 8015f6e:	9303      	str	r3, [sp, #12]
 8015f70:	f7ea ff20 	bl	8000db4 <__aeabi_fmul>
 8015f74:	46a3      	mov	fp, r4
 8015f76:	9b05      	ldr	r3, [sp, #20]
 8015f78:	9002      	str	r0, [sp, #8]
 8015f7a:	930f      	str	r3, [sp, #60]	; 0x3c
 8015f7c:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8015f7e:	f817 303b 	ldrb.w	r3, [r7, fp, lsl #3]
 8015f82:	eb07 07cb 	add.w	r7, r7, fp, lsl #3
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	f000 816a 	beq.w	8016260 <MEMS_runMagCal+0x15e0>
 8015f8c:	f9b7 5002 	ldrsh.w	r5, [r7, #2]
 8015f90:	4628      	mov	r0, r5
 8015f92:	f7ea febb 	bl	8000d0c <__aeabi_i2f>
 8015f96:	9903      	ldr	r1, [sp, #12]
 8015f98:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8015f9c:	f7eb f8a8 	bl	80010f0 <__aeabi_fcmplt>
 8015fa0:	f9b7 6004 	ldrsh.w	r6, [r7, #4]
 8015fa4:	2800      	cmp	r0, #0
 8015fa6:	f040 81db 	bne.w	8016360 <MEMS_runMagCal+0x16e0>
 8015faa:	f9b7 7006 	ldrsh.w	r7, [r7, #6]
 8015fae:	f89a 808c 	ldrb.w	r8, [sl, #140]	; 0x8c
 8015fb2:	f1b8 0f00 	cmp.w	r8, #0
 8015fb6:	f000 81f1 	beq.w	801639c <MEMS_runMagCal+0x171c>
 8015fba:	f9ba 03a6 	ldrsh.w	r0, [sl, #934]	; 0x3a6
 8015fbe:	f9ba 33a4 	ldrsh.w	r3, [sl, #932]	; 0x3a4
 8015fc2:	1b80      	subs	r0, r0, r6
 8015fc4:	fb00 f200 	mul.w	r2, r0, r0
 8015fc8:	1b58      	subs	r0, r3, r5
 8015fca:	fb00 2000 	mla	r0, r0, r0, r2
 8015fce:	f9ba 33a8 	ldrsh.w	r3, [sl, #936]	; 0x3a8
 8015fd2:	1bdb      	subs	r3, r3, r7
 8015fd4:	fb03 0003 	mla	r0, r3, r3, r0
 8015fd8:	f7ea fe98 	bl	8000d0c <__aeabi_i2f>
 8015fdc:	4601      	mov	r1, r0
 8015fde:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015fe0:	f7eb f8a4 	bl	800112c <__aeabi_fcmpgt>
 8015fe4:	2800      	cmp	r0, #0
 8015fe6:	f040 813b 	bne.w	8016260 <MEMS_runMagCal+0x15e0>
 8015fea:	fb95 f0f9 	sdiv	r0, r5, r9
 8015fee:	fb09 5010 	mls	r0, r9, r0, r5
 8015ff2:	2800      	cmp	r0, #0
 8015ff4:	bfb8      	it	lt
 8015ff6:	4448      	addlt	r0, r9
 8015ff8:	b200      	sxth	r0, r0
 8015ffa:	f7ea fe87 	bl	8000d0c <__aeabi_i2f>
 8015ffe:	9902      	ldr	r1, [sp, #8]
 8016000:	f7ea fed8 	bl	8000db4 <__aeabi_fmul>
 8016004:	f002 fb24 	bl	8018650 <roundf>
 8016008:	f7eb f8d6 	bl	80011b8 <__aeabi_f2uiz>
 801600c:	fb96 f3f9 	sdiv	r3, r6, r9
 8016010:	fb09 6313 	mls	r3, r9, r3, r6
 8016014:	2b00      	cmp	r3, #0
 8016016:	bfb8      	it	lt
 8016018:	444b      	addlt	r3, r9
 801601a:	b2c2      	uxtb	r2, r0
 801601c:	b218      	sxth	r0, r3
 801601e:	9207      	str	r2, [sp, #28]
 8016020:	f7ea fe74 	bl	8000d0c <__aeabi_i2f>
 8016024:	9902      	ldr	r1, [sp, #8]
 8016026:	f7ea fec5 	bl	8000db4 <__aeabi_fmul>
 801602a:	f002 fb11 	bl	8018650 <roundf>
 801602e:	f7eb f8c3 	bl	80011b8 <__aeabi_f2uiz>
 8016032:	fb97 f3f9 	sdiv	r3, r7, r9
 8016036:	fb09 7313 	mls	r3, r9, r3, r7
 801603a:	2b00      	cmp	r3, #0
 801603c:	bfb8      	it	lt
 801603e:	444b      	addlt	r3, r9
 8016040:	b2c2      	uxtb	r2, r0
 8016042:	b218      	sxth	r0, r3
 8016044:	9209      	str	r2, [sp, #36]	; 0x24
 8016046:	f7ea fe61 	bl	8000d0c <__aeabi_i2f>
 801604a:	9902      	ldr	r1, [sp, #8]
 801604c:	f7ea feb2 	bl	8000db4 <__aeabi_fmul>
 8016050:	f002 fafe 	bl	8018650 <roundf>
 8016054:	f7eb f8b0 	bl	80011b8 <__aeabi_f2uiz>
 8016058:	9a07      	ldr	r2, [sp, #28]
 801605a:	b2c3      	uxtb	r3, r0
 801605c:	2a1f      	cmp	r2, #31
 801605e:	930a      	str	r3, [sp, #40]	; 0x28
 8016060:	f8da 1094 	ldr.w	r1, [sl, #148]	; 0x94
 8016064:	f8da 3098 	ldr.w	r3, [sl, #152]	; 0x98
 8016068:	f240 8204 	bls.w	8016474 <MEMS_runMagCal+0x17f4>
 801606c:	2301      	movs	r3, #1
 801606e:	3a20      	subs	r2, #32
 8016070:	fa03 f202 	lsl.w	r2, r3, r2
 8016074:	400a      	ands	r2, r1
 8016076:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016078:	e9da 0327 	ldrd	r0, r3, [sl, #156]	; 0x9c
 801607c:	291f      	cmp	r1, #31
 801607e:	f240 81ea 	bls.w	8016456 <MEMS_runMagCal+0x17d6>
 8016082:	2301      	movs	r3, #1
 8016084:	3920      	subs	r1, #32
 8016086:	fa03 f101 	lsl.w	r1, r3, r1
 801608a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801608c:	4001      	ands	r1, r0
 801608e:	2b1f      	cmp	r3, #31
 8016090:	e9da 0429 	ldrd	r0, r4, [sl, #164]	; 0xa4
 8016094:	f240 81e9 	bls.w	801646a <MEMS_runMagCal+0x17ea>
 8016098:	2001      	movs	r0, #1
 801609a:	3b20      	subs	r3, #32
 801609c:	fa00 f303 	lsl.w	r3, r0, r3
 80160a0:	4023      	ands	r3, r4
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d173      	bne.n	801618e <MEMS_runMagCal+0x150e>
 80160a6:	ea52 0301 	orrs.w	r3, r2, r1
 80160aa:	d173      	bne.n	8016194 <MEMS_runMagCal+0x1514>
 80160ac:	f89a 308d 	ldrb.w	r3, [sl, #141]	; 0x8d
 80160b0:	461a      	mov	r2, r3
 80160b2:	9312      	str	r3, [sp, #72]	; 0x48
 80160b4:	f99a 308e 	ldrsb.w	r3, [sl, #142]	; 0x8e
 80160b8:	3301      	adds	r3, #1
 80160ba:	9313      	str	r3, [sp, #76]	; 0x4c
 80160bc:	e22c      	b.n	8016518 <MEMS_runMagCal+0x1898>
 80160be:	f89a 3058 	ldrb.w	r3, [sl, #88]	; 0x58
 80160c2:	4f4b      	ldr	r7, [pc, #300]	; (80161f0 <MEMS_runMagCal+0x1570>)
 80160c4:	2b01      	cmp	r3, #1
 80160c6:	9719      	str	r7, [sp, #100]	; 0x64
 80160c8:	f63f ae56 	bhi.w	8015d78 <MEMS_runMagCal+0x10f8>
 80160cc:	2e00      	cmp	r6, #0
 80160ce:	f43f ae60 	beq.w	8015d92 <MEMS_runMagCal+0x1112>
 80160d2:	2200      	movs	r2, #0
 80160d4:	23ff      	movs	r3, #255	; 0xff
 80160d6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80160d8:	f88a 208c 	strb.w	r2, [sl, #140]	; 0x8c
 80160dc:	f8ca 100c 	str.w	r1, [sl, #12]
 80160e0:	f88a 308e 	strb.w	r3, [sl, #142]	; 0x8e
 80160e4:	f20d 5d1c 	addw	sp, sp, #1308	; 0x51c
 80160e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160ec:	f89a 008c 	ldrb.w	r0, [sl, #140]	; 0x8c
 80160f0:	461e      	mov	r6, r3
 80160f2:	2800      	cmp	r0, #0
 80160f4:	f47f af06 	bne.w	8015f04 <MEMS_runMagCal+0x1284>
 80160f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	f47f af17 	bne.w	8015f2e <MEMS_runMagCal+0x12ae>
 8016100:	9b05      	ldr	r3, [sp, #20]
 8016102:	930f      	str	r3, [sp, #60]	; 0x3c
 8016104:	e0b5      	b.n	8016272 <MEMS_runMagCal+0x15f2>
 8016106:	45a9      	cmp	r9, r5
 8016108:	f000 8422 	beq.w	8016950 <MEMS_runMagCal+0x1cd0>
 801610c:	f1bb 0f03 	cmp.w	fp, #3
 8016110:	f47f ae78 	bne.w	8015e04 <MEMS_runMagCal+0x1184>
 8016114:	f8da 0004 	ldr.w	r0, [sl, #4]
 8016118:	f7ea fdf4 	bl	8000d04 <__aeabi_ui2f>
 801611c:	4604      	mov	r4, r0
 801611e:	4638      	mov	r0, r7
 8016120:	f7ea fdf0 	bl	8000d04 <__aeabi_ui2f>
 8016124:	4933      	ldr	r1, [pc, #204]	; (80161f4 <MEMS_runMagCal+0x1574>)
 8016126:	f7ea fe45 	bl	8000db4 <__aeabi_fmul>
 801612a:	4601      	mov	r1, r0
 801612c:	4620      	mov	r0, r4
 801612e:	f7ea fffd 	bl	800112c <__aeabi_fcmpgt>
 8016132:	2800      	cmp	r0, #0
 8016134:	f43f ae66 	beq.w	8015e04 <MEMS_runMagCal+0x1184>
 8016138:	f8da 5008 	ldr.w	r5, [sl, #8]
 801613c:	2d00      	cmp	r5, #0
 801613e:	f43f ae61 	beq.w	8015e04 <MEMS_runMagCal+0x1184>
 8016142:	980d      	ldr	r0, [sp, #52]	; 0x34
 8016144:	f7ea fdde 	bl	8000d04 <__aeabi_ui2f>
 8016148:	492a      	ldr	r1, [pc, #168]	; (80161f4 <MEMS_runMagCal+0x1574>)
 801614a:	f7ea fe33 	bl	8000db4 <__aeabi_fmul>
 801614e:	4604      	mov	r4, r0
 8016150:	f105 000a 	add.w	r0, r5, #10
 8016154:	f7ea fdd6 	bl	8000d04 <__aeabi_ui2f>
 8016158:	4601      	mov	r1, r0
 801615a:	4620      	mov	r0, r4
 801615c:	f7ea ffe6 	bl	800112c <__aeabi_fcmpgt>
 8016160:	2800      	cmp	r0, #0
 8016162:	f43f ae4f 	beq.w	8015e04 <MEMS_runMagCal+0x1184>
 8016166:	f89a 3001 	ldrb.w	r3, [sl, #1]
 801616a:	2b00      	cmp	r3, #0
 801616c:	f47f ae4a 	bne.w	8015e04 <MEMS_runMagCal+0x1184>
 8016170:	f89a 3040 	ldrb.w	r3, [sl, #64]	; 0x40
 8016174:	2b00      	cmp	r3, #0
 8016176:	f43f add4 	beq.w	8015d22 <MEMS_runMagCal+0x10a2>
 801617a:	f89a 3048 	ldrb.w	r3, [sl, #72]	; 0x48
 801617e:	2bff      	cmp	r3, #255	; 0xff
 8016180:	f47f adcf 	bne.w	8015d22 <MEMS_runMagCal+0x10a2>
 8016184:	e63e      	b.n	8015e04 <MEMS_runMagCal+0x1184>
 8016186:	900c      	str	r0, [sp, #48]	; 0x30
 8016188:	9005      	str	r0, [sp, #20]
 801618a:	2600      	movs	r6, #0
 801618c:	e5dd      	b.n	8015d4a <MEMS_runMagCal+0x10ca>
 801618e:	b10a      	cbz	r2, 8016194 <MEMS_runMagCal+0x1514>
 8016190:	2900      	cmp	r1, #0
 8016192:	d165      	bne.n	8016260 <MEMS_runMagCal+0x15e0>
 8016194:	f89a 308d 	ldrb.w	r3, [sl, #141]	; 0x8d
 8016198:	461a      	mov	r2, r3
 801619a:	4590      	cmp	r8, r2
 801619c:	9312      	str	r3, [sp, #72]	; 0x48
 801619e:	f99a 308e 	ldrsb.w	r3, [sl, #142]	; 0x8e
 80161a2:	f000 81f7 	beq.w	8016594 <MEMS_runMagCal+0x1914>
 80161a6:	4611      	mov	r1, r2
 80161a8:	3301      	adds	r3, #1
 80161aa:	eba3 0208 	sub.w	r2, r3, r8
 80161ae:	9313      	str	r3, [sp, #76]	; 0x4c
 80161b0:	fb92 f3f1 	sdiv	r3, r2, r1
 80161b4:	fb01 2313 	mls	r3, r1, r3, r2
 80161b8:	460a      	mov	r2, r1
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	bfb8      	it	lt
 80161be:	185b      	addlt	r3, r3, r1
 80161c0:	b21b      	sxth	r3, r3
 80161c2:	f108 31ff 	add.w	r1, r8, #4294967295
 80161c6:	b2c9      	uxtb	r1, r1
 80161c8:	3101      	adds	r1, #1
 80161ca:	4419      	add	r1, r3
 80161cc:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 80161d0:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80161d4:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
 80161d8:	4699      	mov	r9, r3
 80161da:	4693      	mov	fp, r2
 80161dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80161e0:	910b      	str	r1, [sp, #44]	; 0x2c
 80161e2:	9506      	str	r5, [sp, #24]
 80161e4:	e00c      	b.n	8016200 <MEMS_runMagCal+0x1580>
 80161e6:	bf00      	nop
 80161e8:	3f666666 	.word	0x3f666666
 80161ec:	3eaaaaab 	.word	0x3eaaaaab
 80161f0:	477fff00 	.word	0x477fff00
 80161f4:	3a83126f 	.word	0x3a83126f
 80161f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80161fa:	4599      	cmp	r9, r3
 80161fc:	f000 8184 	beq.w	8016508 <MEMS_runMagCal+0x1888>
 8016200:	fb99 f4fb 	sdiv	r4, r9, fp
 8016204:	fb0b 9414 	mls	r4, fp, r4, r9
 8016208:	b2e4      	uxtb	r4, r4
 801620a:	eb0a 04c4 	add.w	r4, sl, r4, lsl #3
 801620e:	9b06      	ldr	r3, [sp, #24]
 8016210:	f9b4 00ae 	ldrsh.w	r0, [r4, #174]	; 0xae
 8016214:	f109 0901 	add.w	r9, r9, #1
 8016218:	1a18      	subs	r0, r3, r0
 801621a:	f7ea fd77 	bl	8000d0c <__aeabi_i2f>
 801621e:	f9b4 c0b0 	ldrsh.w	ip, [r4, #176]	; 0xb0
 8016222:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8016226:	eba6 000c 	sub.w	r0, r6, ip
 801622a:	f7ea fd6f 	bl	8000d0c <__aeabi_i2f>
 801622e:	f020 4c00 	bic.w	ip, r0, #2147483648	; 0x80000000
 8016232:	4661      	mov	r1, ip
 8016234:	4628      	mov	r0, r5
 8016236:	f7ea fcb5 	bl	8000ba4 <__addsf3>
 801623a:	f9b4 10b2 	ldrsh.w	r1, [r4, #178]	; 0xb2
 801623e:	4604      	mov	r4, r0
 8016240:	1a78      	subs	r0, r7, r1
 8016242:	f7ea fd63 	bl	8000d0c <__aeabi_i2f>
 8016246:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 801624a:	4620      	mov	r0, r4
 801624c:	f7ea fcaa 	bl	8000ba4 <__addsf3>
 8016250:	4601      	mov	r1, r0
 8016252:	4640      	mov	r0, r8
 8016254:	f7ea ff6a 	bl	800112c <__aeabi_fcmpgt>
 8016258:	2800      	cmp	r0, #0
 801625a:	d0cd      	beq.n	80161f8 <MEMS_runMagCal+0x1578>
 801625c:	e9dd 9b14 	ldrd	r9, fp, [sp, #80]	; 0x50
 8016260:	9b04      	ldr	r3, [sp, #16]
 8016262:	f10b 0b01 	add.w	fp, fp, #1
 8016266:	fa0f fb8b 	sxth.w	fp, fp
 801626a:	459b      	cmp	fp, r3
 801626c:	465c      	mov	r4, fp
 801626e:	f6ff ae85 	blt.w	8015f7c <MEMS_runMagCal+0x12fc>
 8016272:	f89a 3000 	ldrb.w	r3, [sl]
 8016276:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016278:	431a      	orrs	r2, r3
 801627a:	b2d3      	uxtb	r3, r2
 801627c:	f88a 3000 	strb.w	r3, [sl]
 8016280:	2b00      	cmp	r3, #0
 8016282:	f43f ad4e 	beq.w	8015d22 <MEMS_runMagCal+0x10a2>
 8016286:	f89a 308c 	ldrb.w	r3, [sl, #140]	; 0x8c
 801628a:	2b19      	cmp	r3, #25
 801628c:	9307      	str	r3, [sp, #28]
 801628e:	f67f ad48 	bls.w	8015d22 <MEMS_runMagCal+0x10a2>
 8016292:	f8da 3008 	ldr.w	r3, [sl, #8]
 8016296:	9309      	str	r3, [sp, #36]	; 0x24
 8016298:	b123      	cbz	r3, 80162a4 <MEMS_runMagCal+0x1624>
 801629a:	f8da 5004 	ldr.w	r5, [sl, #4]
 801629e:	2d00      	cmp	r5, #0
 80162a0:	f040 8181 	bne.w	80165a6 <MEMS_runMagCal+0x1926>
 80162a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	f040 8340 	bne.w	801692c <MEMS_runMagCal+0x1cac>
 80162ac:	2200      	movs	r2, #0
 80162ae:	f04f 0801 	mov.w	r8, #1
 80162b2:	9808      	ldr	r0, [sp, #32]
 80162b4:	9d05      	ldr	r5, [sp, #20]
 80162b6:	6840      	ldr	r0, [r0, #4]
 80162b8:	4616      	mov	r6, r2
 80162ba:	900a      	str	r0, [sp, #40]	; 0x28
 80162bc:	f8da 0094 	ldr.w	r0, [sl, #148]	; 0x94
 80162c0:	4647      	mov	r7, r8
 80162c2:	9003      	str	r0, [sp, #12]
 80162c4:	f8da 0098 	ldr.w	r0, [sl, #152]	; 0x98
 80162c8:	4629      	mov	r1, r5
 80162ca:	9004      	str	r0, [sp, #16]
 80162cc:	f8da 009c 	ldr.w	r0, [sl, #156]	; 0x9c
 80162d0:	462b      	mov	r3, r5
 80162d2:	e9cd 222c 	strd	r2, r2, [sp, #176]	; 0xb0
 80162d6:	e9cd 222e 	strd	r2, r2, [sp, #184]	; 0xb8
 80162da:	f8da b0a8 	ldr.w	fp, [sl, #168]	; 0xa8
 80162de:	9006      	str	r0, [sp, #24]
 80162e0:	9230      	str	r2, [sp, #192]	; 0xc0
 80162e2:	e014      	b.n	801630e <MEMS_runMagCal+0x168e>
 80162e4:	9a02      	ldr	r2, [sp, #8]
 80162e6:	f1b9 0f00 	cmp.w	r9, #0
 80162ea:	bf18      	it	ne
 80162ec:	3501      	addne	r5, #1
 80162ee:	2c00      	cmp	r4, #0
 80162f0:	bf18      	it	ne
 80162f2:	3301      	addne	r3, #1
 80162f4:	2a00      	cmp	r2, #0
 80162f6:	bf18      	it	ne
 80162f8:	3101      	addne	r1, #1
 80162fa:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
 80162fe:	b2ed      	uxtb	r5, r5
 8016300:	b2db      	uxtb	r3, r3
 8016302:	b2c9      	uxtb	r1, r1
 8016304:	f43e aefe 	beq.w	8015104 <MEMS_runMagCal+0x484>
 8016308:	3601      	adds	r6, #1
 801630a:	fa5f f88e 	uxtb.w	r8, lr
 801630e:	9803      	ldr	r0, [sp, #12]
 8016310:	f1a6 0220 	sub.w	r2, r6, #32
 8016314:	fa07 f202 	lsl.w	r2, r7, r2
 8016318:	ea00 0902 	and.w	r9, r0, r2
 801631c:	9806      	ldr	r0, [sp, #24]
 801631e:	2e1f      	cmp	r6, #31
 8016320:	ea02 0400 	and.w	r4, r2, r0
 8016324:	ea02 020b 	and.w	r2, r2, fp
 8016328:	9202      	str	r2, [sp, #8]
 801632a:	9a04      	ldr	r2, [sp, #16]
 801632c:	fa07 f006 	lsl.w	r0, r7, r6
 8016330:	ea02 0c00 	and.w	ip, r2, r0
 8016334:	f108 0e01 	add.w	lr, r8, #1
 8016338:	d8d4      	bhi.n	80162e4 <MEMS_runMagCal+0x1664>
 801633a:	e9da 4228 	ldrd	r4, r2, [sl, #160]	; 0xa0
 801633e:	4004      	ands	r4, r0
 8016340:	4010      	ands	r0, r2
 8016342:	f1bc 0f00 	cmp.w	ip, #0
 8016346:	bf18      	it	ne
 8016348:	3501      	addne	r5, #1
 801634a:	2c00      	cmp	r4, #0
 801634c:	bf0c      	ite	eq
 801634e:	461c      	moveq	r4, r3
 8016350:	1c5c      	addne	r4, r3, #1
 8016352:	2800      	cmp	r0, #0
 8016354:	bf18      	it	ne
 8016356:	3101      	addne	r1, #1
 8016358:	b2ed      	uxtb	r5, r5
 801635a:	b2e3      	uxtb	r3, r4
 801635c:	b2c9      	uxtb	r1, r1
 801635e:	e7d3      	b.n	8016308 <MEMS_runMagCal+0x1688>
 8016360:	4630      	mov	r0, r6
 8016362:	f7ea fcd3 	bl	8000d0c <__aeabi_i2f>
 8016366:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 801636a:	9803      	ldr	r0, [sp, #12]
 801636c:	f7ea fede 	bl	800112c <__aeabi_fcmpgt>
 8016370:	f9b7 7006 	ldrsh.w	r7, [r7, #6]
 8016374:	2800      	cmp	r0, #0
 8016376:	f43f ae1a 	beq.w	8015fae <MEMS_runMagCal+0x132e>
 801637a:	4638      	mov	r0, r7
 801637c:	f7ea fcc6 	bl	8000d0c <__aeabi_i2f>
 8016380:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 8016384:	9803      	ldr	r0, [sp, #12]
 8016386:	f7ea fed1 	bl	800112c <__aeabi_fcmpgt>
 801638a:	2800      	cmp	r0, #0
 801638c:	f47f af68 	bne.w	8016260 <MEMS_runMagCal+0x15e0>
 8016390:	f89a 808c 	ldrb.w	r8, [sl, #140]	; 0x8c
 8016394:	f1b8 0f00 	cmp.w	r8, #0
 8016398:	f47f ae0f 	bne.w	8015fba <MEMS_runMagCal+0x133a>
 801639c:	f04f 0301 	mov.w	r3, #1
 80163a0:	fb95 f0f9 	sdiv	r0, r5, r9
 80163a4:	f88a 308c 	strb.w	r3, [sl, #140]	; 0x8c
 80163a8:	9b08      	ldr	r3, [sp, #32]
 80163aa:	f88a 808e 	strb.w	r8, [sl, #142]	; 0x8e
 80163ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80163b2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80163b4:	fb09 5010 	mls	r0, r9, r0, r5
 80163b8:	fb04 2403 	mla	r4, r4, r3, r2
 80163bc:	2800      	cmp	r0, #0
 80163be:	bfb8      	it	lt
 80163c0:	4448      	addlt	r0, r9
 80163c2:	f8aa 50ae 	strh.w	r5, [sl, #174]	; 0xae
 80163c6:	f8aa 53a4 	strh.w	r5, [sl, #932]	; 0x3a4
 80163ca:	f8aa 60b0 	strh.w	r6, [sl, #176]	; 0xb0
 80163ce:	f8aa 63a6 	strh.w	r6, [sl, #934]	; 0x3a6
 80163d2:	f8aa 70b2 	strh.w	r7, [sl, #178]	; 0xb2
 80163d6:	f8aa 73a8 	strh.w	r7, [sl, #936]	; 0x3a8
 80163da:	f8ca 4090 	str.w	r4, [sl, #144]	; 0x90
 80163de:	f8aa 80ac 	strh.w	r8, [sl, #172]	; 0xac
 80163e2:	b200      	sxth	r0, r0
 80163e4:	f7ea fc92 	bl	8000d0c <__aeabi_i2f>
 80163e8:	9902      	ldr	r1, [sp, #8]
 80163ea:	f7ea fce3 	bl	8000db4 <__aeabi_fmul>
 80163ee:	f002 f92f 	bl	8018650 <roundf>
 80163f2:	f7ea fee1 	bl	80011b8 <__aeabi_f2uiz>
 80163f6:	fb96 f3f9 	sdiv	r3, r6, r9
 80163fa:	fb09 6613 	mls	r6, r9, r3, r6
 80163fe:	2e00      	cmp	r6, #0
 8016400:	bfb8      	it	lt
 8016402:	444e      	addlt	r6, r9
 8016404:	b2c4      	uxtb	r4, r0
 8016406:	b230      	sxth	r0, r6
 8016408:	f7ea fc80 	bl	8000d0c <__aeabi_i2f>
 801640c:	9902      	ldr	r1, [sp, #8]
 801640e:	f7ea fcd1 	bl	8000db4 <__aeabi_fmul>
 8016412:	f002 f91d 	bl	8018650 <roundf>
 8016416:	f7ea fecf 	bl	80011b8 <__aeabi_f2uiz>
 801641a:	fb97 f3f9 	sdiv	r3, r7, r9
 801641e:	fb09 7713 	mls	r7, r9, r3, r7
 8016422:	2f00      	cmp	r7, #0
 8016424:	bfb8      	it	lt
 8016426:	444f      	addlt	r7, r9
 8016428:	b2c5      	uxtb	r5, r0
 801642a:	b238      	sxth	r0, r7
 801642c:	f7ea fc6e 	bl	8000d0c <__aeabi_i2f>
 8016430:	9902      	ldr	r1, [sp, #8]
 8016432:	f7ea fcbf 	bl	8000db4 <__aeabi_fmul>
 8016436:	f002 f90b 	bl	8018650 <roundf>
 801643a:	f7ea febd 	bl	80011b8 <__aeabi_f2uiz>
 801643e:	462a      	mov	r2, r5
 8016440:	b2c3      	uxtb	r3, r0
 8016442:	4621      	mov	r1, r4
 8016444:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016446:	f7f6 fab3 	bl	800c9b0 <MEMS_setMagIndexToOne>
 801644a:	2301      	movs	r3, #1
 801644c:	930f      	str	r3, [sp, #60]	; 0x3c
 801644e:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 8016452:	9304      	str	r3, [sp, #16]
 8016454:	e704      	b.n	8016260 <MEMS_runMagCal+0x15e0>
 8016456:	2001      	movs	r0, #1
 8016458:	fa00 f101 	lsl.w	r1, r0, r1
 801645c:	4019      	ands	r1, r3
 801645e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016460:	e9da 0429 	ldrd	r0, r4, [sl, #164]	; 0xa4
 8016464:	2b1f      	cmp	r3, #31
 8016466:	f63f ae17 	bhi.w	8016098 <MEMS_runMagCal+0x1418>
 801646a:	2401      	movs	r4, #1
 801646c:	fa04 f303 	lsl.w	r3, r4, r3
 8016470:	4003      	ands	r3, r0
 8016472:	e616      	b.n	80160a2 <MEMS_runMagCal+0x1422>
 8016474:	2101      	movs	r1, #1
 8016476:	fa01 f202 	lsl.w	r2, r1, r2
 801647a:	401a      	ands	r2, r3
 801647c:	e5fb      	b.n	8016076 <MEMS_runMagCal+0x13f6>
 801647e:	f04f 0e01 	mov.w	lr, #1
 8016482:	e515      	b.n	8015eb0 <MEMS_runMagCal+0x1230>
 8016484:	f04f 0800 	mov.w	r8, #0
 8016488:	f89a 5011 	ldrb.w	r5, [sl, #17]
 801648c:	4643      	mov	r3, r8
 801648e:	e48e      	b.n	8015dae <MEMS_runMagCal+0x112e>
 8016490:	f8da 1078 	ldr.w	r1, [sl, #120]	; 0x78
 8016494:	f8da 0068 	ldr.w	r0, [sl, #104]	; 0x68
 8016498:	f7ea fb84 	bl	8000ba4 <__addsf3>
 801649c:	f8da 1088 	ldr.w	r1, [sl, #136]	; 0x88
 80164a0:	f7ea fb80 	bl	8000ba4 <__addsf3>
 80164a4:	495e      	ldr	r1, [pc, #376]	; (8016620 <MEMS_runMagCal+0x19a0>)
 80164a6:	f7ea fc85 	bl	8000db4 <__aeabi_fmul>
 80164aa:	495e      	ldr	r1, [pc, #376]	; (8016624 <MEMS_runMagCal+0x19a4>)
 80164ac:	4604      	mov	r4, r0
 80164ae:	f7ea fe29 	bl	8001104 <__aeabi_fcmple>
 80164b2:	b900      	cbnz	r0, 80164b6 <MEMS_runMagCal+0x1836>
 80164b4:	4c5b      	ldr	r4, [pc, #364]	; (8016624 <MEMS_runMagCal+0x19a4>)
 80164b6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80164ba:	4620      	mov	r0, r4
 80164bc:	f7ea fe2c 	bl	8001118 <__aeabi_fcmpge>
 80164c0:	b908      	cbnz	r0, 80164c6 <MEMS_runMagCal+0x1846>
 80164c2:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
 80164c6:	4621      	mov	r1, r4
 80164c8:	4638      	mov	r0, r7
 80164ca:	f7ea fc73 	bl	8000db4 <__aeabi_fmul>
 80164ce:	4601      	mov	r1, r0
 80164d0:	4640      	mov	r0, r8
 80164d2:	f7ea fe2b 	bl	800112c <__aeabi_fcmpgt>
 80164d6:	b998      	cbnz	r0, 8016500 <MEMS_runMagCal+0x1880>
 80164d8:	4621      	mov	r1, r4
 80164da:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80164dc:	f7ea fc6a 	bl	8000db4 <__aeabi_fmul>
 80164e0:	4601      	mov	r1, r0
 80164e2:	4640      	mov	r0, r8
 80164e4:	f7ea fe22 	bl	800112c <__aeabi_fcmpgt>
 80164e8:	b950      	cbnz	r0, 8016500 <MEMS_runMagCal+0x1880>
 80164ea:	4621      	mov	r1, r4
 80164ec:	9810      	ldr	r0, [sp, #64]	; 0x40
 80164ee:	f7ea fc61 	bl	8000db4 <__aeabi_fmul>
 80164f2:	4601      	mov	r1, r0
 80164f4:	4640      	mov	r0, r8
 80164f6:	f7ea fe19 	bl	800112c <__aeabi_fcmpgt>
 80164fa:	2800      	cmp	r0, #0
 80164fc:	f43e af0d 	beq.w	801531a <MEMS_runMagCal+0x69a>
 8016500:	2300      	movs	r3, #0
 8016502:	f88a 3000 	strb.w	r3, [sl]
 8016506:	e40c      	b.n	8015d22 <MEMS_runMagCal+0x10a2>
 8016508:	465a      	mov	r2, fp
 801650a:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 801650e:	9d06      	ldr	r5, [sp, #24]
 8016510:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8016514:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
 8016518:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801651a:	f108 0801 	add.w	r8, r8, #1
 801651e:	fb91 f3f2 	sdiv	r3, r1, r2
 8016522:	4590      	cmp	r8, r2
 8016524:	bfa8      	it	ge
 8016526:	4690      	movge	r8, r2
 8016528:	fb02 1213 	mls	r2, r2, r3, r1
 801652c:	fa5f f888 	uxtb.w	r8, r8
 8016530:	b252      	sxtb	r2, r2
 8016532:	9b08      	ldr	r3, [sp, #32]
 8016534:	f88a 208e 	strb.w	r2, [sl, #142]	; 0x8e
 8016538:	f8da 0090 	ldr.w	r0, [sl, #144]	; 0x90
 801653c:	f88a 808c 	strb.w	r8, [sl, #140]	; 0x8c
 8016540:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8016542:	885b      	ldrh	r3, [r3, #2]
 8016544:	1a09      	subs	r1, r1, r0
 8016546:	fb0b 1303 	mla	r3, fp, r3, r1
 801654a:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 801654e:	f8a2 30ac 	strh.w	r3, [r2, #172]	; 0xac
 8016552:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016554:	f8a2 50ae 	strh.w	r5, [r2, #174]	; 0xae
 8016558:	4598      	cmp	r8, r3
 801655a:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 801655e:	f8a2 70b2 	strh.w	r7, [r2, #178]	; 0xb2
 8016562:	f8aa 53a4 	strh.w	r5, [sl, #932]	; 0x3a4
 8016566:	f8aa 63a6 	strh.w	r6, [sl, #934]	; 0x3a6
 801656a:	f8aa 73a8 	strh.w	r7, [sl, #936]	; 0x3a8
 801656e:	f000 81d7 	beq.w	8016920 <MEMS_runMagCal+0x1ca0>
 8016572:	2301      	movs	r3, #1
 8016574:	9907      	ldr	r1, [sp, #28]
 8016576:	930f      	str	r3, [sp, #60]	; 0x3c
 8016578:	980e      	ldr	r0, [sp, #56]	; 0x38
 801657a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801657e:	f7f6 fa17 	bl	800c9b0 <MEMS_setMagIndexToOne>
 8016582:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 8016586:	9304      	str	r3, [sp, #16]
 8016588:	e66a      	b.n	8016260 <MEMS_runMagCal+0x15e0>
 801658a:	2300      	movs	r3, #0
 801658c:	930c      	str	r3, [sp, #48]	; 0x30
 801658e:	2301      	movs	r3, #1
 8016590:	9305      	str	r3, [sp, #20]
 8016592:	e5fa      	b.n	801618a <MEMS_runMagCal+0x150a>
 8016594:	1c5a      	adds	r2, r3, #1
 8016596:	fb92 f3f8 	sdiv	r3, r2, r8
 801659a:	fb08 2313 	mls	r3, r8, r3, r2
 801659e:	9213      	str	r2, [sp, #76]	; 0x4c
 80165a0:	b21b      	sxth	r3, r3
 80165a2:	4642      	mov	r2, r8
 80165a4:	e60d      	b.n	80161c2 <MEMS_runMagCal+0x1542>
 80165a6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80165a8:	f7ea fbac 	bl	8000d04 <__aeabi_ui2f>
 80165ac:	491e      	ldr	r1, [pc, #120]	; (8016628 <MEMS_runMagCal+0x19a8>)
 80165ae:	f7ea fc01 	bl	8000db4 <__aeabi_fmul>
 80165b2:	4604      	mov	r4, r0
 80165b4:	4628      	mov	r0, r5
 80165b6:	f7ea fba5 	bl	8000d04 <__aeabi_ui2f>
 80165ba:	4601      	mov	r1, r0
 80165bc:	4620      	mov	r0, r4
 80165be:	f7ea faef 	bl	8000ba0 <__aeabi_fsub>
 80165c2:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80165c6:	f7ea fd9d 	bl	8001104 <__aeabi_fcmple>
 80165ca:	2800      	cmp	r0, #0
 80165cc:	f43f ae6a 	beq.w	80162a4 <MEMS_runMagCal+0x1624>
 80165d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80165d2:	2b00      	cmp	r3, #0
 80165d4:	f43f aba5 	beq.w	8015d22 <MEMS_runMagCal+0x10a2>
 80165d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80165da:	f7ea fb93 	bl	8000d04 <__aeabi_ui2f>
 80165de:	4601      	mov	r1, r0
 80165e0:	4620      	mov	r0, r4
 80165e2:	f7ea fadd 	bl	8000ba0 <__aeabi_fsub>
 80165e6:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80165ea:	f7ea fd81 	bl	80010f0 <__aeabi_fcmplt>
 80165ee:	1e03      	subs	r3, r0, #0
 80165f0:	bf18      	it	ne
 80165f2:	2301      	movne	r3, #1
 80165f4:	930c      	str	r3, [sp, #48]	; 0x30
 80165f6:	e659      	b.n	80162ac <MEMS_runMagCal+0x162c>
 80165f8:	1c4a      	adds	r2, r1, #1
 80165fa:	fb92 f1f0 	sdiv	r1, r2, r0
 80165fe:	fb00 2111 	mls	r1, r0, r1, r2
 8016602:	4607      	mov	r7, r0
 8016604:	b209      	sxth	r1, r1
 8016606:	e43c      	b.n	8015e82 <MEMS_runMagCal+0x1202>
 8016608:	2200      	movs	r2, #0
 801660a:	23ff      	movs	r3, #255	; 0xff
 801660c:	f88a 208c 	strb.w	r2, [sl, #140]	; 0x8c
 8016610:	4649      	mov	r1, r9
 8016612:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016614:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016616:	f88a 308e 	strb.w	r3, [sl, #142]	; 0x8e
 801661a:	f7f6 fd35 	bl	800d088 <MEMS_updateMagBufferIndex>
 801661e:	e47f      	b.n	8015f20 <MEMS_runMagCal+0x12a0>
 8016620:	3eaaaaab 	.word	0x3eaaaaab
 8016624:	3f900000 	.word	0x3f900000
 8016628:	3a83126f 	.word	0x3a83126f
 801662c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8016630:	e9c5 3300 	strd	r3, r3, [r5]
 8016634:	e9c5 3302 	strd	r3, r3, [r5, #8]
 8016638:	e9c5 3304 	strd	r3, r3, [r5, #16]
 801663c:	61ab      	str	r3, [r5, #24]
 801663e:	fb04 f009 	mul.w	r0, r4, r9
 8016642:	f7ea fb63 	bl	8000d0c <__aeabi_i2f>
 8016646:	49bd      	ldr	r1, [pc, #756]	; (801693c <MEMS_runMagCal+0x1cbc>)
 8016648:	f7ea fbb4 	bl	8000db4 <__aeabi_fmul>
 801664c:	4603      	mov	r3, r0
 801664e:	fb04 f007 	mul.w	r0, r4, r7
 8016652:	f8c8 3000 	str.w	r3, [r8]
 8016656:	f7ea fb59 	bl	8000d0c <__aeabi_i2f>
 801665a:	49b8      	ldr	r1, [pc, #736]	; (801693c <MEMS_runMagCal+0x1cbc>)
 801665c:	f7ea fbaa 	bl	8000db4 <__aeabi_fmul>
 8016660:	4603      	mov	r3, r0
 8016662:	fb04 f006 	mul.w	r0, r4, r6
 8016666:	f8c8 3010 	str.w	r3, [r8, #16]
 801666a:	f7ea fb4f 	bl	8000d0c <__aeabi_i2f>
 801666e:	49b3      	ldr	r1, [pc, #716]	; (801693c <MEMS_runMagCal+0x1cbc>)
 8016670:	f7ea fba0 	bl	8000db4 <__aeabi_fmul>
 8016674:	4604      	mov	r4, r0
 8016676:	ab31      	add	r3, sp, #196	; 0xc4
 8016678:	9d08      	ldr	r5, [sp, #32]
 801667a:	9301      	str	r3, [sp, #4]
 801667c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801667e:	ab19      	add	r3, sp, #100	; 0x64
 8016680:	9300      	str	r3, [sp, #0]
 8016682:	686b      	ldr	r3, [r5, #4]
 8016684:	f10a 0268 	add.w	r2, sl, #104	; 0x68
 8016688:	f10a 014a 	add.w	r1, sl, #74	; 0x4a
 801668c:	f8c8 4020 	str.w	r4, [r8, #32]
 8016690:	4630      	mov	r0, r6
 8016692:	ac1a      	add	r4, sp, #104	; 0x68
 8016694:	920b      	str	r2, [sp, #44]	; 0x2c
 8016696:	940a      	str	r4, [sp, #40]	; 0x28
 8016698:	f7f6 fd82 	bl	800d1a0 <getMagStats.constprop.0>
 801669c:	ab19      	add	r3, sp, #100	; 0x64
 801669e:	9401      	str	r4, [sp, #4]
 80166a0:	9300      	str	r3, [sp, #0]
 80166a2:	686b      	ldr	r3, [r5, #4]
 80166a4:	4642      	mov	r2, r8
 80166a6:	f10d 01b6 	add.w	r1, sp, #182	; 0xb6
 80166aa:	4630      	mov	r0, r6
 80166ac:	f7f6 fd78 	bl	800d1a0 <getMagStats.constprop.0>
 80166b0:	49a3      	ldr	r1, [pc, #652]	; (8016940 <MEMS_runMagCal+0x1cc0>)
 80166b2:	9819      	ldr	r0, [sp, #100]	; 0x64
 80166b4:	f7ea fa74 	bl	8000ba0 <__aeabi_fsub>
 80166b8:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 80166bc:	4628      	mov	r0, r5
 80166be:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80166c2:	f7ea fd15 	bl	80010f0 <__aeabi_fcmplt>
 80166c6:	6824      	ldr	r4, [r4, #0]
 80166c8:	b138      	cbz	r0, 80166da <MEMS_runMagCal+0x1a5a>
 80166ca:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80166ce:	4620      	mov	r0, r4
 80166d0:	f7ea fd0e 	bl	80010f0 <__aeabi_fcmplt>
 80166d4:	2800      	cmp	r0, #0
 80166d6:	f040 822c 	bne.w	8016b32 <MEMS_runMagCal+0x1eb2>
 80166da:	4628      	mov	r0, r5
 80166dc:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80166e0:	f7ea fd06 	bl	80010f0 <__aeabi_fcmplt>
 80166e4:	2800      	cmp	r0, #0
 80166e6:	f000 81db 	beq.w	8016aa0 <MEMS_runMagCal+0x1e20>
 80166ea:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80166ee:	4620      	mov	r0, r4
 80166f0:	f7ea fcfe 	bl	80010f0 <__aeabi_fcmplt>
 80166f4:	9b05      	ldr	r3, [sp, #20]
 80166f6:	2800      	cmp	r0, #0
 80166f8:	bf0c      	ite	eq
 80166fa:	461e      	moveq	r6, r3
 80166fc:	2602      	movne	r6, #2
 80166fe:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 8016700:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8016704:	4628      	mov	r0, r5
 8016706:	f7ea fb55 	bl	8000db4 <__aeabi_fmul>
 801670a:	4601      	mov	r1, r0
 801670c:	4620      	mov	r0, r4
 801670e:	f7ea fcef 	bl	80010f0 <__aeabi_fcmplt>
 8016712:	2800      	cmp	r0, #0
 8016714:	f43f ab05 	beq.w	8015d22 <MEMS_runMagCal+0x10a2>
 8016718:	f89a 3058 	ldrb.w	r3, [sl, #88]	; 0x58
 801671c:	42b3      	cmp	r3, r6
 801671e:	f63f ab00 	bhi.w	8015d22 <MEMS_runMagCal+0x10a2>
 8016722:	4988      	ldr	r1, [pc, #544]	; (8016944 <MEMS_runMagCal+0x1cc4>)
 8016724:	4620      	mov	r0, r4
 8016726:	f7ea fb45 	bl	8000db4 <__aeabi_fmul>
 801672a:	4601      	mov	r1, r0
 801672c:	4628      	mov	r0, r5
 801672e:	f7ea fcdf 	bl	80010f0 <__aeabi_fcmplt>
 8016732:	b970      	cbnz	r0, 8016752 <MEMS_runMagCal+0x1ad2>
 8016734:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8016738:	4628      	mov	r0, r5
 801673a:	f7ea fcd9 	bl	80010f0 <__aeabi_fcmplt>
 801673e:	2800      	cmp	r0, #0
 8016740:	f000 80e8 	beq.w	8016914 <MEMS_runMagCal+0x1c94>
 8016744:	f89a 2048 	ldrb.w	r2, [sl, #72]	; 0x48
 8016748:	f89d 30b4 	ldrb.w	r3, [sp, #180]	; 0xb4
 801674c:	429a      	cmp	r2, r3
 801674e:	f080 80e1 	bcs.w	8016914 <MEMS_runMagCal+0x1c94>
 8016752:	f9bd 90b8 	ldrsh.w	r9, [sp, #184]	; 0xb8
 8016756:	f9ba 804c 	ldrsh.w	r8, [sl, #76]	; 0x4c
 801675a:	f9bd 70b6 	ldrsh.w	r7, [sp, #182]	; 0xb6
 801675e:	f9ba 604a 	ldrsh.w	r6, [sl, #74]	; 0x4a
 8016762:	eba8 0309 	sub.w	r3, r8, r9
 8016766:	1bf2      	subs	r2, r6, r7
 8016768:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 801676c:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 8016770:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 8016774:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 8016778:	4283      	cmp	r3, r0
 801677a:	bfb8      	it	lt
 801677c:	4603      	movlt	r3, r0
 801677e:	f9ba 204e 	ldrsh.w	r2, [sl, #78]	; 0x4e
 8016782:	f9bd b0ba 	ldrsh.w	fp, [sp, #186]	; 0xba
 8016786:	9202      	str	r2, [sp, #8]
 8016788:	eba2 020b 	sub.w	r2, r2, fp
 801678c:	2a00      	cmp	r2, #0
 801678e:	bfb8      	it	lt
 8016790:	4252      	neglt	r2, r2
 8016792:	b218      	sxth	r0, r3
 8016794:	4290      	cmp	r0, r2
 8016796:	bfb8      	it	lt
 8016798:	4610      	movlt	r0, r2
 801679a:	b200      	sxth	r0, r0
 801679c:	f7ea fab6 	bl	8000d0c <__aeabi_i2f>
 80167a0:	9b08      	ldr	r3, [sp, #32]
 80167a2:	6859      	ldr	r1, [r3, #4]
 80167a4:	f7ea fb06 	bl	8000db4 <__aeabi_fmul>
 80167a8:	4967      	ldr	r1, [pc, #412]	; (8016948 <MEMS_runMagCal+0x1cc8>)
 80167aa:	f7ea fca1 	bl	80010f0 <__aeabi_fcmplt>
 80167ae:	2800      	cmp	r0, #0
 80167b0:	f000 80b0 	beq.w	8016914 <MEMS_runMagCal+0x1c94>
 80167b4:	4629      	mov	r1, r5
 80167b6:	4620      	mov	r0, r4
 80167b8:	f7ea f9f4 	bl	8000ba4 <__addsf3>
 80167bc:	4601      	mov	r1, r0
 80167be:	4628      	mov	r0, r5
 80167c0:	f7ea fbac 	bl	8000f1c <__aeabi_fdiv>
 80167c4:	4605      	mov	r5, r0
 80167c6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80167ca:	4629      	mov	r1, r5
 80167cc:	f7ea f9e8 	bl	8000ba0 <__aeabi_fsub>
 80167d0:	4604      	mov	r4, r0
 80167d2:	4630      	mov	r0, r6
 80167d4:	f7ea fa9a 	bl	8000d0c <__aeabi_i2f>
 80167d8:	4621      	mov	r1, r4
 80167da:	f7ea faeb 	bl	8000db4 <__aeabi_fmul>
 80167de:	4606      	mov	r6, r0
 80167e0:	4638      	mov	r0, r7
 80167e2:	f7ea fa93 	bl	8000d0c <__aeabi_i2f>
 80167e6:	4629      	mov	r1, r5
 80167e8:	f7ea fae4 	bl	8000db4 <__aeabi_fmul>
 80167ec:	4601      	mov	r1, r0
 80167ee:	4630      	mov	r0, r6
 80167f0:	f7ea f9d8 	bl	8000ba4 <__addsf3>
 80167f4:	f7ea fcba 	bl	800116c <__aeabi_f2iz>
 80167f8:	4603      	mov	r3, r0
 80167fa:	f8bd 00bc 	ldrh.w	r0, [sp, #188]	; 0xbc
 80167fe:	f8ad 30b6 	strh.w	r3, [sp, #182]	; 0xb6
 8016802:	f7ea fa83 	bl	8000d0c <__aeabi_i2f>
 8016806:	4629      	mov	r1, r5
 8016808:	f7ea fad4 	bl	8000db4 <__aeabi_fmul>
 801680c:	4606      	mov	r6, r0
 801680e:	f8ba 0050 	ldrh.w	r0, [sl, #80]	; 0x50
 8016812:	f7ea fa7b 	bl	8000d0c <__aeabi_i2f>
 8016816:	4621      	mov	r1, r4
 8016818:	f7ea facc 	bl	8000db4 <__aeabi_fmul>
 801681c:	4601      	mov	r1, r0
 801681e:	4630      	mov	r0, r6
 8016820:	f7ea f9c0 	bl	8000ba4 <__addsf3>
 8016824:	f7ea fcc8 	bl	80011b8 <__aeabi_f2uiz>
 8016828:	4603      	mov	r3, r0
 801682a:	4640      	mov	r0, r8
 801682c:	f8ad 30bc 	strh.w	r3, [sp, #188]	; 0xbc
 8016830:	f7ea fa6c 	bl	8000d0c <__aeabi_i2f>
 8016834:	4621      	mov	r1, r4
 8016836:	f7ea fabd 	bl	8000db4 <__aeabi_fmul>
 801683a:	4606      	mov	r6, r0
 801683c:	4648      	mov	r0, r9
 801683e:	f7ea fa65 	bl	8000d0c <__aeabi_i2f>
 8016842:	4629      	mov	r1, r5
 8016844:	f7ea fab6 	bl	8000db4 <__aeabi_fmul>
 8016848:	4601      	mov	r1, r0
 801684a:	4630      	mov	r0, r6
 801684c:	f7ea f9aa 	bl	8000ba4 <__addsf3>
 8016850:	f7ea fc8c 	bl	800116c <__aeabi_f2iz>
 8016854:	4603      	mov	r3, r0
 8016856:	f8bd 00be 	ldrh.w	r0, [sp, #190]	; 0xbe
 801685a:	f8ad 30b8 	strh.w	r3, [sp, #184]	; 0xb8
 801685e:	f7ea fa55 	bl	8000d0c <__aeabi_i2f>
 8016862:	4629      	mov	r1, r5
 8016864:	f7ea faa6 	bl	8000db4 <__aeabi_fmul>
 8016868:	4606      	mov	r6, r0
 801686a:	f8ba 0052 	ldrh.w	r0, [sl, #82]	; 0x52
 801686e:	f7ea fa4d 	bl	8000d0c <__aeabi_i2f>
 8016872:	4621      	mov	r1, r4
 8016874:	f7ea fa9e 	bl	8000db4 <__aeabi_fmul>
 8016878:	4601      	mov	r1, r0
 801687a:	4630      	mov	r0, r6
 801687c:	f7ea f992 	bl	8000ba4 <__addsf3>
 8016880:	f7ea fc9a 	bl	80011b8 <__aeabi_f2uiz>
 8016884:	4603      	mov	r3, r0
 8016886:	9802      	ldr	r0, [sp, #8]
 8016888:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
 801688c:	f7ea fa3e 	bl	8000d0c <__aeabi_i2f>
 8016890:	4621      	mov	r1, r4
 8016892:	f7ea fa8f 	bl	8000db4 <__aeabi_fmul>
 8016896:	4606      	mov	r6, r0
 8016898:	4658      	mov	r0, fp
 801689a:	f7ea fa37 	bl	8000d0c <__aeabi_i2f>
 801689e:	4629      	mov	r1, r5
 80168a0:	f7ea fa88 	bl	8000db4 <__aeabi_fmul>
 80168a4:	4601      	mov	r1, r0
 80168a6:	4630      	mov	r0, r6
 80168a8:	f7ea f97c 	bl	8000ba4 <__addsf3>
 80168ac:	f7ea fc5e 	bl	800116c <__aeabi_f2iz>
 80168b0:	4603      	mov	r3, r0
 80168b2:	f8bd 00c0 	ldrh.w	r0, [sp, #192]	; 0xc0
 80168b6:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
 80168ba:	f7ea fa27 	bl	8000d0c <__aeabi_i2f>
 80168be:	4629      	mov	r1, r5
 80168c0:	f7ea fa78 	bl	8000db4 <__aeabi_fmul>
 80168c4:	4606      	mov	r6, r0
 80168c6:	f8ba 0054 	ldrh.w	r0, [sl, #84]	; 0x54
 80168ca:	f7ea fa1f 	bl	8000d0c <__aeabi_i2f>
 80168ce:	4621      	mov	r1, r4
 80168d0:	f7ea fa70 	bl	8000db4 <__aeabi_fmul>
 80168d4:	4601      	mov	r1, r0
 80168d6:	4630      	mov	r0, r6
 80168d8:	f7ea f964 	bl	8000ba4 <__addsf3>
 80168dc:	f7ea fc6c 	bl	80011b8 <__aeabi_f2uiz>
 80168e0:	4603      	mov	r3, r0
 80168e2:	f89d 00b4 	ldrb.w	r0, [sp, #180]	; 0xb4
 80168e6:	f8ad 30c0 	strh.w	r3, [sp, #192]	; 0xc0
 80168ea:	f7ea fa0f 	bl	8000d0c <__aeabi_i2f>
 80168ee:	4629      	mov	r1, r5
 80168f0:	f7ea fa60 	bl	8000db4 <__aeabi_fmul>
 80168f4:	4605      	mov	r5, r0
 80168f6:	f89a 0048 	ldrb.w	r0, [sl, #72]	; 0x48
 80168fa:	f7ea fa07 	bl	8000d0c <__aeabi_i2f>
 80168fe:	4621      	mov	r1, r4
 8016900:	f7ea fa58 	bl	8000db4 <__aeabi_fmul>
 8016904:	4601      	mov	r1, r0
 8016906:	4628      	mov	r0, r5
 8016908:	f7ea f94c 	bl	8000ba4 <__addsf3>
 801690c:	f7ea fc54 	bl	80011b8 <__aeabi_f2uiz>
 8016910:	f88d 00b4 	strb.w	r0, [sp, #180]	; 0xb4
 8016914:	f89a 308c 	ldrb.w	r3, [sl, #140]	; 0x8c
 8016918:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801691a:	9302      	str	r3, [sp, #8]
 801691c:	f7ff b8e7 	b.w	8015aee <MEMS_runMagCal+0xe6e>
 8016920:	4649      	mov	r1, r9
 8016922:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016924:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016926:	f7f6 fbaf 	bl	800d088 <MEMS_updateMagBufferIndex>
 801692a:	e622      	b.n	8016572 <MEMS_runMagCal+0x18f2>
 801692c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801692e:	f7ea f9e9 	bl	8000d04 <__aeabi_ui2f>
 8016932:	4906      	ldr	r1, [pc, #24]	; (801694c <MEMS_runMagCal+0x1ccc>)
 8016934:	f7ea fa3e 	bl	8000db4 <__aeabi_fmul>
 8016938:	4604      	mov	r4, r0
 801693a:	e64d      	b.n	80165d8 <MEMS_runMagCal+0x1958>
 801693c:	358637bd 	.word	0x358637bd
 8016940:	423c0000 	.word	0x423c0000
 8016944:	40400000 	.word	0x40400000
 8016948:	40a00000 	.word	0x40a00000
 801694c:	3a83126f 	.word	0x3a83126f
 8016950:	f108 0301 	add.w	r3, r8, #1
 8016954:	fb93 f2f5 	sdiv	r2, r3, r5
 8016958:	f04f 0800 	mov.w	r8, #0
 801695c:	a91a      	add	r1, sp, #104	; 0x68
 801695e:	fb05 3312 	mls	r3, r5, r2, r3
 8016962:	910a      	str	r1, [sp, #40]	; 0x28
 8016964:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
 8016968:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801696c:	b2aa      	uxth	r2, r5
 801696e:	2d00      	cmp	r5, #0
 8016970:	f000 80f2 	beq.w	8016b58 <MEMS_runMagCal+0x1ed8>
 8016974:	4641      	mov	r1, r8
 8016976:	b29b      	uxth	r3, r3
 8016978:	3a01      	subs	r2, #1
 801697a:	46c1      	mov	r9, r8
 801697c:	b292      	uxth	r2, r2
 801697e:	f103 0801 	add.w	r8, r3, #1
 8016982:	4442      	add	r2, r8
 8016984:	9402      	str	r4, [sp, #8]
 8016986:	9703      	str	r7, [sp, #12]
 8016988:	462c      	mov	r4, r5
 801698a:	4647      	mov	r7, r8
 801698c:	461e      	mov	r6, r3
 801698e:	460d      	mov	r5, r1
 8016990:	4690      	mov	r8, r2
 8016992:	e000      	b.n	8016996 <MEMS_runMagCal+0x1d16>
 8016994:	3701      	adds	r7, #1
 8016996:	fbb6 f1f4 	udiv	r1, r6, r4
 801699a:	f241 235c 	movw	r3, #4700	; 0x125c
 801699e:	fb04 6111 	mls	r1, r4, r1, r6
 80169a2:	eb0a 0141 	add.w	r1, sl, r1, lsl #1
 80169a6:	8a88      	ldrh	r0, [r1, #20]
 80169a8:	4298      	cmp	r0, r3
 80169aa:	f5a0 5692 	sub.w	r6, r0, #4672	; 0x1240
 80169ae:	f1a6 061c 	sub.w	r6, r6, #28
 80169b2:	bf9c      	itt	ls
 80169b4:	f5c0 5692 	rsbls	r6, r0, #4672	; 0x1240
 80169b8:	361c      	addls	r6, #28
 80169ba:	f7ea f9a7 	bl	8000d0c <__aeabi_i2f>
 80169be:	4601      	mov	r1, r0
 80169c0:	4648      	mov	r0, r9
 80169c2:	f7ea f8ef 	bl	8000ba4 <__addsf3>
 80169c6:	b2b6      	uxth	r6, r6
 80169c8:	4681      	mov	r9, r0
 80169ca:	fb06 f006 	mul.w	r0, r6, r6
 80169ce:	f7ea f99d 	bl	8000d0c <__aeabi_i2f>
 80169d2:	4601      	mov	r1, r0
 80169d4:	4628      	mov	r0, r5
 80169d6:	f7ea f8e5 	bl	8000ba4 <__addsf3>
 80169da:	4547      	cmp	r7, r8
 80169dc:	463e      	mov	r6, r7
 80169de:	4605      	mov	r5, r0
 80169e0:	d1d8      	bne.n	8016994 <MEMS_runMagCal+0x1d14>
 80169e2:	e9dd 4702 	ldrd	r4, r7, [sp, #8]
 80169e6:	4620      	mov	r0, r4
 80169e8:	f7ea f990 	bl	8000d0c <__aeabi_i2f>
 80169ec:	4601      	mov	r1, r0
 80169ee:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80169f2:	f7ea fa93 	bl	8000f1c <__aeabi_fdiv>
 80169f6:	4604      	mov	r4, r0
 80169f8:	4628      	mov	r0, r5
 80169fa:	4621      	mov	r1, r4
 80169fc:	f7ea f9da 	bl	8000db4 <__aeabi_fmul>
 8016a00:	4605      	mov	r5, r0
 8016a02:	f001 ff13 	bl	801882c <sqrtf>
 8016a06:	49b3      	ldr	r1, [pc, #716]	; (8016cd4 <MEMS_runMagCal+0x2054>)
 8016a08:	f7ea f9d4 	bl	8000db4 <__aeabi_fmul>
 8016a0c:	4603      	mov	r3, r0
 8016a0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016a10:	4620      	mov	r0, r4
 8016a12:	6013      	str	r3, [r2, #0]
 8016a14:	49af      	ldr	r1, [pc, #700]	; (8016cd4 <MEMS_runMagCal+0x2054>)
 8016a16:	f7ea f9cd 	bl	8000db4 <__aeabi_fmul>
 8016a1a:	4649      	mov	r1, r9
 8016a1c:	f7ea f9ca 	bl	8000db4 <__aeabi_fmul>
 8016a20:	4603      	mov	r3, r0
 8016a22:	49ad      	ldr	r1, [pc, #692]	; (8016cd8 <MEMS_runMagCal+0x2058>)
 8016a24:	4628      	mov	r0, r5
 8016a26:	9319      	str	r3, [sp, #100]	; 0x64
 8016a28:	f7ea fb80 	bl	800112c <__aeabi_fcmpgt>
 8016a2c:	4604      	mov	r4, r0
 8016a2e:	2800      	cmp	r0, #0
 8016a30:	d044      	beq.n	8016abc <MEMS_runMagCal+0x1e3c>
 8016a32:	2302      	movs	r3, #2
 8016a34:	4628      	mov	r0, r5
 8016a36:	49a9      	ldr	r1, [pc, #676]	; (8016cdc <MEMS_runMagCal+0x205c>)
 8016a38:	f88a 3058 	strb.w	r3, [sl, #88]	; 0x58
 8016a3c:	f7ea fb76 	bl	800112c <__aeabi_fcmpgt>
 8016a40:	2800      	cmp	r0, #0
 8016a42:	f43f a9df 	beq.w	8015e04 <MEMS_runMagCal+0x1184>
 8016a46:	2301      	movs	r3, #1
 8016a48:	f88a 3001 	strb.w	r3, [sl, #1]
 8016a4c:	f7ff b9da 	b.w	8015e04 <MEMS_runMagCal+0x1184>
 8016a50:	4649      	mov	r1, r9
 8016a52:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016a54:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016a56:	f7f6 fb17 	bl	800d088 <MEMS_updateMagBufferIndex>
 8016a5a:	f7ff ba4c 	b.w	8015ef6 <MEMS_runMagCal+0x1276>
 8016a5e:	9b02      	ldr	r3, [sp, #8]
 8016a60:	f8da 2090 	ldr.w	r2, [sl, #144]	; 0x90
 8016a64:	eb0a 0bc3 	add.w	fp, sl, r3, lsl #3
 8016a68:	f9bb 30ac 	ldrsh.w	r3, [fp, #172]	; 0xac
 8016a6c:	f8da 100c 	ldr.w	r1, [sl, #12]
 8016a70:	4413      	add	r3, r2
 8016a72:	4299      	cmp	r1, r3
 8016a74:	f4bf ad44 	bcs.w	8016500 <MEMS_runMagCal+0x1880>
 8016a78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016a7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016a7e:	fb03 f301 	mul.w	r3, r3, r1
 8016a82:	3364      	adds	r3, #100	; 0x64
 8016a84:	4293      	cmp	r3, r2
 8016a86:	bf38      	it	cc
 8016a88:	4613      	movcc	r3, r2
 8016a8a:	2200      	movs	r2, #0
 8016a8c:	f8ca 300c 	str.w	r3, [sl, #12]
 8016a90:	f88a 2000 	strb.w	r2, [sl]
 8016a94:	f7ff b945 	b.w	8015d22 <MEMS_runMagCal+0x10a2>
 8016a98:	9b05      	ldr	r3, [sp, #20]
 8016a9a:	9304      	str	r3, [sp, #16]
 8016a9c:	f7fe bba7 	b.w	80151ee <MEMS_runMagCal+0x56e>
 8016aa0:	9e05      	ldr	r6, [sp, #20]
 8016aa2:	e62c      	b.n	80166fe <MEMS_runMagCal+0x1a7e>
 8016aa4:	9b02      	ldr	r3, [sp, #8]
 8016aa6:	4611      	mov	r1, r2
 8016aa8:	3301      	adds	r3, #1
 8016aaa:	fb93 f2f2 	sdiv	r2, r3, r2
 8016aae:	fb01 3212 	mls	r2, r1, r2, r3
 8016ab2:	468b      	mov	fp, r1
 8016ab4:	930b      	str	r3, [sp, #44]	; 0x2c
 8016ab6:	b212      	sxth	r2, r2
 8016ab8:	f7fe bb46 	b.w	8015148 <MEMS_runMagCal+0x4c8>
 8016abc:	4628      	mov	r0, r5
 8016abe:	4988      	ldr	r1, [pc, #544]	; (8016ce0 <MEMS_runMagCal+0x2060>)
 8016ac0:	f7ea fb16 	bl	80010f0 <__aeabi_fcmplt>
 8016ac4:	2800      	cmp	r0, #0
 8016ac6:	d136      	bne.n	8016b36 <MEMS_runMagCal+0x1eb6>
 8016ac8:	4628      	mov	r0, r5
 8016aca:	4984      	ldr	r1, [pc, #528]	; (8016cdc <MEMS_runMagCal+0x205c>)
 8016acc:	f7ea fb2e 	bl	800112c <__aeabi_fcmpgt>
 8016ad0:	2800      	cmp	r0, #0
 8016ad2:	f43f ab1b 	beq.w	801610c <MEMS_runMagCal+0x148c>
 8016ad6:	2301      	movs	r3, #1
 8016ad8:	f88a 3001 	strb.w	r3, [sl, #1]
 8016adc:	f7ff bb16 	b.w	801610c <MEMS_runMagCal+0x148c>
 8016ae0:	2303      	movs	r3, #3
 8016ae2:	9305      	str	r3, [sp, #20]
 8016ae4:	f7ff b913 	b.w	8015d0e <MEMS_runMagCal+0x108e>
 8016ae8:	9b08      	ldr	r3, [sp, #32]
 8016aea:	f89a b011 	ldrb.w	fp, [sl, #17]
 8016aee:	685b      	ldr	r3, [r3, #4]
 8016af0:	930c      	str	r3, [sp, #48]	; 0x30
 8016af2:	9b02      	ldr	r3, [sp, #8]
 8016af4:	f7ff b8d6 	b.w	8015ca4 <MEMS_runMagCal+0x1024>
 8016af8:	461d      	mov	r5, r3
 8016afa:	460a      	mov	r2, r1
 8016afc:	f7fe bbb6 	b.w	801526c <MEMS_runMagCal+0x5ec>
 8016b00:	4978      	ldr	r1, [pc, #480]	; (8016ce4 <MEMS_runMagCal+0x2064>)
 8016b02:	4638      	mov	r0, r7
 8016b04:	f7ea f956 	bl	8000db4 <__aeabi_fmul>
 8016b08:	4601      	mov	r1, r0
 8016b0a:	4640      	mov	r0, r8
 8016b0c:	f7ea fb0e 	bl	800112c <__aeabi_fcmpgt>
 8016b10:	2800      	cmp	r0, #0
 8016b12:	f47f acf5 	bne.w	8016500 <MEMS_runMagCal+0x1880>
 8016b16:	4973      	ldr	r1, [pc, #460]	; (8016ce4 <MEMS_runMagCal+0x2064>)
 8016b18:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8016b1a:	f7ea f94b 	bl	8000db4 <__aeabi_fmul>
 8016b1e:	4601      	mov	r1, r0
 8016b20:	4640      	mov	r0, r8
 8016b22:	f7ea fb03 	bl	800112c <__aeabi_fcmpgt>
 8016b26:	2800      	cmp	r0, #0
 8016b28:	f47f acea 	bne.w	8016500 <MEMS_runMagCal+0x1880>
 8016b2c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8016b2e:	496d      	ldr	r1, [pc, #436]	; (8016ce4 <MEMS_runMagCal+0x2064>)
 8016b30:	e4dd      	b.n	80164ee <MEMS_runMagCal+0x186e>
 8016b32:	2603      	movs	r6, #3
 8016b34:	e5e3      	b.n	80166fe <MEMS_runMagCal+0x1a7e>
 8016b36:	2303      	movs	r3, #3
 8016b38:	4628      	mov	r0, r5
 8016b3a:	4968      	ldr	r1, [pc, #416]	; (8016cdc <MEMS_runMagCal+0x205c>)
 8016b3c:	f88a 4001 	strb.w	r4, [sl, #1]
 8016b40:	f88a 3058 	strb.w	r3, [sl, #88]	; 0x58
 8016b44:	f7ea faf2 	bl	800112c <__aeabi_fcmpgt>
 8016b48:	2800      	cmp	r0, #0
 8016b4a:	f43f aae3 	beq.w	8016114 <MEMS_runMagCal+0x1494>
 8016b4e:	2301      	movs	r3, #1
 8016b50:	f88a 3001 	strb.w	r3, [sl, #1]
 8016b54:	f7ff bade 	b.w	8016114 <MEMS_runMagCal+0x1494>
 8016b58:	2303      	movs	r3, #3
 8016b5a:	f88a 2001 	strb.w	r2, [sl, #1]
 8016b5e:	f88a 3058 	strb.w	r3, [sl, #88]	; 0x58
 8016b62:	f7ff bad7 	b.w	8016114 <MEMS_runMagCal+0x1494>
 8016b66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016b68:	fb93 f4fb 	sdiv	r4, r3, fp
 8016b6c:	fb0b 3414 	mls	r4, fp, r4, r3
 8016b70:	b224      	sxth	r4, r4
 8016b72:	f7fe bbe3 	b.w	801533c <MEMS_runMagCal+0x6bc>
 8016b76:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8016b78:	485b      	ldr	r0, [pc, #364]	; (8016ce8 <MEMS_runMagCal+0x2068>)
 8016b7a:	4629      	mov	r1, r5
 8016b7c:	f7ea f9ce 	bl	8000f1c <__aeabi_fdiv>
 8016b80:	4629      	mov	r1, r5
 8016b82:	4604      	mov	r4, r0
 8016b84:	4859      	ldr	r0, [pc, #356]	; (8016cec <MEMS_runMagCal+0x206c>)
 8016b86:	f7ea f9c9 	bl	8000f1c <__aeabi_fdiv>
 8016b8a:	f7ea fb15 	bl	80011b8 <__aeabi_f2uiz>
 8016b8e:	f89a 308c 	ldrb.w	r3, [sl, #140]	; 0x8c
 8016b92:	b281      	uxth	r1, r0
 8016b94:	b113      	cbz	r3, 8016b9c <MEMS_runMagCal+0x1f1c>
 8016b96:	3b01      	subs	r3, #1
 8016b98:	f88a 308c 	strb.w	r3, [sl, #140]	; 0x8c
 8016b9c:	4622      	mov	r2, r4
 8016b9e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016ba0:	f7f6 fa72 	bl	800d088 <MEMS_updateMagBufferIndex>
 8016ba4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8016ba6:	f7ea f8ad 	bl	8000d04 <__aeabi_ui2f>
 8016baa:	4951      	ldr	r1, [pc, #324]	; (8016cf0 <MEMS_runMagCal+0x2070>)
 8016bac:	f7ea f902 	bl	8000db4 <__aeabi_fmul>
 8016bb0:	f001 fd4e 	bl	8018650 <roundf>
 8016bb4:	f7ea fb00 	bl	80011b8 <__aeabi_f2uiz>
 8016bb8:	2300      	movs	r3, #0
 8016bba:	f8ca 0004 	str.w	r0, [sl, #4]
 8016bbe:	f88a 3000 	strb.w	r3, [sl]
 8016bc2:	f7ff b8ae 	b.w	8015d22 <MEMS_runMagCal+0x10a2>
 8016bc6:	3201      	adds	r2, #1
 8016bc8:	fb92 fbf0 	sdiv	fp, r2, r0
 8016bcc:	fb00 221b 	mls	r2, r0, fp, r2
 8016bd0:	4603      	mov	r3, r0
 8016bd2:	fa0f fb82 	sxth.w	fp, r2
 8016bd6:	4602      	mov	r2, r0
 8016bd8:	f7fe bc57 	b.w	801548a <MEMS_runMagCal+0x80a>
 8016bdc:	f8da 005c 	ldr.w	r0, [sl, #92]	; 0x5c
 8016be0:	f001 fd36 	bl	8018650 <roundf>
 8016be4:	f7ea fac2 	bl	800116c <__aeabi_f2iz>
 8016be8:	4603      	mov	r3, r0
 8016bea:	f8da 0060 	ldr.w	r0, [sl, #96]	; 0x60
 8016bee:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
 8016bf2:	f001 fd2d 	bl	8018650 <roundf>
 8016bf6:	f7ea fab9 	bl	800116c <__aeabi_f2iz>
 8016bfa:	4603      	mov	r3, r0
 8016bfc:	f8da 0064 	ldr.w	r0, [sl, #100]	; 0x64
 8016c00:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
 8016c04:	f001 fd24 	bl	8018650 <roundf>
 8016c08:	f7ea fab0 	bl	800116c <__aeabi_f2iz>
 8016c0c:	4605      	mov	r5, r0
 8016c0e:	ae1f      	add	r6, sp, #124	; 0x7c
 8016c10:	ac1b      	add	r4, sp, #108	; 0x6c
 8016c12:	ab1c      	add	r3, sp, #112	; 0x70
 8016c14:	e9cd 3400 	strd	r3, r4, [sp]
 8016c18:	4631      	mov	r1, r6
 8016c1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016c1c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016c1e:	f10a 0268 	add.w	r2, sl, #104	; 0x68
 8016c22:	80b5      	strh	r5, [r6, #4]
 8016c24:	f7f6 fabc 	bl	800d1a0 <getMagStats.constprop.0>
 8016c28:	4603      	mov	r3, r0
 8016c2a:	4932      	ldr	r1, [pc, #200]	; (8016cf4 <MEMS_runMagCal+0x2074>)
 8016c2c:	6820      	ldr	r0, [r4, #0]
 8016c2e:	461c      	mov	r4, r3
 8016c30:	f7ea fa5e 	bl	80010f0 <__aeabi_fcmplt>
 8016c34:	b168      	cbz	r0, 8016c52 <MEMS_runMagCal+0x1fd2>
 8016c36:	b964      	cbnz	r4, 8016c52 <MEMS_runMagCal+0x1fd2>
 8016c38:	f89a 3040 	ldrb.w	r3, [sl, #64]	; 0x40
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d030      	beq.n	8016ca2 <MEMS_runMagCal+0x2022>
 8016c40:	f89a 0049 	ldrb.w	r0, [sl, #73]	; 0x49
 8016c44:	f7ea f862 	bl	8000d0c <__aeabi_i2f>
 8016c48:	4601      	mov	r1, r0
 8016c4a:	9806      	ldr	r0, [sp, #24]
 8016c4c:	f7ea fa6e 	bl	800112c <__aeabi_fcmpgt>
 8016c50:	bb38      	cbnz	r0, 8016ca2 <MEMS_runMagCal+0x2022>
 8016c52:	2300      	movs	r3, #0
 8016c54:	6033      	str	r3, [r6, #0]
 8016c56:	80b3      	strh	r3, [r6, #4]
 8016c58:	f7fe bbf6 	b.w	8015448 <MEMS_runMagCal+0x7c8>
 8016c5c:	9803      	ldr	r0, [sp, #12]
 8016c5e:	f7ea f855 	bl	8000d0c <__aeabi_i2f>
 8016c62:	4601      	mov	r1, r0
 8016c64:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8016c68:	f7ea f958 	bl	8000f1c <__aeabi_fdiv>
 8016c6c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8016c6e:	4604      	mov	r4, r0
 8016c70:	f7ea f8a0 	bl	8000db4 <__aeabi_fmul>
 8016c74:	4603      	mov	r3, r0
 8016c76:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8016c78:	4620      	mov	r0, r4
 8016c7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8016c7c:	f7ea f89a 	bl	8000db4 <__aeabi_fmul>
 8016c80:	4603      	mov	r3, r0
 8016c82:	992b      	ldr	r1, [sp, #172]	; 0xac
 8016c84:	4620      	mov	r0, r4
 8016c86:	9309      	str	r3, [sp, #36]	; 0x24
 8016c88:	f7ea f894 	bl	8000db4 <__aeabi_fmul>
 8016c8c:	900c      	str	r0, [sp, #48]	; 0x30
 8016c8e:	f7fe bcd1 	b.w	8015634 <MEMS_runMagCal+0x9b4>
 8016c92:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
 8016c96:	f7fe bd7a 	b.w	801578e <MEMS_runMagCal+0xb0e>
 8016c9a:	2301      	movs	r3, #1
 8016c9c:	9305      	str	r3, [sp, #20]
 8016c9e:	f7fe bec8 	b.w	8015a32 <MEMS_runMagCal+0xdb2>
 8016ca2:	2303      	movs	r3, #3
 8016ca4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8016ca6:	f88a 3058 	strb.w	r3, [sl, #88]	; 0x58
 8016caa:	e77c      	b.n	8016ba6 <MEMS_runMagCal+0x1f26>
 8016cac:	4630      	mov	r0, r6
 8016cae:	4912      	ldr	r1, [pc, #72]	; (8016cf8 <MEMS_runMagCal+0x2078>)
 8016cb0:	f7ea fa3c 	bl	800112c <__aeabi_fcmpgt>
 8016cb4:	2800      	cmp	r0, #0
 8016cb6:	f43e ae5d 	beq.w	8015974 <MEMS_runMagCal+0xcf4>
 8016cba:	f7fe be62 	b.w	8015982 <MEMS_runMagCal+0xd02>
 8016cbe:	f644 43f4 	movw	r3, #19700	; 0x4cf4
 8016cc2:	4298      	cmp	r0, r3
 8016cc4:	f67f a862 	bls.w	8015d8c <MEMS_runMagCal+0x110c>
 8016cc8:	f7ff b856 	b.w	8015d78 <MEMS_runMagCal+0x10f8>
 8016ccc:	2500      	movs	r5, #0
 8016cce:	4c0b      	ldr	r4, [pc, #44]	; (8016cfc <MEMS_runMagCal+0x207c>)
 8016cd0:	f7fe bdd5 	b.w	801587e <MEMS_runMagCal+0xbfe>
 8016cd4:	3c23d70a 	.word	0x3c23d70a
 8016cd8:	4b095440 	.word	0x4b095440
 8016cdc:	481c4000 	.word	0x481c4000
 8016ce0:	471c4000 	.word	0x471c4000
 8016ce4:	3f900000 	.word	0x3f900000
 8016ce8:	40400000 	.word	0x40400000
 8016cec:	433d0000 	.word	0x433d0000
 8016cf0:	3a83126f 	.word	0x3a83126f
 8016cf4:	3ff4cccd 	.word	0x3ff4cccd
 8016cf8:	3ee66666 	.word	0x3ee66666
 8016cfc:	41f00001 	.word	0x41f00001
 8016d00:	4601      	mov	r1, r0
 8016d02:	2224      	movs	r2, #36	; 0x24
 8016d04:	4640      	mov	r0, r8
 8016d06:	f000 fef1 	bl	8017aec <memset>
 8016d0a:	4629      	mov	r1, r5
 8016d0c:	4833      	ldr	r0, [pc, #204]	; (8016ddc <MEMS_runMagCal+0x215c>)
 8016d0e:	f7ea f905 	bl	8000f1c <__aeabi_fdiv>
 8016d12:	4607      	mov	r7, r0
 8016d14:	ae21      	add	r6, sp, #132	; 0x84
 8016d16:	ad31      	add	r5, sp, #196	; 0xc4
 8016d18:	f855 1b04 	ldr.w	r1, [r5], #4
 8016d1c:	9806      	ldr	r0, [sp, #24]
 8016d1e:	f7ea f849 	bl	8000db4 <__aeabi_fmul>
 8016d22:	f001 fc95 	bl	8018650 <roundf>
 8016d26:	f7ea fa21 	bl	800116c <__aeabi_f2iz>
 8016d2a:	0123      	lsls	r3, r4, #4
 8016d2c:	3401      	adds	r4, #1
 8016d2e:	2c03      	cmp	r4, #3
 8016d30:	f826 0b02 	strh.w	r0, [r6], #2
 8016d34:	f848 7003 	str.w	r7, [r8, r3]
 8016d38:	d1ee      	bne.n	8016d18 <MEMS_runMagCal+0x2098>
 8016d3a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8016d3c:	ac1e      	add	r4, sp, #120	; 0x78
 8016d3e:	ab37      	add	r3, sp, #220	; 0xdc
 8016d40:	4642      	mov	r2, r8
 8016d42:	e9cd 3400 	strd	r3, r4, [sp]
 8016d46:	a921      	add	r1, sp, #132	; 0x84
 8016d48:	4633      	mov	r3, r6
 8016d4a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016d4c:	f7f6 fa28 	bl	800d1a0 <getMagStats.constprop.0>
 8016d50:	6824      	ldr	r4, [r4, #0]
 8016d52:	f8d9 0000 	ldr.w	r0, [r9]
 8016d56:	4621      	mov	r1, r4
 8016d58:	f7ea f82c 	bl	8000db4 <__aeabi_fmul>
 8016d5c:	4603      	mov	r3, r0
 8016d5e:	4621      	mov	r1, r4
 8016d60:	4620      	mov	r0, r4
 8016d62:	f8c9 3000 	str.w	r3, [r9]
 8016d66:	f7e9 ff1d 	bl	8000ba4 <__addsf3>
 8016d6a:	2300      	movs	r3, #0
 8016d6c:	4602      	mov	r2, r0
 8016d6e:	ad3a      	add	r5, sp, #232	; 0xe8
 8016d70:	e9c5 3300 	strd	r3, r3, [r5]
 8016d74:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8016d78:	60ab      	str	r3, [r5, #8]
 8016d7a:	61ab      	str	r3, [r5, #24]
 8016d7c:	4631      	mov	r1, r6
 8016d7e:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8016d80:	9207      	str	r2, [sp, #28]
 8016d82:	f7ea f8cb 	bl	8000f1c <__aeabi_fdiv>
 8016d86:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8016d88:	4683      	mov	fp, r0
 8016d8a:	4814      	ldr	r0, [pc, #80]	; (8016ddc <MEMS_runMagCal+0x215c>)
 8016d8c:	f7ea f8c6 	bl	8000f1c <__aeabi_fdiv>
 8016d90:	4634      	mov	r4, r6
 8016d92:	4606      	mov	r6, r0
 8016d94:	4621      	mov	r1, r4
 8016d96:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8016d98:	f8c8 6000 	str.w	r6, [r8]
 8016d9c:	f7ea f8be 	bl	8000f1c <__aeabi_fdiv>
 8016da0:	4603      	mov	r3, r0
 8016da2:	4621      	mov	r1, r4
 8016da4:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8016da6:	f8c8 6010 	str.w	r6, [r8, #16]
 8016daa:	9302      	str	r3, [sp, #8]
 8016dac:	f7ea f8b6 	bl	8000f1c <__aeabi_fdiv>
 8016db0:	4603      	mov	r3, r0
 8016db2:	9f37      	ldr	r7, [sp, #220]	; 0xdc
 8016db4:	2100      	movs	r1, #0
 8016db6:	4638      	mov	r0, r7
 8016db8:	f8c8 6020 	str.w	r6, [r8, #32]
 8016dbc:	9303      	str	r3, [sp, #12]
 8016dbe:	f7ea f997 	bl	80010f0 <__aeabi_fcmplt>
 8016dc2:	9a07      	ldr	r2, [sp, #28]
 8016dc4:	4614      	mov	r4, r2
 8016dc6:	b930      	cbnz	r0, 8016dd6 <MEMS_runMagCal+0x2156>
 8016dc8:	4610      	mov	r0, r2
 8016dca:	2100      	movs	r1, #0
 8016dcc:	f7ea f990 	bl	80010f0 <__aeabi_fcmplt>
 8016dd0:	2800      	cmp	r0, #0
 8016dd2:	f43e ad91 	beq.w	80158f8 <MEMS_runMagCal+0xc78>
 8016dd6:	2700      	movs	r7, #0
 8016dd8:	f7fe bd98 	b.w	801590c <MEMS_runMagCal+0xc8c>
 8016ddc:	423c0000 	.word	0x423c0000

08016de0 <MotionFX_GetStateSize>:
 8016de0:	f44f 6018 	mov.w	r0, #2432	; 0x980
 8016de4:	4770      	bx	lr
 8016de6:	bf00      	nop

08016de8 <MotionFX_initialize>:
 8016de8:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8016dec:	b570      	push	{r4, r5, r6, lr}
 8016dee:	f24c 2640 	movw	r6, #49728	; 0xc240
 8016df2:	4d3a      	ldr	r5, [pc, #232]	; (8016edc <MotionFX_initialize+0xf4>)
 8016df4:	493a      	ldr	r1, [pc, #232]	; (8016ee0 <MotionFX_initialize+0xf8>)
 8016df6:	682b      	ldr	r3, [r5, #0]
 8016df8:	4604      	mov	r4, r0
 8016dfa:	f023 0301 	bic.w	r3, r3, #1
 8016dfe:	602b      	str	r3, [r5, #0]
 8016e00:	680b      	ldr	r3, [r1, #0]
 8016e02:	b084      	sub	sp, #16
 8016e04:	4013      	ands	r3, r2
 8016e06:	42b3      	cmp	r3, r6
 8016e08:	d014      	beq.n	8016e34 <MotionFX_initialize+0x4c>
 8016e0a:	f24c 2070 	movw	r0, #49776	; 0xc270
 8016e0e:	680b      	ldr	r3, [r1, #0]
 8016e10:	4013      	ands	r3, r2
 8016e12:	4283      	cmp	r3, r0
 8016e14:	d00e      	beq.n	8016e34 <MotionFX_initialize+0x4c>
 8016e16:	4b33      	ldr	r3, [pc, #204]	; (8016ee4 <MotionFX_initialize+0xfc>)
 8016e18:	2201      	movs	r2, #1
 8016e1a:	4619      	mov	r1, r3
 8016e1c:	601a      	str	r2, [r3, #0]
 8016e1e:	680b      	ldr	r3, [r1, #0]
 8016e20:	2b00      	cmp	r3, #0
 8016e22:	d1fc      	bne.n	8016e1e <MotionFX_initialize+0x36>
 8016e24:	4b30      	ldr	r3, [pc, #192]	; (8016ee8 <MotionFX_initialize+0x100>)
 8016e26:	4931      	ldr	r1, [pc, #196]	; (8016eec <MotionFX_initialize+0x104>)
 8016e28:	4a31      	ldr	r2, [pc, #196]	; (8016ef0 <MotionFX_initialize+0x108>)
 8016e2a:	6019      	str	r1, [r3, #0]
 8016e2c:	681b      	ldr	r3, [r3, #0]
 8016e2e:	4293      	cmp	r3, r2
 8016e30:	d020      	beq.n	8016e74 <MotionFX_initialize+0x8c>
 8016e32:	e7fe      	b.n	8016e32 <MotionFX_initialize+0x4a>
 8016e34:	4b2f      	ldr	r3, [pc, #188]	; (8016ef4 <MotionFX_initialize+0x10c>)
 8016e36:	681b      	ldr	r3, [r3, #0]
 8016e38:	2b00      	cmp	r3, #0
 8016e3a:	d1ec      	bne.n	8016e16 <MotionFX_initialize+0x2e>
 8016e3c:	4a2e      	ldr	r2, [pc, #184]	; (8016ef8 <MotionFX_initialize+0x110>)
 8016e3e:	6813      	ldr	r3, [r2, #0]
 8016e40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016e44:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8016e48:	d006      	beq.n	8016e58 <MotionFX_initialize+0x70>
 8016e4a:	f240 4183 	movw	r1, #1155	; 0x483
 8016e4e:	6813      	ldr	r3, [r2, #0]
 8016e50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016e54:	428b      	cmp	r3, r1
 8016e56:	d1de      	bne.n	8016e16 <MotionFX_initialize+0x2e>
 8016e58:	4b28      	ldr	r3, [pc, #160]	; (8016efc <MotionFX_initialize+0x114>)
 8016e5a:	2201      	movs	r2, #1
 8016e5c:	4619      	mov	r1, r3
 8016e5e:	601a      	str	r2, [r3, #0]
 8016e60:	680b      	ldr	r3, [r1, #0]
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	d1fc      	bne.n	8016e60 <MotionFX_initialize+0x78>
 8016e66:	4b26      	ldr	r3, [pc, #152]	; (8016f00 <MotionFX_initialize+0x118>)
 8016e68:	4920      	ldr	r1, [pc, #128]	; (8016eec <MotionFX_initialize+0x104>)
 8016e6a:	4a21      	ldr	r2, [pc, #132]	; (8016ef0 <MotionFX_initialize+0x108>)
 8016e6c:	6019      	str	r1, [r3, #0]
 8016e6e:	681b      	ldr	r3, [r3, #0]
 8016e70:	4293      	cmp	r3, r2
 8016e72:	d1de      	bne.n	8016e32 <MotionFX_initialize+0x4a>
 8016e74:	2501      	movs	r5, #1
 8016e76:	4b23      	ldr	r3, [pc, #140]	; (8016f04 <MotionFX_initialize+0x11c>)
 8016e78:	4a23      	ldr	r2, [pc, #140]	; (8016f08 <MotionFX_initialize+0x120>)
 8016e7a:	4620      	mov	r0, r4
 8016e7c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8016e80:	7115      	strb	r5, [r2, #4]
 8016e82:	9303      	str	r3, [sp, #12]
 8016e84:	f7f6 fa7a 	bl	800d37c <MFX_emptyAttitude>
 8016e88:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8016e8c:	a901      	add	r1, sp, #4
 8016e8e:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8016e92:	f7f5 fc61 	bl	800c758 <updateOrientation>
 8016e96:	a903      	add	r1, sp, #12
 8016e98:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8016e9c:	f7f5 fc5c 	bl	800c758 <updateOrientation>
 8016ea0:	a902      	add	r1, sp, #8
 8016ea2:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8016ea6:	f7f5 fc57 	bl	800c758 <updateOrientation>
 8016eaa:	2000      	movs	r0, #0
 8016eac:	f44f 7181 	mov.w	r1, #258	; 0x102
 8016eb0:	f240 1201 	movw	r2, #257	; 0x101
 8016eb4:	7365      	strb	r5, [r4, #13]
 8016eb6:	f04f 557f 	mov.w	r5, #1069547520	; 0x3fc00000
 8016eba:	4b14      	ldr	r3, [pc, #80]	; (8016f0c <MotionFX_initialize+0x124>)
 8016ebc:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
 8016ec0:	80a1      	strh	r1, [r4, #4]
 8016ec2:	4813      	ldr	r0, [pc, #76]	; (8016f10 <MotionFX_initialize+0x128>)
 8016ec4:	4913      	ldr	r1, [pc, #76]	; (8016f14 <MotionFX_initialize+0x12c>)
 8016ec6:	81e2      	strh	r2, [r4, #14]
 8016ec8:	62a3      	str	r3, [r4, #40]	; 0x28
 8016eca:	4a13      	ldr	r2, [pc, #76]	; (8016f18 <MotionFX_initialize+0x130>)
 8016ecc:	4b13      	ldr	r3, [pc, #76]	; (8016f1c <MotionFX_initialize+0x134>)
 8016ece:	62e5      	str	r5, [r4, #44]	; 0x2c
 8016ed0:	6360      	str	r0, [r4, #52]	; 0x34
 8016ed2:	61a1      	str	r1, [r4, #24]
 8016ed4:	61e2      	str	r2, [r4, #28]
 8016ed6:	6223      	str	r3, [r4, #32]
 8016ed8:	b004      	add	sp, #16
 8016eda:	bd70      	pop	{r4, r5, r6, pc}
 8016edc:	e0002000 	.word	0xe0002000
 8016ee0:	e000ed00 	.word	0xe000ed00
 8016ee4:	40023008 	.word	0x40023008
 8016ee8:	40023000 	.word	0x40023000
 8016eec:	f407a5c2 	.word	0xf407a5c2
 8016ef0:	b5e8b5cd 	.word	0xb5e8b5cd
 8016ef4:	e0042000 	.word	0xe0042000
 8016ef8:	5c001000 	.word	0x5c001000
 8016efc:	58024c08 	.word	0x58024c08
 8016f00:	58024c00 	.word	0x58024c00
 8016f04:	00756e65 	.word	0x00756e65
 8016f08:	20000128 	.word	0x20000128
 8016f0c:	3f666666 	.word	0x3f666666
 8016f10:	3f2ac083 	.word	0x3f2ac083
 8016f14:	3a51b717 	.word	0x3a51b717
 8016f18:	3a378034 	.word	0x3a378034
 8016f1c:	3b378034 	.word	0x3b378034

08016f20 <MotionFX_setKnobs>:
 8016f20:	4b24      	ldr	r3, [pc, #144]	; (8016fb4 <MotionFX_setKnobs+0x94>)
 8016f22:	791b      	ldrb	r3, [r3, #4]
 8016f24:	b903      	cbnz	r3, 8016f28 <MotionFX_setKnobs+0x8>
 8016f26:	4770      	bx	lr
 8016f28:	2900      	cmp	r1, #0
 8016f2a:	d0fc      	beq.n	8016f26 <MotionFX_setKnobs+0x6>
 8016f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f2e:	4604      	mov	r4, r0
 8016f30:	4608      	mov	r0, r1
 8016f32:	460b      	mov	r3, r1
 8016f34:	460a      	mov	r2, r1
 8016f36:	684d      	ldr	r5, [r1, #4]
 8016f38:	680e      	ldr	r6, [r1, #0]
 8016f3a:	62e5      	str	r5, [r4, #44]	; 0x2c
 8016f3c:	688d      	ldr	r5, [r1, #8]
 8016f3e:	62a6      	str	r6, [r4, #40]	; 0x28
 8016f40:	6365      	str	r5, [r4, #52]	; 0x34
 8016f42:	7b0d      	ldrb	r5, [r1, #12]
 8016f44:	b085      	sub	sp, #20
 8016f46:	7165      	strb	r5, [r4, #5]
 8016f48:	694d      	ldr	r5, [r1, #20]
 8016f4a:	690e      	ldr	r6, [r1, #16]
 8016f4c:	61e5      	str	r5, [r4, #28]
 8016f4e:	698d      	ldr	r5, [r1, #24]
 8016f50:	61a6      	str	r6, [r4, #24]
 8016f52:	6225      	str	r5, [r4, #32]
 8016f54:	7f0d      	ldrb	r5, [r1, #28]
 8016f56:	7125      	strb	r5, [r4, #4]
 8016f58:	f891 5029 	ldrb.w	r5, [r1, #41]	; 0x29
 8016f5c:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
 8016f60:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8016f62:	f884 1978 	strb.w	r1, [r4, #2424]	; 0x978
 8016f66:	f830 6f21 	ldrh.w	r6, [r0, #33]!
 8016f6a:	f833 7f1d 	ldrh.w	r7, [r3, #29]!
 8016f6e:	7885      	ldrb	r5, [r0, #2]
 8016f70:	f832 0f25 	ldrh.w	r0, [r2, #37]!
 8016f74:	7899      	ldrb	r1, [r3, #2]
 8016f76:	f8ad 7004 	strh.w	r7, [sp, #4]
 8016f7a:	7893      	ldrb	r3, [r2, #2]
 8016f7c:	f88d 1006 	strb.w	r1, [sp, #6]
 8016f80:	f8ad 000c 	strh.w	r0, [sp, #12]
 8016f84:	a901      	add	r1, sp, #4
 8016f86:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8016f8a:	f8ad 6008 	strh.w	r6, [sp, #8]
 8016f8e:	f88d 500a 	strb.w	r5, [sp, #10]
 8016f92:	f88d 300e 	strb.w	r3, [sp, #14]
 8016f96:	f7f5 fbdf 	bl	800c758 <updateOrientation>
 8016f9a:	a903      	add	r1, sp, #12
 8016f9c:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8016fa0:	f7f5 fbda 	bl	800c758 <updateOrientation>
 8016fa4:	a902      	add	r1, sp, #8
 8016fa6:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8016faa:	f7f5 fbd5 	bl	800c758 <updateOrientation>
 8016fae:	b005      	add	sp, #20
 8016fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016fb2:	bf00      	nop
 8016fb4:	20000128 	.word	0x20000128

08016fb8 <MotionFX_getKnobs>:
 8016fb8:	b538      	push	{r3, r4, r5, lr}
 8016fba:	4b1c      	ldr	r3, [pc, #112]	; (801702c <MotionFX_getKnobs+0x74>)
 8016fbc:	791b      	ldrb	r3, [r3, #4]
 8016fbe:	b903      	cbnz	r3, 8016fc2 <MotionFX_getKnobs+0xa>
 8016fc0:	bd38      	pop	{r3, r4, r5, pc}
 8016fc2:	460a      	mov	r2, r1
 8016fc4:	2900      	cmp	r1, #0
 8016fc6:	d0fb      	beq.n	8016fc0 <MotionFX_getKnobs+0x8>
 8016fc8:	4604      	mov	r4, r0
 8016fca:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8016fcc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8016fce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016fd0:	6010      	str	r0, [r2, #0]
 8016fd2:	6051      	str	r1, [r2, #4]
 8016fd4:	6093      	str	r3, [r2, #8]
 8016fd6:	7963      	ldrb	r3, [r4, #5]
 8016fd8:	f102 011d 	add.w	r1, r2, #29
 8016fdc:	7313      	strb	r3, [r2, #12]
 8016fde:	69e0      	ldr	r0, [r4, #28]
 8016fe0:	6a23      	ldr	r3, [r4, #32]
 8016fe2:	69a5      	ldr	r5, [r4, #24]
 8016fe4:	6150      	str	r0, [r2, #20]
 8016fe6:	6115      	str	r5, [r2, #16]
 8016fe8:	6193      	str	r3, [r2, #24]
 8016fea:	7923      	ldrb	r3, [r4, #4]
 8016fec:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8016ff0:	7713      	strb	r3, [r2, #28]
 8016ff2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8016ff6:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
 8016ffa:	f894 3978 	ldrb.w	r3, [r4, #2424]	; 0x978
 8016ffe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8017000:	f7f5 fa0e 	bl	800c420 <findAxis>
 8017004:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8017008:	f102 0121 	add.w	r1, r2, #33	; 0x21
 801700c:	f7f5 fa08 	bl	800c420 <findAxis>
 8017010:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8017014:	f102 0125 	add.w	r1, r2, #37	; 0x25
 8017018:	f7f5 fa02 	bl	800c420 <findAxis>
 801701c:	2300      	movs	r3, #0
 801701e:	f882 3020 	strb.w	r3, [r2, #32]
 8017022:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8017026:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 801702a:	bd38      	pop	{r3, r4, r5, pc}
 801702c:	20000128 	.word	0x20000128

08017030 <MotionFX_enable_6X>:
 8017030:	4b0e      	ldr	r3, [pc, #56]	; (801706c <MotionFX_enable_6X+0x3c>)
 8017032:	791b      	ldrb	r3, [r3, #4]
 8017034:	b903      	cbnz	r3, 8017038 <MotionFX_enable_6X+0x8>
 8017036:	4770      	bx	lr
 8017038:	2900      	cmp	r1, #0
 801703a:	d0fc      	beq.n	8017036 <MotionFX_enable_6X+0x6>
 801703c:	b530      	push	{r4, r5, lr}
 801703e:	4604      	mov	r4, r0
 8017040:	b099      	sub	sp, #100	; 0x64
 8017042:	1d05      	adds	r5, r0, #4
 8017044:	4629      	mov	r1, r5
 8017046:	225c      	movs	r2, #92	; 0x5c
 8017048:	a801      	add	r0, sp, #4
 801704a:	f000 fd41 	bl	8017ad0 <memcpy>
 801704e:	4620      	mov	r0, r4
 8017050:	f7f6 f994 	bl	800d37c <MFX_emptyAttitude>
 8017054:	4628      	mov	r0, r5
 8017056:	225c      	movs	r2, #92	; 0x5c
 8017058:	a901      	add	r1, sp, #4
 801705a:	f000 fd39 	bl	8017ad0 <memcpy>
 801705e:	2300      	movs	r3, #0
 8017060:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8017064:	7363      	strb	r3, [r4, #13]
 8017066:	b019      	add	sp, #100	; 0x64
 8017068:	bd30      	pop	{r4, r5, pc}
 801706a:	bf00      	nop
 801706c:	20000128 	.word	0x20000128

08017070 <MotionFX_enable_9X>:
 8017070:	4b0e      	ldr	r3, [pc, #56]	; (80170ac <MotionFX_enable_9X+0x3c>)
 8017072:	791b      	ldrb	r3, [r3, #4]
 8017074:	b903      	cbnz	r3, 8017078 <MotionFX_enable_9X+0x8>
 8017076:	4770      	bx	lr
 8017078:	2900      	cmp	r1, #0
 801707a:	d0fc      	beq.n	8017076 <MotionFX_enable_9X+0x6>
 801707c:	b530      	push	{r4, r5, lr}
 801707e:	4604      	mov	r4, r0
 8017080:	b099      	sub	sp, #100	; 0x64
 8017082:	1d05      	adds	r5, r0, #4
 8017084:	4629      	mov	r1, r5
 8017086:	225c      	movs	r2, #92	; 0x5c
 8017088:	a801      	add	r0, sp, #4
 801708a:	f000 fd21 	bl	8017ad0 <memcpy>
 801708e:	4620      	mov	r0, r4
 8017090:	f7f6 f974 	bl	800d37c <MFX_emptyAttitude>
 8017094:	4628      	mov	r0, r5
 8017096:	225c      	movs	r2, #92	; 0x5c
 8017098:	a901      	add	r1, sp, #4
 801709a:	f000 fd19 	bl	8017ad0 <memcpy>
 801709e:	2301      	movs	r3, #1
 80170a0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 80170a4:	7363      	strb	r3, [r4, #13]
 80170a6:	b019      	add	sp, #100	; 0x64
 80170a8:	bd30      	pop	{r4, r5, pc}
 80170aa:	bf00      	nop
 80170ac:	20000128 	.word	0x20000128

080170b0 <MotionFX_update>:
 80170b0:	b410      	push	{r4}
 80170b2:	4c04      	ldr	r4, [pc, #16]	; (80170c4 <MotionFX_update+0x14>)
 80170b4:	7924      	ldrb	r4, [r4, #4]
 80170b6:	b90c      	cbnz	r4, 80170bc <MotionFX_update+0xc>
 80170b8:	bc10      	pop	{r4}
 80170ba:	4770      	bx	lr
 80170bc:	681b      	ldr	r3, [r3, #0]
 80170be:	bc10      	pop	{r4}
 80170c0:	f7fc bc56 	b.w	8013970 <iNemoEngine_API_Update>
 80170c4:	20000128 	.word	0x20000128

080170c8 <MotionFX_propagate>:
 80170c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170cc:	4d03      	ldr	r5, [pc, #12]	; (80170dc <MotionFX_propagate+0x14>)
 80170ce:	4604      	mov	r4, r0
 80170d0:	7928      	ldrb	r0, [r5, #4]
 80170d2:	b0a3      	sub	sp, #140	; 0x8c
 80170d4:	b920      	cbnz	r0, 80170e0 <MotionFX_propagate+0x18>
 80170d6:	b023      	add	sp, #140	; 0x8c
 80170d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170dc:	20000128 	.word	0x20000128
 80170e0:	4616      	mov	r6, r2
 80170e2:	4696      	mov	lr, r2
 80170e4:	f852 0f0c 	ldr.w	r0, [r2, #12]!
 80170e8:	460d      	mov	r5, r1
 80170ea:	6851      	ldr	r1, [r2, #4]
 80170ec:	6892      	ldr	r2, [r2, #8]
 80170ee:	f10d 0c54 	add.w	ip, sp, #84	; 0x54
 80170f2:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 80170f6:	6830      	ldr	r0, [r6, #0]
 80170f8:	6871      	ldr	r1, [r6, #4]
 80170fa:	68b2      	ldr	r2, [r6, #8]
 80170fc:	f8d3 a000 	ldr.w	sl, [r3]
 8017100:	ab12      	add	r3, sp, #72	; 0x48
 8017102:	c307      	stmia	r3!, {r0, r1, r2}
 8017104:	f85e 0f18 	ldr.w	r0, [lr, #24]!
 8017108:	af18      	add	r7, sp, #96	; 0x60
 801710a:	f8de 1004 	ldr.w	r1, [lr, #4]
 801710e:	f8de 2008 	ldr.w	r2, [lr, #8]
 8017112:	f104 093a 	add.w	r9, r4, #58	; 0x3a
 8017116:	c707      	stmia	r7!, {r0, r1, r2}
 8017118:	4649      	mov	r1, r9
 801711a:	aa15      	add	r2, sp, #84	; 0x54
 801711c:	a805      	add	r0, sp, #20
 801711e:	f7f5 f919 	bl	800c354 <rotVect>
 8017122:	aa18      	add	r2, sp, #96	; 0x60
 8017124:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 8017128:	a808      	add	r0, sp, #32
 801712a:	f7f5 f913 	bl	800c354 <rotVect>
 801712e:	f8d4 394c 	ldr.w	r3, [r4, #2380]	; 0x94c
 8017132:	2b09      	cmp	r3, #9
 8017134:	d837      	bhi.n	80171a6 <MotionFX_propagate+0xde>
 8017136:	f8dd b014 	ldr.w	fp, [sp, #20]
 801713a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801713e:	4659      	mov	r1, fp
 8017140:	4658      	mov	r0, fp
 8017142:	f7e9 fe37 	bl	8000db4 <__aeabi_fmul>
 8017146:	4641      	mov	r1, r8
 8017148:	4606      	mov	r6, r0
 801714a:	4640      	mov	r0, r8
 801714c:	f7e9 fe32 	bl	8000db4 <__aeabi_fmul>
 8017150:	4601      	mov	r1, r0
 8017152:	4630      	mov	r0, r6
 8017154:	f7e9 fd26 	bl	8000ba4 <__addsf3>
 8017158:	9f07      	ldr	r7, [sp, #28]
 801715a:	4606      	mov	r6, r0
 801715c:	4639      	mov	r1, r7
 801715e:	4638      	mov	r0, r7
 8017160:	f7e9 fe28 	bl	8000db4 <__aeabi_fmul>
 8017164:	4601      	mov	r1, r0
 8017166:	4630      	mov	r0, r6
 8017168:	f7e9 fd1c 	bl	8000ba4 <__addsf3>
 801716c:	f7e9 f9bc 	bl	80004e8 <__aeabi_f2d>
 8017170:	f001 faf6 	bl	8018760 <sqrt>
 8017174:	f7e9 fcc0 	bl	8000af8 <__aeabi_d2f>
 8017178:	4601      	mov	r1, r0
 801717a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 801717e:	f7e9 fecd 	bl	8000f1c <__aeabi_fdiv>
 8017182:	4606      	mov	r6, r0
 8017184:	4658      	mov	r0, fp
 8017186:	4631      	mov	r1, r6
 8017188:	f7e9 fe14 	bl	8000db4 <__aeabi_fmul>
 801718c:	4603      	mov	r3, r0
 801718e:	4631      	mov	r1, r6
 8017190:	4640      	mov	r0, r8
 8017192:	9305      	str	r3, [sp, #20]
 8017194:	f7e9 fe0e 	bl	8000db4 <__aeabi_fmul>
 8017198:	4603      	mov	r3, r0
 801719a:	4631      	mov	r1, r6
 801719c:	4638      	mov	r0, r7
 801719e:	9306      	str	r3, [sp, #24]
 80171a0:	f7e9 fe08 	bl	8000db4 <__aeabi_fmul>
 80171a4:	9007      	str	r0, [sp, #28]
 80171a6:	7920      	ldrb	r0, [r4, #4]
 80171a8:	2800      	cmp	r0, #0
 80171aa:	f000 8111 	beq.w	80173d0 <MotionFX_propagate+0x308>
 80171ae:	f7e9 fdad 	bl	8000d0c <__aeabi_i2f>
 80171b2:	4601      	mov	r1, r0
 80171b4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80171b8:	f7e9 feb0 	bl	8000f1c <__aeabi_fdiv>
 80171bc:	4606      	mov	r6, r0
 80171be:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80171c2:	4630      	mov	r0, r6
 80171c4:	4641      	mov	r1, r8
 80171c6:	f7e9 fdf5 	bl	8000db4 <__aeabi_fmul>
 80171ca:	4601      	mov	r1, r0
 80171cc:	f8d4 095c 	ldr.w	r0, [r4, #2396]	; 0x95c
 80171d0:	f7e9 fce8 	bl	8000ba4 <__addsf3>
 80171d4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80171d6:	f8c4 095c 	str.w	r0, [r4, #2396]	; 0x95c
 80171da:	4639      	mov	r1, r7
 80171dc:	4630      	mov	r0, r6
 80171de:	f7e9 fde9 	bl	8000db4 <__aeabi_fmul>
 80171e2:	4601      	mov	r1, r0
 80171e4:	f8d4 0960 	ldr.w	r0, [r4, #2400]	; 0x960
 80171e8:	f7e9 fcdc 	bl	8000ba4 <__addsf3>
 80171ec:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80171f0:	f8c4 0960 	str.w	r0, [r4, #2400]	; 0x960
 80171f4:	4659      	mov	r1, fp
 80171f6:	4630      	mov	r0, r6
 80171f8:	f7e9 fddc 	bl	8000db4 <__aeabi_fmul>
 80171fc:	4601      	mov	r1, r0
 80171fe:	f8d4 0964 	ldr.w	r0, [r4, #2404]	; 0x964
 8017202:	f7e9 fccf 	bl	8000ba4 <__addsf3>
 8017206:	4980      	ldr	r1, [pc, #512]	; (8017408 <MotionFX_propagate+0x340>)
 8017208:	f8c4 0964 	str.w	r0, [r4, #2404]	; 0x964
 801720c:	4640      	mov	r0, r8
 801720e:	f7e9 fdd1 	bl	8000db4 <__aeabi_fmul>
 8017212:	4680      	mov	r8, r0
 8017214:	497c      	ldr	r1, [pc, #496]	; (8017408 <MotionFX_propagate+0x340>)
 8017216:	4638      	mov	r0, r7
 8017218:	f8cd 8020 	str.w	r8, [sp, #32]
 801721c:	f7e9 fdca 	bl	8000db4 <__aeabi_fmul>
 8017220:	4607      	mov	r7, r0
 8017222:	4979      	ldr	r1, [pc, #484]	; (8017408 <MotionFX_propagate+0x340>)
 8017224:	4658      	mov	r0, fp
 8017226:	9709      	str	r7, [sp, #36]	; 0x24
 8017228:	f7e9 fdc4 	bl	8000db4 <__aeabi_fmul>
 801722c:	4606      	mov	r6, r0
 801722e:	f8d4 1940 	ldr.w	r1, [r4, #2368]	; 0x940
 8017232:	4640      	mov	r0, r8
 8017234:	960a      	str	r6, [sp, #40]	; 0x28
 8017236:	f7e9 fcb3 	bl	8000ba0 <__aeabi_fsub>
 801723a:	f8d4 1944 	ldr.w	r1, [r4, #2372]	; 0x944
 801723e:	4680      	mov	r8, r0
 8017240:	4638      	mov	r0, r7
 8017242:	f7e9 fcad 	bl	8000ba0 <__aeabi_fsub>
 8017246:	f8d4 1948 	ldr.w	r1, [r4, #2376]	; 0x948
 801724a:	4607      	mov	r7, r0
 801724c:	4630      	mov	r0, r6
 801724e:	f7e9 fca7 	bl	8000ba0 <__aeabi_fsub>
 8017252:	4641      	mov	r1, r8
 8017254:	4606      	mov	r6, r0
 8017256:	4640      	mov	r0, r8
 8017258:	f7e9 fdac 	bl	8000db4 <__aeabi_fmul>
 801725c:	4639      	mov	r1, r7
 801725e:	4683      	mov	fp, r0
 8017260:	4638      	mov	r0, r7
 8017262:	f7e9 fda7 	bl	8000db4 <__aeabi_fmul>
 8017266:	4601      	mov	r1, r0
 8017268:	4658      	mov	r0, fp
 801726a:	f7e9 fc9b 	bl	8000ba4 <__addsf3>
 801726e:	4631      	mov	r1, r6
 8017270:	4683      	mov	fp, r0
 8017272:	4630      	mov	r0, r6
 8017274:	f7e9 fd9e 	bl	8000db4 <__aeabi_fmul>
 8017278:	4601      	mov	r1, r0
 801727a:	4658      	mov	r0, fp
 801727c:	f7e9 fc92 	bl	8000ba4 <__addsf3>
 8017280:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8017284:	4683      	mov	fp, r0
 8017286:	4650      	mov	r0, sl
 8017288:	f7e9 fd94 	bl	8000db4 <__aeabi_fmul>
 801728c:	495f      	ldr	r1, [pc, #380]	; (801740c <MotionFX_propagate+0x344>)
 801728e:	4682      	mov	sl, r0
 8017290:	4658      	mov	r0, fp
 8017292:	f7e9 ff4b 	bl	800112c <__aeabi_fcmpgt>
 8017296:	f504 6213 	add.w	r2, r4, #2352	; 0x930
 801729a:	9203      	str	r2, [sp, #12]
 801729c:	2800      	cmp	r0, #0
 801729e:	f000 809c 	beq.w	80173da <MotionFX_propagate+0x312>
 80172a2:	4658      	mov	r0, fp
 80172a4:	f001 fac2 	bl	801882c <sqrtf>
 80172a8:	4651      	mov	r1, sl
 80172aa:	4682      	mov	sl, r0
 80172ac:	f7e9 fd82 	bl	8000db4 <__aeabi_fmul>
 80172b0:	4683      	mov	fp, r0
 80172b2:	f001 f9f3 	bl	801869c <sinf>
 80172b6:	4651      	mov	r1, sl
 80172b8:	f7e9 fe30 	bl	8000f1c <__aeabi_fdiv>
 80172bc:	4682      	mov	sl, r0
 80172be:	4640      	mov	r0, r8
 80172c0:	4651      	mov	r1, sl
 80172c2:	f7e9 fd77 	bl	8000db4 <__aeabi_fmul>
 80172c6:	4603      	mov	r3, r0
 80172c8:	4651      	mov	r1, sl
 80172ca:	4638      	mov	r0, r7
 80172cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80172ce:	f7e9 fd71 	bl	8000db4 <__aeabi_fmul>
 80172d2:	4603      	mov	r3, r0
 80172d4:	4651      	mov	r1, sl
 80172d6:	4630      	mov	r0, r6
 80172d8:	930c      	str	r3, [sp, #48]	; 0x30
 80172da:	f7e9 fd6b 	bl	8000db4 <__aeabi_fmul>
 80172de:	4603      	mov	r3, r0
 80172e0:	4658      	mov	r0, fp
 80172e2:	930d      	str	r3, [sp, #52]	; 0x34
 80172e4:	f001 f97c 	bl	80185e0 <cosf>
 80172e8:	9a03      	ldr	r2, [sp, #12]
 80172ea:	900e      	str	r0, [sp, #56]	; 0x38
 80172ec:	4611      	mov	r1, r2
 80172ee:	a80b      	add	r0, sp, #44	; 0x2c
 80172f0:	f7f5 fab8 	bl	800c864 <qmult>
 80172f4:	f8d4 a934 	ldr.w	sl, [r4, #2356]	; 0x934
 80172f8:	f8d4 8938 	ldr.w	r8, [r4, #2360]	; 0x938
 80172fc:	4651      	mov	r1, sl
 80172fe:	4650      	mov	r0, sl
 8017300:	f7e9 fd58 	bl	8000db4 <__aeabi_fmul>
 8017304:	4641      	mov	r1, r8
 8017306:	4606      	mov	r6, r0
 8017308:	4640      	mov	r0, r8
 801730a:	f7e9 fd53 	bl	8000db4 <__aeabi_fmul>
 801730e:	4601      	mov	r1, r0
 8017310:	4630      	mov	r0, r6
 8017312:	f7e9 fc47 	bl	8000ba4 <__addsf3>
 8017316:	f8d4 793c 	ldr.w	r7, [r4, #2364]	; 0x93c
 801731a:	4606      	mov	r6, r0
 801731c:	4639      	mov	r1, r7
 801731e:	4638      	mov	r0, r7
 8017320:	f7e9 fd48 	bl	8000db4 <__aeabi_fmul>
 8017324:	4601      	mov	r1, r0
 8017326:	4630      	mov	r0, r6
 8017328:	f7e9 fc3c 	bl	8000ba4 <__addsf3>
 801732c:	f8d4 b930 	ldr.w	fp, [r4, #2352]	; 0x930
 8017330:	4606      	mov	r6, r0
 8017332:	4659      	mov	r1, fp
 8017334:	4658      	mov	r0, fp
 8017336:	f7e9 fd3d 	bl	8000db4 <__aeabi_fmul>
 801733a:	4601      	mov	r1, r0
 801733c:	4630      	mov	r0, r6
 801733e:	f7e9 fc31 	bl	8000ba4 <__addsf3>
 8017342:	f001 fa73 	bl	801882c <sqrtf>
 8017346:	4601      	mov	r1, r0
 8017348:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 801734c:	f7e9 fde6 	bl	8000f1c <__aeabi_fdiv>
 8017350:	4606      	mov	r6, r0
 8017352:	4658      	mov	r0, fp
 8017354:	4631      	mov	r1, r6
 8017356:	f7e9 fd2d 	bl	8000db4 <__aeabi_fmul>
 801735a:	4631      	mov	r1, r6
 801735c:	f8c4 0930 	str.w	r0, [r4, #2352]	; 0x930
 8017360:	4650      	mov	r0, sl
 8017362:	f7e9 fd27 	bl	8000db4 <__aeabi_fmul>
 8017366:	4631      	mov	r1, r6
 8017368:	f8c4 0934 	str.w	r0, [r4, #2356]	; 0x934
 801736c:	4640      	mov	r0, r8
 801736e:	f7e9 fd21 	bl	8000db4 <__aeabi_fmul>
 8017372:	4631      	mov	r1, r6
 8017374:	f8c4 0938 	str.w	r0, [r4, #2360]	; 0x938
 8017378:	4638      	mov	r0, r7
 801737a:	f7e9 fd1b 	bl	8000db4 <__aeabi_fmul>
 801737e:	f8b4 3950 	ldrh.w	r3, [r4, #2384]	; 0x950
 8017382:	4649      	mov	r1, r9
 8017384:	3301      	adds	r3, #1
 8017386:	f8c4 093c 	str.w	r0, [r4, #2364]	; 0x93c
 801738a:	aa15      	add	r2, sp, #84	; 0x54
 801738c:	f8a4 3950 	strh.w	r3, [r4, #2384]	; 0x950
 8017390:	a80b      	add	r0, sp, #44	; 0x2c
 8017392:	f7f4 ffdf 	bl	800c354 <rotVect>
 8017396:	f8d4 0930 	ldr.w	r0, [r4, #2352]	; 0x930
 801739a:	f8d4 1934 	ldr.w	r1, [r4, #2356]	; 0x934
 801739e:	f8d4 2938 	ldr.w	r2, [r4, #2360]	; 0x938
 80173a2:	f8d4 393c 	ldr.w	r3, [r4, #2364]	; 0x93c
 80173a6:	60e8      	str	r0, [r5, #12]
 80173a8:	6129      	str	r1, [r5, #16]
 80173aa:	61ab      	str	r3, [r5, #24]
 80173ac:	616a      	str	r2, [r5, #20]
 80173ae:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80173b2:	f105 0328 	add.w	r3, r5, #40	; 0x28
 80173b6:	e9cd 3200 	strd	r3, r2, [sp]
 80173ba:	a90b      	add	r1, sp, #44	; 0x2c
 80173bc:	462a      	mov	r2, r5
 80173be:	f105 031c 	add.w	r3, r5, #28
 80173c2:	f105 000c 	add.w	r0, r5, #12
 80173c6:	f7f6 fb35 	bl	800da34 <output_update>
 80173ca:	b023      	add	sp, #140	; 0x8c
 80173cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173d0:	2301      	movs	r3, #1
 80173d2:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
 80173d6:	7123      	strb	r3, [r4, #4]
 80173d8:	e6f1      	b.n	80171be <MotionFX_propagate+0xf6>
 80173da:	4651      	mov	r1, sl
 80173dc:	4640      	mov	r0, r8
 80173de:	f7e9 fce9 	bl	8000db4 <__aeabi_fmul>
 80173e2:	4603      	mov	r3, r0
 80173e4:	4651      	mov	r1, sl
 80173e6:	4638      	mov	r0, r7
 80173e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80173ea:	f7e9 fce3 	bl	8000db4 <__aeabi_fmul>
 80173ee:	4603      	mov	r3, r0
 80173f0:	4651      	mov	r1, sl
 80173f2:	4630      	mov	r0, r6
 80173f4:	930c      	str	r3, [sp, #48]	; 0x30
 80173f6:	f7e9 fcdd 	bl	8000db4 <__aeabi_fmul>
 80173fa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80173fe:	9a03      	ldr	r2, [sp, #12]
 8017400:	900d      	str	r0, [sp, #52]	; 0x34
 8017402:	930e      	str	r3, [sp, #56]	; 0x38
 8017404:	e772      	b.n	80172ec <MotionFX_propagate+0x224>
 8017406:	bf00      	nop
 8017408:	3c8efa35 	.word	0x3c8efa35
 801740c:	38d1b718 	.word	0x38d1b718

08017410 <MotionFX_MagCal_init>:
 8017410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017414:	4c41      	ldr	r4, [pc, #260]	; (801751c <MotionFX_MagCal_init+0x10c>)
 8017416:	7923      	ldrb	r3, [r4, #4]
 8017418:	b90b      	cbnz	r3, 801741e <MotionFX_MagCal_init+0xe>
 801741a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801741e:	1e43      	subs	r3, r0, #1
 8017420:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017424:	4605      	mov	r5, r0
 8017426:	d2f8      	bcs.n	801741a <MotionFX_MagCal_init+0xa>
 8017428:	bb89      	cbnz	r1, 801748e <MotionFX_MagCal_init+0x7e>
 801742a:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
 801742e:	23c8      	movs	r3, #200	; 0xc8
 8017430:	fb93 f3f5 	sdiv	r3, r3, r5
 8017434:	b2db      	uxtb	r3, r3
 8017436:	2b0f      	cmp	r3, #15
 8017438:	bf28      	it	cs
 801743a:	230f      	movcs	r3, #15
 801743c:	4a38      	ldr	r2, [pc, #224]	; (8017520 <MotionFX_MagCal_init+0x110>)
 801743e:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
 8017442:	6015      	str	r5, [r2, #0]
 8017444:	1b40      	subs	r0, r0, r5
 8017446:	f884 33ce 	strb.w	r3, [r4, #974]	; 0x3ce
 801744a:	f7e9 fc5f 	bl	8000d0c <__aeabi_i2f>
 801744e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8017452:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017456:	f7e9 fe69 	bl	800112c <__aeabi_fcmpgt>
 801745a:	b22d      	sxth	r5, r5
 801745c:	b948      	cbnz	r0, 8017472 <MotionFX_MagCal_init+0x62>
 801745e:	4931      	ldr	r1, [pc, #196]	; (8017524 <MotionFX_MagCal_init+0x114>)
 8017460:	68e0      	ldr	r0, [r4, #12]
 8017462:	f7e9 fb9d 	bl	8000ba0 <__aeabi_fsub>
 8017466:	4930      	ldr	r1, [pc, #192]	; (8017528 <MotionFX_MagCal_init+0x118>)
 8017468:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801746c:	f7e9 fe5e 	bl	800112c <__aeabi_fcmpgt>
 8017470:	b140      	cbz	r0, 8017484 <MotionFX_MagCal_init+0x74>
 8017472:	2300      	movs	r3, #0
 8017474:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8017478:	4a2a      	ldr	r2, [pc, #168]	; (8017524 <MotionFX_MagCal_init+0x114>)
 801747a:	8165      	strh	r5, [r4, #10]
 801747c:	8223      	strh	r3, [r4, #16]
 801747e:	6163      	str	r3, [r4, #20]
 8017480:	8121      	strh	r1, [r4, #8]
 8017482:	60e2      	str	r2, [r4, #12]
 8017484:	2300      	movs	r3, #0
 8017486:	f884 3448 	strb.w	r3, [r4, #1096]	; 0x448
 801748a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801748e:	2600      	movs	r6, #0
 8017490:	f44f 0202 	mov.w	r2, #8519680	; 0x820000
 8017494:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8017498:	4b24      	ldr	r3, [pc, #144]	; (801752c <MotionFX_MagCal_init+0x11c>)
 801749a:	4631      	mov	r1, r6
 801749c:	6122      	str	r2, [r4, #16]
 801749e:	f8a4 0058 	strh.w	r0, [r4, #88]	; 0x58
 80174a2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80174a6:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 80174aa:	61a3      	str	r3, [r4, #24]
 80174ac:	6166      	str	r6, [r4, #20]
 80174ae:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
 80174b2:	6566      	str	r6, [r4, #84]	; 0x54
 80174b4:	83a6      	strh	r6, [r4, #28]
 80174b6:	f000 fb19 	bl	8017aec <memset>
 80174ba:	225f      	movs	r2, #95	; 0x5f
 80174bc:	23ff      	movs	r3, #255	; 0xff
 80174be:	f44f 7780 	mov.w	r7, #256	; 0x100
 80174c2:	f44f 6c70 	mov.w	ip, #3840	; 0xf00
 80174c6:	f04f 0800 	mov.w	r8, #0
 80174ca:	f04f 0900 	mov.w	r9, #0
 80174ce:	f884 20a9 	strb.w	r2, [r4, #169]	; 0xa9
 80174d2:	4631      	mov	r1, r6
 80174d4:	2230      	movs	r2, #48	; 0x30
 80174d6:	f104 0074 	add.w	r0, r4, #116	; 0x74
 80174da:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
 80174de:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 80174e2:	e9c4 8908 	strd	r8, r9, [r4, #32]
 80174e6:	62a6      	str	r6, [r4, #40]	; 0x28
 80174e8:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
 80174ec:	f8a4 c02c 	strh.w	ip, [r4, #44]	; 0x2c
 80174f0:	f000 fafc 	bl	8017aec <memset>
 80174f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80174f8:	f1a5 030a 	sub.w	r3, r5, #10
 80174fc:	b29b      	uxth	r3, r3
 80174fe:	2b32      	cmp	r3, #50	; 0x32
 8017500:	f8a4 7074 	strh.w	r7, [r4, #116]	; 0x74
 8017504:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
 8017508:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
 801750c:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
 8017510:	d88d      	bhi.n	801742e <MotionFX_MagCal_init+0x1e>
 8017512:	2301      	movs	r3, #1
 8017514:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8017518:	e789      	b.n	801742e <MotionFX_MagCal_init+0x1e>
 801751a:	bf00      	nop
 801751c:	20000128 	.word	0x20000128
 8017520:	20000000 	.word	0x20000000
 8017524:	3dcccccd 	.word	0x3dcccccd
 8017528:	3c23d70a 	.word	0x3c23d70a
 801752c:	20001a94 	.word	0x20001a94

08017530 <MotionFX_MagCal_run>:
 8017530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017534:	4c4d      	ldr	r4, [pc, #308]	; (801766c <MotionFX_MagCal_run+0x13c>)
 8017536:	7923      	ldrb	r3, [r4, #4]
 8017538:	2b00      	cmp	r3, #0
 801753a:	d066      	beq.n	801760a <MotionFX_MagCal_run+0xda>
 801753c:	6806      	ldr	r6, [r0, #0]
 801753e:	4605      	mov	r5, r0
 8017540:	2100      	movs	r1, #0
 8017542:	4630      	mov	r0, r6
 8017544:	f7e9 fde8 	bl	8001118 <__aeabi_fcmpge>
 8017548:	2800      	cmp	r0, #0
 801754a:	d060      	beq.n	801760e <MotionFX_MagCal_run+0xde>
 801754c:	4630      	mov	r0, r6
 801754e:	4948      	ldr	r1, [pc, #288]	; (8017670 <MotionFX_MagCal_run+0x140>)
 8017550:	f7e9 fc30 	bl	8000db4 <__aeabi_fmul>
 8017554:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8017558:	f7e9 fb24 	bl	8000ba4 <__addsf3>
 801755c:	f7e9 fe06 	bl	800116c <__aeabi_f2iz>
 8017560:	4606      	mov	r6, r0
 8017562:	686f      	ldr	r7, [r5, #4]
 8017564:	2100      	movs	r1, #0
 8017566:	4638      	mov	r0, r7
 8017568:	f7e9 fdd6 	bl	8001118 <__aeabi_fcmpge>
 801756c:	2800      	cmp	r0, #0
 801756e:	d071      	beq.n	8017654 <MotionFX_MagCal_run+0x124>
 8017570:	4638      	mov	r0, r7
 8017572:	493f      	ldr	r1, [pc, #252]	; (8017670 <MotionFX_MagCal_run+0x140>)
 8017574:	f7e9 fc1e 	bl	8000db4 <__aeabi_fmul>
 8017578:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 801757c:	f7e9 fb12 	bl	8000ba4 <__addsf3>
 8017580:	f7e9 fdf4 	bl	800116c <__aeabi_f2iz>
 8017584:	4607      	mov	r7, r0
 8017586:	f8d5 8008 	ldr.w	r8, [r5, #8]
 801758a:	2100      	movs	r1, #0
 801758c:	4640      	mov	r0, r8
 801758e:	f7e9 fdc3 	bl	8001118 <__aeabi_fcmpge>
 8017592:	2800      	cmp	r0, #0
 8017594:	d053      	beq.n	801763e <MotionFX_MagCal_run+0x10e>
 8017596:	4936      	ldr	r1, [pc, #216]	; (8017670 <MotionFX_MagCal_run+0x140>)
 8017598:	4640      	mov	r0, r8
 801759a:	f7e9 fc0b 	bl	8000db4 <__aeabi_fmul>
 801759e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80175a2:	f7e9 faff 	bl	8000ba4 <__addsf3>
 80175a6:	f7e9 fde1 	bl	800116c <__aeabi_f2iz>
 80175aa:	f894 3448 	ldrb.w	r3, [r4, #1096]	; 0x448
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	d13b      	bne.n	801762a <MotionFX_MagCal_run+0xfa>
 80175b2:	2101      	movs	r1, #1
 80175b4:	f884 13cc 	strb.w	r1, [r4, #972]	; 0x3cc
 80175b8:	4619      	mov	r1, r3
 80175ba:	68ea      	ldr	r2, [r5, #12]
 80175bc:	f8c4 23c8 	str.w	r2, [r4, #968]	; 0x3c8
 80175c0:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80175c4:	4296      	cmp	r6, r2
 80175c6:	bfa8      	it	ge
 80175c8:	4616      	movge	r6, r2
 80175ca:	4d2a      	ldr	r5, [pc, #168]	; (8017674 <MotionFX_MagCal_run+0x144>)
 80175cc:	4290      	cmp	r0, r2
 80175ce:	bfa8      	it	ge
 80175d0:	4610      	movge	r0, r2
 80175d2:	42ae      	cmp	r6, r5
 80175d4:	bfb8      	it	lt
 80175d6:	462e      	movlt	r6, r5
 80175d8:	42af      	cmp	r7, r5
 80175da:	db24      	blt.n	8017626 <MotionFX_MagCal_run+0xf6>
 80175dc:	42ba      	cmp	r2, r7
 80175de:	bfa8      	it	ge
 80175e0:	463a      	movge	r2, r7
 80175e2:	b215      	sxth	r5, r2
 80175e4:	4a23      	ldr	r2, [pc, #140]	; (8017674 <MotionFX_MagCal_run+0x144>)
 80175e6:	3301      	adds	r3, #1
 80175e8:	4290      	cmp	r0, r2
 80175ea:	bfb8      	it	lt
 80175ec:	4610      	movlt	r0, r2
 80175ee:	f894 23ce 	ldrb.w	r2, [r4, #974]	; 0x3ce
 80175f2:	b2db      	uxtb	r3, r3
 80175f4:	4421      	add	r1, r4
 80175f6:	4293      	cmp	r3, r2
 80175f8:	f884 3448 	strb.w	r3, [r4, #1096]	; 0x448
 80175fc:	f8a1 63d2 	strh.w	r6, [r1, #978]	; 0x3d2
 8017600:	f8a1 53d4 	strh.w	r5, [r1, #980]	; 0x3d4
 8017604:	f8a1 03d6 	strh.w	r0, [r1, #982]	; 0x3d6
 8017608:	d038      	beq.n	801767c <MotionFX_MagCal_run+0x14c>
 801760a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801760e:	4630      	mov	r0, r6
 8017610:	4917      	ldr	r1, [pc, #92]	; (8017670 <MotionFX_MagCal_run+0x140>)
 8017612:	f7e9 fbcf 	bl	8000db4 <__aeabi_fmul>
 8017616:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 801761a:	f7e9 fac1 	bl	8000ba0 <__aeabi_fsub>
 801761e:	f7e9 fda5 	bl	800116c <__aeabi_f2iz>
 8017622:	4606      	mov	r6, r0
 8017624:	e79d      	b.n	8017562 <MotionFX_MagCal_run+0x32>
 8017626:	4615      	mov	r5, r2
 8017628:	e7dc      	b.n	80175e4 <MotionFX_MagCal_run+0xb4>
 801762a:	4913      	ldr	r1, [pc, #76]	; (8017678 <MotionFX_MagCal_run+0x148>)
 801762c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 8017630:	680d      	ldr	r5, [r1, #0]
 8017632:	00d9      	lsls	r1, r3, #3
 8017634:	fb05 f503 	mul.w	r5, r5, r3
 8017638:	f8a2 53d0 	strh.w	r5, [r2, #976]	; 0x3d0
 801763c:	e7c0      	b.n	80175c0 <MotionFX_MagCal_run+0x90>
 801763e:	4640      	mov	r0, r8
 8017640:	490b      	ldr	r1, [pc, #44]	; (8017670 <MotionFX_MagCal_run+0x140>)
 8017642:	f7e9 fbb7 	bl	8000db4 <__aeabi_fmul>
 8017646:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 801764a:	f7e9 faa9 	bl	8000ba0 <__aeabi_fsub>
 801764e:	f7e9 fd8d 	bl	800116c <__aeabi_f2iz>
 8017652:	e7aa      	b.n	80175aa <MotionFX_MagCal_run+0x7a>
 8017654:	4638      	mov	r0, r7
 8017656:	4906      	ldr	r1, [pc, #24]	; (8017670 <MotionFX_MagCal_run+0x140>)
 8017658:	f7e9 fbac 	bl	8000db4 <__aeabi_fmul>
 801765c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8017660:	f7e9 fa9e 	bl	8000ba0 <__aeabi_fsub>
 8017664:	f7e9 fd82 	bl	800116c <__aeabi_f2iz>
 8017668:	4607      	mov	r7, r0
 801766a:	e78c      	b.n	8017586 <MotionFX_MagCal_run+0x56>
 801766c:	20000128 	.word	0x20000128
 8017670:	43fa0000 	.word	0x43fa0000
 8017674:	ffff8002 	.word	0xffff8002
 8017678:	20000000 	.word	0x20000000
 801767c:	2100      	movs	r1, #0
 801767e:	f894 33cc 	ldrb.w	r3, [r4, #972]	; 0x3cc
 8017682:	f8d4 63c8 	ldr.w	r6, [r4, #968]	; 0x3c8
 8017686:	f884 1448 	strb.w	r1, [r4, #1096]	; 0x448
 801768a:	2b00      	cmp	r3, #0
 801768c:	f000 8155 	beq.w	801793a <MotionFX_MagCal_run+0x40a>
 8017690:	e9d4 5105 	ldrd	r5, r1, [r4, #20]
 8017694:	8a60      	ldrh	r0, [r4, #18]
 8017696:	8a23      	ldrh	r3, [r4, #16]
 8017698:	2a00      	cmp	r2, #0
 801769a:	f000 814c 	beq.w	8017936 <MotionFX_MagCal_run+0x406>
 801769e:	2800      	cmp	r0, #0
 80176a0:	f000 8149 	beq.w	8017936 <MotionFX_MagCal_run+0x406>
 80176a4:	4283      	cmp	r3, r0
 80176a6:	bf28      	it	cs
 80176a8:	4603      	movcs	r3, r0
 80176aa:	3301      	adds	r3, #1
 80176ac:	b29b      	uxth	r3, r3
 80176ae:	4283      	cmp	r3, r0
 80176b0:	bf28      	it	cs
 80176b2:	4603      	movcs	r3, r0
 80176b4:	f06f 4560 	mvn.w	r5, #3758096384	; 0xe0000000
 80176b8:	f04f 0c01 	mov.w	ip, #1
 80176bc:	195f      	adds	r7, r3, r5
 80176be:	f801 c037 	strb.w	ip, [r1, r7, lsl #3]
 80176c2:	f8d4 e3d2 	ldr.w	lr, [r4, #978]	; 0x3d2
 80176c6:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 80176ca:	f8c7 e002 	str.w	lr, [r7, #2]
 80176ce:	f8b4 e3d6 	ldrh.w	lr, [r4, #982]	; 0x3d6
 80176d2:	4562      	cmp	r2, ip
 80176d4:	f8a7 e006 	strh.w	lr, [r7, #6]
 80176d8:	f000 8126 	beq.w	8017928 <MotionFX_MagCal_run+0x3f8>
 80176dc:	4463      	add	r3, ip
 80176de:	b29b      	uxth	r3, r3
 80176e0:	4283      	cmp	r3, r0
 80176e2:	bf28      	it	cs
 80176e4:	4603      	movcs	r3, r0
 80176e6:	195f      	adds	r7, r3, r5
 80176e8:	f801 c037 	strb.w	ip, [r1, r7, lsl #3]
 80176ec:	f8d4 e3da 	ldr.w	lr, [r4, #986]	; 0x3da
 80176f0:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 80176f4:	f8c7 e002 	str.w	lr, [r7, #2]
 80176f8:	f8b4 e3de 	ldrh.w	lr, [r4, #990]	; 0x3de
 80176fc:	2a02      	cmp	r2, #2
 80176fe:	f8a7 e006 	strh.w	lr, [r7, #6]
 8017702:	f000 8111 	beq.w	8017928 <MotionFX_MagCal_run+0x3f8>
 8017706:	4463      	add	r3, ip
 8017708:	b29b      	uxth	r3, r3
 801770a:	4283      	cmp	r3, r0
 801770c:	bf28      	it	cs
 801770e:	4603      	movcs	r3, r0
 8017710:	195f      	adds	r7, r3, r5
 8017712:	f801 c037 	strb.w	ip, [r1, r7, lsl #3]
 8017716:	f8d4 e3e2 	ldr.w	lr, [r4, #994]	; 0x3e2
 801771a:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 801771e:	f8c7 e002 	str.w	lr, [r7, #2]
 8017722:	f8b4 e3e6 	ldrh.w	lr, [r4, #998]	; 0x3e6
 8017726:	2a03      	cmp	r2, #3
 8017728:	f8a7 e006 	strh.w	lr, [r7, #6]
 801772c:	f000 80fc 	beq.w	8017928 <MotionFX_MagCal_run+0x3f8>
 8017730:	4463      	add	r3, ip
 8017732:	b29b      	uxth	r3, r3
 8017734:	4283      	cmp	r3, r0
 8017736:	bf28      	it	cs
 8017738:	4603      	movcs	r3, r0
 801773a:	195f      	adds	r7, r3, r5
 801773c:	f801 c037 	strb.w	ip, [r1, r7, lsl #3]
 8017740:	f8d4 e3ea 	ldr.w	lr, [r4, #1002]	; 0x3ea
 8017744:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 8017748:	f8c7 e002 	str.w	lr, [r7, #2]
 801774c:	f8b4 e3ee 	ldrh.w	lr, [r4, #1006]	; 0x3ee
 8017750:	2a04      	cmp	r2, #4
 8017752:	f8a7 e006 	strh.w	lr, [r7, #6]
 8017756:	f000 80e7 	beq.w	8017928 <MotionFX_MagCal_run+0x3f8>
 801775a:	4463      	add	r3, ip
 801775c:	b29b      	uxth	r3, r3
 801775e:	4283      	cmp	r3, r0
 8017760:	bf28      	it	cs
 8017762:	4603      	movcs	r3, r0
 8017764:	195f      	adds	r7, r3, r5
 8017766:	f801 c037 	strb.w	ip, [r1, r7, lsl #3]
 801776a:	f8d4 e3f2 	ldr.w	lr, [r4, #1010]	; 0x3f2
 801776e:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 8017772:	f8c7 e002 	str.w	lr, [r7, #2]
 8017776:	f8b4 e3f6 	ldrh.w	lr, [r4, #1014]	; 0x3f6
 801777a:	2a05      	cmp	r2, #5
 801777c:	f8a7 e006 	strh.w	lr, [r7, #6]
 8017780:	f000 80d2 	beq.w	8017928 <MotionFX_MagCal_run+0x3f8>
 8017784:	4463      	add	r3, ip
 8017786:	b29b      	uxth	r3, r3
 8017788:	4283      	cmp	r3, r0
 801778a:	bf28      	it	cs
 801778c:	4603      	movcs	r3, r0
 801778e:	441d      	add	r5, r3
 8017790:	f801 c035 	strb.w	ip, [r1, r5, lsl #3]
 8017794:	f8d4 73fa 	ldr.w	r7, [r4, #1018]	; 0x3fa
 8017798:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801779c:	f8c5 7002 	str.w	r7, [r5, #2]
 80177a0:	f8b4 73fe 	ldrh.w	r7, [r4, #1022]	; 0x3fe
 80177a4:	2a06      	cmp	r2, #6
 80177a6:	80ef      	strh	r7, [r5, #6]
 80177a8:	f000 80be 	beq.w	8017928 <MotionFX_MagCal_run+0x3f8>
 80177ac:	4463      	add	r3, ip
 80177ae:	b29b      	uxth	r3, r3
 80177b0:	4283      	cmp	r3, r0
 80177b2:	bf28      	it	cs
 80177b4:	4603      	movcs	r3, r0
 80177b6:	f06f 4560 	mvn.w	r5, #3758096384	; 0xe0000000
 80177ba:	4667      	mov	r7, ip
 80177bc:	eb03 0c05 	add.w	ip, r3, r5
 80177c0:	f801 703c 	strb.w	r7, [r1, ip, lsl #3]
 80177c4:	f8d4 e402 	ldr.w	lr, [r4, #1026]	; 0x402
 80177c8:	eb01 0ccc 	add.w	ip, r1, ip, lsl #3
 80177cc:	f8cc e002 	str.w	lr, [ip, #2]
 80177d0:	f8b4 e406 	ldrh.w	lr, [r4, #1030]	; 0x406
 80177d4:	2a07      	cmp	r2, #7
 80177d6:	f8ac e006 	strh.w	lr, [ip, #6]
 80177da:	f000 80a5 	beq.w	8017928 <MotionFX_MagCal_run+0x3f8>
 80177de:	443b      	add	r3, r7
 80177e0:	b29b      	uxth	r3, r3
 80177e2:	4283      	cmp	r3, r0
 80177e4:	bf28      	it	cs
 80177e6:	4603      	movcs	r3, r0
 80177e8:	eb03 0c05 	add.w	ip, r3, r5
 80177ec:	f801 703c 	strb.w	r7, [r1, ip, lsl #3]
 80177f0:	f8d4 e40a 	ldr.w	lr, [r4, #1034]	; 0x40a
 80177f4:	eb01 0ccc 	add.w	ip, r1, ip, lsl #3
 80177f8:	f8cc e002 	str.w	lr, [ip, #2]
 80177fc:	f8b4 e40e 	ldrh.w	lr, [r4, #1038]	; 0x40e
 8017800:	2a08      	cmp	r2, #8
 8017802:	f8ac e006 	strh.w	lr, [ip, #6]
 8017806:	f000 808f 	beq.w	8017928 <MotionFX_MagCal_run+0x3f8>
 801780a:	443b      	add	r3, r7
 801780c:	b29b      	uxth	r3, r3
 801780e:	4283      	cmp	r3, r0
 8017810:	bf28      	it	cs
 8017812:	4603      	movcs	r3, r0
 8017814:	eb03 0c05 	add.w	ip, r3, r5
 8017818:	f801 703c 	strb.w	r7, [r1, ip, lsl #3]
 801781c:	f8d4 e412 	ldr.w	lr, [r4, #1042]	; 0x412
 8017820:	eb01 0ccc 	add.w	ip, r1, ip, lsl #3
 8017824:	f8cc e002 	str.w	lr, [ip, #2]
 8017828:	f8b4 e416 	ldrh.w	lr, [r4, #1046]	; 0x416
 801782c:	2a09      	cmp	r2, #9
 801782e:	f8ac e006 	strh.w	lr, [ip, #6]
 8017832:	d079      	beq.n	8017928 <MotionFX_MagCal_run+0x3f8>
 8017834:	443b      	add	r3, r7
 8017836:	b29b      	uxth	r3, r3
 8017838:	4283      	cmp	r3, r0
 801783a:	bf28      	it	cs
 801783c:	4603      	movcs	r3, r0
 801783e:	eb03 0c05 	add.w	ip, r3, r5
 8017842:	f801 703c 	strb.w	r7, [r1, ip, lsl #3]
 8017846:	f8d4 e41a 	ldr.w	lr, [r4, #1050]	; 0x41a
 801784a:	eb01 0ccc 	add.w	ip, r1, ip, lsl #3
 801784e:	f8cc e002 	str.w	lr, [ip, #2]
 8017852:	f8b4 e41e 	ldrh.w	lr, [r4, #1054]	; 0x41e
 8017856:	2a0a      	cmp	r2, #10
 8017858:	f8ac e006 	strh.w	lr, [ip, #6]
 801785c:	d064      	beq.n	8017928 <MotionFX_MagCal_run+0x3f8>
 801785e:	443b      	add	r3, r7
 8017860:	b29b      	uxth	r3, r3
 8017862:	4283      	cmp	r3, r0
 8017864:	bf28      	it	cs
 8017866:	4603      	movcs	r3, r0
 8017868:	eb03 0c05 	add.w	ip, r3, r5
 801786c:	f801 703c 	strb.w	r7, [r1, ip, lsl #3]
 8017870:	f8d4 e422 	ldr.w	lr, [r4, #1058]	; 0x422
 8017874:	eb01 0ccc 	add.w	ip, r1, ip, lsl #3
 8017878:	f8cc e002 	str.w	lr, [ip, #2]
 801787c:	f8b4 e426 	ldrh.w	lr, [r4, #1062]	; 0x426
 8017880:	2a0b      	cmp	r2, #11
 8017882:	f8ac e006 	strh.w	lr, [ip, #6]
 8017886:	d04f      	beq.n	8017928 <MotionFX_MagCal_run+0x3f8>
 8017888:	443b      	add	r3, r7
 801788a:	b29b      	uxth	r3, r3
 801788c:	4283      	cmp	r3, r0
 801788e:	bf28      	it	cs
 8017890:	4603      	movcs	r3, r0
 8017892:	eb03 0c05 	add.w	ip, r3, r5
 8017896:	f801 703c 	strb.w	r7, [r1, ip, lsl #3]
 801789a:	f8d4 e42a 	ldr.w	lr, [r4, #1066]	; 0x42a
 801789e:	eb01 0ccc 	add.w	ip, r1, ip, lsl #3
 80178a2:	f8cc e002 	str.w	lr, [ip, #2]
 80178a6:	f8b4 e42e 	ldrh.w	lr, [r4, #1070]	; 0x42e
 80178aa:	2a0c      	cmp	r2, #12
 80178ac:	f8ac e006 	strh.w	lr, [ip, #6]
 80178b0:	d03a      	beq.n	8017928 <MotionFX_MagCal_run+0x3f8>
 80178b2:	443b      	add	r3, r7
 80178b4:	b29b      	uxth	r3, r3
 80178b6:	4283      	cmp	r3, r0
 80178b8:	bf28      	it	cs
 80178ba:	4603      	movcs	r3, r0
 80178bc:	eb03 0c05 	add.w	ip, r3, r5
 80178c0:	f801 703c 	strb.w	r7, [r1, ip, lsl #3]
 80178c4:	f8d4 e432 	ldr.w	lr, [r4, #1074]	; 0x432
 80178c8:	eb01 0ccc 	add.w	ip, r1, ip, lsl #3
 80178cc:	f8cc e002 	str.w	lr, [ip, #2]
 80178d0:	f8b4 e436 	ldrh.w	lr, [r4, #1078]	; 0x436
 80178d4:	2a0d      	cmp	r2, #13
 80178d6:	f8ac e006 	strh.w	lr, [ip, #6]
 80178da:	d025      	beq.n	8017928 <MotionFX_MagCal_run+0x3f8>
 80178dc:	443b      	add	r3, r7
 80178de:	b29b      	uxth	r3, r3
 80178e0:	4283      	cmp	r3, r0
 80178e2:	bf28      	it	cs
 80178e4:	4603      	movcs	r3, r0
 80178e6:	eb03 0c05 	add.w	ip, r3, r5
 80178ea:	f801 703c 	strb.w	r7, [r1, ip, lsl #3]
 80178ee:	f8d4 e43a 	ldr.w	lr, [r4, #1082]	; 0x43a
 80178f2:	eb01 0ccc 	add.w	ip, r1, ip, lsl #3
 80178f6:	f8cc e002 	str.w	lr, [ip, #2]
 80178fa:	f8b4 e43e 	ldrh.w	lr, [r4, #1086]	; 0x43e
 80178fe:	2a0e      	cmp	r2, #14
 8017900:	f8ac e006 	strh.w	lr, [ip, #6]
 8017904:	d010      	beq.n	8017928 <MotionFX_MagCal_run+0x3f8>
 8017906:	443b      	add	r3, r7
 8017908:	b29b      	uxth	r3, r3
 801790a:	4283      	cmp	r3, r0
 801790c:	bf28      	it	cs
 801790e:	4603      	movcs	r3, r0
 8017910:	441d      	add	r5, r3
 8017912:	f801 7035 	strb.w	r7, [r1, r5, lsl #3]
 8017916:	f8d4 0442 	ldr.w	r0, [r4, #1090]	; 0x442
 801791a:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 801791e:	f8c1 0002 	str.w	r0, [r1, #2]
 8017922:	f8b4 0446 	ldrh.w	r0, [r4, #1094]	; 0x446
 8017926:	80c8      	strh	r0, [r1, #6]
 8017928:	3a01      	subs	r2, #1
 801792a:	b2d2      	uxtb	r2, r2
 801792c:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8017930:	f8b2 53d0 	ldrh.w	r5, [r2, #976]	; 0x3d0
 8017934:	4435      	add	r5, r6
 8017936:	8223      	strh	r3, [r4, #16]
 8017938:	6165      	str	r5, [r4, #20]
 801793a:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 801793e:	2b00      	cmp	r3, #0
 8017940:	f43f ae63 	beq.w	801760a <MotionFX_MagCal_run+0xda>
 8017944:	8a22      	ldrh	r2, [r4, #16]
 8017946:	8a63      	ldrh	r3, [r4, #18]
 8017948:	4293      	cmp	r3, r2
 801794a:	d023      	beq.n	8017994 <MotionFX_MagCal_run+0x464>
 801794c:	b34a      	cbz	r2, 80179a2 <MotionFX_MagCal_run+0x472>
 801794e:	6963      	ldr	r3, [r4, #20]
 8017950:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 8017954:	3301      	adds	r3, #1
 8017956:	440b      	add	r3, r1
 8017958:	1c59      	adds	r1, r3, #1
 801795a:	d022      	beq.n	80179a2 <MotionFX_MagCal_run+0x472>
 801795c:	f503 501c 	add.w	r0, r3, #9984	; 0x2700
 8017960:	3010      	adds	r0, #16
 8017962:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8017964:	4281      	cmp	r1, r0
 8017966:	bf88      	it	hi
 8017968:	4619      	movhi	r1, r3
 801796a:	f8b4 0058 	ldrh.w	r0, [r4, #88]	; 0x58
 801796e:	bf88      	it	hi
 8017970:	6563      	strhi	r3, [r4, #84]	; 0x54
 8017972:	4401      	add	r1, r0
 8017974:	428b      	cmp	r3, r1
 8017976:	f4ff ae48 	bcc.w	801760a <MotionFX_MagCal_run+0xda>
 801797a:	b132      	cbz	r2, 801798a <MotionFX_MagCal_run+0x45a>
 801797c:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 8017980:	6964      	ldr	r4, [r4, #20]
 8017982:	3a01      	subs	r2, #1
 8017984:	fb01 4212 	mls	r2, r1, r2, r4
 8017988:	b292      	uxth	r2, r2
 801798a:	1a9b      	subs	r3, r3, r2
 801798c:	b21b      	sxth	r3, r3
 801798e:	4283      	cmp	r3, r0
 8017990:	f6ff ae3b 	blt.w	801760a <MotionFX_MagCal_run+0xda>
 8017994:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017998:	4904      	ldr	r1, [pc, #16]	; (80179ac <MotionFX_MagCal_run+0x47c>)
 801799a:	f101 0014 	add.w	r0, r1, #20
 801799e:	f7fd b96f 	b.w	8014c80 <MEMS_runMagCal>
 80179a2:	f242 7010 	movw	r0, #10000	; 0x2710
 80179a6:	2300      	movs	r3, #0
 80179a8:	e7db      	b.n	8017962 <MotionFX_MagCal_run+0x432>
 80179aa:	bf00      	nop
 80179ac:	20000130 	.word	0x20000130

080179b0 <MotionFX_MagCal_getParams>:
 80179b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179b4:	4f1d      	ldr	r7, [pc, #116]	; (8017a2c <MotionFX_MagCal_getParams+0x7c>)
 80179b6:	b08e      	sub	sp, #56	; 0x38
 80179b8:	793b      	ldrb	r3, [r7, #4]
 80179ba:	2b00      	cmp	r3, #0
 80179bc:	d032      	beq.n	8017a24 <MotionFX_MagCal_getParams+0x74>
 80179be:	f107 0574 	add.w	r5, r7, #116	; 0x74
 80179c2:	ac01      	add	r4, sp, #4
 80179c4:	4606      	mov	r6, r0
 80179c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80179c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80179ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80179cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80179ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80179d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80179d2:	682b      	ldr	r3, [r5, #0]
 80179d4:	9802      	ldr	r0, [sp, #8]
 80179d6:	6023      	str	r3, [r4, #0]
 80179d8:	f7e9 fbc8 	bl	800116c <__aeabi_f2iz>
 80179dc:	f897 8074 	ldrb.w	r8, [r7, #116]	; 0x74
 80179e0:	4607      	mov	r7, r0
 80179e2:	9803      	ldr	r0, [sp, #12]
 80179e4:	f7e9 fbc2 	bl	800116c <__aeabi_f2iz>
 80179e8:	4605      	mov	r5, r0
 80179ea:	9804      	ldr	r0, [sp, #16]
 80179ec:	f7e9 fbbe 	bl	800116c <__aeabi_f2iz>
 80179f0:	f886 800c 	strb.w	r8, [r6, #12]
 80179f4:	4604      	mov	r4, r0
 80179f6:	4638      	mov	r0, r7
 80179f8:	f7e9 f988 	bl	8000d0c <__aeabi_i2f>
 80179fc:	490c      	ldr	r1, [pc, #48]	; (8017a30 <MotionFX_MagCal_getParams+0x80>)
 80179fe:	f7e9 f9d9 	bl	8000db4 <__aeabi_fmul>
 8017a02:	4603      	mov	r3, r0
 8017a04:	4628      	mov	r0, r5
 8017a06:	6033      	str	r3, [r6, #0]
 8017a08:	f7e9 f980 	bl	8000d0c <__aeabi_i2f>
 8017a0c:	4908      	ldr	r1, [pc, #32]	; (8017a30 <MotionFX_MagCal_getParams+0x80>)
 8017a0e:	f7e9 f9d1 	bl	8000db4 <__aeabi_fmul>
 8017a12:	4603      	mov	r3, r0
 8017a14:	4620      	mov	r0, r4
 8017a16:	6073      	str	r3, [r6, #4]
 8017a18:	f7e9 f978 	bl	8000d0c <__aeabi_i2f>
 8017a1c:	4904      	ldr	r1, [pc, #16]	; (8017a30 <MotionFX_MagCal_getParams+0x80>)
 8017a1e:	f7e9 f9c9 	bl	8000db4 <__aeabi_fmul>
 8017a22:	60b0      	str	r0, [r6, #8]
 8017a24:	b00e      	add	sp, #56	; 0x38
 8017a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a2a:	bf00      	nop
 8017a2c:	20000128 	.word	0x20000128
 8017a30:	3b03126f 	.word	0x3b03126f

08017a34 <MotionFX_GetLibVersion>:
 8017a34:	b4f0      	push	{r4, r5, r6, r7}
 8017a36:	4b0f      	ldr	r3, [pc, #60]	; (8017a74 <MotionFX_GetLibVersion+0x40>)
 8017a38:	b08a      	sub	sp, #40	; 0x28
 8017a3a:	791f      	ldrb	r7, [r3, #4]
 8017a3c:	b1b7      	cbz	r7, 8017a6c <MotionFX_GetLibVersion+0x38>
 8017a3e:	4604      	mov	r4, r0
 8017a40:	2712      	movs	r7, #18
 8017a42:	4e0d      	ldr	r6, [pc, #52]	; (8017a78 <MotionFX_GetLibVersion+0x44>)
 8017a44:	ad01      	add	r5, sp, #4
 8017a46:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8017a48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017a4a:	6833      	ldr	r3, [r6, #0]
 8017a4c:	ae01      	add	r6, sp, #4
 8017a4e:	f825 3b02 	strh.w	r3, [r5], #2
 8017a52:	0c1b      	lsrs	r3, r3, #16
 8017a54:	702b      	strb	r3, [r5, #0]
 8017a56:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8017a58:	f8b6 c000 	ldrh.w	ip, [r6]
 8017a5c:	78b5      	ldrb	r5, [r6, #2]
 8017a5e:	6020      	str	r0, [r4, #0]
 8017a60:	6061      	str	r1, [r4, #4]
 8017a62:	60a2      	str	r2, [r4, #8]
 8017a64:	60e3      	str	r3, [r4, #12]
 8017a66:	f8a4 c010 	strh.w	ip, [r4, #16]
 8017a6a:	74a5      	strb	r5, [r4, #18]
 8017a6c:	4638      	mov	r0, r7
 8017a6e:	b00a      	add	sp, #40	; 0x28
 8017a70:	bcf0      	pop	{r4, r5, r6, r7}
 8017a72:	4770      	bx	lr
 8017a74:	20000128 	.word	0x20000128
 8017a78:	0801a5a0 	.word	0x0801a5a0

08017a7c <__errno>:
 8017a7c:	4b01      	ldr	r3, [pc, #4]	; (8017a84 <__errno+0x8>)
 8017a7e:	6818      	ldr	r0, [r3, #0]
 8017a80:	4770      	bx	lr
 8017a82:	bf00      	nop
 8017a84:	200000a0 	.word	0x200000a0

08017a88 <__libc_init_array>:
 8017a88:	b570      	push	{r4, r5, r6, lr}
 8017a8a:	4d0d      	ldr	r5, [pc, #52]	; (8017ac0 <__libc_init_array+0x38>)
 8017a8c:	4c0d      	ldr	r4, [pc, #52]	; (8017ac4 <__libc_init_array+0x3c>)
 8017a8e:	1b64      	subs	r4, r4, r5
 8017a90:	10a4      	asrs	r4, r4, #2
 8017a92:	2600      	movs	r6, #0
 8017a94:	42a6      	cmp	r6, r4
 8017a96:	d109      	bne.n	8017aac <__libc_init_array+0x24>
 8017a98:	4d0b      	ldr	r5, [pc, #44]	; (8017ac8 <__libc_init_array+0x40>)
 8017a9a:	4c0c      	ldr	r4, [pc, #48]	; (8017acc <__libc_init_array+0x44>)
 8017a9c:	f002 fd40 	bl	801a520 <_init>
 8017aa0:	1b64      	subs	r4, r4, r5
 8017aa2:	10a4      	asrs	r4, r4, #2
 8017aa4:	2600      	movs	r6, #0
 8017aa6:	42a6      	cmp	r6, r4
 8017aa8:	d105      	bne.n	8017ab6 <__libc_init_array+0x2e>
 8017aaa:	bd70      	pop	{r4, r5, r6, pc}
 8017aac:	f855 3b04 	ldr.w	r3, [r5], #4
 8017ab0:	4798      	blx	r3
 8017ab2:	3601      	adds	r6, #1
 8017ab4:	e7ee      	b.n	8017a94 <__libc_init_array+0xc>
 8017ab6:	f855 3b04 	ldr.w	r3, [r5], #4
 8017aba:	4798      	blx	r3
 8017abc:	3601      	adds	r6, #1
 8017abe:	e7f2      	b.n	8017aa6 <__libc_init_array+0x1e>
 8017ac0:	0801ab58 	.word	0x0801ab58
 8017ac4:	0801ab58 	.word	0x0801ab58
 8017ac8:	0801ab58 	.word	0x0801ab58
 8017acc:	0801ab5c 	.word	0x0801ab5c

08017ad0 <memcpy>:
 8017ad0:	440a      	add	r2, r1
 8017ad2:	4291      	cmp	r1, r2
 8017ad4:	f100 33ff 	add.w	r3, r0, #4294967295
 8017ad8:	d100      	bne.n	8017adc <memcpy+0xc>
 8017ada:	4770      	bx	lr
 8017adc:	b510      	push	{r4, lr}
 8017ade:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017ae2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017ae6:	4291      	cmp	r1, r2
 8017ae8:	d1f9      	bne.n	8017ade <memcpy+0xe>
 8017aea:	bd10      	pop	{r4, pc}

08017aec <memset>:
 8017aec:	4402      	add	r2, r0
 8017aee:	4603      	mov	r3, r0
 8017af0:	4293      	cmp	r3, r2
 8017af2:	d100      	bne.n	8017af6 <memset+0xa>
 8017af4:	4770      	bx	lr
 8017af6:	f803 1b01 	strb.w	r1, [r3], #1
 8017afa:	e7f9      	b.n	8017af0 <memset+0x4>

08017afc <sniprintf>:
 8017afc:	b40c      	push	{r2, r3}
 8017afe:	b530      	push	{r4, r5, lr}
 8017b00:	4b17      	ldr	r3, [pc, #92]	; (8017b60 <sniprintf+0x64>)
 8017b02:	1e0c      	subs	r4, r1, #0
 8017b04:	681d      	ldr	r5, [r3, #0]
 8017b06:	b09d      	sub	sp, #116	; 0x74
 8017b08:	da08      	bge.n	8017b1c <sniprintf+0x20>
 8017b0a:	238b      	movs	r3, #139	; 0x8b
 8017b0c:	602b      	str	r3, [r5, #0]
 8017b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8017b12:	b01d      	add	sp, #116	; 0x74
 8017b14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017b18:	b002      	add	sp, #8
 8017b1a:	4770      	bx	lr
 8017b1c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017b20:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017b24:	bf14      	ite	ne
 8017b26:	f104 33ff 	addne.w	r3, r4, #4294967295
 8017b2a:	4623      	moveq	r3, r4
 8017b2c:	9304      	str	r3, [sp, #16]
 8017b2e:	9307      	str	r3, [sp, #28]
 8017b30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017b34:	9002      	str	r0, [sp, #8]
 8017b36:	9006      	str	r0, [sp, #24]
 8017b38:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017b3c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017b3e:	ab21      	add	r3, sp, #132	; 0x84
 8017b40:	a902      	add	r1, sp, #8
 8017b42:	4628      	mov	r0, r5
 8017b44:	9301      	str	r3, [sp, #4]
 8017b46:	f000 f869 	bl	8017c1c <_svfiprintf_r>
 8017b4a:	1c43      	adds	r3, r0, #1
 8017b4c:	bfbc      	itt	lt
 8017b4e:	238b      	movlt	r3, #139	; 0x8b
 8017b50:	602b      	strlt	r3, [r5, #0]
 8017b52:	2c00      	cmp	r4, #0
 8017b54:	d0dd      	beq.n	8017b12 <sniprintf+0x16>
 8017b56:	9b02      	ldr	r3, [sp, #8]
 8017b58:	2200      	movs	r2, #0
 8017b5a:	701a      	strb	r2, [r3, #0]
 8017b5c:	e7d9      	b.n	8017b12 <sniprintf+0x16>
 8017b5e:	bf00      	nop
 8017b60:	200000a0 	.word	0x200000a0

08017b64 <__ssputs_r>:
 8017b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b68:	688e      	ldr	r6, [r1, #8]
 8017b6a:	429e      	cmp	r6, r3
 8017b6c:	4682      	mov	sl, r0
 8017b6e:	460c      	mov	r4, r1
 8017b70:	4690      	mov	r8, r2
 8017b72:	461f      	mov	r7, r3
 8017b74:	d838      	bhi.n	8017be8 <__ssputs_r+0x84>
 8017b76:	898a      	ldrh	r2, [r1, #12]
 8017b78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017b7c:	d032      	beq.n	8017be4 <__ssputs_r+0x80>
 8017b7e:	6825      	ldr	r5, [r4, #0]
 8017b80:	6909      	ldr	r1, [r1, #16]
 8017b82:	eba5 0901 	sub.w	r9, r5, r1
 8017b86:	6965      	ldr	r5, [r4, #20]
 8017b88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017b8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017b90:	3301      	adds	r3, #1
 8017b92:	444b      	add	r3, r9
 8017b94:	106d      	asrs	r5, r5, #1
 8017b96:	429d      	cmp	r5, r3
 8017b98:	bf38      	it	cc
 8017b9a:	461d      	movcc	r5, r3
 8017b9c:	0553      	lsls	r3, r2, #21
 8017b9e:	d531      	bpl.n	8017c04 <__ssputs_r+0xa0>
 8017ba0:	4629      	mov	r1, r5
 8017ba2:	f000 fb53 	bl	801824c <_malloc_r>
 8017ba6:	4606      	mov	r6, r0
 8017ba8:	b950      	cbnz	r0, 8017bc0 <__ssputs_r+0x5c>
 8017baa:	230c      	movs	r3, #12
 8017bac:	f8ca 3000 	str.w	r3, [sl]
 8017bb0:	89a3      	ldrh	r3, [r4, #12]
 8017bb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017bb6:	81a3      	strh	r3, [r4, #12]
 8017bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8017bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017bc0:	6921      	ldr	r1, [r4, #16]
 8017bc2:	464a      	mov	r2, r9
 8017bc4:	f7ff ff84 	bl	8017ad0 <memcpy>
 8017bc8:	89a3      	ldrh	r3, [r4, #12]
 8017bca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017bce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017bd2:	81a3      	strh	r3, [r4, #12]
 8017bd4:	6126      	str	r6, [r4, #16]
 8017bd6:	6165      	str	r5, [r4, #20]
 8017bd8:	444e      	add	r6, r9
 8017bda:	eba5 0509 	sub.w	r5, r5, r9
 8017bde:	6026      	str	r6, [r4, #0]
 8017be0:	60a5      	str	r5, [r4, #8]
 8017be2:	463e      	mov	r6, r7
 8017be4:	42be      	cmp	r6, r7
 8017be6:	d900      	bls.n	8017bea <__ssputs_r+0x86>
 8017be8:	463e      	mov	r6, r7
 8017bea:	6820      	ldr	r0, [r4, #0]
 8017bec:	4632      	mov	r2, r6
 8017bee:	4641      	mov	r1, r8
 8017bf0:	f000 faa8 	bl	8018144 <memmove>
 8017bf4:	68a3      	ldr	r3, [r4, #8]
 8017bf6:	1b9b      	subs	r3, r3, r6
 8017bf8:	60a3      	str	r3, [r4, #8]
 8017bfa:	6823      	ldr	r3, [r4, #0]
 8017bfc:	4433      	add	r3, r6
 8017bfe:	6023      	str	r3, [r4, #0]
 8017c00:	2000      	movs	r0, #0
 8017c02:	e7db      	b.n	8017bbc <__ssputs_r+0x58>
 8017c04:	462a      	mov	r2, r5
 8017c06:	f000 fb95 	bl	8018334 <_realloc_r>
 8017c0a:	4606      	mov	r6, r0
 8017c0c:	2800      	cmp	r0, #0
 8017c0e:	d1e1      	bne.n	8017bd4 <__ssputs_r+0x70>
 8017c10:	6921      	ldr	r1, [r4, #16]
 8017c12:	4650      	mov	r0, sl
 8017c14:	f000 fab0 	bl	8018178 <_free_r>
 8017c18:	e7c7      	b.n	8017baa <__ssputs_r+0x46>
	...

08017c1c <_svfiprintf_r>:
 8017c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c20:	4698      	mov	r8, r3
 8017c22:	898b      	ldrh	r3, [r1, #12]
 8017c24:	061b      	lsls	r3, r3, #24
 8017c26:	b09d      	sub	sp, #116	; 0x74
 8017c28:	4607      	mov	r7, r0
 8017c2a:	460d      	mov	r5, r1
 8017c2c:	4614      	mov	r4, r2
 8017c2e:	d50e      	bpl.n	8017c4e <_svfiprintf_r+0x32>
 8017c30:	690b      	ldr	r3, [r1, #16]
 8017c32:	b963      	cbnz	r3, 8017c4e <_svfiprintf_r+0x32>
 8017c34:	2140      	movs	r1, #64	; 0x40
 8017c36:	f000 fb09 	bl	801824c <_malloc_r>
 8017c3a:	6028      	str	r0, [r5, #0]
 8017c3c:	6128      	str	r0, [r5, #16]
 8017c3e:	b920      	cbnz	r0, 8017c4a <_svfiprintf_r+0x2e>
 8017c40:	230c      	movs	r3, #12
 8017c42:	603b      	str	r3, [r7, #0]
 8017c44:	f04f 30ff 	mov.w	r0, #4294967295
 8017c48:	e0d1      	b.n	8017dee <_svfiprintf_r+0x1d2>
 8017c4a:	2340      	movs	r3, #64	; 0x40
 8017c4c:	616b      	str	r3, [r5, #20]
 8017c4e:	2300      	movs	r3, #0
 8017c50:	9309      	str	r3, [sp, #36]	; 0x24
 8017c52:	2320      	movs	r3, #32
 8017c54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017c58:	f8cd 800c 	str.w	r8, [sp, #12]
 8017c5c:	2330      	movs	r3, #48	; 0x30
 8017c5e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8017e08 <_svfiprintf_r+0x1ec>
 8017c62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017c66:	f04f 0901 	mov.w	r9, #1
 8017c6a:	4623      	mov	r3, r4
 8017c6c:	469a      	mov	sl, r3
 8017c6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017c72:	b10a      	cbz	r2, 8017c78 <_svfiprintf_r+0x5c>
 8017c74:	2a25      	cmp	r2, #37	; 0x25
 8017c76:	d1f9      	bne.n	8017c6c <_svfiprintf_r+0x50>
 8017c78:	ebba 0b04 	subs.w	fp, sl, r4
 8017c7c:	d00b      	beq.n	8017c96 <_svfiprintf_r+0x7a>
 8017c7e:	465b      	mov	r3, fp
 8017c80:	4622      	mov	r2, r4
 8017c82:	4629      	mov	r1, r5
 8017c84:	4638      	mov	r0, r7
 8017c86:	f7ff ff6d 	bl	8017b64 <__ssputs_r>
 8017c8a:	3001      	adds	r0, #1
 8017c8c:	f000 80aa 	beq.w	8017de4 <_svfiprintf_r+0x1c8>
 8017c90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017c92:	445a      	add	r2, fp
 8017c94:	9209      	str	r2, [sp, #36]	; 0x24
 8017c96:	f89a 3000 	ldrb.w	r3, [sl]
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	f000 80a2 	beq.w	8017de4 <_svfiprintf_r+0x1c8>
 8017ca0:	2300      	movs	r3, #0
 8017ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8017ca6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017caa:	f10a 0a01 	add.w	sl, sl, #1
 8017cae:	9304      	str	r3, [sp, #16]
 8017cb0:	9307      	str	r3, [sp, #28]
 8017cb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017cb6:	931a      	str	r3, [sp, #104]	; 0x68
 8017cb8:	4654      	mov	r4, sl
 8017cba:	2205      	movs	r2, #5
 8017cbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017cc0:	4851      	ldr	r0, [pc, #324]	; (8017e08 <_svfiprintf_r+0x1ec>)
 8017cc2:	f7e8 fa5d 	bl	8000180 <memchr>
 8017cc6:	9a04      	ldr	r2, [sp, #16]
 8017cc8:	b9d8      	cbnz	r0, 8017d02 <_svfiprintf_r+0xe6>
 8017cca:	06d0      	lsls	r0, r2, #27
 8017ccc:	bf44      	itt	mi
 8017cce:	2320      	movmi	r3, #32
 8017cd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017cd4:	0711      	lsls	r1, r2, #28
 8017cd6:	bf44      	itt	mi
 8017cd8:	232b      	movmi	r3, #43	; 0x2b
 8017cda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017cde:	f89a 3000 	ldrb.w	r3, [sl]
 8017ce2:	2b2a      	cmp	r3, #42	; 0x2a
 8017ce4:	d015      	beq.n	8017d12 <_svfiprintf_r+0xf6>
 8017ce6:	9a07      	ldr	r2, [sp, #28]
 8017ce8:	4654      	mov	r4, sl
 8017cea:	2000      	movs	r0, #0
 8017cec:	f04f 0c0a 	mov.w	ip, #10
 8017cf0:	4621      	mov	r1, r4
 8017cf2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017cf6:	3b30      	subs	r3, #48	; 0x30
 8017cf8:	2b09      	cmp	r3, #9
 8017cfa:	d94e      	bls.n	8017d9a <_svfiprintf_r+0x17e>
 8017cfc:	b1b0      	cbz	r0, 8017d2c <_svfiprintf_r+0x110>
 8017cfe:	9207      	str	r2, [sp, #28]
 8017d00:	e014      	b.n	8017d2c <_svfiprintf_r+0x110>
 8017d02:	eba0 0308 	sub.w	r3, r0, r8
 8017d06:	fa09 f303 	lsl.w	r3, r9, r3
 8017d0a:	4313      	orrs	r3, r2
 8017d0c:	9304      	str	r3, [sp, #16]
 8017d0e:	46a2      	mov	sl, r4
 8017d10:	e7d2      	b.n	8017cb8 <_svfiprintf_r+0x9c>
 8017d12:	9b03      	ldr	r3, [sp, #12]
 8017d14:	1d19      	adds	r1, r3, #4
 8017d16:	681b      	ldr	r3, [r3, #0]
 8017d18:	9103      	str	r1, [sp, #12]
 8017d1a:	2b00      	cmp	r3, #0
 8017d1c:	bfbb      	ittet	lt
 8017d1e:	425b      	neglt	r3, r3
 8017d20:	f042 0202 	orrlt.w	r2, r2, #2
 8017d24:	9307      	strge	r3, [sp, #28]
 8017d26:	9307      	strlt	r3, [sp, #28]
 8017d28:	bfb8      	it	lt
 8017d2a:	9204      	strlt	r2, [sp, #16]
 8017d2c:	7823      	ldrb	r3, [r4, #0]
 8017d2e:	2b2e      	cmp	r3, #46	; 0x2e
 8017d30:	d10c      	bne.n	8017d4c <_svfiprintf_r+0x130>
 8017d32:	7863      	ldrb	r3, [r4, #1]
 8017d34:	2b2a      	cmp	r3, #42	; 0x2a
 8017d36:	d135      	bne.n	8017da4 <_svfiprintf_r+0x188>
 8017d38:	9b03      	ldr	r3, [sp, #12]
 8017d3a:	1d1a      	adds	r2, r3, #4
 8017d3c:	681b      	ldr	r3, [r3, #0]
 8017d3e:	9203      	str	r2, [sp, #12]
 8017d40:	2b00      	cmp	r3, #0
 8017d42:	bfb8      	it	lt
 8017d44:	f04f 33ff 	movlt.w	r3, #4294967295
 8017d48:	3402      	adds	r4, #2
 8017d4a:	9305      	str	r3, [sp, #20]
 8017d4c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8017e0c <_svfiprintf_r+0x1f0>
 8017d50:	7821      	ldrb	r1, [r4, #0]
 8017d52:	2203      	movs	r2, #3
 8017d54:	4650      	mov	r0, sl
 8017d56:	f7e8 fa13 	bl	8000180 <memchr>
 8017d5a:	b140      	cbz	r0, 8017d6e <_svfiprintf_r+0x152>
 8017d5c:	2340      	movs	r3, #64	; 0x40
 8017d5e:	eba0 000a 	sub.w	r0, r0, sl
 8017d62:	fa03 f000 	lsl.w	r0, r3, r0
 8017d66:	9b04      	ldr	r3, [sp, #16]
 8017d68:	4303      	orrs	r3, r0
 8017d6a:	3401      	adds	r4, #1
 8017d6c:	9304      	str	r3, [sp, #16]
 8017d6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d72:	4827      	ldr	r0, [pc, #156]	; (8017e10 <_svfiprintf_r+0x1f4>)
 8017d74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017d78:	2206      	movs	r2, #6
 8017d7a:	f7e8 fa01 	bl	8000180 <memchr>
 8017d7e:	2800      	cmp	r0, #0
 8017d80:	d038      	beq.n	8017df4 <_svfiprintf_r+0x1d8>
 8017d82:	4b24      	ldr	r3, [pc, #144]	; (8017e14 <_svfiprintf_r+0x1f8>)
 8017d84:	bb1b      	cbnz	r3, 8017dce <_svfiprintf_r+0x1b2>
 8017d86:	9b03      	ldr	r3, [sp, #12]
 8017d88:	3307      	adds	r3, #7
 8017d8a:	f023 0307 	bic.w	r3, r3, #7
 8017d8e:	3308      	adds	r3, #8
 8017d90:	9303      	str	r3, [sp, #12]
 8017d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d94:	4433      	add	r3, r6
 8017d96:	9309      	str	r3, [sp, #36]	; 0x24
 8017d98:	e767      	b.n	8017c6a <_svfiprintf_r+0x4e>
 8017d9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8017d9e:	460c      	mov	r4, r1
 8017da0:	2001      	movs	r0, #1
 8017da2:	e7a5      	b.n	8017cf0 <_svfiprintf_r+0xd4>
 8017da4:	2300      	movs	r3, #0
 8017da6:	3401      	adds	r4, #1
 8017da8:	9305      	str	r3, [sp, #20]
 8017daa:	4619      	mov	r1, r3
 8017dac:	f04f 0c0a 	mov.w	ip, #10
 8017db0:	4620      	mov	r0, r4
 8017db2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017db6:	3a30      	subs	r2, #48	; 0x30
 8017db8:	2a09      	cmp	r2, #9
 8017dba:	d903      	bls.n	8017dc4 <_svfiprintf_r+0x1a8>
 8017dbc:	2b00      	cmp	r3, #0
 8017dbe:	d0c5      	beq.n	8017d4c <_svfiprintf_r+0x130>
 8017dc0:	9105      	str	r1, [sp, #20]
 8017dc2:	e7c3      	b.n	8017d4c <_svfiprintf_r+0x130>
 8017dc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8017dc8:	4604      	mov	r4, r0
 8017dca:	2301      	movs	r3, #1
 8017dcc:	e7f0      	b.n	8017db0 <_svfiprintf_r+0x194>
 8017dce:	ab03      	add	r3, sp, #12
 8017dd0:	9300      	str	r3, [sp, #0]
 8017dd2:	462a      	mov	r2, r5
 8017dd4:	4b10      	ldr	r3, [pc, #64]	; (8017e18 <_svfiprintf_r+0x1fc>)
 8017dd6:	a904      	add	r1, sp, #16
 8017dd8:	4638      	mov	r0, r7
 8017dda:	f3af 8000 	nop.w
 8017dde:	1c42      	adds	r2, r0, #1
 8017de0:	4606      	mov	r6, r0
 8017de2:	d1d6      	bne.n	8017d92 <_svfiprintf_r+0x176>
 8017de4:	89ab      	ldrh	r3, [r5, #12]
 8017de6:	065b      	lsls	r3, r3, #25
 8017de8:	f53f af2c 	bmi.w	8017c44 <_svfiprintf_r+0x28>
 8017dec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017dee:	b01d      	add	sp, #116	; 0x74
 8017df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017df4:	ab03      	add	r3, sp, #12
 8017df6:	9300      	str	r3, [sp, #0]
 8017df8:	462a      	mov	r2, r5
 8017dfa:	4b07      	ldr	r3, [pc, #28]	; (8017e18 <_svfiprintf_r+0x1fc>)
 8017dfc:	a904      	add	r1, sp, #16
 8017dfe:	4638      	mov	r0, r7
 8017e00:	f000 f87a 	bl	8017ef8 <_printf_i>
 8017e04:	e7eb      	b.n	8017dde <_svfiprintf_r+0x1c2>
 8017e06:	bf00      	nop
 8017e08:	0801a6a0 	.word	0x0801a6a0
 8017e0c:	0801a6a6 	.word	0x0801a6a6
 8017e10:	0801a6aa 	.word	0x0801a6aa
 8017e14:	00000000 	.word	0x00000000
 8017e18:	08017b65 	.word	0x08017b65

08017e1c <_printf_common>:
 8017e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e20:	4616      	mov	r6, r2
 8017e22:	4699      	mov	r9, r3
 8017e24:	688a      	ldr	r2, [r1, #8]
 8017e26:	690b      	ldr	r3, [r1, #16]
 8017e28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017e2c:	4293      	cmp	r3, r2
 8017e2e:	bfb8      	it	lt
 8017e30:	4613      	movlt	r3, r2
 8017e32:	6033      	str	r3, [r6, #0]
 8017e34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017e38:	4607      	mov	r7, r0
 8017e3a:	460c      	mov	r4, r1
 8017e3c:	b10a      	cbz	r2, 8017e42 <_printf_common+0x26>
 8017e3e:	3301      	adds	r3, #1
 8017e40:	6033      	str	r3, [r6, #0]
 8017e42:	6823      	ldr	r3, [r4, #0]
 8017e44:	0699      	lsls	r1, r3, #26
 8017e46:	bf42      	ittt	mi
 8017e48:	6833      	ldrmi	r3, [r6, #0]
 8017e4a:	3302      	addmi	r3, #2
 8017e4c:	6033      	strmi	r3, [r6, #0]
 8017e4e:	6825      	ldr	r5, [r4, #0]
 8017e50:	f015 0506 	ands.w	r5, r5, #6
 8017e54:	d106      	bne.n	8017e64 <_printf_common+0x48>
 8017e56:	f104 0a19 	add.w	sl, r4, #25
 8017e5a:	68e3      	ldr	r3, [r4, #12]
 8017e5c:	6832      	ldr	r2, [r6, #0]
 8017e5e:	1a9b      	subs	r3, r3, r2
 8017e60:	42ab      	cmp	r3, r5
 8017e62:	dc26      	bgt.n	8017eb2 <_printf_common+0x96>
 8017e64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017e68:	1e13      	subs	r3, r2, #0
 8017e6a:	6822      	ldr	r2, [r4, #0]
 8017e6c:	bf18      	it	ne
 8017e6e:	2301      	movne	r3, #1
 8017e70:	0692      	lsls	r2, r2, #26
 8017e72:	d42b      	bmi.n	8017ecc <_printf_common+0xb0>
 8017e74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017e78:	4649      	mov	r1, r9
 8017e7a:	4638      	mov	r0, r7
 8017e7c:	47c0      	blx	r8
 8017e7e:	3001      	adds	r0, #1
 8017e80:	d01e      	beq.n	8017ec0 <_printf_common+0xa4>
 8017e82:	6823      	ldr	r3, [r4, #0]
 8017e84:	68e5      	ldr	r5, [r4, #12]
 8017e86:	6832      	ldr	r2, [r6, #0]
 8017e88:	f003 0306 	and.w	r3, r3, #6
 8017e8c:	2b04      	cmp	r3, #4
 8017e8e:	bf08      	it	eq
 8017e90:	1aad      	subeq	r5, r5, r2
 8017e92:	68a3      	ldr	r3, [r4, #8]
 8017e94:	6922      	ldr	r2, [r4, #16]
 8017e96:	bf0c      	ite	eq
 8017e98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017e9c:	2500      	movne	r5, #0
 8017e9e:	4293      	cmp	r3, r2
 8017ea0:	bfc4      	itt	gt
 8017ea2:	1a9b      	subgt	r3, r3, r2
 8017ea4:	18ed      	addgt	r5, r5, r3
 8017ea6:	2600      	movs	r6, #0
 8017ea8:	341a      	adds	r4, #26
 8017eaa:	42b5      	cmp	r5, r6
 8017eac:	d11a      	bne.n	8017ee4 <_printf_common+0xc8>
 8017eae:	2000      	movs	r0, #0
 8017eb0:	e008      	b.n	8017ec4 <_printf_common+0xa8>
 8017eb2:	2301      	movs	r3, #1
 8017eb4:	4652      	mov	r2, sl
 8017eb6:	4649      	mov	r1, r9
 8017eb8:	4638      	mov	r0, r7
 8017eba:	47c0      	blx	r8
 8017ebc:	3001      	adds	r0, #1
 8017ebe:	d103      	bne.n	8017ec8 <_printf_common+0xac>
 8017ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8017ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ec8:	3501      	adds	r5, #1
 8017eca:	e7c6      	b.n	8017e5a <_printf_common+0x3e>
 8017ecc:	18e1      	adds	r1, r4, r3
 8017ece:	1c5a      	adds	r2, r3, #1
 8017ed0:	2030      	movs	r0, #48	; 0x30
 8017ed2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017ed6:	4422      	add	r2, r4
 8017ed8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017edc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017ee0:	3302      	adds	r3, #2
 8017ee2:	e7c7      	b.n	8017e74 <_printf_common+0x58>
 8017ee4:	2301      	movs	r3, #1
 8017ee6:	4622      	mov	r2, r4
 8017ee8:	4649      	mov	r1, r9
 8017eea:	4638      	mov	r0, r7
 8017eec:	47c0      	blx	r8
 8017eee:	3001      	adds	r0, #1
 8017ef0:	d0e6      	beq.n	8017ec0 <_printf_common+0xa4>
 8017ef2:	3601      	adds	r6, #1
 8017ef4:	e7d9      	b.n	8017eaa <_printf_common+0x8e>
	...

08017ef8 <_printf_i>:
 8017ef8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017efc:	7e0f      	ldrb	r7, [r1, #24]
 8017efe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017f00:	2f78      	cmp	r7, #120	; 0x78
 8017f02:	4691      	mov	r9, r2
 8017f04:	4680      	mov	r8, r0
 8017f06:	460c      	mov	r4, r1
 8017f08:	469a      	mov	sl, r3
 8017f0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017f0e:	d807      	bhi.n	8017f20 <_printf_i+0x28>
 8017f10:	2f62      	cmp	r7, #98	; 0x62
 8017f12:	d80a      	bhi.n	8017f2a <_printf_i+0x32>
 8017f14:	2f00      	cmp	r7, #0
 8017f16:	f000 80d8 	beq.w	80180ca <_printf_i+0x1d2>
 8017f1a:	2f58      	cmp	r7, #88	; 0x58
 8017f1c:	f000 80a3 	beq.w	8018066 <_printf_i+0x16e>
 8017f20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017f24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017f28:	e03a      	b.n	8017fa0 <_printf_i+0xa8>
 8017f2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017f2e:	2b15      	cmp	r3, #21
 8017f30:	d8f6      	bhi.n	8017f20 <_printf_i+0x28>
 8017f32:	a101      	add	r1, pc, #4	; (adr r1, 8017f38 <_printf_i+0x40>)
 8017f34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017f38:	08017f91 	.word	0x08017f91
 8017f3c:	08017fa5 	.word	0x08017fa5
 8017f40:	08017f21 	.word	0x08017f21
 8017f44:	08017f21 	.word	0x08017f21
 8017f48:	08017f21 	.word	0x08017f21
 8017f4c:	08017f21 	.word	0x08017f21
 8017f50:	08017fa5 	.word	0x08017fa5
 8017f54:	08017f21 	.word	0x08017f21
 8017f58:	08017f21 	.word	0x08017f21
 8017f5c:	08017f21 	.word	0x08017f21
 8017f60:	08017f21 	.word	0x08017f21
 8017f64:	080180b1 	.word	0x080180b1
 8017f68:	08017fd5 	.word	0x08017fd5
 8017f6c:	08018093 	.word	0x08018093
 8017f70:	08017f21 	.word	0x08017f21
 8017f74:	08017f21 	.word	0x08017f21
 8017f78:	080180d3 	.word	0x080180d3
 8017f7c:	08017f21 	.word	0x08017f21
 8017f80:	08017fd5 	.word	0x08017fd5
 8017f84:	08017f21 	.word	0x08017f21
 8017f88:	08017f21 	.word	0x08017f21
 8017f8c:	0801809b 	.word	0x0801809b
 8017f90:	682b      	ldr	r3, [r5, #0]
 8017f92:	1d1a      	adds	r2, r3, #4
 8017f94:	681b      	ldr	r3, [r3, #0]
 8017f96:	602a      	str	r2, [r5, #0]
 8017f98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017f9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017fa0:	2301      	movs	r3, #1
 8017fa2:	e0a3      	b.n	80180ec <_printf_i+0x1f4>
 8017fa4:	6820      	ldr	r0, [r4, #0]
 8017fa6:	6829      	ldr	r1, [r5, #0]
 8017fa8:	0606      	lsls	r6, r0, #24
 8017faa:	f101 0304 	add.w	r3, r1, #4
 8017fae:	d50a      	bpl.n	8017fc6 <_printf_i+0xce>
 8017fb0:	680e      	ldr	r6, [r1, #0]
 8017fb2:	602b      	str	r3, [r5, #0]
 8017fb4:	2e00      	cmp	r6, #0
 8017fb6:	da03      	bge.n	8017fc0 <_printf_i+0xc8>
 8017fb8:	232d      	movs	r3, #45	; 0x2d
 8017fba:	4276      	negs	r6, r6
 8017fbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017fc0:	485e      	ldr	r0, [pc, #376]	; (801813c <_printf_i+0x244>)
 8017fc2:	230a      	movs	r3, #10
 8017fc4:	e019      	b.n	8017ffa <_printf_i+0x102>
 8017fc6:	680e      	ldr	r6, [r1, #0]
 8017fc8:	602b      	str	r3, [r5, #0]
 8017fca:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017fce:	bf18      	it	ne
 8017fd0:	b236      	sxthne	r6, r6
 8017fd2:	e7ef      	b.n	8017fb4 <_printf_i+0xbc>
 8017fd4:	682b      	ldr	r3, [r5, #0]
 8017fd6:	6820      	ldr	r0, [r4, #0]
 8017fd8:	1d19      	adds	r1, r3, #4
 8017fda:	6029      	str	r1, [r5, #0]
 8017fdc:	0601      	lsls	r1, r0, #24
 8017fde:	d501      	bpl.n	8017fe4 <_printf_i+0xec>
 8017fe0:	681e      	ldr	r6, [r3, #0]
 8017fe2:	e002      	b.n	8017fea <_printf_i+0xf2>
 8017fe4:	0646      	lsls	r6, r0, #25
 8017fe6:	d5fb      	bpl.n	8017fe0 <_printf_i+0xe8>
 8017fe8:	881e      	ldrh	r6, [r3, #0]
 8017fea:	4854      	ldr	r0, [pc, #336]	; (801813c <_printf_i+0x244>)
 8017fec:	2f6f      	cmp	r7, #111	; 0x6f
 8017fee:	bf0c      	ite	eq
 8017ff0:	2308      	moveq	r3, #8
 8017ff2:	230a      	movne	r3, #10
 8017ff4:	2100      	movs	r1, #0
 8017ff6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017ffa:	6865      	ldr	r5, [r4, #4]
 8017ffc:	60a5      	str	r5, [r4, #8]
 8017ffe:	2d00      	cmp	r5, #0
 8018000:	bfa2      	ittt	ge
 8018002:	6821      	ldrge	r1, [r4, #0]
 8018004:	f021 0104 	bicge.w	r1, r1, #4
 8018008:	6021      	strge	r1, [r4, #0]
 801800a:	b90e      	cbnz	r6, 8018010 <_printf_i+0x118>
 801800c:	2d00      	cmp	r5, #0
 801800e:	d04d      	beq.n	80180ac <_printf_i+0x1b4>
 8018010:	4615      	mov	r5, r2
 8018012:	fbb6 f1f3 	udiv	r1, r6, r3
 8018016:	fb03 6711 	mls	r7, r3, r1, r6
 801801a:	5dc7      	ldrb	r7, [r0, r7]
 801801c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018020:	4637      	mov	r7, r6
 8018022:	42bb      	cmp	r3, r7
 8018024:	460e      	mov	r6, r1
 8018026:	d9f4      	bls.n	8018012 <_printf_i+0x11a>
 8018028:	2b08      	cmp	r3, #8
 801802a:	d10b      	bne.n	8018044 <_printf_i+0x14c>
 801802c:	6823      	ldr	r3, [r4, #0]
 801802e:	07de      	lsls	r6, r3, #31
 8018030:	d508      	bpl.n	8018044 <_printf_i+0x14c>
 8018032:	6923      	ldr	r3, [r4, #16]
 8018034:	6861      	ldr	r1, [r4, #4]
 8018036:	4299      	cmp	r1, r3
 8018038:	bfde      	ittt	le
 801803a:	2330      	movle	r3, #48	; 0x30
 801803c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018040:	f105 35ff 	addle.w	r5, r5, #4294967295
 8018044:	1b52      	subs	r2, r2, r5
 8018046:	6122      	str	r2, [r4, #16]
 8018048:	f8cd a000 	str.w	sl, [sp]
 801804c:	464b      	mov	r3, r9
 801804e:	aa03      	add	r2, sp, #12
 8018050:	4621      	mov	r1, r4
 8018052:	4640      	mov	r0, r8
 8018054:	f7ff fee2 	bl	8017e1c <_printf_common>
 8018058:	3001      	adds	r0, #1
 801805a:	d14c      	bne.n	80180f6 <_printf_i+0x1fe>
 801805c:	f04f 30ff 	mov.w	r0, #4294967295
 8018060:	b004      	add	sp, #16
 8018062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018066:	4835      	ldr	r0, [pc, #212]	; (801813c <_printf_i+0x244>)
 8018068:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801806c:	6829      	ldr	r1, [r5, #0]
 801806e:	6823      	ldr	r3, [r4, #0]
 8018070:	f851 6b04 	ldr.w	r6, [r1], #4
 8018074:	6029      	str	r1, [r5, #0]
 8018076:	061d      	lsls	r5, r3, #24
 8018078:	d514      	bpl.n	80180a4 <_printf_i+0x1ac>
 801807a:	07df      	lsls	r7, r3, #31
 801807c:	bf44      	itt	mi
 801807e:	f043 0320 	orrmi.w	r3, r3, #32
 8018082:	6023      	strmi	r3, [r4, #0]
 8018084:	b91e      	cbnz	r6, 801808e <_printf_i+0x196>
 8018086:	6823      	ldr	r3, [r4, #0]
 8018088:	f023 0320 	bic.w	r3, r3, #32
 801808c:	6023      	str	r3, [r4, #0]
 801808e:	2310      	movs	r3, #16
 8018090:	e7b0      	b.n	8017ff4 <_printf_i+0xfc>
 8018092:	6823      	ldr	r3, [r4, #0]
 8018094:	f043 0320 	orr.w	r3, r3, #32
 8018098:	6023      	str	r3, [r4, #0]
 801809a:	2378      	movs	r3, #120	; 0x78
 801809c:	4828      	ldr	r0, [pc, #160]	; (8018140 <_printf_i+0x248>)
 801809e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80180a2:	e7e3      	b.n	801806c <_printf_i+0x174>
 80180a4:	0659      	lsls	r1, r3, #25
 80180a6:	bf48      	it	mi
 80180a8:	b2b6      	uxthmi	r6, r6
 80180aa:	e7e6      	b.n	801807a <_printf_i+0x182>
 80180ac:	4615      	mov	r5, r2
 80180ae:	e7bb      	b.n	8018028 <_printf_i+0x130>
 80180b0:	682b      	ldr	r3, [r5, #0]
 80180b2:	6826      	ldr	r6, [r4, #0]
 80180b4:	6961      	ldr	r1, [r4, #20]
 80180b6:	1d18      	adds	r0, r3, #4
 80180b8:	6028      	str	r0, [r5, #0]
 80180ba:	0635      	lsls	r5, r6, #24
 80180bc:	681b      	ldr	r3, [r3, #0]
 80180be:	d501      	bpl.n	80180c4 <_printf_i+0x1cc>
 80180c0:	6019      	str	r1, [r3, #0]
 80180c2:	e002      	b.n	80180ca <_printf_i+0x1d2>
 80180c4:	0670      	lsls	r0, r6, #25
 80180c6:	d5fb      	bpl.n	80180c0 <_printf_i+0x1c8>
 80180c8:	8019      	strh	r1, [r3, #0]
 80180ca:	2300      	movs	r3, #0
 80180cc:	6123      	str	r3, [r4, #16]
 80180ce:	4615      	mov	r5, r2
 80180d0:	e7ba      	b.n	8018048 <_printf_i+0x150>
 80180d2:	682b      	ldr	r3, [r5, #0]
 80180d4:	1d1a      	adds	r2, r3, #4
 80180d6:	602a      	str	r2, [r5, #0]
 80180d8:	681d      	ldr	r5, [r3, #0]
 80180da:	6862      	ldr	r2, [r4, #4]
 80180dc:	2100      	movs	r1, #0
 80180de:	4628      	mov	r0, r5
 80180e0:	f7e8 f84e 	bl	8000180 <memchr>
 80180e4:	b108      	cbz	r0, 80180ea <_printf_i+0x1f2>
 80180e6:	1b40      	subs	r0, r0, r5
 80180e8:	6060      	str	r0, [r4, #4]
 80180ea:	6863      	ldr	r3, [r4, #4]
 80180ec:	6123      	str	r3, [r4, #16]
 80180ee:	2300      	movs	r3, #0
 80180f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80180f4:	e7a8      	b.n	8018048 <_printf_i+0x150>
 80180f6:	6923      	ldr	r3, [r4, #16]
 80180f8:	462a      	mov	r2, r5
 80180fa:	4649      	mov	r1, r9
 80180fc:	4640      	mov	r0, r8
 80180fe:	47d0      	blx	sl
 8018100:	3001      	adds	r0, #1
 8018102:	d0ab      	beq.n	801805c <_printf_i+0x164>
 8018104:	6823      	ldr	r3, [r4, #0]
 8018106:	079b      	lsls	r3, r3, #30
 8018108:	d413      	bmi.n	8018132 <_printf_i+0x23a>
 801810a:	68e0      	ldr	r0, [r4, #12]
 801810c:	9b03      	ldr	r3, [sp, #12]
 801810e:	4298      	cmp	r0, r3
 8018110:	bfb8      	it	lt
 8018112:	4618      	movlt	r0, r3
 8018114:	e7a4      	b.n	8018060 <_printf_i+0x168>
 8018116:	2301      	movs	r3, #1
 8018118:	4632      	mov	r2, r6
 801811a:	4649      	mov	r1, r9
 801811c:	4640      	mov	r0, r8
 801811e:	47d0      	blx	sl
 8018120:	3001      	adds	r0, #1
 8018122:	d09b      	beq.n	801805c <_printf_i+0x164>
 8018124:	3501      	adds	r5, #1
 8018126:	68e3      	ldr	r3, [r4, #12]
 8018128:	9903      	ldr	r1, [sp, #12]
 801812a:	1a5b      	subs	r3, r3, r1
 801812c:	42ab      	cmp	r3, r5
 801812e:	dcf2      	bgt.n	8018116 <_printf_i+0x21e>
 8018130:	e7eb      	b.n	801810a <_printf_i+0x212>
 8018132:	2500      	movs	r5, #0
 8018134:	f104 0619 	add.w	r6, r4, #25
 8018138:	e7f5      	b.n	8018126 <_printf_i+0x22e>
 801813a:	bf00      	nop
 801813c:	0801a6b1 	.word	0x0801a6b1
 8018140:	0801a6c2 	.word	0x0801a6c2

08018144 <memmove>:
 8018144:	4288      	cmp	r0, r1
 8018146:	b510      	push	{r4, lr}
 8018148:	eb01 0402 	add.w	r4, r1, r2
 801814c:	d902      	bls.n	8018154 <memmove+0x10>
 801814e:	4284      	cmp	r4, r0
 8018150:	4623      	mov	r3, r4
 8018152:	d807      	bhi.n	8018164 <memmove+0x20>
 8018154:	1e43      	subs	r3, r0, #1
 8018156:	42a1      	cmp	r1, r4
 8018158:	d008      	beq.n	801816c <memmove+0x28>
 801815a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801815e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018162:	e7f8      	b.n	8018156 <memmove+0x12>
 8018164:	4402      	add	r2, r0
 8018166:	4601      	mov	r1, r0
 8018168:	428a      	cmp	r2, r1
 801816a:	d100      	bne.n	801816e <memmove+0x2a>
 801816c:	bd10      	pop	{r4, pc}
 801816e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018172:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018176:	e7f7      	b.n	8018168 <memmove+0x24>

08018178 <_free_r>:
 8018178:	b538      	push	{r3, r4, r5, lr}
 801817a:	4605      	mov	r5, r0
 801817c:	2900      	cmp	r1, #0
 801817e:	d041      	beq.n	8018204 <_free_r+0x8c>
 8018180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018184:	1f0c      	subs	r4, r1, #4
 8018186:	2b00      	cmp	r3, #0
 8018188:	bfb8      	it	lt
 801818a:	18e4      	addlt	r4, r4, r3
 801818c:	f000 f912 	bl	80183b4 <__malloc_lock>
 8018190:	4a1d      	ldr	r2, [pc, #116]	; (8018208 <_free_r+0x90>)
 8018192:	6813      	ldr	r3, [r2, #0]
 8018194:	b933      	cbnz	r3, 80181a4 <_free_r+0x2c>
 8018196:	6063      	str	r3, [r4, #4]
 8018198:	6014      	str	r4, [r2, #0]
 801819a:	4628      	mov	r0, r5
 801819c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80181a0:	f000 b90e 	b.w	80183c0 <__malloc_unlock>
 80181a4:	42a3      	cmp	r3, r4
 80181a6:	d908      	bls.n	80181ba <_free_r+0x42>
 80181a8:	6820      	ldr	r0, [r4, #0]
 80181aa:	1821      	adds	r1, r4, r0
 80181ac:	428b      	cmp	r3, r1
 80181ae:	bf01      	itttt	eq
 80181b0:	6819      	ldreq	r1, [r3, #0]
 80181b2:	685b      	ldreq	r3, [r3, #4]
 80181b4:	1809      	addeq	r1, r1, r0
 80181b6:	6021      	streq	r1, [r4, #0]
 80181b8:	e7ed      	b.n	8018196 <_free_r+0x1e>
 80181ba:	461a      	mov	r2, r3
 80181bc:	685b      	ldr	r3, [r3, #4]
 80181be:	b10b      	cbz	r3, 80181c4 <_free_r+0x4c>
 80181c0:	42a3      	cmp	r3, r4
 80181c2:	d9fa      	bls.n	80181ba <_free_r+0x42>
 80181c4:	6811      	ldr	r1, [r2, #0]
 80181c6:	1850      	adds	r0, r2, r1
 80181c8:	42a0      	cmp	r0, r4
 80181ca:	d10b      	bne.n	80181e4 <_free_r+0x6c>
 80181cc:	6820      	ldr	r0, [r4, #0]
 80181ce:	4401      	add	r1, r0
 80181d0:	1850      	adds	r0, r2, r1
 80181d2:	4283      	cmp	r3, r0
 80181d4:	6011      	str	r1, [r2, #0]
 80181d6:	d1e0      	bne.n	801819a <_free_r+0x22>
 80181d8:	6818      	ldr	r0, [r3, #0]
 80181da:	685b      	ldr	r3, [r3, #4]
 80181dc:	6053      	str	r3, [r2, #4]
 80181de:	4401      	add	r1, r0
 80181e0:	6011      	str	r1, [r2, #0]
 80181e2:	e7da      	b.n	801819a <_free_r+0x22>
 80181e4:	d902      	bls.n	80181ec <_free_r+0x74>
 80181e6:	230c      	movs	r3, #12
 80181e8:	602b      	str	r3, [r5, #0]
 80181ea:	e7d6      	b.n	801819a <_free_r+0x22>
 80181ec:	6820      	ldr	r0, [r4, #0]
 80181ee:	1821      	adds	r1, r4, r0
 80181f0:	428b      	cmp	r3, r1
 80181f2:	bf04      	itt	eq
 80181f4:	6819      	ldreq	r1, [r3, #0]
 80181f6:	685b      	ldreq	r3, [r3, #4]
 80181f8:	6063      	str	r3, [r4, #4]
 80181fa:	bf04      	itt	eq
 80181fc:	1809      	addeq	r1, r1, r0
 80181fe:	6021      	streq	r1, [r4, #0]
 8018200:	6054      	str	r4, [r2, #4]
 8018202:	e7ca      	b.n	801819a <_free_r+0x22>
 8018204:	bd38      	pop	{r3, r4, r5, pc}
 8018206:	bf00      	nop
 8018208:	20001a80 	.word	0x20001a80

0801820c <sbrk_aligned>:
 801820c:	b570      	push	{r4, r5, r6, lr}
 801820e:	4e0e      	ldr	r6, [pc, #56]	; (8018248 <sbrk_aligned+0x3c>)
 8018210:	460c      	mov	r4, r1
 8018212:	6831      	ldr	r1, [r6, #0]
 8018214:	4605      	mov	r5, r0
 8018216:	b911      	cbnz	r1, 801821e <sbrk_aligned+0x12>
 8018218:	f000 f8bc 	bl	8018394 <_sbrk_r>
 801821c:	6030      	str	r0, [r6, #0]
 801821e:	4621      	mov	r1, r4
 8018220:	4628      	mov	r0, r5
 8018222:	f000 f8b7 	bl	8018394 <_sbrk_r>
 8018226:	1c43      	adds	r3, r0, #1
 8018228:	d00a      	beq.n	8018240 <sbrk_aligned+0x34>
 801822a:	1cc4      	adds	r4, r0, #3
 801822c:	f024 0403 	bic.w	r4, r4, #3
 8018230:	42a0      	cmp	r0, r4
 8018232:	d007      	beq.n	8018244 <sbrk_aligned+0x38>
 8018234:	1a21      	subs	r1, r4, r0
 8018236:	4628      	mov	r0, r5
 8018238:	f000 f8ac 	bl	8018394 <_sbrk_r>
 801823c:	3001      	adds	r0, #1
 801823e:	d101      	bne.n	8018244 <sbrk_aligned+0x38>
 8018240:	f04f 34ff 	mov.w	r4, #4294967295
 8018244:	4620      	mov	r0, r4
 8018246:	bd70      	pop	{r4, r5, r6, pc}
 8018248:	20001a84 	.word	0x20001a84

0801824c <_malloc_r>:
 801824c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018250:	1ccd      	adds	r5, r1, #3
 8018252:	f025 0503 	bic.w	r5, r5, #3
 8018256:	3508      	adds	r5, #8
 8018258:	2d0c      	cmp	r5, #12
 801825a:	bf38      	it	cc
 801825c:	250c      	movcc	r5, #12
 801825e:	2d00      	cmp	r5, #0
 8018260:	4607      	mov	r7, r0
 8018262:	db01      	blt.n	8018268 <_malloc_r+0x1c>
 8018264:	42a9      	cmp	r1, r5
 8018266:	d905      	bls.n	8018274 <_malloc_r+0x28>
 8018268:	230c      	movs	r3, #12
 801826a:	603b      	str	r3, [r7, #0]
 801826c:	2600      	movs	r6, #0
 801826e:	4630      	mov	r0, r6
 8018270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018274:	4e2e      	ldr	r6, [pc, #184]	; (8018330 <_malloc_r+0xe4>)
 8018276:	f000 f89d 	bl	80183b4 <__malloc_lock>
 801827a:	6833      	ldr	r3, [r6, #0]
 801827c:	461c      	mov	r4, r3
 801827e:	bb34      	cbnz	r4, 80182ce <_malloc_r+0x82>
 8018280:	4629      	mov	r1, r5
 8018282:	4638      	mov	r0, r7
 8018284:	f7ff ffc2 	bl	801820c <sbrk_aligned>
 8018288:	1c43      	adds	r3, r0, #1
 801828a:	4604      	mov	r4, r0
 801828c:	d14d      	bne.n	801832a <_malloc_r+0xde>
 801828e:	6834      	ldr	r4, [r6, #0]
 8018290:	4626      	mov	r6, r4
 8018292:	2e00      	cmp	r6, #0
 8018294:	d140      	bne.n	8018318 <_malloc_r+0xcc>
 8018296:	6823      	ldr	r3, [r4, #0]
 8018298:	4631      	mov	r1, r6
 801829a:	4638      	mov	r0, r7
 801829c:	eb04 0803 	add.w	r8, r4, r3
 80182a0:	f000 f878 	bl	8018394 <_sbrk_r>
 80182a4:	4580      	cmp	r8, r0
 80182a6:	d13a      	bne.n	801831e <_malloc_r+0xd2>
 80182a8:	6821      	ldr	r1, [r4, #0]
 80182aa:	3503      	adds	r5, #3
 80182ac:	1a6d      	subs	r5, r5, r1
 80182ae:	f025 0503 	bic.w	r5, r5, #3
 80182b2:	3508      	adds	r5, #8
 80182b4:	2d0c      	cmp	r5, #12
 80182b6:	bf38      	it	cc
 80182b8:	250c      	movcc	r5, #12
 80182ba:	4629      	mov	r1, r5
 80182bc:	4638      	mov	r0, r7
 80182be:	f7ff ffa5 	bl	801820c <sbrk_aligned>
 80182c2:	3001      	adds	r0, #1
 80182c4:	d02b      	beq.n	801831e <_malloc_r+0xd2>
 80182c6:	6823      	ldr	r3, [r4, #0]
 80182c8:	442b      	add	r3, r5
 80182ca:	6023      	str	r3, [r4, #0]
 80182cc:	e00e      	b.n	80182ec <_malloc_r+0xa0>
 80182ce:	6822      	ldr	r2, [r4, #0]
 80182d0:	1b52      	subs	r2, r2, r5
 80182d2:	d41e      	bmi.n	8018312 <_malloc_r+0xc6>
 80182d4:	2a0b      	cmp	r2, #11
 80182d6:	d916      	bls.n	8018306 <_malloc_r+0xba>
 80182d8:	1961      	adds	r1, r4, r5
 80182da:	42a3      	cmp	r3, r4
 80182dc:	6025      	str	r5, [r4, #0]
 80182de:	bf18      	it	ne
 80182e0:	6059      	strne	r1, [r3, #4]
 80182e2:	6863      	ldr	r3, [r4, #4]
 80182e4:	bf08      	it	eq
 80182e6:	6031      	streq	r1, [r6, #0]
 80182e8:	5162      	str	r2, [r4, r5]
 80182ea:	604b      	str	r3, [r1, #4]
 80182ec:	4638      	mov	r0, r7
 80182ee:	f104 060b 	add.w	r6, r4, #11
 80182f2:	f000 f865 	bl	80183c0 <__malloc_unlock>
 80182f6:	f026 0607 	bic.w	r6, r6, #7
 80182fa:	1d23      	adds	r3, r4, #4
 80182fc:	1af2      	subs	r2, r6, r3
 80182fe:	d0b6      	beq.n	801826e <_malloc_r+0x22>
 8018300:	1b9b      	subs	r3, r3, r6
 8018302:	50a3      	str	r3, [r4, r2]
 8018304:	e7b3      	b.n	801826e <_malloc_r+0x22>
 8018306:	6862      	ldr	r2, [r4, #4]
 8018308:	42a3      	cmp	r3, r4
 801830a:	bf0c      	ite	eq
 801830c:	6032      	streq	r2, [r6, #0]
 801830e:	605a      	strne	r2, [r3, #4]
 8018310:	e7ec      	b.n	80182ec <_malloc_r+0xa0>
 8018312:	4623      	mov	r3, r4
 8018314:	6864      	ldr	r4, [r4, #4]
 8018316:	e7b2      	b.n	801827e <_malloc_r+0x32>
 8018318:	4634      	mov	r4, r6
 801831a:	6876      	ldr	r6, [r6, #4]
 801831c:	e7b9      	b.n	8018292 <_malloc_r+0x46>
 801831e:	230c      	movs	r3, #12
 8018320:	603b      	str	r3, [r7, #0]
 8018322:	4638      	mov	r0, r7
 8018324:	f000 f84c 	bl	80183c0 <__malloc_unlock>
 8018328:	e7a1      	b.n	801826e <_malloc_r+0x22>
 801832a:	6025      	str	r5, [r4, #0]
 801832c:	e7de      	b.n	80182ec <_malloc_r+0xa0>
 801832e:	bf00      	nop
 8018330:	20001a80 	.word	0x20001a80

08018334 <_realloc_r>:
 8018334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018338:	4680      	mov	r8, r0
 801833a:	4614      	mov	r4, r2
 801833c:	460e      	mov	r6, r1
 801833e:	b921      	cbnz	r1, 801834a <_realloc_r+0x16>
 8018340:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018344:	4611      	mov	r1, r2
 8018346:	f7ff bf81 	b.w	801824c <_malloc_r>
 801834a:	b92a      	cbnz	r2, 8018358 <_realloc_r+0x24>
 801834c:	f7ff ff14 	bl	8018178 <_free_r>
 8018350:	4625      	mov	r5, r4
 8018352:	4628      	mov	r0, r5
 8018354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018358:	f000 f838 	bl	80183cc <_malloc_usable_size_r>
 801835c:	4284      	cmp	r4, r0
 801835e:	4607      	mov	r7, r0
 8018360:	d802      	bhi.n	8018368 <_realloc_r+0x34>
 8018362:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018366:	d812      	bhi.n	801838e <_realloc_r+0x5a>
 8018368:	4621      	mov	r1, r4
 801836a:	4640      	mov	r0, r8
 801836c:	f7ff ff6e 	bl	801824c <_malloc_r>
 8018370:	4605      	mov	r5, r0
 8018372:	2800      	cmp	r0, #0
 8018374:	d0ed      	beq.n	8018352 <_realloc_r+0x1e>
 8018376:	42bc      	cmp	r4, r7
 8018378:	4622      	mov	r2, r4
 801837a:	4631      	mov	r1, r6
 801837c:	bf28      	it	cs
 801837e:	463a      	movcs	r2, r7
 8018380:	f7ff fba6 	bl	8017ad0 <memcpy>
 8018384:	4631      	mov	r1, r6
 8018386:	4640      	mov	r0, r8
 8018388:	f7ff fef6 	bl	8018178 <_free_r>
 801838c:	e7e1      	b.n	8018352 <_realloc_r+0x1e>
 801838e:	4635      	mov	r5, r6
 8018390:	e7df      	b.n	8018352 <_realloc_r+0x1e>
	...

08018394 <_sbrk_r>:
 8018394:	b538      	push	{r3, r4, r5, lr}
 8018396:	4d06      	ldr	r5, [pc, #24]	; (80183b0 <_sbrk_r+0x1c>)
 8018398:	2300      	movs	r3, #0
 801839a:	4604      	mov	r4, r0
 801839c:	4608      	mov	r0, r1
 801839e:	602b      	str	r3, [r5, #0]
 80183a0:	f7ea f802 	bl	80023a8 <_sbrk>
 80183a4:	1c43      	adds	r3, r0, #1
 80183a6:	d102      	bne.n	80183ae <_sbrk_r+0x1a>
 80183a8:	682b      	ldr	r3, [r5, #0]
 80183aa:	b103      	cbz	r3, 80183ae <_sbrk_r+0x1a>
 80183ac:	6023      	str	r3, [r4, #0]
 80183ae:	bd38      	pop	{r3, r4, r5, pc}
 80183b0:	20001a88 	.word	0x20001a88

080183b4 <__malloc_lock>:
 80183b4:	4801      	ldr	r0, [pc, #4]	; (80183bc <__malloc_lock+0x8>)
 80183b6:	f000 b811 	b.w	80183dc <__retarget_lock_acquire_recursive>
 80183ba:	bf00      	nop
 80183bc:	20001a8c 	.word	0x20001a8c

080183c0 <__malloc_unlock>:
 80183c0:	4801      	ldr	r0, [pc, #4]	; (80183c8 <__malloc_unlock+0x8>)
 80183c2:	f000 b80c 	b.w	80183de <__retarget_lock_release_recursive>
 80183c6:	bf00      	nop
 80183c8:	20001a8c 	.word	0x20001a8c

080183cc <_malloc_usable_size_r>:
 80183cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80183d0:	1f18      	subs	r0, r3, #4
 80183d2:	2b00      	cmp	r3, #0
 80183d4:	bfbc      	itt	lt
 80183d6:	580b      	ldrlt	r3, [r1, r0]
 80183d8:	18c0      	addlt	r0, r0, r3
 80183da:	4770      	bx	lr

080183dc <__retarget_lock_acquire_recursive>:
 80183dc:	4770      	bx	lr

080183de <__retarget_lock_release_recursive>:
 80183de:	4770      	bx	lr

080183e0 <ceil>:
 80183e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80183e4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80183e8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80183ec:	2e13      	cmp	r6, #19
 80183ee:	4602      	mov	r2, r0
 80183f0:	460b      	mov	r3, r1
 80183f2:	4607      	mov	r7, r0
 80183f4:	460c      	mov	r4, r1
 80183f6:	4605      	mov	r5, r0
 80183f8:	dc31      	bgt.n	801845e <ceil+0x7e>
 80183fa:	2e00      	cmp	r6, #0
 80183fc:	da12      	bge.n	8018424 <ceil+0x44>
 80183fe:	a334      	add	r3, pc, #208	; (adr r3, 80184d0 <ceil+0xf0>)
 8018400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018404:	f7e7 ff12 	bl	800022c <__adddf3>
 8018408:	2200      	movs	r2, #0
 801840a:	2300      	movs	r3, #0
 801840c:	f7e8 fb54 	bl	8000ab8 <__aeabi_dcmpgt>
 8018410:	b128      	cbz	r0, 801841e <ceil+0x3e>
 8018412:	2c00      	cmp	r4, #0
 8018414:	db56      	blt.n	80184c4 <ceil+0xe4>
 8018416:	433c      	orrs	r4, r7
 8018418:	d058      	beq.n	80184cc <ceil+0xec>
 801841a:	4c2f      	ldr	r4, [pc, #188]	; (80184d8 <ceil+0xf8>)
 801841c:	2500      	movs	r5, #0
 801841e:	4623      	mov	r3, r4
 8018420:	462f      	mov	r7, r5
 8018422:	e025      	b.n	8018470 <ceil+0x90>
 8018424:	4a2d      	ldr	r2, [pc, #180]	; (80184dc <ceil+0xfc>)
 8018426:	fa42 f806 	asr.w	r8, r2, r6
 801842a:	ea01 0208 	and.w	r2, r1, r8
 801842e:	4302      	orrs	r2, r0
 8018430:	d01e      	beq.n	8018470 <ceil+0x90>
 8018432:	a327      	add	r3, pc, #156	; (adr r3, 80184d0 <ceil+0xf0>)
 8018434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018438:	f7e7 fef8 	bl	800022c <__adddf3>
 801843c:	2200      	movs	r2, #0
 801843e:	2300      	movs	r3, #0
 8018440:	f7e8 fb3a 	bl	8000ab8 <__aeabi_dcmpgt>
 8018444:	2800      	cmp	r0, #0
 8018446:	d0ea      	beq.n	801841e <ceil+0x3e>
 8018448:	2c00      	cmp	r4, #0
 801844a:	bfc2      	ittt	gt
 801844c:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8018450:	fa43 f606 	asrgt.w	r6, r3, r6
 8018454:	19a4      	addgt	r4, r4, r6
 8018456:	ea24 0408 	bic.w	r4, r4, r8
 801845a:	2500      	movs	r5, #0
 801845c:	e7df      	b.n	801841e <ceil+0x3e>
 801845e:	2e33      	cmp	r6, #51	; 0x33
 8018460:	dd0a      	ble.n	8018478 <ceil+0x98>
 8018462:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8018466:	d103      	bne.n	8018470 <ceil+0x90>
 8018468:	f7e7 fee0 	bl	800022c <__adddf3>
 801846c:	4607      	mov	r7, r0
 801846e:	460b      	mov	r3, r1
 8018470:	4638      	mov	r0, r7
 8018472:	4619      	mov	r1, r3
 8018474:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018478:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 801847c:	f04f 32ff 	mov.w	r2, #4294967295
 8018480:	fa22 f808 	lsr.w	r8, r2, r8
 8018484:	ea18 0f00 	tst.w	r8, r0
 8018488:	d0f2      	beq.n	8018470 <ceil+0x90>
 801848a:	a311      	add	r3, pc, #68	; (adr r3, 80184d0 <ceil+0xf0>)
 801848c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018490:	f7e7 fecc 	bl	800022c <__adddf3>
 8018494:	2200      	movs	r2, #0
 8018496:	2300      	movs	r3, #0
 8018498:	f7e8 fb0e 	bl	8000ab8 <__aeabi_dcmpgt>
 801849c:	2800      	cmp	r0, #0
 801849e:	d0be      	beq.n	801841e <ceil+0x3e>
 80184a0:	2c00      	cmp	r4, #0
 80184a2:	dd02      	ble.n	80184aa <ceil+0xca>
 80184a4:	2e14      	cmp	r6, #20
 80184a6:	d103      	bne.n	80184b0 <ceil+0xd0>
 80184a8:	3401      	adds	r4, #1
 80184aa:	ea25 0508 	bic.w	r5, r5, r8
 80184ae:	e7b6      	b.n	801841e <ceil+0x3e>
 80184b0:	2301      	movs	r3, #1
 80184b2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80184b6:	fa03 f606 	lsl.w	r6, r3, r6
 80184ba:	4435      	add	r5, r6
 80184bc:	42bd      	cmp	r5, r7
 80184be:	bf38      	it	cc
 80184c0:	18e4      	addcc	r4, r4, r3
 80184c2:	e7f2      	b.n	80184aa <ceil+0xca>
 80184c4:	2500      	movs	r5, #0
 80184c6:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80184ca:	e7a8      	b.n	801841e <ceil+0x3e>
 80184cc:	4625      	mov	r5, r4
 80184ce:	e7a6      	b.n	801841e <ceil+0x3e>
 80184d0:	8800759c 	.word	0x8800759c
 80184d4:	7e37e43c 	.word	0x7e37e43c
 80184d8:	3ff00000 	.word	0x3ff00000
 80184dc:	000fffff 	.word	0x000fffff

080184e0 <floor>:
 80184e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80184e4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80184e8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80184ec:	2e13      	cmp	r6, #19
 80184ee:	4602      	mov	r2, r0
 80184f0:	460b      	mov	r3, r1
 80184f2:	4607      	mov	r7, r0
 80184f4:	460c      	mov	r4, r1
 80184f6:	4605      	mov	r5, r0
 80184f8:	dc33      	bgt.n	8018562 <floor+0x82>
 80184fa:	2e00      	cmp	r6, #0
 80184fc:	da14      	bge.n	8018528 <floor+0x48>
 80184fe:	a334      	add	r3, pc, #208	; (adr r3, 80185d0 <floor+0xf0>)
 8018500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018504:	f7e7 fe92 	bl	800022c <__adddf3>
 8018508:	2200      	movs	r2, #0
 801850a:	2300      	movs	r3, #0
 801850c:	f7e8 fad4 	bl	8000ab8 <__aeabi_dcmpgt>
 8018510:	b138      	cbz	r0, 8018522 <floor+0x42>
 8018512:	2c00      	cmp	r4, #0
 8018514:	da58      	bge.n	80185c8 <floor+0xe8>
 8018516:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801851a:	431d      	orrs	r5, r3
 801851c:	d001      	beq.n	8018522 <floor+0x42>
 801851e:	4c2e      	ldr	r4, [pc, #184]	; (80185d8 <floor+0xf8>)
 8018520:	2500      	movs	r5, #0
 8018522:	4623      	mov	r3, r4
 8018524:	462f      	mov	r7, r5
 8018526:	e025      	b.n	8018574 <floor+0x94>
 8018528:	4a2c      	ldr	r2, [pc, #176]	; (80185dc <floor+0xfc>)
 801852a:	fa42 f806 	asr.w	r8, r2, r6
 801852e:	ea01 0208 	and.w	r2, r1, r8
 8018532:	4302      	orrs	r2, r0
 8018534:	d01e      	beq.n	8018574 <floor+0x94>
 8018536:	a326      	add	r3, pc, #152	; (adr r3, 80185d0 <floor+0xf0>)
 8018538:	e9d3 2300 	ldrd	r2, r3, [r3]
 801853c:	f7e7 fe76 	bl	800022c <__adddf3>
 8018540:	2200      	movs	r2, #0
 8018542:	2300      	movs	r3, #0
 8018544:	f7e8 fab8 	bl	8000ab8 <__aeabi_dcmpgt>
 8018548:	2800      	cmp	r0, #0
 801854a:	d0ea      	beq.n	8018522 <floor+0x42>
 801854c:	2c00      	cmp	r4, #0
 801854e:	bfbe      	ittt	lt
 8018550:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8018554:	fa43 f606 	asrlt.w	r6, r3, r6
 8018558:	19a4      	addlt	r4, r4, r6
 801855a:	ea24 0408 	bic.w	r4, r4, r8
 801855e:	2500      	movs	r5, #0
 8018560:	e7df      	b.n	8018522 <floor+0x42>
 8018562:	2e33      	cmp	r6, #51	; 0x33
 8018564:	dd0a      	ble.n	801857c <floor+0x9c>
 8018566:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801856a:	d103      	bne.n	8018574 <floor+0x94>
 801856c:	f7e7 fe5e 	bl	800022c <__adddf3>
 8018570:	4607      	mov	r7, r0
 8018572:	460b      	mov	r3, r1
 8018574:	4638      	mov	r0, r7
 8018576:	4619      	mov	r1, r3
 8018578:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801857c:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8018580:	f04f 32ff 	mov.w	r2, #4294967295
 8018584:	fa22 f808 	lsr.w	r8, r2, r8
 8018588:	ea18 0f00 	tst.w	r8, r0
 801858c:	d0f2      	beq.n	8018574 <floor+0x94>
 801858e:	a310      	add	r3, pc, #64	; (adr r3, 80185d0 <floor+0xf0>)
 8018590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018594:	f7e7 fe4a 	bl	800022c <__adddf3>
 8018598:	2200      	movs	r2, #0
 801859a:	2300      	movs	r3, #0
 801859c:	f7e8 fa8c 	bl	8000ab8 <__aeabi_dcmpgt>
 80185a0:	2800      	cmp	r0, #0
 80185a2:	d0be      	beq.n	8018522 <floor+0x42>
 80185a4:	2c00      	cmp	r4, #0
 80185a6:	da02      	bge.n	80185ae <floor+0xce>
 80185a8:	2e14      	cmp	r6, #20
 80185aa:	d103      	bne.n	80185b4 <floor+0xd4>
 80185ac:	3401      	adds	r4, #1
 80185ae:	ea25 0508 	bic.w	r5, r5, r8
 80185b2:	e7b6      	b.n	8018522 <floor+0x42>
 80185b4:	2301      	movs	r3, #1
 80185b6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80185ba:	fa03 f606 	lsl.w	r6, r3, r6
 80185be:	4435      	add	r5, r6
 80185c0:	42bd      	cmp	r5, r7
 80185c2:	bf38      	it	cc
 80185c4:	18e4      	addcc	r4, r4, r3
 80185c6:	e7f2      	b.n	80185ae <floor+0xce>
 80185c8:	2500      	movs	r5, #0
 80185ca:	462c      	mov	r4, r5
 80185cc:	e7a9      	b.n	8018522 <floor+0x42>
 80185ce:	bf00      	nop
 80185d0:	8800759c 	.word	0x8800759c
 80185d4:	7e37e43c 	.word	0x7e37e43c
 80185d8:	bff00000 	.word	0xbff00000
 80185dc:	000fffff 	.word	0x000fffff

080185e0 <cosf>:
 80185e0:	b507      	push	{r0, r1, r2, lr}
 80185e2:	4a1a      	ldr	r2, [pc, #104]	; (801864c <cosf+0x6c>)
 80185e4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80185e8:	4293      	cmp	r3, r2
 80185ea:	4601      	mov	r1, r0
 80185ec:	dc05      	bgt.n	80185fa <cosf+0x1a>
 80185ee:	2100      	movs	r1, #0
 80185f0:	b003      	add	sp, #12
 80185f2:	f85d eb04 	ldr.w	lr, [sp], #4
 80185f6:	f000 bf8d 	b.w	8019514 <__kernel_cosf>
 80185fa:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80185fe:	db04      	blt.n	801860a <cosf+0x2a>
 8018600:	f7e8 face 	bl	8000ba0 <__aeabi_fsub>
 8018604:	b003      	add	sp, #12
 8018606:	f85d fb04 	ldr.w	pc, [sp], #4
 801860a:	4669      	mov	r1, sp
 801860c:	f000 fdd4 	bl	80191b8 <__ieee754_rem_pio2f>
 8018610:	f000 0203 	and.w	r2, r0, #3
 8018614:	2a01      	cmp	r2, #1
 8018616:	d007      	beq.n	8018628 <cosf+0x48>
 8018618:	2a02      	cmp	r2, #2
 801861a:	d00c      	beq.n	8018636 <cosf+0x56>
 801861c:	b982      	cbnz	r2, 8018640 <cosf+0x60>
 801861e:	9901      	ldr	r1, [sp, #4]
 8018620:	9800      	ldr	r0, [sp, #0]
 8018622:	f000 ff77 	bl	8019514 <__kernel_cosf>
 8018626:	e7ed      	b.n	8018604 <cosf+0x24>
 8018628:	9901      	ldr	r1, [sp, #4]
 801862a:	9800      	ldr	r0, [sp, #0]
 801862c:	f001 faa4 	bl	8019b78 <__kernel_sinf>
 8018630:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8018634:	e7e6      	b.n	8018604 <cosf+0x24>
 8018636:	9901      	ldr	r1, [sp, #4]
 8018638:	9800      	ldr	r0, [sp, #0]
 801863a:	f000 ff6b 	bl	8019514 <__kernel_cosf>
 801863e:	e7f7      	b.n	8018630 <cosf+0x50>
 8018640:	9901      	ldr	r1, [sp, #4]
 8018642:	9800      	ldr	r0, [sp, #0]
 8018644:	2201      	movs	r2, #1
 8018646:	f001 fa97 	bl	8019b78 <__kernel_sinf>
 801864a:	e7db      	b.n	8018604 <cosf+0x24>
 801864c:	3f490fd8 	.word	0x3f490fd8

08018650 <roundf>:
 8018650:	b508      	push	{r3, lr}
 8018652:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8018656:	3b7f      	subs	r3, #127	; 0x7f
 8018658:	2b16      	cmp	r3, #22
 801865a:	4601      	mov	r1, r0
 801865c:	4602      	mov	r2, r0
 801865e:	dc14      	bgt.n	801868a <roundf+0x3a>
 8018660:	2b00      	cmp	r3, #0
 8018662:	da07      	bge.n	8018674 <roundf+0x24>
 8018664:	3301      	adds	r3, #1
 8018666:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 801866a:	d101      	bne.n	8018670 <roundf+0x20>
 801866c:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 8018670:	4608      	mov	r0, r1
 8018672:	bd08      	pop	{r3, pc}
 8018674:	4808      	ldr	r0, [pc, #32]	; (8018698 <roundf+0x48>)
 8018676:	4118      	asrs	r0, r3
 8018678:	4201      	tst	r1, r0
 801867a:	d0f9      	beq.n	8018670 <roundf+0x20>
 801867c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8018680:	4119      	asrs	r1, r3
 8018682:	4411      	add	r1, r2
 8018684:	ea21 0100 	bic.w	r1, r1, r0
 8018688:	e7f2      	b.n	8018670 <roundf+0x20>
 801868a:	2b80      	cmp	r3, #128	; 0x80
 801868c:	d1f0      	bne.n	8018670 <roundf+0x20>
 801868e:	f7e8 fa89 	bl	8000ba4 <__addsf3>
 8018692:	4601      	mov	r1, r0
 8018694:	e7ec      	b.n	8018670 <roundf+0x20>
 8018696:	bf00      	nop
 8018698:	007fffff 	.word	0x007fffff

0801869c <sinf>:
 801869c:	b507      	push	{r0, r1, r2, lr}
 801869e:	4a1b      	ldr	r2, [pc, #108]	; (801870c <sinf+0x70>)
 80186a0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80186a4:	4293      	cmp	r3, r2
 80186a6:	4601      	mov	r1, r0
 80186a8:	dc06      	bgt.n	80186b8 <sinf+0x1c>
 80186aa:	2200      	movs	r2, #0
 80186ac:	2100      	movs	r1, #0
 80186ae:	b003      	add	sp, #12
 80186b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80186b4:	f001 ba60 	b.w	8019b78 <__kernel_sinf>
 80186b8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80186bc:	db04      	blt.n	80186c8 <sinf+0x2c>
 80186be:	f7e8 fa6f 	bl	8000ba0 <__aeabi_fsub>
 80186c2:	b003      	add	sp, #12
 80186c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80186c8:	4669      	mov	r1, sp
 80186ca:	f000 fd75 	bl	80191b8 <__ieee754_rem_pio2f>
 80186ce:	f000 0003 	and.w	r0, r0, #3
 80186d2:	2801      	cmp	r0, #1
 80186d4:	d008      	beq.n	80186e8 <sinf+0x4c>
 80186d6:	2802      	cmp	r0, #2
 80186d8:	d00b      	beq.n	80186f2 <sinf+0x56>
 80186da:	b990      	cbnz	r0, 8018702 <sinf+0x66>
 80186dc:	9901      	ldr	r1, [sp, #4]
 80186de:	9800      	ldr	r0, [sp, #0]
 80186e0:	2201      	movs	r2, #1
 80186e2:	f001 fa49 	bl	8019b78 <__kernel_sinf>
 80186e6:	e7ec      	b.n	80186c2 <sinf+0x26>
 80186e8:	9901      	ldr	r1, [sp, #4]
 80186ea:	9800      	ldr	r0, [sp, #0]
 80186ec:	f000 ff12 	bl	8019514 <__kernel_cosf>
 80186f0:	e7e7      	b.n	80186c2 <sinf+0x26>
 80186f2:	9901      	ldr	r1, [sp, #4]
 80186f4:	9800      	ldr	r0, [sp, #0]
 80186f6:	2201      	movs	r2, #1
 80186f8:	f001 fa3e 	bl	8019b78 <__kernel_sinf>
 80186fc:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8018700:	e7df      	b.n	80186c2 <sinf+0x26>
 8018702:	9901      	ldr	r1, [sp, #4]
 8018704:	9800      	ldr	r0, [sp, #0]
 8018706:	f000 ff05 	bl	8019514 <__kernel_cosf>
 801870a:	e7f7      	b.n	80186fc <sinf+0x60>
 801870c:	3f490fd8 	.word	0x3f490fd8

08018710 <tanf>:
 8018710:	b507      	push	{r0, r1, r2, lr}
 8018712:	4a11      	ldr	r2, [pc, #68]	; (8018758 <tanf+0x48>)
 8018714:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8018718:	4293      	cmp	r3, r2
 801871a:	4601      	mov	r1, r0
 801871c:	dc06      	bgt.n	801872c <tanf+0x1c>
 801871e:	2201      	movs	r2, #1
 8018720:	2100      	movs	r1, #0
 8018722:	b003      	add	sp, #12
 8018724:	f85d eb04 	ldr.w	lr, [sp], #4
 8018728:	f001 ba9c 	b.w	8019c64 <__kernel_tanf>
 801872c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018730:	db04      	blt.n	801873c <tanf+0x2c>
 8018732:	f7e8 fa35 	bl	8000ba0 <__aeabi_fsub>
 8018736:	b003      	add	sp, #12
 8018738:	f85d fb04 	ldr.w	pc, [sp], #4
 801873c:	4669      	mov	r1, sp
 801873e:	f000 fd3b 	bl	80191b8 <__ieee754_rem_pio2f>
 8018742:	0042      	lsls	r2, r0, #1
 8018744:	f002 0202 	and.w	r2, r2, #2
 8018748:	9901      	ldr	r1, [sp, #4]
 801874a:	9800      	ldr	r0, [sp, #0]
 801874c:	f1c2 0201 	rsb	r2, r2, #1
 8018750:	f001 fa88 	bl	8019c64 <__kernel_tanf>
 8018754:	e7ef      	b.n	8018736 <tanf+0x26>
 8018756:	bf00      	nop
 8018758:	3f490fda 	.word	0x3f490fda

0801875c <atan2>:
 801875c:	f000 b880 	b.w	8018860 <__ieee754_atan2>

08018760 <sqrt>:
 8018760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018762:	4606      	mov	r6, r0
 8018764:	460f      	mov	r7, r1
 8018766:	f000 f94d 	bl	8018a04 <__ieee754_sqrt>
 801876a:	4632      	mov	r2, r6
 801876c:	4604      	mov	r4, r0
 801876e:	460d      	mov	r5, r1
 8018770:	463b      	mov	r3, r7
 8018772:	4630      	mov	r0, r6
 8018774:	4639      	mov	r1, r7
 8018776:	f7e8 f9a9 	bl	8000acc <__aeabi_dcmpun>
 801877a:	b990      	cbnz	r0, 80187a2 <sqrt+0x42>
 801877c:	2200      	movs	r2, #0
 801877e:	2300      	movs	r3, #0
 8018780:	4630      	mov	r0, r6
 8018782:	4639      	mov	r1, r7
 8018784:	f7e8 f97a 	bl	8000a7c <__aeabi_dcmplt>
 8018788:	b158      	cbz	r0, 80187a2 <sqrt+0x42>
 801878a:	f7ff f977 	bl	8017a7c <__errno>
 801878e:	2321      	movs	r3, #33	; 0x21
 8018790:	6003      	str	r3, [r0, #0]
 8018792:	2200      	movs	r2, #0
 8018794:	2300      	movs	r3, #0
 8018796:	4610      	mov	r0, r2
 8018798:	4619      	mov	r1, r3
 801879a:	f7e8 f827 	bl	80007ec <__aeabi_ddiv>
 801879e:	4604      	mov	r4, r0
 80187a0:	460d      	mov	r5, r1
 80187a2:	4620      	mov	r0, r4
 80187a4:	4629      	mov	r1, r5
 80187a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080187a8 <acosf>:
 80187a8:	b538      	push	{r3, r4, r5, lr}
 80187aa:	4604      	mov	r4, r0
 80187ac:	f000 f9d8 	bl	8018b60 <__ieee754_acosf>
 80187b0:	4621      	mov	r1, r4
 80187b2:	4605      	mov	r5, r0
 80187b4:	4620      	mov	r0, r4
 80187b6:	f7e8 fcc3 	bl	8001140 <__aeabi_fcmpun>
 80187ba:	b980      	cbnz	r0, 80187de <acosf+0x36>
 80187bc:	4620      	mov	r0, r4
 80187be:	f001 fe19 	bl	801a3f4 <fabsf>
 80187c2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80187c6:	f7e8 fcb1 	bl	800112c <__aeabi_fcmpgt>
 80187ca:	b140      	cbz	r0, 80187de <acosf+0x36>
 80187cc:	f7ff f956 	bl	8017a7c <__errno>
 80187d0:	2321      	movs	r3, #33	; 0x21
 80187d2:	6003      	str	r3, [r0, #0]
 80187d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80187d8:	4802      	ldr	r0, [pc, #8]	; (80187e4 <acosf+0x3c>)
 80187da:	f001 be51 	b.w	801a480 <nanf>
 80187de:	4628      	mov	r0, r5
 80187e0:	bd38      	pop	{r3, r4, r5, pc}
 80187e2:	bf00      	nop
 80187e4:	0801a6a5 	.word	0x0801a6a5

080187e8 <asinf>:
 80187e8:	b538      	push	{r3, r4, r5, lr}
 80187ea:	4604      	mov	r4, r0
 80187ec:	f000 fb1a 	bl	8018e24 <__ieee754_asinf>
 80187f0:	4621      	mov	r1, r4
 80187f2:	4605      	mov	r5, r0
 80187f4:	4620      	mov	r0, r4
 80187f6:	f7e8 fca3 	bl	8001140 <__aeabi_fcmpun>
 80187fa:	b980      	cbnz	r0, 801881e <asinf+0x36>
 80187fc:	4620      	mov	r0, r4
 80187fe:	f001 fdf9 	bl	801a3f4 <fabsf>
 8018802:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8018806:	f7e8 fc91 	bl	800112c <__aeabi_fcmpgt>
 801880a:	b140      	cbz	r0, 801881e <asinf+0x36>
 801880c:	f7ff f936 	bl	8017a7c <__errno>
 8018810:	2321      	movs	r3, #33	; 0x21
 8018812:	6003      	str	r3, [r0, #0]
 8018814:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018818:	4802      	ldr	r0, [pc, #8]	; (8018824 <asinf+0x3c>)
 801881a:	f001 be31 	b.w	801a480 <nanf>
 801881e:	4628      	mov	r0, r5
 8018820:	bd38      	pop	{r3, r4, r5, pc}
 8018822:	bf00      	nop
 8018824:	0801a6a5 	.word	0x0801a6a5

08018828 <atan2f>:
 8018828:	f000 bc40 	b.w	80190ac <__ieee754_atan2f>

0801882c <sqrtf>:
 801882c:	b538      	push	{r3, r4, r5, lr}
 801882e:	4605      	mov	r5, r0
 8018830:	f000 fe20 	bl	8019474 <__ieee754_sqrtf>
 8018834:	4629      	mov	r1, r5
 8018836:	4604      	mov	r4, r0
 8018838:	4628      	mov	r0, r5
 801883a:	f7e8 fc81 	bl	8001140 <__aeabi_fcmpun>
 801883e:	b968      	cbnz	r0, 801885c <sqrtf+0x30>
 8018840:	2100      	movs	r1, #0
 8018842:	4628      	mov	r0, r5
 8018844:	f7e8 fc54 	bl	80010f0 <__aeabi_fcmplt>
 8018848:	b140      	cbz	r0, 801885c <sqrtf+0x30>
 801884a:	f7ff f917 	bl	8017a7c <__errno>
 801884e:	2321      	movs	r3, #33	; 0x21
 8018850:	2100      	movs	r1, #0
 8018852:	6003      	str	r3, [r0, #0]
 8018854:	4608      	mov	r0, r1
 8018856:	f7e8 fb61 	bl	8000f1c <__aeabi_fdiv>
 801885a:	4604      	mov	r4, r0
 801885c:	4620      	mov	r0, r4
 801885e:	bd38      	pop	{r3, r4, r5, pc}

08018860 <__ieee754_atan2>:
 8018860:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018864:	4692      	mov	sl, r2
 8018866:	4699      	mov	r9, r3
 8018868:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801886c:	461f      	mov	r7, r3
 801886e:	f1ca 0300 	rsb	r3, sl, #0
 8018872:	f8df e184 	ldr.w	lr, [pc, #388]	; 80189f8 <__ieee754_atan2+0x198>
 8018876:	ea43 030a 	orr.w	r3, r3, sl
 801887a:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801887e:	4573      	cmp	r3, lr
 8018880:	4604      	mov	r4, r0
 8018882:	460d      	mov	r5, r1
 8018884:	d808      	bhi.n	8018898 <__ieee754_atan2+0x38>
 8018886:	4246      	negs	r6, r0
 8018888:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801888c:	4306      	orrs	r6, r0
 801888e:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8018892:	4576      	cmp	r6, lr
 8018894:	468c      	mov	ip, r1
 8018896:	d908      	bls.n	80188aa <__ieee754_atan2+0x4a>
 8018898:	4652      	mov	r2, sl
 801889a:	464b      	mov	r3, r9
 801889c:	4620      	mov	r0, r4
 801889e:	4629      	mov	r1, r5
 80188a0:	f7e7 fcc4 	bl	800022c <__adddf3>
 80188a4:	4604      	mov	r4, r0
 80188a6:	460d      	mov	r5, r1
 80188a8:	e019      	b.n	80188de <__ieee754_atan2+0x7e>
 80188aa:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 80188ae:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80188b2:	ea56 060a 	orrs.w	r6, r6, sl
 80188b6:	d103      	bne.n	80188c0 <__ieee754_atan2+0x60>
 80188b8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188bc:	f001 bb00 	b.w	8019ec0 <atan>
 80188c0:	17be      	asrs	r6, r7, #30
 80188c2:	f006 0602 	and.w	r6, r6, #2
 80188c6:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 80188ca:	ea53 0100 	orrs.w	r1, r3, r0
 80188ce:	d10a      	bne.n	80188e6 <__ieee754_atan2+0x86>
 80188d0:	2e02      	cmp	r6, #2
 80188d2:	d067      	beq.n	80189a4 <__ieee754_atan2+0x144>
 80188d4:	2e03      	cmp	r6, #3
 80188d6:	d102      	bne.n	80188de <__ieee754_atan2+0x7e>
 80188d8:	a53b      	add	r5, pc, #236	; (adr r5, 80189c8 <__ieee754_atan2+0x168>)
 80188da:	e9d5 4500 	ldrd	r4, r5, [r5]
 80188de:	4620      	mov	r0, r4
 80188e0:	4629      	mov	r1, r5
 80188e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188e6:	ea52 010a 	orrs.w	r1, r2, sl
 80188ea:	d106      	bne.n	80188fa <__ieee754_atan2+0x9a>
 80188ec:	f1bc 0f00 	cmp.w	ip, #0
 80188f0:	da63      	bge.n	80189ba <__ieee754_atan2+0x15a>
 80188f2:	a537      	add	r5, pc, #220	; (adr r5, 80189d0 <__ieee754_atan2+0x170>)
 80188f4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80188f8:	e7f1      	b.n	80188de <__ieee754_atan2+0x7e>
 80188fa:	4572      	cmp	r2, lr
 80188fc:	d10f      	bne.n	801891e <__ieee754_atan2+0xbe>
 80188fe:	4293      	cmp	r3, r2
 8018900:	f106 36ff 	add.w	r6, r6, #4294967295
 8018904:	d107      	bne.n	8018916 <__ieee754_atan2+0xb6>
 8018906:	2e02      	cmp	r6, #2
 8018908:	d850      	bhi.n	80189ac <__ieee754_atan2+0x14c>
 801890a:	4b3c      	ldr	r3, [pc, #240]	; (80189fc <__ieee754_atan2+0x19c>)
 801890c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8018910:	e9d6 4500 	ldrd	r4, r5, [r6]
 8018914:	e7e3      	b.n	80188de <__ieee754_atan2+0x7e>
 8018916:	2e02      	cmp	r6, #2
 8018918:	d84c      	bhi.n	80189b4 <__ieee754_atan2+0x154>
 801891a:	4b39      	ldr	r3, [pc, #228]	; (8018a00 <__ieee754_atan2+0x1a0>)
 801891c:	e7f6      	b.n	801890c <__ieee754_atan2+0xac>
 801891e:	4573      	cmp	r3, lr
 8018920:	d0e4      	beq.n	80188ec <__ieee754_atan2+0x8c>
 8018922:	1a9b      	subs	r3, r3, r2
 8018924:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8018928:	ea4f 5223 	mov.w	r2, r3, asr #20
 801892c:	da20      	bge.n	8018970 <__ieee754_atan2+0x110>
 801892e:	2f00      	cmp	r7, #0
 8018930:	da01      	bge.n	8018936 <__ieee754_atan2+0xd6>
 8018932:	323c      	adds	r2, #60	; 0x3c
 8018934:	db20      	blt.n	8018978 <__ieee754_atan2+0x118>
 8018936:	4652      	mov	r2, sl
 8018938:	464b      	mov	r3, r9
 801893a:	4620      	mov	r0, r4
 801893c:	4629      	mov	r1, r5
 801893e:	f7e7 ff55 	bl	80007ec <__aeabi_ddiv>
 8018942:	f001 fc47 	bl	801a1d4 <fabs>
 8018946:	f001 fabb 	bl	8019ec0 <atan>
 801894a:	4604      	mov	r4, r0
 801894c:	460d      	mov	r5, r1
 801894e:	2e01      	cmp	r6, #1
 8018950:	d015      	beq.n	801897e <__ieee754_atan2+0x11e>
 8018952:	2e02      	cmp	r6, #2
 8018954:	d017      	beq.n	8018986 <__ieee754_atan2+0x126>
 8018956:	2e00      	cmp	r6, #0
 8018958:	d0c1      	beq.n	80188de <__ieee754_atan2+0x7e>
 801895a:	a31f      	add	r3, pc, #124	; (adr r3, 80189d8 <__ieee754_atan2+0x178>)
 801895c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018960:	4620      	mov	r0, r4
 8018962:	4629      	mov	r1, r5
 8018964:	f7e7 fc60 	bl	8000228 <__aeabi_dsub>
 8018968:	a31d      	add	r3, pc, #116	; (adr r3, 80189e0 <__ieee754_atan2+0x180>)
 801896a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801896e:	e016      	b.n	801899e <__ieee754_atan2+0x13e>
 8018970:	a51d      	add	r5, pc, #116	; (adr r5, 80189e8 <__ieee754_atan2+0x188>)
 8018972:	e9d5 4500 	ldrd	r4, r5, [r5]
 8018976:	e7ea      	b.n	801894e <__ieee754_atan2+0xee>
 8018978:	2400      	movs	r4, #0
 801897a:	2500      	movs	r5, #0
 801897c:	e7e7      	b.n	801894e <__ieee754_atan2+0xee>
 801897e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8018982:	461d      	mov	r5, r3
 8018984:	e7ab      	b.n	80188de <__ieee754_atan2+0x7e>
 8018986:	a314      	add	r3, pc, #80	; (adr r3, 80189d8 <__ieee754_atan2+0x178>)
 8018988:	e9d3 2300 	ldrd	r2, r3, [r3]
 801898c:	4620      	mov	r0, r4
 801898e:	4629      	mov	r1, r5
 8018990:	f7e7 fc4a 	bl	8000228 <__aeabi_dsub>
 8018994:	4602      	mov	r2, r0
 8018996:	460b      	mov	r3, r1
 8018998:	a111      	add	r1, pc, #68	; (adr r1, 80189e0 <__ieee754_atan2+0x180>)
 801899a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801899e:	f7e7 fc43 	bl	8000228 <__aeabi_dsub>
 80189a2:	e77f      	b.n	80188a4 <__ieee754_atan2+0x44>
 80189a4:	a50e      	add	r5, pc, #56	; (adr r5, 80189e0 <__ieee754_atan2+0x180>)
 80189a6:	e9d5 4500 	ldrd	r4, r5, [r5]
 80189aa:	e798      	b.n	80188de <__ieee754_atan2+0x7e>
 80189ac:	a510      	add	r5, pc, #64	; (adr r5, 80189f0 <__ieee754_atan2+0x190>)
 80189ae:	e9d5 4500 	ldrd	r4, r5, [r5]
 80189b2:	e794      	b.n	80188de <__ieee754_atan2+0x7e>
 80189b4:	2400      	movs	r4, #0
 80189b6:	2500      	movs	r5, #0
 80189b8:	e791      	b.n	80188de <__ieee754_atan2+0x7e>
 80189ba:	a50b      	add	r5, pc, #44	; (adr r5, 80189e8 <__ieee754_atan2+0x188>)
 80189bc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80189c0:	e78d      	b.n	80188de <__ieee754_atan2+0x7e>
 80189c2:	bf00      	nop
 80189c4:	f3af 8000 	nop.w
 80189c8:	54442d18 	.word	0x54442d18
 80189cc:	c00921fb 	.word	0xc00921fb
 80189d0:	54442d18 	.word	0x54442d18
 80189d4:	bff921fb 	.word	0xbff921fb
 80189d8:	33145c07 	.word	0x33145c07
 80189dc:	3ca1a626 	.word	0x3ca1a626
 80189e0:	54442d18 	.word	0x54442d18
 80189e4:	400921fb 	.word	0x400921fb
 80189e8:	54442d18 	.word	0x54442d18
 80189ec:	3ff921fb 	.word	0x3ff921fb
 80189f0:	54442d18 	.word	0x54442d18
 80189f4:	3fe921fb 	.word	0x3fe921fb
 80189f8:	7ff00000 	.word	0x7ff00000
 80189fc:	0801a6d8 	.word	0x0801a6d8
 8018a00:	0801a6f0 	.word	0x0801a6f0

08018a04 <__ieee754_sqrt>:
 8018a04:	f8df c154 	ldr.w	ip, [pc, #340]	; 8018b5c <__ieee754_sqrt+0x158>
 8018a08:	ea3c 0c01 	bics.w	ip, ip, r1
 8018a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a10:	460a      	mov	r2, r1
 8018a12:	4606      	mov	r6, r0
 8018a14:	460d      	mov	r5, r1
 8018a16:	460c      	mov	r4, r1
 8018a18:	4607      	mov	r7, r0
 8018a1a:	4603      	mov	r3, r0
 8018a1c:	d10f      	bne.n	8018a3e <__ieee754_sqrt+0x3a>
 8018a1e:	4602      	mov	r2, r0
 8018a20:	460b      	mov	r3, r1
 8018a22:	f7e7 fdb9 	bl	8000598 <__aeabi_dmul>
 8018a26:	4602      	mov	r2, r0
 8018a28:	460b      	mov	r3, r1
 8018a2a:	4630      	mov	r0, r6
 8018a2c:	4629      	mov	r1, r5
 8018a2e:	f7e7 fbfd 	bl	800022c <__adddf3>
 8018a32:	4606      	mov	r6, r0
 8018a34:	460d      	mov	r5, r1
 8018a36:	4630      	mov	r0, r6
 8018a38:	4629      	mov	r1, r5
 8018a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a3e:	2900      	cmp	r1, #0
 8018a40:	dc0e      	bgt.n	8018a60 <__ieee754_sqrt+0x5c>
 8018a42:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8018a46:	ea5c 0707 	orrs.w	r7, ip, r7
 8018a4a:	d0f4      	beq.n	8018a36 <__ieee754_sqrt+0x32>
 8018a4c:	b141      	cbz	r1, 8018a60 <__ieee754_sqrt+0x5c>
 8018a4e:	4602      	mov	r2, r0
 8018a50:	460b      	mov	r3, r1
 8018a52:	f7e7 fbe9 	bl	8000228 <__aeabi_dsub>
 8018a56:	4602      	mov	r2, r0
 8018a58:	460b      	mov	r3, r1
 8018a5a:	f7e7 fec7 	bl	80007ec <__aeabi_ddiv>
 8018a5e:	e7e8      	b.n	8018a32 <__ieee754_sqrt+0x2e>
 8018a60:	1521      	asrs	r1, r4, #20
 8018a62:	d074      	beq.n	8018b4e <__ieee754_sqrt+0x14a>
 8018a64:	07cc      	lsls	r4, r1, #31
 8018a66:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8018a6a:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8018a6e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8018a72:	bf5e      	ittt	pl
 8018a74:	0fd9      	lsrpl	r1, r3, #31
 8018a76:	005b      	lslpl	r3, r3, #1
 8018a78:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8018a7c:	2400      	movs	r4, #0
 8018a7e:	0fd9      	lsrs	r1, r3, #31
 8018a80:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8018a84:	107f      	asrs	r7, r7, #1
 8018a86:	005b      	lsls	r3, r3, #1
 8018a88:	2516      	movs	r5, #22
 8018a8a:	4620      	mov	r0, r4
 8018a8c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8018a90:	1846      	adds	r6, r0, r1
 8018a92:	4296      	cmp	r6, r2
 8018a94:	bfde      	ittt	le
 8018a96:	1b92      	suble	r2, r2, r6
 8018a98:	1870      	addle	r0, r6, r1
 8018a9a:	1864      	addle	r4, r4, r1
 8018a9c:	0052      	lsls	r2, r2, #1
 8018a9e:	3d01      	subs	r5, #1
 8018aa0:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8018aa4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8018aa8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8018aac:	d1f0      	bne.n	8018a90 <__ieee754_sqrt+0x8c>
 8018aae:	4629      	mov	r1, r5
 8018ab0:	f04f 0e20 	mov.w	lr, #32
 8018ab4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8018ab8:	4282      	cmp	r2, r0
 8018aba:	eb06 0c05 	add.w	ip, r6, r5
 8018abe:	dc02      	bgt.n	8018ac6 <__ieee754_sqrt+0xc2>
 8018ac0:	d113      	bne.n	8018aea <__ieee754_sqrt+0xe6>
 8018ac2:	459c      	cmp	ip, r3
 8018ac4:	d811      	bhi.n	8018aea <__ieee754_sqrt+0xe6>
 8018ac6:	f1bc 0f00 	cmp.w	ip, #0
 8018aca:	eb0c 0506 	add.w	r5, ip, r6
 8018ace:	da43      	bge.n	8018b58 <__ieee754_sqrt+0x154>
 8018ad0:	2d00      	cmp	r5, #0
 8018ad2:	db41      	blt.n	8018b58 <__ieee754_sqrt+0x154>
 8018ad4:	f100 0801 	add.w	r8, r0, #1
 8018ad8:	1a12      	subs	r2, r2, r0
 8018ada:	459c      	cmp	ip, r3
 8018adc:	bf88      	it	hi
 8018ade:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8018ae2:	eba3 030c 	sub.w	r3, r3, ip
 8018ae6:	4431      	add	r1, r6
 8018ae8:	4640      	mov	r0, r8
 8018aea:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8018aee:	f1be 0e01 	subs.w	lr, lr, #1
 8018af2:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8018af6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8018afa:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8018afe:	d1db      	bne.n	8018ab8 <__ieee754_sqrt+0xb4>
 8018b00:	4313      	orrs	r3, r2
 8018b02:	d006      	beq.n	8018b12 <__ieee754_sqrt+0x10e>
 8018b04:	1c48      	adds	r0, r1, #1
 8018b06:	bf13      	iteet	ne
 8018b08:	3101      	addne	r1, #1
 8018b0a:	3401      	addeq	r4, #1
 8018b0c:	4671      	moveq	r1, lr
 8018b0e:	f021 0101 	bicne.w	r1, r1, #1
 8018b12:	1063      	asrs	r3, r4, #1
 8018b14:	0849      	lsrs	r1, r1, #1
 8018b16:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8018b1a:	07e2      	lsls	r2, r4, #31
 8018b1c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8018b20:	bf48      	it	mi
 8018b22:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8018b26:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8018b2a:	460e      	mov	r6, r1
 8018b2c:	e783      	b.n	8018a36 <__ieee754_sqrt+0x32>
 8018b2e:	0ada      	lsrs	r2, r3, #11
 8018b30:	3815      	subs	r0, #21
 8018b32:	055b      	lsls	r3, r3, #21
 8018b34:	2a00      	cmp	r2, #0
 8018b36:	d0fa      	beq.n	8018b2e <__ieee754_sqrt+0x12a>
 8018b38:	02d5      	lsls	r5, r2, #11
 8018b3a:	d50a      	bpl.n	8018b52 <__ieee754_sqrt+0x14e>
 8018b3c:	f1c1 0420 	rsb	r4, r1, #32
 8018b40:	fa23 f404 	lsr.w	r4, r3, r4
 8018b44:	1e4d      	subs	r5, r1, #1
 8018b46:	408b      	lsls	r3, r1
 8018b48:	4322      	orrs	r2, r4
 8018b4a:	1b41      	subs	r1, r0, r5
 8018b4c:	e78a      	b.n	8018a64 <__ieee754_sqrt+0x60>
 8018b4e:	4608      	mov	r0, r1
 8018b50:	e7f0      	b.n	8018b34 <__ieee754_sqrt+0x130>
 8018b52:	0052      	lsls	r2, r2, #1
 8018b54:	3101      	adds	r1, #1
 8018b56:	e7ef      	b.n	8018b38 <__ieee754_sqrt+0x134>
 8018b58:	4680      	mov	r8, r0
 8018b5a:	e7bd      	b.n	8018ad8 <__ieee754_sqrt+0xd4>
 8018b5c:	7ff00000 	.word	0x7ff00000

08018b60 <__ieee754_acosf>:
 8018b60:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8018b64:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8018b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b6a:	4605      	mov	r5, r0
 8018b6c:	d104      	bne.n	8018b78 <__ieee754_acosf+0x18>
 8018b6e:	2800      	cmp	r0, #0
 8018b70:	f300 8135 	bgt.w	8018dde <__ieee754_acosf+0x27e>
 8018b74:	489c      	ldr	r0, [pc, #624]	; (8018de8 <__ieee754_acosf+0x288>)
 8018b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018b78:	dd06      	ble.n	8018b88 <__ieee754_acosf+0x28>
 8018b7a:	4601      	mov	r1, r0
 8018b7c:	f7e8 f810 	bl	8000ba0 <__aeabi_fsub>
 8018b80:	4601      	mov	r1, r0
 8018b82:	f7e8 f9cb 	bl	8000f1c <__aeabi_fdiv>
 8018b86:	e7f6      	b.n	8018b76 <__ieee754_acosf+0x16>
 8018b88:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 8018b8c:	da57      	bge.n	8018c3e <__ieee754_acosf+0xde>
 8018b8e:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 8018b92:	f340 8126 	ble.w	8018de2 <__ieee754_acosf+0x282>
 8018b96:	4601      	mov	r1, r0
 8018b98:	f7e8 f90c 	bl	8000db4 <__aeabi_fmul>
 8018b9c:	4993      	ldr	r1, [pc, #588]	; (8018dec <__ieee754_acosf+0x28c>)
 8018b9e:	4604      	mov	r4, r0
 8018ba0:	f7e8 f908 	bl	8000db4 <__aeabi_fmul>
 8018ba4:	4992      	ldr	r1, [pc, #584]	; (8018df0 <__ieee754_acosf+0x290>)
 8018ba6:	f7e7 fffd 	bl	8000ba4 <__addsf3>
 8018baa:	4621      	mov	r1, r4
 8018bac:	f7e8 f902 	bl	8000db4 <__aeabi_fmul>
 8018bb0:	4990      	ldr	r1, [pc, #576]	; (8018df4 <__ieee754_acosf+0x294>)
 8018bb2:	f7e7 fff5 	bl	8000ba0 <__aeabi_fsub>
 8018bb6:	4621      	mov	r1, r4
 8018bb8:	f7e8 f8fc 	bl	8000db4 <__aeabi_fmul>
 8018bbc:	498e      	ldr	r1, [pc, #568]	; (8018df8 <__ieee754_acosf+0x298>)
 8018bbe:	f7e7 fff1 	bl	8000ba4 <__addsf3>
 8018bc2:	4621      	mov	r1, r4
 8018bc4:	f7e8 f8f6 	bl	8000db4 <__aeabi_fmul>
 8018bc8:	498c      	ldr	r1, [pc, #560]	; (8018dfc <__ieee754_acosf+0x29c>)
 8018bca:	f7e7 ffe9 	bl	8000ba0 <__aeabi_fsub>
 8018bce:	4621      	mov	r1, r4
 8018bd0:	f7e8 f8f0 	bl	8000db4 <__aeabi_fmul>
 8018bd4:	498a      	ldr	r1, [pc, #552]	; (8018e00 <__ieee754_acosf+0x2a0>)
 8018bd6:	f7e7 ffe5 	bl	8000ba4 <__addsf3>
 8018bda:	4621      	mov	r1, r4
 8018bdc:	f7e8 f8ea 	bl	8000db4 <__aeabi_fmul>
 8018be0:	4988      	ldr	r1, [pc, #544]	; (8018e04 <__ieee754_acosf+0x2a4>)
 8018be2:	4606      	mov	r6, r0
 8018be4:	4620      	mov	r0, r4
 8018be6:	f7e8 f8e5 	bl	8000db4 <__aeabi_fmul>
 8018bea:	4987      	ldr	r1, [pc, #540]	; (8018e08 <__ieee754_acosf+0x2a8>)
 8018bec:	f7e7 ffd8 	bl	8000ba0 <__aeabi_fsub>
 8018bf0:	4621      	mov	r1, r4
 8018bf2:	f7e8 f8df 	bl	8000db4 <__aeabi_fmul>
 8018bf6:	4985      	ldr	r1, [pc, #532]	; (8018e0c <__ieee754_acosf+0x2ac>)
 8018bf8:	f7e7 ffd4 	bl	8000ba4 <__addsf3>
 8018bfc:	4621      	mov	r1, r4
 8018bfe:	f7e8 f8d9 	bl	8000db4 <__aeabi_fmul>
 8018c02:	4983      	ldr	r1, [pc, #524]	; (8018e10 <__ieee754_acosf+0x2b0>)
 8018c04:	f7e7 ffcc 	bl	8000ba0 <__aeabi_fsub>
 8018c08:	4621      	mov	r1, r4
 8018c0a:	f7e8 f8d3 	bl	8000db4 <__aeabi_fmul>
 8018c0e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8018c12:	f7e7 ffc7 	bl	8000ba4 <__addsf3>
 8018c16:	4601      	mov	r1, r0
 8018c18:	4630      	mov	r0, r6
 8018c1a:	f7e8 f97f 	bl	8000f1c <__aeabi_fdiv>
 8018c1e:	4629      	mov	r1, r5
 8018c20:	f7e8 f8c8 	bl	8000db4 <__aeabi_fmul>
 8018c24:	4601      	mov	r1, r0
 8018c26:	487b      	ldr	r0, [pc, #492]	; (8018e14 <__ieee754_acosf+0x2b4>)
 8018c28:	f7e7 ffba 	bl	8000ba0 <__aeabi_fsub>
 8018c2c:	4601      	mov	r1, r0
 8018c2e:	4628      	mov	r0, r5
 8018c30:	f7e7 ffb6 	bl	8000ba0 <__aeabi_fsub>
 8018c34:	4601      	mov	r1, r0
 8018c36:	4878      	ldr	r0, [pc, #480]	; (8018e18 <__ieee754_acosf+0x2b8>)
 8018c38:	f7e7 ffb2 	bl	8000ba0 <__aeabi_fsub>
 8018c3c:	e79b      	b.n	8018b76 <__ieee754_acosf+0x16>
 8018c3e:	2800      	cmp	r0, #0
 8018c40:	da5b      	bge.n	8018cfa <__ieee754_acosf+0x19a>
 8018c42:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8018c46:	f7e7 ffad 	bl	8000ba4 <__addsf3>
 8018c4a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8018c4e:	f7e8 f8b1 	bl	8000db4 <__aeabi_fmul>
 8018c52:	4966      	ldr	r1, [pc, #408]	; (8018dec <__ieee754_acosf+0x28c>)
 8018c54:	4604      	mov	r4, r0
 8018c56:	f7e8 f8ad 	bl	8000db4 <__aeabi_fmul>
 8018c5a:	4965      	ldr	r1, [pc, #404]	; (8018df0 <__ieee754_acosf+0x290>)
 8018c5c:	f7e7 ffa2 	bl	8000ba4 <__addsf3>
 8018c60:	4621      	mov	r1, r4
 8018c62:	f7e8 f8a7 	bl	8000db4 <__aeabi_fmul>
 8018c66:	4963      	ldr	r1, [pc, #396]	; (8018df4 <__ieee754_acosf+0x294>)
 8018c68:	f7e7 ff9a 	bl	8000ba0 <__aeabi_fsub>
 8018c6c:	4621      	mov	r1, r4
 8018c6e:	f7e8 f8a1 	bl	8000db4 <__aeabi_fmul>
 8018c72:	4961      	ldr	r1, [pc, #388]	; (8018df8 <__ieee754_acosf+0x298>)
 8018c74:	f7e7 ff96 	bl	8000ba4 <__addsf3>
 8018c78:	4621      	mov	r1, r4
 8018c7a:	f7e8 f89b 	bl	8000db4 <__aeabi_fmul>
 8018c7e:	495f      	ldr	r1, [pc, #380]	; (8018dfc <__ieee754_acosf+0x29c>)
 8018c80:	f7e7 ff8e 	bl	8000ba0 <__aeabi_fsub>
 8018c84:	4621      	mov	r1, r4
 8018c86:	f7e8 f895 	bl	8000db4 <__aeabi_fmul>
 8018c8a:	495d      	ldr	r1, [pc, #372]	; (8018e00 <__ieee754_acosf+0x2a0>)
 8018c8c:	f7e7 ff8a 	bl	8000ba4 <__addsf3>
 8018c90:	4621      	mov	r1, r4
 8018c92:	f7e8 f88f 	bl	8000db4 <__aeabi_fmul>
 8018c96:	4606      	mov	r6, r0
 8018c98:	4620      	mov	r0, r4
 8018c9a:	f000 fbeb 	bl	8019474 <__ieee754_sqrtf>
 8018c9e:	4959      	ldr	r1, [pc, #356]	; (8018e04 <__ieee754_acosf+0x2a4>)
 8018ca0:	4605      	mov	r5, r0
 8018ca2:	4620      	mov	r0, r4
 8018ca4:	f7e8 f886 	bl	8000db4 <__aeabi_fmul>
 8018ca8:	4957      	ldr	r1, [pc, #348]	; (8018e08 <__ieee754_acosf+0x2a8>)
 8018caa:	f7e7 ff79 	bl	8000ba0 <__aeabi_fsub>
 8018cae:	4621      	mov	r1, r4
 8018cb0:	f7e8 f880 	bl	8000db4 <__aeabi_fmul>
 8018cb4:	4955      	ldr	r1, [pc, #340]	; (8018e0c <__ieee754_acosf+0x2ac>)
 8018cb6:	f7e7 ff75 	bl	8000ba4 <__addsf3>
 8018cba:	4621      	mov	r1, r4
 8018cbc:	f7e8 f87a 	bl	8000db4 <__aeabi_fmul>
 8018cc0:	4953      	ldr	r1, [pc, #332]	; (8018e10 <__ieee754_acosf+0x2b0>)
 8018cc2:	f7e7 ff6d 	bl	8000ba0 <__aeabi_fsub>
 8018cc6:	4621      	mov	r1, r4
 8018cc8:	f7e8 f874 	bl	8000db4 <__aeabi_fmul>
 8018ccc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8018cd0:	f7e7 ff68 	bl	8000ba4 <__addsf3>
 8018cd4:	4601      	mov	r1, r0
 8018cd6:	4630      	mov	r0, r6
 8018cd8:	f7e8 f920 	bl	8000f1c <__aeabi_fdiv>
 8018cdc:	4629      	mov	r1, r5
 8018cde:	f7e8 f869 	bl	8000db4 <__aeabi_fmul>
 8018ce2:	494c      	ldr	r1, [pc, #304]	; (8018e14 <__ieee754_acosf+0x2b4>)
 8018ce4:	f7e7 ff5c 	bl	8000ba0 <__aeabi_fsub>
 8018ce8:	4629      	mov	r1, r5
 8018cea:	f7e7 ff5b 	bl	8000ba4 <__addsf3>
 8018cee:	4601      	mov	r1, r0
 8018cf0:	f7e7 ff58 	bl	8000ba4 <__addsf3>
 8018cf4:	4601      	mov	r1, r0
 8018cf6:	4849      	ldr	r0, [pc, #292]	; (8018e1c <__ieee754_acosf+0x2bc>)
 8018cf8:	e79e      	b.n	8018c38 <__ieee754_acosf+0xd8>
 8018cfa:	4601      	mov	r1, r0
 8018cfc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8018d00:	f7e7 ff4e 	bl	8000ba0 <__aeabi_fsub>
 8018d04:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8018d08:	f7e8 f854 	bl	8000db4 <__aeabi_fmul>
 8018d0c:	4604      	mov	r4, r0
 8018d0e:	f000 fbb1 	bl	8019474 <__ieee754_sqrtf>
 8018d12:	4936      	ldr	r1, [pc, #216]	; (8018dec <__ieee754_acosf+0x28c>)
 8018d14:	4606      	mov	r6, r0
 8018d16:	f420 657f 	bic.w	r5, r0, #4080	; 0xff0
 8018d1a:	4620      	mov	r0, r4
 8018d1c:	f7e8 f84a 	bl	8000db4 <__aeabi_fmul>
 8018d20:	4933      	ldr	r1, [pc, #204]	; (8018df0 <__ieee754_acosf+0x290>)
 8018d22:	f7e7 ff3f 	bl	8000ba4 <__addsf3>
 8018d26:	4621      	mov	r1, r4
 8018d28:	f7e8 f844 	bl	8000db4 <__aeabi_fmul>
 8018d2c:	4931      	ldr	r1, [pc, #196]	; (8018df4 <__ieee754_acosf+0x294>)
 8018d2e:	f7e7 ff37 	bl	8000ba0 <__aeabi_fsub>
 8018d32:	4621      	mov	r1, r4
 8018d34:	f7e8 f83e 	bl	8000db4 <__aeabi_fmul>
 8018d38:	492f      	ldr	r1, [pc, #188]	; (8018df8 <__ieee754_acosf+0x298>)
 8018d3a:	f7e7 ff33 	bl	8000ba4 <__addsf3>
 8018d3e:	4621      	mov	r1, r4
 8018d40:	f7e8 f838 	bl	8000db4 <__aeabi_fmul>
 8018d44:	492d      	ldr	r1, [pc, #180]	; (8018dfc <__ieee754_acosf+0x29c>)
 8018d46:	f7e7 ff2b 	bl	8000ba0 <__aeabi_fsub>
 8018d4a:	4621      	mov	r1, r4
 8018d4c:	f7e8 f832 	bl	8000db4 <__aeabi_fmul>
 8018d50:	492b      	ldr	r1, [pc, #172]	; (8018e00 <__ieee754_acosf+0x2a0>)
 8018d52:	f7e7 ff27 	bl	8000ba4 <__addsf3>
 8018d56:	4621      	mov	r1, r4
 8018d58:	f7e8 f82c 	bl	8000db4 <__aeabi_fmul>
 8018d5c:	4929      	ldr	r1, [pc, #164]	; (8018e04 <__ieee754_acosf+0x2a4>)
 8018d5e:	4607      	mov	r7, r0
 8018d60:	4620      	mov	r0, r4
 8018d62:	f7e8 f827 	bl	8000db4 <__aeabi_fmul>
 8018d66:	4928      	ldr	r1, [pc, #160]	; (8018e08 <__ieee754_acosf+0x2a8>)
 8018d68:	f7e7 ff1a 	bl	8000ba0 <__aeabi_fsub>
 8018d6c:	4621      	mov	r1, r4
 8018d6e:	f7e8 f821 	bl	8000db4 <__aeabi_fmul>
 8018d72:	4926      	ldr	r1, [pc, #152]	; (8018e0c <__ieee754_acosf+0x2ac>)
 8018d74:	f7e7 ff16 	bl	8000ba4 <__addsf3>
 8018d78:	4621      	mov	r1, r4
 8018d7a:	f7e8 f81b 	bl	8000db4 <__aeabi_fmul>
 8018d7e:	4924      	ldr	r1, [pc, #144]	; (8018e10 <__ieee754_acosf+0x2b0>)
 8018d80:	f7e7 ff0e 	bl	8000ba0 <__aeabi_fsub>
 8018d84:	4621      	mov	r1, r4
 8018d86:	f7e8 f815 	bl	8000db4 <__aeabi_fmul>
 8018d8a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8018d8e:	f7e7 ff09 	bl	8000ba4 <__addsf3>
 8018d92:	4601      	mov	r1, r0
 8018d94:	4638      	mov	r0, r7
 8018d96:	f7e8 f8c1 	bl	8000f1c <__aeabi_fdiv>
 8018d9a:	4631      	mov	r1, r6
 8018d9c:	f7e8 f80a 	bl	8000db4 <__aeabi_fmul>
 8018da0:	f025 050f 	bic.w	r5, r5, #15
 8018da4:	4607      	mov	r7, r0
 8018da6:	4629      	mov	r1, r5
 8018da8:	4628      	mov	r0, r5
 8018daa:	f7e8 f803 	bl	8000db4 <__aeabi_fmul>
 8018dae:	4601      	mov	r1, r0
 8018db0:	4620      	mov	r0, r4
 8018db2:	f7e7 fef5 	bl	8000ba0 <__aeabi_fsub>
 8018db6:	4629      	mov	r1, r5
 8018db8:	4604      	mov	r4, r0
 8018dba:	4630      	mov	r0, r6
 8018dbc:	f7e7 fef2 	bl	8000ba4 <__addsf3>
 8018dc0:	4601      	mov	r1, r0
 8018dc2:	4620      	mov	r0, r4
 8018dc4:	f7e8 f8aa 	bl	8000f1c <__aeabi_fdiv>
 8018dc8:	4601      	mov	r1, r0
 8018dca:	4638      	mov	r0, r7
 8018dcc:	f7e7 feea 	bl	8000ba4 <__addsf3>
 8018dd0:	4629      	mov	r1, r5
 8018dd2:	f7e7 fee7 	bl	8000ba4 <__addsf3>
 8018dd6:	4601      	mov	r1, r0
 8018dd8:	f7e7 fee4 	bl	8000ba4 <__addsf3>
 8018ddc:	e6cb      	b.n	8018b76 <__ieee754_acosf+0x16>
 8018dde:	2000      	movs	r0, #0
 8018de0:	e6c9      	b.n	8018b76 <__ieee754_acosf+0x16>
 8018de2:	480f      	ldr	r0, [pc, #60]	; (8018e20 <__ieee754_acosf+0x2c0>)
 8018de4:	e6c7      	b.n	8018b76 <__ieee754_acosf+0x16>
 8018de6:	bf00      	nop
 8018de8:	40490fdb 	.word	0x40490fdb
 8018dec:	3811ef08 	.word	0x3811ef08
 8018df0:	3a4f7f04 	.word	0x3a4f7f04
 8018df4:	3d241146 	.word	0x3d241146
 8018df8:	3e4e0aa8 	.word	0x3e4e0aa8
 8018dfc:	3ea6b090 	.word	0x3ea6b090
 8018e00:	3e2aaaab 	.word	0x3e2aaaab
 8018e04:	3d9dc62e 	.word	0x3d9dc62e
 8018e08:	3f303361 	.word	0x3f303361
 8018e0c:	4001572d 	.word	0x4001572d
 8018e10:	4019d139 	.word	0x4019d139
 8018e14:	33a22168 	.word	0x33a22168
 8018e18:	3fc90fda 	.word	0x3fc90fda
 8018e1c:	40490fda 	.word	0x40490fda
 8018e20:	3fc90fdb 	.word	0x3fc90fdb

08018e24 <__ieee754_asinf>:
 8018e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018e28:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 8018e2c:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8018e30:	4604      	mov	r4, r0
 8018e32:	4605      	mov	r5, r0
 8018e34:	d10c      	bne.n	8018e50 <__ieee754_asinf+0x2c>
 8018e36:	498d      	ldr	r1, [pc, #564]	; (801906c <__ieee754_asinf+0x248>)
 8018e38:	f7e7 ffbc 	bl	8000db4 <__aeabi_fmul>
 8018e3c:	498c      	ldr	r1, [pc, #560]	; (8019070 <__ieee754_asinf+0x24c>)
 8018e3e:	4605      	mov	r5, r0
 8018e40:	4620      	mov	r0, r4
 8018e42:	f7e7 ffb7 	bl	8000db4 <__aeabi_fmul>
 8018e46:	4601      	mov	r1, r0
 8018e48:	4628      	mov	r0, r5
 8018e4a:	f7e7 feab 	bl	8000ba4 <__addsf3>
 8018e4e:	e006      	b.n	8018e5e <__ieee754_asinf+0x3a>
 8018e50:	dd07      	ble.n	8018e62 <__ieee754_asinf+0x3e>
 8018e52:	4601      	mov	r1, r0
 8018e54:	f7e7 fea4 	bl	8000ba0 <__aeabi_fsub>
 8018e58:	4601      	mov	r1, r0
 8018e5a:	f7e8 f85f 	bl	8000f1c <__aeabi_fdiv>
 8018e5e:	4604      	mov	r4, r0
 8018e60:	e00e      	b.n	8018e80 <__ieee754_asinf+0x5c>
 8018e62:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 8018e66:	da58      	bge.n	8018f1a <__ieee754_asinf+0xf6>
 8018e68:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 8018e6c:	da0b      	bge.n	8018e86 <__ieee754_asinf+0x62>
 8018e6e:	4981      	ldr	r1, [pc, #516]	; (8019074 <__ieee754_asinf+0x250>)
 8018e70:	f7e7 fe98 	bl	8000ba4 <__addsf3>
 8018e74:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8018e78:	f7e8 f958 	bl	800112c <__aeabi_fcmpgt>
 8018e7c:	2800      	cmp	r0, #0
 8018e7e:	d04c      	beq.n	8018f1a <__ieee754_asinf+0xf6>
 8018e80:	4620      	mov	r0, r4
 8018e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e86:	4601      	mov	r1, r0
 8018e88:	f7e7 ff94 	bl	8000db4 <__aeabi_fmul>
 8018e8c:	497a      	ldr	r1, [pc, #488]	; (8019078 <__ieee754_asinf+0x254>)
 8018e8e:	4605      	mov	r5, r0
 8018e90:	f7e7 ff90 	bl	8000db4 <__aeabi_fmul>
 8018e94:	4979      	ldr	r1, [pc, #484]	; (801907c <__ieee754_asinf+0x258>)
 8018e96:	f7e7 fe85 	bl	8000ba4 <__addsf3>
 8018e9a:	4629      	mov	r1, r5
 8018e9c:	f7e7 ff8a 	bl	8000db4 <__aeabi_fmul>
 8018ea0:	4977      	ldr	r1, [pc, #476]	; (8019080 <__ieee754_asinf+0x25c>)
 8018ea2:	f7e7 fe7d 	bl	8000ba0 <__aeabi_fsub>
 8018ea6:	4629      	mov	r1, r5
 8018ea8:	f7e7 ff84 	bl	8000db4 <__aeabi_fmul>
 8018eac:	4975      	ldr	r1, [pc, #468]	; (8019084 <__ieee754_asinf+0x260>)
 8018eae:	f7e7 fe79 	bl	8000ba4 <__addsf3>
 8018eb2:	4629      	mov	r1, r5
 8018eb4:	f7e7 ff7e 	bl	8000db4 <__aeabi_fmul>
 8018eb8:	4973      	ldr	r1, [pc, #460]	; (8019088 <__ieee754_asinf+0x264>)
 8018eba:	f7e7 fe71 	bl	8000ba0 <__aeabi_fsub>
 8018ebe:	4629      	mov	r1, r5
 8018ec0:	f7e7 ff78 	bl	8000db4 <__aeabi_fmul>
 8018ec4:	4971      	ldr	r1, [pc, #452]	; (801908c <__ieee754_asinf+0x268>)
 8018ec6:	f7e7 fe6d 	bl	8000ba4 <__addsf3>
 8018eca:	4629      	mov	r1, r5
 8018ecc:	f7e7 ff72 	bl	8000db4 <__aeabi_fmul>
 8018ed0:	496f      	ldr	r1, [pc, #444]	; (8019090 <__ieee754_asinf+0x26c>)
 8018ed2:	4606      	mov	r6, r0
 8018ed4:	4628      	mov	r0, r5
 8018ed6:	f7e7 ff6d 	bl	8000db4 <__aeabi_fmul>
 8018eda:	496e      	ldr	r1, [pc, #440]	; (8019094 <__ieee754_asinf+0x270>)
 8018edc:	f7e7 fe60 	bl	8000ba0 <__aeabi_fsub>
 8018ee0:	4629      	mov	r1, r5
 8018ee2:	f7e7 ff67 	bl	8000db4 <__aeabi_fmul>
 8018ee6:	496c      	ldr	r1, [pc, #432]	; (8019098 <__ieee754_asinf+0x274>)
 8018ee8:	f7e7 fe5c 	bl	8000ba4 <__addsf3>
 8018eec:	4629      	mov	r1, r5
 8018eee:	f7e7 ff61 	bl	8000db4 <__aeabi_fmul>
 8018ef2:	496a      	ldr	r1, [pc, #424]	; (801909c <__ieee754_asinf+0x278>)
 8018ef4:	f7e7 fe54 	bl	8000ba0 <__aeabi_fsub>
 8018ef8:	4629      	mov	r1, r5
 8018efa:	f7e7 ff5b 	bl	8000db4 <__aeabi_fmul>
 8018efe:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8018f02:	f7e7 fe4f 	bl	8000ba4 <__addsf3>
 8018f06:	4601      	mov	r1, r0
 8018f08:	4630      	mov	r0, r6
 8018f0a:	f7e8 f807 	bl	8000f1c <__aeabi_fdiv>
 8018f0e:	4621      	mov	r1, r4
 8018f10:	f7e7 ff50 	bl	8000db4 <__aeabi_fmul>
 8018f14:	4601      	mov	r1, r0
 8018f16:	4620      	mov	r0, r4
 8018f18:	e797      	b.n	8018e4a <__ieee754_asinf+0x26>
 8018f1a:	4620      	mov	r0, r4
 8018f1c:	f001 fa6a 	bl	801a3f4 <fabsf>
 8018f20:	4601      	mov	r1, r0
 8018f22:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8018f26:	f7e7 fe3b 	bl	8000ba0 <__aeabi_fsub>
 8018f2a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8018f2e:	f7e7 ff41 	bl	8000db4 <__aeabi_fmul>
 8018f32:	4951      	ldr	r1, [pc, #324]	; (8019078 <__ieee754_asinf+0x254>)
 8018f34:	4606      	mov	r6, r0
 8018f36:	f7e7 ff3d 	bl	8000db4 <__aeabi_fmul>
 8018f3a:	4950      	ldr	r1, [pc, #320]	; (801907c <__ieee754_asinf+0x258>)
 8018f3c:	f7e7 fe32 	bl	8000ba4 <__addsf3>
 8018f40:	4631      	mov	r1, r6
 8018f42:	f7e7 ff37 	bl	8000db4 <__aeabi_fmul>
 8018f46:	494e      	ldr	r1, [pc, #312]	; (8019080 <__ieee754_asinf+0x25c>)
 8018f48:	f7e7 fe2a 	bl	8000ba0 <__aeabi_fsub>
 8018f4c:	4631      	mov	r1, r6
 8018f4e:	f7e7 ff31 	bl	8000db4 <__aeabi_fmul>
 8018f52:	494c      	ldr	r1, [pc, #304]	; (8019084 <__ieee754_asinf+0x260>)
 8018f54:	f7e7 fe26 	bl	8000ba4 <__addsf3>
 8018f58:	4631      	mov	r1, r6
 8018f5a:	f7e7 ff2b 	bl	8000db4 <__aeabi_fmul>
 8018f5e:	494a      	ldr	r1, [pc, #296]	; (8019088 <__ieee754_asinf+0x264>)
 8018f60:	f7e7 fe1e 	bl	8000ba0 <__aeabi_fsub>
 8018f64:	4631      	mov	r1, r6
 8018f66:	f7e7 ff25 	bl	8000db4 <__aeabi_fmul>
 8018f6a:	4948      	ldr	r1, [pc, #288]	; (801908c <__ieee754_asinf+0x268>)
 8018f6c:	f7e7 fe1a 	bl	8000ba4 <__addsf3>
 8018f70:	4631      	mov	r1, r6
 8018f72:	f7e7 ff1f 	bl	8000db4 <__aeabi_fmul>
 8018f76:	4946      	ldr	r1, [pc, #280]	; (8019090 <__ieee754_asinf+0x26c>)
 8018f78:	4681      	mov	r9, r0
 8018f7a:	4630      	mov	r0, r6
 8018f7c:	f7e7 ff1a 	bl	8000db4 <__aeabi_fmul>
 8018f80:	4944      	ldr	r1, [pc, #272]	; (8019094 <__ieee754_asinf+0x270>)
 8018f82:	f7e7 fe0d 	bl	8000ba0 <__aeabi_fsub>
 8018f86:	4631      	mov	r1, r6
 8018f88:	f7e7 ff14 	bl	8000db4 <__aeabi_fmul>
 8018f8c:	4942      	ldr	r1, [pc, #264]	; (8019098 <__ieee754_asinf+0x274>)
 8018f8e:	f7e7 fe09 	bl	8000ba4 <__addsf3>
 8018f92:	4631      	mov	r1, r6
 8018f94:	f7e7 ff0e 	bl	8000db4 <__aeabi_fmul>
 8018f98:	4940      	ldr	r1, [pc, #256]	; (801909c <__ieee754_asinf+0x278>)
 8018f9a:	f7e7 fe01 	bl	8000ba0 <__aeabi_fsub>
 8018f9e:	4631      	mov	r1, r6
 8018fa0:	f7e7 ff08 	bl	8000db4 <__aeabi_fmul>
 8018fa4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8018fa8:	f7e7 fdfc 	bl	8000ba4 <__addsf3>
 8018fac:	4682      	mov	sl, r0
 8018fae:	4630      	mov	r0, r6
 8018fb0:	f000 fa60 	bl	8019474 <__ieee754_sqrtf>
 8018fb4:	4b3a      	ldr	r3, [pc, #232]	; (80190a0 <__ieee754_asinf+0x27c>)
 8018fb6:	4598      	cmp	r8, r3
 8018fb8:	4607      	mov	r7, r0
 8018fba:	dd1a      	ble.n	8018ff2 <__ieee754_asinf+0x1ce>
 8018fbc:	4651      	mov	r1, sl
 8018fbe:	4648      	mov	r0, r9
 8018fc0:	f7e7 ffac 	bl	8000f1c <__aeabi_fdiv>
 8018fc4:	4639      	mov	r1, r7
 8018fc6:	f7e7 fef5 	bl	8000db4 <__aeabi_fmul>
 8018fca:	4639      	mov	r1, r7
 8018fcc:	f7e7 fdea 	bl	8000ba4 <__addsf3>
 8018fd0:	4601      	mov	r1, r0
 8018fd2:	f7e7 fde7 	bl	8000ba4 <__addsf3>
 8018fd6:	4933      	ldr	r1, [pc, #204]	; (80190a4 <__ieee754_asinf+0x280>)
 8018fd8:	f7e7 fde4 	bl	8000ba4 <__addsf3>
 8018fdc:	4601      	mov	r1, r0
 8018fde:	4823      	ldr	r0, [pc, #140]	; (801906c <__ieee754_asinf+0x248>)
 8018fe0:	f7e7 fdde 	bl	8000ba0 <__aeabi_fsub>
 8018fe4:	2d00      	cmp	r5, #0
 8018fe6:	4604      	mov	r4, r0
 8018fe8:	f73f af4a 	bgt.w	8018e80 <__ieee754_asinf+0x5c>
 8018fec:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8018ff0:	e735      	b.n	8018e5e <__ieee754_asinf+0x3a>
 8018ff2:	4601      	mov	r1, r0
 8018ff4:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 8018ff8:	f7e7 fdd4 	bl	8000ba4 <__addsf3>
 8018ffc:	4651      	mov	r1, sl
 8018ffe:	4604      	mov	r4, r0
 8019000:	4648      	mov	r0, r9
 8019002:	f7e7 ff8b 	bl	8000f1c <__aeabi_fdiv>
 8019006:	4601      	mov	r1, r0
 8019008:	4620      	mov	r0, r4
 801900a:	f7e7 fed3 	bl	8000db4 <__aeabi_fmul>
 801900e:	f028 080f 	bic.w	r8, r8, #15
 8019012:	4681      	mov	r9, r0
 8019014:	4641      	mov	r1, r8
 8019016:	4640      	mov	r0, r8
 8019018:	f7e7 fecc 	bl	8000db4 <__aeabi_fmul>
 801901c:	4601      	mov	r1, r0
 801901e:	4630      	mov	r0, r6
 8019020:	f7e7 fdbe 	bl	8000ba0 <__aeabi_fsub>
 8019024:	4641      	mov	r1, r8
 8019026:	4604      	mov	r4, r0
 8019028:	4638      	mov	r0, r7
 801902a:	f7e7 fdbb 	bl	8000ba4 <__addsf3>
 801902e:	4601      	mov	r1, r0
 8019030:	4620      	mov	r0, r4
 8019032:	f7e7 ff73 	bl	8000f1c <__aeabi_fdiv>
 8019036:	4601      	mov	r1, r0
 8019038:	f7e7 fdb4 	bl	8000ba4 <__addsf3>
 801903c:	4601      	mov	r1, r0
 801903e:	480c      	ldr	r0, [pc, #48]	; (8019070 <__ieee754_asinf+0x24c>)
 8019040:	f7e7 fdae 	bl	8000ba0 <__aeabi_fsub>
 8019044:	4601      	mov	r1, r0
 8019046:	4648      	mov	r0, r9
 8019048:	f7e7 fdaa 	bl	8000ba0 <__aeabi_fsub>
 801904c:	4641      	mov	r1, r8
 801904e:	4604      	mov	r4, r0
 8019050:	4640      	mov	r0, r8
 8019052:	f7e7 fda7 	bl	8000ba4 <__addsf3>
 8019056:	4601      	mov	r1, r0
 8019058:	4813      	ldr	r0, [pc, #76]	; (80190a8 <__ieee754_asinf+0x284>)
 801905a:	f7e7 fda1 	bl	8000ba0 <__aeabi_fsub>
 801905e:	4601      	mov	r1, r0
 8019060:	4620      	mov	r0, r4
 8019062:	f7e7 fd9d 	bl	8000ba0 <__aeabi_fsub>
 8019066:	4601      	mov	r1, r0
 8019068:	480f      	ldr	r0, [pc, #60]	; (80190a8 <__ieee754_asinf+0x284>)
 801906a:	e7b9      	b.n	8018fe0 <__ieee754_asinf+0x1bc>
 801906c:	3fc90fdb 	.word	0x3fc90fdb
 8019070:	b33bbd2e 	.word	0xb33bbd2e
 8019074:	7149f2ca 	.word	0x7149f2ca
 8019078:	3811ef08 	.word	0x3811ef08
 801907c:	3a4f7f04 	.word	0x3a4f7f04
 8019080:	3d241146 	.word	0x3d241146
 8019084:	3e4e0aa8 	.word	0x3e4e0aa8
 8019088:	3ea6b090 	.word	0x3ea6b090
 801908c:	3e2aaaab 	.word	0x3e2aaaab
 8019090:	3d9dc62e 	.word	0x3d9dc62e
 8019094:	3f303361 	.word	0x3f303361
 8019098:	4001572d 	.word	0x4001572d
 801909c:	4019d139 	.word	0x4019d139
 80190a0:	3f799999 	.word	0x3f799999
 80190a4:	333bbd2e 	.word	0x333bbd2e
 80190a8:	3f490fdb 	.word	0x3f490fdb

080190ac <__ieee754_atan2f>:
 80190ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80190ae:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80190b2:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80190b6:	4603      	mov	r3, r0
 80190b8:	dc05      	bgt.n	80190c6 <__ieee754_atan2f+0x1a>
 80190ba:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 80190be:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80190c2:	4607      	mov	r7, r0
 80190c4:	dd04      	ble.n	80190d0 <__ieee754_atan2f+0x24>
 80190c6:	4618      	mov	r0, r3
 80190c8:	f7e7 fd6c 	bl	8000ba4 <__addsf3>
 80190cc:	4603      	mov	r3, r0
 80190ce:	e011      	b.n	80190f4 <__ieee754_atan2f+0x48>
 80190d0:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 80190d4:	d103      	bne.n	80190de <__ieee754_atan2f+0x32>
 80190d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80190da:	f001 b87f 	b.w	801a1dc <atanf>
 80190de:	178c      	asrs	r4, r1, #30
 80190e0:	f004 0402 	and.w	r4, r4, #2
 80190e4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80190e8:	b932      	cbnz	r2, 80190f8 <__ieee754_atan2f+0x4c>
 80190ea:	2c02      	cmp	r4, #2
 80190ec:	d04c      	beq.n	8019188 <__ieee754_atan2f+0xdc>
 80190ee:	2c03      	cmp	r4, #3
 80190f0:	d100      	bne.n	80190f4 <__ieee754_atan2f+0x48>
 80190f2:	4b29      	ldr	r3, [pc, #164]	; (8019198 <__ieee754_atan2f+0xec>)
 80190f4:	4618      	mov	r0, r3
 80190f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80190f8:	b91e      	cbnz	r6, 8019102 <__ieee754_atan2f+0x56>
 80190fa:	2f00      	cmp	r7, #0
 80190fc:	da4a      	bge.n	8019194 <__ieee754_atan2f+0xe8>
 80190fe:	4b27      	ldr	r3, [pc, #156]	; (801919c <__ieee754_atan2f+0xf0>)
 8019100:	e7f8      	b.n	80190f4 <__ieee754_atan2f+0x48>
 8019102:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8019106:	d10e      	bne.n	8019126 <__ieee754_atan2f+0x7a>
 8019108:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801910c:	f104 34ff 	add.w	r4, r4, #4294967295
 8019110:	d105      	bne.n	801911e <__ieee754_atan2f+0x72>
 8019112:	2c02      	cmp	r4, #2
 8019114:	d83a      	bhi.n	801918c <__ieee754_atan2f+0xe0>
 8019116:	4b22      	ldr	r3, [pc, #136]	; (80191a0 <__ieee754_atan2f+0xf4>)
 8019118:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801911c:	e7ea      	b.n	80190f4 <__ieee754_atan2f+0x48>
 801911e:	2c02      	cmp	r4, #2
 8019120:	d836      	bhi.n	8019190 <__ieee754_atan2f+0xe4>
 8019122:	4b20      	ldr	r3, [pc, #128]	; (80191a4 <__ieee754_atan2f+0xf8>)
 8019124:	e7f8      	b.n	8019118 <__ieee754_atan2f+0x6c>
 8019126:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801912a:	d0e6      	beq.n	80190fa <__ieee754_atan2f+0x4e>
 801912c:	1b92      	subs	r2, r2, r6
 801912e:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 8019132:	ea4f 50e2 	mov.w	r0, r2, asr #23
 8019136:	da17      	bge.n	8019168 <__ieee754_atan2f+0xbc>
 8019138:	2900      	cmp	r1, #0
 801913a:	da01      	bge.n	8019140 <__ieee754_atan2f+0x94>
 801913c:	303c      	adds	r0, #60	; 0x3c
 801913e:	db15      	blt.n	801916c <__ieee754_atan2f+0xc0>
 8019140:	4618      	mov	r0, r3
 8019142:	f7e7 feeb 	bl	8000f1c <__aeabi_fdiv>
 8019146:	f001 f955 	bl	801a3f4 <fabsf>
 801914a:	f001 f847 	bl	801a1dc <atanf>
 801914e:	4603      	mov	r3, r0
 8019150:	2c01      	cmp	r4, #1
 8019152:	d00d      	beq.n	8019170 <__ieee754_atan2f+0xc4>
 8019154:	2c02      	cmp	r4, #2
 8019156:	d00e      	beq.n	8019176 <__ieee754_atan2f+0xca>
 8019158:	2c00      	cmp	r4, #0
 801915a:	d0cb      	beq.n	80190f4 <__ieee754_atan2f+0x48>
 801915c:	4912      	ldr	r1, [pc, #72]	; (80191a8 <__ieee754_atan2f+0xfc>)
 801915e:	4618      	mov	r0, r3
 8019160:	f7e7 fd20 	bl	8000ba4 <__addsf3>
 8019164:	4911      	ldr	r1, [pc, #68]	; (80191ac <__ieee754_atan2f+0x100>)
 8019166:	e00c      	b.n	8019182 <__ieee754_atan2f+0xd6>
 8019168:	4b11      	ldr	r3, [pc, #68]	; (80191b0 <__ieee754_atan2f+0x104>)
 801916a:	e7f1      	b.n	8019150 <__ieee754_atan2f+0xa4>
 801916c:	2300      	movs	r3, #0
 801916e:	e7ef      	b.n	8019150 <__ieee754_atan2f+0xa4>
 8019170:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8019174:	e7be      	b.n	80190f4 <__ieee754_atan2f+0x48>
 8019176:	490c      	ldr	r1, [pc, #48]	; (80191a8 <__ieee754_atan2f+0xfc>)
 8019178:	4618      	mov	r0, r3
 801917a:	f7e7 fd13 	bl	8000ba4 <__addsf3>
 801917e:	4601      	mov	r1, r0
 8019180:	480a      	ldr	r0, [pc, #40]	; (80191ac <__ieee754_atan2f+0x100>)
 8019182:	f7e7 fd0d 	bl	8000ba0 <__aeabi_fsub>
 8019186:	e7a1      	b.n	80190cc <__ieee754_atan2f+0x20>
 8019188:	4b08      	ldr	r3, [pc, #32]	; (80191ac <__ieee754_atan2f+0x100>)
 801918a:	e7b3      	b.n	80190f4 <__ieee754_atan2f+0x48>
 801918c:	4b09      	ldr	r3, [pc, #36]	; (80191b4 <__ieee754_atan2f+0x108>)
 801918e:	e7b1      	b.n	80190f4 <__ieee754_atan2f+0x48>
 8019190:	2300      	movs	r3, #0
 8019192:	e7af      	b.n	80190f4 <__ieee754_atan2f+0x48>
 8019194:	4b06      	ldr	r3, [pc, #24]	; (80191b0 <__ieee754_atan2f+0x104>)
 8019196:	e7ad      	b.n	80190f4 <__ieee754_atan2f+0x48>
 8019198:	c0490fdb 	.word	0xc0490fdb
 801919c:	bfc90fdb 	.word	0xbfc90fdb
 80191a0:	0801a708 	.word	0x0801a708
 80191a4:	0801a714 	.word	0x0801a714
 80191a8:	33bbbd2e 	.word	0x33bbbd2e
 80191ac:	40490fdb 	.word	0x40490fdb
 80191b0:	3fc90fdb 	.word	0x3fc90fdb
 80191b4:	3f490fdb 	.word	0x3f490fdb

080191b8 <__ieee754_rem_pio2f>:
 80191b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191bc:	4aa0      	ldr	r2, [pc, #640]	; (8019440 <__ieee754_rem_pio2f+0x288>)
 80191be:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 80191c2:	4296      	cmp	r6, r2
 80191c4:	b087      	sub	sp, #28
 80191c6:	460c      	mov	r4, r1
 80191c8:	4682      	mov	sl, r0
 80191ca:	dc04      	bgt.n	80191d6 <__ieee754_rem_pio2f+0x1e>
 80191cc:	2300      	movs	r3, #0
 80191ce:	6008      	str	r0, [r1, #0]
 80191d0:	604b      	str	r3, [r1, #4]
 80191d2:	2500      	movs	r5, #0
 80191d4:	e01a      	b.n	801920c <__ieee754_rem_pio2f+0x54>
 80191d6:	4a9b      	ldr	r2, [pc, #620]	; (8019444 <__ieee754_rem_pio2f+0x28c>)
 80191d8:	4296      	cmp	r6, r2
 80191da:	dc4b      	bgt.n	8019274 <__ieee754_rem_pio2f+0xbc>
 80191dc:	2800      	cmp	r0, #0
 80191de:	499a      	ldr	r1, [pc, #616]	; (8019448 <__ieee754_rem_pio2f+0x290>)
 80191e0:	4f9a      	ldr	r7, [pc, #616]	; (801944c <__ieee754_rem_pio2f+0x294>)
 80191e2:	f026 060f 	bic.w	r6, r6, #15
 80191e6:	dd23      	ble.n	8019230 <__ieee754_rem_pio2f+0x78>
 80191e8:	f7e7 fcda 	bl	8000ba0 <__aeabi_fsub>
 80191ec:	42be      	cmp	r6, r7
 80191ee:	4605      	mov	r5, r0
 80191f0:	d010      	beq.n	8019214 <__ieee754_rem_pio2f+0x5c>
 80191f2:	4997      	ldr	r1, [pc, #604]	; (8019450 <__ieee754_rem_pio2f+0x298>)
 80191f4:	f7e7 fcd4 	bl	8000ba0 <__aeabi_fsub>
 80191f8:	4601      	mov	r1, r0
 80191fa:	6020      	str	r0, [r4, #0]
 80191fc:	4628      	mov	r0, r5
 80191fe:	f7e7 fccf 	bl	8000ba0 <__aeabi_fsub>
 8019202:	4993      	ldr	r1, [pc, #588]	; (8019450 <__ieee754_rem_pio2f+0x298>)
 8019204:	f7e7 fccc 	bl	8000ba0 <__aeabi_fsub>
 8019208:	2501      	movs	r5, #1
 801920a:	6060      	str	r0, [r4, #4]
 801920c:	4628      	mov	r0, r5
 801920e:	b007      	add	sp, #28
 8019210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019214:	498f      	ldr	r1, [pc, #572]	; (8019454 <__ieee754_rem_pio2f+0x29c>)
 8019216:	f7e7 fcc3 	bl	8000ba0 <__aeabi_fsub>
 801921a:	498f      	ldr	r1, [pc, #572]	; (8019458 <__ieee754_rem_pio2f+0x2a0>)
 801921c:	4605      	mov	r5, r0
 801921e:	f7e7 fcbf 	bl	8000ba0 <__aeabi_fsub>
 8019222:	4601      	mov	r1, r0
 8019224:	6020      	str	r0, [r4, #0]
 8019226:	4628      	mov	r0, r5
 8019228:	f7e7 fcba 	bl	8000ba0 <__aeabi_fsub>
 801922c:	498a      	ldr	r1, [pc, #552]	; (8019458 <__ieee754_rem_pio2f+0x2a0>)
 801922e:	e7e9      	b.n	8019204 <__ieee754_rem_pio2f+0x4c>
 8019230:	f7e7 fcb8 	bl	8000ba4 <__addsf3>
 8019234:	42be      	cmp	r6, r7
 8019236:	4605      	mov	r5, r0
 8019238:	d00e      	beq.n	8019258 <__ieee754_rem_pio2f+0xa0>
 801923a:	4985      	ldr	r1, [pc, #532]	; (8019450 <__ieee754_rem_pio2f+0x298>)
 801923c:	f7e7 fcb2 	bl	8000ba4 <__addsf3>
 8019240:	4601      	mov	r1, r0
 8019242:	6020      	str	r0, [r4, #0]
 8019244:	4628      	mov	r0, r5
 8019246:	f7e7 fcab 	bl	8000ba0 <__aeabi_fsub>
 801924a:	4981      	ldr	r1, [pc, #516]	; (8019450 <__ieee754_rem_pio2f+0x298>)
 801924c:	f7e7 fcaa 	bl	8000ba4 <__addsf3>
 8019250:	f04f 35ff 	mov.w	r5, #4294967295
 8019254:	6060      	str	r0, [r4, #4]
 8019256:	e7d9      	b.n	801920c <__ieee754_rem_pio2f+0x54>
 8019258:	497e      	ldr	r1, [pc, #504]	; (8019454 <__ieee754_rem_pio2f+0x29c>)
 801925a:	f7e7 fca3 	bl	8000ba4 <__addsf3>
 801925e:	497e      	ldr	r1, [pc, #504]	; (8019458 <__ieee754_rem_pio2f+0x2a0>)
 8019260:	4605      	mov	r5, r0
 8019262:	f7e7 fc9f 	bl	8000ba4 <__addsf3>
 8019266:	4601      	mov	r1, r0
 8019268:	6020      	str	r0, [r4, #0]
 801926a:	4628      	mov	r0, r5
 801926c:	f7e7 fc98 	bl	8000ba0 <__aeabi_fsub>
 8019270:	4979      	ldr	r1, [pc, #484]	; (8019458 <__ieee754_rem_pio2f+0x2a0>)
 8019272:	e7eb      	b.n	801924c <__ieee754_rem_pio2f+0x94>
 8019274:	4a79      	ldr	r2, [pc, #484]	; (801945c <__ieee754_rem_pio2f+0x2a4>)
 8019276:	4296      	cmp	r6, r2
 8019278:	f300 8091 	bgt.w	801939e <__ieee754_rem_pio2f+0x1e6>
 801927c:	f001 f8ba 	bl	801a3f4 <fabsf>
 8019280:	4977      	ldr	r1, [pc, #476]	; (8019460 <__ieee754_rem_pio2f+0x2a8>)
 8019282:	4607      	mov	r7, r0
 8019284:	f7e7 fd96 	bl	8000db4 <__aeabi_fmul>
 8019288:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 801928c:	f7e7 fc8a 	bl	8000ba4 <__addsf3>
 8019290:	f7e7 ff6c 	bl	800116c <__aeabi_f2iz>
 8019294:	4605      	mov	r5, r0
 8019296:	f7e7 fd39 	bl	8000d0c <__aeabi_i2f>
 801929a:	496b      	ldr	r1, [pc, #428]	; (8019448 <__ieee754_rem_pio2f+0x290>)
 801929c:	4681      	mov	r9, r0
 801929e:	f7e7 fd89 	bl	8000db4 <__aeabi_fmul>
 80192a2:	4601      	mov	r1, r0
 80192a4:	4638      	mov	r0, r7
 80192a6:	f7e7 fc7b 	bl	8000ba0 <__aeabi_fsub>
 80192aa:	4969      	ldr	r1, [pc, #420]	; (8019450 <__ieee754_rem_pio2f+0x298>)
 80192ac:	4680      	mov	r8, r0
 80192ae:	4648      	mov	r0, r9
 80192b0:	f7e7 fd80 	bl	8000db4 <__aeabi_fmul>
 80192b4:	2d1f      	cmp	r5, #31
 80192b6:	4607      	mov	r7, r0
 80192b8:	dc0c      	bgt.n	80192d4 <__ieee754_rem_pio2f+0x11c>
 80192ba:	4a6a      	ldr	r2, [pc, #424]	; (8019464 <__ieee754_rem_pio2f+0x2ac>)
 80192bc:	1e69      	subs	r1, r5, #1
 80192be:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 80192c2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80192c6:	4293      	cmp	r3, r2
 80192c8:	d004      	beq.n	80192d4 <__ieee754_rem_pio2f+0x11c>
 80192ca:	4639      	mov	r1, r7
 80192cc:	4640      	mov	r0, r8
 80192ce:	f7e7 fc67 	bl	8000ba0 <__aeabi_fsub>
 80192d2:	e00b      	b.n	80192ec <__ieee754_rem_pio2f+0x134>
 80192d4:	4639      	mov	r1, r7
 80192d6:	4640      	mov	r0, r8
 80192d8:	f7e7 fc62 	bl	8000ba0 <__aeabi_fsub>
 80192dc:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80192e0:	ea4f 5be6 	mov.w	fp, r6, asr #23
 80192e4:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 80192e8:	2e08      	cmp	r6, #8
 80192ea:	dc01      	bgt.n	80192f0 <__ieee754_rem_pio2f+0x138>
 80192ec:	6020      	str	r0, [r4, #0]
 80192ee:	e026      	b.n	801933e <__ieee754_rem_pio2f+0x186>
 80192f0:	4958      	ldr	r1, [pc, #352]	; (8019454 <__ieee754_rem_pio2f+0x29c>)
 80192f2:	4648      	mov	r0, r9
 80192f4:	f7e7 fd5e 	bl	8000db4 <__aeabi_fmul>
 80192f8:	4607      	mov	r7, r0
 80192fa:	4601      	mov	r1, r0
 80192fc:	4640      	mov	r0, r8
 80192fe:	f7e7 fc4f 	bl	8000ba0 <__aeabi_fsub>
 8019302:	4601      	mov	r1, r0
 8019304:	4606      	mov	r6, r0
 8019306:	4640      	mov	r0, r8
 8019308:	f7e7 fc4a 	bl	8000ba0 <__aeabi_fsub>
 801930c:	4639      	mov	r1, r7
 801930e:	f7e7 fc47 	bl	8000ba0 <__aeabi_fsub>
 8019312:	4951      	ldr	r1, [pc, #324]	; (8019458 <__ieee754_rem_pio2f+0x2a0>)
 8019314:	4607      	mov	r7, r0
 8019316:	4648      	mov	r0, r9
 8019318:	f7e7 fd4c 	bl	8000db4 <__aeabi_fmul>
 801931c:	4639      	mov	r1, r7
 801931e:	f7e7 fc3f 	bl	8000ba0 <__aeabi_fsub>
 8019322:	4601      	mov	r1, r0
 8019324:	4607      	mov	r7, r0
 8019326:	4630      	mov	r0, r6
 8019328:	f7e7 fc3a 	bl	8000ba0 <__aeabi_fsub>
 801932c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8019330:	ebab 0b03 	sub.w	fp, fp, r3
 8019334:	f1bb 0f19 	cmp.w	fp, #25
 8019338:	dc16      	bgt.n	8019368 <__ieee754_rem_pio2f+0x1b0>
 801933a:	6020      	str	r0, [r4, #0]
 801933c:	46b0      	mov	r8, r6
 801933e:	6826      	ldr	r6, [r4, #0]
 8019340:	4640      	mov	r0, r8
 8019342:	4631      	mov	r1, r6
 8019344:	f7e7 fc2c 	bl	8000ba0 <__aeabi_fsub>
 8019348:	4639      	mov	r1, r7
 801934a:	f7e7 fc29 	bl	8000ba0 <__aeabi_fsub>
 801934e:	f1ba 0f00 	cmp.w	sl, #0
 8019352:	6060      	str	r0, [r4, #4]
 8019354:	f6bf af5a 	bge.w	801920c <__ieee754_rem_pio2f+0x54>
 8019358:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 801935c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8019360:	6026      	str	r6, [r4, #0]
 8019362:	6060      	str	r0, [r4, #4]
 8019364:	426d      	negs	r5, r5
 8019366:	e751      	b.n	801920c <__ieee754_rem_pio2f+0x54>
 8019368:	493f      	ldr	r1, [pc, #252]	; (8019468 <__ieee754_rem_pio2f+0x2b0>)
 801936a:	4648      	mov	r0, r9
 801936c:	f7e7 fd22 	bl	8000db4 <__aeabi_fmul>
 8019370:	4607      	mov	r7, r0
 8019372:	4601      	mov	r1, r0
 8019374:	4630      	mov	r0, r6
 8019376:	f7e7 fc13 	bl	8000ba0 <__aeabi_fsub>
 801937a:	4601      	mov	r1, r0
 801937c:	4680      	mov	r8, r0
 801937e:	4630      	mov	r0, r6
 8019380:	f7e7 fc0e 	bl	8000ba0 <__aeabi_fsub>
 8019384:	4639      	mov	r1, r7
 8019386:	f7e7 fc0b 	bl	8000ba0 <__aeabi_fsub>
 801938a:	4938      	ldr	r1, [pc, #224]	; (801946c <__ieee754_rem_pio2f+0x2b4>)
 801938c:	4606      	mov	r6, r0
 801938e:	4648      	mov	r0, r9
 8019390:	f7e7 fd10 	bl	8000db4 <__aeabi_fmul>
 8019394:	4631      	mov	r1, r6
 8019396:	f7e7 fc03 	bl	8000ba0 <__aeabi_fsub>
 801939a:	4607      	mov	r7, r0
 801939c:	e795      	b.n	80192ca <__ieee754_rem_pio2f+0x112>
 801939e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80193a2:	db05      	blt.n	80193b0 <__ieee754_rem_pio2f+0x1f8>
 80193a4:	4601      	mov	r1, r0
 80193a6:	f7e7 fbfb 	bl	8000ba0 <__aeabi_fsub>
 80193aa:	6060      	str	r0, [r4, #4]
 80193ac:	6020      	str	r0, [r4, #0]
 80193ae:	e710      	b.n	80191d2 <__ieee754_rem_pio2f+0x1a>
 80193b0:	15f7      	asrs	r7, r6, #23
 80193b2:	3f86      	subs	r7, #134	; 0x86
 80193b4:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 80193b8:	4630      	mov	r0, r6
 80193ba:	f7e7 fed7 	bl	800116c <__aeabi_f2iz>
 80193be:	f7e7 fca5 	bl	8000d0c <__aeabi_i2f>
 80193c2:	4601      	mov	r1, r0
 80193c4:	9003      	str	r0, [sp, #12]
 80193c6:	4630      	mov	r0, r6
 80193c8:	f7e7 fbea 	bl	8000ba0 <__aeabi_fsub>
 80193cc:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80193d0:	f7e7 fcf0 	bl	8000db4 <__aeabi_fmul>
 80193d4:	4606      	mov	r6, r0
 80193d6:	f7e7 fec9 	bl	800116c <__aeabi_f2iz>
 80193da:	f7e7 fc97 	bl	8000d0c <__aeabi_i2f>
 80193de:	4601      	mov	r1, r0
 80193e0:	9004      	str	r0, [sp, #16]
 80193e2:	4605      	mov	r5, r0
 80193e4:	4630      	mov	r0, r6
 80193e6:	f7e7 fbdb 	bl	8000ba0 <__aeabi_fsub>
 80193ea:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80193ee:	f7e7 fce1 	bl	8000db4 <__aeabi_fmul>
 80193f2:	2100      	movs	r1, #0
 80193f4:	9005      	str	r0, [sp, #20]
 80193f6:	f7e7 fe71 	bl	80010dc <__aeabi_fcmpeq>
 80193fa:	b1f0      	cbz	r0, 801943a <__ieee754_rem_pio2f+0x282>
 80193fc:	2100      	movs	r1, #0
 80193fe:	4628      	mov	r0, r5
 8019400:	f7e7 fe6c 	bl	80010dc <__aeabi_fcmpeq>
 8019404:	2800      	cmp	r0, #0
 8019406:	bf14      	ite	ne
 8019408:	2301      	movne	r3, #1
 801940a:	2302      	moveq	r3, #2
 801940c:	4a18      	ldr	r2, [pc, #96]	; (8019470 <__ieee754_rem_pio2f+0x2b8>)
 801940e:	9201      	str	r2, [sp, #4]
 8019410:	2202      	movs	r2, #2
 8019412:	9200      	str	r2, [sp, #0]
 8019414:	4621      	mov	r1, r4
 8019416:	463a      	mov	r2, r7
 8019418:	a803      	add	r0, sp, #12
 801941a:	f000 f8fb 	bl	8019614 <__kernel_rem_pio2f>
 801941e:	f1ba 0f00 	cmp.w	sl, #0
 8019422:	4605      	mov	r5, r0
 8019424:	f6bf aef2 	bge.w	801920c <__ieee754_rem_pio2f+0x54>
 8019428:	6823      	ldr	r3, [r4, #0]
 801942a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801942e:	6023      	str	r3, [r4, #0]
 8019430:	6863      	ldr	r3, [r4, #4]
 8019432:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8019436:	6063      	str	r3, [r4, #4]
 8019438:	e794      	b.n	8019364 <__ieee754_rem_pio2f+0x1ac>
 801943a:	2303      	movs	r3, #3
 801943c:	e7e6      	b.n	801940c <__ieee754_rem_pio2f+0x254>
 801943e:	bf00      	nop
 8019440:	3f490fd8 	.word	0x3f490fd8
 8019444:	4016cbe3 	.word	0x4016cbe3
 8019448:	3fc90f80 	.word	0x3fc90f80
 801944c:	3fc90fd0 	.word	0x3fc90fd0
 8019450:	37354443 	.word	0x37354443
 8019454:	37354400 	.word	0x37354400
 8019458:	2e85a308 	.word	0x2e85a308
 801945c:	43490f80 	.word	0x43490f80
 8019460:	3f22f984 	.word	0x3f22f984
 8019464:	0801a720 	.word	0x0801a720
 8019468:	2e85a300 	.word	0x2e85a300
 801946c:	248d3132 	.word	0x248d3132
 8019470:	0801a7a0 	.word	0x0801a7a0

08019474 <__ieee754_sqrtf>:
 8019474:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8019478:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801947c:	b570      	push	{r4, r5, r6, lr}
 801947e:	4603      	mov	r3, r0
 8019480:	4604      	mov	r4, r0
 8019482:	d309      	bcc.n	8019498 <__ieee754_sqrtf+0x24>
 8019484:	4601      	mov	r1, r0
 8019486:	f7e7 fc95 	bl	8000db4 <__aeabi_fmul>
 801948a:	4601      	mov	r1, r0
 801948c:	4620      	mov	r0, r4
 801948e:	f7e7 fb89 	bl	8000ba4 <__addsf3>
 8019492:	4604      	mov	r4, r0
 8019494:	4620      	mov	r0, r4
 8019496:	bd70      	pop	{r4, r5, r6, pc}
 8019498:	2a00      	cmp	r2, #0
 801949a:	d0fb      	beq.n	8019494 <__ieee754_sqrtf+0x20>
 801949c:	2800      	cmp	r0, #0
 801949e:	da06      	bge.n	80194ae <__ieee754_sqrtf+0x3a>
 80194a0:	4601      	mov	r1, r0
 80194a2:	f7e7 fb7d 	bl	8000ba0 <__aeabi_fsub>
 80194a6:	4601      	mov	r1, r0
 80194a8:	f7e7 fd38 	bl	8000f1c <__aeabi_fdiv>
 80194ac:	e7f1      	b.n	8019492 <__ieee754_sqrtf+0x1e>
 80194ae:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 80194b2:	ea4f 51e0 	mov.w	r1, r0, asr #23
 80194b6:	d027      	beq.n	8019508 <__ieee754_sqrtf+0x94>
 80194b8:	f3c3 0216 	ubfx	r2, r3, #0, #23
 80194bc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80194c0:	07cb      	lsls	r3, r1, #31
 80194c2:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 80194c6:	bf58      	it	pl
 80194c8:	0052      	lslpl	r2, r2, #1
 80194ca:	2300      	movs	r3, #0
 80194cc:	1040      	asrs	r0, r0, #1
 80194ce:	0052      	lsls	r2, r2, #1
 80194d0:	2419      	movs	r4, #25
 80194d2:	461e      	mov	r6, r3
 80194d4:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80194d8:	1875      	adds	r5, r6, r1
 80194da:	4295      	cmp	r5, r2
 80194dc:	bfde      	ittt	le
 80194de:	186e      	addle	r6, r5, r1
 80194e0:	1b52      	suble	r2, r2, r5
 80194e2:	185b      	addle	r3, r3, r1
 80194e4:	3c01      	subs	r4, #1
 80194e6:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80194ea:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80194ee:	d1f3      	bne.n	80194d8 <__ieee754_sqrtf+0x64>
 80194f0:	b112      	cbz	r2, 80194f8 <__ieee754_sqrtf+0x84>
 80194f2:	3301      	adds	r3, #1
 80194f4:	f023 0301 	bic.w	r3, r3, #1
 80194f8:	105c      	asrs	r4, r3, #1
 80194fa:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 80194fe:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 8019502:	e7c7      	b.n	8019494 <__ieee754_sqrtf+0x20>
 8019504:	005b      	lsls	r3, r3, #1
 8019506:	3201      	adds	r2, #1
 8019508:	0218      	lsls	r0, r3, #8
 801950a:	d5fb      	bpl.n	8019504 <__ieee754_sqrtf+0x90>
 801950c:	3a01      	subs	r2, #1
 801950e:	1a89      	subs	r1, r1, r2
 8019510:	e7d2      	b.n	80194b8 <__ieee754_sqrtf+0x44>
	...

08019514 <__kernel_cosf>:
 8019514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019518:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 801951c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8019520:	4606      	mov	r6, r0
 8019522:	4688      	mov	r8, r1
 8019524:	da03      	bge.n	801952e <__kernel_cosf+0x1a>
 8019526:	f7e7 fe21 	bl	800116c <__aeabi_f2iz>
 801952a:	2800      	cmp	r0, #0
 801952c:	d05c      	beq.n	80195e8 <__kernel_cosf+0xd4>
 801952e:	4631      	mov	r1, r6
 8019530:	4630      	mov	r0, r6
 8019532:	f7e7 fc3f 	bl	8000db4 <__aeabi_fmul>
 8019536:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 801953a:	4605      	mov	r5, r0
 801953c:	f7e7 fc3a 	bl	8000db4 <__aeabi_fmul>
 8019540:	492b      	ldr	r1, [pc, #172]	; (80195f0 <__kernel_cosf+0xdc>)
 8019542:	4607      	mov	r7, r0
 8019544:	4628      	mov	r0, r5
 8019546:	f7e7 fc35 	bl	8000db4 <__aeabi_fmul>
 801954a:	492a      	ldr	r1, [pc, #168]	; (80195f4 <__kernel_cosf+0xe0>)
 801954c:	f7e7 fb2a 	bl	8000ba4 <__addsf3>
 8019550:	4629      	mov	r1, r5
 8019552:	f7e7 fc2f 	bl	8000db4 <__aeabi_fmul>
 8019556:	4928      	ldr	r1, [pc, #160]	; (80195f8 <__kernel_cosf+0xe4>)
 8019558:	f7e7 fb22 	bl	8000ba0 <__aeabi_fsub>
 801955c:	4629      	mov	r1, r5
 801955e:	f7e7 fc29 	bl	8000db4 <__aeabi_fmul>
 8019562:	4926      	ldr	r1, [pc, #152]	; (80195fc <__kernel_cosf+0xe8>)
 8019564:	f7e7 fb1e 	bl	8000ba4 <__addsf3>
 8019568:	4629      	mov	r1, r5
 801956a:	f7e7 fc23 	bl	8000db4 <__aeabi_fmul>
 801956e:	4924      	ldr	r1, [pc, #144]	; (8019600 <__kernel_cosf+0xec>)
 8019570:	f7e7 fb16 	bl	8000ba0 <__aeabi_fsub>
 8019574:	4629      	mov	r1, r5
 8019576:	f7e7 fc1d 	bl	8000db4 <__aeabi_fmul>
 801957a:	4922      	ldr	r1, [pc, #136]	; (8019604 <__kernel_cosf+0xf0>)
 801957c:	f7e7 fb12 	bl	8000ba4 <__addsf3>
 8019580:	4629      	mov	r1, r5
 8019582:	f7e7 fc17 	bl	8000db4 <__aeabi_fmul>
 8019586:	4629      	mov	r1, r5
 8019588:	f7e7 fc14 	bl	8000db4 <__aeabi_fmul>
 801958c:	4641      	mov	r1, r8
 801958e:	4605      	mov	r5, r0
 8019590:	4630      	mov	r0, r6
 8019592:	f7e7 fc0f 	bl	8000db4 <__aeabi_fmul>
 8019596:	4601      	mov	r1, r0
 8019598:	4628      	mov	r0, r5
 801959a:	f7e7 fb01 	bl	8000ba0 <__aeabi_fsub>
 801959e:	4b1a      	ldr	r3, [pc, #104]	; (8019608 <__kernel_cosf+0xf4>)
 80195a0:	429c      	cmp	r4, r3
 80195a2:	4605      	mov	r5, r0
 80195a4:	dc0a      	bgt.n	80195bc <__kernel_cosf+0xa8>
 80195a6:	4601      	mov	r1, r0
 80195a8:	4638      	mov	r0, r7
 80195aa:	f7e7 faf9 	bl	8000ba0 <__aeabi_fsub>
 80195ae:	4601      	mov	r1, r0
 80195b0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80195b4:	f7e7 faf4 	bl	8000ba0 <__aeabi_fsub>
 80195b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80195bc:	4b13      	ldr	r3, [pc, #76]	; (801960c <__kernel_cosf+0xf8>)
 80195be:	429c      	cmp	r4, r3
 80195c0:	bfcc      	ite	gt
 80195c2:	4c13      	ldrgt	r4, [pc, #76]	; (8019610 <__kernel_cosf+0xfc>)
 80195c4:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 80195c8:	4621      	mov	r1, r4
 80195ca:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80195ce:	f7e7 fae7 	bl	8000ba0 <__aeabi_fsub>
 80195d2:	4621      	mov	r1, r4
 80195d4:	4606      	mov	r6, r0
 80195d6:	4638      	mov	r0, r7
 80195d8:	f7e7 fae2 	bl	8000ba0 <__aeabi_fsub>
 80195dc:	4629      	mov	r1, r5
 80195de:	f7e7 fadf 	bl	8000ba0 <__aeabi_fsub>
 80195e2:	4601      	mov	r1, r0
 80195e4:	4630      	mov	r0, r6
 80195e6:	e7e5      	b.n	80195b4 <__kernel_cosf+0xa0>
 80195e8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80195ec:	e7e4      	b.n	80195b8 <__kernel_cosf+0xa4>
 80195ee:	bf00      	nop
 80195f0:	ad47d74e 	.word	0xad47d74e
 80195f4:	310f74f6 	.word	0x310f74f6
 80195f8:	3493f27c 	.word	0x3493f27c
 80195fc:	37d00d01 	.word	0x37d00d01
 8019600:	3ab60b61 	.word	0x3ab60b61
 8019604:	3d2aaaab 	.word	0x3d2aaaab
 8019608:	3e999999 	.word	0x3e999999
 801960c:	3f480000 	.word	0x3f480000
 8019610:	3e900000 	.word	0x3e900000

08019614 <__kernel_rem_pio2f>:
 8019614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019618:	b0db      	sub	sp, #364	; 0x16c
 801961a:	9202      	str	r2, [sp, #8]
 801961c:	9304      	str	r3, [sp, #16]
 801961e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8019620:	4bb2      	ldr	r3, [pc, #712]	; (80198ec <__kernel_rem_pio2f+0x2d8>)
 8019622:	9005      	str	r0, [sp, #20]
 8019624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019628:	9301      	str	r3, [sp, #4]
 801962a:	9b04      	ldr	r3, [sp, #16]
 801962c:	9100      	str	r1, [sp, #0]
 801962e:	3b01      	subs	r3, #1
 8019630:	9303      	str	r3, [sp, #12]
 8019632:	9b02      	ldr	r3, [sp, #8]
 8019634:	1d1a      	adds	r2, r3, #4
 8019636:	f2c0 809b 	blt.w	8019770 <__kernel_rem_pio2f+0x15c>
 801963a:	1edc      	subs	r4, r3, #3
 801963c:	bf48      	it	mi
 801963e:	1d1c      	addmi	r4, r3, #4
 8019640:	10e4      	asrs	r4, r4, #3
 8019642:	1c67      	adds	r7, r4, #1
 8019644:	00fb      	lsls	r3, r7, #3
 8019646:	9306      	str	r3, [sp, #24]
 8019648:	9b02      	ldr	r3, [sp, #8]
 801964a:	9a03      	ldr	r2, [sp, #12]
 801964c:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 8019650:	9b01      	ldr	r3, [sp, #4]
 8019652:	eb03 0902 	add.w	r9, r3, r2
 8019656:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8019658:	eba4 0802 	sub.w	r8, r4, r2
 801965c:	ae1e      	add	r6, sp, #120	; 0x78
 801965e:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8019662:	2500      	movs	r5, #0
 8019664:	f04f 0b00 	mov.w	fp, #0
 8019668:	454d      	cmp	r5, r9
 801966a:	f340 8083 	ble.w	8019774 <__kernel_rem_pio2f+0x160>
 801966e:	9a04      	ldr	r2, [sp, #16]
 8019670:	ab1e      	add	r3, sp, #120	; 0x78
 8019672:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8019676:	f50d 7b8c 	add.w	fp, sp, #280	; 0x118
 801967a:	f04f 0900 	mov.w	r9, #0
 801967e:	2300      	movs	r3, #0
 8019680:	9a01      	ldr	r2, [sp, #4]
 8019682:	4591      	cmp	r9, r2
 8019684:	f340 809e 	ble.w	80197c4 <__kernel_rem_pio2f+0x1b0>
 8019688:	4613      	mov	r3, r2
 801968a:	aa0a      	add	r2, sp, #40	; 0x28
 801968c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019690:	9308      	str	r3, [sp, #32]
 8019692:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8019694:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8019698:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801969c:	9307      	str	r3, [sp, #28]
 801969e:	ab5a      	add	r3, sp, #360	; 0x168
 80196a0:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 80196a4:	ac0a      	add	r4, sp, #40	; 0x28
 80196a6:	f853 5c50 	ldr.w	r5, [r3, #-80]
 80196aa:	4626      	mov	r6, r4
 80196ac:	46c3      	mov	fp, r8
 80196ae:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 80196b2:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 80196b6:	f1bb 0f00 	cmp.w	fp, #0
 80196ba:	f300 8088 	bgt.w	80197ce <__kernel_rem_pio2f+0x1ba>
 80196be:	4639      	mov	r1, r7
 80196c0:	4628      	mov	r0, r5
 80196c2:	f000 fee1 	bl	801a488 <scalbnf>
 80196c6:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 80196ca:	4605      	mov	r5, r0
 80196cc:	f7e7 fb72 	bl	8000db4 <__aeabi_fmul>
 80196d0:	f000 fe94 	bl	801a3fc <floorf>
 80196d4:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80196d8:	f7e7 fb6c 	bl	8000db4 <__aeabi_fmul>
 80196dc:	4601      	mov	r1, r0
 80196de:	4628      	mov	r0, r5
 80196e0:	f7e7 fa5e 	bl	8000ba0 <__aeabi_fsub>
 80196e4:	4605      	mov	r5, r0
 80196e6:	f7e7 fd41 	bl	800116c <__aeabi_f2iz>
 80196ea:	4606      	mov	r6, r0
 80196ec:	f7e7 fb0e 	bl	8000d0c <__aeabi_i2f>
 80196f0:	4601      	mov	r1, r0
 80196f2:	4628      	mov	r0, r5
 80196f4:	f7e7 fa54 	bl	8000ba0 <__aeabi_fsub>
 80196f8:	2f00      	cmp	r7, #0
 80196fa:	4681      	mov	r9, r0
 80196fc:	f340 8086 	ble.w	801980c <__kernel_rem_pio2f+0x1f8>
 8019700:	f108 32ff 	add.w	r2, r8, #4294967295
 8019704:	ab0a      	add	r3, sp, #40	; 0x28
 8019706:	f1c7 0108 	rsb	r1, r7, #8
 801970a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801970e:	fa45 f301 	asr.w	r3, r5, r1
 8019712:	441e      	add	r6, r3
 8019714:	408b      	lsls	r3, r1
 8019716:	1aed      	subs	r5, r5, r3
 8019718:	ab0a      	add	r3, sp, #40	; 0x28
 801971a:	f1c7 0007 	rsb	r0, r7, #7
 801971e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8019722:	4105      	asrs	r5, r0
 8019724:	2d00      	cmp	r5, #0
 8019726:	dd7f      	ble.n	8019828 <__kernel_rem_pio2f+0x214>
 8019728:	2200      	movs	r2, #0
 801972a:	3601      	adds	r6, #1
 801972c:	4692      	mov	sl, r2
 801972e:	4590      	cmp	r8, r2
 8019730:	f300 80b0 	bgt.w	8019894 <__kernel_rem_pio2f+0x280>
 8019734:	2f00      	cmp	r7, #0
 8019736:	dd05      	ble.n	8019744 <__kernel_rem_pio2f+0x130>
 8019738:	2f01      	cmp	r7, #1
 801973a:	f000 80bd 	beq.w	80198b8 <__kernel_rem_pio2f+0x2a4>
 801973e:	2f02      	cmp	r7, #2
 8019740:	f000 80c5 	beq.w	80198ce <__kernel_rem_pio2f+0x2ba>
 8019744:	2d02      	cmp	r5, #2
 8019746:	d16f      	bne.n	8019828 <__kernel_rem_pio2f+0x214>
 8019748:	4649      	mov	r1, r9
 801974a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 801974e:	f7e7 fa27 	bl	8000ba0 <__aeabi_fsub>
 8019752:	4681      	mov	r9, r0
 8019754:	f1ba 0f00 	cmp.w	sl, #0
 8019758:	d066      	beq.n	8019828 <__kernel_rem_pio2f+0x214>
 801975a:	4639      	mov	r1, r7
 801975c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8019760:	f000 fe92 	bl	801a488 <scalbnf>
 8019764:	4601      	mov	r1, r0
 8019766:	4648      	mov	r0, r9
 8019768:	f7e7 fa1a 	bl	8000ba0 <__aeabi_fsub>
 801976c:	4681      	mov	r9, r0
 801976e:	e05b      	b.n	8019828 <__kernel_rem_pio2f+0x214>
 8019770:	2400      	movs	r4, #0
 8019772:	e766      	b.n	8019642 <__kernel_rem_pio2f+0x2e>
 8019774:	eb18 0f05 	cmn.w	r8, r5
 8019778:	d407      	bmi.n	801978a <__kernel_rem_pio2f+0x176>
 801977a:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 801977e:	f7e7 fac5 	bl	8000d0c <__aeabi_i2f>
 8019782:	f846 0b04 	str.w	r0, [r6], #4
 8019786:	3501      	adds	r5, #1
 8019788:	e76e      	b.n	8019668 <__kernel_rem_pio2f+0x54>
 801978a:	4658      	mov	r0, fp
 801978c:	e7f9      	b.n	8019782 <__kernel_rem_pio2f+0x16e>
 801978e:	9307      	str	r3, [sp, #28]
 8019790:	9b05      	ldr	r3, [sp, #20]
 8019792:	f8da 1000 	ldr.w	r1, [sl]
 8019796:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801979a:	f7e7 fb0b 	bl	8000db4 <__aeabi_fmul>
 801979e:	4601      	mov	r1, r0
 80197a0:	4630      	mov	r0, r6
 80197a2:	f7e7 f9ff 	bl	8000ba4 <__addsf3>
 80197a6:	9b07      	ldr	r3, [sp, #28]
 80197a8:	4606      	mov	r6, r0
 80197aa:	f108 0801 	add.w	r8, r8, #1
 80197ae:	9a03      	ldr	r2, [sp, #12]
 80197b0:	4590      	cmp	r8, r2
 80197b2:	f1aa 0a04 	sub.w	sl, sl, #4
 80197b6:	ddea      	ble.n	801978e <__kernel_rem_pio2f+0x17a>
 80197b8:	f84b 6b04 	str.w	r6, [fp], #4
 80197bc:	f109 0901 	add.w	r9, r9, #1
 80197c0:	3504      	adds	r5, #4
 80197c2:	e75d      	b.n	8019680 <__kernel_rem_pio2f+0x6c>
 80197c4:	46aa      	mov	sl, r5
 80197c6:	461e      	mov	r6, r3
 80197c8:	f04f 0800 	mov.w	r8, #0
 80197cc:	e7ef      	b.n	80197ae <__kernel_rem_pio2f+0x19a>
 80197ce:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80197d2:	4628      	mov	r0, r5
 80197d4:	f7e7 faee 	bl	8000db4 <__aeabi_fmul>
 80197d8:	f7e7 fcc8 	bl	800116c <__aeabi_f2iz>
 80197dc:	f7e7 fa96 	bl	8000d0c <__aeabi_i2f>
 80197e0:	4649      	mov	r1, r9
 80197e2:	9009      	str	r0, [sp, #36]	; 0x24
 80197e4:	f7e7 fae6 	bl	8000db4 <__aeabi_fmul>
 80197e8:	4601      	mov	r1, r0
 80197ea:	4628      	mov	r0, r5
 80197ec:	f7e7 f9d8 	bl	8000ba0 <__aeabi_fsub>
 80197f0:	f7e7 fcbc 	bl	800116c <__aeabi_f2iz>
 80197f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80197f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80197fa:	f846 0b04 	str.w	r0, [r6], #4
 80197fe:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 8019802:	4618      	mov	r0, r3
 8019804:	f7e7 f9ce 	bl	8000ba4 <__addsf3>
 8019808:	4605      	mov	r5, r0
 801980a:	e754      	b.n	80196b6 <__kernel_rem_pio2f+0xa2>
 801980c:	d106      	bne.n	801981c <__kernel_rem_pio2f+0x208>
 801980e:	f108 33ff 	add.w	r3, r8, #4294967295
 8019812:	aa0a      	add	r2, sp, #40	; 0x28
 8019814:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8019818:	11ed      	asrs	r5, r5, #7
 801981a:	e783      	b.n	8019724 <__kernel_rem_pio2f+0x110>
 801981c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8019820:	f7e7 fc7a 	bl	8001118 <__aeabi_fcmpge>
 8019824:	4605      	mov	r5, r0
 8019826:	bb98      	cbnz	r0, 8019890 <__kernel_rem_pio2f+0x27c>
 8019828:	2100      	movs	r1, #0
 801982a:	4648      	mov	r0, r9
 801982c:	f7e7 fc56 	bl	80010dc <__aeabi_fcmpeq>
 8019830:	2800      	cmp	r0, #0
 8019832:	f000 8098 	beq.w	8019966 <__kernel_rem_pio2f+0x352>
 8019836:	f108 34ff 	add.w	r4, r8, #4294967295
 801983a:	4623      	mov	r3, r4
 801983c:	2200      	movs	r2, #0
 801983e:	9901      	ldr	r1, [sp, #4]
 8019840:	428b      	cmp	r3, r1
 8019842:	da4c      	bge.n	80198de <__kernel_rem_pio2f+0x2ca>
 8019844:	2a00      	cmp	r2, #0
 8019846:	d07a      	beq.n	801993e <__kernel_rem_pio2f+0x32a>
 8019848:	ab0a      	add	r3, sp, #40	; 0x28
 801984a:	3f08      	subs	r7, #8
 801984c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8019850:	2b00      	cmp	r3, #0
 8019852:	f000 8086 	beq.w	8019962 <__kernel_rem_pio2f+0x34e>
 8019856:	4639      	mov	r1, r7
 8019858:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 801985c:	f000 fe14 	bl	801a488 <scalbnf>
 8019860:	46a2      	mov	sl, r4
 8019862:	4681      	mov	r9, r0
 8019864:	af46      	add	r7, sp, #280	; 0x118
 8019866:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 801986a:	f1ba 0f00 	cmp.w	sl, #0
 801986e:	f280 80af 	bge.w	80199d0 <__kernel_rem_pio2f+0x3bc>
 8019872:	4627      	mov	r7, r4
 8019874:	2200      	movs	r2, #0
 8019876:	2f00      	cmp	r7, #0
 8019878:	f2c0 80d9 	blt.w	8019a2e <__kernel_rem_pio2f+0x41a>
 801987c:	a946      	add	r1, sp, #280	; 0x118
 801987e:	4b1c      	ldr	r3, [pc, #112]	; (80198f0 <__kernel_rem_pio2f+0x2dc>)
 8019880:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 8019884:	4690      	mov	r8, r2
 8019886:	f04f 0a00 	mov.w	sl, #0
 801988a:	eba4 0907 	sub.w	r9, r4, r7
 801988e:	e0c2      	b.n	8019a16 <__kernel_rem_pio2f+0x402>
 8019890:	2502      	movs	r5, #2
 8019892:	e749      	b.n	8019728 <__kernel_rem_pio2f+0x114>
 8019894:	6823      	ldr	r3, [r4, #0]
 8019896:	f1ba 0f00 	cmp.w	sl, #0
 801989a:	d108      	bne.n	80198ae <__kernel_rem_pio2f+0x29a>
 801989c:	b11b      	cbz	r3, 80198a6 <__kernel_rem_pio2f+0x292>
 801989e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80198a2:	6023      	str	r3, [r4, #0]
 80198a4:	2301      	movs	r3, #1
 80198a6:	3201      	adds	r2, #1
 80198a8:	3404      	adds	r4, #4
 80198aa:	469a      	mov	sl, r3
 80198ac:	e73f      	b.n	801972e <__kernel_rem_pio2f+0x11a>
 80198ae:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80198b2:	6023      	str	r3, [r4, #0]
 80198b4:	4653      	mov	r3, sl
 80198b6:	e7f6      	b.n	80198a6 <__kernel_rem_pio2f+0x292>
 80198b8:	f108 32ff 	add.w	r2, r8, #4294967295
 80198bc:	ab0a      	add	r3, sp, #40	; 0x28
 80198be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80198c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80198c6:	a90a      	add	r1, sp, #40	; 0x28
 80198c8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80198cc:	e73a      	b.n	8019744 <__kernel_rem_pio2f+0x130>
 80198ce:	f108 32ff 	add.w	r2, r8, #4294967295
 80198d2:	ab0a      	add	r3, sp, #40	; 0x28
 80198d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80198d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80198dc:	e7f3      	b.n	80198c6 <__kernel_rem_pio2f+0x2b2>
 80198de:	a90a      	add	r1, sp, #40	; 0x28
 80198e0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80198e4:	3b01      	subs	r3, #1
 80198e6:	430a      	orrs	r2, r1
 80198e8:	e7a9      	b.n	801983e <__kernel_rem_pio2f+0x22a>
 80198ea:	bf00      	nop
 80198ec:	0801aae4 	.word	0x0801aae4
 80198f0:	0801aab8 	.word	0x0801aab8
 80198f4:	3301      	adds	r3, #1
 80198f6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80198fa:	2900      	cmp	r1, #0
 80198fc:	d0fa      	beq.n	80198f4 <__kernel_rem_pio2f+0x2e0>
 80198fe:	9a04      	ldr	r2, [sp, #16]
 8019900:	eb08 0402 	add.w	r4, r8, r2
 8019904:	aa1e      	add	r2, sp, #120	; 0x78
 8019906:	f108 0501 	add.w	r5, r8, #1
 801990a:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 801990e:	4498      	add	r8, r3
 8019910:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 8019914:	45a8      	cmp	r8, r5
 8019916:	f6ff aec2 	blt.w	801969e <__kernel_rem_pio2f+0x8a>
 801991a:	9b07      	ldr	r3, [sp, #28]
 801991c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8019920:	f7e7 f9f4 	bl	8000d0c <__aeabi_i2f>
 8019924:	46a3      	mov	fp, r4
 8019926:	6020      	str	r0, [r4, #0]
 8019928:	f04f 0a00 	mov.w	sl, #0
 801992c:	2600      	movs	r6, #0
 801992e:	9b03      	ldr	r3, [sp, #12]
 8019930:	459a      	cmp	sl, r3
 8019932:	dd07      	ble.n	8019944 <__kernel_rem_pio2f+0x330>
 8019934:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 8019938:	3404      	adds	r4, #4
 801993a:	3501      	adds	r5, #1
 801993c:	e7ea      	b.n	8019914 <__kernel_rem_pio2f+0x300>
 801993e:	9a08      	ldr	r2, [sp, #32]
 8019940:	2301      	movs	r3, #1
 8019942:	e7d8      	b.n	80198f6 <__kernel_rem_pio2f+0x2e2>
 8019944:	9b05      	ldr	r3, [sp, #20]
 8019946:	f85b 0904 	ldr.w	r0, [fp], #-4
 801994a:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 801994e:	f7e7 fa31 	bl	8000db4 <__aeabi_fmul>
 8019952:	4601      	mov	r1, r0
 8019954:	4630      	mov	r0, r6
 8019956:	f7e7 f925 	bl	8000ba4 <__addsf3>
 801995a:	f10a 0a01 	add.w	sl, sl, #1
 801995e:	4606      	mov	r6, r0
 8019960:	e7e5      	b.n	801992e <__kernel_rem_pio2f+0x31a>
 8019962:	3c01      	subs	r4, #1
 8019964:	e770      	b.n	8019848 <__kernel_rem_pio2f+0x234>
 8019966:	9b06      	ldr	r3, [sp, #24]
 8019968:	9a02      	ldr	r2, [sp, #8]
 801996a:	4648      	mov	r0, r9
 801996c:	1a99      	subs	r1, r3, r2
 801996e:	f000 fd8b 	bl	801a488 <scalbnf>
 8019972:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8019976:	4604      	mov	r4, r0
 8019978:	f7e7 fbce 	bl	8001118 <__aeabi_fcmpge>
 801997c:	b300      	cbz	r0, 80199c0 <__kernel_rem_pio2f+0x3ac>
 801997e:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8019982:	4620      	mov	r0, r4
 8019984:	f7e7 fa16 	bl	8000db4 <__aeabi_fmul>
 8019988:	f7e7 fbf0 	bl	800116c <__aeabi_f2iz>
 801998c:	f7e7 f9be 	bl	8000d0c <__aeabi_i2f>
 8019990:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8019994:	4681      	mov	r9, r0
 8019996:	f7e7 fa0d 	bl	8000db4 <__aeabi_fmul>
 801999a:	4601      	mov	r1, r0
 801999c:	4620      	mov	r0, r4
 801999e:	f7e7 f8ff 	bl	8000ba0 <__aeabi_fsub>
 80199a2:	f7e7 fbe3 	bl	800116c <__aeabi_f2iz>
 80199a6:	ab0a      	add	r3, sp, #40	; 0x28
 80199a8:	f108 0401 	add.w	r4, r8, #1
 80199ac:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80199b0:	4648      	mov	r0, r9
 80199b2:	f7e7 fbdb 	bl	800116c <__aeabi_f2iz>
 80199b6:	ab0a      	add	r3, sp, #40	; 0x28
 80199b8:	3708      	adds	r7, #8
 80199ba:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80199be:	e74a      	b.n	8019856 <__kernel_rem_pio2f+0x242>
 80199c0:	4620      	mov	r0, r4
 80199c2:	f7e7 fbd3 	bl	800116c <__aeabi_f2iz>
 80199c6:	ab0a      	add	r3, sp, #40	; 0x28
 80199c8:	4644      	mov	r4, r8
 80199ca:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80199ce:	e742      	b.n	8019856 <__kernel_rem_pio2f+0x242>
 80199d0:	ab0a      	add	r3, sp, #40	; 0x28
 80199d2:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80199d6:	f7e7 f999 	bl	8000d0c <__aeabi_i2f>
 80199da:	4649      	mov	r1, r9
 80199dc:	f7e7 f9ea 	bl	8000db4 <__aeabi_fmul>
 80199e0:	4641      	mov	r1, r8
 80199e2:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 80199e6:	4648      	mov	r0, r9
 80199e8:	f7e7 f9e4 	bl	8000db4 <__aeabi_fmul>
 80199ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 80199f0:	4681      	mov	r9, r0
 80199f2:	e73a      	b.n	801986a <__kernel_rem_pio2f+0x256>
 80199f4:	f853 0b04 	ldr.w	r0, [r3], #4
 80199f8:	f85b 1b04 	ldr.w	r1, [fp], #4
 80199fc:	9203      	str	r2, [sp, #12]
 80199fe:	9302      	str	r3, [sp, #8]
 8019a00:	f7e7 f9d8 	bl	8000db4 <__aeabi_fmul>
 8019a04:	4601      	mov	r1, r0
 8019a06:	4640      	mov	r0, r8
 8019a08:	f7e7 f8cc 	bl	8000ba4 <__addsf3>
 8019a0c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8019a10:	4680      	mov	r8, r0
 8019a12:	f10a 0a01 	add.w	sl, sl, #1
 8019a16:	9901      	ldr	r1, [sp, #4]
 8019a18:	458a      	cmp	sl, r1
 8019a1a:	dc01      	bgt.n	8019a20 <__kernel_rem_pio2f+0x40c>
 8019a1c:	45ca      	cmp	sl, r9
 8019a1e:	dde9      	ble.n	80199f4 <__kernel_rem_pio2f+0x3e0>
 8019a20:	ab5a      	add	r3, sp, #360	; 0x168
 8019a22:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 8019a26:	3f01      	subs	r7, #1
 8019a28:	f849 8ca0 	str.w	r8, [r9, #-160]
 8019a2c:	e723      	b.n	8019876 <__kernel_rem_pio2f+0x262>
 8019a2e:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8019a30:	2b02      	cmp	r3, #2
 8019a32:	dc07      	bgt.n	8019a44 <__kernel_rem_pio2f+0x430>
 8019a34:	2b00      	cmp	r3, #0
 8019a36:	dc4d      	bgt.n	8019ad4 <__kernel_rem_pio2f+0x4c0>
 8019a38:	d02e      	beq.n	8019a98 <__kernel_rem_pio2f+0x484>
 8019a3a:	f006 0007 	and.w	r0, r6, #7
 8019a3e:	b05b      	add	sp, #364	; 0x16c
 8019a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a44:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8019a46:	2b03      	cmp	r3, #3
 8019a48:	d1f7      	bne.n	8019a3a <__kernel_rem_pio2f+0x426>
 8019a4a:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 8019a4e:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 8019a52:	46b8      	mov	r8, r7
 8019a54:	46a2      	mov	sl, r4
 8019a56:	f1ba 0f00 	cmp.w	sl, #0
 8019a5a:	dc48      	bgt.n	8019aee <__kernel_rem_pio2f+0x4da>
 8019a5c:	46a1      	mov	r9, r4
 8019a5e:	f1b9 0f01 	cmp.w	r9, #1
 8019a62:	dc5f      	bgt.n	8019b24 <__kernel_rem_pio2f+0x510>
 8019a64:	2000      	movs	r0, #0
 8019a66:	2c01      	cmp	r4, #1
 8019a68:	dc75      	bgt.n	8019b56 <__kernel_rem_pio2f+0x542>
 8019a6a:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8019a6c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8019a6e:	2d00      	cmp	r5, #0
 8019a70:	d177      	bne.n	8019b62 <__kernel_rem_pio2f+0x54e>
 8019a72:	9900      	ldr	r1, [sp, #0]
 8019a74:	600a      	str	r2, [r1, #0]
 8019a76:	604b      	str	r3, [r1, #4]
 8019a78:	460a      	mov	r2, r1
 8019a7a:	6090      	str	r0, [r2, #8]
 8019a7c:	e7dd      	b.n	8019a3a <__kernel_rem_pio2f+0x426>
 8019a7e:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8019a82:	f7e7 f88f 	bl	8000ba4 <__addsf3>
 8019a86:	3c01      	subs	r4, #1
 8019a88:	2c00      	cmp	r4, #0
 8019a8a:	daf8      	bge.n	8019a7e <__kernel_rem_pio2f+0x46a>
 8019a8c:	b10d      	cbz	r5, 8019a92 <__kernel_rem_pio2f+0x47e>
 8019a8e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8019a92:	9b00      	ldr	r3, [sp, #0]
 8019a94:	6018      	str	r0, [r3, #0]
 8019a96:	e7d0      	b.n	8019a3a <__kernel_rem_pio2f+0x426>
 8019a98:	2000      	movs	r0, #0
 8019a9a:	af32      	add	r7, sp, #200	; 0xc8
 8019a9c:	e7f4      	b.n	8019a88 <__kernel_rem_pio2f+0x474>
 8019a9e:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 8019aa2:	f7e7 f87f 	bl	8000ba4 <__addsf3>
 8019aa6:	3f01      	subs	r7, #1
 8019aa8:	2f00      	cmp	r7, #0
 8019aaa:	daf8      	bge.n	8019a9e <__kernel_rem_pio2f+0x48a>
 8019aac:	b1bd      	cbz	r5, 8019ade <__kernel_rem_pio2f+0x4ca>
 8019aae:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 8019ab2:	9a00      	ldr	r2, [sp, #0]
 8019ab4:	4601      	mov	r1, r0
 8019ab6:	6013      	str	r3, [r2, #0]
 8019ab8:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8019aba:	f7e7 f871 	bl	8000ba0 <__aeabi_fsub>
 8019abe:	2701      	movs	r7, #1
 8019ac0:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8019ac4:	42bc      	cmp	r4, r7
 8019ac6:	da0c      	bge.n	8019ae2 <__kernel_rem_pio2f+0x4ce>
 8019ac8:	b10d      	cbz	r5, 8019ace <__kernel_rem_pio2f+0x4ba>
 8019aca:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8019ace:	9b00      	ldr	r3, [sp, #0]
 8019ad0:	6058      	str	r0, [r3, #4]
 8019ad2:	e7b2      	b.n	8019a3a <__kernel_rem_pio2f+0x426>
 8019ad4:	4627      	mov	r7, r4
 8019ad6:	2000      	movs	r0, #0
 8019ad8:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8019adc:	e7e4      	b.n	8019aa8 <__kernel_rem_pio2f+0x494>
 8019ade:	4603      	mov	r3, r0
 8019ae0:	e7e7      	b.n	8019ab2 <__kernel_rem_pio2f+0x49e>
 8019ae2:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 8019ae6:	f7e7 f85d 	bl	8000ba4 <__addsf3>
 8019aea:	3701      	adds	r7, #1
 8019aec:	e7ea      	b.n	8019ac4 <__kernel_rem_pio2f+0x4b0>
 8019aee:	f8d8 3000 	ldr.w	r3, [r8]
 8019af2:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8019af6:	9302      	str	r3, [sp, #8]
 8019af8:	4619      	mov	r1, r3
 8019afa:	4610      	mov	r0, r2
 8019afc:	9201      	str	r2, [sp, #4]
 8019afe:	f7e7 f851 	bl	8000ba4 <__addsf3>
 8019b02:	9a01      	ldr	r2, [sp, #4]
 8019b04:	4601      	mov	r1, r0
 8019b06:	4681      	mov	r9, r0
 8019b08:	4610      	mov	r0, r2
 8019b0a:	f7e7 f849 	bl	8000ba0 <__aeabi_fsub>
 8019b0e:	9b02      	ldr	r3, [sp, #8]
 8019b10:	4619      	mov	r1, r3
 8019b12:	f7e7 f847 	bl	8000ba4 <__addsf3>
 8019b16:	f848 0904 	str.w	r0, [r8], #-4
 8019b1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019b1e:	f8c8 9000 	str.w	r9, [r8]
 8019b22:	e798      	b.n	8019a56 <__kernel_rem_pio2f+0x442>
 8019b24:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8019b28:	f8d7 a000 	ldr.w	sl, [r7]
 8019b2c:	9301      	str	r3, [sp, #4]
 8019b2e:	4651      	mov	r1, sl
 8019b30:	4618      	mov	r0, r3
 8019b32:	f7e7 f837 	bl	8000ba4 <__addsf3>
 8019b36:	9b01      	ldr	r3, [sp, #4]
 8019b38:	4601      	mov	r1, r0
 8019b3a:	4680      	mov	r8, r0
 8019b3c:	4618      	mov	r0, r3
 8019b3e:	f7e7 f82f 	bl	8000ba0 <__aeabi_fsub>
 8019b42:	4651      	mov	r1, sl
 8019b44:	f7e7 f82e 	bl	8000ba4 <__addsf3>
 8019b48:	f847 0904 	str.w	r0, [r7], #-4
 8019b4c:	f109 39ff 	add.w	r9, r9, #4294967295
 8019b50:	f8c7 8000 	str.w	r8, [r7]
 8019b54:	e783      	b.n	8019a5e <__kernel_rem_pio2f+0x44a>
 8019b56:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 8019b5a:	f7e7 f823 	bl	8000ba4 <__addsf3>
 8019b5e:	3c01      	subs	r4, #1
 8019b60:	e781      	b.n	8019a66 <__kernel_rem_pio2f+0x452>
 8019b62:	9900      	ldr	r1, [sp, #0]
 8019b64:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8019b68:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8019b6c:	600a      	str	r2, [r1, #0]
 8019b6e:	604b      	str	r3, [r1, #4]
 8019b70:	460a      	mov	r2, r1
 8019b72:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8019b76:	e780      	b.n	8019a7a <__kernel_rem_pio2f+0x466>

08019b78 <__kernel_sinf>:
 8019b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019b7c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8019b80:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8019b84:	4604      	mov	r4, r0
 8019b86:	460f      	mov	r7, r1
 8019b88:	4691      	mov	r9, r2
 8019b8a:	da03      	bge.n	8019b94 <__kernel_sinf+0x1c>
 8019b8c:	f7e7 faee 	bl	800116c <__aeabi_f2iz>
 8019b90:	2800      	cmp	r0, #0
 8019b92:	d035      	beq.n	8019c00 <__kernel_sinf+0x88>
 8019b94:	4621      	mov	r1, r4
 8019b96:	4620      	mov	r0, r4
 8019b98:	f7e7 f90c 	bl	8000db4 <__aeabi_fmul>
 8019b9c:	4605      	mov	r5, r0
 8019b9e:	4601      	mov	r1, r0
 8019ba0:	4620      	mov	r0, r4
 8019ba2:	f7e7 f907 	bl	8000db4 <__aeabi_fmul>
 8019ba6:	4929      	ldr	r1, [pc, #164]	; (8019c4c <__kernel_sinf+0xd4>)
 8019ba8:	4606      	mov	r6, r0
 8019baa:	4628      	mov	r0, r5
 8019bac:	f7e7 f902 	bl	8000db4 <__aeabi_fmul>
 8019bb0:	4927      	ldr	r1, [pc, #156]	; (8019c50 <__kernel_sinf+0xd8>)
 8019bb2:	f7e6 fff5 	bl	8000ba0 <__aeabi_fsub>
 8019bb6:	4629      	mov	r1, r5
 8019bb8:	f7e7 f8fc 	bl	8000db4 <__aeabi_fmul>
 8019bbc:	4925      	ldr	r1, [pc, #148]	; (8019c54 <__kernel_sinf+0xdc>)
 8019bbe:	f7e6 fff1 	bl	8000ba4 <__addsf3>
 8019bc2:	4629      	mov	r1, r5
 8019bc4:	f7e7 f8f6 	bl	8000db4 <__aeabi_fmul>
 8019bc8:	4923      	ldr	r1, [pc, #140]	; (8019c58 <__kernel_sinf+0xe0>)
 8019bca:	f7e6 ffe9 	bl	8000ba0 <__aeabi_fsub>
 8019bce:	4629      	mov	r1, r5
 8019bd0:	f7e7 f8f0 	bl	8000db4 <__aeabi_fmul>
 8019bd4:	4921      	ldr	r1, [pc, #132]	; (8019c5c <__kernel_sinf+0xe4>)
 8019bd6:	f7e6 ffe5 	bl	8000ba4 <__addsf3>
 8019bda:	4680      	mov	r8, r0
 8019bdc:	f1b9 0f00 	cmp.w	r9, #0
 8019be0:	d111      	bne.n	8019c06 <__kernel_sinf+0x8e>
 8019be2:	4601      	mov	r1, r0
 8019be4:	4628      	mov	r0, r5
 8019be6:	f7e7 f8e5 	bl	8000db4 <__aeabi_fmul>
 8019bea:	491d      	ldr	r1, [pc, #116]	; (8019c60 <__kernel_sinf+0xe8>)
 8019bec:	f7e6 ffd8 	bl	8000ba0 <__aeabi_fsub>
 8019bf0:	4631      	mov	r1, r6
 8019bf2:	f7e7 f8df 	bl	8000db4 <__aeabi_fmul>
 8019bf6:	4601      	mov	r1, r0
 8019bf8:	4620      	mov	r0, r4
 8019bfa:	f7e6 ffd3 	bl	8000ba4 <__addsf3>
 8019bfe:	4604      	mov	r4, r0
 8019c00:	4620      	mov	r0, r4
 8019c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019c06:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8019c0a:	4638      	mov	r0, r7
 8019c0c:	f7e7 f8d2 	bl	8000db4 <__aeabi_fmul>
 8019c10:	4641      	mov	r1, r8
 8019c12:	4681      	mov	r9, r0
 8019c14:	4630      	mov	r0, r6
 8019c16:	f7e7 f8cd 	bl	8000db4 <__aeabi_fmul>
 8019c1a:	4601      	mov	r1, r0
 8019c1c:	4648      	mov	r0, r9
 8019c1e:	f7e6 ffbf 	bl	8000ba0 <__aeabi_fsub>
 8019c22:	4629      	mov	r1, r5
 8019c24:	f7e7 f8c6 	bl	8000db4 <__aeabi_fmul>
 8019c28:	4639      	mov	r1, r7
 8019c2a:	f7e6 ffb9 	bl	8000ba0 <__aeabi_fsub>
 8019c2e:	490c      	ldr	r1, [pc, #48]	; (8019c60 <__kernel_sinf+0xe8>)
 8019c30:	4605      	mov	r5, r0
 8019c32:	4630      	mov	r0, r6
 8019c34:	f7e7 f8be 	bl	8000db4 <__aeabi_fmul>
 8019c38:	4601      	mov	r1, r0
 8019c3a:	4628      	mov	r0, r5
 8019c3c:	f7e6 ffb2 	bl	8000ba4 <__addsf3>
 8019c40:	4601      	mov	r1, r0
 8019c42:	4620      	mov	r0, r4
 8019c44:	f7e6 ffac 	bl	8000ba0 <__aeabi_fsub>
 8019c48:	e7d9      	b.n	8019bfe <__kernel_sinf+0x86>
 8019c4a:	bf00      	nop
 8019c4c:	2f2ec9d3 	.word	0x2f2ec9d3
 8019c50:	32d72f34 	.word	0x32d72f34
 8019c54:	3638ef1b 	.word	0x3638ef1b
 8019c58:	39500d01 	.word	0x39500d01
 8019c5c:	3c088889 	.word	0x3c088889
 8019c60:	3e2aaaab 	.word	0x3e2aaaab

08019c64 <__kernel_tanf>:
 8019c64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c68:	f020 4a00 	bic.w	sl, r0, #2147483648	; 0x80000000
 8019c6c:	f1ba 5f46 	cmp.w	sl, #830472192	; 0x31800000
 8019c70:	4604      	mov	r4, r0
 8019c72:	460e      	mov	r6, r1
 8019c74:	4690      	mov	r8, r2
 8019c76:	4607      	mov	r7, r0
 8019c78:	da1b      	bge.n	8019cb2 <__kernel_tanf+0x4e>
 8019c7a:	f7e7 fa77 	bl	800116c <__aeabi_f2iz>
 8019c7e:	2800      	cmp	r0, #0
 8019c80:	d12f      	bne.n	8019ce2 <__kernel_tanf+0x7e>
 8019c82:	f108 0301 	add.w	r3, r8, #1
 8019c86:	ea53 030a 	orrs.w	r3, r3, sl
 8019c8a:	d10c      	bne.n	8019ca6 <__kernel_tanf+0x42>
 8019c8c:	4620      	mov	r0, r4
 8019c8e:	f000 fbb1 	bl	801a3f4 <fabsf>
 8019c92:	4601      	mov	r1, r0
 8019c94:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8019c98:	f7e7 f940 	bl	8000f1c <__aeabi_fdiv>
 8019c9c:	4604      	mov	r4, r0
 8019c9e:	4620      	mov	r0, r4
 8019ca0:	b003      	add	sp, #12
 8019ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ca6:	f1b8 0f01 	cmp.w	r8, #1
 8019caa:	d0f8      	beq.n	8019c9e <__kernel_tanf+0x3a>
 8019cac:	4872      	ldr	r0, [pc, #456]	; (8019e78 <__kernel_tanf+0x214>)
 8019cae:	4621      	mov	r1, r4
 8019cb0:	e7f2      	b.n	8019c98 <__kernel_tanf+0x34>
 8019cb2:	4b72      	ldr	r3, [pc, #456]	; (8019e7c <__kernel_tanf+0x218>)
 8019cb4:	459a      	cmp	sl, r3
 8019cb6:	db14      	blt.n	8019ce2 <__kernel_tanf+0x7e>
 8019cb8:	2800      	cmp	r0, #0
 8019cba:	bfbe      	ittt	lt
 8019cbc:	f100 4000 	addlt.w	r0, r0, #2147483648	; 0x80000000
 8019cc0:	4604      	movlt	r4, r0
 8019cc2:	f101 4600 	addlt.w	r6, r1, #2147483648	; 0x80000000
 8019cc6:	486e      	ldr	r0, [pc, #440]	; (8019e80 <__kernel_tanf+0x21c>)
 8019cc8:	4621      	mov	r1, r4
 8019cca:	f7e6 ff69 	bl	8000ba0 <__aeabi_fsub>
 8019cce:	4631      	mov	r1, r6
 8019cd0:	4604      	mov	r4, r0
 8019cd2:	486c      	ldr	r0, [pc, #432]	; (8019e84 <__kernel_tanf+0x220>)
 8019cd4:	f7e6 ff64 	bl	8000ba0 <__aeabi_fsub>
 8019cd8:	4621      	mov	r1, r4
 8019cda:	f7e6 ff63 	bl	8000ba4 <__addsf3>
 8019cde:	2600      	movs	r6, #0
 8019ce0:	4604      	mov	r4, r0
 8019ce2:	4621      	mov	r1, r4
 8019ce4:	4620      	mov	r0, r4
 8019ce6:	f7e7 f865 	bl	8000db4 <__aeabi_fmul>
 8019cea:	4601      	mov	r1, r0
 8019cec:	4681      	mov	r9, r0
 8019cee:	f7e7 f861 	bl	8000db4 <__aeabi_fmul>
 8019cf2:	4649      	mov	r1, r9
 8019cf4:	4605      	mov	r5, r0
 8019cf6:	4620      	mov	r0, r4
 8019cf8:	f7e7 f85c 	bl	8000db4 <__aeabi_fmul>
 8019cfc:	4962      	ldr	r1, [pc, #392]	; (8019e88 <__kernel_tanf+0x224>)
 8019cfe:	4683      	mov	fp, r0
 8019d00:	4628      	mov	r0, r5
 8019d02:	f7e7 f857 	bl	8000db4 <__aeabi_fmul>
 8019d06:	4961      	ldr	r1, [pc, #388]	; (8019e8c <__kernel_tanf+0x228>)
 8019d08:	f7e6 ff4c 	bl	8000ba4 <__addsf3>
 8019d0c:	4629      	mov	r1, r5
 8019d0e:	f7e7 f851 	bl	8000db4 <__aeabi_fmul>
 8019d12:	495f      	ldr	r1, [pc, #380]	; (8019e90 <__kernel_tanf+0x22c>)
 8019d14:	f7e6 ff46 	bl	8000ba4 <__addsf3>
 8019d18:	4629      	mov	r1, r5
 8019d1a:	f7e7 f84b 	bl	8000db4 <__aeabi_fmul>
 8019d1e:	495d      	ldr	r1, [pc, #372]	; (8019e94 <__kernel_tanf+0x230>)
 8019d20:	f7e6 ff40 	bl	8000ba4 <__addsf3>
 8019d24:	4629      	mov	r1, r5
 8019d26:	f7e7 f845 	bl	8000db4 <__aeabi_fmul>
 8019d2a:	495b      	ldr	r1, [pc, #364]	; (8019e98 <__kernel_tanf+0x234>)
 8019d2c:	f7e6 ff3a 	bl	8000ba4 <__addsf3>
 8019d30:	4629      	mov	r1, r5
 8019d32:	f7e7 f83f 	bl	8000db4 <__aeabi_fmul>
 8019d36:	4959      	ldr	r1, [pc, #356]	; (8019e9c <__kernel_tanf+0x238>)
 8019d38:	f7e6 ff34 	bl	8000ba4 <__addsf3>
 8019d3c:	4649      	mov	r1, r9
 8019d3e:	f7e7 f839 	bl	8000db4 <__aeabi_fmul>
 8019d42:	4957      	ldr	r1, [pc, #348]	; (8019ea0 <__kernel_tanf+0x23c>)
 8019d44:	9001      	str	r0, [sp, #4]
 8019d46:	4628      	mov	r0, r5
 8019d48:	f7e7 f834 	bl	8000db4 <__aeabi_fmul>
 8019d4c:	4955      	ldr	r1, [pc, #340]	; (8019ea4 <__kernel_tanf+0x240>)
 8019d4e:	f7e6 ff29 	bl	8000ba4 <__addsf3>
 8019d52:	4629      	mov	r1, r5
 8019d54:	f7e7 f82e 	bl	8000db4 <__aeabi_fmul>
 8019d58:	4953      	ldr	r1, [pc, #332]	; (8019ea8 <__kernel_tanf+0x244>)
 8019d5a:	f7e6 ff23 	bl	8000ba4 <__addsf3>
 8019d5e:	4629      	mov	r1, r5
 8019d60:	f7e7 f828 	bl	8000db4 <__aeabi_fmul>
 8019d64:	4951      	ldr	r1, [pc, #324]	; (8019eac <__kernel_tanf+0x248>)
 8019d66:	f7e6 ff1d 	bl	8000ba4 <__addsf3>
 8019d6a:	4629      	mov	r1, r5
 8019d6c:	f7e7 f822 	bl	8000db4 <__aeabi_fmul>
 8019d70:	494f      	ldr	r1, [pc, #316]	; (8019eb0 <__kernel_tanf+0x24c>)
 8019d72:	f7e6 ff17 	bl	8000ba4 <__addsf3>
 8019d76:	4629      	mov	r1, r5
 8019d78:	f7e7 f81c 	bl	8000db4 <__aeabi_fmul>
 8019d7c:	494d      	ldr	r1, [pc, #308]	; (8019eb4 <__kernel_tanf+0x250>)
 8019d7e:	f7e6 ff11 	bl	8000ba4 <__addsf3>
 8019d82:	9b01      	ldr	r3, [sp, #4]
 8019d84:	4601      	mov	r1, r0
 8019d86:	4618      	mov	r0, r3
 8019d88:	f7e6 ff0c 	bl	8000ba4 <__addsf3>
 8019d8c:	4659      	mov	r1, fp
 8019d8e:	f7e7 f811 	bl	8000db4 <__aeabi_fmul>
 8019d92:	4631      	mov	r1, r6
 8019d94:	f7e6 ff06 	bl	8000ba4 <__addsf3>
 8019d98:	4649      	mov	r1, r9
 8019d9a:	f7e7 f80b 	bl	8000db4 <__aeabi_fmul>
 8019d9e:	4631      	mov	r1, r6
 8019da0:	f7e6 ff00 	bl	8000ba4 <__addsf3>
 8019da4:	4944      	ldr	r1, [pc, #272]	; (8019eb8 <__kernel_tanf+0x254>)
 8019da6:	4605      	mov	r5, r0
 8019da8:	4658      	mov	r0, fp
 8019daa:	f7e7 f803 	bl	8000db4 <__aeabi_fmul>
 8019dae:	4629      	mov	r1, r5
 8019db0:	f7e6 fef8 	bl	8000ba4 <__addsf3>
 8019db4:	4601      	mov	r1, r0
 8019db6:	4681      	mov	r9, r0
 8019db8:	4620      	mov	r0, r4
 8019dba:	f7e6 fef3 	bl	8000ba4 <__addsf3>
 8019dbe:	4b2f      	ldr	r3, [pc, #188]	; (8019e7c <__kernel_tanf+0x218>)
 8019dc0:	459a      	cmp	sl, r3
 8019dc2:	4605      	mov	r5, r0
 8019dc4:	db2b      	blt.n	8019e1e <__kernel_tanf+0x1ba>
 8019dc6:	4640      	mov	r0, r8
 8019dc8:	f7e6 ffa0 	bl	8000d0c <__aeabi_i2f>
 8019dcc:	4629      	mov	r1, r5
 8019dce:	4606      	mov	r6, r0
 8019dd0:	4628      	mov	r0, r5
 8019dd2:	f7e6 ffef 	bl	8000db4 <__aeabi_fmul>
 8019dd6:	4631      	mov	r1, r6
 8019dd8:	4680      	mov	r8, r0
 8019dda:	4628      	mov	r0, r5
 8019ddc:	f7e6 fee2 	bl	8000ba4 <__addsf3>
 8019de0:	4601      	mov	r1, r0
 8019de2:	4640      	mov	r0, r8
 8019de4:	f7e7 f89a 	bl	8000f1c <__aeabi_fdiv>
 8019de8:	4649      	mov	r1, r9
 8019dea:	f7e6 fed9 	bl	8000ba0 <__aeabi_fsub>
 8019dee:	4601      	mov	r1, r0
 8019df0:	4620      	mov	r0, r4
 8019df2:	f7e6 fed5 	bl	8000ba0 <__aeabi_fsub>
 8019df6:	4601      	mov	r1, r0
 8019df8:	f7e6 fed4 	bl	8000ba4 <__addsf3>
 8019dfc:	4601      	mov	r1, r0
 8019dfe:	4630      	mov	r0, r6
 8019e00:	f7e6 fece 	bl	8000ba0 <__aeabi_fsub>
 8019e04:	17bf      	asrs	r7, r7, #30
 8019e06:	f007 0702 	and.w	r7, r7, #2
 8019e0a:	4604      	mov	r4, r0
 8019e0c:	f1c7 0001 	rsb	r0, r7, #1
 8019e10:	f7e6 ff7c 	bl	8000d0c <__aeabi_i2f>
 8019e14:	4601      	mov	r1, r0
 8019e16:	4620      	mov	r0, r4
 8019e18:	f7e6 ffcc 	bl	8000db4 <__aeabi_fmul>
 8019e1c:	e73e      	b.n	8019c9c <__kernel_tanf+0x38>
 8019e1e:	f1b8 0f01 	cmp.w	r8, #1
 8019e22:	d027      	beq.n	8019e74 <__kernel_tanf+0x210>
 8019e24:	4e25      	ldr	r6, [pc, #148]	; (8019ebc <__kernel_tanf+0x258>)
 8019e26:	4601      	mov	r1, r0
 8019e28:	ea06 0800 	and.w	r8, r6, r0
 8019e2c:	4812      	ldr	r0, [pc, #72]	; (8019e78 <__kernel_tanf+0x214>)
 8019e2e:	f7e7 f875 	bl	8000f1c <__aeabi_fdiv>
 8019e32:	4621      	mov	r1, r4
 8019e34:	4006      	ands	r6, r0
 8019e36:	4607      	mov	r7, r0
 8019e38:	4640      	mov	r0, r8
 8019e3a:	f7e6 feb1 	bl	8000ba0 <__aeabi_fsub>
 8019e3e:	4601      	mov	r1, r0
 8019e40:	4648      	mov	r0, r9
 8019e42:	f7e6 fead 	bl	8000ba0 <__aeabi_fsub>
 8019e46:	4631      	mov	r1, r6
 8019e48:	f7e6 ffb4 	bl	8000db4 <__aeabi_fmul>
 8019e4c:	4631      	mov	r1, r6
 8019e4e:	4604      	mov	r4, r0
 8019e50:	4640      	mov	r0, r8
 8019e52:	f7e6 ffaf 	bl	8000db4 <__aeabi_fmul>
 8019e56:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8019e5a:	f7e6 fea3 	bl	8000ba4 <__addsf3>
 8019e5e:	4601      	mov	r1, r0
 8019e60:	4620      	mov	r0, r4
 8019e62:	f7e6 fe9f 	bl	8000ba4 <__addsf3>
 8019e66:	4639      	mov	r1, r7
 8019e68:	f7e6 ffa4 	bl	8000db4 <__aeabi_fmul>
 8019e6c:	4631      	mov	r1, r6
 8019e6e:	f7e6 fe99 	bl	8000ba4 <__addsf3>
 8019e72:	e713      	b.n	8019c9c <__kernel_tanf+0x38>
 8019e74:	4604      	mov	r4, r0
 8019e76:	e712      	b.n	8019c9e <__kernel_tanf+0x3a>
 8019e78:	bf800000 	.word	0xbf800000
 8019e7c:	3f2ca140 	.word	0x3f2ca140
 8019e80:	3f490fda 	.word	0x3f490fda
 8019e84:	33222168 	.word	0x33222168
 8019e88:	37d95384 	.word	0x37d95384
 8019e8c:	3895c07a 	.word	0x3895c07a
 8019e90:	398137b9 	.word	0x398137b9
 8019e94:	3abede48 	.word	0x3abede48
 8019e98:	3c11371f 	.word	0x3c11371f
 8019e9c:	3d5d0dd1 	.word	0x3d5d0dd1
 8019ea0:	b79bae5f 	.word	0xb79bae5f
 8019ea4:	38a3f445 	.word	0x38a3f445
 8019ea8:	3a1a26c8 	.word	0x3a1a26c8
 8019eac:	3b6b6916 	.word	0x3b6b6916
 8019eb0:	3cb327a4 	.word	0x3cb327a4
 8019eb4:	3e088889 	.word	0x3e088889
 8019eb8:	3eaaaaab 	.word	0x3eaaaaab
 8019ebc:	fffff000 	.word	0xfffff000

08019ec0 <atan>:
 8019ec0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ec4:	4bb6      	ldr	r3, [pc, #728]	; (801a1a0 <atan+0x2e0>)
 8019ec6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8019eca:	429e      	cmp	r6, r3
 8019ecc:	4604      	mov	r4, r0
 8019ece:	460d      	mov	r5, r1
 8019ed0:	468b      	mov	fp, r1
 8019ed2:	dd17      	ble.n	8019f04 <atan+0x44>
 8019ed4:	4bb3      	ldr	r3, [pc, #716]	; (801a1a4 <atan+0x2e4>)
 8019ed6:	429e      	cmp	r6, r3
 8019ed8:	dc01      	bgt.n	8019ede <atan+0x1e>
 8019eda:	d109      	bne.n	8019ef0 <atan+0x30>
 8019edc:	b140      	cbz	r0, 8019ef0 <atan+0x30>
 8019ede:	4622      	mov	r2, r4
 8019ee0:	462b      	mov	r3, r5
 8019ee2:	4620      	mov	r0, r4
 8019ee4:	4629      	mov	r1, r5
 8019ee6:	f7e6 f9a1 	bl	800022c <__adddf3>
 8019eea:	4604      	mov	r4, r0
 8019eec:	460d      	mov	r5, r1
 8019eee:	e005      	b.n	8019efc <atan+0x3c>
 8019ef0:	f1bb 0f00 	cmp.w	fp, #0
 8019ef4:	4cac      	ldr	r4, [pc, #688]	; (801a1a8 <atan+0x2e8>)
 8019ef6:	f300 8121 	bgt.w	801a13c <atan+0x27c>
 8019efa:	4dac      	ldr	r5, [pc, #688]	; (801a1ac <atan+0x2ec>)
 8019efc:	4620      	mov	r0, r4
 8019efe:	4629      	mov	r1, r5
 8019f00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f04:	4baa      	ldr	r3, [pc, #680]	; (801a1b0 <atan+0x2f0>)
 8019f06:	429e      	cmp	r6, r3
 8019f08:	dc11      	bgt.n	8019f2e <atan+0x6e>
 8019f0a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8019f0e:	429e      	cmp	r6, r3
 8019f10:	dc0a      	bgt.n	8019f28 <atan+0x68>
 8019f12:	a38b      	add	r3, pc, #556	; (adr r3, 801a140 <atan+0x280>)
 8019f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f18:	f7e6 f988 	bl	800022c <__adddf3>
 8019f1c:	4ba5      	ldr	r3, [pc, #660]	; (801a1b4 <atan+0x2f4>)
 8019f1e:	2200      	movs	r2, #0
 8019f20:	f7e6 fdca 	bl	8000ab8 <__aeabi_dcmpgt>
 8019f24:	2800      	cmp	r0, #0
 8019f26:	d1e9      	bne.n	8019efc <atan+0x3c>
 8019f28:	f04f 3aff 	mov.w	sl, #4294967295
 8019f2c:	e027      	b.n	8019f7e <atan+0xbe>
 8019f2e:	f000 f951 	bl	801a1d4 <fabs>
 8019f32:	4ba1      	ldr	r3, [pc, #644]	; (801a1b8 <atan+0x2f8>)
 8019f34:	429e      	cmp	r6, r3
 8019f36:	4604      	mov	r4, r0
 8019f38:	460d      	mov	r5, r1
 8019f3a:	f300 80b8 	bgt.w	801a0ae <atan+0x1ee>
 8019f3e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8019f42:	429e      	cmp	r6, r3
 8019f44:	f300 809c 	bgt.w	801a080 <atan+0x1c0>
 8019f48:	4602      	mov	r2, r0
 8019f4a:	460b      	mov	r3, r1
 8019f4c:	f7e6 f96e 	bl	800022c <__adddf3>
 8019f50:	4b98      	ldr	r3, [pc, #608]	; (801a1b4 <atan+0x2f4>)
 8019f52:	2200      	movs	r2, #0
 8019f54:	f7e6 f968 	bl	8000228 <__aeabi_dsub>
 8019f58:	2200      	movs	r2, #0
 8019f5a:	4606      	mov	r6, r0
 8019f5c:	460f      	mov	r7, r1
 8019f5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8019f62:	4620      	mov	r0, r4
 8019f64:	4629      	mov	r1, r5
 8019f66:	f7e6 f961 	bl	800022c <__adddf3>
 8019f6a:	4602      	mov	r2, r0
 8019f6c:	460b      	mov	r3, r1
 8019f6e:	4630      	mov	r0, r6
 8019f70:	4639      	mov	r1, r7
 8019f72:	f7e6 fc3b 	bl	80007ec <__aeabi_ddiv>
 8019f76:	f04f 0a00 	mov.w	sl, #0
 8019f7a:	4604      	mov	r4, r0
 8019f7c:	460d      	mov	r5, r1
 8019f7e:	4622      	mov	r2, r4
 8019f80:	462b      	mov	r3, r5
 8019f82:	4620      	mov	r0, r4
 8019f84:	4629      	mov	r1, r5
 8019f86:	f7e6 fb07 	bl	8000598 <__aeabi_dmul>
 8019f8a:	4602      	mov	r2, r0
 8019f8c:	460b      	mov	r3, r1
 8019f8e:	4680      	mov	r8, r0
 8019f90:	4689      	mov	r9, r1
 8019f92:	f7e6 fb01 	bl	8000598 <__aeabi_dmul>
 8019f96:	a36c      	add	r3, pc, #432	; (adr r3, 801a148 <atan+0x288>)
 8019f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f9c:	4606      	mov	r6, r0
 8019f9e:	460f      	mov	r7, r1
 8019fa0:	f7e6 fafa 	bl	8000598 <__aeabi_dmul>
 8019fa4:	a36a      	add	r3, pc, #424	; (adr r3, 801a150 <atan+0x290>)
 8019fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019faa:	f7e6 f93f 	bl	800022c <__adddf3>
 8019fae:	4632      	mov	r2, r6
 8019fb0:	463b      	mov	r3, r7
 8019fb2:	f7e6 faf1 	bl	8000598 <__aeabi_dmul>
 8019fb6:	a368      	add	r3, pc, #416	; (adr r3, 801a158 <atan+0x298>)
 8019fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fbc:	f7e6 f936 	bl	800022c <__adddf3>
 8019fc0:	4632      	mov	r2, r6
 8019fc2:	463b      	mov	r3, r7
 8019fc4:	f7e6 fae8 	bl	8000598 <__aeabi_dmul>
 8019fc8:	a365      	add	r3, pc, #404	; (adr r3, 801a160 <atan+0x2a0>)
 8019fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fce:	f7e6 f92d 	bl	800022c <__adddf3>
 8019fd2:	4632      	mov	r2, r6
 8019fd4:	463b      	mov	r3, r7
 8019fd6:	f7e6 fadf 	bl	8000598 <__aeabi_dmul>
 8019fda:	a363      	add	r3, pc, #396	; (adr r3, 801a168 <atan+0x2a8>)
 8019fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fe0:	f7e6 f924 	bl	800022c <__adddf3>
 8019fe4:	4632      	mov	r2, r6
 8019fe6:	463b      	mov	r3, r7
 8019fe8:	f7e6 fad6 	bl	8000598 <__aeabi_dmul>
 8019fec:	a360      	add	r3, pc, #384	; (adr r3, 801a170 <atan+0x2b0>)
 8019fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ff2:	f7e6 f91b 	bl	800022c <__adddf3>
 8019ff6:	4642      	mov	r2, r8
 8019ff8:	464b      	mov	r3, r9
 8019ffa:	f7e6 facd 	bl	8000598 <__aeabi_dmul>
 8019ffe:	a35e      	add	r3, pc, #376	; (adr r3, 801a178 <atan+0x2b8>)
 801a000:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a004:	4680      	mov	r8, r0
 801a006:	4689      	mov	r9, r1
 801a008:	4630      	mov	r0, r6
 801a00a:	4639      	mov	r1, r7
 801a00c:	f7e6 fac4 	bl	8000598 <__aeabi_dmul>
 801a010:	a35b      	add	r3, pc, #364	; (adr r3, 801a180 <atan+0x2c0>)
 801a012:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a016:	f7e6 f907 	bl	8000228 <__aeabi_dsub>
 801a01a:	4632      	mov	r2, r6
 801a01c:	463b      	mov	r3, r7
 801a01e:	f7e6 fabb 	bl	8000598 <__aeabi_dmul>
 801a022:	a359      	add	r3, pc, #356	; (adr r3, 801a188 <atan+0x2c8>)
 801a024:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a028:	f7e6 f8fe 	bl	8000228 <__aeabi_dsub>
 801a02c:	4632      	mov	r2, r6
 801a02e:	463b      	mov	r3, r7
 801a030:	f7e6 fab2 	bl	8000598 <__aeabi_dmul>
 801a034:	a356      	add	r3, pc, #344	; (adr r3, 801a190 <atan+0x2d0>)
 801a036:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a03a:	f7e6 f8f5 	bl	8000228 <__aeabi_dsub>
 801a03e:	4632      	mov	r2, r6
 801a040:	463b      	mov	r3, r7
 801a042:	f7e6 faa9 	bl	8000598 <__aeabi_dmul>
 801a046:	a354      	add	r3, pc, #336	; (adr r3, 801a198 <atan+0x2d8>)
 801a048:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a04c:	f7e6 f8ec 	bl	8000228 <__aeabi_dsub>
 801a050:	4632      	mov	r2, r6
 801a052:	463b      	mov	r3, r7
 801a054:	f7e6 faa0 	bl	8000598 <__aeabi_dmul>
 801a058:	4602      	mov	r2, r0
 801a05a:	460b      	mov	r3, r1
 801a05c:	4640      	mov	r0, r8
 801a05e:	4649      	mov	r1, r9
 801a060:	f7e6 f8e4 	bl	800022c <__adddf3>
 801a064:	4622      	mov	r2, r4
 801a066:	462b      	mov	r3, r5
 801a068:	f7e6 fa96 	bl	8000598 <__aeabi_dmul>
 801a06c:	f1ba 3fff 	cmp.w	sl, #4294967295
 801a070:	4602      	mov	r2, r0
 801a072:	460b      	mov	r3, r1
 801a074:	d144      	bne.n	801a100 <atan+0x240>
 801a076:	4620      	mov	r0, r4
 801a078:	4629      	mov	r1, r5
 801a07a:	f7e6 f8d5 	bl	8000228 <__aeabi_dsub>
 801a07e:	e734      	b.n	8019eea <atan+0x2a>
 801a080:	4b4c      	ldr	r3, [pc, #304]	; (801a1b4 <atan+0x2f4>)
 801a082:	2200      	movs	r2, #0
 801a084:	f7e6 f8d0 	bl	8000228 <__aeabi_dsub>
 801a088:	4b4a      	ldr	r3, [pc, #296]	; (801a1b4 <atan+0x2f4>)
 801a08a:	4606      	mov	r6, r0
 801a08c:	460f      	mov	r7, r1
 801a08e:	2200      	movs	r2, #0
 801a090:	4620      	mov	r0, r4
 801a092:	4629      	mov	r1, r5
 801a094:	f7e6 f8ca 	bl	800022c <__adddf3>
 801a098:	4602      	mov	r2, r0
 801a09a:	460b      	mov	r3, r1
 801a09c:	4630      	mov	r0, r6
 801a09e:	4639      	mov	r1, r7
 801a0a0:	f7e6 fba4 	bl	80007ec <__aeabi_ddiv>
 801a0a4:	f04f 0a01 	mov.w	sl, #1
 801a0a8:	4604      	mov	r4, r0
 801a0aa:	460d      	mov	r5, r1
 801a0ac:	e767      	b.n	8019f7e <atan+0xbe>
 801a0ae:	4b43      	ldr	r3, [pc, #268]	; (801a1bc <atan+0x2fc>)
 801a0b0:	429e      	cmp	r6, r3
 801a0b2:	da1a      	bge.n	801a0ea <atan+0x22a>
 801a0b4:	4b42      	ldr	r3, [pc, #264]	; (801a1c0 <atan+0x300>)
 801a0b6:	2200      	movs	r2, #0
 801a0b8:	f7e6 f8b6 	bl	8000228 <__aeabi_dsub>
 801a0bc:	4b40      	ldr	r3, [pc, #256]	; (801a1c0 <atan+0x300>)
 801a0be:	4606      	mov	r6, r0
 801a0c0:	460f      	mov	r7, r1
 801a0c2:	2200      	movs	r2, #0
 801a0c4:	4620      	mov	r0, r4
 801a0c6:	4629      	mov	r1, r5
 801a0c8:	f7e6 fa66 	bl	8000598 <__aeabi_dmul>
 801a0cc:	4b39      	ldr	r3, [pc, #228]	; (801a1b4 <atan+0x2f4>)
 801a0ce:	2200      	movs	r2, #0
 801a0d0:	f7e6 f8ac 	bl	800022c <__adddf3>
 801a0d4:	4602      	mov	r2, r0
 801a0d6:	460b      	mov	r3, r1
 801a0d8:	4630      	mov	r0, r6
 801a0da:	4639      	mov	r1, r7
 801a0dc:	f7e6 fb86 	bl	80007ec <__aeabi_ddiv>
 801a0e0:	f04f 0a02 	mov.w	sl, #2
 801a0e4:	4604      	mov	r4, r0
 801a0e6:	460d      	mov	r5, r1
 801a0e8:	e749      	b.n	8019f7e <atan+0xbe>
 801a0ea:	4602      	mov	r2, r0
 801a0ec:	460b      	mov	r3, r1
 801a0ee:	2000      	movs	r0, #0
 801a0f0:	4934      	ldr	r1, [pc, #208]	; (801a1c4 <atan+0x304>)
 801a0f2:	f7e6 fb7b 	bl	80007ec <__aeabi_ddiv>
 801a0f6:	f04f 0a03 	mov.w	sl, #3
 801a0fa:	4604      	mov	r4, r0
 801a0fc:	460d      	mov	r5, r1
 801a0fe:	e73e      	b.n	8019f7e <atan+0xbe>
 801a100:	4b31      	ldr	r3, [pc, #196]	; (801a1c8 <atan+0x308>)
 801a102:	4e32      	ldr	r6, [pc, #200]	; (801a1cc <atan+0x30c>)
 801a104:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801a108:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801a10c:	e9da 2300 	ldrd	r2, r3, [sl]
 801a110:	f7e6 f88a 	bl	8000228 <__aeabi_dsub>
 801a114:	4622      	mov	r2, r4
 801a116:	462b      	mov	r3, r5
 801a118:	f7e6 f886 	bl	8000228 <__aeabi_dsub>
 801a11c:	4602      	mov	r2, r0
 801a11e:	460b      	mov	r3, r1
 801a120:	e9d6 0100 	ldrd	r0, r1, [r6]
 801a124:	f7e6 f880 	bl	8000228 <__aeabi_dsub>
 801a128:	f1bb 0f00 	cmp.w	fp, #0
 801a12c:	4604      	mov	r4, r0
 801a12e:	460d      	mov	r5, r1
 801a130:	f6bf aee4 	bge.w	8019efc <atan+0x3c>
 801a134:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a138:	461d      	mov	r5, r3
 801a13a:	e6df      	b.n	8019efc <atan+0x3c>
 801a13c:	4d24      	ldr	r5, [pc, #144]	; (801a1d0 <atan+0x310>)
 801a13e:	e6dd      	b.n	8019efc <atan+0x3c>
 801a140:	8800759c 	.word	0x8800759c
 801a144:	7e37e43c 	.word	0x7e37e43c
 801a148:	e322da11 	.word	0xe322da11
 801a14c:	3f90ad3a 	.word	0x3f90ad3a
 801a150:	24760deb 	.word	0x24760deb
 801a154:	3fa97b4b 	.word	0x3fa97b4b
 801a158:	a0d03d51 	.word	0xa0d03d51
 801a15c:	3fb10d66 	.word	0x3fb10d66
 801a160:	c54c206e 	.word	0xc54c206e
 801a164:	3fb745cd 	.word	0x3fb745cd
 801a168:	920083ff 	.word	0x920083ff
 801a16c:	3fc24924 	.word	0x3fc24924
 801a170:	5555550d 	.word	0x5555550d
 801a174:	3fd55555 	.word	0x3fd55555
 801a178:	2c6a6c2f 	.word	0x2c6a6c2f
 801a17c:	bfa2b444 	.word	0xbfa2b444
 801a180:	52defd9a 	.word	0x52defd9a
 801a184:	3fadde2d 	.word	0x3fadde2d
 801a188:	af749a6d 	.word	0xaf749a6d
 801a18c:	3fb3b0f2 	.word	0x3fb3b0f2
 801a190:	fe231671 	.word	0xfe231671
 801a194:	3fbc71c6 	.word	0x3fbc71c6
 801a198:	9998ebc4 	.word	0x9998ebc4
 801a19c:	3fc99999 	.word	0x3fc99999
 801a1a0:	440fffff 	.word	0x440fffff
 801a1a4:	7ff00000 	.word	0x7ff00000
 801a1a8:	54442d18 	.word	0x54442d18
 801a1ac:	bff921fb 	.word	0xbff921fb
 801a1b0:	3fdbffff 	.word	0x3fdbffff
 801a1b4:	3ff00000 	.word	0x3ff00000
 801a1b8:	3ff2ffff 	.word	0x3ff2ffff
 801a1bc:	40038000 	.word	0x40038000
 801a1c0:	3ff80000 	.word	0x3ff80000
 801a1c4:	bff00000 	.word	0xbff00000
 801a1c8:	0801ab10 	.word	0x0801ab10
 801a1cc:	0801aaf0 	.word	0x0801aaf0
 801a1d0:	3ff921fb 	.word	0x3ff921fb

0801a1d4 <fabs>:
 801a1d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801a1d8:	4770      	bx	lr
	...

0801a1dc <atanf>:
 801a1dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a1e0:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 801a1e4:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 801a1e8:	4604      	mov	r4, r0
 801a1ea:	4680      	mov	r8, r0
 801a1ec:	db0e      	blt.n	801a20c <atanf+0x30>
 801a1ee:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801a1f2:	dd04      	ble.n	801a1fe <atanf+0x22>
 801a1f4:	4601      	mov	r1, r0
 801a1f6:	f7e6 fcd5 	bl	8000ba4 <__addsf3>
 801a1fa:	4604      	mov	r4, r0
 801a1fc:	e003      	b.n	801a206 <atanf+0x2a>
 801a1fe:	2800      	cmp	r0, #0
 801a200:	f300 80ce 	bgt.w	801a3a0 <atanf+0x1c4>
 801a204:	4c67      	ldr	r4, [pc, #412]	; (801a3a4 <atanf+0x1c8>)
 801a206:	4620      	mov	r0, r4
 801a208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a20c:	4b66      	ldr	r3, [pc, #408]	; (801a3a8 <atanf+0x1cc>)
 801a20e:	429d      	cmp	r5, r3
 801a210:	dc0e      	bgt.n	801a230 <atanf+0x54>
 801a212:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 801a216:	da08      	bge.n	801a22a <atanf+0x4e>
 801a218:	4964      	ldr	r1, [pc, #400]	; (801a3ac <atanf+0x1d0>)
 801a21a:	f7e6 fcc3 	bl	8000ba4 <__addsf3>
 801a21e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 801a222:	f7e6 ff83 	bl	800112c <__aeabi_fcmpgt>
 801a226:	2800      	cmp	r0, #0
 801a228:	d1ed      	bne.n	801a206 <atanf+0x2a>
 801a22a:	f04f 36ff 	mov.w	r6, #4294967295
 801a22e:	e01c      	b.n	801a26a <atanf+0x8e>
 801a230:	f000 f8e0 	bl	801a3f4 <fabsf>
 801a234:	4b5e      	ldr	r3, [pc, #376]	; (801a3b0 <atanf+0x1d4>)
 801a236:	429d      	cmp	r5, r3
 801a238:	4604      	mov	r4, r0
 801a23a:	dc7c      	bgt.n	801a336 <atanf+0x15a>
 801a23c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801a240:	429d      	cmp	r5, r3
 801a242:	dc67      	bgt.n	801a314 <atanf+0x138>
 801a244:	4601      	mov	r1, r0
 801a246:	f7e6 fcad 	bl	8000ba4 <__addsf3>
 801a24a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 801a24e:	f7e6 fca7 	bl	8000ba0 <__aeabi_fsub>
 801a252:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 801a256:	4605      	mov	r5, r0
 801a258:	4620      	mov	r0, r4
 801a25a:	f7e6 fca3 	bl	8000ba4 <__addsf3>
 801a25e:	4601      	mov	r1, r0
 801a260:	4628      	mov	r0, r5
 801a262:	f7e6 fe5b 	bl	8000f1c <__aeabi_fdiv>
 801a266:	2600      	movs	r6, #0
 801a268:	4604      	mov	r4, r0
 801a26a:	4621      	mov	r1, r4
 801a26c:	4620      	mov	r0, r4
 801a26e:	f7e6 fda1 	bl	8000db4 <__aeabi_fmul>
 801a272:	4601      	mov	r1, r0
 801a274:	4607      	mov	r7, r0
 801a276:	f7e6 fd9d 	bl	8000db4 <__aeabi_fmul>
 801a27a:	494e      	ldr	r1, [pc, #312]	; (801a3b4 <atanf+0x1d8>)
 801a27c:	4605      	mov	r5, r0
 801a27e:	f7e6 fd99 	bl	8000db4 <__aeabi_fmul>
 801a282:	494d      	ldr	r1, [pc, #308]	; (801a3b8 <atanf+0x1dc>)
 801a284:	f7e6 fc8e 	bl	8000ba4 <__addsf3>
 801a288:	4629      	mov	r1, r5
 801a28a:	f7e6 fd93 	bl	8000db4 <__aeabi_fmul>
 801a28e:	494b      	ldr	r1, [pc, #300]	; (801a3bc <atanf+0x1e0>)
 801a290:	f7e6 fc88 	bl	8000ba4 <__addsf3>
 801a294:	4629      	mov	r1, r5
 801a296:	f7e6 fd8d 	bl	8000db4 <__aeabi_fmul>
 801a29a:	4949      	ldr	r1, [pc, #292]	; (801a3c0 <atanf+0x1e4>)
 801a29c:	f7e6 fc82 	bl	8000ba4 <__addsf3>
 801a2a0:	4629      	mov	r1, r5
 801a2a2:	f7e6 fd87 	bl	8000db4 <__aeabi_fmul>
 801a2a6:	4947      	ldr	r1, [pc, #284]	; (801a3c4 <atanf+0x1e8>)
 801a2a8:	f7e6 fc7c 	bl	8000ba4 <__addsf3>
 801a2ac:	4629      	mov	r1, r5
 801a2ae:	f7e6 fd81 	bl	8000db4 <__aeabi_fmul>
 801a2b2:	4945      	ldr	r1, [pc, #276]	; (801a3c8 <atanf+0x1ec>)
 801a2b4:	f7e6 fc76 	bl	8000ba4 <__addsf3>
 801a2b8:	4639      	mov	r1, r7
 801a2ba:	f7e6 fd7b 	bl	8000db4 <__aeabi_fmul>
 801a2be:	4943      	ldr	r1, [pc, #268]	; (801a3cc <atanf+0x1f0>)
 801a2c0:	4607      	mov	r7, r0
 801a2c2:	4628      	mov	r0, r5
 801a2c4:	f7e6 fd76 	bl	8000db4 <__aeabi_fmul>
 801a2c8:	4941      	ldr	r1, [pc, #260]	; (801a3d0 <atanf+0x1f4>)
 801a2ca:	f7e6 fc69 	bl	8000ba0 <__aeabi_fsub>
 801a2ce:	4629      	mov	r1, r5
 801a2d0:	f7e6 fd70 	bl	8000db4 <__aeabi_fmul>
 801a2d4:	493f      	ldr	r1, [pc, #252]	; (801a3d4 <atanf+0x1f8>)
 801a2d6:	f7e6 fc63 	bl	8000ba0 <__aeabi_fsub>
 801a2da:	4629      	mov	r1, r5
 801a2dc:	f7e6 fd6a 	bl	8000db4 <__aeabi_fmul>
 801a2e0:	493d      	ldr	r1, [pc, #244]	; (801a3d8 <atanf+0x1fc>)
 801a2e2:	f7e6 fc5d 	bl	8000ba0 <__aeabi_fsub>
 801a2e6:	4629      	mov	r1, r5
 801a2e8:	f7e6 fd64 	bl	8000db4 <__aeabi_fmul>
 801a2ec:	493b      	ldr	r1, [pc, #236]	; (801a3dc <atanf+0x200>)
 801a2ee:	f7e6 fc57 	bl	8000ba0 <__aeabi_fsub>
 801a2f2:	4629      	mov	r1, r5
 801a2f4:	f7e6 fd5e 	bl	8000db4 <__aeabi_fmul>
 801a2f8:	4601      	mov	r1, r0
 801a2fa:	4638      	mov	r0, r7
 801a2fc:	f7e6 fc52 	bl	8000ba4 <__addsf3>
 801a300:	4621      	mov	r1, r4
 801a302:	f7e6 fd57 	bl	8000db4 <__aeabi_fmul>
 801a306:	1c73      	adds	r3, r6, #1
 801a308:	4601      	mov	r1, r0
 801a30a:	d133      	bne.n	801a374 <atanf+0x198>
 801a30c:	4620      	mov	r0, r4
 801a30e:	f7e6 fc47 	bl	8000ba0 <__aeabi_fsub>
 801a312:	e772      	b.n	801a1fa <atanf+0x1e>
 801a314:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 801a318:	f7e6 fc42 	bl	8000ba0 <__aeabi_fsub>
 801a31c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 801a320:	4605      	mov	r5, r0
 801a322:	4620      	mov	r0, r4
 801a324:	f7e6 fc3e 	bl	8000ba4 <__addsf3>
 801a328:	4601      	mov	r1, r0
 801a32a:	4628      	mov	r0, r5
 801a32c:	f7e6 fdf6 	bl	8000f1c <__aeabi_fdiv>
 801a330:	2601      	movs	r6, #1
 801a332:	4604      	mov	r4, r0
 801a334:	e799      	b.n	801a26a <atanf+0x8e>
 801a336:	4b2a      	ldr	r3, [pc, #168]	; (801a3e0 <atanf+0x204>)
 801a338:	429d      	cmp	r5, r3
 801a33a:	dc14      	bgt.n	801a366 <atanf+0x18a>
 801a33c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 801a340:	f7e6 fc2e 	bl	8000ba0 <__aeabi_fsub>
 801a344:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 801a348:	4605      	mov	r5, r0
 801a34a:	4620      	mov	r0, r4
 801a34c:	f7e6 fd32 	bl	8000db4 <__aeabi_fmul>
 801a350:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 801a354:	f7e6 fc26 	bl	8000ba4 <__addsf3>
 801a358:	4601      	mov	r1, r0
 801a35a:	4628      	mov	r0, r5
 801a35c:	f7e6 fdde 	bl	8000f1c <__aeabi_fdiv>
 801a360:	2602      	movs	r6, #2
 801a362:	4604      	mov	r4, r0
 801a364:	e781      	b.n	801a26a <atanf+0x8e>
 801a366:	4601      	mov	r1, r0
 801a368:	481e      	ldr	r0, [pc, #120]	; (801a3e4 <atanf+0x208>)
 801a36a:	f7e6 fdd7 	bl	8000f1c <__aeabi_fdiv>
 801a36e:	2603      	movs	r6, #3
 801a370:	4604      	mov	r4, r0
 801a372:	e77a      	b.n	801a26a <atanf+0x8e>
 801a374:	4b1c      	ldr	r3, [pc, #112]	; (801a3e8 <atanf+0x20c>)
 801a376:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 801a37a:	f7e6 fc11 	bl	8000ba0 <__aeabi_fsub>
 801a37e:	4621      	mov	r1, r4
 801a380:	f7e6 fc0e 	bl	8000ba0 <__aeabi_fsub>
 801a384:	4b19      	ldr	r3, [pc, #100]	; (801a3ec <atanf+0x210>)
 801a386:	4601      	mov	r1, r0
 801a388:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801a38c:	f7e6 fc08 	bl	8000ba0 <__aeabi_fsub>
 801a390:	f1b8 0f00 	cmp.w	r8, #0
 801a394:	4604      	mov	r4, r0
 801a396:	f6bf af36 	bge.w	801a206 <atanf+0x2a>
 801a39a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 801a39e:	e72c      	b.n	801a1fa <atanf+0x1e>
 801a3a0:	4c13      	ldr	r4, [pc, #76]	; (801a3f0 <atanf+0x214>)
 801a3a2:	e730      	b.n	801a206 <atanf+0x2a>
 801a3a4:	bfc90fdb 	.word	0xbfc90fdb
 801a3a8:	3edfffff 	.word	0x3edfffff
 801a3ac:	7149f2ca 	.word	0x7149f2ca
 801a3b0:	3f97ffff 	.word	0x3f97ffff
 801a3b4:	3c8569d7 	.word	0x3c8569d7
 801a3b8:	3d4bda59 	.word	0x3d4bda59
 801a3bc:	3d886b35 	.word	0x3d886b35
 801a3c0:	3dba2e6e 	.word	0x3dba2e6e
 801a3c4:	3e124925 	.word	0x3e124925
 801a3c8:	3eaaaaab 	.word	0x3eaaaaab
 801a3cc:	bd15a221 	.word	0xbd15a221
 801a3d0:	3d6ef16b 	.word	0x3d6ef16b
 801a3d4:	3d9d8795 	.word	0x3d9d8795
 801a3d8:	3de38e38 	.word	0x3de38e38
 801a3dc:	3e4ccccd 	.word	0x3e4ccccd
 801a3e0:	401bffff 	.word	0x401bffff
 801a3e4:	bf800000 	.word	0xbf800000
 801a3e8:	0801ab40 	.word	0x0801ab40
 801a3ec:	0801ab30 	.word	0x0801ab30
 801a3f0:	3fc90fdb 	.word	0x3fc90fdb

0801a3f4 <fabsf>:
 801a3f4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801a3f8:	4770      	bx	lr
	...

0801a3fc <floorf>:
 801a3fc:	b570      	push	{r4, r5, r6, lr}
 801a3fe:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 801a402:	3d7f      	subs	r5, #127	; 0x7f
 801a404:	2d16      	cmp	r5, #22
 801a406:	4601      	mov	r1, r0
 801a408:	4604      	mov	r4, r0
 801a40a:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 801a40e:	dc26      	bgt.n	801a45e <floorf+0x62>
 801a410:	2d00      	cmp	r5, #0
 801a412:	da0e      	bge.n	801a432 <floorf+0x36>
 801a414:	4917      	ldr	r1, [pc, #92]	; (801a474 <floorf+0x78>)
 801a416:	f7e6 fbc5 	bl	8000ba4 <__addsf3>
 801a41a:	2100      	movs	r1, #0
 801a41c:	f7e6 fe86 	bl	800112c <__aeabi_fcmpgt>
 801a420:	b128      	cbz	r0, 801a42e <floorf+0x32>
 801a422:	2c00      	cmp	r4, #0
 801a424:	da23      	bge.n	801a46e <floorf+0x72>
 801a426:	4b14      	ldr	r3, [pc, #80]	; (801a478 <floorf+0x7c>)
 801a428:	2e00      	cmp	r6, #0
 801a42a:	bf18      	it	ne
 801a42c:	461c      	movne	r4, r3
 801a42e:	4621      	mov	r1, r4
 801a430:	e01b      	b.n	801a46a <floorf+0x6e>
 801a432:	4e12      	ldr	r6, [pc, #72]	; (801a47c <floorf+0x80>)
 801a434:	412e      	asrs	r6, r5
 801a436:	4230      	tst	r0, r6
 801a438:	d017      	beq.n	801a46a <floorf+0x6e>
 801a43a:	490e      	ldr	r1, [pc, #56]	; (801a474 <floorf+0x78>)
 801a43c:	f7e6 fbb2 	bl	8000ba4 <__addsf3>
 801a440:	2100      	movs	r1, #0
 801a442:	f7e6 fe73 	bl	800112c <__aeabi_fcmpgt>
 801a446:	2800      	cmp	r0, #0
 801a448:	d0f1      	beq.n	801a42e <floorf+0x32>
 801a44a:	2c00      	cmp	r4, #0
 801a44c:	bfbe      	ittt	lt
 801a44e:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 801a452:	fa43 f505 	asrlt.w	r5, r3, r5
 801a456:	1964      	addlt	r4, r4, r5
 801a458:	ea24 0406 	bic.w	r4, r4, r6
 801a45c:	e7e7      	b.n	801a42e <floorf+0x32>
 801a45e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 801a462:	d302      	bcc.n	801a46a <floorf+0x6e>
 801a464:	f7e6 fb9e 	bl	8000ba4 <__addsf3>
 801a468:	4601      	mov	r1, r0
 801a46a:	4608      	mov	r0, r1
 801a46c:	bd70      	pop	{r4, r5, r6, pc}
 801a46e:	2400      	movs	r4, #0
 801a470:	e7dd      	b.n	801a42e <floorf+0x32>
 801a472:	bf00      	nop
 801a474:	7149f2ca 	.word	0x7149f2ca
 801a478:	bf800000 	.word	0xbf800000
 801a47c:	007fffff 	.word	0x007fffff

0801a480 <nanf>:
 801a480:	4800      	ldr	r0, [pc, #0]	; (801a484 <nanf+0x4>)
 801a482:	4770      	bx	lr
 801a484:	7fc00000 	.word	0x7fc00000

0801a488 <scalbnf>:
 801a488:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 801a48c:	b538      	push	{r3, r4, r5, lr}
 801a48e:	4603      	mov	r3, r0
 801a490:	460d      	mov	r5, r1
 801a492:	4604      	mov	r4, r0
 801a494:	d02a      	beq.n	801a4ec <scalbnf+0x64>
 801a496:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801a49a:	d304      	bcc.n	801a4a6 <scalbnf+0x1e>
 801a49c:	4601      	mov	r1, r0
 801a49e:	f7e6 fb81 	bl	8000ba4 <__addsf3>
 801a4a2:	4603      	mov	r3, r0
 801a4a4:	e022      	b.n	801a4ec <scalbnf+0x64>
 801a4a6:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 801a4aa:	d117      	bne.n	801a4dc <scalbnf+0x54>
 801a4ac:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 801a4b0:	f7e6 fc80 	bl	8000db4 <__aeabi_fmul>
 801a4b4:	4a17      	ldr	r2, [pc, #92]	; (801a514 <scalbnf+0x8c>)
 801a4b6:	4295      	cmp	r5, r2
 801a4b8:	4603      	mov	r3, r0
 801a4ba:	db0b      	blt.n	801a4d4 <scalbnf+0x4c>
 801a4bc:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 801a4c0:	4604      	mov	r4, r0
 801a4c2:	3a19      	subs	r2, #25
 801a4c4:	442a      	add	r2, r5
 801a4c6:	2afe      	cmp	r2, #254	; 0xfe
 801a4c8:	dd0a      	ble.n	801a4e0 <scalbnf+0x58>
 801a4ca:	4913      	ldr	r1, [pc, #76]	; (801a518 <scalbnf+0x90>)
 801a4cc:	4618      	mov	r0, r3
 801a4ce:	f361 001e 	bfi	r0, r1, #0, #31
 801a4d2:	e000      	b.n	801a4d6 <scalbnf+0x4e>
 801a4d4:	4911      	ldr	r1, [pc, #68]	; (801a51c <scalbnf+0x94>)
 801a4d6:	f7e6 fc6d 	bl	8000db4 <__aeabi_fmul>
 801a4da:	e7e2      	b.n	801a4a2 <scalbnf+0x1a>
 801a4dc:	0dd2      	lsrs	r2, r2, #23
 801a4de:	e7f1      	b.n	801a4c4 <scalbnf+0x3c>
 801a4e0:	2a00      	cmp	r2, #0
 801a4e2:	dd05      	ble.n	801a4f0 <scalbnf+0x68>
 801a4e4:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 801a4e8:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 801a4ec:	4618      	mov	r0, r3
 801a4ee:	bd38      	pop	{r3, r4, r5, pc}
 801a4f0:	f112 0f16 	cmn.w	r2, #22
 801a4f4:	da05      	bge.n	801a502 <scalbnf+0x7a>
 801a4f6:	f24c 3250 	movw	r2, #50000	; 0xc350
 801a4fa:	4295      	cmp	r5, r2
 801a4fc:	dce5      	bgt.n	801a4ca <scalbnf+0x42>
 801a4fe:	4907      	ldr	r1, [pc, #28]	; (801a51c <scalbnf+0x94>)
 801a500:	e7e4      	b.n	801a4cc <scalbnf+0x44>
 801a502:	3219      	adds	r2, #25
 801a504:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 801a508:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 801a50c:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 801a510:	e7e1      	b.n	801a4d6 <scalbnf+0x4e>
 801a512:	bf00      	nop
 801a514:	ffff3cb0 	.word	0xffff3cb0
 801a518:	7149f2ca 	.word	0x7149f2ca
 801a51c:	0da24260 	.word	0x0da24260

0801a520 <_init>:
 801a520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a522:	bf00      	nop
 801a524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a526:	bc08      	pop	{r3}
 801a528:	469e      	mov	lr, r3
 801a52a:	4770      	bx	lr

0801a52c <_fini>:
 801a52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a52e:	bf00      	nop
 801a530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a532:	bc08      	pop	{r3}
 801a534:	469e      	mov	lr, r3
 801a536:	4770      	bx	lr
